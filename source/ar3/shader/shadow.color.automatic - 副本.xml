<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
   <!--=====================================================-->
   <State name='fill_mode'   value='Face'/>
   <State name='cull_mode'   value='Front'/>
   <State name='depth_mode'  value='LessEqual'/>
   <State name='depth_write' value='Y'/>
   <State name='blend_mode'  value='Y' source='SrcAlpha' target='OneMinusSrcAlpha'/>
   <State name='alpha_test'  value='N'/>
   <!--=====================================================-->
   <Option name='shadow'   value='N'/>
   <Option name='lightmap' value='N'/>
   <Option name='fog'      value='N'/>
   <!--=====================================================-->
   <Parameter name='vc_light_depth'             format='Float4'/>
   <Parameter name='vc_model_matrix'            format='Float4x4'/>
   <Parameter name='vc_vp_matrix'               format='Float4x4'/>
   <Parameter name='vc_light_view_matrix'       format='Float4x4'/>
   <Parameter name='vc_light_vp_matrix'         format='Float4x4'/>
   <Parameter name='vc_camera_position'         format='Float3'/>
   <Parameter name='vc_light_direction'         format='Float3'/>
   <Parameter name='vc_bone_matrix'             format='Float4x4'/>
   <Parameter name='fc_camera_position'         format='Float3'/>
   <Parameter name='fc_light_direction'         format='Float3'/>
   <Parameter name='fc_light_depth'             format='Float4'/>
   <Parameter name='fc_color'                   format='Float4'/>
   <Parameter name='fc_alpha'                   format='Float4'/>
   <Parameter name='fc_vertex_color'            format='Float4'/>
   <Parameter name='fc_ambient_color'           format='Float4'/>
   <Parameter name='fc_diffuse_color'           format='Float4'/>
   <Parameter name='fc_specular_color'          format='Float4'/>
   <Parameter name='fc_specular'                format='Float4'/>
   <Parameter name='fc_specular_view_color'     format='Float4'/>
   <Parameter name='fc_specular_view'           format='Float4'/>
   <Parameter name='fc_reflect_color'           format='Float4'/>
   <!--=====================================================-->
   <Attribute name='va_position'    linker='position'    format='Float4'/>
   <Attribute name='va_color'       linker='color'       format='Byte4Normal'/>
   <Attribute name='va_coord'       linker='coord'       format='Float2'/>
   <Attribute name='va_normal'      linker='normal'      format='Float3'/>
   <Attribute name='va_binormal'    linker='binormal'    format='Float3'/>
   <Attribute name='va_tangent'     linker='tangent'     format='Float3'/>
   <!--=====================================================-->
   <Sampler name='fs_light_depth' linker='Shadow'        bind='N'/>
   <Sampler name='fs_diffuse'     linker='Diffuse'/>
   <Sampler name='fs_normal'      linker='Normal'/>
   <Sampler name='fs_specular'    linker='SpecularLevel'/>
   <Sampler name='fs_light'       linker='Light'/>
   <Sampler name='fs_environment' linker='Environment'/>
   <!--=====================================================-->
   <Source name='vertex'><![CDATA[
      //..........................................................
      // 变换矩阵声明
      uniform vec4 vc_light_depth;
      uniform mat4 vc_model_matrix;
      uniform mat4 vc_vp_matrix;
      uniform mat4 vc_light_view_matrix;
      uniform mat4 vc_light_vp_matrix;
      uniform vec3 vc_camera_position;
      uniform vec3 vc_light_direction;
      //..........................................................
      // 属性流声明
      attribute vec3 va_position;
      <shader:true source='vertex.attribute.color'>
      attribute vec4 va_color;
      </shader:true>
      <shader:true source='vertex.attribute.coord'>
      attribute vec2 va_coord;
      </shader:true>
      <shader:true source='vertex.attribute.normal'>
      attribute vec3 va_normal;
      <shader:true source='vertex.attribute.normal.full'>
      attribute vec3 va_binormal;
      attribute vec3 va_tangent;
      </shader:true>
      </shader:true>
      //..........................................................
      // 属性流声明
      varying vec4 v_model_position;
      varying vec4 v_light_view_position;
      varying vec4 v_light_position;
      <shader:true source='vertex.attribute.color'>
      varying vec4 v_color;
      </shader:true>
      <shader:true source='vertex.attribute.coord'>
      varying vec2 v_coord;
      </shader:true>
      <shader:true source='vertex.attribute.normal'>
      varying vec3 v_normal;
      <shader:true source='support.dump'>
      varying vec3 v_camera_ts;
      varying vec3 v_light_ts;
      </shader:true>
      </shader:true>
      //..........................................................
      // 处理
      void main(){
         // 计算模型坐标
         vec4 modelPosition = vec4(va_position, 1.0) * vc_model_matrix;
         // 计算最终坐标
         gl_Position = modelPosition * vc_vp_matrix;
         v_model_position = modelPosition;
         // 计算光源视角坐标
         vec4 viewPosition = modelPosition * vc_light_view_matrix;
         float depth = (viewPosition.z / viewPosition.w - vc_light_depth.z) * vc_light_depth.w;
         depth = max(depth, 0.0);
         depth = min(depth, 1.0);
         vec4 result = vec4(depth, depth, depth, depth) * vec4(1.0, 64.0, 64.0 * 64.0, 64.0 * 64.0 * 64.0);
         result = fract(result);
         vec4 temp = result.yzww * vec4(1.0 / 64.0, 1.0 / 64.0, 1.0 / 64.0, 0.0);
         result = result - temp;
         v_light_view_position = result;
         //v_light_view_position = vec4(depth, depth, depth, 1.0);
         // 计算光源屏幕纹理坐标
         vec4 lightPosition = modelPosition * vc_light_vp_matrix;
         lightPosition *= 1.0 / lightPosition.w;
         lightPosition.xy = lightPosition.xy * 0.5 + 0.5;
         v_light_position = lightPosition;
         // 设置颜色
         <shader:true source='vertex.attribute.color'>
         v_color = va_color;
         </shader:true>
         // 设置纹理
         <shader:true source='vertex.attribute.coord'>
         v_coord = va_coord;
         </shader:true>
         // 设置法线
         <shader:true source='vertex.attribute.normal'>
         vec3 normal = normalize((va_normal.xyz - 0.5) * 2.0 * mat3(vc_model_matrix));
         v_normal = normal;
         // 设置法线空间
         <shader:true source='support.dump'>
         vec3 binormal = normalize((va_binormal - 0.5) * 2.0 * mat3(vc_model_matrix));
         vec3 tangent = normalize((va_tangent - 0.5) * 2.0 * mat3(vc_model_matrix));
         mat3 matrixTs = mat3(tangent, binormal, normal);
         v_camera_ts = normalize((vc_camera_position - modelPosition.xyz) * matrixTs);
         v_light_ts = normalize(vc_light_direction * matrixTs);
         </shader:true>
         </shader:true>
      }
   ]]></Source>
   <Source name='fragment'><![CDATA[
      // 声明环境
      #ifdef GL_ES
      precision highp float;
      #endif
      //..........................................................
      // 声明常量
      uniform vec3 fc_camera_position;
      uniform vec3 fc_light_direction;
      uniform vec4 fc_light_depth;
      uniform vec4 fc_color;
      uniform vec4 fc_alpha;
      <shader:true source='vertex.attribute.color'>
      uniform vec4 fc_vertex_color;
      </shader:true>
      <shader:true source='support.ambient'>
      uniform vec4 fc_ambient_color;
      </shader:true>
      <shader:true source='support.diffuse'>
      uniform vec4 fc_diffuse_color;
      </shader:true>
      <shader:true source='support.specular'>
      uniform vec4 fc_specular_color;
      uniform vec4 fc_specular;
      </shader:true>
      <shader:true source='support.specular.view'>
      uniform vec4 fc_specular_view_color;
      uniform vec4 fc_specular_view;
      </shader:true>
      <shader:true source='support.environment'>
      uniform vec4 fc_reflect_color;
      </shader:true>
      //..........................................................
      // 声明插值器
      varying vec4 v_model_position;
      varying vec4 v_position;
      varying vec4 v_light_view_position;
      varying vec4 v_light_position;
      <shader:true source='vertex.attribute.color'>
      varying vec4 v_color;
      </shader:true>
      <shader:true source='vertex.attribute.coord'>
      varying vec2 v_coord;
      </shader:true>
      <shader:true source='vertex.attribute.normal'>
      varying vec3 v_normal;
      <shader:true source='support.diffuse.dump'>
      varying vec3 v_camera_ts;
      varying vec3 v_light_ts;
      </shader:true>
      </shader:true>
      //..........................................................
      // 声明取样器
      uniform sampler2D fs_light_depth;
      <shader:true source='support.ambient.sampler'>
      uniform sampler2D fs_diffuse;
      </shader:true>
      <shader:true source='support.diffuse.dump'>
      uniform sampler2D fs_normal;
      </shader:true>
      <shader:true source='support.specular'>
      uniform sampler2D fs_specular;
      </shader:true>
      <shader:true source='support.light'>
      uniform sampler2D fs_light;
      </shader:true>
      <shader:true source='support.environment'>
      uniform samplerCube fs_environment;
      </shader:true>
      //..........................................................
      // 逻辑处理
      void main(void){
         vec4 result = vec4(0.0, 0.0, 0.0, 1.0);
         vec4 lightConvert = vec4(1.0, 1.0 / 64.0, 1.0 / 64.0 / 64.0, 1.0 / 64.0 / 64.0 / 64.0);
         //............................................................
         // 计算阴影
         float shadowRate = 1.0;
         float viewDepth = dot(v_light_view_position, lightConvert) - 0.01;
         // 计算影子比率 (0,0)
         vec4 lightColor = texture2D(fs_light_depth, v_light_position.xy);
         float lightDepth = dot(lightColor, lightConvert);
         if(viewDepth > lightDepth){
            shadowRate -= 0.2;
         }
         // 计算影子比率 (-1, 1)
         lightColor = texture2D(fs_light_depth, v_light_position.xy + fc_light_depth.zx);
         lightDepth = dot(lightColor, lightConvert);
         if(viewDepth > lightDepth){
            shadowRate -= 0.1;
         }
         // 计算影子比率 (-1, 0)
         lightColor = texture2D(fs_light_depth, v_light_position.xy + fc_light_depth.zy);
         lightDepth = dot(lightColor, lightConvert);
         if(viewDepth > lightDepth){
            shadowRate -= 0.1;
         }
         // 计算影子比率 (-1, -1)
         lightColor = texture2D(fs_light_depth, v_light_position.xy + fc_light_depth.zz);
         lightDepth = dot(lightColor, lightConvert);
         if(viewDepth > lightDepth){
            shadowRate -= 0.1;
         }
         // 计算影子比率 (0, 1)
         lightColor = texture2D(fs_light_depth, v_light_position.xy + fc_light_depth.yx);
         lightDepth = dot(lightColor, lightConvert);
         if(viewDepth > lightDepth){
            shadowRate -= 0.1;
         }
         // 计算影子比率 (0, -1)
         lightColor = texture2D(fs_light_depth, v_light_position.xy + fc_light_depth.yz);
         lightDepth = dot(lightColor, lightConvert);
         if(viewDepth > lightDepth){
            shadowRate -= 0.1;
         }
         // 计算影子比率 ( 1, 1)
         lightColor = texture2D(fs_light_depth, v_light_position.xy + fc_light_depth.xx);
         lightDepth = dot(lightColor, lightConvert);
         if(viewDepth > lightDepth){
            shadowRate -= 0.1;
         }
         // 计算影子比率 ( 1, 0)
         lightColor = texture2D(fs_light_depth, v_light_position.xy + fc_light_depth.xy);
         lightDepth = dot(lightColor, lightConvert);
         if(viewDepth > lightDepth){
            shadowRate -= 0.1;
         }
         // 计算影子比率 ( 1,-1)
         lightColor = texture2D(fs_light_depth, v_light_position.xy + fc_light_depth.xz);
         lightDepth = dot(lightColor, lightConvert);
         if(viewDepth > lightDepth){
            shadowRate -= 0.1;
         }
         shadowRate = shadowRate * 0.5 + 0.5;
         //............................................................
         // 计算环境颜色
         <shader:true source='support.ambient'>
         <shader:true source='support.ambient.sampler'>
         vec4 color = texture2D(fs_diffuse, v_coord);
         if(color.a < fc_alpha.x){
            //discard;
         }
         </shader:true>
         <shader:false source='support.ambient.sampler'>
         vec4 color = vec4(1.0, 1.0, 1.0, 1.0);
         </shader:false>
         result.rgb += color.xyz * fc_ambient_color.rgb * shadowRate * 0.6;
         </shader:true>
         //............................................................
         // 计算散射颜色
         <shader:true source='support.diffuse'>
         <shader:true source='support.diffuse.dump'>
         vec4 normal = texture2D(fs_normal, v_coord);
         normal.xyz = normalize(normal.xyz * 2.0 - 1.0);
         float normalFactor = dot(normal.xyz, -v_light_ts);
         </shader:true>
         <shader:true source='support.diffuse.normal'>
         float normalFactor = dot(v_normal, fc_light_direction);
         </shader:true>
         normalFactor = max(normalFactor, 0.0);
         result.rgb += color.rgb * fc_diffuse_color.rgb * normalFactor * shadowRate * 1.6;
         </shader:true>
         //............................................................
         <shader:true source='support.specular|support.environment'>
         vec3 cameraDirection = normalize(fc_camera_position - v_model_position.xyz);
         </shader:true>
         //............................................................
         // 计算高光颜色
         <shader:true source='support.specular'>
         vec3 reflectionDirection = normalize(reflect(fc_light_direction, v_normal));
         float specularFactor = dot(cameraDirection, reflectionDirection);
         <shader:true source='support.specular.level'>
         specularFactor *= normal.w;
         </shader:true>
         //specularFactor = specularFactor * shadowRate;
         specularFactor = max(specularFactor, 0.0);
         specularFactor = min(specularFactor + 0.05, 1.0);
         specularFactor = pow(specularFactor, 30.0);
         //specularFactor = pow(specularFactor, fc_specular.y + 16.0);
         result.rgb += color.rgb * fc_specular_color.rgb * specularFactor * 1.2;
         </shader:true>
         //............................................................
         <shader:true source='support.environment'>
         vec3 reflectDirection = normalize(reflect(-cameraDirection, v_normal));
         vec4 environmentColor = textureCube(fs_environment, reflectDirection);
         <shader:true source='support.light'>
         vec4 light = texture2D(fs_light, v_coord);
         environmentColor *= light.g;
         </shader:true>
         result.rgb *= environmentColor.rgb * fc_reflect_color.rgb * 1.5;
         </shader:true>
         //............................................................
         // 计算颜色
         <shader:true source='vertex.attribute.color'>
         vec4 vertexColor = min(v_color, fc_color.y) - fc_color.x;
         vertexColor = vertexColor / (fc_color.y - fc_color.x);
         vertexColor = (vertexColor - fc_color.w) * fc_color.z;
         vertexColor += 1.0;
         result.rgb *= vertexColor.rgb;
         </shader:true>
         <shader:true source='support.alpha'>
         result.a = color.a * fc_alpha.z;
         </shader:true>
         //............................................................
         //gl_FragColor = result;
         //gl_FragColor = vec4(lightColor.xyz, 1.0);
         //gl_FragColor = vec4(v_light_view_position.xyz, 1.0);
         //gl_FragColor = vec4(normalFactor, normalFactor, normalFactor, 1.0);
         //gl_FragColor = vec4(viewDepth, viewDepth, viewDepth, 1.0);
         //gl_FragColor = vec4(lightDepth, lightDepth, lightDepth, 1.0);
         //gl_FragColor = vec4(shadowRate, shadowRate, shadowRate, 1.0);
         //gl_FragColor = vec4(specularFactor, specularFactor, specularFactor, 1.0);
         gl_FragColor = vec4(lightColor.xyz, 1.0);
      }
   ]]></Source>
</Configuration>
