<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
   <!--=====================================================-->
   <State name='fill_mode'   value='Face'/>
   <State name='cull_mode'   value='Front'/>
   <State name='depth_mode'  value='LessEqual'/>
   <State name='depth_write' value='Y'/>
   <State name='blend_mode'  value='Y' source='SrcAlpha' target='OneMinusSrcAlpha'/>
   <State name='alpha_test'  value='N'/>
   <!--=====================================================-->
   <Option name='shadow'   value='N'/>
   <Option name='lightmap' value='N'/>
   <Option name='fog'      value='N'/>
   <!--=====================================================-->
   <Parameter name='vc_light_depth'             format='Float4'/>
   <Parameter name='vc_model_matrix'            format='Float4x4'/>
   <Parameter name='vc_vp_matrix'               format='Float4x4'/>
   <Parameter name='vc_light_view_matrix'       format='Float4x4'/>
   <Parameter name='vc_light_vp_matrix'         format='Float4x4'/>
   <Parameter name='vc_camera_position'         format='Float3'/>
   <Parameter name='vc_light_direction'         format='Float3'/>
   <Parameter name='vc_bone_matrix'             format='Float4x4'/>
   <Parameter name='fc_camera_position'         format='Float3'/>
   <Parameter name='fc_light_direction'         format='Float3'/>
   <Parameter name='fc_light_depth'             format='Float4'/>
   <Parameter name='fc_color'                   format='Float4'/>
   <Parameter name='fc_alpha'                   format='Float4'/>
   <Parameter name='fc_vertex_color'            format='Float4'/>
   <Parameter name='fc_ambient_color'           format='Float4'/>
   <Parameter name='fc_diffuse_color'           format='Float4'/>
   <Parameter name='fc_specular_color'          format='Float4'/>
   <Parameter name='fc_specular'                format='Float4'/>
   <Parameter name='fc_specular_view_color'     format='Float4'/>
   <Parameter name='fc_specular_view'           format='Float4'/>
   <Parameter name='fc_reflect_color'           format='Float4'/>
   <!--=====================================================-->
   <Attribute name='va_position'    linker='position'    format='Float4'/>
   <Attribute name='va_color'       linker='color'       format='Byte4Normal'/>
   <Attribute name='va_coord'       linker='coord'       format='Float2'/>
   <Attribute name='va_normal'      linker='normal'      format='Float3'/>
   <Attribute name='va_binormal'    linker='binormal'    format='Float3'/>
   <Attribute name='va_tangent'     linker='tangent'     format='Float3'/>
   <!--=====================================================-->
   <Sampler name='fs_light_depth' linker='Shadow'        bind='N'/>
   <Sampler name='fs_diffuse'     linker='Diffuse'/>
   <Sampler name='fs_normal'      linker='Normal'/>
   <Sampler name='fs_specular'    linker='SpecularLevel'/>
   <Sampler name='fs_light'       linker='Light'/>
   <Sampler name='fs_environment' linker='Environment'/>
   <!--=====================================================-->
   <Source name='vertex'><![CDATA[
      //..........................................................
      // 变换矩阵声明
      uniform vec4 vc_light_depth;
      uniform mat4 vc_model_matrix;
      uniform mat4 vc_vp_matrix;
      uniform mat4 vc_light_view_matrix;
      uniform mat4 vc_light_vp_matrix;
      uniform vec3 vc_camera_position;
      uniform vec3 vc_light_direction;
      //..........................................................
      // 属性流声明
      attribute vec3 va_position;
      <shader:true source='vertex.attribute.color'>
      attribute vec4 va_color;
      </shader:true>
      <shader:true source='vertex.attribute.coord'>
      attribute vec2 va_coord;
      </shader:true>
      <shader:true source='vertex.attribute.normal'>
      attribute vec3 va_normal;
      <shader:true source='vertex.attribute.normal.full'>
      attribute vec3 va_binormal;
      attribute vec3 va_tangent;
      </shader:true>
      </shader:true>
      //..........................................................
      // 属性流声明
      varying vec4 v_model_position;
      varying vec4 v_light_view_position;
      varying vec4 v_light_position;
      <shader:true source='vertex.attribute.color'>
      varying vec4 v_color;
      </shader:true>
      <shader:true source='vertex.attribute.coord'>
      varying vec2 v_coord;
      </shader:true>
      <shader:true source='vertex.attribute.normal'>
      varying vec3 v_normal;
      <shader:true source='support.dump'>
      varying vec3 v_camera_ts;
      varying vec3 v_light_ts;
      </shader:true>
      </shader:true>
      //..........................................................
      // 处理
      void main(){
         // 计算模型坐标
         vec4 modelPosition = vec4(va_position, 1.0) * vc_model_matrix;
         // 计算最终坐标
         gl_Position = modelPosition * vc_vp_matrix;
         v_model_position = modelPosition;
         // 计算光源视角坐标
         vec4 viewPosition = modelPosition * vc_light_view_matrix;
         float depth = (viewPosition.z / viewPosition.w - vc_light_depth.z) * vc_light_depth.w;
         depth = max(depth, 0.0);
         depth = min(depth, 1.0);
         vec4 result = vec4(depth, depth, depth, depth) * vec4(1.0, 64.0, 64.0 * 64.0, 64.0 * 64.0 * 64.0);
         result = fract(result);
         vec4 temp = result.yzww * vec4(1.0 / 64.0, 1.0 / 64.0, 1.0 / 64.0, 0.0);
         result = result - temp;
         v_light_view_position = result;
         //v_light_view_position = vec4(depth, depth, depth, 1.0);
         // 计算光源屏幕纹理坐标
         vec4 lightPosition = modelPosition * vc_light_vp_matrix;
         lightPosition *= 1.0 / lightPosition.w;
         lightPosition.xy = lightPosition.xy * 0.5 + 0.5;
         v_light_position = lightPosition;
         // 设置颜色
         <shader:true source='vertex.attribute.color'>
         v_color = va_color;
         </shader:true>
         // 设置纹理
         <shader:true source='vertex.attribute.coord'>
         v_coord = va_coord;
         </shader:true>
         // 设置法线
         <shader:true source='vertex.attribute.normal'>
         vec3 normal = normalize((va_normal.xyz - 0.5) * 2.0 * mat3(vc_model_matrix));
         v_normal = normal;
         // 设置法线空间
         <shader:true source='support.dump'>
         vec3 binormal = normalize((va_binormal - 0.5) * 2.0 * mat3(vc_model_matrix));
         vec3 tangent = normalize((va_tangent - 0.5) * 2.0 * mat3(vc_model_matrix));
         mat3 matrixTs = mat3(tangent, binormal, normal);
         v_camera_ts = normalize((vc_camera_position - modelPosition.xyz) * matrixTs);
         v_light_ts = normalize(vc_light_direction * matrixTs);
         </shader:true>
         </shader:true>
      }
   ]]></Source>
   <Source name='fragment'><![CDATA[
      // 声明环境
      #ifdef GL_ES
      precision highp float;
      #endif
      //..........................................................
      // 声明常量
      uniform vec3 fc_camera_position;
      uniform vec3 fc_light_direction;
      uniform vec4 fc_light_depth;
      uniform vec4 fc_color;
      uniform vec4 fc_alpha;
      <shader:true source='vertex.attribute.color'>
      uniform vec4 fc_vertex_color;
      </shader:true>
      <shader:true source='support.ambient'>
      uniform vec4 fc_ambient_color;
      </shader:true>
      <shader:true source='support.diffuse'>
      uniform vec4 fc_diffuse_color;
      </shader:true>
      <shader:true source='support.specular'>
      uniform vec4 fc_specular_color;
      uniform vec4 fc_specular;
      </shader:true>
      <shader:true source='support.specular.view'>
      uniform vec4 fc_specular_view_color;
      uniform vec4 fc_specular_view;
      </shader:true>
      <shader:true source='support.environment'>
      uniform vec4 fc_reflect_color;
      </shader:true>
      //..........................................................
      // 声明插值器
      varying vec4 v_model_position;
      varying vec4 v_position;
      varying vec4 v_light_view_position;
      varying vec4 v_light_position;
      <shader:true source='vertex.attribute.color'>
      varying vec4 v_color;
      </shader:true>
      <shader:true source='vertex.attribute.coord'>
      varying vec2 v_coord;
      </shader:true>
      <shader:true source='vertex.attribute.normal'>
      varying vec3 v_normal;
      <shader:true source='support.diffuse.dump'>
      varying vec3 v_camera_ts;
      varying vec3 v_light_ts;
      </shader:true>
      </shader:true>
      //..........................................................
      // 声明取样器
      uniform sampler2D fs_light_depth;
      <shader:true source='support.ambient.sampler'>
      uniform sampler2D fs_diffuse;
      </shader:true>
      <shader:true source='support.diffuse.dump'>
      uniform sampler2D fs_normal;
      </shader:true>
      <shader:true source='support.specular'>
      uniform sampler2D fs_specular;
      </shader:true>
      <shader:true source='support.light'>
      uniform sampler2D fs_light;
      </shader:true>
      <shader:true source='support.environment'>
      uniform samplerCube fs_environment;
      </shader:true>
      //..........................................................
      // 逻辑处理
      void main(void){
         gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
      }
   ]]></Source>
</Configuration>
