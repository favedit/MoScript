var MO = new function MoSpace(){
   var o = this;
   o.version = '0.3.0';
   o.info    = new Object();
   o.Lang    = new function MoLangSpace(){return this;}
   o.Stream  = new function MoStreamSpace(){return this;}
   o.Core    = new function MoCoreSpace(){return this;}
   o.Gui     = new function MoGuiSpace(){return this;}
   o.Dui     = new function MoDuiSpace(){return this;}
   return o;
}
MO.initialize = function MO_initialize(){
   var o = this;
   var count = 0;
   for(var name in o){
      var value = o[name];
      if(value){
         if(value.constructor == Function){
            value.__name = name;
         }
      }
      count++;
   }
   o.info.count = count;
}
MO.release = function MO_release(){
   var o = this;
}
MO.RSingleton = function RSingleton(){
   var o = this;
   o._singleton = true;
   return o;
}
MO.TEnum = function TEnum(){
   var o = this;
   o.toDisplay = MO.TEnum_toDisplay;
   o.toValue   = MO.TEnum_toValue;
   return o;
}
MO.TEnum_toDisplay = function TEnum_toDisplay(value, defaultValue){
   var o = this;
   for(var name in o){
      var nameValue = o[name];
      if(nameValue.constructor != Function){
         if(nameValue == value){
            return name;
         }
      }
   }
   return defaultValue;
}
MO.TEnum_toValue = function TEnum_toValue(value, defaultValue){
   var o = this;
   var lowerValue = value.toLowerCase();
   for(var name in o){
      var nameValue = o[name];
      if(nameValue.constructor != Function){
         if(name.toLowerCase() == lowerValue){
            return o[name];
         }
      }
   }
   return defaultValue;
}
MO.ELogger = new function ELogger(){
   var o = this;
   MO.TEnum.call(o);
   o.Unknown = 0;
   o.Debug   = 1;
   o.Info    = 2;
   o.Warn    = 3;
   o.Error   = 4;
   o.Fatal   = 5;
   return o;
}
MO.EPlatform = new function EPlatform(){
   var o = this;
   MO.TEnum.call(o);
   o.Unknown = 0;
   o.Pc      = 1;
   o.Mobile  = 2;
   return o;
}
MO.EProcess = new function EProcess(){
   var o = this;
   MO.TEnum.call(o);
   o.Unknown = 0;
   o.Debug   = 1;
   o.Release = 2;
   return o;
}
MO.RRuntime = function RRuntime(){
   var o = MO.RSingleton.call(this);
   o._version    = 'mo';
   o._processCd  = MO.EProcess.Release;
   o._platformCd = MO.EPlatform.Pc;
   return o;
}
MO.RRuntime.prototype.version = function RRuntime_version(){
   return this._version;
}
MO.RRuntime.prototype.setVersion = function RRuntime_setVersion(version){
   this._version = version;
}
MO.RRuntime.prototype.isDebug = function RRuntime_isDebug(){
   return this._processCd == MO.EProcess.Debug;
}
MO.RRuntime.prototype.isRelease = function RRuntime_isRelease(){
   return this._processCd == MO.EProcess.Release;
}
MO.RRuntime.prototype.processCd = function RRuntime_processCd(){
   return this._processCd;
}
MO.RRuntime.prototype.setProcessCd = function RRuntime_setProcessCd(processCd){
   this._processCd = processCd;
}
MO.RRuntime.prototype.isPlatformPc = function RRuntime_isPlatformPc(){
   return this._platformCd == MO.EPlatform.Pc;
}
MO.RRuntime.prototype.isPlatformMobile = function RRuntime_isPlatformMobile(){
   return this._platformCd == MO.EPlatform.Mobile;
}
MO.RRuntime.prototype.platformCd = function RRuntime_platformCd(){
   return this._platformCd;
}
MO.RRuntime.prototype.setPlatformCd = function RRuntime_setPlatformCd(platformCd){
   this._platformCd = platformCd;
}
MO.RRuntime.prototype.empty = function RRuntime_empty(){
}
MO.RRuntime.prototype.nvl = function RRuntime_nvl(value, defaultValue){
   return (value != null) ? value : defaultValue;
}
MO.RRuntime.prototype.subString = function RRuntime_subString(value, begin, end){
   if(value == null){
      return value;
   }
   var left = 0;
   if(begin != null){
      var find = value.indexOf(begin);
      if(find != -1){
         left = find + begin.length;
      }
   }
   var right = value.length;
   if(end != null){
      var find = value.indexOf(end, length);
      if(find != -1){
         right = find;
      }
   }
   if(left >= right){
      return '';
   }
   return value.substring(left, right);
}
MO.RRuntime.prototype.className = function RRuntime_className(value){
   if(value){
      if(typeof(value) == 'function'){
         return this.subString(value.toString(), 'function ', '(');
      }
      var clazz = value.constructor;
      if(clazz){
         return this.subString(clazz.toString(), 'function ', '(');
      }
   }
   return null;
}
MO.RRuntime.prototype.sortComparerAsc = function RArray_sortComparerAsc(source, target, parameters){
   if(source > target){
      return 1;
   }else if(source < target){
      return -1;
   }else{
      return 0;
   }
}
MO.RRuntime.prototype.sortComparerDesc = function RArray_sortComparerDesc(source, target, parameters){
   if(source > target){
      return -1;
   }else if(source < target){
      return 1;
   }else{
      return 0;
   }
}
MO.RRuntime.prototype.pairSortMid = function RArray_pairSortMid(names, values, begin, end, comparer, parameters){
   var name = names[begin];
   if(values){
      var value = values[begin];
   }
   while(begin < end){
      while((begin < end) && (comparer(names[end], name, parameters) >= 0)){
         end--;
      }
      names[begin] = names[end];
      if(values){
         values[begin] = values[end];
      }
      while((begin < end) && (comparer(names[begin], name, parameters) <= 0)){
         begin++;
      }
      names[end] = names[begin];
      if(values){
         values[end] = values[begin];
      }
   }
   names[begin] = name;
   if(values){
      values[begin] = value;
   }
   return begin;
}
MO.RRuntime.prototype.pairSortSub = function RArray_pairSortSub(names, values, begin, end, comparer, parameters){
   var o = this;
   if(begin < end){
      var mid = o.pairSortMid(names, values, begin, end, comparer, parameters);
      o.pairSortSub(names, values, begin, mid - 1, comparer, parameters);
      o.pairSortSub(names, values, mid + 1, end, comparer, parameters);
   }
}
MO.RRuntime.prototype.pairSort = function RArray_pairSort(names, values, offset, count, comparer, parameters){
   var o = this;
   var begin = offset;
   var end = offset + count - 1;
   o.pairSortSub(names, values, begin, end, MO.Runtime.nvl(comparer, o.sortComparerAsc), parameters);
}
MO.Runtime = new MO.RRuntime();
MO.TAttributes = function TAttributes(){
   var o = this;
   MO.TDictionary.call(o);
   o.joinValue  = MO.TAttributes_joinValue;
   o.join       = MO.TAttributes_join;
   o.split      = MO.TAttributes_split;
   o.pack       = MO.TAttributes_pack;
   o.unpack     = MO.TAttributes_unpack;
   o.dump       = MO.TAttributes_dump;
   return o;
}
MO.TAttributes_joinValue = function TAttributes_joinValue(split){
   var o = this;
   var source = new MO.TString();
   var count = o._count;
   for(var i = 0; i < count; i++){
      if(i > 0){
         source.append(split);
      }
      source.append(o._values[i]);
   }
   return source.flush();
}
MO.TAttributes_join = function TAttributes_join(name, value){
   var o = this;
   var source = new MO.TString();
   if(!name){
      name = '=';
   }
   if(!value){
      value = ',';
   }
   var count = o._count;
   for(var i = 0; i < count; i++){
      if(i > 0){
         source.append(value);
      }
      source.append(o._names[i]);
      source.append(name);
      source.append(o._values[i]);
   }
   return source.flush();
}
MO.TAttributes_split = function TAttributes_split(source, name, value){
   var o = this;
   var items = source.split(value);
   var count = items.length;
   for(var i = 0; i < count; i++){
      var item = items[i];
      if(item.length){
         var codes = item.split(name);
         if(codes.length == 2){
            o.set(MO.Lang.String.trim(codes[0]), MO.Lang.String.trim(codes[1]));
         }else{
            o.set(MO.Lang.String.trim(item), '');
         }
      }
   }
}
MO.TAttributes_pack = function TAttributes_pack(){
   var o = this;
   var source = new MO.TString();
   var count = o._count;
   var names = o._names;
   var values = o._values;
   for(var i = 0; i < count; i++){
      var name = names[i];
      var value = values[i];
      var nameLength = name.length;
      source.append(nameLength.toString().length, nameLength, name);
      if(value != null){
         var value = value + '';
         var valueLength = value.length;
         source.append(valueLength.toString().length, valueLength, value);
      }else{
         source.append('0');
      }
   }
   return source.flush();
}
MO.TAttributes_unpack = function TAttributes_unpack(source){
   var o = this;
   o.count = 0;
   var position = 0;
   var sourceLength = source.length;
   while(position < sourceLength){
      var lengthLength = parseInt(source.substr(position++, 1));
      var length = parseInt(source.substr(position, lengthLength));
      var name = source.substr(position + lengthLength, length);
      position += lengthLength + length;
      lengthLength = parseInt(source.substr(position++, 1));
      var value = null;
      if(lengthLength > 0){
         length = parseInt(source.substr(position, lengthLength));
         value = source.substr(position + lengthLength, length);
         position += lengthLength + length;
      }
      o.set(name, value);
   }
}
MO.TAttributes_dump = function TAttributes_dump(){
   var o = this;
   var result = new MO.TString();
   var count = o._count;
   result.append(MO.Runtime.className(o), ' : ', count);
   if(count > 0){
      var names = o._names;
      var values = o._values;
      result.append(' (');
      for(var i = 0; i < count; i++){
         if(i > 0){
            result.append(', ');
         }
         result.append(names[i], '=', values[i]);
      }
      result.append(')');
   }
   return result.flush();
}
MO.TDictionary = function TDictionary(){
   var o = this;
   MO.TMap.call(o);
   o.sortByName = MO.TDictionary_sortByName;
   o.joinName   = MO.TDictionary_joinName;
   o.dump       = MO.TDictionary_dump;
   return o;
}
MO.TDictionary_sortByName = function TDictionary_sortByName(comparer, parameters){
   var o = this;
   MO.Runtime.pairSort(o._names, o._values, 0, o._count, comparer, parameters);
   o.rebuild();
}
MO.TDictionary_joinName = function TDictionary_joinName(split){
   var o = this;
   var source = new MO.TString();
   var count = o._count;
   for(var i = 0; i < count; i++){
      if(i > 0){
         source.append(split);
      }
      source.append(o._names[i]);
   }
   return source.flush();
}
MO.TDictionary_dump = function TDictionary_dump(){
   var o = this;
   var result = new MO.TString();
   var count = o._count;
   result.append(MO.Runtime.className(o), ': ', count);
   if(count > 0){
      var names = o._names;
      var values = o._values;
      result.append(' {\n');
      for(var i = 0; i < count; i++){
         result.append('   ', names[i], '=[', values[i], ']\n');
      }
      result.append('}');
   }
   return result.flush();
}
MO.TMap = function TMap(){
   var o = this;
   o._count        = 0;
   o._table        = new Object();
   o._names        = new Array();
   o._values       = new Array();
   o.isEmpty       = MO.TMap_isEmpty;
   o.count         = MO.TMap_count;
   o.contains      = MO.TMap_contains;
   o.containsValue = MO.TMap_containsValue;
   o.indexOf       = MO.TMap_indexOf;
   o.indexOfValue  = MO.TMap_indexOfValue;
   o.first         = MO.TMap_first;
   o.last          = MO.TMap_last;
   o.nameAt        = MO.TMap_nameAt;
   o.name          = MO.TMap_name;
   o.valueAt       = MO.TMap_valueAt;
   o.at            = MO.TMap_valueAt;
   o.value         = MO.TMap_value;
   o.setValueAt    = MO.TMap_setValueAt;
   o.setValue      = MO.TMap_setValue;
   o.get           = MO.TMap_get;
   o.set           = MO.TMap_set;
   o.setNvl        = MO.TMap_setNvl;
   o.assign        = MO.TMap_assign;
   o.append        = MO.TMap_append;
   o.insert        = MO.TMap_insert;
   o.remove        = MO.TMap_remove;
   o.removeName    = MO.TMap_removeName;
   o.removeValue   = MO.TMap_removeValue;
   o.rebuild       = MO.TMap_rebuild;
   o.invoke        = MO.TMap_invoke;
   o.clear         = MO.TMap_clear;
   o.toString      = MO.TMap_toString;
   o.dispose       = MO.TMap_dispose;
   return o;
}
MO.TMap_isEmpty = function TMap_isEmpty(){
   return this._count == 0;
}
MO.TMap_count = function TMap_count(){
   return this._count;
}
MO.TMap_contains = function TMap_contains(name){
   if(name != null){
      var index = this._table[name.toString().toLowerCase()]
      if(index != null){
         return true;
      }
   }
   return false;
}
MO.TMap_containsValue = function TMap_containsValue(value){
   var index = this.indexOfValue(value);
   return (index != -1);
}
MO.TMap_indexOf = function TMap_indexOf(name){
   if(name != null){
      var index = this._table[name.toString().toLowerCase()];
      if(index != null){
         return index;
      }
   }
   return -1;
}
MO.TMap_indexOfValue = function TMap_indexOfValue(value){
   var o = this;
   var count = o._count;
   if(count > 0){
      var values = o._values;
      for(var i = 0; i < count; i++){
         if(values[i] == value){
            return i;
         }
      }
   }
   return -1;
}
MO.TMap_first = function TMap_first(){
   var o = this;
   if(o._count > 0){
      return o._values[0];
   }
   return null;
}
MO.TMap_last = function TMap_last(){
   var o = this;
   if(o._count > 0){
      return o._values[o._count - 1];
   }
   return null;
}
MO.TMap_nameAt = function TMap_nameAt(index){
   return this._names[index];
}
MO.TMap_name = function TMap_name(index){
   return ((index >= 0) && (index < this._count)) ? this._names[index] : null;
}
MO.TMap_valueAt = function TMap_valueAt(index){
   return this._values[index];
}
MO.TMap_value = function TMap_value(index){
   var o = this;
   return ((index >= 0) && (index < o._count)) ? o._values[index] : null;
}
MO.TMap_setValueAt = function TMap_setValueAt(index, value){
   this._values[index] = value;
}
MO.TMap_setValue = function TMap_setValue(index, value){
   var o = this;
   if((index >= 0) && (index < o._count)){
      o._values[index] = value;
   }
}
MO.TMap_get = function TMap_get(name, defaultValue){
   var o = this;
   if(name != null){
      var i = o._table[name.toString().toLowerCase()];
      if(i != null){
         return o._values[i];
      }
   }
   return defaultValue;
}
MO.TMap_set = function TMap_set(name, value){
   var o = this;
   var nameString = name.toString();
   var code = nameString.toLowerCase();
   var index = o._table[code];
   if((index == null) || (index >= o._count)){
      index = o._count++;
      o._names[index] = nameString;
      o._table[code] = index;
   }
   o._values[index] = value;
}
MO.TMap_setNvl = function TMap_setNvl(name, value){
   if(value){
      this.set(name, value);
   }
}
MO.TMap_assign = function TMap_assign(map){
   var o = this;
   o.clear();
   o.append(map);
}
MO.TMap_append = function TMap_append(map){
   var o = this;
   if(map){
      var count = map.count();
      for(var i = 0; i < count; i++){
         var name = map.nameAt(i);
         var value = map.valueAt(i);
         o.set(name, value);
      }
   }
}
MO.TMap_insert = function TMap_insert(index, name, value){
   var o = this;
   var count = o._count;
   if((index >= 0) && (index <= count)){
      var names = o._names;
      var values = o._values;
      for(var i = count; i > index; i--){
         names[i] = names[i - 1];
         values[i] = values[i - 1];
      }
      names[index] = name;
      values[index] = value;
      o._count++;
      o.rebuild();
   }
}
MO.TMap_remove = function TMap_remove(index){
   var o = this;
   var value = null;
   var count = o._count;
   if((index >= 0) && (index < count)){
      var names = o._names;
      var values = o._values;
      value = values[index];
      for(var i = index; i < count; i++){
         names[i] = names[i + 1];
         values[i] = values[i + 1];
      }
      o._count--;
      o.rebuild();
   }
   return value;
}
MO.TMap_removeName = function TMap_removeName(name){
   var o = this;
   var index = o.indexOf(name);
   if(index != -1){
      return o.remove(index);
   }
   return null;
}
MO.TMap_removeValue = function TMap_removeValue(value){
   var o = this;
   var index = 0;
   var count = o._count;
   var names = o._names;
   var values = o._values;
   for(var i = 0; i < count; i++){
      var find = values[i];
      if(find != value){
         if(index != i){
            names[index] = names[i];
            values[index] = find;
         }
         index++;
      }
   }
   o._count = index;
   o.rebuild();
}
MO.TMap_rebuild = function TMap_rebuild(){
   var o = this;
   var table = o._table;
   for(var name in table){
      delete table[name];
   }
   var count = o._count;
   var names = o._names;
   for(var i = 0; i < count; i++){
      var code = names[i].toLowerCase();
      table[code] = i;
   }
}
MO.TMap_invoke = function TMap_invoke(methodName, parameter1, parameter2, parameter3, parameter4, parameter5){
   var o = this;
   var count = o._count;
   var values = o._values;
   for(var i = 0; i < count; i++){
      var value = values[i];
      var method = value[methodName];
      method.call(value, parameter1, parameter2, parameter3, parameter4, parameter5);
   }
}
MO.TMap_clear = function TMap_clear(){
   var o = this;
   o._count = 0;
   var table = o._table;
   for(var name in table){
      delete table[name];
   }
}
MO.TMap_toString = function TMap_toString(){
   return this.dump().toString();
}
MO.TMap_dispose = function TMap_dispose(flag){
   var o = this;
   var count = o._count;
   var table = o._table;
   if(table){
      for(var name in table){
         table[name] = null;
      }
      o._table = null;
   }
   var names = o._names;
   if(names){
      for(var i = 0; i < count; i++){
         names[i] = null;
      }
      o._names = null;
   }
   var values = o._values;
   if(values){
      for(var i = 0; i < count; i++){
         if(flag){
            MO.Lang.Object.dispose(values[i]);
         }
         values[i] = null;
      }
      o._values = null;
   }
   o._count = 0;
}
MO.TObjects = function TObjects(){
   var o = this;
   o._count     = 0;
   o._items     = new Array();
   o.isEmpty    = MO.TObjects_isEmpty;
   o.count      = MO.TObjects_count;
   o.items      = MO.TObjects_items;
   o.contains   = MO.TObjects_contains;
   o.indexOf    = MO.TObjects_indexOf;
   o.first      = MO.TObjects_first;
   o.last       = MO.TObjects_last;
   o.getAt      = MO.TObjects_getAt;
   o.at         = MO.TObjects_getAt;
   o.get        = MO.TObjects_get;
   o.setAt      = MO.TObjects_setAt;
   o.set        = MO.TObjects_set;
   o.assign     = MO.TObjects_assign;
   o.append     = MO.TObjects_append;
   o.insert     = MO.TObjects_insert;
   o.shift      = MO.TObjects_shift;
   o.unshift    = MO.TObjects_unshift;
   o.pop        = MO.TObjects_pop;
   o.push       = MO.TObjects_push;
   o.pushUnique = MO.TObjects_pushUnique;
   o.swap       = MO.TObjects_swap;
   o.sort       = MO.TObjects_sort;
   o.erase      = MO.TObjects_erase;
   o.remove     = MO.TObjects_remove;
   o.invoke     = MO.TObjects_invoke;
   o.clear      = MO.TObjects_clear;
   o.dispose    = MO.TObjects_dispose;
   o.dump       = MO.TObjects_dump;
   return o;
}
MO.TObjects_isEmpty = function TObjects_isEmpty(){
   return (this._count == 0);
}
MO.TObjects_count = function TObjects_count(){
   return this._count;
}
MO.TObjects_items = function TObjects_items(){
   return this._items;
}
MO.TObjects_contains = function TObjects_contains(value){
   return this.indexOf(value) != -1;
}
MO.TObjects_indexOf = function TObjects_indexOf(value){
   var o = this;
   var count = o._count;
   var items = o._items;
   for(var i = 0; i < count; i++){
      if(items[i] == value){
         return i;
      }
   }
   return -1;
}
MO.TObjects_first = function TObjects_first(){
   var o = this;
   return o._count ? o._items[0] : null;
}
MO.TObjects_last = function TObjects_last(){
   var o = this;
   return o._count ? o._items[o._count - 1] : null;
}
MO.TObjects_getAt = function TObjects_getAt(index){
   return this._items[index];
}
MO.TObjects_get = function TObjects_get(index){
   var o = this;
   return ((index >= 0) && (index < o._count)) ? o._items[index] : null;
}
MO.TObjects_setAt = function TObjects_setAt(index, value){
   this._items[index] = value;
}
MO.TObjects_set = function TObjects_set(index, value){
   var o = this;
   var items = o._items;
   if((index >= 0) && (index < o._count)){
      items[index] = value;
   }
}
MO.TObjects_assign = function TObjects_assign(values){
   var o = this;
   var items = o._items;
   var count = o._count = values.count();
   var valueItems = values.items();
   for(var i = 0; i < count; i++){
      items[i] = valueItems[i];
   }
}
MO.TObjects_append = function TObjects_append(values){
   var o = this;
   var count = values.count();
   for(var i = 0; i < count; i++){
      o.push(values.at(i));
   }
}
MO.TObjects_insert = function TObjects_insert(index, value){
   var o = this;
   var count = o._count;
   var items = o._items;
   if((index >= 0) && (index <= count)){
      for(var i = count; i > index; i--){
         items[i] = items[i - 1];
      }
      items[index] = value;
      o._count++;
   }
}
MO.TObjects_shift = function TObjects_shift(){
   return this.erase(0);
}
MO.TObjects_unshift = function TObjects_unshift(value){
   return this.insert(0, value);
}
MO.TObjects_pop = function TObjects_pop(){
   var o = this;
   var value = null;
   if(o._count){
      value = o._items[--o._count];
   }
   return value;
}
MO.TObjects_push = function TObjects_push(value){
   var o = this;
   var index = o._count++;
   o._items[index] = value;
   return index;
}
MO.TObjects_pushUnique = function TObjects_pushUnique(value){
   var o = this;
   var index = o.indexOf(value);
   if(index == -1){
      o.push(value);
   }
}
MO.TObjects_swap = function TObjects_swap(left, right){
   var o = this;
   var count = o._count;
   if((left >= 0) && (left < count) && (right >= 0) && (right < count) && (left != right)){
      var items = o._items;
      var value = items[left];
      items[left] = items[right];
      items[right] = value;
   }
}
MO.TObjects_sort = function TObjects_sort(callback){
   var o = this;
   var items = o._items;
   if(items.length != o._count){
      items.length = o._count;
   }
   items.sort(callback);
}
MO.TObjects_erase = function TObjects_erase(index){
   var o = this;
   var value = null;
   if((index >= 0) && (index < o._count)){
      var items = o._items;
      value = items[index];
      var count = --o._count;
      for(var i = index; i < count; i++){
         items[i] = items[i+1];
      }
      items[count] = null;
   }
   return value;
}
MO.TObjects_remove = function TObjects_remove(value){
   var o = this;
   var count = o._count;
   if(count){
      var index = 0;
      var items = o._items;
      for(var i = index; i < count; i++){
         if(items[i] != value){
            items[index++] = items[i];
         }
      }
      for(var i = index; i < count; i++){
         items[i] = null;
      }
      o._count = index;
   }
   return value;
}
MO.TObjects_invoke = function TObjects_invoke(methodName, parameter1, parameter2, parameter3, parameter4, parameter5){
   var o = this;
   var count = o._count;
   var items = o._items;
   for(var i = 0; i < count; i++){
      var item = items[i];
      var method = item[methodName];
      method.call(item, parameter1, parameter2, parameter3, parameter4, parameter5);
   }
}
MO.TObjects_clear = function TObjects_clear(){
   this._count = 0;
}
MO.TObjects_dispose = function TObjects_dispose(){
   var o = this;
   var items = o._items;
   for(var name in items){
      items[name] = null;
   }
   o._count = 0;
   o._items = null;
}
MO.TObjects_dump = function TObjects_dump(){
   var o = this;
   var count = othis._count;
   var result = new MO.TString();
   result.append(MO.Runtime.className(o), ':', count);
   if(count){
      for(var i = 0; i < count; i++){
         result.append(' [', o._items[i], ']');
      }
   }
   return result.flush();
}
MO.TString = function TString(){
   var o = this;
   o._count       = 0;
   o._memory      = new Array();
   o.isEmpty      = MO.TString_isEmpty;
   o.assign       = MO.TString_assign;
   o.append       = MO.TString_append;
   o.appendIf     = MO.TString_appendIf;
   o.appendArray  = MO.TString_appendArray;
   o.appendLine   = MO.TString_appendLine;
   o.appendRepeat = MO.TString_appendRepeat;
   o.push         = MO.TString_push;
   o.clear        = MO.TString_clear;
   o.toString     = MO.TString_toString;
   o.flush        = MO.TString_flush;
   o.dispose      = MO.TString_dispose;
   o.dump         = MO.TString_dump;
   return o;
}
MO.TString_isEmpty = function TString_isEmpty(){
   return this._count == 0;
}
MO.TString_assign = function TString_assign(){
   var o = this;
   o.clear();
   o.appendArray(arguments, 0, arguments.length);
}
MO.TString_append = function TString_append(){
   this.appendArray(arguments, 0, arguments.length);
}
MO.TString_appendIf = function TString_appendIf(flag){
   if(flag){
      this.appendArray(arguments, 1, arguments.length - 1);
   }
}
MO.TString_appendArray = function TString_appendArray(values, offset, count){
   var o = this;
   var memory = o._memory;
   for(var i = 0; i < count; i++){
      var value = values[offset++];
      if(value != null){
         memory[o._count++] = value;
      }
   }
}
MO.TString_appendRepeat = function TString_appendRepeat(value, count){
   var o = this;
   var memory = o._memory;
   for(var i = 0; i < count; i++){
      memory[o._count++] = value;
   }
}
MO.TString_appendLine = function TString_appendLine(){
   var o = this;
   o.appendArray(arguments, 0, arguments.length);
   o._memory[o._count++] = '\r\n';
}
MO.TString_push = function TString_push(){
   this.appendArray(arguments, 0, arguments.length);
}
MO.TString_clear = function TString_clear(){
   this._count = 0;
}
MO.TString_toString = function TString_toString(){
   var o = this;
   var memory = o._memory;
   if(memory.length != o._count){
      memory = memory.slice(0, this._count);
   }
   return memory.join('');
}
MO.TString_flush = function TString_flush(){
   var o = this;
   var result = o.toString();
   o.dispose();
   return result;
}
MO.TString_dispose = function TString_dispose(){
   var o = this;
   o._count = 0;
   var memory = o._memory;
   if(memory){
      var count = memory.length;
      for(var i = 0; i < count; i++){
         memory[i] = null;
      }
      o._memory = null;
   }
}
MO.TString_dump = function TString_dump(){
   var source = this.toString();
   return MO.Runtime.className(o) + ':' + source.length + '[' + source + ']';
}
MO.RAssert = function RAssert(){
   var o = MO.RSingleton.call(this);
   o.debugBegin = MO.Runtime.empty;
   o.debugEnd   = MO.Runtime.empty;
   return o;
}
MO.RAssert.prototype.isTrue = function RAssert_isTrue(value){
   if(!value){
      throw new Error('Assert ture failure.');
   }
}
MO.RAssert.prototype.isFalse = function RAssert_isFalse(value){
   if(value){
      throw new Error('Assert false failure.');
   }
}
MO.RAssert.prototype.debug = function RAssert_debug(value){
   return value;
}
MO.RAssert.prototype.debugTrue = function RAssert_debugTrue(value){
   if(!value){
      throw new Error('Assert true failure.');
   }
}
MO.RAssert.prototype.debugFalse = function RAssert_debugFalse(value){
   if(value){
      throw new Error('Assert false failure.');
   }
}
MO.RAssert.prototype.debugNull = function RAssert_debugNull(value){
   if(value != null){
      throw new Error('Assert null failure.');
   }
}
MO.RAssert.prototype.debugNotNull = function RAssert_debugNotNull(value){
   if(value == null){
      throw new Error('Assert not null failure.');
   }
}
MO.RAssert.prototype.debugEmpty = function RAssert_debugEmpty(value){
   if((value != null) && (value.length != 0)){
      throw new Error('Assert empty failure.');
   }
}
MO.RAssert.prototype.debugNotEmpty = function RAssert_debugNotEmpty(value){
   if(value == null){
      throw new Error('Assert not empty failure, value is null.');
   }
   if(value.length == 0){
      throw new Error('Assert not empty failure, value length is empty.');
   }
}
MO.Assert = new MO.RAssert();
MO.EScope = new function EScope(){
   var o = this;
   MO.TEnum.call(o);
   o.Unknown = 0;
   o.Local   = 1;
   o.Session = 2;
   o.Global  = 3;
   return o;
}
MO.TArray = function TArray(length){
   var o = this;
   o._length   = MO.Runtime.nvl(length, 0);
   o._memory   = new Array();
   o.isEmpty   = MO.TArray_isEmpty;
   o.length    = MO.TArray_length;
   o.setLength = MO.TArray_setLength;
   o.memory    = MO.TArray_memory;
   o.contains  = MO.TArray_contains;
   o.indexOf   = MO.TArray_indexOf;
   o.get       = MO.TArray_get;
   o.set       = MO.TArray_set;
   o.push      = MO.TArray_push;
   o.swap      = MO.TArray_swap;
   o.sort      = MO.TArray_sort;
   o.erase     = MO.TArray_erase;
   o.remove    = MO.TArray_remove;
   o.compress  = MO.TArray_compress;
   o.clear     = MO.TArray_clear;
   o.dispose   = MO.TArray_dispose;
   o.dump      = MO.TArray_dump;
   return o;
}
MO.TArray_isEmpty = function TArray_isEmpty(){
   return this._length == 0;
}
MO.TArray_length = function TArray_length(){
   return this._length;
}
MO.TArray_setLength = function TArray_setLength(length){
   this._length = length;
}
MO.TArray_memory = function TArray_memory(){
   return this._memory;
}
MO.TArray_contains = function TArray_contains(value){
   return this.indexOf(value) != -1;
}
MO.TArray_indexOf = function TArray_indexOf(value){
   var o = this;
   var count = o._length;
   for(var i = 0; i < count; i++){
      if(o._memory[i] == value){
         return i;
      }
   }
   return -1;
}
MO.TArray_get = function TArray_get(index){
   return ((index >= 0) && (index < this._length)) ? this._memory[index] : null;
}
MO.TArray_set = function TArray_set(index, value){
   var o = this;
   if ((index >= 0) && (index < o._length)) {
      o._memory[index] = value;
   }
}
MO.TArray_push = function TArray_push(){
   var o = this;
   var count = arguments.length;
   for(var i = 0; i < count; i++){
      o._memory[o._length++] = arguments[i];
   }
}
MO.TArray_swap = function TArray_swap(left, right){
   var o = this;
   var count = o._length;
   if((left >= 0) && (left < count) && (right >= 0) && (right < count) && (left != right)){
      var memory = o._memory;
      var value = memory[left];
      memory[left] = memory[right];
      memory[right] = value;
   }
}
MO.TArray_sort = function TArray_sort(){
   this._memory.sort();
}
MO.TArray_erase = function TArray_erase(index){
   var o = this;
   var value = null;
   var count = o._count;
   if((index >= 0) && (index < count)){
      value = o._memory[index];
      for(var i = index; i < count; i++){
         o._memory[i] = o._memory[i + 1];
      }
      o._length--;
   }
   return value;
}
MO.TArray_remove = function TArray_remove(value){
   var o = this;
   var index = 0;
   var memory = o._memory;
   var count = o._length;
   for(var i = 0; i < count; i++){
      if(memory[i] != value){
         memory[index++] = memory[i];
      }
   }
   o._length = index;
}
MO.TArray_compress = function TArray_compress(){
   var o = this;
   var index = 0;
   var count = o._length;
   var memory = o._memory;
   for(var i = 0; i < count; i++){
      var value = memory[i];
      if(value != null){
         memory[index++] = value;
      }
   }
   o._length = index;
}
MO.TArray_clear = function TArray_clear(){
   this._length = 0;
}
MO.TArray_dispose = function TArray_dispose(){
   var o = this;
   o._length = 0;
   o._memory = null;
}
MO.TArray_dump = function TArray_dump(){
   var o = this;
   var result = new MO.TString();
   var count = o._length;
   result.append(MO.Runtime.className(o), ':', count);
   if(count > 0){
      var memory = o._memory;
      for(var i = 0; i < count; i++){
         result.append(' [', memory[i], ']');
      }
   }
   return result.flush();
}
MO.RMemory = function RMemory(){
   var o = MO.RSingleton.call(this);
   o._entryUnused = null;;
   o._pools       = new Object();
   return o;
}
MO.RMemory.prototype.entryAlloc = function RMemory_entryAlloc(){
   var o = this;
   var entry = null;
   var unused = o._entryUnused;
   if(unused){
      entry = unused;
      o._entryUnused = unused.next;
   }else{
      entry = new MO.SMemoryPoolEntry();
   }
   return entry;
}
MO.RMemory.prototype.entryFree = function RMemory_entryFree(entry){
   var o = this;
   entry.next = o._entryUnused;
   o._entryUnused = entry;
}
MO.RMemory.prototype.alloc = function RMemory_alloc(clazz){
   var o = this;
   var className = MO.Runtime.className(clazz);
   var pools = o._pools;
   var pool = pools[className];
   if(!pool){
      pool = new MO.TMemoryPool();
      pool._constructor = clazz;
      pools[className] = pool;
   }
   var value = pool.alloc();
   return value;
}
MO.RMemory.prototype.free = function RMemory_free(value){
   var pool = value.__pool;
   pool.free(value);
   if(value.free){
      value.free();
   }
}
MO.RMemory.prototype.refresh = function RMemory_refresh(){
   CollectGarbage();
}
MO.Memory = new MO.RMemory();
MO.SMemoryPoolEntry = function SMemoryPoolEntry(){
   var o = this;
   o.next    = null;
   o.value   = null;
   o.dispose = MO.SMemoryPoolEntry_dispose;
   return o;
}
MO.SMemoryPoolEntry_dispose = function SMemoryPoolEntry_dispose(){
   var o = this;
   var value = o.value;
   if(value){
      value.__pool = null;
      value.dispose();
   }
   o.next = null;
   o.value = null;
}
MO.TMemoryPool = function TMemoryPool(){
   var o = this;
   o._constructor = null;
   o._unused      = null;
   o._createCount = 0;
   o._allocCount  = 0;
   o._freeCount   = 0;
   o.alloc        = MO.TMemoryPool_alloc;
   o.free         = MO.TMemoryPool_free;
   o.dispose      = MO.TMemoryPool_dispose;
   o.dump         = MO.TMemoryPool_dump
   return o;
}
MO.TMemoryPool_alloc = function TMemoryPool_alloc(){
   var o = this;
   var value = null;
   var unused = o._unused;
   if(unused){
      value = unused.value;
      o._unused = unused.next;
      MO.Memory.entryFree(unused);
   }else{
      value = new o._constructor();
      value.__pool = o;
      o._createCount++;
   }
   o._allocCount++;
   return value;
}
MO.TMemoryPool_free = function TMemoryPool_free(value){
   var o = this;
   var entry = MO.Memory.entryAlloc();
   entry.value = value;
   entry.next = o._unused;
   o._unused = entry;
   o._freeCount++;
}
MO.TMemoryPool_dispose = function TMemoryPool_dispose(){
   var entry = this._unused;
   while(entry){
      var current = entry;
      entry = current.next;
      current.dispose();
      MO.Memory.entryFree(current);
   }
}
MO.TMemoryPool_dump = function TMemoryPool_dump(){
   var o = this;
   var result = new MO.TString();
   result.append('Pool:');
   result.append('create=', o._createCount);
   result.append(', alloc=', o._allocCount);
   result.append(', free=', o._freeCount);
   return result.flush();
}
MO.SLooperEntry = function SLooperEntry(){
   var o = this;
   o.prior   = null;
   o.next    = null;
   o.value   = null;
   o.dispose = MO.SLooperEntry_dispose;
   return o;
}
MO.SLooperEntry_dispose = function SLooperEntry_dispose(){
   var o = this;
   o.prior = null;
   o.next = null;
   o.value = null;
}
MO.TLooper = function TLooper(){
   var o = this;
   o._count             = 0;
   o._recordCount       = 0;
   o._current           = null;
   o.innerPush          = MO.TLooper_innerPush;
   o.innerRemove        = MO.TLooper_innerRemove;
   o.innerRemoveCurrent = MO.TLooper_innerRemoveCurrent;
   o.innerRemoveValue   = MO.TLooper_innerRemoveValue;
   o.isEmpty            = MO.TLooper_isEmpty;
   o.count              = MO.TLooper_count;
   o.record             = MO.TLooper_record;
   o.unrecord           = MO.TLooper_unrecord;
   o.contains           = MO.TLooper_contains;
   o.current            = MO.TLooper_current;
   o.next               = MO.TLooper_next;
   o.push               = MO.TLooper_push;
   o.pushUnique         = MO.TLooper_pushUnique;
   o.removeCurrent      = MO.TLooper_removeCurrent;
   o.remove             = MO.TLooper_remove;
   o.clear              = MO.TLooper_clear;
   o.dispose            = MO.TLooper_dispose;
   o.dump               = MO.TLooper_dump;
   return o;
}
MO.TLooper_innerPush = function TLooper_innerPush(entry){
   var o = this;
   var current = o._current;
   if(current){
      var prior = current.prior;
      entry.prior = prior;
      entry.next = current;
      prior.next = entry;
      current.prior = entry;
   }else{
      entry.prior = entry;
      entry.next = entry;
      o._current = entry;
   }
   o._count++;
}
MO.TLooper_innerRemove = function TLooper_innerRemove(entry){
   var o = this;
   var prior = entry.prior;
   var next = entry.next;
   prior.next = next;
   next.prior = prior;
   o._count--;
   if(o._count > 0){
      o._current = next;
   }else{
      o._current = null;
   }
   MO.Memory.free(entry);
}
MO.TLooper_innerRemoveCurrent = function TLooper_innerRemoveCurrent(){
   var o = this;
   var value = null;
   if(o._count > 0){
      var current = o._current;
      value = current.value;
      o.innerRemove(current);
   }
   return value;
}
MO.TLooper_innerRemoveValue = function TLooper_innerRemoveValue(value){
   var o = this;
   if(o._count > 0){
      if(o._current.value == value){
         o.innerRemoveCurrent();
         return;
      }
      var current = o._current;
      var entry = current.next;
      while(entry != current){
         if(entry.value == value){
            o.innerRemove(entry);
            o._current = current;
            return;
         }
         entry = entry.next;
      }
   }
}
MO.TLooper_isEmpty = function TLooper_isEmpty(){
   return this._count == 0;
}
MO.TLooper_count = function TLooper_count(){
   return this._count;
}
MO.TLooper_record = function TLooper_record(){
   var o = this;
   o._recordCount = o._count;
}
MO.TLooper_unrecord = function TLooper_unrecord(v){
   this._recordCount = -1;
}
MO.TLooper_contains = function TLooper_contains(value){
   var o = this;
   if(o._current){
      var entry = o._current;
      var count = o._count;
      for(var i = 0; i < count; i++){
         if(entry.value == value){
            return true;
         }
         entry = entry.next;
      }
   }
   return false;
}
MO.TLooper_current = function TLooper_current(){
   var entry = this._current;
   return entry ? entry.value : null;
}
MO.TLooper_next = function TLooper_next(){
   var o = this;
   if(o._current){
      o._current = o._current.next;
   }
   var count = o._recordCount;
   if(count > 0){
      o._recordCount--;
   }else if(count == 0){
      return null;
   }
   return o._current ? o._current.value : null;
}
MO.TLooper_push = function TLooper_push(value){
   var entry = MO.Memory.alloc(MO.SLooperEntry);
   entry.value = value;
   this.innerPush(entry);
}
MO.TLooper_pushUnique = function TLooper_pushUnique(value){
   var o = this;
   if(!o.contains(value)){
      o.push(value);
   }
}
MO.TLooper_removeCurrent = function TLooper_removeCurrent(){
   return this.innerRemoveCurrent();
}
MO.TLooper_remove = function TLooper_remove(p){
   this.innerRemoveValue(p);
}
MO.TLooper_clear = function TLooper_clear(){
   var o = this;
   var entry = o._current;
   if(entry){
      entry.prior.next = null;
      while(entry){
         var next = entry.next;
         MO.Memory.free(next);
         entry = next;
      }
   }
   o._count = 0;
   o._current = null;
}
MO.TLooper_dispose = function TLooper_dispose(){
   this.clear();
}
MO.TLooper_dump = function TLooper_dump(){
   var o = this;
   var count = o._count;
   var result = new MO.TString();
   result.append(MO.Class.name(this), ': ', count);
   if(count > 0){
      var entry = o._current;
      for(var i = 0; i < count; i++){
         result.append(' [', entry.value, ']');
         entry = entry.next;
      }
   }
   return result.flush();
}
MO.RGlobal = function RGlobal(){
   var o = MO.RSingleton.call(this);
   o._instances = new MO.TDictionary();
   return o;
}
MO.RGlobal.prototype.get = function RGlobal_get(name){
   var global = this;
   if(top.MO){
      if(top.MO.Global){
         global = top.MO.Global;
      }
   }
   return global._instances.get(name);
}
MO.RGlobal.prototype.set = function RGlobal_set(name, value){
   var global = this;
   if(top.MO){
      if(top.MO.Global){
         global = top.MO.Global;
      }
   }
   return global._instances.set(name, value);
}
MO.Global = new MO.RGlobal();
MO.AAnnotation = function AAnnotation(name){
   var o = this;
   o._clazz        = null;
   o._annotationCd = null;
   o._inherit      = false;
   o._duplicate    = false;
   o._ordered      = false;
   o._name         = name;
   o.clazz         = MO.AAnnotation_clazz;
   o.annotationCd  = MO.AAnnotation_annotationCd;
   o.isInherit     = MO.AAnnotation_isInherit;
   o.isDuplicate   = MO.AAnnotation_isDuplicate;
   o.isOrdered     = MO.AAnnotation_isOrdered;
   o.name          = MO.AAnnotation_name;
   o.code          = MO.AAnnotation_code;
   o.value         = MO.AAnnotation_value;
   return o;
}
MO.AAnnotation_clazz = function AAnnotation_clazz(){
   return this._clazz;
}
MO.AAnnotation_annotationCd = function AAnnotation_annotationCd(){
   return this._annotationCd;
}
MO.AAnnotation_isInherit = function AAnnotation_isInherit(){
   return this._inherit;
}
MO.AAnnotation_isDuplicate = function AAnnotation_isDuplicate(){
   return this._duplicate;
}
MO.AAnnotation_isOrdered = function AAnnotation_isOrdered(){
   return this._ordered;
}
MO.AAnnotation_name = function AAnnotation_name(){
   return this._name;
}
MO.AAnnotation_code = function AAnnotation_code(){
   return this._name;
}
MO.AAnnotation_value = function AAnnotation_value(){
   return null;
}
MO.AGetSet = function AGetSet(name, linker){
   var o = this;
   MO.ASource.call(o, name, MO.ESource.GetSet, linker);
   o.build = MO.AGetSet_build;
   return o;
}
MO.AGetSet_build = function AGetSet_build(clazz, instance){
   var o = this;
   var getName = o._code;
   instance[getName] = MO.Method.makePropertyGet(o._name, getName);
   var setName = 'set' + o._linker;
   instance[setName] = MO.Method.makePropertySet(o._name, setName);
}
MO.AGetter = function AGetter(name, linker){
   var o = this;
   MO.ASource.call(o, name, MO.ESource.Get, linker);
   o._linker = linker;
   o.build   = MO.AGetter_build;
   return o;
}
MO.AGetter_build = function AGetter_build(clazz, instance){
   var o = this;
   var getName = o._linker ? o._linker : o._code;
   instance[getName] = MO.Method.makePropertyGet(o._name, getName);
}
MO.ASetter = function ASetter(name, linker){
   var o = this;
   MO.ASource.call(o, name, MO.ESource.Set, linker);
   o.build = MO.ASetter_build;
   return o;
}
MO.ASetter_build = function ASetter_build(clazz, instance){
   var o = this;
   var setName = 'set' + o._linker;
   instance[setName] = MO.Method.makePropertySet(o._name, setName);
}
MO.ASource = function ASource(name, typeCd, linker){
   var o = this;
   MO.AAnnotation.call(o, name);
   o._inherit      = false;
   o._annotationCd = MO.EAnnotation.Source;
   o._typeCd       = typeCd;
   o._code         = null;
   o._linker       = null;
   o.build         = MO.ASource_build;
   o.toString      = MO.ASource_toString;
   var name = o._name;
   if(MO.Lang.String.startsWith(name, '_')){
      name = name.substring(1);
   }
   o._code = name;
   if(linker == null){
      o._linker = MO.Lang.String.firstUpper(name);
   }else{
      o._linker = linker;
   }
   return o;
}
MO.ASource_build = function ASource_build(){
}
MO.ASource_toString = function ASource_toString(){
   return '<' + this._annotationCd + ',linker=' + this._linker + '>';
}
MO.AVirtual = function AVirtual(name, linker){
   var o = this;
   MO.ASource.call(o, name, MO.ESource.Virtual, linker);
   o.build   = MO.AVirtual_build;
   return o;
}
MO.AVirtual_build = function AVirtual_build(clazz, instance){
   var o = this;
   instance[o._name] = MO.Method.makeVirtual(o._clazz, o._name);
}
MO.EAnnotation = new function EAnnotation(){
   var o = this;
   o.Constructor = 'constructor';
   o.Dispose     = 'dispose';
   o.Source      = 'source';
   o.Property    = 'property';
   o.Persistence = 'persistence';
   o.Event       = 'enum';
   o.Event       = 'event';
   o.Linker      = 'linker';
   o.Style       = 'style';
   o.StyleIcon   = 'icon';
   return o;
}
MO.EDataType = new function EDataType(){
   var o = this;
   o.Unknown = 0;
   o.Boolean = 1;
   o.Int8 = 1;
   o.Int16 = 2;
   o.Int32 = 3;
   o.Int64 = 4;
   o.Uint8 = 5;
   o.Uint16 = 6;
   o.Uint32 = 7;
   o.Uint64 = 8;
   o.Float16 = 9;
   o.Float32 = o.Float = 10;
   o.Float64 = o.Double = 11;
   o.String = 12;
   o.Struct = 13;
   o.Object = 14;
   o.Array = 15;
   o.Objects = 16;
   o.Dictionary = 17;
   return o;
}
MO.EEndian = new function EEndian(){
   var o = this;
   o.Big    = 0;
   o.Little = 1;
   return o;
}
MO.ESource = new function ESource(){
   var o = this;
   o.Virtual  = 'virtual';
   o.Get      = 'get';
   o.Set      = 'set';
   o.GetSet   = 'getset';
   o.Listener = 'listener';
   return o;
}
MO.SLogger = function SLogger(){
   var o = this;
   o.message = null;
   return o;
}
MO.TClass = function TClass(){
   var o = this;
   o.__disposed     = true;
   o._abstract      = false;
   o._annotations   = new Object();
   o._attributes    = new Object();
   o._styles        = new Array();
   o._base          = null;
   o._clazz         = null;
   o._parent        = null;
   o._instance      = null;
   o._pool          = new MO.TMemoryPool();
   o.name           = null;
   o.register       = MO.TClass_register;
   o.assign         = MO.TClass_assign;
   o.annotations    = MO.TClass_annotations;
   o.annotation     = MO.TClass_annotation;
   o.annotationFind = MO.TClass_annotationFind;
   o.attributeFind  = MO.TClass_attributeFind;
   o.style          = MO.TClass_style;
   o.build          = MO.TClass_build;
   o.newInstance    = MO.TClass_newInstance;
   o.free           = MO.TClass_free;
   o.alloc          = MO.TClass_alloc;
   return o;
}
MO.TClass_register = function TClass_register(annotation){
   var o = this;
   annotation._clazz = o;
   var annotationCd = annotation.annotationCd();
   var ordered = annotation.isOrdered();
   var name = annotation.name();
   var code = annotation.code();
   if(!annotationCd || !code){
      throw new MO.TError(o, "Unknown annotation. (class={1}, annotation={2}, name={3}, code={4})", MO.Class.dump(o), annotation, name, code);
   }
   var annotations = o._annotations[annotationCd];
   if(!annotations){
      if(ordered){
         annotations = new MO.TObjects();
      }else{
         annotations = new Object();
      }
      o._annotations[annotationCd] = annotations;
   }
   if(!annotation._duplicate){
      if(annotations[code]){
         throw new MO.TError(o, "Duplicate annotation. (class={1}, annotation={2}, name={3}, code={4}, value={5})", MO.Class.dump(o), annotation, name, code, annotation.toString());
      }
   }
   if(ordered){
      annotations.push(annotation);
   }else{
      annotations[code] = annotation;
   }
   o._attributes[name] = annotation;
}
MO.TClass_assign = function TClass_assign(clazz){
   var o = this;
   for(var annotationName in clazz._annotations){
      var clazzAnnotations = clazz._annotations[annotationName];
      var annotations = o._annotations[annotationName];
      if(!annotations){
         annotations = o._annotations[annotationName] = new clazzAnnotations.constructor();
      }
      if(clazzAnnotations.constructor == MO.TObjects){
         annotations.append(clazzAnnotations);
      }else{
         for(var name in clazzAnnotations){
            var annotation = clazzAnnotations[name];
            if(!annotation.isDuplicate()){
               if(annotations[name]){
                  throw new MO.TError(o, "Duplicate annotation. (annotation={1}, {2}.{3}={4}.{5}, source={6})", annotationName, o.name, name, clazz.name, name, annotation.toString());
               }
            }
            if(annotation._inherit){
               annotations[name] = annotation;
            }
         }
      }
   }
   for(var name in clazz._attributes){
      var attribute = clazz._attributes[name];
      if(attribute.construct != Function){
         o._attributes[name] = clazz._attributes[name];
      }
   }
}
MO.TClass_annotations = function TClass_annotations(annotationCd){
   var o = this;
   var annotation = o._annotations[annotationCd];
   if(!annotation){
      MO.Logger.fatal(o, null, "Can't find annotations. (annotation_cd={1}, class={2})", annotationCd, o.name);
   }
   return annotation;
}
MO.TClass_annotation = function TClass_annotation(annotationCd, name){
   var o = this;
   var annotation = null;
   var annotations = o._annotations[annotationCd];
   if(annotations){
      annotation = annotations[name];
   }
   if(!annotation){
      MO.Logger.fatal(o, null, "Can't find annotation. (annotation_cd={1}, name={2}, class={3})", annotationCd, name, o.name);
   }
   return annotation;
}
MO.TClass_annotationFind = function TClass_annotationFind(p){
   var o = this;
   for(var name in o._annotations){
      var annotations = o._annotations[name];
      if(annotations){
         var annotation = annotations[p];
         if(annotation != null){
            if(annotation.constructor != Function){
               return annotation;
            }
         }
      }
   }
   return null;
}
MO.TClass_attributeFind = function TClass_attributeFind(p){
   var attribute = this._attributes[p];
   if(attribute){
      if(attribute.constructor != Function){
         return attribute;
      }
   }
   return null;
}
MO.TClass_style = function TClass_style(name){
   var o = this;
   var styles = o._styles;
   if(styles[name]){
      return styles[name];
   }
   var annotation = null;
   var find = o;
   while(find){
      var annotations = find._annotations[MO.EAnnotation.Style];
      if(annotations){
         annotation = annotations[name];
         if(annotation){
            break;
         }
      }
      find = find._parent;
   }
   if(!annotation){
      MO.Logger.fatal(o, null, "No register style annotation. (class={1}, name={2})", o.name, o.name + '_' + name);
   }
   var styleName = find.name + '_' + annotation.style();
   styles[name] = styleName;
   return styleName;
}
MO.TClass_build = function TClass_build(){
   var o = this;
   var instance = o._instance;
   for(var name in instance){
      var value = instance[name];
      if(value != null){
         if((value.constructor == Function) && value.__virtual){
            o._abstract = true;
            break;
         }
      }
   }
   var properties = o._annotations[MO.EAnnotation.Property];
   if(properties){
      for(var name in properties){
         var property = properties[name];
         property.build(instance);
      }
   }
   var sources = o._annotations[MO.EAnnotation.Source];
   if(sources){
      for(var name in sources){
         var source = sources[name];
         source.build(o, instance);
      }
   }
}
MO.TClass_newInstance = function TClass_newInstance(){
   var o = this;
   var instance = null;
   if(o._abstract){
      var message = new MO.TString();
      for(var name in o._instance){
         var value = o._instance[name];
         if(MO.Method.isVirtual(value)){
            if(!message.isEmpty()){
               message.append(',');
            }
            message.append(value._name);
         }
      }
      throw new MO.TError(o, "Abstract Class can't be create.(name={1})\n[{2}]", o.name, message);
   }
   var template = o._instance;
   if(!template){
      return MO.Logger.fatal(o, null, "Class instance is empty. (name={1})", o.name);
   }
   instance = new template.constructor();
   for(var name in template){
      var value = template[name];
      if(value != null){
         if((name == '__base') || (name == '__inherits')){
            instance[name] = template[name];
            continue;
         }
         if(!MO.Class.isBase(value)){
            value = MO.Lang.Object.clone(value);
         }
      }
      instance[name] = value;
   }
   instance.__class = o;
   if(instance.construct){
      instance.construct();
   }
   return instance;
}
MO.TClass_alloc = function TClass_alloc(){
   return this._pool.alloc();
}
MO.TClass_free = function TClass_free(instance){
   this._pool.free(instance);
}
MO.TClassBase = function TClassBase(){
   var o = this;
   o.__disposed = true;
   return o;
}
MO.TDate = function TDate(date){
   var o = this;
   o.date         = date ? date : new Date();
   o.year         = null;
   o.month        = null;
   o.day          = null;
   o.hour         = null;
   o.minute       = null;
   o.second       = null;
   o.ms           = null;
   o.equals       = MO.TDate_equals;
   o.isBefore     = MO.TDate_isBefore;
   o.isAfter      = MO.TDate_isAfter;
   o.monthDays    = MO.TDate_monthDays;
   o.monthWeekDay = MO.TDate_monthWeekDay;
   o.weekDay      = MO.TDate_weekDay;
   o.totalSecond  = MO.TDate_totalSecond;
   o.daySecond    = MO.TDate_daySecond;
   o.assign       = MO.TDate_assign;
   o.refresh      = MO.TDate_refresh;
   o.setYear      = MO.TDate_setYear;
   o.setMonth     = MO.TDate_setMonth;
   o.setDay       = MO.TDate_setDay;
   o.setHour      = MO.TDate_setHour;
   o.setMinute    = MO.TDate_setMinute;
   o.setSecond    = MO.TDate_setSecond;
   o.setDate      = MO.TDate_setDate;
   o.setNow       = MO.TDate_setNow;
   o.addYear      = MO.TDate_addYear;
   o.addMonth     = MO.TDate_addMonth;
   o.addDay       = MO.TDate_addDay;
   o.addHour      = MO.TDate_addHour;
   o.addMinute    = MO.TDate_addMinute;
   o.addSecond    = MO.TDate_addSecond;
   o.add          = MO.TDate_add;
   o.truncDay     = MO.TDate_truncDay;
   o.truncHour    = MO.TDate_truncHour;
   o.truncMinute  = MO.TDate_truncMinute;
   o.truncSecond  = MO.TDate_truncSecond;
   o.trunc        = MO.TDate_trunc;
   o.get          = MO.TDate_get;
   o.set          = MO.TDate_set;
   o.parse        = MO.TDate_parse;
   o.parseAuto    = MO.TDate_parseAuto;
   o.format       = MO.TDate_format;
   o.clone        = MO.TDate_clone;
   o.dump         = MO.TDate_dump;
   o.refresh();
   return o;
}
MO.TDate_equals = function TDate_equals(date){
   return this.date.getTime() == date.date.getTime();
}
MO.TDate_isBefore = function TDate_isBefore(date){
   return this.date.getTime() < date.date.getTime();
}
MO.TDate_isAfter = function TDate_isAfter(date){
   return this.date.getTime() > date.date.getTime();
}
MO.TDate_monthDays = function TDate_monthDays(){
   return RDate.monthDays(this.year, this.month);
}
MO.TDate_monthWeekDay = function TDate_monthWeekDay(){
   return (8 - (this.day - this.weekDay()) % 7) % 7;
}
MO.TDate_assign = function TDate_assign(value){
   var o = this;
   o.date.setTime(value.date.getTime());
   o.refresh();
}
MO.TDate_refresh = function TDate_refresh(){
   var o = this;
   var date = o.date;
   if(date){
      o.year = date.getFullYear();
      o.month = date.getMonth() + 1;
      o.day = date.getDate();
      o.hour = date.getHours();
      o.minute = date.getMinutes();
      o.second = date.getSeconds();
      o.ms = date.getMilliseconds();
   }
}
MO.TDate_weekDay = function TDate_weekDay(){
   return this.date.getDay();
}
MO.TDate_totalSecond = function TDate_totalSecond(){
   return parseInt(this.date.getTime() / 1000);
}
MO.TDate_daySecond = function TDate_daySecond(){
   var o = this;
   return o.hour * 3600 + o.minute * 60 + o.second;
}
MO.TDate_setYear = function TDate_setYear(value){
   var o = this;
   o.date.setFullYear(value);
   o.refresh();
}
MO.TDate_setMonth = function TDate_setMonth(value){
   var o = this;
   o.date.setMonth(parseInt(value, 10) - 1);
   o.refresh();
}
MO.TDate_setDay = function TDate_setDay(value){
   var o = this;
   o.date.setDate(value);
   o.refresh();
}
MO.TDate_setHour = function TDate_setHour(value){
   var o = this;
   o.date.setHours(value);
   o.refresh();
}
MO.TDate_setMinute = function TDate_setMinute(value){
   var o = this;
   o.date.setMinutes(value);
   o.refresh();
}
MO.TDate_setSecond = function TDate_setSecond(value){
   var o = this;
   o.date.setSeconds(value);
   o.refresh();
}
MO.TDate_setDate = function TDate_setDate(value){
   var o = this;
   o.date = value;
   o.refresh();
}
MO.TDate_setNow = function TDate_setNow(){
   var o = this;
   o.date = new Date();
   o.refresh();
}
MO.TDate_addYear = function TDate_addYear(value){
   var o = this;
   var year = o.date.getFullYear();
   o.date.setFullYear(year + MO.Lang.Integer.nvl(value, 1));
   o.refresh();
}
MO.TDate_addMonth = function TDate_addMonth(value){
   var o = this;
   var month = o.date.getMonth();
   o.date.setMonth(month + MO.Lang.Integer.nvl(value, 1));
   o.refresh();
}
MO.TDate_addDay = function TDate_addDay(value){
   var o = this;
   var time = o.date.getTime();
   var tick = time + (1000 * 60 * 60 * 24 * MO.Lang.Integer.nvl(value, 1));
   o.date.setTime(tick);
   o.refresh();
}
MO.TDate_addHour = function TDate_addHour(value){
   var o = this;
   var time = o.date.getTime();
   var tick = time + (1000 * 60 * 60 * MO.Lang.Integer.nvl(value, 1));
   o.date.setTime(tick);
   o.refresh();
}
MO.TDate_addMinute = function TDate_addMinute(value){
   var o = this;
   var time = o.date.getTime();
   var tick = time + (1000 * 60 * MO.Lang.Integer.nvl(value, 1));
   o.date.setTime(tick);
   o.refresh();
}
MO.TDate_addSecond = function TDate_addSecond(value){
   var o = this;
   var time = o.date.getTime();
   var tick = time + (1000 * MO.Lang.Integer.nvl(value, 1));
   o.date.setTime(tick);
   o.refresh();
}
MO.TDate_add = function TDate_add(value){
   var o = this;
   var time = o.date.getTime();
   var tick = time + MO.Lang.Integer.nvl(value, 1);
   o.date.setTime(tick);
   o.refresh();
}
MO.TDate_truncDay = function TDate_truncDay(value){
   var o = this;
   var time = o.date.getTime();
   var tick = time - (time % (1000 * 60 * 60 * 24 * MO.Lang.Integer.nvl(value, 1)));
   o.date.setTime(tick);
   o.refresh();
}
MO.TDate_truncHour = function TDate_truncHour(value){
   var o = this;
   var time = o.date.getTime();
   var tick = time - (time % (1000 * 60 * 60 * MO.Lang.Integer.nvl(value, 1)));
   o.date.setTime(tick);
   o.refresh();
}
MO.TDate_truncMinute = function TDate_truncMinute(value){
   var o = this;
   var time = o.date.getTime();
   var tick = time - (time % (1000 * 60 * MO.Lang.Integer.nvl(value, 1)));
   o.date.setTime(tick);
   o.refresh();
}
MO.TDate_truncSecond = function TDate_truncSecond(value){
   var o = this;
   var time = o.date.getTime();
   var tick = time - (time % (1000 * MO.Lang.Integer.nvl(value, 1)));
   o.date.setTime(tick);
   o.refresh();
}
MO.TDate_trunc = function TDate_trunc(value){
   var o = this;
   var time = o.date.getTime();
   var tick = time - (time % MO.Lang.Integer.nvl(value, 1));
   o.date.setTime(tick);
   o.refresh();
}
MO.TDate_get = function TDate_get(value){
   return this.date.getTime();
}
MO.TDate_set = function TDate_set(value){
   var o = this;
   o.date.setTime(value);
   o.refresh();
}
MO.TDate_parse = function TDate_parse(value, format){
   return MO.Lang.Date.parse(this, value, format);
}
MO.TDate_parseAuto = function TDate_parseAuto(value){
   return MO.Lang.Date.autoParse(this, value);
}
MO.TDate_format = function TDate_format(format){
   return MO.Lang.Date.formatDate(this, format);
}
MO.TDate_clone = function TDate_clone(){
   var value = new Date();
   value.setTime(this.date.getTime());
   return new MO.TDate(value);
}
MO.TDate_dump = function TDate_dump(){
   return MO.Class.dump(this) + ' ' + MO.Lang.Date.formatDate(this);
}
MO.TError = function TError(po, pm, pp){
   var o = this;
   var r = new MO.TString();
   var f = MO.TError.caller;
   var s = new MO.TString();
   var t = new Array();
   while(f){
      if(MO.Lang.Array.contains(t, f)){
         break;
      }
      t.push(f);
      f = f.caller;
   }
   var c = t.length;
   for(var n = 0; n < c; n++){
      f = t[n];
      if(n > 0){
         s.appendLine();
      }
      s.append('   ' + (c - n) + ': ' + MO.Method.name(f));
   }
   var a = arguments;
   var c = a.length;
   for(var n = 2; n < c; n++){
      var v = a[n];
      var vs = null;
      if(typeof(v) == 'function'){
         vs = MO.Method.name(v);
      }else{
         vs = v;
      }
      pm = pm.replace('{' + (n - 1) + '}', vs);
   }
   r.appendLine(pm);
   r.appendLine('------------------------------------------------------------');
   r.append(s);
   var info = r.flush();
   alert(info);
}
MO.TListener = function TListener(){
   var o = this;
   o._owner    = null;
   o._callback = null;
   o.process   = MO.TListener_process;
   o.toString  = MO.TListener_toString;
   o.dispose   = MO.TListener_dispose;
   return o;
}
MO.TListener_process = function TListener_process(sender, parameter1, parameter2, parameter3, parameter4, parameter5){
   var o = this;
   var owner = o._owner ? o._owner : o;
      o._callback.call(owner, sender, parameter1, parameter2, parameter3, parameter4, parameter5);
}
MO.TListener_toString = function TListener_toString(){
   var o = this;
   return MO.Class.name(o) + '(owner=' + MO.Class.name(o._owner) + ', callback=' + MO.Method.name(o._callback) + ')';
}
MO.TListener_dispose = function TListener_dispose(){
   var o = this;
   o._owner = null;
   o._callback = null;
   MO.Lang.Object.free(o);
}
MO.TListeners = function TListeners(){
   var o = this;
   o._listeners = null;
   o.isEmpty    = MO.TListeners_isEmpty;
   o.find       = MO.TListeners_find;
   o.register   = MO.TListeners_register;
   o.unregister = MO.TListeners_unregister;
   o.push       = MO.TListeners_push;
   o.remove     = MO.TListeners_remove;
   o.process    = MO.TListeners_process;
   o.clear      = MO.TListeners_clear;
   o.dispose    = MO.TListeners_dispose;
   o.dump       = MO.TListeners_dump;
   return o;
}
MO.TListeners_isEmpty = function TListeners_isEmpty(){
   var listeners = this._listeners;
   return listeners ? listeners.isEmpty() : true;
}
MO.TListeners_find = function TListeners_find(owner, callback){
   var listeners = this._listeners;
   if(listeners){
      var count = listeners.count();
      for(var i = 0; i < count; i++){
         var listener = listeners.at(i);
         if(listener._owner == owner){
            if(listener._callback == callback){
               return listener;
            }
         }
      }
   }
   return null;
}
MO.TListeners_register = function TListeners_register(owner, callback){
   var o = this;
   var listener = o.find(owner, callback);
   if(listener){
      throw new MO.TError(o, 'Listener is already register. (owner={1}, process={2})', owner, callback);
   }
   listener = new MO.TListener();
   listener._owner = owner;
   listener._callback = callback;
   o.push(listener);
   return listener;
}
MO.TListeners_unregister = function TListeners_unregister(owner, callback){
   var o = this;
   var listener = o.find(owner, callback);
   if(!listener){
      throw new MO.TError(o, 'Listener is not register. (owner={1}, process={2})', owner, callback);
   }
   o.remove(listener);
   listener.dispose();
}
MO.TListeners_push = function TListeners_push(listener){
   var o = this;
   if(!listener){
      throw new MO.TError(o, 'Listener is null.');
   }
   if(!listener._callback){
      throw new MO.TError(o, 'Listener process is null.');
   }
   var listeners = o._listeners;
   if(!listeners){
      listeners = o._listeners = new MO.TObjects();
   }
   listeners.push(listener);
}
MO.TListeners_remove = function TListeners_remove(listener){
   var o = this;
   if(!listener){
      throw new MO.TError(o, 'Listener is null.');
   }
   o._listeners.remove(listener);
}
MO.TListeners_process = function TListeners_process(ps, p1, p2, p3, p4, p5){
   var listeners = this._listeners;
   if(listeners){
      var count = listeners.count();
      for(var i = 0; i < count; i++){
         listeners.at(i).process(ps, p1, p2, p3, p4, p5);
      }
   }
}
MO.TListeners_clear = function TListeners_clear(){
   var listeners = this._listeners;
   if(listeners){
      listeners.clear();
   }
}
MO.TListeners_dispose = function TListeners_dispose(){
   var o = this;
   var listeners = o._listeners;
   if(listeners){
      for(var i = listeners.count() - 1; i >= 0; i--){
         listeners.at(i).dispose();
      }
      o._listeners = MO.Lang.Object.dispose(listeners);
   }
   MO.Lang.Object.free(o);
}
MO.TListeners_dump = function TListeners_dump(){
   var o = this;
   var result = new MO.TString();
   result.append(MO.Class.name(o));
   var listeners = o._listeners;
   var count = listeners.count();
   for(var i = 0; i < count; i++){
      result.append('\n   ' + listeners.at(i));
   }
   return result.flush();
}
MO.FObject = function FObject(o){
   if(!o){o = this;}
   o.__class   = null;
   o.__dispose = false;
   o.__hash    = 0;
   o.construct = MO.FObject_construct;
   o.hashCode  = MO.FObject_hashCode;
   o.toString  = MO.FObject_toString;
   o.dispose   = MO.FObject_dispose;
   o.innerDump = MO.FObject_innerDump;
   o.dump      = MO.FObject_dump;
   return o;
}
MO.FObject_construct = function FObject_construct(){
   this.__dispose = false;
}
MO.FObject_hashCode = function FObject_hashCode(){
   var o = this;
   var hash = o.__hash;
   if(!hash){
      hash = o.__hash = MO.RObject.nextId();
   }
   return hash;
}
MO.FObject_toString = function FObject_toString(){
   return MO.Class.dump(this);
}
MO.FObject_dispose = function FObject_dispose(){
   var o = this;
   MO.Lang.Object.free(o);
   o.__dispose = true;
}
MO.FObject_innerDump = function FObject_innerDump(dump, level){
   dump.append(MO.Class.dump(this));
}
MO.FObject_dump = function FObject_dump(){
   var result = new MO.TString();
   this.innerDump(result, 0);
   return result.flush();
}
MO.RClass = function RClass(){
   var o = this;
   o._codes   = new Array();
   o._classes = new Object();
   return o;
}
MO.RClass.prototype.isBase = function RClass_isBase(value){
   if(value != null){
      var typeName = typeof(value);
      return MO.Class.isBaseName(typeName);
   }
   return false;
}
MO.RClass.prototype.isBaseName = function RClass_isBaseName(typeName){
   if(typeName != null){
      if(typeName == 'boolean'){
         return true;
      }else if(typeName == 'number'){
         return true;
      }else if(typeName == 'date'){
         return true;
      }else if(typeName == 'string'){
         return true;
      }else if(typeName == 'function'){
         return true;
      }
   }
   return false;
}
MO.RClass.prototype.isBaseDataName = function RClass_isBaseDataName(typeName){
   if(typeName != null){
      if(typeName == 'boolean'){
         return true;
      }else if(typeName == 'number'){
         return true;
      }else if(typeName == 'date'){
         return true;
      }else if(typeName == 'string'){
         return true;
      }
   }
   return false;
}
MO.RClass.prototype.isBaseType = function RClass_isBaseType(clazz){
   if(clazz != null){
      if(clazz == Boolean){
         return true;
      }else if(clazz == Number){
         return true;
      }else if(clazz == Date){
         return true;
      }else if(clazz == String){
         return true;
      }else if(clazz == Function){
         return true;
      }
   }
   return false;
}
MO.RClass.prototype.isBaseDataType = function RClass_isBaseDataType(clazz){
   if(clazz != null){
      if(clazz == Boolean){
         return true;
      }else if(clazz == Number){
         return true;
      }else if(clazz == Date){
         return true;
      }else if(clazz == String){
         return true;
      }
   }
   return false;
}
MO.RClass.prototype.isName = function RClass_isName(value, name){
   return (this.name(value) == name);
}
MO.RClass.prototype.isClass = function RClass_isClass(value, clazz){
   var o = this;
   if(value){
      var name = o.name(clazz);
      if(value.__base){
         return (value.__base[name] != null);
      }else{
         return (o.name(value) == name);
      }
   }
   return false;
}
MO.RClass.prototype.typeOf = function RClass_typeOf(o){
   if(o && o.constructor){
      return MO.Lang.String.mid(o.constructor.toString(), 'function ', '(');
   }
   return 'Null';
}
MO.RClass.prototype.safeTypeOf = function RClass_safeTypeOf(value, safe){
   if(value == null){
      return 'Null';
   }
   try{
      var c = value.constructor;
      if(c == Boolean){
         return 'Boolean';
      }
      if(c == Number){
         return 'Number';
      }
      if(c == String){
         return 'String';
      }
      if(c == Function){
         return MO.Lang.String.mid(c.toString(), 'function ', '(');
      }
      if(c.constructor == Function){
         return MO.Lang.String.mid(c.toString(), 'function ', '(');
      }
      if(value.__class){
         return value.__class.name;
      }
      if(value.tagName){
         return 'Html';
      }
      for(var name in value){
         return 'Object';
      }
   }catch(e){
   }
   return 'Unknown';
}
MO.RClass.prototype.checkClass = function RClass_checkClass(v, c){
   if(!this.isClass(v, c)){
      throw new Error('Invalid class ' + o.name(o) + '<>' + o.name(c));
   }
}
MO.RClass.prototype.code = function RClass_code(v){
   var c = this._codes;
   var l = c.length;
   for(var n = 0; n < l; n++){
      if(c[n] == v){
         return n;
      }
   }
   c[l] = v;
   return l;
}
MO.RClass.prototype.name = function RClass_name(value){
   if(value){
      if(value.__name){
         return value.__name;
      }
      if(value.__class){
         return value.__class.name;
      }
      if(typeof(value) == 'function'){
         return MO.Method.name(value);
      }
      var method = value.constructor;
      if(method){
         return MO.Lang.String.mid(method.toString(), 'function ', '(');
      }
   }
   return null;
}
MO.RClass.prototype.inherits = function RClass_inherits(s, p){
   var base = MO.Runtime.nvl(p, s);
   base.__inherits = new Array();
   var count = arguments.length;
   for(var i = 2; i < count; i++){
      base.__inherits.push(MO.Method.name(arguments[i]));
   }
   return base;
}
MO.RClass.prototype.forName = function RClass_forName(name){
   var o = this;
   var clazz = null;
   if(name){
      clazz = o._classes[name];
      if(!clazz){
         clazz = o.createClass(name);
         o.build(clazz);
      }
   }
   return clazz;
}
MO.RClass.prototype.find = function RClass_find(v){
   var o = this;
   var n = null;
   if(v != null){
      if(v.__class){
         n = v.__class.name;
      }else if(v.constructor == Function){
         n = MO.Method.name(v);
      }else if(v.constructor != String){
         MO.Logger.fatal(o, null, 'Find class failure. (value={1})', v);
      }
   }
   return o._classes[n];
}
MO.RClass.prototype.register = function RClass_register(instance, annotations, defaultValue){
   var o = this;
   var name = MO.Method.name(instance.constructor);
   var clazz = o._classes[name];
   var annotation = null;
   if(annotations.constructor == Array){
      var count = annotations.length;
      for(var i = 0; i < count; i++){
         annotation = annotations[i];
         clazz.register(annotation);
      }
   }else{
      annotation = annotations;
      clazz.register(annotation);
   }
   var value = annotation.value();
   return (defaultValue != null) ? defaultValue : value;
}
MO.RClass.prototype.createBase = function RClass_createBase(name){
   var base = null;
   if(name){
      var source = 'function ' + name + '(){return this;} new ' + name + '();';
      base = eval(source);
   }
   return base;
}
MO.RClass.prototype.createClass = function RClass_createClass(className){
   var o = this;
   var clazz = o._classes[className] = new MO.TClass();
   clazz.name = className;
   clazz._base = o.createBase(className);
   clazz._clazz = new clazz._base.constructor();
   eval('MO.' + className)(clazz._clazz);
   return clazz;
}
MO.RClass.prototype.create = function RClass_create(clazz){
   var o = this;
   var className = null;
   var typeName = typeof(clazz);
   if(typeName == 'function'){
      className = MO.Method.name(clazz);
   }else if(typeName == 'string'){
      className = clazz;
   }else{
      throw new MO.TError(o, 'Param is invlid (clazz={1})', clazz);
   }
   return o.createByName(className);
}
MO.RClass.prototype.createByName = function RClass_createByName(className){
   var o = this;
   var clazz = o.forName(className);
   if(!clazz){
      throw new MO.TError(o, 'Cant find class. (name={1})', clazz);
   }
   return clazz.newInstance();
}
MO.RClass.prototype.innerCopy = function RClass_innerCopy(source, target){
   var o = this;
   if((source != null) && (target != null)){
      for(var name in source){
         var value = source[name];
         if(value != null){
            var typeName = typeof(value)
            if(typeName == 'function'){
               var targetValue = target[name];
               if(targetValue == null){
                  target[name] = value;
               }else if(MO.Method.isVirtual(targetValue)){
                  target[name] = value;
               }else if(!MO.Method.isVirtual(value) && MO.Method.isEmpty(targetValue)){
                  target[name] = value;
               }else if(!MO.Method.isVirtual(value) && !MO.Method.isEmpty(value)){
                  target[name] = value;
               }
               continue;
            }else if(!MO.Class.isBaseName(typeName)){
               if(target[name] == null){
                  target[name] = new value.constructor();
               }
               o.innerCopy(value, target[name]);
               continue;
            }
         }
         target[name] = value;
      }
   }
}
MO.RClass.prototype.build = function RClass_build(clazz){
   var o = this;
   var inherits = clazz._clazz.__inherits;
   if(inherits && (inherits.constructor == Array)){
      var finded = false;
      var inheritCount = inherits.length;
      for(var i = 0; i < inheritCount; i++){
         var name = inherits[i];
         if(MO.Lang.String.startsWith(name, 'F')){
            if(finded){
               MO.Logger.fatal(o, null, 'Parent class is too many. (name={1})', name);
            }
            clazz._parent = MO.Class.forName(name);
            finded = true;
         }
      }
   }
   var instance = clazz._instance = new clazz._base.constructor();
   if(inherits && (inherits.constructor == Array)){
      var inheritCount = inherits.length;
      for(var i = 0; i < inheritCount; i++){
         var name = inherits[i];
         if(!MO.Lang.String.startsWith(name, 'F')){
            var findClass = MO.Class.forName(name);
            if(findClass == null){
               MO.Logger.fatal(o, null, 'Parent class is not exists. (name={1})', name);
            }
            MO.Class.innerCopy(findClass._instance, instance);
            clazz.assign(findClass);
         }
      }
   }
   if(clazz._parent){
      o.innerCopy(clazz._parent._instance, instance);
      clazz.assign(clazz._parent);
   }
   if(!instance.__base){
      instance.__base = new MO.TClassBase();
   }
   instance.__base[clazz.name] = new clazz._base.constructor();
   var cf = clazz._clazz;
   for(var name in cf){
      if(name != '__base'){
         if((cf[name] == null) && (instance[name] == null)){
            instance[name] = null;
         }else if(cf[name] != null){
            if((instance[name] == null) || ((instance[name] != null) && cf[name] != instance[name])){
               instance[name] = cf[name];
            }
         }
      }
   }
   if(inherits && (inherits.constructor == Array)){
      var inheritCount = inherits.length;
      for(var i = 0; i < inheritCount; i++){
         var name = inherits[i];
         var baseClass = MO.Class.forName(name);
         var base = instance.__base[name] = new baseClass._base.constructor();
         var baseInstance = baseClass._instance;
         for(var name in baseInstance){
            if(name != '__base'){
               var cfn = baseInstance[name];
               var ofn = instance[name];
               if((cfn != null) && (ofn != null) && (cfn != ofn)){
                  if((cfn.constructor == Function) && (ofn.constructor == Function)){
                     base[name] = baseInstance[name];
                  }
               }
            }
         }
      }
   }
   clazz.build();
   if(MO.Runtime.isRelease()){
      var instance = clazz._instance;
      for(var name in instance){
         var value = instance[name];
         if(value == null){
            delete clazz._instance[name];
         }
      }
   }
}
MO.RClass.prototype.free = function RClass_free(instance){
   var clazz = instance.__class;
   clazz.free(instance);
}
MO.RClass.prototype.dump = function RClass_dump(v){
   var o = this;
   if(v == null){
      return '@null';
   }
   var t = o.safeTypeOf(v);
   switch(t){
      case 'Boolean':
         return 'Boolean:' + v;
      case 'Number':
         return 'Number:' + v;
      case 'String':
         return t + '<' + v.length + '>:' + v;
      case 'Function':
         return t + '<' + MO.Method.name(v) + '>@' + o.code(v);
      case 'Html':
         return t + '<' + v.tagName + '>@' + o.code(v);
      default:
         if(v.__name){
            return t + '<' + v.__name + '>@' + o.code(v);
         }
   }
   return t + '@' + o.code(v);
}
MO.RClass = new MO.RClass();
MO.Class = MO.RClass;
MO.RDate = function RDate(){
   var o = this;
   o.MinYear       = 1800;
   o.MaxYear       = 2400;
   o.Pattern       = 'n-: /';
   o.Chars         = '0123456789-:/';
   o.DisplayFormat = 'yyyy-mm-dd hh24:mi:ss';
   o.DataFormat    = 'yyyymmddhh24miss';
   o.MonthDays     = new Array(0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
   o.Parts         = new Array('YYYY','MM','DD','HH24','MI','SS');
   o.PartsDefine   = {'YYYY':['Year',4],'MM':['Month',2],'DD':['Day',2],'HH24':['Hour',2],'MI':['Minute',2],'SS':['Second',2]};
   return o;
}
MO.RDate.prototype.nvl = function RDate_nvl(value){
   return value ? value : new MO.TDate();
}
MO.RDate.prototype.format = function RDate_format(format){
   return this.formatDate(new MO.TDate(), format);
}
MO.RDate.prototype.formatText = function RDate_formatText(date, format){
   if(!date){
      return false;
   }
   var value = format.toLowerCase();
   value = value.replace(/yyyy/g, date.substring(0, 4));
   date = date.substring(4);
   value = value.replace(/mm/g, date.substring(0, 2));
   date = date.substring(2);
   value = value.replace(/dd/g, date.substring(0, 2));
   date = date.substring(2);
   value = value.replace(/hh24/g, date.substring(0, 4));
   date = date.substring(4);
   value = value.replace(/mi/g, date.substring(0, 2));
   date = date.substring(2);
   value = value.replace(/ss/g, date.substring(0, 2));
   date = date.substring(2);
   return value;
}
MO.RDate.prototype.formatDate = function RDate_formatDate(date, format){
   if(!date){
      return '';
   }
   var value = format ? format.toLowerCase() : this.DataFormat;
   value = value.replace(/yyyy/g, MO.Lang.Integer.format(date.year, 4));
   value = value.replace(/yy/g, MO.Lang.Integer.format(date.year % 100, 2));
   value = value.replace(/mm/g, MO.Lang.Integer.format(date.month, 2));
   value = value.replace(/dd/g, MO.Lang.Integer.format(date.day, 2));
   value = value.replace(/hh24/g, MO.Lang.Integer.format(date.hour, 2));
   value = value.replace(/mi/g, MO.Lang.Integer.format(date.minute, 2));
   value = value.replace(/ss/g, MO.Lang.Integer.format(date.second, 2));
   value = value.replace(/ms/g, MO.Lang.Integer.format(date.ms, 3));
   return value;
}
MO.RDate.prototype.monthDays = function RDate_monthDays(year, month){
   if(!year || !month){
      return 0;
   }
   year = parseInt(year);
   month = parseInt(month);
   this.MonthDays[2] = (((year % 4 == 0) || (year % 400 == 0)) && (year % 100 != 0)) ? 29 : 28 ;
   return this.MonthDays[month];
}
MO.RDate.prototype.splitFormat = function RDate_splitFormat(value, format){
   if(!value){
      return false;
   }
   format = format.toLowerCase();
   var items = new Array();
   while(format.length > 0){
      if(format.indexOf('yyyy') == 0){
         items['year'] = value.substring(0, 4);
         format = format.substring(4);
         value = value.substring(4);
      }else if(format.indexOf('mm') == 0){
         items['month'] = value.substring(0, 2);
         format = format.substring(2);
         value = value.substring(2);
      }else if(format.indexOf('dd') == 0){
         items['day'] = value.substring(0, 2);
         format = format.substring(2);
         value = value.substring(2);
      }else if(format.indexOf('hh24') == 0){
         items['hour'] = value.substring(0, 2);
         format = format.substring(4);
         value = value.substring(2);
      }else if(format.indexOf('mi') == 0){
         items['minute'] = value.substring(0, 2);
         format = format.substring(2);
         value = value.substring(2);
      }else if(format.indexOf('ss') == 0){
         items['second'] = value.substring(0, 2);
         format = format.substring(2);
         value = value.substring(2);
      }else if(format.indexOf('ms') == 0){
         items['ms'] = value.substring(0, 2);
         format = format.substring(2);
         value = value.substring(3);
      }else{
         format = format.substring(1);
         value = value.substring(1);
      }
   }
   return items;
}
MO.RDate.prototype.splitTime = function RDate_splitTime(date, value){
   if(!value){
      return;
   }
   if(value.indexOf(':') != -1){
      var items = value.split(':');
      if(items.length >= 1){
         date.hour = MO.Lang.Integer.parse(items[0]);
      }
      if(items.length >= 2){
         date.minute = MO.Lang.Integer.parse(items[1]);
      }
      if(items.length >= 3){
         date.second = MO.Lang.Integer.parse(items[2]);
      }
   }else if(value.length == 6){
      date.hour = MO.Lang.Integer.parse(value.substr(0, 2));
      date.minute = MO.Lang.Integer.parse(value.substr(2, 2));
      date.second = MO.Lang.Integer.parse(value.substr(4, 2));
   }else if(value.length == 4){
      date.hour = MO.Lang.Integer.parse(value.substr(0, 2));
      date.minute = MO.Lang.Integer.parse(value.substr(2, 2));
   }else if(value.length == 2){
      date.hour = MO.Lang.Integer.parse(value.substr(0, 2));
   }
}
MO.RDate.prototype.splitDate = function RDate_splitDate(date, value){
   if(!value){
      return;
   }
   if(value.indexOf('-') != -1 || value.indexOf('/') != -1){
      var items = null;
      if(value.indexOf('-') != -1){
         items = value.split('-');
      }else if(value.indexOf('/') != -1){
         items = value.split('/');
      }
      if(items.length >= 1){
         date.year = MO.Lang.Integer.parse(items[0]);
      }
      if(items.length >= 2){
         date.month = MO.Lang.Integer.parse(items[1]);
      }
      if(items.length >= 3){
         date.day = MO.Lang.Integer.parse(items[2]);
      }
   }else if(value.indexOf(':') != -1){
      this.splitTime(date, value);
   }else if(value.length == 14){
      date.year = MO.Lang.Integer.parse(value.substr(0, 4));
      date.month = MO.Lang.Integer.parse(value.substr(4, 2));
      date.day = MO.Lang.Integer.parse(value.substr(6, 2));
      date.hour = MO.Lang.Integer.parse(value.substr(8, 2));
      date.minute = MO.Lang.Integer.parse(value.substr(10, 2));
      date.second = MO.Lang.Integer.parse(value.substr(12, 2));
   }else if(value.length == 8){
      date.year = MO.Lang.Integer.parse(value.substr(0, 4));
      date.month = MO.Lang.Integer.parse(value.substr(4, 2));
      date.day = MO.Lang.Integer.parse(value.substr(6, 2));
   }else if(value.length == 6){
      date.year = MO.Lang.Integer.parse(value.substr(0, 4));
      date.month = MO.Lang.Integer.parse(value.substr(4, 2));
   }else if(value.length == 4){
      date.year = MO.Lang.Integer.parse(value);
   }
}
MO.RDate.prototype.checkItems = function RDate_checkItems(items){
   var o = this;
   if(!items){
      return false;
   }
   var year = MO.Lang.Integer.parse(items["year"]);
   if(year < o.MinYear || year > o.MaxYear){
      return false;
   }
   var month = MO.Lang.Integer.parse(items["month"]);
   if(month < 1 || month > 12){
      return false;
   }
   var day = MO.Lang.Integer.parse(items["day"]);
   if(day < 1 || day > o.monthDays(year, month)){
      return false;
   }
   var hour = MO.Lang.Integer.parse(items["hour"]);
   if(hour < 0 || hour > 23){
      return false;
   }
   var second = MO.Lang.Integer.parse(items["second"]);
   if(second < 0 || second > 59){
      return false;
   }
   var ms = MO.Lang.Integer.parse(items["ms"]);
   if(ms < 0 || ms > 99){
      return false;
   }
   return true;
}
MO.RDate.prototype.check = function RDate_check(value, format){
   return this.checkItems(this.splitFormat(value, format));
}
MO.RDate.prototype.make = function RDate_make(yyyy, mm, dd, hh, mi, ss){
   return new MO.TDate(new Date(yyyy, mm, dd));
}
MO.RDate.prototype.makeDate = function RDate_makeDate(value, items){
   var year = MO.Lang.Integer.parse(items.year);
   var month = MO.Lang.Integer.parse(items.month) - 1;
   var day = MO.Lang.Integer.parse(items.day);
   var hour = MO.Lang.Integer.parse(items.hour);
   var minute = MO.Lang.Integer.parse(items.minute);
   var second = MO.Lang.Integer.parse(items.second);
   var ms = MO.Lang.Integer.parse(items.ms);
   var date = new Date(year, month, day, hour, minute, second, ms);
   if(value){
      value.setDate(date);
      return value;
   }
   return new MO.TDate(date);
}
MO.RDate.prototype.parse = function RDate_parse(date, value, format){
   if(!format){
      format = this.DataFormat;
   }
   var items = this.splitFormat(value, format);
   if(this.checkItems(items)){
      return this.makeDate(date, items);
   }
   return null;
}
MO.RDate.prototype.autoParse = function RDate_autoParse(date, value){
   if(!value){
      return null;
   }
   var o = this;
   date = o.nvl(date);
   var items = new Array();
   items['year'] = 2000;
   items['month'] = 1;
   items['day'] = 1;
   items['hour'] = 0;
   items['minute'] = 0;
   items['second'] = 0;
   value = MO.Lang.String.trim(value);
   if(value.indexOf(' ') == -1){
      o.splitDate(items, value);
   }else{
      var valueItems = value.split(' ');
      if(valueItems.length == 2){
         o.splitDate(items, valueItems[0]);
         o.splitTime(items, valueItems[1]);
      }
   }
   if(o.checkItems(items)){
      return o.makeDate(date, items);
   }
   return null;
}
MO.RDate = new MO.RDate();
MO.Lang.Date = MO.RDate;
MO.RInteger = function RInteger(){
   var o = this;
   o.Chars      = '0123456789-%';
   o.NUMBER     = '0123456789-%';
   o.LEFT_CHAR  = '0';
   o.MAX_UINT16 = 65535;
   o.MAX_UINT32 = 4294967295;
   return o;
}
MO.RInteger.prototype.isInt = function RInteger_isInt(v){
   return MO.Lang.String.isPattern(v, 'n');
}
MO.RInteger.prototype.nvl = function RInteger_nvl(value, defaultValue){
   if(value != null){
      return parseInt(value);
   }
   if(defaultValue != null){
      return defaultValue;
   }
   return 0;
}
MO.RInteger.prototype.strideByte = function RInteger_strideByte(value){
   if(value > 65535){
      return 4;
   }else if(value > 255){
      return 2;
   }else{
      return 1;
   }
}
MO.RInteger.prototype.strideBit = function RInteger_strideBit(value){
   if(value > 65535){
      return 32;
   }else if(value > 255){
      return 16;
   }else{
      return 8;
   }
}
MO.RInteger.prototype.parse = function RInteger_parse(v, d){
   if(d == null){
      d = 0;
   }
   if(v == null){
      return d;
   }
   if(v == ''){
      return d;
   }
   v = MO.Lang.String.trim(v.toString());
   while(true){
      if(v.charAt(0) != '0'){
         break;
      }
      v = v.substr(1);
   }
   var r = (v.length > 0) ? parseInt(v) : d;
   return isNaN(r) ? d : r;
}
MO.RInteger.prototype.format = function RInteger_format(v, l, p){
   if(!p){
      p = this.LEFT_CHAR;
   }
   var v = v.toString();
   for(var i = parseInt(l) - v.length - 1; i >= 0; i--){
      v = p + v;
   }
   return v;
}
MO.RInteger.prototype.toRange = function RInteger_toRange(value, min, max){
   if(value == null){
      value = 0;
   }
   if(isNaN(value)){
      value = 0;
   }
   if(value < min){
      value = min;
   }
   if(value > max){
      value = max;
   }
   return value;
}
MO.RInteger.prototype.pow2 = function RInteger_pow2(value){
   if(value > 4096){
      return 8192;
   }else if(value > 2048){
      return 4096;
   }else if(value > 1024){
      return 2048;
   }else if(value > 512){
      return 1024;
   }else if(value > 256){
      return 512;
   }else if(value > 128){
      return 256;
   }else if(value > 64){
      return 128;
   }else if(value > 32){
      return 64;
   }else if(value > 16){
      return 32;
   }else if(value > 8){
      return 16;
   }else if(value > 4){
      return 8;
   }else if(value > 2){
      return 4;
   }else if(value > 1){
      return 2;
   }
   return 1;
}
MO.RInteger.prototype.sum = function RInteger_sum(){
   var r = 0;
   var a = arguments;
   var c = a.length;
   for(var n = 0; n < c; n++){
      if(a[n] != null){
         r += parseInt(a[n]);
      }
   }
   return r;
}
MO.RInteger.prototype.calculate = function RInteger_calculate(f, a, b){
   var a = RInteger.parse(a);
   var b = RInteger.parse(b);
   var r = '';
   if(f == '+'){
      r = a + b;
   }else if(f == '-'){
      r = a - b;
   }else if(f == 'x'){
      r = a * b;
   }else if(f == '/'){
     r = a / b;
   }
   return r.toString();
}
MO.RInteger.prototype.copy = function RInteger_copy(po, poi, pi, pii, pc){
   for(var i = 0; i < pc; i++){
      po[poi++] = pi[pii++];
   }
}
MO.RInteger.prototype.toString = function RInteger_toString(p){
   return (p == null) ? '0' : p.toString();
}
MO.RInteger = new MO.RInteger();
MO.Lang.Integer = MO.RInteger;
MO.RLogger = function RLogger(){
   var o = this;
   o._labelLength = 40;
   o._logger       = new MO.SLogger();
   o.lsnsOutput   = new MO.TListeners();
   return o;
}
MO.RLogger.prototype.output = function RLogger_output(sender, message){
   var o = this;
   var logger = o._logger;
   logger.sender = sender
   logger.message = message;
   o.lsnsOutput.process(logger);
}
MO.RLogger.prototype.debug = function RLogger_debug(owner, message, params){
   var o = this;
   var name = null;
   var caller = MO.Logger.debug.caller;
   if(caller){
      name = MO.Method.name(caller);
   }else if(arguments.caller){
      name = MO.Method.name(arguments.caller[0]);
   }
   if(name == null){
      name = 'unknown';
   }else{
      name = name.replace('_', '.');
   }
   if(owner && owner.hashCode){
      name += '@' + owner.hashCode();
   }
   var result = new MO.TString();
   result.append(MO.Lang.Date.format('yymmdd-hh24miss.ms'));
   result.append('|D [' + MO.Lang.String.rpad(name, o._labelLength) + '] ');
   var count = arguments.length;
   for(var n = 2; n < count; n++){
      var parameter = arguments[n];
      var value = '';
      if(parameter != null){
         if(typeof(parameter) == 'function'){
            value = MO.Method.name(parameter);
         }else{
            value = parameter.toString();
         }
      }
      message = message.replace('{' + (n - 1) + '}', value);
   }
   result.append(message);
   o.output(owner, result.flush());
}
MO.RLogger.prototype.info = function RLogger_info(owner, message, params){
   var o = this;
   var name = null;
   var caller = MO.Logger.info.caller;
   if(caller){
      name = MO.Method.name(caller);
   }else if(arguments.caller){
      name = MO.Method.name(arguments.caller[0]);
   }
   if(name == null){
      name = 'unknown';
   }else{
      name = name.replace('_', '.');
   }
   if(owner && owner.hashCode){
      name += '@' + owner.hashCode();
   }
   var result = new MO.TString();
   result.append(MO.Lang.Date.format('yymmdd-hh24miss.ms'));
   result.append('|I [' + MO.Lang.String.rpad(name, o._labelLength) + '] ');
   var c = arguments.length;
   for(var n = 2; n < c; n++){
      var parameter = arguments[n];
      var value = '';
      if(parameter != null){
         if(typeof(parameter) == 'function'){
            value = MO.Method.name(parameter);
         }else{
            value = parameter.toString();
         }
      }
      message = message.replace('{' + (n - 1) + '}', value);
   }
   result.append(message);
   o.output(owner, result.flush());
}
MO.RLogger.prototype.warn = function RLogger_warn(owner, message, params){
   var o = this;
   var name = null;
   var caller = MO.Logger.warn.caller;
   if(caller){
      name = MO.Method.name(caller);
   }else if(arguments.caller){
      name = MO.Method.name(arguments.caller[0]);
   }
   if(name == null){
      name = 'unknown';
   }else{
      name = name.replace('_', '.');
   }
   if(owner && owner.hashCode){
      name += '@' + owner.hashCode();
   }
   var result = new MO.TString();
   result.append(MO.Lang.Date.format('yymmdd-hh24miss.ms'));
   result.append('|W [' + MO.Lang.String.rpad(name, o._labelLength) + '] ');
   var count = arguments.length;
   for(var n = 2; n < count; n++){
      var parameter = arguments[n];
      var value = '';
      if(parameter != null){
         if(typeof(parameter) == 'function'){
            value = MO.Method.name(parameter);
         }else{
            value = parameter.toString();
         }
      }
      message = message.replace('{' + (n - 1) + '}', value);
   }
   result.append(message);
   o.output(owner, result.flush());
}
MO.RLogger.prototype.error = function RLogger_error(owner, message, params){
   var o = this;
   var name = null;
   var caller = MO.Logger.error.caller;
   if(caller){
      name = MO.Method.name(caller);
   }else if(arguments.caller){
      name = MO.Method.name(arguments.caller[0]);
   }
   if(name == null){
      name = 'unknown';
   }else{
      name = name.replace('_', '.');
   }
   if(owner && owner.hashCode){
      name += '@' + owner.hashCode();
   }
   var result = new MO.TString();
   result.append(MO.Lang.Date.format('yymmdd-hh24miss.ms'));
   result.append('|E [' + MO.Lang.String.rpad(name, o._labelLength) + '] ');
   var c = arguments.length;
   for(var n = 2; n < c; n++){
      var parameter = arguments[n];
      var value = '';
      if(parameter != null){
         if(typeof(parameter) == 'function'){
            value = MO.Method.name(parameter);
         }else{
            value = parameter.toString();
         }
      }
      message = message.replace('{' + (n - 1) + '}', value);
   }
   result.append(message);
   o.output(owner, result.flush());
}
MO.RLogger.prototype.fatal = function RLogger_fatal(owner, error, message, params){
   var o = this;
   var stack = new MO.TString();
   var stacks = new Array();
   var caller = MO.Logger.fatal.caller;
   while(caller){
      if(MO.Lang.Array.contains(stacks, caller)){
         break;
      }
      stacks.push(caller);
      caller = caller.caller;
   }
   var count = stacks.length;
   for(var i = 0; i < count; i++){
      caller = stacks[i];
      if(i > 0){
         stack.appendLine();
      }
      stack.append('   ' + (count - i) + ': ' + MO.Method.name(caller));
   }
   var result = new MO.TString();
   result.appendLine(MO.RContext.get('RMessage:fatal'));
   result.appendLine(MO.Lang.String.repeat('-', 60));
   result.append(MO.Class.dump(owner), ': ');
   if(message){
      var count = arguments.length;
      for(var i = 3; i < count; i++){
         var parameter = arguments[i];
         if('function' == typeof(parameter)){
            parameter = MO.Method.name(parameter);
         }
         message = message.replace('{' + (i - 2) + '}', parameter);
      }
   }
   result.appendLine(message);
   result.appendLine(MO.Lang.String.repeat('-', 60));
   result.appendLine('Stack:');
   result.append(stack.flush());
   var text = result.flush();
   o.output(owner, text);
   if(MO.Runtime.isPlatformPc() && !MO.Runtime.isRelease()){
      throw new Error(text);
   }
}
MO.RLogger.prototype.show = function RLogger_show(sf, message, params){
   var o = this;
   var name = null;
   var caller = MO.Logger.show.caller;
   if(caller){
      name = MO.Method.name(caller);
   }else if(arguments.caller){
      name = MO.Method.name(arguments.caller[0]);
   }
   if(name == null){
      name = 'unknown';
   }else{
      name = name.replace('_', '.');
   }
   if(owner.hashCode){
      name += '@' + owner.hashCode();
   }
   var result = new MO.TString();
   result.append(MO.Lang.Date.format('yymmdd-hh24miss.ms'));
   result.append('|I [' + MO.Lang.String.rpad(name, o._labelLength) + '] ');
   var count = arguments.length;
   for(var n = 2; n < count; n++){
      var parameter = arguments[n];
      var value = '';
      if(parameter != null){
         if(typeof(parameter) == 'function'){
            value = MO.Method.name(parameter);
         }else{
            value = parameter.toString();
         }
      }
      message = message.replace('{' + (n - 1) + '}', value);
   }
   result.append(message);
   alert(result.flush());
}
MO.Logger = new MO.RLogger();
MO.RMethod = function RMethod(){
   var o = this;
   o._virtuals   = new Object();
   o._properties = new Object();
   return o;
}
MO.RMethod.prototype.construct = function RMethod_construct(){
   var o = this;
   o.empty.__empty = true;
   o.emptyTrue.__empty = true;
   o.emptyFalse.__empty = true;
}
MO.RMethod.prototype.isFunction = function RMethod_isFunction(value){
   return typeof(value) == 'function';
}
MO.RMethod.prototype.isEmpty = function RMethod_isEmpty(value){
   return (value && value.__empty);
}
MO.RMethod.prototype.isVirtual = function RMethod_isVirtual(value){
   return (value && value.__virtual);
}
MO.RMethod.prototype.name = function RMethod_name(value){
   if(value){
      if(typeof(value) == 'function'){
         if(value.__name){
            return value.__name;
         }
         var source = value.toString();
         var name = value.__name = MO.Lang.String.mid(source, 'function ', '(');
         return name;
      }
   }
   return null;
}
MO.RMethod.prototype.fullName = function RMethod_fullName(value){
   if(value && (value.constructor == Function)){
      if(value.__fullname){
         return value.__fullname;
      }
      var source = value.toString();
      var name = value.__fullname = MO.Lang.String.mid(source, 'function ', ')') + ')';
      return name;
   }
   return null;
}
MO.RMethod.prototype.empty = function RMethod_empty(){
}
MO.RMethod.prototype.emptyTrue = function RMethod_emptyTrue(){
   return true;
}
MO.RMethod.prototype.emptyFalse = function RMethod_emptyFalse(){
   return false;
}
MO.RMethod.prototype.emptyCall = function RMethod_emptyCall(){
}
MO.RMethod.prototype.virtual = function RMethod_virtual(value, name){
   var o = this;
   var method = null;
   var code = MO.Class.name(value) + '.' + name;
   var virtuals = o._virtuals;
   if(virtuals[code]){
      method = virtuals[code];
   }else{
      var source = 'throw new Error(\'Virtual method be called.(' + code + ')\');';
      method = new Function(source);
      method.__virtual = true;
      method.__name = code;
      virtuals[code] = method;
   }
   return method;
}
MO.RMethod.prototype.makeVirtual = function RMethod_makeVirtual(clazz, name){
   var o = this;
   var method = null;
   var code = clazz.name + '.' + name;
   var virtuals = o._virtuals;
   if(virtuals[code]){
      method = virtuals[code];
   }else{
      var source = 'throw new Error(\'Virtual method be called.(' + code + ')\');';
      method = new Function(source);
      method.__virtual = true;
      method.__name = code;
      virtuals[code] = method;
   }
   return method;
}
MO.RMethod.prototype.makePropertyGet = function RMethod_makePropertyGet(name, methodName){
   var o = this;
   var code = name + '|' + methodName;
   var method = null;
   if(o._properties[code]){
      method = o._properties[code];
   }else{
      var source = 'return this.' + name + ';';
      method = new Function(source);
      o._properties[code] = method;
   }
   return method;
}
MO.RMethod.prototype.makePropertyGetSource = function RMethod_makePropertyGet(name, methodName){
   var o = this;
   var source = 'return this.' + name + ';';
   var method = new Function(source);
   return method;
}
MO.RMethod.prototype.makePropertySet = function RMethod_makePropertySet(name, methodName){
   var o = this;
   var code = name + '|' + methodName;
   var method = null;
   if(o._properties[code]){
      method = o._properties[code];
   }else{
      var source = 'this.' + name + '=value;';
      method = new Function('value', source);
      o._properties[code] = method;
   }
   return method;
}
MO.RMethod = new MO.RMethod();
MO.Method = MO.RMethod;
MO.Method.construct();
MO.RObject = function RObject(){
   var o = this;
   o._hash = 1;
   return o;
}
MO.RObject.prototype.nextId = function RObject_nextId(v){
   return this._hash++;
}
MO.RObject.prototype.nvl = function RObject_nvl(v){
   var a = arguments;
   var c = a.length;
   for(var n = 0; n < c; n++){
      if(a[n] != null){
         return a[n];
      }
   }
   return null;
}
MO.RObject.prototype.clone = function RObject_clone(o){
   var r = new o.constructor();
   for(var n in o){
      var v = o[n];
      if(v != null){
         if(!MO.Class.isBaseType(v.constructor)){
            v = MO.Lang.Object.clone(v);
         }
      }
      r[n] = v;
   }
   return r;
}
MO.RObject.prototype.copy = function RObject_copy(s, t){
   if((s != null) && (t != null)){
      for(var n in s){
         var v = s[n];
         if(v != null){
            if(!MO.Class.isBaseType(v.constructor)){
               if(t[n] == null){
                  t[n] = new c();
               }
               MO.Lang.Object.copy(v, t[n]);
            }
         }
         t[n] = v;
      }
   }
}
MO.RObject.prototype.free = function RObject_free(item){
   if(item){
      if(MO.Runtime.isDebug()){
         for(var name in item){
            if((name == '__base') || (name == '__inherits') || (name == '__class')){
               item[name] = null;
               continue;
            }
            var value = item[name];
            if(value != null){
               if(!MO.Class.isBaseType(value.constructor)){
                  throw new MO.TError(MO.Lang.Object, 'Free object is not base object.');
               }
               item[name] = null;
            }
         }
      }else{
         for(var name in item){
            item[name] = null;
         }
      }
   }
}
MO.RObject.prototype.dispose = function RObject_dispose(item, flag){
   if(item){
      if(!item.__dispose){
         item.dispose(flag);
         item.__dispose = true;
      }else{
         throw new MO.TError(MO.Lang.Object, 'Object has disposed.');
      }
   }
   return null;
}
MO.RObject.prototype.release = function RObject_release(item){
   if(item){
      for(var name in item){
         var value = item[name];
         if(typeof(value) == 'Object'){
            this.release(value)
         }
         item[n] = null;
      }
   }
   return null;
}
MO.RObject = new MO.RObject();
MO.Lang.Object = MO.RObject;
MO.RString = function RString(){
   var o = this;
   o.EMPTY      = '';
   o.SPACE      = '   ';
   o.PAD        = ' ';
   o.TRIM       = ' \t\r\n';
   o.LOWER      = 'abcdefghijklmnopqrstuvwxyz';
   o.UPPER      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
   o.CodeLowerA = 'a'.charCodeAt(0);
   o.CodeLowerZ = 'z'.charCodeAt(0);
   o.CodeUpperA = 'A'.charCodeAt(0);
   o.CodeUpperZ = 'Z'.charCodeAt(0);
   o._hashData  = null;
   return o;
}
MO.RString.prototype.isEmpty = function RString_isEmpty(value){
   if(value != null){
      return (value.length == 0);
   }
   return true;
}
MO.RString.prototype.isBlank = function RString_isBlank(value){
   if(value != null){
      return (value.trim().length == 0);
   }
   return true;
}
MO.RString.prototype.isAnsi = function RString_isAnsi(value){
   if(value != null){
      var count = value.length;
      for(var i = 0; i < count; i++){
         if(value.charCodeAt(i) > 255){
            return false;
         }
      }
      return true;
   }
   return false;
}
MO.RString.prototype.isDbcs = function RString_isDbcs(value){
   if(value == null){
      var count = value.length;
      for(var i = 0; i < count; i++){
         if(value.charCodeAt(i) < 256){
            return false;
         }
      }
      return true;
   }
   return false;
}
MO.RString.prototype.isPattern = function RString_isPattern(value, parttern){
   if(value != null){
      var o = this;
      var source = (parttern == null) ? '$a$A$f' : parttern;
      source = source.replace(/\a/g, o.LOWER);
      source = source.replace(/\A/g, o.UPPER);
      source = source.replace(/\f/g, MO.Lang.Float.NUMBER);
      source = source.replace(/\n/g, MO.Lang.Integer.NUMBER);
      var count = value.length;
      for(var i = 0; i < count; i++){
         if(source.indexOf(value.charAt(i)) == -1){
            return false;
         }
      }
      return true;
   }
   return false;
}
MO.RString.prototype.inChars = function RString_inChars(value, parttern){
   var o = this;
   var b = o.findChars(parttern, value);
   if(b != -1){
      return true;
   }
   return false;
}
MO.RString.prototype.equals = function RString_equals(s, t, f){
   if(s == null){
      s = '';
   }else if(s.constructor != String){
      s = s.toString();
   }
   if(t == null){
      t = '';
   }else if(t.constructor != String){
      t = t.toString();
   }
   if(f){
      return (s == t);
   }else{
      return (s.toLowerCase() == t.toLowerCase());
   }
}
MO.RString.prototype.contains = function RString_contains(source, values){
   if(source != null){
      if(source.constructor != String){
         source = source.toString();
      }
      var count = arguments.length;
      for(var i = 1; i < count; i++){
         var value = arguments[i];
         if(source.indexOf(value) != -1){
            return true;
         }
      }
   }
   return false;
}
MO.RString.prototype.startsWith = function RString_startsWith(v, s){
   if(s == null){
      return true;
   }
   return (v != null) ? (v.indexOf(s) == 0) : false;
}
MO.RString.prototype.endsWith = function RString_endsWith(v, s){
   if(s == null){
      return true;
   }
   var n = (v != null) ? v.indexOf(s) : -1;
   return (n != -1) ? (n == (v.length - s.length)) : false;
}
MO.RString.prototype.findChars = function RString_findChars(v, s){
   if((v != null) && (s != null)){
      var c = v.length;
      for(var n = 0; n < c; n++){
         if(s.indexOf(v.charAt(n)) != -1){
            return n;
         }
      }
   }
   return -1;
}
MO.RString.prototype.inRange = function RString_inRange(v, rs, f){
   if(v && rs){
      if(!f){
         v = v.toLowerCase();
      }
      var c = rs.length;
      for(var n = 0; n < c; n++){
         var r = rs[n];
         if(r != null){
            if(f){
               if(v == r){
                  return true;
               }
            }else{
               if(v == r.toLowerCase()){
                  return true;
               }
            }
         }
      }
   }
   return false;
}
MO.RString.prototype.nvl = function RString_nvl(v, d){
   if(v != null){
      var s = null;
      if(v.constructor != String){
         s = v.toString();
      }else{
         s = v;
      }
      if(s.length > 0){
         return s;
      }
   }
   if(d != null){
      return d;
   }
   return this.EMPTY;
}
MO.RString.prototype.nvlString = function RString_nvlString(p){
   if(p == null){
      p = new MO.TString();
   }
   return p;
}
MO.RString.prototype.empty = function RString_empty(v){
   if(v != null){
      var s = null;
      if(v.constructor != String){
         s = v.toString();
      }else{
         s = v;
      }
      if(s.length > 0){
         return s;
      }
   }
   return null;
}
MO.RString.prototype.calculateHash = function RString_calculateHash(source, code){
   var o = this;
   var data = o._hashData;
   if(!data){
      data = o._hashData = new Int32Array(1);
   }
   data[0] = MO.Runtime.nvl(code, 0);
   var length = source.length;
   for(var i = 0; i < length; i++){
      var value = source.charCodeAt(i);
      data[0] = 31 * data[0] + value;
   }
   return Math.abs(data[0]);
}
MO.RString.prototype.firstUpper = function RString_firstUpper(value){
   return (value != null) ? value.charAt(0).toUpperCase() + value.substr(1) : value;
}
MO.RString.prototype.firstLower = function RString_firstLower(){
   return (value != null) ? value.charAt(0).toLowerCase() + value.substr(1) : value;
}
MO.RString.prototype.firstLine = function RString_firstLine(value){
   if(value){
      var n = Math.min(value.indexOf('\r'), value.indexOf('\n'));
      if(-1 != n){
         return value.substr(0, n);
      }
      return value;
   }
   return '';
}
MO.RString.prototype.format = function RString_format(value, parameters){
   var count = arguments.length;
   for(var i = 1; i < count; i++){
      var parameter = arguments[i];
      if(parameter == null){
         parameter = '';
      }else if(typeof(parameter) == 'function'){
         parameter = MO.Method.name(parameter);
      }
      value = value.replace('{' + i + '}', parameter);
   }
   return value;
}
MO.RString.prototype.formatLines = function RString_formatLines(p){
   var o = this;
   p = p.replace(/\\r/g, '');
   var ls = p.split('\n');
   var c = ls.length;
   var r = new MO.TString();
   for(var i = 0; i < c; i++){
      var l = ls[i]
      l = o.trim(l);
      if(o.isEmpty(l)){
         continue;
      }
      if(o.startsWith(l, '//')){
         continue;
      }
      r.appendLine(l);
   }
   return r.flush();
}
MO.RString.prototype.repeat = function RString_repeat(v, c){
   return new Array(c + 1).join(v);
}
MO.RString.prototype.pad = function RString_pad(v, l, p){
   v = (v != null) ? v.toString() : this.EMPTY;
   var n = l - v.length;
   if(n > 0){
      if(p == null){
         p = this.PAD;
      }
      var r = (n % 2 == 0) ? n / 2 : (n - 1) / 2;
      return new Array(r + 1).join(p) + v + new Array(n - r + 1).join(p);
   }
   return v;
}
MO.RString.prototype.lpad = function RString_lpad(v, l, p){
   var o = this;
   v = (v != null) ? v.toString() : o.EMPTY;
   var n = l - v.length;
   if(n > 0){
      if(p == null){
         p = o.PAD;
      }
      var a = new Array(n);
      a[a.length] = v;
      return a.join(p);
   }
   return v;
}
MO.RString.prototype.rpad = function RString_rpad(v, l, p){
   var o = this;
   v = (v != null) ? v.toString() : o.EMPTY;
   var n = l - v.length;
   if(n > 0){
      if(p == null){
         p = o.PAD;
      }
      return v + new Array(n + 1).join(p);
   }
   return v;
}
MO.RString.prototype.trim = function RString_trim(v, ts){
   var o = this;
   v = o.nvl(v);
   ts = o.nvl(ts, o.TRIM);
   var l = 0;
   var r = v.length - 1;
   for(; l < r; l++){
      if(-1 == ts.indexOf(v.charAt(l))){
         break;
      }
   }
   for(; r >= l; r--){
      if(-1 == ts.indexOf(v.charAt(r))){
         break;
      }
   }
   if(l == r + 1){
      return null;
   }
   if((l != 0) || (r != v.length-1)){
      return v.substring(l, r + 1);
   }
   return v;
}
MO.RString.prototype.ltrim = function RString_ltrim(v, ts){
   var o = this;
   v = o.nvl(value);
   ts = o.nvl(trims, o.TRIM);
   var l = 0;
   var r = v.length - 1;
   for(; l < r; l++){
      if(-1 == ts.indexOf(v.charAt(l))){
         break;
      }
   }
   if(0 != l){
      return v.substring(l, r + 1);
   }
   return v;
}
MO.RString.prototype.rtrim = function RString_rtrim(v, ts){
   var o = this;
   v = o.nvl(v);
   ts = o.nvl(ts, o.TRIM);
   var r = v.length - 1;
   for(; r >= 0; r--){
      if(-1 == ts.indexOf(v.charAt(r))){
         break;
      }
   }
   if(r != v.length-1){
      return v.substring(0, r + 1);
   }
   return v;
}
MO.RString.prototype.mid = function RString_mid(v, b, e){
   if(v == null){
      return v;
   }
   var l = 0;
   if(b != null){
      var f = v.indexOf(b);
      if(f != -1){
         l = f + b.length;
      }
   }
   var r = v.length;
   if(e != null){
      var f = v.indexOf(e, l);
      if(f != -1){
         r = f;
      }
   }
   return v.substring(l, r);
}
MO.RString.prototype.toLine = function RString_toLine(v){
   return v.replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t')
}
MO.RString.prototype.toUnderline = function RString_toUnderline(v){
   var r = null;
   if(v){
      var s = new MO.TString();
      var c = v.length;
      for(var i = 0; i < c; i++){
         var h = v.charAt(i);
         if(h.toUpperCase() == h){
            if(i > 0){
               s.append('_');
            }
            s.append(h.toLowerCase());
         }else{
            s.append(h);
         }
      }
      r = s.flush();
   }
   return r;
}
MO.RString.prototype.toLower = function RString_toLower(v){
   return (v != null) ? v.toLowerCase() : this.EMPTY;
}
MO.RString.prototype.toUpper = function RString_toUpper(v){
   return (v != null) ? v.toUpperCase() : this.EMPTY;
}
MO.RString.prototype.split = function RString_split(s, p){
   return (s && p) ? s.split(p) : null;
}
MO.RString.prototype.splitTwo = function RString_splitTwo(s, p){
   if(s && p){
      var r = new Array();
      var n = s.indexOf(p);
      if(n == -1){
         r.push(s);
      }else{
         r.push(s.substring(0, n));
         r.push(s.substring(n+p.length));
      }
      return r;
   }
   return null;
}
MO.RString.prototype.splitParts = function RString_splitParts(s, p){
   var o = this;
   var b = new Array();
   var k = 0;
   var l = s.length;
   for(var i = 0; i < l; i++){
      for(var j in p){
         if(o.startsWith(p[j], s.charAt(i))){
            if(o.equals(s.substr(i, p[j].length), p[j])){
               b[k++] = p[j];
               i = i + p[j].length - 1;
               break;
            }
         }
      }
   }
   return b;
}
MO.RString.prototype.splitPattern = function RString_splitPattern(s, p){
   var r = new Array();
   if(s){
      var sl = s.length;
      var pl = p.length;
      var t = '';
      for(var n = 0; n < sl; n++){
         var v = false;
         for(var i = 0; i < pl; i++){
            var f = p[i];
            if(s.indexOf(f) == -1){
               if(t.length){
                  r[r.length] = t;
                  t = '';
               }
               r[r.length] = f;
               s = s.substring(f.length);
               v = true;
               break;
            }
         }
         if(!v){
            t += s.charAt(0);
            s = s.substring(1);
         }
      }
   }
   return r;
}
MO.RString.prototype.replace = function RString_replace(value, source, target){
   return value.replace(new RegExp(source, 'g'), target);
}
MO.RString.prototype.replaceChar = function RString_replaceChar(v, s, t){
   if(v != null){
      var c = v.length;
      var r = new Array();
      for(var n = 0; n < c; n++){
         var a = v.charAt(n);
         if(a == s){
            r[r.length] = t;
         }else{
            r[r.length] = a;
         }
      }
      return r.join('');
   }
   return v;
}
MO.RString.prototype.decodeUtf = function RString_decodeUtf(data){
   var i = 0;
   var j = 0;
   var x = 0;
   var y = 0;
   var z = 0;
   var l = data.length;
   var result = [];
   var codes = [];
   for(; i < l; ++i, ++j){
      x = data[i] & 255;
      if(!(x & 128)){
         if(!x){
            return data;
         }
         codes[j] = x;
      }else if((x & 224) == 192){
         if(i + 1 >= l){
            return data;
         }
         y = data[++i] & 255;
         if ((y & 192) != 128) {
            return data;
         }
         codes[j] = ((x & 31) << 6) | (y & 63);
      }else if ((x & 240) == 224){
         if(i + 2 >= l){
            return data;
         }
         y = data[++i] & 255;
         if((y & 192) != 128){
            return data;
         }
         z = data[++i] & 255;
         if((z & 192) != 128){
            return data;
         }
         codes[j] = ((x & 15) << 12) | ((y & 63) << 6) | (z & 63);
      }else{
         return data;
      }
      if(j == 65535){
         var charLength = codes.length;
         for(var index = 0; index < charLength; index++){
            result.push(String.fromCharCode(codes[index]));
         }
         j = -1;
      }
   }
   if(j > 0){
      codes.length = j;
      var charLength = codes.length;
      for(var index = 0; index < charLength; index++){
         result.push(String.fromCharCode(codes[index]));
      }
   }
   return result.join("");
}
MO.RString.prototype.remove = function RString_remove(s, t){
   return s.replace(t, '');
}
MO.RString.prototype.removeChars = function RString_removeChars(v, s){
   if(v != null){
      var c = v.length;
      var r = new Array();
      for(var n = 0; n < c; n++){
         var a = v.charAt(n);
         if(s.indexOf(a) != -1){
            continue;
         }
         r[r.length] = a;
      }
      return r.join('');
   }
   return v;
}
MO.RString = new MO.RString();
MO.Lang.String = MO.RString;
MO.AConstructor = function AConstructor(name, dataCd, dataClass){
   var o = this;
   MO.AAnnotation.call(o, name);
   o._annotationCd = MO.EAnnotation.Constructor;
   o._inherit      = true;
   o._ordered      = true;
   o._dataCd       = dataCd;
   o._dataClass    = dataClass;
   o.dataCd        = MO.AConstructor_dataCd;
   o.dataClass     = MO.AConstructor_dataClass;
   return o;
}
MO.AConstructor_dataCd = function AConstructor_dataCd(){
   return this._dataCd;
}
MO.AConstructor_dataClass = function AConstructor_dataClass(){
   return this._dataClass;
}
MO.ADispose = function ADispose(name, disposeCd){
   var o = this;
   MO.AAnnotation.call(o, name);
   o._annotationCd = MO.EAnnotation.Dispose;
   o._inherit      = true;
   o._ordered      = true;
   o._disposeCd    = disposeCd;
   o.disposeCd     = MO.ADispose_disposeCd;
   return o;
}
MO.ADispose_disposeCd = function ADispose_disposeCd(){
   return this._disposeCd;
}
MO.AEnum = function AEnum(name, linker){
   var o = this;
   o.inherit    = true;
   o.annotation = MO.EAnnotation.Enum;
   o.name       = name;
   o.linker     = linker;
   return o;
}
MO.AGetterSource = function AGetterSource(name, linker){
   var o = this;
   MO.ASource.call(o, name, MO.ESource.Get, linker);
   o._linker = linker;
   o.build   = MO.AGetterSource_build;
   return o;
}
MO.AGetterSource_build = function AGetterSource_build(clazz, instance){
   var o = this;
   var getName = o._linker ? o._linker : o._code;
   instance[getName] = MO.Method.makePropertyGetSource(o._name, getName);
}
MO.ALinker = function ALinker(name, linker){
   var o = this;
   o.inherit    = true;
   o.annotation = MO.EAnnotation.Linker;
   o.name       = name;
   o.linker     = linker;
   return o;
}
MO.AProperty = function AProperty(name, linker){
   var o = this;
   MO.AAnnotation.call(o, name);
   o._inherit      = true;
   o._annotationCd = MO.EAnnotation.Property;
   o._linker       = null;
   o._force        = false;
   o.code          = MO.AProperty_code;
   o.build         = MO.AProperty_build;
   o.load          = MO.AProperty_load;
   o.save          = MO.AProperty_save;
   o.toString      = MO.AProperty_toString;
   var code = null;
   if(linker == null){
      if(MO.Lang.String.startsWith(name, '_')){
         code = name.substring(1);
      }else{
         code = name;
      }
      code = MO.Lang.String.toUnderline(code);
   }else{
      code = linker;
   }
   o._linker = code;
   return o;
}
MO.AProperty_code = function AProperty_code(){
   return this._linker;
}
MO.AProperty_build = function AProperty_build(){
}
MO.AProperty_load = function AProperty_load(v, x){
   v[this._name] = x.get(this._linker);
}
MO.AProperty_save = function AProperty_save(v, x){
   x.set(this._linker, v[this._name]);
}
MO.AProperty_toString = function AProperty_toString(){
   return '<' + this._annotationCd + ',linker=' + this._linker + '>';
}
MO.EBoolean = new function EBoolean(){
   var o = this;
   o.True   = 'Y';
   o.False  = 'N';
   return o;
}
MO.ECharCase = new function ECharCase(){
   var o = this;
   o.Upper = 'U';
   o.Lower = 'L';
   o.Word  = 'W';
   return o;
}
MO.EDispose = new function EDispose(){
   var o = this;
   o.Null    = 0;
   o.Dispose = 1;
   o.Release = 2;
   return o;
}
MO.ENodeType = new function ENodeType(){
   var o = this;
   o.Node = 1;
   o.Text = 3;
   o.Data = 4;
   return o;
}
MO.ENumber = new function ENumber(){
   var o = this;
   o.Integer         = 'I';
   o.PositiveInteger = 'PI';
   o.NegativeInteger = 'NI';
   o.Float           = 'F';
   o.PositiveFloat   = 'PF';
   o.NegativeFloat   = 'NF';
   return o;
}
MO.ERegExp = new function ERegExp(){
   var o = this;
   o.I  = /^-?[1-9]\d*|0$/;
   o.PI = /^[1-9]\d*$/;
   o.NI = /^-[1-9]\d*$/;
   o.F  = /^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$/;
   o.PF = /^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$/;
   o.NF = /^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$/;
   o.U  = /[1-9]{1}[0-9]/;
   o.E  = /^\w{1,}[@]{1}[a-zA-Z]{1,}[.]{1}[a-zA-Z]{1,}$/;
   return o;
}
MO.EResult = new function EResult(){
   var o = this;
   o.Success  = 0;
   o.Continue = 1;
   o.Skip     = 2;
   o.Finish   = 3;
   o.Failure  = -1;
   o.Cancel   = -2;
   return o;
}
MO.MInstance = function MInstance(o){
   o = MO.Class.inherits(this, o);
   o.__free          = false;
   o.instanceCreate  = MO.Method.empty;
   o.instanceAlloc   = MO.Method.empty;
   o.instanceFree    = MO.Method.empty;
   o.instanceRelease = MO.Method.empty;
   return o;
}
MO.MInvoke = function MInvoke(o){
   o = MO.Class.inherits(this, o);
   o.invoke = MO.Method.virtual(o, 'invoke');
   return o;
}
MO.MPoolAble = function MPoolAble(o){
   o = MO.Class.inherits(this, o);
   o._poolCode = MO.Class.register(o, new MO.AGetSet('_poolCode'));
   return o;
}
MO.SArguments = function SArguments(){
   var o = this;
   o.owner = null;
   return o;
}
MO.SEnumItem = function SEnumItem(){
   var o = this;
   o.name  = null;
   o.value = 0;
   return o;
}
MO.TContext = function TContext(n, c, t){
   var o = this;
   o.name = n;
   o.code = c;
   o.text = t;
   return o;
}
MO.TFatalError = function TFatalError(po, pe, pm, pp){
   var o = this;
   var r = new MO.TString();
   var f = TFatalError.caller;
   var s = new MO.TString();
   var t = new Array();
   while(f){
      if(MO.Lang.Array.contains(t, f)){
         break;
      }
      t.push(f);
      f = f.caller;
   }
   var c = t.length;
   for(var n = 0; n < c; n++){
      f = t[n];
      if(n > 0){
         s.appendLine();
      }
      s.append('   ' + (c - n) + ': ' + MO.Method.name(f));
   }
   var a = arguments;
   var c = a.length;
   for(var n = 2; n < c; n++){
      var v = a[n];
      var vs = null;
      if(typeof(v) == 'function'){
         vs = MO.Method.name(v);
      }else{
         vs = v;
      }
      pm = pm.replace('{' + (n - 1) + '}', vs);
   }
   r.appendLine(pm);
   r.appendLine('------------------------------------------------------------');
   r.append(s);
   throw new Error(r);
}
MO.TInstancePool = function TInstancePool(){
   var o = this;
   MO.TObjects.call(o);
   o._instance = null;
   o.instance  = MO.TInstancePool_instance;
   o.alloc     = MO.TInstancePool_alloc;
   o.free      = MO.TInstancePool_free;
   return o;
}
MO.TInstancePool_instance = function TInstancePool_instance(p){
   var o = this;
   var r = o._instance;
   if(r == null){
      r = o._instance = MO.Class.create(p);
      r.instanceCreate();
   }
   r.instanceAlloc();
   return r;
}
MO.TInstancePool_alloc = function TInstancePool_alloc(p){
   var o = this;
   var r = null;
   if(o._count == 0){
      r = MO.Class.create(p);
      r.instanceCreate();
   }else{
      r = o.pop();
   }
   r.instanceAlloc();
   return r;
}
MO.TInstancePool_free = function TInstancePool_free(p){
   p.instanceFree();
   return this.push(p);
}
MO.TInvoke = function TInvoke(){
   var o = this;
   o.owner    = null;
   o.callback = null;
   o.invoke   = MO.TInvoke_invoke;
   return o;
}
MO.TInvoke_invoke = function TInvoke_invoke(p1, p2, p3, p4, p5, p6){
   var o = this;
   if(o.callback){
      var c = o.owner ? o.owner : o;
      try{
         o.callback.call(c, p1, p2, p3, p4, p5, p6);
      }catch(e){
         MO.Logger.fatal(o, e, 'Call method failure. (owner={1}, callback={2})', c, o.callback);
      }
   }
}
MO.TLoaderListener = function TLoaderListener(){
   var o = this;
   o.invoke = null;
   o.ids    = new MO.TArray();
   o.check  = MO.TLoaderListener_check;
   return o;
}
MO.TLoaderListener_check = function TLoaderListener_check(l){
   var s = this.ids;
   if(!s.isEmpty()){
      var c = s.length;
      for(var n = 0; n < c; n++){
         if(!l.contains(s.get(n))){
            return false;
         }
      }
   }
   return true;
}
MO.TLocker = function TLocker(){
   var o = this;
   o._lock = false;
   o.enter = MO.TLocker_enter;
   o.leave = MO.TLocker_leave;
   return o;
}
MO.TLocker_enter = function TLocker_enter(){
   this._lock = true;
}
MO.TLocker_leave = function TLocker_leave(){
   this._lock = false;
}
MO.TMessage = function TMessage(){
   var o = this;
   o.typeCd      = MO.EMessage.None;
   o.attrType    = null;
   o.message     = null;
   o.description = null;
   o.redirect    = null;
   o.loadConfig = MO.TMessage_loadConfig;
   o.saveConfig = MO.TMessage_saveConfig;
   o.icon       = MO.TMessage_icon;
   return o;
}
MO.TMessage_loadConfig = function TMessage_loadConfig(config){
   var o = this;
   o.typeCd      = RString.toLower(config.name);
   o.message     = config.nvl('message');
   o.attrType    = config.nvl('type');
   o.redirect    = config.nvl('redirect');
   var desc = config.nvl('description');
   o.description = desc.replace(/\\n/g, '\n');
}
MO.TMessage_saveConfig = function TMessage_saveConfig(config){
   var o = this;
   config.name = o.typeCd;
   config.set('message', o.message);
   config.set('description', o.description);
}
MO.TMessage_icon = function TMessage_icon(){
   return 'sys.msg.' + this.typeCd;
}
MO.TMessages = function TMessages(){
   var o = this;
   o._items     = new MO.TObjects();
   o.hasMessage = MO.TMessages_hasMessage;
   o.message    = MO.TMessages_message;
   o.messages   = MO.TMessages_messages;
   o.type       = MO.TMessages_type;
   o.push       = MO.TMessages_push;
   return o;
}
MO.TMessages_hasMessage = function TMessages_hasMessage(type){
   for(var n=0; n<this._items.count; n++){
      var m = this._items.get(n);
      if(m && m.type == type){
         return true;
      }
   }
   return false;
}
MO.TMessages_message = function TMessages_message(type){
   for(var n=0; n<this._items.count; n++){
      var m = this._items.get(n);
      if(m && m.type == type){
         return m;
      }
   }
   return null;
}
MO.TMessages_messages = function TMessages_messages(type){
   var rs = null;
   for(var n=0; n<this._items.count; n++){
      var msg = this._items.get(n);
      if(msg && msg.type == type){
         if(!rs){
            rs = new TList();
         }
         rs.push(msg);
      }
   }
   return rs;
}
MO.TMessages_type = function TMessages_type(){
   if(this.hasMessage(EMessage.Fatal)){
      return EMessage.Fatal;
   }
   if(this.hasMessage(EMessage.Error)){
      return EMessage.Error;
   }
   if(this.hasMessage(EMessage.Warn)){
      return EMessage.Warn;
   }
   if(this.hasMessage(EMessage.Valid)){
      return EMessage.Valid;
   }
   if(this.hasMessage(EMessage.Info)){
      return EMessage.Info;
   }
   return EMessage.None;
}
MO.TMessages_push = function TMessages_push(msg){
   if(msg){
      this._items.push(msg);
   }
}
MO.TNode = function TNode(name){
   var o = this;
   o._name        = MO.Lang.String.nvl(name, 'Node');
   o._value       = null;
   o._attributes  = null;
   o._nodes       = null;
   o.isName       = MO.TNode_isName;
   o.name         = MO.TNode_name;
   o.setName      = MO.TNode_setName;
   o.value        = MO.TNode_value;
   o.setValue     = MO.TNode_setValue;
   o.contains     = MO.TNode_contains;
   o.hasAttribute = MO.TNode_hasAttribute;
   o.attributes   = MO.TNode_attributes;
   o.hasNode      = MO.TNode_hasNode;
   o.nodeCount    = MO.TNode_nodeCount;
   o.node         = MO.TNode_node;
   o.nodes        = MO.TNode_nodes;
   o.get          = MO.TNode_get;
   o.getInteger   = MO.TNode_getInteger;
   o.set          = MO.TNode_set;
   o.setNvl       = MO.TNode_setNvl;
   o.setBoolean   = MO.TNode_setBoolean;
   o.setFloat     = MO.TNode_setFloat;
   o.find         = MO.TNode_find;
   o.findNode     = MO.TNode_findNode;
   o.searchNode   = MO.TNode_searchNode;
   o.push         = MO.TNode_push;
   o.toString     = MO.TNode_toString;
   o.innerDump    = MO.TNode_innerDump;
   o.dump         = MO.TNode_dump;
   return o;
}
MO.TNode_isName = function TNode_isName(n){
   return MO.Lang.String.equals(this._name, n);
}
MO.TNode_name = function TNode_name(){
   return this._name;
}
MO.TNode_setName = function TNode_setName(p){
   this._name = p;
}
MO.TNode_value = function TNode_value(){
   return this._value;
}
MO.TNode_setValue = function TNode_setValue(p){
   this._value = p;
}
MO.TNode_contains = function TNode_contains(n){
   var r = this._attributes;
   return r ? r.contains(n) : false;
}
MO.TNode_hasAttribute = function TNode_hasAttribute(){
   var s = this._attributes;
   return s ? !s.isEmpty() : false;
}
MO.TNode_attributes = function TNode_attributes(){
   var o = this;
   var r = o._attributes;
   if(!r){
      r = o._attributes = new MO.TAttributes();
   }
   return r;
}
MO.TNode_hasNode = function TNode_hasNode(){
   var s = this._nodes;
   return s ? !s.isEmpty() : false;
}
MO.TNode_nodeCount = function TNode_nodeCount(){
   var nodes = this._nodes;
   return nodes ? nodes.count() : 0;
}
MO.TNode_node = function TNode_node(index){
   var nodes = this._nodes;
   return nodes ? nodes.at(index) : null;
}
MO.TNode_nodes = function TNode_nodes(){
   var o = this;
   var nodes = o._nodes;
   if(!nodes){
      nodes = o._nodes = new MO.TObjects();
   }
   return nodes;
}
MO.TNode_get = function TNode_get(n, v){
   return this._attributes ? this._attributes.get(n, v) : null;
}
MO.TNode_getInteger = function TNode_getInteger(name, defaultValue){
   return MO.Lang.Integer.parse(this.get(name, defaultValue));
}
MO.TNode_set = function TNode_set(name, value){
   if(value != null){
      this.attributes().set(name, value);
   }
}
MO.TNode_setNvl = function TNode_setNvl(name, value){
   if(!MO.Lang.String.isEmpty(value)){
      this.attributes().set(name, value);
   }
}
MO.TNode_setBoolean = function TNode_setBoolean(n, v){
   if(v != null){
      this.attributes().set(n, MO.Lang.Boolean.format(v));
   }
}
MO.TNode_setFloat = function TNode_setFloat(n, v){
   if(v != null){
      this.attributes().set(n, MO.Lang.Float.format(v));
   }
}
MO.TNode_find = function TNode_find(p){
   var o = this;
   if(o.hasNode()){
      var ns = o._nodes;
      var c = ns.count();
      for(var i = 0; i < c; i++){
         var n = ns.get(i);
         if(n.isName(p)){
            return n;
         }
      }
   }
   return null;
}
MO.TNode_findNode = function TNode_findNode(pn, pv){
   var o = this;
   if(o.hasNode()){
      var ns = o._nodes;
      var nc = ns.count();
      var as = arguments;
      var ac = as.length;
      if((ac - 1) % 2){
         throw new MO.TError('Attributes is not pair. (length={1})', ac);
      }
      for(var ni = 0; ni < nc; ni++){
         var n = ns.get(ni);
         if(pn != null){
            if(!n.isName(pn)){
               continue;
            }
         }
         var f = true;
         for(var ai = 1; ai < ac; ai += 2){
            if(n.get(as[ai]) != as[ai + 1]){
               f = false;
               break;
            }
         }
         if(f){
            return n;
         }
      }
   }
   return null;
}
MO.TNode_searchNode = function TNode_searchNode(pn, pv){
   var o = this;
   if(o.hasAttribute()){
      if(o._attributes.get(pn) == pv){
         return o;
      }
   }
   if(o.hasNode()){
      var ns = o._nodes;
      var c = ns.count();
      for(var i = 0; i < c; ni++){
         var n = ns.get(n).searchNode(pn, pv);
         if(n != null){
            return n;
         }
      }
   }
   return null;
}
MO.TNode_push = function TNode_push(p){
   var o = this;
   o.nodes().push(p);
}
MO.TNode_toString = function TNode_toString(){
   return this.dump();
}
MO.TNode_innerDump = function TNode_innerDump(dump, node, space){
   if(space == null){
      space = '';
   }
   dump.append(space, node._name, '(', RClass.name(node), ')');
   var attributes = node._attributes;
   if(attributes){
      var count = attributes.count();
      dump.append(' [', count, ':');
      for(var n = 0; n < count; n++){
         if(n > 0){
            dump.append(' ');
         }
         dump.append(attributes.name(n), '=', attributes.value(n));
         if(n < count - 1){
            dump.append(',');
         }
      }
      dump.append(']');
   }
   if(node._value){
      var value = node._value.toString();
      if(!MO.Lang.String.isEmpty(value)){
         dump.append(' {', value.length, ':', value, '}');
      }
   }
   var nodes = node._nodes;
   if(nodes){
      var count = nodes.count();
      dump.append('\n');
      for(var n = 0; n < count; n++){
         nodes.get(n).dump(dump, space + '   ');
         if(n < count - 1){
            dump.append('\n');
         }
      }
   }
   return dump;
}
MO.TNode_dump = function TNode_dump(d, space){
   return this.innerDump(MO.Lang.String.nvlString(d), this, space);
}
MO.TRow = function TRow(){
   var o = this;
   MO.TAttributes.call(o);
   o._dataset   = null;
   o._index     = null;
   o._uniqueId  = null;
   o._statusCd  = null;
   o.loadConfig = MO.TRow_loadConfig;
   o.saveConfig = MO.TRow_saveConfig;
   return o;
}
MO.TRow_loadConfig = function TRow_loadConfig(x){
   var o = this;
   o._index = x.get('_id');
   o._statusCd = x.get('_status');
   o._uniqueId = x.get('ouid');
   if(x.hasAttribute()){
      o.append(x.attributes());
   }
}
MO.TRow_saveConfig = function TRow_saveConfig(x){
   var o = this;
   x.set('_id', o._index);
   x.set('_status', o._statusCd);
   var c = o.count();
   for(var i = 0; i < c; i++){
      x.set(o._names[i], o._values[i]);
   }
}
MO.TRow_copy = function TRow_copy(){
   var o = this;
   var r = new TRow();
   r._dataset = o._dataset;
   r._index = o._index;
   r._statusCd = o._statusCd;
   r._uniqueId = o._uniqueId;
   var c = o.count;
   for(var n = 0; n < c; n++){
      r.set(o.names[n], o.values[n]);
   }
   return r;
}
MO.TRow_toAttributes = function TRow_toAttributes(a){
   var o = this;
   if(!a){
      a = new MO.TAttributes();
   }
   a.set(RDataset.ROW_STATUS, o._statusCd);
   a.append(o);
   return a;
}
MO.TRow_dump = function TRow_dump(s){
   var o = this;
   var c = o.count;
   s = MO.Lang.String.nvlStr(s);
   s.append(MO.Class.name(o), ' [', o._statusCd, ': ');
   for(var n=0; n<c; n++){
      if(n > 0){
         s.append(',');
      }
      s.append(o.names[n], '=', o.values[n]);
   }
   s.append(']');
   return s;
}
MO.TSpeed = function TSpeed(){
   var o = this;
   o.arguments  = arguments;
   o._start     = 0;
   o._end       = 0;
   o._span      = 0;
   o._spanMin   = Number.MAX_VALUE;
   o._spanMax   = 0;
   o.start      = new Date().getTime();
   o.callerName = MO.Method.name(MO.TSpeed.caller);
   o.reset      = MO.TSpeed_reset;
   o.begin      = MO.TSpeed_begin;
   o.end        = MO.TSpeed_end;
   o.record     = MO.TSpeed_record;
   o.toString   = MO.TSpeed_toString;
   return o;
}
MO.TSpeed_reset = function TSpeed_reset(){
   var o = this;
   o._start = 0;
   o._end = 0;
   o._span = 0;
}
MO.TSpeed_begin = function TSpeed_begin(){
   var o = this;
   o._start = new Date().getTime();
}
MO.TSpeed_end = function TSpeed_end(){
   var o = this;
   o._end = new Date().getTime();
   o._span += o._end - o._start;
   if(o._span < o._spanMin){
      o._spanMin = o._span;
   }
   if(o._span > o._spanMax){
      o._spanMax = o._span;
   }
}
MO.TSpeed_record = function TSpeed_record(){
   var o = this;
   var sp = new Date().getTime() - o.start;
   o.arguments = null;
   o.start = null;
   o.callerName = null;
   o.record = null;
}
MO.TSpeed_toString = function TSpeed_toString(){
   var o = this;
   return o._span + ' (' + o._spanMin + ' - ' + o._spanMax + ')';
}
MO.TTicker = function TTicker(interval){
   var o = this;
   o.interval = interval;
   o.lastTick = 0;
   o.process  = MO.TTicker_process;
}
MO.TTicker_process = function TTicker_process(){
   var o = this;
   var tick = MO.Timer.current();
   var span = tick - o.lastTick;
   if(span > o.interval){
      o.lastTick = tick;
      return true;
   }
   return false;
}
MO.TUnsupportError = function TUnsupportError(po, pp){
   var o = this;
   var pm = 'Unsupport method. (name={1})'
   var r = new MO.TString();
   var f = TUnsupportError.caller;
   var s = new MO.TString();
   var t = new Array();
   while(f){
      if(MO.Lang.Array.contains(t, f)){
         break;
      }
      t.push(f);
      f = f.caller;
   }
   var c = t.length;
   for(var n = 0; n < c; n++){
      f = t[n];
      if(n > 0){
         s.appendLine();
      }
      s.append('   ' + (c - n) + ': ' + MO.Method.name(f));
   }
   var a = arguments;
   var c = a.length;
   for(var n = 1; n < c; n++){
      var v = a[n];
      var vs = null;
      if(typeof(v) == 'function'){
         vs = MO.Method.name(v);
      }else{
         vs = v;
      }
      pm = pm.replace('{' + (n - 1) + '}', vs);
   }
   r.appendLine(pm);
   r.appendLine('------------------------------------------------------------');
   r.append(s);
   throw new Error(r);
}
MO.FConsole = function FConsole(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._scopeCd     = MO.Class.register(o, new MO.AGetter('_scopeCd'), MO.EScope.Global);
   o._statusSetup = false;
   o.onSetup      = MO.Method.empty;
   o.setup        = MO.FConsole_setup;
   return o;
}
MO.FConsole_setup = function FConsole_setup(){
   var o = this;
   if(!o._statusSetup){
      o.onSetup();
      o._statusSetup = true;
   }
}
MO.FObjectPool = function FObjectPool(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._items      = MO.Class.register(o, new MO.AGetter('_items'));
   o._frees      = MO.Class.register(o, new MO.AGetter('_frees'));
   o._allocCount = 0;
   o._freeCount  = 0;
   o.construct   = MO.FObjectPool_construct;
   o.hasFree     = MO.FObjectPool_hasFree;
   o.alloc       = MO.FObjectPool_alloc;
   o.free        = MO.FObjectPool_free;
   o.push        = MO.FObjectPool_push;
   o.dispose     = MO.FObjectPool_dispose;
   o.innerDump   = MO.FObjectPool_innerDump;
   return o;
}
MO.FObjectPool_construct = function FObjectPool_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._items = new MO.TObjects();
   o._frees = new MO.TObjects();
}
MO.FObjectPool_hasFree = function FObjectPool_hasFree(){
   return !this._frees.isEmpty();
}
MO.FObjectPool_alloc = function FObjectPool_alloc(){
   var o = this;
   var item = null;
   if(!o._frees.isEmpty()){
      item = o._frees.pop();
   }
   o._allocCount++;
   return item;
}
MO.FObjectPool_free = function FObjectPool_free(item){
   var o = this;
   o._frees.push(item);
   o._freeCount++;
}
MO.FObjectPool_push = function FObjectPool_push(p){
   var o = this;
   o._items.push(p);
   o._frees.push(p);
}
MO.FObjectPool_dispose = function FObjectPool_dispose(){
   var o = this;
   o._items = MO.Lang.Object.dispose(o._items);
   o._frees = MO.Lang.Object.dispose(o._frees);
   o.__base.FObject.dispose.call(o);
}
MO.FObjectPool_innerDump = function FObjectPool_innerDump(result, level){
   var o = this;
   result.append('Pool:');
   result.append('total=', o._items.count());
   result.append(', free=', o._frees.count());
   result.append(', alloc_count=', o._allocCount);
   result.append(', free_count=', o._freeCount);
}
MO.FObjectPools = function FObjectPools(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._pools    = null;
   o.construct = MO.FObjectPools_construct;
   o.pool      = MO.FObjectPools_pool;
   o.alloc     = MO.FObjectPools_alloc;
   o.free      = MO.FObjectPools_free;
   o.dispose   = MO.FObjectPools_dispose;
   return o;
}
MO.FObjectPools_construct = function FObjectPools_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._pools = new MO.TDictionary();
}
MO.FObjectPools_pool = function FObjectPools_pool(code){
   var o = this;
   var pool = o._pools.get(code);
   if(!pool){
      pool = MO.Class.create(MO.FObjectPool);
      o._pools.set(code, pool);
   }
   return pool;
}
MO.FObjectPools_alloc = function FObjectPools_alloc(code){
   var o = this;
   var pool = o.pool(code);
   return pool.alloc();
}
MO.FObjectPools_free = function FObjectPools_free(code, instance){
   var o = this;
   var pool = o.pool(code);
   return pool.free(instance);
}
MO.FObjectPools_push = function FObjectPools_push(code, instance){
   var o = this;
   var pool = o.pool(code);
   return pool.push(instance);
}
MO.FObjectPools_dispose = function FObjectPools_dispose(){
   var o = this;
   var pools = o._pools;
   var count = pools.count();
   for(var i = 0; i < count; i++){
      var pool = pools.at(i);
      pool.dispose();
   }
   pools.dispose();
   o.__base.FObject.dispose.call(o);
}
MO.FTimer = function FTimer(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._count      = 0;
   o._startTime  = 0;
   o._beginTime  = 0;
   o._endTime    = 0;
   o._stopTime   = 0;
   o._span       = MO.Class.register(o, new MO.AGetter('_span'), 0);
   o._spanSecond = MO.Class.register(o, new MO.AGetter('_spanSecond'), 0);
   o.setup       = MO.FTimer_setup;
   o.current     = MO.FTimer_current;
   o.rate        = MO.FTimer_rate;
   o.update      = MO.FTimer_update;
   return o;
}
MO.FTimer_setup = function FTimer_setup(){
   var o = this;
   var n = new Date().getTime();
   o._startTime = n;
   o._beginTime = n;
   o._endTime = n;
}
MO.FTimer_current = function FTimer_current(){
   return this._lastTime;
}
MO.FTimer_rate = function FTimer_rate(){
   var o = this;
   if(o._count == 0){
      return 0;
   }
   var t = o._lastTime - o._startTime;
   var c = o._count * 1000 / t;
   return parseInt(c);
}
MO.FTimer_update = function FTimer_update(){
   var o = this;
   o._count++;
   var b = o._beginTime = o._endTime;
   var e = o._endTime = new Date().getTime();
   var s = o._span = e - b;
   o._spanSecond = s / 1000;
}
MO.RArray = function RArray(){
   var o = this;
   o.array1           = new Array(1);
   o.array2           = new Array(2);
   o.array3           = new Array(3);
   o.array4           = new Array(4);
   o.array9           = new Array(9);
   o.array12          = new Array(12);
   o.array16          = new Array(16);
   o.sortComparerAsc  = MO.Runtime.sortComparerAsc;
   o.sortComparerDesc = MO.Runtime.sortComparerDesc;
   o.pairSortMid      = MO.Runtime.pairSortMid;
   o.pairSortSub      = MO.Runtime.pairSortSub;
   o.pairSort         = MO.Runtime.pairSort;
   return o;
}
MO.RArray.prototype.equals = function RArray_equals(s, t){
   if(s && t){
      if(s.length == t.length){
         var c = s.length;
         for(var n = 0; n < c; n++){
            if(s[n] != t[n]){
               return false;
            }
         }
         return true;
      }
   }
   return false;
}
MO.RArray.prototype.count = function RArray_count(value){
   var count = 0;
   for(var name in value){
      count++;
   }
   return count;
}
MO.RArray.prototype.contains = function RArray_contains(array, v){
   var c = array.length;
   for(var n = 0; n < c; n++){
      if(array[n] == v){
         return true;
      }
   }
   return false;
}
MO.RArray.prototype.find = function RArray_find(a, v){
   var c = a.length;
   for(var n = 0; n < c; n++){
      if(a[n] == v){
         return n;
      }
   }
   return -1;
}
MO.RArray.prototype.search = function RArray_search(a, v){
   for(var n in a){
      if(a[n] == v){
         return n;
      }
   }
   return null;
}
MO.RArray.prototype.reverse = function RArray_reverse(a, s, e){
   var c = (e + 1 - s) >> 1;
   for(var n = 0; n < c; n++){
      var t = a[s + n];
      a[s + n] = a[e - n];
      a[e - n] = t;
   }
}
MO.RArray.prototype.copy = function RArray_copy(source, sourceOffset, sourceCount, target, targetOffset){
   for(var i = 0; i < sourceCount; i++){
      target[i + targetOffset] = source[i + sourceOffset];
   }
   return target;
}
MO.RArray.prototype.move = function RArray_move(array, offset, count, target){
   if(offset > target){
      for(var n = 0; n < count; n++){
         array[target - n] = array[offset + n];
      }
   }else if(offset < target){
      for(var n = 0; n < count; n++){
         array[target + count - n - 1] = array[offset + count - n - 1];
      }
   }
}
MO.RArray.prototype.remove = function RArray_remove(a, n){
   return a.slice(0, n).concat(a.slice(n + 1));
}
MO.RArray.prototype.sortPartition = function RArray_sortPartition(a, l, r){
   var s = l;
   var e = r + 1;
   var t = a[s];
   while(true){
      while(a[++s] < t){
      }
      while(a[--e] > t){
      }
      if(s > e){
         break;
      }
      var v = a[s];
      a[s] = a[e];
      a[e] = v;
   }
   a[l] = a[e];
   a[e] = t;
   return e;
}
MO.RArray.prototype.sortArray = function RArray_sortArray(a, s, e){
   if(s < e){
      var o = this;
      var p = o.sortPartition(a, s, e);
      o.sortArray(a, s, p - 1);
      o.sortArray(a, p + 1, e);
   }
}
MO.RArray.prototype.sort = function RArray_sort(a, t){
   var o = this;
   var c = a.length - 1;
   o.sortArray(a, 0, c);
   if(t){
      o.reverse(a, 0, c);
   }
   return a;
}
MO.RArray.prototype.nameMaxLength = function RArray_nameMaxLength(a){
   var r = 0;
   for(var n in a){
      var l = n.length;
      if(l > n){
         n = l;
      }
   }
   return r;
}
MO.RArray.prototype.quickSort = function RArray_quickSort(items, offset, count, comparer, parameters){
   this.pairSort(items, null, offset, count, comparer, parameters);
}
MO.RArray = new MO.RArray();
MO.Lang.Array = MO.RArray;
MO.RBlob = function RBlob(){
   return this;
}
MO.RBlob.prototype.fromText = function RBlob_fromText(value){
   var length = value.length;
   var data = new Uint8Array(length);
   for (var i = 0; i < length; i++) {
      data[i] = value.charCodeAt(i);
   }
   var blob = new Blob([data]);
   return blob;
}
MO.Lang.Blob = new MO.RBlob();
MO.RBoolean = function RBoolean(){
   return this;
}
MO.RBoolean.prototype.format = function RBoolean_format(value){
   return value ? MO.EBoolean.True : MO.EBoolean.False;
}
MO.RBoolean.prototype.parse = function RBoolean_parse(value){
   if(value != null){
      if(value.constructor == Boolean){
         return value;
      }else if(value.constructor == String){
         return (value == MO.EBoolean.True);
      }else if(value.constructor == Number){
         return value > 0;
      }else{
         throw new MO.TError(this, 'Unknown type.');
      }
   }
   return false;
}
MO.RBoolean.prototype.toString = function RBoolean_toString(value, valueTrue, valueFalse){
   if(valueTrue == null){
      valueTrue = MO.EBoolean.True;
   }
   if(valueFalse == null){
      valueFalse = MO.EBoolean.False;
   }
   return value ? valueTrue : valueFalse;
}
MO.RBoolean = new MO.RBoolean();
MO.Lang.Boolean = MO.RBoolean;
MO.RByte = function RByte(){
   return this;
}
MO.RByte.prototype.copy = function RByte_copy(po, poi, pi, pii, pc){
   for(var i = 0; i < pc; i++){
      po[poi++] = pi[pii++];
   }
}
MO.RByte.prototype.encodeBytes = function RByte_encodeBytes(data, offset, length, key){
   var o = this;
   var sign = new Uint8Array(8);
   sign[0] = (key >> 16) & 0xFF;
   sign[1] = (key >>  8) & 0xFF;
   sign[2] = (key      ) & 0xFF;
   sign[3] = (key >> 24) & 0xFF;
   sign[4] = (key      ) & 0xFF;
   sign[5] = (key >> 24) & 0xFF;
   sign[6] = (key >> 16) & 0xFF;
   sign[7] = (key >>  8) & 0xFF;
   for(var i = 0; i < length; i++){
      data[offset + i] ^= sign[i % 8];
   }
}
MO.RByte = new MO.RByte();
MO.Lang.Byte = MO.RByte;
MO.RChar = function RChar(){
   return this;
}
MO.RChar.prototype.parse = function RChar_parse(n){
   return String.fromCharCode(n);
}
MO.RChar.prototype.toString = function RChar_toString(value){
   return value;
}
MO.RChar = new MO.RChar();
MO.Lang.Char = MO.RChar;
MO.RConsole = function RConsole(){
   var o = this;
   o.ConsolePreFix = 'console:';
   o._registers     = new MO.TObjects();
   o._consoles      = new MO.TDictionary();
   o._localConsoles = new MO.TDictionary();
   return o;
}
MO.RConsole.prototype.initialize = function RConsole_initialize(){
   var o = this;
   var registers = o._registers;
   var count = registers.count();
   for(var n = 0; n < count; n++){
      var register = registers.get(n);
      if(register.force){
         o.find(register.clazz);
      }
   }
}
MO.RConsole.prototype.register = function RConsole_register(p){
   this._registers.push(p);
}
MO.RConsole.prototype.create = function RConsole_create(n){
   var r = null;
   if(n){
      r = MO.Class.create(n);
      var o = this;
      for(var rn in r){
         if(MO.Lang.String.startsWith(rn, 'lnk')){
            var v = r[rn];
            if('string' == typeof(v) && MO.Lang.String.startsWith(v, '&')){
               var c = o.find(v.substr(1));
               if(!c){
                  return MO.RMessage.fatal(o, null, "Can't link console. (name={0}, property={1}:{2})", n, rn, v);
               }
               r[rn] = c;
            }
         }
      }
   }
   return r;
}
MO.RConsole.prototype.createByName = function RConsole_createByName(n){
   var r = null;
   if(n){
      r = MO.Class.createByName(n);
      var o = this;
      for(var rn in r){
         if(MO.Lang.String.startsWith(rn, 'lnk')){
            var v = r[rn];
            if('string' == typeof(v) && MO.Lang.String.startsWith(v, '&')){
               var c = o.find(v.substr(1));
               if(!c){
                  return MO.Message.fatal(o, null, "Can't link console. (name={0}, property={1}:{2})", n, rn, v);
               }
               r[rn] = c;
            }
         }
      }
   }
   return r;
}
MO.RConsole.prototype.get = function RConsole_get(v){
   var o = this;
   var n = MO.Class.name(v);
   var r = o._consoles.get(n);
   return r;
}
MO.RConsole.prototype.find = function RConsole_find(value){
   var o = this;
   var name = null;
   if(value.constructor == String){
      name = value;
   }else if(value.constructor == Function){
      name = MO.Class.name(value);
   }else{
      return MO.Logger.fatal(o, null, 'Parameter type is invalid. (console={1})', value);
   }
   var console = MO.Global.get(o.ConsolePreFix + name);
   if(console){
      return console;
   }
   console = o._consoles.get(name);
   if(console){
      return console;
   }
   var template = MO.Class.forName(name);
   var scopeCd = template._instance.scopeCd();
   switch(scopeCd){
      case MO.EScope.Global:
         console = top.MO.Console.createByName(name);
         MO.Global.set(o.ConsolePreFix + name, console);
         o._consoles.set(name, console);
         break;
      case MO.EScope.Local:
         console = o.createByName(name);
         o._localConsoles.set(name, console);
         o._consoles.set(name, console);
         break;
      default:
         return MO.Logger.fatal(o, 'Unknown scope code. (name={1})', name);
   }
   return console;
}
MO.RConsole.prototype.release = function RConsole_release(){
   var o = this;
   if(o._registers){
      o._registers.dispose();
      o._registers = null;
   }
   var cs = o._localConsoles;
   if(cs){
      var c = cs.count();
      for(var n = 0; n < c; n++){
         cs.value(n).dispose();
      }
      cs.dispose();
   }
   o._localConsoles = null;
   if(o._consoles){
      o._consoles.dispose();
   }
   o._consoles = null;
}
MO.RConsole = new MO.RConsole();
MO.Console = MO.RConsole;
MO.RConst = function RConst(){
   var o = this;
   o.PI_2         = Math.PI / 2;
   o.PI           = Math.PI;
   o.PI2          = Math.PI * 2;
   o.RADIAN_RATE  = 180 / Math.PI;
   o.DEGREE_RATE  = Math.PI / 180;
   o.PERCENT_10   = 1 / 10;
   o.PERCENT_100  = 1 / 100;
   o.PERCENT_1000 = 1 / 1000;
   o.identity3x3  = [1, 0, 0, 0, 1, 0, 0, 0, 1];
   o.identity4x4  = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
   return o;
}
MO.RConst = new MO.RConst();
MO.Const = MO.RConst;
MO.Lang.Const = MO.RConst;
MO.REnum = function REnum(){
   return this;
}
MO.REnum.prototype.contains = function REnum_contains(){
}
MO.REnum.prototype.tryEncode = function REnum_tryEncode(instance, value, defaultValue){
   if(instance){
      for(var name in instance){
         if(name.toLowerCase() == value.toLowerCase()){
            return instance[name];
         }
      }
   }
   return defaultValue;
}
MO.REnum.prototype.encode = function REnum_encode(instance, value){
   var o = this;
   var result = o.tryEncode(instance, value);
   if(result == null){
      throw new MO.TError(o, 'Invalid value (enum={1}, value={2})', RClass.dump(instance), value);
   }
   return result;
}
MO.REnum.prototype.tryDecode = function REnum_tryDecode(instance, value, defaultValue){
   if(instance){
      for(var name in instance){
         if(instance[name] == value){
            return name;
         }
      }
   }
   return defaultValue;
}
MO.REnum.prototype.decode = function REnum_decode(instance, value){
   var o = this;
   var result = o.tryDecode(instance, value);
   if(result == null){
      throw new MO.TError(o, 'Invalid value (enum={1}, value={2})', MO.Class.dump(instance), value);
   }
   return result;
}
MO.REnum.prototype.parse = MO.REnum.prototype.encode;
MO.REnum = new MO.REnum();
MO.Lang.Enum = MO.REnum;
MO.RFile = function RFile(){
   var o = this;
   o.pictures = ['jpg', 'png', 'gif', 'bmp'];
   o.knowns   = ['jpg', 'png', 'gif', 'bmp', 'doc', 'docx', 'vsd', 'xls', 'xlsx'];
   return o;
}
MO.RFile.prototype.inPicture = function RFile_inPicture(v){
   var o = this;
   if(v){
      v = v.toLowerCase();
      for(var n in o.pictures){
         if(o.pictures[n] == v){
            return true;
         }
      }
   }
}
MO.RFile.prototype.isPicture = function RFile_isPicture(v){
   return this.inPicture(this.extension(v));
}
MO.RFile.prototype.isKnown = function RFile_isKnown(v){
   var o = this;
   v = o.extension(v).toLowerCase();
   for(var n in o.knowns){
      if(o.knowns[n] == v){
         return true;
      }
   }
   return false;
}
MO.RFile.prototype.name = function RFile_name(value){
   if(value){
      value = value.replace(/\\/g, '/');
      var p1 = value.lastIndexOf('/');
      if(p1 != -1){
         value = value.substring(p1 + 1);
      }
      var p2 = value.lastIndexOf('.');
      if(p2 != -1){
         return value.substring(0, p2);
      }
      return value;
   }
   return '';
}
MO.RFile.prototype.extension = function RFile_extension(v){
   if(v){
      v = v.replace(/\\/g, '/');
      var p1 = v.lastIndexOf('/');
      if(-1 != p1){
         v = v.substring(p1 + 1);
      }
      var p2 = v.lastIndexOf('.');
      if(-1 != p2){
         return v.substring(p2 + 1);
      }
      return v;
   }
   return '';
}
MO.RFile = new MO.RFile();
MO.Stream.File = MO.File;
MO.RFloat = function RFloat(){
   var o = this;
   o.Chars    = '0123456789-.%';
   o.NUMBER   = '0123456789-.%';
   o.PAD_CHAR = '0';
   return o;
}
MO.RFloat.prototype.isFloat = function RFloat_isFloat(p){
   return MO.Lang.String.isPattern(p, 'n');
}
MO.RFloat.prototype.parse = function RFloat_parse(source){
   if(source == null){
      return 0;
   }
   if(source == ''){
      return 0;
   }
   var value = MO.Lang.String.trim(source.toString());
   if(value == null){
      return 0;
   }
   while(true){
      if(value.charAt(0) != "0"){
         break;
      }
      value = value.substr(1);
   }
   var result = (value.length > 0) ? parseFloat(value) : 0;
   if(MO.Lang.String.findChars(result, '%') != -1){
      result = result / 100;
   }
   return isNaN(result) ? 0 : result;
}
MO.RFloat.prototype.format = function RFloat_format(value, leftLength, leftPad, rightLength, rightPad){
   var o = this;
   if(value == null){
      return '';
   }
   if(leftLength == null){
      leftLength = 0;
   }
   if(leftPad == null){
      leftPad = o.PAD_CHAR;
   }
   if(rightLength == null){
      rightLength = 6;
   }
   if(rightPad == null){
      rightPad = o.PAD_CHAR;
   }
   var leftSource = null;
   var rightSource = null;
   var text = value.toString();
   var index = text.indexOf('.');
   if(index == -1){
      leftSource = text;
      rightSource = '';
   }else{
      leftSource = text.substring(0, index);
      rightSource = text.substring(index + 1, index + rightLength + 1);
   }
   var left = MO.Lang.String.lpad(leftSource, leftLength, leftPad);
   var right = MO.Lang.String.rpad(rightSource, rightLength, rightPad);
   return left + '.' + right;
}
MO.RFloat.prototype.formatParttern = function RFloat_formatParttern(value, parttern){
   var floatVal = parseFloat(value);
   if (!isNaN(floatVal) && isFinite(value)) {
      var partternStr = parttern.toString();
      var partternLe = partternStr.length;
      var indexOf = partternStr.indexOf(".");
      var after = partternLe - indexOf - 1;
      var str = '';
      var string = null;
      var round = Math.round(floatVal * Math.pow(10, after)) / Math.pow(10, after);
      var roundStr = round.toString();
      var roundLe = roundStr.length;
      var roundIndex = roundStr.indexOf(".");
      var roundAfter = roundLe - roundIndex - 1;
      var poor = after - roundAfter;
      if(indexOf != -1){
         if(roundIndex == -1){
            for(var i = 0; i < after; i++){
               str += '0';
            }
            string = round + '.' + str;
         }else{
            if(after == roundAfter){
               string = round;
            }else{
               for(var i = 0; i < poor; i++){
                  str += '0';
               }
               string = round + str;
            }
         }
      }else{
         string = Math.round(round);
      }
      return string;
   }
}
MO.RFloat.prototype.unitFormat = function RFloat_unitFormat(v, l, lp, r, rp, divide, unit) {
   var o = this;
   if (l == null) {
      l = 0;
   }
   if (lp == null) {
      lp = o.PAD_CHAR;
   }
   if (r == null) {
      r = 6;
   }
   if (rp == null) {
      rp = o.PAD_CHAR;
   }
   if (divide == null || unit == null) {
      divide = 1;
      unit = '';
   }
   v /= divide;
   var s = v.toString();
   var f = s.indexOf('.');
   if (f == -1) {
      var sl = s;
      var sr = '';
   } else {
      var sl = s.substring(0, f);
      var sr = s.substring(f + 1, f + r + 1);
   }
   var fl = MO.Lang.String.lpad(sl, l, lp);
   var flc = new MO.TString();
   for (var i = 1; i - 1 < fl.length; i++) {
      flc.append(fl.substring(i - 1, i));
      if (fl.length - i > 0 && (fl.length - i) % 3 == 0) {
         flc.append(',');
      }
   }
   var fr = MO.Lang.String.rpad(sr, r, rp);
   return flc + '.' + fr + unit;
}
MO.RFloat.prototype.nvl = function RFloat_nvl(v, d){
   return v ? v : (d ? d : 0);
}
MO.RFloat.prototype.toRange = function RFloat_toRange(v, i, a){
   if(v == null){
      v = 0;
   }
   return Math.min(Math.max(v, i), a);
}
MO.RFloat.prototype.sum = function RFloat_sum(){
   var a = arguments;
   var r = 0;
   for(var i = a.length -1 ; i >= 0; i--){
      var v = a[n];
      if(v != null){
         r += parseFloat(v);
      }
   }
   return r;
}
MO.RFloat.prototype.calculate = function RFloat_calculate(f,a,b){
  var a = RFloat.nvl(a);
  var b = RFloat.nvl(b);
  a = parseFloat(a);
  b = parseFloat(b);
  if(f){
     return (a + b).toString();
  }else{
     return (a - b).toString();
  }
}
MO.RFloat.prototype.attach = function RFloat_attach(t, s, c){
   var r = false;
   for(var i = 0; i < c; i++){
      if(t[i] != s[i]){
         t[i] = s[i];
         r = true;
      }
   }
   return r;
}
MO.RFloat.prototype.fill = function RFloat_fill(d, i, c, v){
   for(var n = 0; n < c; n++){
      d[i++] = v;
   }
}
MO.RFloat.prototype.copy = function RFloat_copy(po, poi, pi, pii, pc){
   for(var i = 0; i < pc; i++){
      po[poi++] = pi[pii++];
   }
}
MO.RFloat = new MO.RFloat();
MO.Lang.Float = MO.RFloat;
MO.RHex = function RHex(){
   var o = this;
   o.NUMBER = '0x123456789ABCDEF';
   o.PAD    = '0';
   return o;
}
MO.RHex.prototype.isValid = function RHex_isValid(value){
   return MO.String.isPattern(value, this.NUMBER);
}
MO.RHex.prototype.parse = function RHex_parse(value){
   return value ? parseInt('0x' + value) : 0;
}
MO.RHex.prototype.format = function RHex_format(value, length){
   var result = null;
   if(value){
      result = value.toString(16);
   }else{
      result = '0';
   }
   return length ? MO.String.lpad(result, length, this.PAD) : result;
}
MO.RHex = new MO.RHex();
MO.Lang.Hex = MO.RHex;
MO.RInstance = function RInstance(){
   var o = this;
   o._pools = new MO.TDictionary();
   return o;
}
MO.RInstance.prototype.pool = function RInstance_pool(p){
   var o = this;
   var n = MO.Class.name(p);
   var v = o._pools.get(n);
   if(v == null){
      v = new MO.TInstancePool();
      o._pools.set(n, v);
   }
   return v;
}
MO.RInstance.prototype.get = function RInstance_get(p){
   return this.pool(p).instance(p);
}
MO.RInstance.prototype.alloc = function RInstance_alloc(n){
   return this.pool(p).alloc(p);
}
MO.RInstance.prototype.free = function RInstance_free(n){
   this.pool(p).free(p);
}
MO.RInstance = new MO.RInstance();
MO.Instance = MO.RInstance;
MO.RJson = function RJson(){
   return this;
}
MO.RJson.prototype.parse = function RJson_parse(value, clazz){
   var result = null;
   try{
      result = JSON.parse(value)
   }catch(e){
      if(clazz){
         result = new clazz();
      }
   }
   return result;
}
MO.RJson.prototype.toString = function RJson_toString(value){
   return JSON.stringify(value);
}
MO.Json = new MO.RJson();
MO.RRect = function RRect(){
   return this;
}
MO.RRect.prototype.nvl = function RRect_nvl(rect){
   return rect ? rect : new TRect();
}
MO.RRect.prototype.pack = function RRect_pack(rect){
   var pack = null;
   if(rect){
      pack = rect.left + ',' + rect.top + ',' + rect.right + ',' + rect.bottom;
   }
   return pack;
}
MO.RRect.prototype.unpack = function RRect_unpack(pack, rect){
   rect = this.nvl(rect);
   if(pack){
      var items = pack.split(',');
      if(items.length == 4){
         rect.left = RInt.parse(items[0]);
         rect.top = RInt.parse(items[1]);
         rect.right = RInt.parse(items[2])
         rect.bottom = RInt.parse(items[3]);
      }
   }
   return rect;
}
MO.RRect = new MO.RRect();
MO.RRegExp = function RRegExp(){
   return this;
}
MO.RRegExp.prototype.test = function RRegExp_test(r,s){
   if(r && s != null){
      return r.test(s);
   }
   return false;
}
MO.RRegExp.prototype.testRgexp = function RRegExp_testRgexp(eps,s){
   if(eps && s){
      var r = new R
      return eps.test(s);
   }
   return false;
}
MO.RRegExp = new MO.RRegExp();
MO.RSet = function RSet(){
   return this;
}
MO.RSet.prototype.contains = function RSet_contains(source, value){
   return (source & value) == value;
}
MO.RSet.prototype.containsString = function RSet_containsString(source, value){
   if((source != null) && (value != null)){
      return source.indexOf(value) != -1;
   }
   return false;
}
MO.Lang.Set = new MO.RSet();
MO.RTimer = function RTimer(){
   var o = this;
   o._startTime = 0;
   o._lastTime  = 0;
   o._count     = 0;
   return o;
}
MO.RTimer.prototype.setup = function RTimer_setup(){
   var o = this;
   var tick = new Date().getTime();
   o._startTime = tick;
   o._lastTime = tick;
}
MO.RTimer.prototype.now = function RTimer_now(){
   return new Date().getTime();
}
MO.RTimer.prototype.current = function RTimer_current(){
   return this._lastTime;
}
MO.RTimer.prototype.rate = function RTimer_rate(){
   var o = this;
   if(o._count == 0){
      return 0;
   }
   var t = o._lastTime - o._startTime;
   var c = o._count * 1000 / t;
   return parseInt(c);
}
MO.RTimer.prototype.update = function RTimer_update(){
   var o = this;
   o._count++;
   o._lastTime = new Date().getTime();
}
MO.RTimer = new MO.RTimer();
MO.Timer = MO.RTimer;
MO.EFrustumPlane = new function EFrustumPlane(){
   var o = this;
   o.Near = 0;
   o.Far = 1;
   o.Left = 2;
   o.Right = 3;
   o.Top = 4;
   o.Bottom = 5;
   o.Count = 6;
   return o;
}
MO.SColor4 = function SColor4(red, green, blue, alpha){
   var o = this;
   o.red          = red ? red : 0;
   o.green        = green ? green : 0;
   o.blue         = blue ? blue : 0;
   o.alpha        = alpha ? alpha : 1;
   o.assign       = MO.SColor4_assign;
   o.assignPower  = MO.SColor4_assignPower;
   o.set          = MO.SColor4_set;
   o.setInteger   = MO.SColor4_setInteger;
   o.setIntAlpha  = MO.SColor4_setIntAlpha;
   o.setHex       = MO.SColor4_setHex;
   o.serialize    = MO.SColor4_serialize;
   o.unserialize  = MO.SColor4_unserialize;
   o.unserialize3 = MO.SColor4_unserialize3;
   o.saveConfig   = MO.SColor4_saveConfig;
   o.savePower    = MO.SColor4_savePower;
   o.copyArray    = MO.SColor4_copyArray;
   o.toString     = MO.SColor4_toString;
   o.dispose      = MO.SColor4_dispose;
   return o;
}
MO.SColor4_assign = function SColor4_assign(p){
   var o = this;
   o.red = p.red;
   o.green = p.green;
   o.blue = p.blue;
   o.alpha = p.alpha;
}
MO.SColor4_assignPower = function SColor4_assignPower(p){
   var o = this;
   o.red = p.red * p.alpha;
   o.green = p.green * p.alpha;
   o.blue = p.blue * p.alpha;
   o.alpha = p.alpha;
}
MO.SColor4_set = function SColor4_set(r, g, b, a){
   var o = this;
   o.red = r;
   o.green = g;
   o.blue = b;
   o.alpha = a;
}
MO.SColor4_setInteger = function SColor4_setInteger(value){
   var o = this;
   o.red = ((value >> 16) & 0xFF) / 255;
   o.green = ((value >> 8) & 0xFF) / 255;
   o.blue = (value & 0xFF) / 255;
   o.alpha = ((value >> 24) & 0xFF) / 255;
}
MO.SColor4_setIntAlpha = function SColor4_setIntAlpha(value, alpha){
   var o = this;
   o.red = ((value >> 16) & 0xFF) / 255;
   o.green = ((value >> 8) & 0xFF) / 255;
   o.blue = (value & 0xFF) / 255;
   o.alpha = alpha;
}
MO.SColor4_setHex = function SColor4_setHex(value){
   var o = this;
   if(value.indexOf('#') == 0){
      value = value.substring(1);
   }
   if(value.indexOf('0x') == 0){
      value = value.substring(2);
   }
   if(value.length == 6){
      o.red = MO.Lang.Hex.parse(value.substring(0, 2)) / 255;
      o.green = MO.Lang.Hex.parse(value.substring(2, 4)) / 255;
      o.blue = MO.Lang.Hex.parse(value.substring(4, 6)) / 255;
   }else{
      throw new MO.TError(o, 'Invalid value.');
   }
}
MO.SColor4_serialize = function SColor4_serialize(p){
   var o = this;
   p.writeFloat(o.red);
   p.writeFloat(o.green);
   p.writeFloat(o.blue);
   p.writeFloat(o.alpha);
}
MO.SColor4_unserialize = function SColor4_unserialize(p){
   var o = this;
   o.red = p.readFloat();
   o.green = p.readFloat();
   o.blue = p.readFloat();
   o.alpha = p.readFloat();
}
MO.SColor4_unserialize3 = function SColor4_unserialize3(p){
   var o = this;
   o.red = p.readFloat();
   o.green = p.readFloat();
   o.blue = p.readFloat();
   o.alpha = 1.0;
}
MO.SColor4_saveConfig = function SColor4_saveConfig(p){
   var o = this;
   p.setFloat('r', o.red);
   p.setFloat('g', o.green);
   p.setFloat('b', o.blue);
   p.setFloat('a', o.alpha);
}
MO.SColor4_savePower = function SColor4_savePower(p){
   var o = this;
   p.setFloat('r', o.red);
   p.setFloat('g', o.green);
   p.setFloat('b', o.blue);
   p.setFloat('power', o.alpha);
}
MO.SColor4_copyArray = function SColor4_copyArray(d, i){
   var o = this;
   d[i++] = o.red;
   d[i++] = o.green;
   d[i++] = o.blue;
   d[i++] = o.alpha;
   return 4;
}
MO.SColor4_toString = function SColor4_toString(){
   var o = this;
   return MO.Lang.Float.format(o.red) + ',' + MO.Lang.Float.format(o.green) + ',' + MO.Lang.Float.format(o.blue) + ',' + MO.Lang.Float.format(o.alpha);
}
MO.SColor4_dispose = function SColor4_dispose(){
   var o = this;
   o.red = null;
   o.green = null;
   o.blue = null;
   o.alpha = null;
}
MO.SCorners = function SCorners(){
   var o = this;
   o.red          = 0;
   o.green        = 0;
   o.blue         = 0;
   o.alpha        = 1;
   o.assign       = MO.SCorners_assign;
   o.assignPower  = MO.SCorners_assignPower;
   o.set          = MO.SCorners_set;
   o.serialize    = MO.SCorners_serialize;
   o.unserialize  = MO.SCorners_unserialize;
   o.unserialize3 = MO.SCorners_unserialize3;
   o.saveConfig   = MO.SCorners_saveConfig;
   o.savePower    = MO.SCorners_savePower;
   o.copyArray    = MO.SCorners_copyArray;
   o.toString     = MO.SCorners_toString;
   return o;
}
MO.SCorners_assign = function SCorners_assign(p){
   var o = this;
   o.red = p.red;
   o.green = p.green;
   o.blue = p.blue;
   o.alpha = p.alpha;
}
MO.SCorners_assignPower = function SCorners_assignPower(p){
   var o = this;
   o.red = p.red * p.alpha;
   o.green = p.green * p.alpha;
   o.blue = p.blue * p.alpha;
   o.alpha = p.alpha;
}
MO.SCorners_set = function SCorners_set(r, g, b, a){
   var o = this;
   o.red = r;
   o.green = g;
   o.blue = b;
   o.alpha = a;
}
MO.SCorners_serialize = function SCorners_serialize(p){
   var o = this;
   p.writeFloat(o.red);
   p.writeFloat(o.green);
   p.writeFloat(o.blue);
   p.writeFloat(o.alpha);
}
MO.SCorners_unserialize = function SCorners_unserialize(p){
   var o = this;
   o.red = p.readFloat();
   o.green = p.readFloat();
   o.blue = p.readFloat();
   o.alpha = p.readFloat();
}
MO.SCorners_unserialize3 = function SCorners_unserialize3(p){
   var o = this;
   o.red = p.readFloat();
   o.green = p.readFloat();
   o.blue = p.readFloat();
   o.alpha = 1.0;
}
MO.SCorners_saveConfig = function SCorners_saveConfig(p){
   var o = this;
   p.setFloat('r', o.red);
   p.setFloat('g', o.green);
   p.setFloat('b', o.blue);
   p.setFloat('a', o.alpha);
}
MO.SCorners_savePower = function SCorners_savePower(p){
   var o = this;
   p.setFloat('r', o.red);
   p.setFloat('g', o.green);
   p.setFloat('b', o.blue);
   p.setFloat('power', o.alpha);
}
MO.SCorners_copyArray = function SCorners_copyArray(d, i){
   var o = this;
   d[i++] = o.red;
   d[i++] = o.green;
   d[i++] = o.blue;
   d[i++] = o.alpha;
   return 4;
}
MO.SCorners_toString = function SCorners_toString(){
   var o = this;
   return MO.Lang.Float.format(o.red) + ',' + MO.Lang.Float.format(o.green) + ',' + MO.Lang.Float.format(o.blue) + ',' + MO.Lang.Float.format(o.alpha);
}
MO.SFrustum = function SFrustum(){
   var o = this;
   o.center       = new MO.SPoint3();
   o.radius       = null;
   o.minX         = null;
   o.maxX         = null;
   o.minY         = null;
   o.maxY         = null;
   o.minZ         = null;
   o.maxZ         = null;
   o.points       = new Array(24);
   o.coners       = new Array(24);
   o.updateCenter = MO.SFrustum_updateCenter;
   o.update       = MO.SFrustum_update;
   o.updateFlat   = MO.SFrustum_updateFlat;
   return o;
}
MO.SFrustum_updateCenter = function SFrustum_updateCenter(){
   var o = this;
   var cs = o.coners;
   o.minX = o.minY = o.minZ = Number.MAX_VALUE;
   o.maxX = o.maxY = o.maxZ = -Number.MAX_VALUE;
   var i = 0;
   while(i < 24){
      var x = cs[i++];
      if(x < o.minX){
         o.minX = x;
      }
      if(x > o.maxX){
         o.maxX = x;
      }
      var y = cs[i++];
      if(y < o.minY){
         o.minY = y;
      }
      if(y > o.maxY){
         o.maxY = y;
      }
      var z = cs[i++];
      if(z < o.minZ){
         o.minZ = z;
      }
      if(z > o.maxZ){
         o.maxZ = z;
      }
   }
   o.center.x = (o.minX + o.maxX) * 0.5;
   o.center.y = (o.minY + o.maxY) * 0.5;
   o.center.z = (o.minZ + o.maxZ) * 0.5;
   var cx = o.maxX - o.minX;
   var cy = o.maxY - o.minY;
   var cz = o.maxZ - o.minZ;
   o.radius = Math.sqrt(cx * cx + cy * cy + cz * cz) * 0.5;
}
MO.SFrustum_update = function SFrustum_update(pva, pvw, pvh, pvn, pvf, pfr, pbr, pm){
   var o = this;
   var aspect = pvw / pvh;
   var znear = pvn;
   var zfar = pvf;
   var fov = Math.tan(MO.Const.DEGREE_RATE * pva * 0.5);
   var nearY = znear * fov;
   var nearX = nearY * aspect;
   var farY = zfar * fov;
   var farX = farY * aspect;
   var ps = o.points;
   ps[ 0] = -nearX;
   ps[ 1] =  nearY;
   ps[ 2] =  znear;
   ps[ 3] =  nearX;
   ps[ 4] =  nearY;
   ps[ 5] =  znear;
   ps[ 6] =  nearX;
   ps[ 7] = -nearY;
   ps[ 8] =  znear;
   ps[ 9] = -nearX;
   ps[10] = -nearY;
   ps[11] =  znear;
   ps[12] = -farX;
   ps[13] =  farY;
   ps[14] =  zfar;
   ps[15] =  farX;
   ps[16] =  farY;
   ps[17] =  zfar;
   ps[18] =  farX;
   ps[19] = -farY;
   ps[20] =  zfar;
   ps[21] = -farX;
   ps[22] = -farY;
   ps[23] =  zfar;
   var matrix = MO.Lang.Math.matrix;
   matrix.assign(pm);
   matrix.invert();
   matrix.transform(o.coners, ps, 8);
   o.updateCenter();
}
MO.SFrustum_updateFlat = function SFrustum_updateFlat(pva, pvw, pvh, pvn, pvf, pfr, pbr, pm){
   var o = this;
   var aspect = pvw / pvh;
   var znear = pvn * pbr;
   var zfar = pvf * pfr;
   var fov = Math.tan(MO.Const.DEGREE_RATE * pva * 0.5);
   var nearY = znear * fov;
   var nearX = nearY * aspect;
   var farY = zfar * fov;
   var farX = farY * aspect;
   var ps = o.points;
   ps[ 0] = -nearX;
   ps[ 1] =  nearY;
   ps[ 2] =  znear;
   ps[ 3] =  nearX;
   ps[ 4] =  nearY;
   ps[ 5] =  znear;
   ps[ 6] =  nearX;
   ps[ 7] = -nearY;
   ps[ 8] =  znear;
   ps[ 9] = -nearX;
   ps[10] = -nearY;
   ps[11] =  znear;
   ps[12] = -farX;
   ps[13] =  farY;
   ps[14] =  zfar;
   ps[15] =  farX;
   ps[16] =  farY;
   ps[17] =  zfar;
   ps[18] =  farX;
   ps[19] = -farY;
   ps[20] =  zfar;
   ps[21] = -farX;
   ps[22] = -farY;
   ps[23] =  zfar;
   var m = MO.Lang.Math.matrix;
   m.assign(pm);
   m.invert();
   m.transform(o.coners, 0, ps, 0, 8);
   o.coners[ 1] = 0.0;
   o.coners[ 4] = 0.0;
   o.coners[ 7] = 0.0;
   o.coners[10] = 0.0;
   o.coners[13] = 0.0;
   o.coners[16] = 0.0;
   o.coners[19] = 0.0;
   o.coners[22] = 0.0;
   o.updateCenter();
}
MO.SFrustumPlanes = function SFrustumPlanes(){
   var o = this;
   o.planes            = new Array();
   o.containsPoint     = MO.SFrustumPlanes_containsPoint;
   o.containsCube      = MO.SFrustumPlanes_containsCube;
   o.containsRectangle = MO.SFrustumPlanes_containsRectangle;
   o.containsCorners   = MO.SFrustumPlanes_containsCorners;
   o.containsSphere    = MO.SFrustumPlanes_containsSphere;
   o.updateVision      = MO.SFrustumPlanes_updateVision;
   for(var i = 0; i < MO.EFrustumPlane.Count; i++){
      o.planes.push(new MO.SPlane());
   }
   return o;
}
MO.SFrustumPlanes_containsPoint = function SFrustumPlanes_containsPoint(x, y, z){
   var o = this;
   var ps = o.planes;
   for(var i = 0; i < MO.EFrustumPlane.Count; i++){
      if(ps[n].dot(x, y, z) < 0){
         return false;
      }
   }
   return true;
}
MO.SFrustumPlanes_containsCube = function SFrustumPlanes_containsCube(cx, cy, cz, size){
   var o = this;
   var ps = o.planes;
   for(var i = 0; i < MO.EFrustumPlane.Count; i++){
      var p = ps[n];
      if(p.dot(cx - l, cy - l, cz - l) >= 0){
         continue;
      }
      if(p.dot(cx + l, cy - l, cz - l) >= 0){
         continue;
      }
      if(p.dot(cx - l, cy + l, cz - l) >= 0){
         continue;
      }
      if(p.dot(cx + l, cy + l, cz - l) >= 0){
         continue;
      }
      if(p.dot(cx - l, cy - l, cz + l) >= 0){
         continue;
      }
      if(p.dot(cx + l, cy - l, cz + l) >= 0){
         continue;
      }
      if(p.dot(cx - l, cy + l, cz + l) >= 0){
         continue;
      }
      if(p.dot(cx + l, cy + l, cz + l) >= 0){
         continue;
      }
      return false;
   }
   return true;
}
MO.SFrustumPlanes_containsRectangle = function SFrustumPlanes_containsRectangle(cx, cy, cz, sx, sy, sz){
   var o = this;
   var ps = o.planes;
   for(var i = 0; i < MO.EFrustumPlane.Count; i++){
      var p = ps[n];
      if(p.dot(cx - sx, cy - sy, cz - sz) >= 0){
         continue;
      }
      if(p.dot(cx + sx, cy - sy, cz - sz) >= 0){
         continue;
      }
      if(p.dot(cx - sx, cy + sy, cz - sz) >= 0){
         continue;
      }
      if(p.dot(cx + sx, cy + sy, cz - sz) >= 0){
         continue;
      }
      if(p.dot(cx - sx, cy - sy, cz + sz) >= 0){
         continue;
      }
      if(p.dot(cx + sx, cy - sy, cz + sz) >= 0){
         continue;
      }
      if(p.dot(cx - sx, cy + sy, cz + sz) >= 0){
         continue;
      }
      if(p.dot(cx + sx, cy + sy, cz + sz) >= 0){
         continue;
      }
      return false;
   }
   return true;
}
MO.SFrustumPlanes_containsCorners = function SFrustumPlanes_containsCorners(p){
   var o = this;
   var s = o.planes;
   for(var i = MO.EFrustumPlane.Count - 1; i >= 0; i--){
      var l = s[i];
      if(l.dot(p[ 0], p[ 1], p[ 2]) >= 0){
         continue;
      }
      if(l.dot(p[ 3], p[ 4], p[ 5]) >= 0){
         continue;
      }
      if(l.dot(p[ 6], p[ 7], p[ 8]) >= 0){
         continue;
      }
      if(l.dot(p[ 9], p[10], p[11]) >= 0){
         continue;
      }
      if(l.dot(p[12], p[13], p[14]) >= 0){
         continue;
      }
      if(l.dot(p[15], p[16], p[17]) >= 0){
         continue;
      }
      if(l.dot(p[18], p[19], p[20]) >= 0){
         continue;
      }
      if(l.dot(p[21], p[22], p[23]) >= 0){
         continue;
      }
      return false;
   }
   return true;
}
MO.SFrustumPlanes_containsSphere = function SFrustumPlanes_containsSphere(px, py, pz, pr){
   var o = this;
   var ps = o.planes;
   for(var i = 0; i < MO.EFrustumPlane.Count; i++){
      if(ps[n].dot(px, py, pz) < -pr){
         return false;
      }
   }
   return true;
}
MO.SFrustumPlanes_updateVision = function SFrustumPlanes_updateVision(p){
   var o = this;
   var ps = o.planes;
   var pn = ps[MO.EFrustumPlane.Near];
   pn.a = p[ 0 + 3] + p[ 0 + 2];
   pn.b = p[ 4 + 3] + p[ 4 + 2];
   pn.c = p[ 8 + 3] + p[ 8 + 2];
   pn.d = p[12 + 3] + p[12 + 2];
   pn.normalize();
   var pf = ps[MO.EFrustumPlane.Far];
   pf.a = p[ 0 + 3] - p[ 0 + 2];
   pf.b = p[ 4 + 3] - p[ 4 + 2];
   pf.c = p[ 8 + 3] - p[ 8 + 2];
   pf.d = p[12 + 3] - p[12 + 2];
   pf.normalize();
   var pl = ps[MO.EFrustumPlane.Left];
   pl.a = p[ 0 + 3] - p[ 0 + 0];
   pl.b = p[ 4 + 3] - p[ 4 + 0];
   pl.c = p[ 8 + 3] - p[ 8 + 0];
   pl.d = p[12 + 3] - p[12 + 0];
   pl.normalize();
   var pr = ps[MO.EFrustumPlane.Right];
   pr.a = p[ 0 + 3] + p[ 0 + 0];
   pr.b = p[ 4 + 3] + p[ 4 + 0];
   pr.c = p[ 8 + 3] + p[ 8 + 0];
   pr.d = p[12 + 3] + p[12 + 0];
   pr.normalize();
   var pt = ps[MO.EFrustumPlane.Top];
   pt.a = p[ 0 + 3] - p[ 0 + 1];
   pt.b = p[ 4 + 3] - p[ 4 + 1];
   pt.c = p[ 8 + 3] - p[ 8 + 1];
   pt.d = p[12 + 3] - p[12 + 1];
   pt.normalize();
   var pb = ps[MO.EFrustumPlane.Bottom];
   pb.a = p[ 0 + 3] + p[ 0 + 1];
   pb.b = p[ 4 + 3] + p[ 4 + 1];
   pb.c = p[ 8 + 3] + p[ 8 + 1];
   pb.d = p[12 + 3] + p[12 + 1];
   pb.normalize();
}
MO.SMatrix3d = function SMatrix3d(){
   var o = this;
   MO.SMatrix4x4.call(o);
   o._dirty         = false;
   o.tx             = 0;
   o.ty             = 0;
   o.tz             = 0;
   o.rx             = 0;
   o.ry             = 0;
   o.rz             = 0;
   o.sx             = 1;
   o.sy             = 1;
   o.sz             = 1;
   o.isIdentity     = MO.SMatrix3d_isIdentity;
   o.identity       = MO.SMatrix3d_identity;
   o.setTranslate   = MO.SMatrix3d_setTranslate;
   o.setRotation    = MO.SMatrix3d_setRotation;
   o.setScale       = MO.SMatrix3d_setScale;
   o.setScaleAll    = MO.SMatrix3d_setScaleAll;
   o.set            = MO.SMatrix3d_set;
   o.setAll         = MO.SMatrix3d_setAll;
   o.equals         = MO.SMatrix3d_equals;
   o.assign         = MO.SMatrix3d_assign;
   o.attach         = MO.SMatrix3d_attach;
   o.append         = MO.SMatrix3d_append;
   o.updateForce    = MO.SMatrix3d_updateForce;
   o.update         = MO.SMatrix3d_update;
   o.merge          = MO.SMatrix3d_merge;
   o.parse          = MO.SMatrix3d_parse;
   o.serialize      = MO.SMatrix3d_serialize;
   o.unserialize    = MO.SMatrix3d_unserialize;
   o.saveConfig     = MO.SMatrix3d_saveConfig;
   o.identity();
   return o;
}
MO.SMatrix3d_isIdentity = function SMatrix3d_isIdentity(){
   var o = this;
   if((o.tx != 0) || (o.ty != 0) || (o.tz != 0)){
      return false;
   }
   if((o.rx != 0) || (o.ry != 0) || (o.rz != 0)){
      return false;
   }
   if((o.sx != 1) || (o.sy != 1) || (o.sz != 1)){
      return false;
   }
   return o.isIdentityData();
}
MO.SMatrix3d_identity = function SMatrix3d_identity(){
   var o = this;
   o.tx = o.ty = o.tz = 0;
   o.rx = o.ry = o.rz = 0;
   o.sx = o.sy = o.sz = 1;
   return o.identityData();
}
MO.SMatrix3d_setTranslate = function SMatrix3d_setTranslate(x, y, z){
   var o = this;
   o.tx = x;
   o.ty = y;
   o.tz = z;
   o._dirty = true;
}
MO.SMatrix3d_setRotation = function SMatrix3d_setRotation(x, y, z){
   var o = this;
   o.rx = x;
   o.ry = y;
   o.rz = z;
   o._dirty = true;
}
MO.SMatrix3d_setScale = function SMatrix3d_setScale(x, y, z){
   var o = this;
   o.sx = x;
   o.sy = y;
   o.sz = z;
   o._dirty = true;
}
MO.SMatrix3d_setScaleAll = function SMatrix3d_setScaleAll(p){
   var o = this;
   o.sz = o.sy = o.sx = p;
   o._dirty = true;
}
MO.SMatrix3d_set = function SMatrix3d_set(pt, pr, ps){
   var o = this;
   o.tx = pt.x;
   o.ty = pt.y;
   o.tz = pt.z;
   o.rx = pr.x;
   o.ry = pr.y;
   o.rz = pr.z;
   o.sx = ps.x;
   o.sy = ps.y;
   o.sz = ps.z;
   o._dirty = true;
}
MO.SMatrix3d_setAll = function SMatrix3d_setAll(ptx, pty, ptz, prx, pry, prz, psx, psy, psz){
   var o = this;
   o.tx = ptx;
   o.ty = pty;
   o.tz = ptz;
   o.rx = prx;
   o.ry = pry;
   o.rz = prz;
   o.sx = psx;
   o.sy = psy;
   o.sz = psz;
   o._dirty = true;
}
MO.SMatrix3d_equals = function SMatrix3d_equals(p){
   return this.equalsData(p._data);
}
MO.SMatrix3d_assign = function SMatrix3d_assign(p){
   var o = this;
   o.tx = p.tx;
   o.ty = p.ty;
   o.tz = p.tz;
   o.rx = p.rx;
   o.ry = p.ry;
   o.rz = p.rz;
   o.sx = p.sx;
   o.sy = p.sy;
   o.sz = p.sz;
   return o.assignData(p._data);
}
MO.SMatrix3d_attach = function SMatrix3d_attach(p){
   var o = this;
   o.tx = p.tx;
   o.ty = p.ty;
   o.tz = p.tz;
   o.rx = p.rx;
   o.ry = p.ry;
   o.rz = p.rz;
   o.sx = p.sx;
   o.sy = p.sy;
   o.sz = p.sz;
   return o.attachData(p._data);
}
MO.SMatrix3d_append = function SMatrix3d_append(p){
   this.appendData(p._data);
}
MO.SMatrix3d_updateForce = function SMatrix3d_updateForce(){
   var o = this;
   var d = o._data;
   var rsx = Math.sin(o.rx);
   var rcx = Math.cos(o.rx);
   var rsy = Math.sin(o.ry);
   var rcy = Math.cos(o.ry);
   var rsz = Math.sin(o.rz);
   var rcz = Math.cos(o.rz);
   d[ 0] = rcy * rcz * o.sx;
   d[ 1] = rcy * rsz * o.sx;
   d[ 2] = -rsy * o.sx;
   d[ 3] = 0;
   d[ 4] = (rsx * rsy * rcz - rcx * rsz) * o.sy;
   d[ 5] = (rsx * rsy * rsz + rcx * rcz) * o.sy;
   d[ 6] = rsx * rcy * o.sy;
   d[ 7] = 0;
   d[ 8] = (rcx * rsy * rcz + rsx * rsz) * o.sz;
   d[ 9] = (rcx * rsy * rsz - rsx * rcz) * o.sz;
   d[10] = rcx * rcy * o.sz;
   d[11] = 0;
   d[12] = o.tx;
   d[13] = o.ty;
   d[14] = o.tz;
   d[15] = 1;
}
MO.SMatrix3d_update = function SMatrix3d_update(){
   var o = this;
   if(o._dirty){
      o.updateForce();
      o._dirty = false;
   }
}
MO.SMatrix3d_merge = function SMatrix3d_merge(bm, am){
   var o = this;
   o.tx = bm.tx + am.tx;
   o.ty = bm.ty + am.ty;
   o.tz = bm.tz + am.tz;
   o.rx = bm.rx + am.rx;
   o.ry = bm.ry + am.ry;
   o.rz = bm.rz + am.rz;
   o.sx = bm.sx * am.sx;
   o.sy = bm.sy * am.sy;
   o.sz = bm.sz * am.sz;
   o.updateForce();
}
function my_create() {
    var out = new Float32Array(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};
function my_normalize(out, mat) {
    var m44 = mat[15]
    if (m44 === 0)
        return false
    var scale = 1 / m44
    for (var i=0; i<16; i++)
        out[i] = mat[i] * scale
    return true
}
function my_clone(a) {
    var out = new Float32Array(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
function my_determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};
function my_invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
        return null;
    }
    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
};
function my_transpose(out, a) {
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    return out;
};
function my_vec4multMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
}
function my_mat3from4(out, mat4x4) {
    out[0][0] = mat4x4[ 0];
    out[0][1] = mat4x4[ 1];
    out[0][2] = mat4x4[ 2];
    out[1][0] = mat4x4[ 4];
    out[1][1] = mat4x4[ 5];
    out[1][2] = mat4x4[ 6];
    out[2][0] = mat4x4[ 8];
    out[2][1] = mat4x4[ 9];
    out[2][2] = mat4x4[10];
}
function my_combine(out, a, b, scale1, scale2) {
    out[0] = a[0] * scale1 + b[0] * scale2;
    out[1] = a[1] * scale1 + b[1] * scale2;
    out[2] = a[2] * scale1 + b[2] * scale2;
}
var vec3 = {
   length: function length(a) {
      var x = a[0], y = a[1], z = a[2];
      return Math.sqrt(x * x + y * y + z * z)
   },
   normalize: function normalize(out, a) {
         var x = a[0], y = a[1], z = a[2];
         var len = x * x + y * y + z * z
         if (len > 0) {
            len = 1 / Math.sqrt(len)
            out[0] = a[0] * len
            out[1] = a[1] * len
            out[2] = a[2] * len
         }
         return out
      },
   dot: function dot(a, b){
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
   },
   cross: function cross(out, a, b) {
      var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2];
      out[0] = ay * bz - az * by;
      out[1] = az * bx - ax * bz;
      out[2] = ax * by - ay * bx;
      return out
   }
}
var tmp = my_create()
var perspectiveMatrix = my_create();
var tmpVec4 = [0, 0, 0, 0];
var row = [ [0, 0, 0], [0, 0, 0], [0, 0, 0] ];
var pdum3 = [0, 0, 0];
MO.SMatrix3d_parse = function SMatrix3d_parse(translation, scale, skew, perspective, quaternion){
   var o = this;
   if(!translation) translation = [0,0,0];
   if(!scale) scale = [0,0,0];
   if(!skew) skew = [0,0,0];
   if(!perspective) perspective = [0,0,0,1];
   if(!quaternion) quaternion = [0,0,0,1];
   if(!my_normalize(tmp, o._data)){
      return false
   }
   my_clone(perspectiveMatrix, tmp);
   perspectiveMatrix[3] = 0
   perspectiveMatrix[7] = 0
   perspectiveMatrix[11] = 0
   perspectiveMatrix[15] = 1
   if(Math.abs(my_determinant(perspectiveMatrix) < 1e-8)){
      return false
   }
   var a03 = tmp[3], a13 = tmp[7], a23 = tmp[11], a30 = tmp[12], a31 = tmp[13], a32 = tmp[14], a33 = tmp[15];
   if(a03 !== 0 || a13 !== 0 || a23 !== 0){
      tmpVec4[0] = a03
      tmpVec4[1] = a13
      tmpVec4[2] = a23
      tmpVec4[3] = a33
      var ret = my_invert(perspectiveMatrix, perspectiveMatrix);
      if(!ret){
         return false
      }
      my_transpose(perspectiveMatrix, perspectiveMatrix);
      my_vec4multMat4(perspective, tmpVec4, perspectiveMatrix);
   } else {
      perspective[0] = perspective[1] = perspective[2] = 0
      perspective[3] = 1
   }
   translation[0] = a30;
   translation[1] = a31;
   translation[2] = a32;
   my_mat3from4(row, tmp);
   scale[0] = vec3.length(row[0]);
   vec3.normalize(row[0], row[0]);
   skew[0] = vec3.dot(row[0], row[1]);
   my_combine(row[1], row[1], row[0], 1.0, -skew[0])
   scale[1] = vec3.length(row[1])
   vec3.normalize(row[1], row[1])
   skew[0] /= scale[1]
   skew[1] = vec3.dot(row[0], row[2])
   my_combine(row[2], row[2], row[0], 1.0, -skew[1])
   skew[2] = vec3.dot(row[1], row[2])
   my_combine(row[2], row[2], row[1], 1.0, -skew[2])
   scale[2] = vec3.length(row[2])
   vec3.normalize(row[2], row[2])
   skew[1] /= scale[2]
   skew[2] /= scale[2]
   vec3.cross(pdum3, row[1], row[2]);
   if(vec3.dot(row[0], pdum3) < 0){
      for(var i = 0; i < 3; i++){
         scale[i] *= -1;
         row[i][0] *= -1;
         row[i][1] *= -1;
         row[i][2] *= -1;
      }
   }
   quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0))
   quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0))
   quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0))
   quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0))
   if (row[2][1] > row[1][2])
      quaternion[0] = -quaternion[0]
   if (row[0][2] > row[2][0])
      quaternion[1] = -quaternion[1]
   if (row[1][0] > row[0][1])
      quaternion[2] = -quaternion[2]
   var qx = quaternion[0];
   var qy = quaternion[1];
   var qz = quaternion[2];
   var qw = quaternion[3];
   o.rx = Math.atan2((qw * qx + qy * qz) * 2, 1 - 2 * (qx * qx + qy * qy));
   o.ry = Math.asin(2 * (qw * qy - qz * qx));
   o.rz = Math.atan2((qw * qz + qx * qy) * 2, 1 - 2 * (qy * qy + qz * qz));
   return true
}
MO.SMatrix3d_serialize = function SMatrix3d_serialize(p){
   var o = this;
   p.writeFloat(o.tx);
   p.writeFloat(o.ty);
   p.writeFloat(o.tz);
   p.writeFloat(o.rx);
   p.writeFloat(o.ry);
   p.writeFloat(o.rz);
   p.writeFloat(o.sx);
   p.writeFloat(o.sy);
   p.writeFloat(o.sz);
}
MO.SMatrix3d_unserialize = function SMatrix3d_unserialize(p){
   var o = this;
   o.tx = p.readFloat();
   o.ty = p.readFloat();
   o.tz = p.readFloat();
   o.rx = p.readFloat();
   o.ry = p.readFloat();
   o.rz = p.readFloat();
   o.sx = p.readFloat();
   o.sy = p.readFloat();
   o.sz = p.readFloat();
   o.updateForce();
}
MO.SMatrix3d_saveConfig = function SMatrix3d_saveConfig(p){
   var o = this;
   p.set('tx', MO.Lang.Float.format(o.tx));
   p.set('ty', MO.Lang.Float.format(o.ty));
   p.set('tz', MO.Lang.Float.format(o.tz));
   p.set('rx', MO.Lang.Float.format(o.rx));
   p.set('ry', MO.Lang.Float.format(o.ry));
   p.set('rz', MO.Lang.Float.format(o.rz));
   p.set('sx', MO.Lang.Float.format(o.sx));
   p.set('sy', MO.Lang.Float.format(o.sy));
   p.set('sz', MO.Lang.Float.format(o.sz));
}
MO.SMatrix3x3 = function SMatrix3x3(){
   var o = this;
   o._data           = new Array(9);
   o.data            = MO.SMatrix3x3_data;
   o.equalsData      = MO.SMatrix3x3_equalsData;
   o.assignData      = MO.SMatrix3x3_assignData;
   o.assign4x4       = MO.SMatrix3x3_assign4x4;
   o.appendData      = MO.SMatrix3x3_appendData;
   o.rotationX       = MO.SMatrix3x3_rotationX;
   o.rotationY       = MO.SMatrix3x3_rotationY;
   o.rotationZ       = MO.SMatrix3x3_rotationZ;
   o.rotation        = MO.SMatrix3x3_rotation;
   o.invert          = MO.SMatrix3x3_invert;
   o.transform       = MO.SMatrix3x3_transform;
   o.transformPoint3 = MO.SMatrix3x3_transformPoint3;
   o.build           = MO.SMatrix3x3_build;
   o.writeData       = MO.SMatrix3x3_writeData;
   o.toString        = MO.SMatrix3x3_toString;
   return o;
}
MO.SMatrix3x3_data = function SMatrix3x3_data(){
   return this._data;
}
MO.SMatrix3x3_equalsData = function SMatrix3x3_equalsData(p){
   var d = this._data;
   for(var i = 0; i < 9; i++){
      if(d[i] != p[i]){
         return false;
      }
   }
   return true;
}
MO.SMatrix3x3_assignData = function SMatrix3x3_assignData(valueData){
   var o = this;
   var data = o._data;
   for(var n = 0; n < 9; n++){
      data[n] = valueData[n];
   }
   return o;
}
MO.SMatrix3x3_assign4x4 = function SMatrix3x3_assign4x4(value){
   var o = this;
   var data = o._data;
   var valueData = value.data();
   data[0] = valueData[0];
   data[1] = valueData[1];
   data[2] = valueData[2];
   data[3] = valueData[4];
   data[4] = valueData[5];
   data[5] = valueData[6];
   data[6] = valueData[8];
   data[7] = valueData[9];
   data[8] = valueData[10];
   return o;
}
MO.SMatrix3x3_appendData = function SMatrix3x3_appendData(p){
   var d = this._data;
   var v0 = (d[0] * p[0]) + (d[1] * p[3]) + (d[2] * p[6]);
   var v1 = (d[0] * p[1]) + (d[1] * p[4]) + (d[2] * p[7]);
   var v2 = (d[0] * p[2]) + (d[1] * p[5]) + (d[2] * p[8]);
   var v3 = (d[3] * p[0]) + (d[4] * p[3]) + (d[5] * p[6]);
   var v4 = (d[3] * p[1]) + (d[4] * p[4]) + (d[5] * p[7]);
   var v5 = (d[3] * p[2]) + (d[4] * p[5]) + (d[5] * p[8]);
   var v6 = (d[6] * p[0]) + (d[7] * p[3]) + (d[8] * p[6]);
   var v7 = (d[6] * p[1]) + (d[7] * p[4]) + (d[8] * p[7]);
   var v8 = (d[6] * p[2]) + (d[7] * p[5]) + (d[8] * p[8]);
   d[0] = v0;
   d[1] = v1;
   d[2] = v2;
   d[3] = v3;
   d[4] = v4;
   d[5] = v5;
   d[6] = v6;
   d[7] = v7;
   d[8] = v8;
}
MO.SMatrix3x3_rotationX = function SMatrix3x3_rotationX(p){
   var rs = Math.sin(p);
   var rc = Math.cos(p);
   var v = MO.Lang.Math.value9;
   v[0] = 1;
   v[1] = 0;
   v[2] = 0;
   v[3] = 0;
   v[4] = rc;
   v[5] = rs;
   v[6] = 0;
   v[7] = -rs;
   v[8] = rc;
   this.appendData(v);
}
MO.SMatrix3x3_rotationY = function SMatrix3x3_rotationY(p){
   var rs = Math.sin(p);
   var rc = Math.cos(p);
   var v = RMath.value9;
   v[0] = rc;
   v[1] = 0;
   v[2] = rs;
   v[3] = 0;
   v[4] = 1;
   v[5] = 0;
   v[6] = -rs;
   v[7] = 0;
   v[8] = rc;
   this.appendData(v);
}
MO.SMatrix3x3_rotationZ = function SMatrix3x3_rotationZ(p){
   var rs = Math.sin(p);
   var rc = Math.cos(p);
   var v = RMath.value9;
   v[0] = rc;
   v[1] = rs;
   v[2] = 0;
   v[3] = -rs;
   v[4] = rc;
   v[5] = 1;
   v[6] = 0;
   v[7] = 0;
   v[8] = 1;
   this.appendData(v);
}
MO.SMatrix3x3_rotation = function SMatrix3x3_rotation(x, y, z){
   var rsx = Math.sin(x);
   var rcx = Math.cos(x);
   var rsy = Math.sin(y);
   var rcy = Math.cos(y);
   var rsz = Math.sin(z);
   var rcz = Math.cos(z);
   var v = RMath.value9;
   v[0] = rcy * rcz;
   v[1] = rcy * rsz;
   v[2] = -rsy;
   v[3] = rsx * rsy * rcz - rcx * rsz;
   v[4] = rsx * rsy * rsz + rcx * rcz;
   v[5] = rsx * rcy;
   v[6] = rcx * rsy * rcz + rsx * rsz;
   v[7] = rcx * rsy * rsz - rsx * rcx;
   v[8] = rcx * rcy;
   this.appendData(v);
}
MO.SMatrix3x3_invert = function SMatrix3x3_invert(){
   var o = this;
   var d = o._data;
   var v = RValue.value9;
   v[0] = (d[4] * d[8]) - (d[5] * d[7]);
   v[1] = (d[2] * d[7]) - (d[1] * d[8]);
   v[2] = (d[1] * d[5]) - (d[2] * d[4]);
   v[3] = (d[5] * d[6]) - (d[3] * d[8]);
   v[4] = (d[0] * d[8]) - (d[2] * d[6]);
   v[5] = (d[2] * d[3]) - (d[0] * d[5]);
   v[6] = (d[3] * d[7]) - (d[4] * d[6]);
   v[7] = (d[1] * d[6]) - (d[0] * d[7]);
   v[8] = (d[0] * d[4]) - (d[1] * d[3]);
   var r = (d[0] * v[0]) + (d[1] * v[3]) + (d[2] * v[6]);
   if(r == 0){
      return false;
   }
   r = 1 / r;
   for(var i = 0; i < 9; i++){
      d[i] = v[i] * r;
   }
   return true;
}
MO.SMatrix3x3_transform = function SMatrix3x3_transform(po, pi, pc){
   var d = this._data;
   for(var i = 0; i < pc; i++){
      var n = (i << 1) + i;
      po[n    ] = (pi[n] * d[0]) + (pi[n + 1] * d[3]) +(pi[n + 2] * d[6]);
      po[n + 1] = (pi[n] * d[1]) + (pi[n + 1] * d[4]) +(pi[n + 2] * d[7]);
      po[n + 2] = (pi[n] * d[2]) + (pi[n + 1] * d[5]) +(pi[n + 2] * d[8]);
   }
}
MO.SMatrix3x3_transformPoint3 = function SMatrix3x3_transformPoint3(inputPoint, outputPoint){
   var d = this._data;
   var x = (inputPoint.x * d[0]) + (inputPoint.y * d[3]) +(inputPoint.z * d[6]);
   var y = (inputPoint.x * d[1]) + (inputPoint.y * d[4]) +(inputPoint.z * d[7]);
   var z = (inputPoint.x * d[2]) + (inputPoint.y * d[5]) +(inputPoint.z * d[8]);
   var value = null;
   if(outputPoint){
      value = outputPoint;
   }else{
      value = new MO.SPoint3();
   }
   value.set(x, y, z);
   return value;
}
MO.SMatrix3x3_build = function SMatrix3x3_build(r){
   var d = this._data;
   var x2 = r.x * r.x;
   var y2 = r.y * r.y;
   var z2 = r.z * r.z;
   var xy = r.x * r.y;
   var xz = r.x * r.z;
   var yz = r.y * r.z;
   var wx = r.w * r.x;
   var wy = r.w * r.y;
   var wz = r.w * r.z;
   d[0] = 1 - 2 * (y2 + z2);
   d[1] = 2 * (xy - wz);
   d[2] = 2 * (xz + wy);
   d[3] = 2 * (xy + wz);
   d[4] = 1 - 2 * (x2 + z2);
   d[5] = 2 * (yz - wx);
   d[6] = 2 * (xz - wy);
   d[7] = 2 * (yz + wx);
   d[8] = 1 - 2 * (x2 + y2);
}
MO.SMatrix3x3_writeData = function SMatrix3x3_writeData(d, i){
   var o = this;
   var pd = o._data;
   d[i++] = pd[0];
   d[i++] = pd[3];
   d[i++] = pd[6];
   d[i++] = pd[1];
   d[i++] = pd[4];
   d[i++] = pd[7];
   d[i++] = pd[2];
   d[i++] = pd[5];
   d[i++] = pd[8];
}
MO.SMatrix3x3_toString = function SMatrix3x3_toString(){
   var d = this._data;
   var r = new MO.TString();
   for(var y = 0; y < 3; y++){
      if(y > 0){
         r.append('|');
      }
      for(var x = 0; x < 3; x++){
         var i = y * 3 + x;
         var v = d[i];
         if(x > 0){
            r.append(',');
         }
         r.append(MO.Lang.Float.format(v, 0, null, 3, null));
      }
   }
   return r.flush();
}
MO.SMatrix4x4 = function SMatrix4x4(){
   var o = this;
   o._data           = new Array(16);
   o.data            = MO.SMatrix4x4_data;
   o.isIdentityData  = MO.SMatrix4x4_isIdentityData;
   o.identityData    = MO.SMatrix4x4_identityData;
   o.equalsData      = MO.SMatrix4x4_equalsData;
   o.assignData      = MO.SMatrix4x4_assignData;
   o.attachData      = MO.SMatrix4x4_attachData;
   o.appendData      = MO.SMatrix4x4_appendData;
   o.addTranslate    = MO.SMatrix4x4_addTranslate;
   o.addRotationX    = MO.SMatrix4x4_addRotationX;
   o.addRotationY    = MO.SMatrix4x4_addRotationY;
   o.addRotationZ    = MO.SMatrix4x4_addRotationZ;
   o.addRotation     = MO.SMatrix4x4_addRotation;
   o.addRotationAxis = MO.SMatrix4x4_addRotationAxis;
   o.addScale        = MO.SMatrix4x4_addScale;
   o.normalize       = MO.SMatrix4x4_normalize;
   o.invert          = MO.SMatrix4x4_invert;
   o.transform       = MO.SMatrix4x4_transform;
   o.transformPoint3 = MO.SMatrix4x4_transformPoint3;
   o.buildQuaternion = MO.SMatrix4x4_buildQuaternion;
   o.build           = MO.SMatrix4x4_build;
   o.writeData       = MO.SMatrix4x4_writeData;
   o.writeData4x3    = MO.SMatrix4x4_writeData4x3;
   o.toString        = MO.SMatrix4x4_toString;
   return o;
}
MO.SMatrix4x4_data = function SMatrix4x4_data(){
   return this._data;
}
MO.SMatrix4x4_isIdentityData = function SMatrix4x4_isIdentityData(){
   var d = this._data;
   var v = MO.Const.identity4x4;
   for(var i = 0; i < 16; i++){
      if(d[i] != v[i]){
         return false;
      }
   }
   return true;
}
MO.SMatrix4x4_identityData = function SMatrix4x4_identityData(){
   var o = this;
   var d = o._data;
   var v = MO.Const.identity4x4;
   for(var i = 0; i < 16; i++){
      d[i] = v[i];
   }
   return o;
}
MO.SMatrix4x4_equalsData = function SMatrix4x4_equalsData(p){
   var d = this._data;
   for(var i = 0; i < 16; i++){
      if(d[i] != p[i]){
         return false;
      }
   }
   return true;
}
MO.SMatrix4x4_assignData = function SMatrix4x4_assignData(values){
   var o = this;
   var data = o._data;
   for(var n = 0; n < 16; n++){
      data[n] = values[n];
   }
   return o;
}
MO.SMatrix4x4_attachData = function SMatrix4x4_attachData(p){
   var r = false;
   var d = this._data;
   for(var i = 0; i < 16; i++){
      var v = p[i];
      if(!r){
         if(d[i] != v){
            r = true;
         }
      }
      d[i] = v;
   }
   return r;
}
MO.SMatrix4x4_appendData = function SMatrix4x4_appendData(p){
   var d = this._data;
   var v00 = (d[ 0] * p[0]) + (d[ 1] * p[4]) + (d[ 2] * p[ 8]) + (d[ 3] * p[12]);
   var v01 = (d[ 0] * p[1]) + (d[ 1] * p[5]) + (d[ 2] * p[ 9]) + (d[ 3] * p[13]);
   var v02 = (d[ 0] * p[2]) + (d[ 1] * p[6]) + (d[ 2] * p[10]) + (d[ 3] * p[14]);
   var v03 = (d[ 0] * p[3]) + (d[ 1] * p[7]) + (d[ 2] * p[11]) + (d[ 3] * p[15]);
   var v04 = (d[ 4] * p[0]) + (d[ 5] * p[4]) + (d[ 6] * p[ 8]) + (d[ 7] * p[12]);
   var v05 = (d[ 4] * p[1]) + (d[ 5] * p[5]) + (d[ 6] * p[ 9]) + (d[ 7] * p[13]);
   var v06 = (d[ 4] * p[2]) + (d[ 5] * p[6]) + (d[ 6] * p[10]) + (d[ 7] * p[14]);
   var v07 = (d[ 4] * p[3]) + (d[ 5] * p[7]) + (d[ 6] * p[11]) + (d[ 7] * p[15]);
   var v08 = (d[ 8] * p[0]) + (d[ 9] * p[4]) + (d[10] * p[ 8]) + (d[11] * p[12]);
   var v09 = (d[ 8] * p[1]) + (d[ 9] * p[5]) + (d[10] * p[ 9]) + (d[11] * p[13]);
   var v10 = (d[ 8] * p[2]) + (d[ 9] * p[6]) + (d[10] * p[10]) + (d[11] * p[14]);
   var v11 = (d[ 8] * p[3]) + (d[ 9] * p[7]) + (d[10] * p[11]) + (d[11] * p[15]);
   var v12 = (d[12] * p[0]) + (d[13] * p[4]) + (d[14] * p[ 8]) + (d[15] * p[12]);
   var v13 = (d[12] * p[1]) + (d[13] * p[5]) + (d[14] * p[ 9]) + (d[15] * p[13]);
   var v14 = (d[12] * p[2]) + (d[13] * p[6]) + (d[14] * p[10]) + (d[15] * p[14]);
   var v15 = (d[12] * p[3]) + (d[13] * p[7]) + (d[14] * p[11]) + (d[15] * p[15]);
   d[ 0] = v00;
   d[ 1] = v01;
   d[ 2] = v02;
   d[ 3] = v03;
   d[ 4] = v04;
   d[ 5] = v05;
   d[ 6] = v06;
   d[ 7] = v07;
   d[ 8] = v08;
   d[ 9] = v09;
   d[10] = v10;
   d[11] = v11;
   d[12] = v12;
   d[13] = v13;
   d[14] = v14;
   d[15] = v15;
}
MO.SMatrix4x4_addTranslate = function SMatrix4x4_addTranslate(x, y, z){
   var v = MO.Lang.Array.array16;
   v[ 0] = 1;
   v[ 1] = 0;
   v[ 2] = 0;
   v[ 3] = 0;
   v[ 4] = 0;
   v[ 5] = 1;
   v[ 6] = 0;
   v[ 7] = 0;
   v[ 8] = 0;
   v[ 9] = 0;
   v[10] = 1;
   v[11] = 0;
   v[12] = x;
   v[13] = y;
   v[14] = z;
   v[15] = 1;
   this.appendData(v);
}
MO.SMatrix4x4_addRotationX = function SMatrix4x4_addRotationX(p){
   var rs = Math.sin(p);
   var rc = Math.cos(p);
   var v = MO.Lang.Array.array16;
   v[ 0] = 1;
   v[ 1] = 0;
   v[ 2] = 0;
   v[ 3] = 0;
   v[ 4] = 0;
   v[ 5] = rc;
   v[ 6] = rs;
   v[ 7] = 0;
   v[ 8] = 0;
   v[ 9] = -rs;
   v[10] = rc;
   v[11] = 0;
   v[12] = 0;
   v[13] = 0;
   v[14] = 0;
   v[15] = 1;
   this.appendData(v);
}
MO.SMatrix4x4_addRotationY = function SMatrix4x4_addRotationY(p){
   var rs = Math.sin(p);
   var rc = Math.cos(p);
   var v = MO.Lang.Array.array16;
   v[ 0] = rc;
   v[ 1] = 0;
   v[ 2] = rs;
   v[ 3] = 0;
   v[ 4] = 0;
   v[ 5] = 1;
   v[ 6] = 0;
   v[ 7] = 0;
   v[ 8] = -rs;
   v[ 9] = 0;
   v[10] = rc;
   v[11] = 0;
   v[12] = 0;
   v[13] = 0;
   v[14] = 0;
   v[15] = 1;
   this.appendData(v);
}
MO.SMatrix4x4_addRotationZ = function SMatrix4x4_addRotationZ(p){
   var rs = Math.sin(p);
   var rc = Math.cos(p);
   var v = MO.Lang.Array.array16;
   v[ 0] = rc;
   v[ 1] = rs;
   v[ 2] = 0;
   v[ 3] = 0;
   v[ 4] = -rs;
   v[ 5] = rc;
   v[ 6] = 1;
   v[ 7] = 0;
   v[ 8] = 0;
   v[ 9] = 0;
   v[10] = 1;
   v[11] = 0;
   v[12] = 0;
   v[13] = 0;
   v[14] = 0;
   v[15] = 1;
   this.appendData(v);
}
MO.SMatrix4x4_addRotation = function SMatrix4x4_addRotation(x, y, z){
   var rsx = Math.sin(x);
   var rcx = Math.cos(x);
   var rsy = Math.sin(y);
   var rcy = Math.cos(y);
   var rsz = Math.sin(z);
   var rcz = Math.cos(z);
   var v = MO.Lang.Array.array16;
   v[ 0] = rcy * rcz;
   v[ 1] = rcy * rsz;
   v[ 2] = -rsy;
   v[ 3] = 0;
   v[ 4] = rsx * rsy * rcz - rcx * rsz;
   v[ 5] = rsx * rsy * rsz + rcx * rcz;
   v[ 6] = rsx * rcy;
   v[ 7] = 0;
   v[ 8] = rcx * rsy * rcz + rsx * rsz;
   v[ 9] = rcx * rsy * rsz - rsx * rcx;
   v[10] = rcx * rcy;
   v[11] = 0;
   v[12] = 0;
   v[13] = 0;
   v[14] = 0;
   v[15] = 1;
   this.appendData(v);
}
MO.SMatrix4x4_addRotationAxis = function SMatrix4x4_addRotationAxis(axis, angle){
   var c = Math.cos(angle);
   var s = Math.sin(angle);
   var t = 1 - c;
   var x = axis.x;
   var y = axis.y;
   var z = axis.z;
   var tx = t * x;
   var ty = t * y;
   var v = MO.Lang.Array.array16;
   v[ 0] = tx * x + c;
   v[ 1] = tx * y - s * z;
   v[ 2] = tx * z + s * y;
   v[ 3] = 0;
   v[ 4] = tx * y + s * z;
   v[ 5] = ty * y + c;
   v[ 6] = ty * z - s * x;
   v[ 7] = 0;
   v[ 8] = tx * z - s * y;
   v[ 9] = ty * z + s * x;
   v[10] = t * z * z + c;
   v[11] = 0;
   v[12] = 0;
   v[13] = 0;
   v[14] = 0;
   v[15] = 1;
   this.appendData(v);
}
MO.SMatrix4x4_addScale = function SMatrix4x4_addScale(x, y, z){
   var v = MO.Lang.Array.array16;
   v[ 0] = x;
   v[ 1] = 0;
   v[ 2] = 0;
   v[ 3] = 0;
   v[ 4] = 0;
   v[ 5] = y;
   v[ 6] = 0;
   v[ 7] = 0;
   v[ 8] = 0;
   v[ 9] = 0;
   v[10] = z;
   v[11] = 0;
   v[12] = 0;
   v[13] = 0;
   v[14] = 0;
   v[15] = 1;
   this.appendData(v);
}
MO.SMatrix4x4_normalize = function SMatrix4x4_normalize(){
   var o = this;
   var data = o._data;
   var m44 = data[15];
   if(m44 == 0){
      return false;
   }else if(m44 == 1){
      return true;
   }else{
      var scale = 1 / m44
      for(var i = 0; i < 16; i++){
         data[i] = data[i] * scale;
      }
      return true
   }
}
MO.SMatrix4x4_invert = function SMatrix4x4_invert(){
   var o = this;
   var d = o._data;
   var v = MO.Lang.Array.array16;
   v[ 0] =  (d[ 5] * d[10] * d[15]) - (d[ 5] * d[11] * d[14]) - (d[ 9] * d[ 6] * d[15]) + (d[ 9] * d[ 7] * d[14]) + (d[13] * d[ 6] * d[11]) - (d[13] * d[ 7] * d[10]);
   v[ 4] = -(d[ 4] * d[10] * d[15]) + (d[ 4] * d[11] * d[14]) + (d[ 8] * d[ 6] * d[15]) - (d[ 8] * d[ 7] * d[14]) - (d[12] * d[ 6] * d[11]) + (d[12] * d[ 7] * d[10]);
   v[ 8] =  (d[ 4] * d[ 9] * d[15]) - (d[ 4] * d[11] * d[13]) - (d[ 8] * d[ 5] * d[15]) + (d[ 8] * d[ 7] * d[13]) + (d[12] * d[ 5] * d[11]) - (d[12] * d[ 7] * d[ 9]);
   v[12] = -(d[ 4] * d[ 9] * d[14]) + (d[ 4] * d[10] * d[13]) + (d[ 8] * d[ 5] * d[14]) - (d[ 8] * d[ 6] * d[13]) - (d[12] * d[ 5] * d[10]) + (d[12] * d[ 6] * d[ 9]);
   v[ 1] = -(d[ 1] * d[10] * d[15]) + (d[ 1] * d[11] * d[14]) + (d[ 9] * d[ 2] * d[15]) - (d[ 9] * d[ 3] * d[14]) - (d[13] * d[ 2] * d[11]) + (d[13] * d[ 3] * d[10]);
   v[ 5] =  (d[ 0] * d[10] * d[15]) - (d[ 0] * d[11] * d[14]) - (d[ 8] * d[ 2] * d[15]) + (d[ 8] * d[ 3] * d[14]) + (d[12] * d[ 2] * d[11]) - (d[12] * d[ 3] * d[10]);
   v[ 9] = -(d[ 0] * d[ 9] * d[15]) + (d[ 0] * d[11] * d[13]) + (d[ 8] * d[ 1] * d[15]) - (d[ 8] * d[ 3] * d[13]) - (d[12] * d[ 1] * d[11]) + (d[12] * d[ 3] * d[ 9]);
   v[13] =  (d[ 0] * d[ 9] * d[14]) - (d[ 0] * d[10] * d[13]) - (d[ 8] * d[ 1] * d[14]) + (d[ 8] * d[ 2] * d[13]) + (d[12] * d[ 1] * d[10]) - (d[12] * d[ 2] * d[ 9]);
   v[ 2] =  (d[ 1] * d[ 6] * d[15]) - (d[ 1] * d[ 7] * d[14]) - (d[ 5] * d[ 2] * d[15]) + (d[ 5] * d[ 3] * d[14]) + (d[13] * d[ 2] * d[ 7]) - (d[13] * d[ 3] * d[ 6]);
   v[ 6] = -(d[ 0] * d[ 6] * d[15]) + (d[ 0] * d[ 7] * d[14]) + (d[ 4] * d[ 2] * d[15]) - (d[ 4] * d[ 3] * d[14]) - (d[12] * d[ 2] * d[ 7]) + (d[12] * d[ 3] * d[ 6]);
   v[10] =  (d[ 0] * d[ 5] * d[15]) - (d[ 0] * d[ 7] * d[13]) - (d[ 4] * d[ 1] * d[15]) + (d[ 4] * d[ 3] * d[13]) + (d[12] * d[ 1] * d[ 7]) - (d[12] * d[ 3] * d[ 5]);
   v[14] = -(d[ 0] * d[ 5] * d[14]) + (d[ 0] * d[ 6] * d[13]) + (d[ 4] * d[ 1] * d[14]) - (d[ 4] * d[ 2] * d[13]) - (d[12] * d[ 1] * d[ 6]) + (d[12] * d[ 2] * d[ 5]);
   v[ 3] = -(d[ 1] * d[ 6] * d[11]) + (d[ 1] * d[ 7] * d[10]) + (d[ 5] * d[ 2] * d[11]) - (d[ 5] * d[ 3] * d[10]) - (d[ 9] * d[ 2] * d[ 7]) + (d[ 9] * d[ 3] * d[ 6]);
   v[ 7] =  (d[ 0] * d[ 6] * d[11]) - (d[ 0] * d[ 7] * d[10]) - (d[ 4] * d[ 2] * d[11]) + (d[ 4] * d[ 3] * d[10]) + (d[ 8] * d[ 2] * d[ 7]) - (d[ 8] * d[ 3] * d[ 6]);
   v[11] = -(d[ 0] * d[ 5] * d[11]) + (d[ 0] * d[ 7] * d[ 9]) + (d[ 4] * d[ 1] * d[11]) - (d[ 4] * d[ 3] * d[ 9]) - (d[ 8] * d[ 1] * d[ 7]) + (d[ 8] * d[ 3] * d[ 5]);
   v[15] =  (d[ 0] * d[ 5] * d[10]) - (d[ 0] * d[ 6] * d[ 9]) - (d[ 4] * d[ 1] * d[10]) + (d[ 4] * d[ 2] * d[ 9]) + (d[ 8] * d[ 1] * d[ 6]) - (d[ 8] * d[ 2] * d[ 5]);
   var r = d[ 0] * v[ 0] + d[ 1] * v[ 4] + d[ 2] * v[ 8] + d[ 3] * v[12];
   if(r == 0){
     return false;
   }
   r = 1 / r;
   for(var i = 0; i < 16; i++){
      d[i] = v[i] * r;
   }
   return true;
}
MO.SMatrix4x4_transform = function SMatrix4x4_transform(outputData, outputIndex, inputData, inputIndex, count){
   var data = this._data;
   for(var i = 0; i < count; i++){
      var x = inputData[inputIndex++];
      var y = inputData[inputIndex++];
      var z = inputData[inputIndex++];
      outputData[outputIndex++] = (x * data[ 0]) + (y * data[ 4]) +(z * data[ 8]) + data[12];
      outputData[outputIndex++] = (x * data[ 1]) + (y * data[ 5]) +(z * data[ 9]) + data[13];
      outputData[outputIndex++] = (x * data[ 2]) + (y * data[ 6]) +(z * data[10]) + data[14];
   }
}
MO.SMatrix4x4_transformPoint3 = function SMatrix4x4_transformPoint3(input, output){
   var data = this._data;
   var x = (input.x * data[ 0]) + (input.y * data[ 4]) +(input.z * data[ 8]) + data[12];
   var y = (input.x * data[ 1]) + (input.y * data[ 5]) +(input.z * data[ 9]) + data[13];
   var z = (input.x * data[ 2]) + (input.y * data[ 6]) +(input.z * data[10]) + data[14];
   var result = null;
   if(output){
      result = output;
   }else{
      result = new MO.SPoint3();
   }
   result.set(x, y, z);
   return result;
}
MO.SMatrix4x4_build = function SMatrix4x4_build(t, r, s){
   var d = this._data;
   var x2 = r.x * r.x;
   var y2 = r.y * r.y;
   var z2 = r.z * r.z;
   var xy = r.x * r.y;
   var xz = r.x * r.z;
   var yz = r.y * r.z;
   var wx = r.w * r.x;
   var wy = r.w * r.y;
   var wz = r.w * r.z;
   d[ 0] = (1 - 2 * (y2 + z2)) * s.x;
   d[ 1] = 2 * (xy - wz) * s.x;
   d[ 2] = 2 * (xz + wy) * s.x;
   d[ 3] = 0;
   d[ 4] = 2 * (xy + wz) * s.y;
   d[ 5] = (1 - 2 * (x2 + z2)) * s.y;
   d[ 6] = 2 * (yz - wx) * s.y;
   d[ 7] = 0;
   d[ 8] = 2 * (xz - wy) * s.z;
   d[ 9] = 2 * (yz + wx) * s.z;
   d[10] = (1 - 2 * (x2 + y2)) * s.z;
   d[11] = 0;
   d[12] = t.x;
   d[13] = t.y;
   d[14] = t.z;
   d[15] = 1;
}
MO.SMatrix4x4_buildQuaternion = function SMatrix4x4_buildQuaternion(r){
   var d = this._data;
   var x2 = r.x * r.x;
   var y2 = r.y * r.y;
   var z2 = r.z * r.z;
   var xy = r.x * r.y;
   var xz = r.x * r.z;
   var yz = r.y * r.z;
   var wx = r.w * r.x;
   var wy = r.w * r.y;
   var wz = r.w * r.z;
   d[ 0] = 1 - 2 * (y2 + z2);
   d[ 1] = 2 * (xy - wz);
   d[ 2] = 2 * (xz + wy);
   d[ 3] = 0;
   d[ 4] = 2 * (xy + wz);
   d[ 5] = 1 - 2 * (x2 + z2);
   d[ 6] = 2 * (yz - wx);
   d[ 7] = 0;
   d[ 8] = 2 * (xz - wy);
   d[ 9] = 2 * (yz + wx);
   d[10] = 1 - 2 * (x2 + y2);
   d[11] = 0;
   d[12] = 0;
   d[13] = 0;
   d[14] = 0;
   d[15] = 1;
}
MO.SMatrix4x4_writeData = function SMatrix4x4_writeData(d, i){
   var o = this;
   var pd = o._data;
   d[i++] = pd[ 0];
   d[i++] = pd[ 4];
   d[i++] = pd[ 8];
   d[i++] = pd[12];
   d[i++] = pd[ 1];
   d[i++] = pd[ 5];
   d[i++] = pd[ 9];
   d[i++] = pd[13];
   d[i++] = pd[ 2];
   d[i++] = pd[ 6];
   d[i++] = pd[10];
   d[i++] = pd[14];
   d[i++] = pd[ 3];
   d[i++] = pd[ 7];
   d[i++] = pd[11];
   d[i++] = pd[15];
}
MO.SMatrix4x4_writeData4x3 = function SMatrix4x4_writeData4x3(d, i){
   var o = this;
   var pd = o._data;
   d[i++] = pd[ 0];
   d[i++] = pd[ 4];
   d[i++] = pd[ 8];
   d[i++] = pd[12];
   d[i++] = pd[ 1];
   d[i++] = pd[ 5];
   d[i++] = pd[ 9];
   d[i++] = pd[13];
   d[i++] = pd[ 2];
   d[i++] = pd[ 6];
   d[i++] = pd[10];
   d[i++] = pd[14];
}
MO.SMatrix4x4_toString = function SMatrix4x4_toString(){
   var d = this._data;
   var r = new MO.TString();
   for(var y = 0; y < 4; y++){
      if(y > 0){
         r.append('|');
      }
      for(var x = 0; x < 4; x++){
         var i = y * 4 + x;
         var v = d[i];
         if(x > 0){
            r.append(',');
         }
         r.append(MO.Lang.Float.format(v, 0, null, 3, null));
      }
   }
   return r.flush();
}
MO.SOutline2 = function SOutline2(){
   var o = this;
   o.min         = new MO.SPoint2();
   o.max         = new MO.SPoint2();
   o.isEmpty     = MO.SOutline2_isEmpty;
   o.assign      = MO.SOutline2_assign;
   o.setMin      = MO.SOutline2_setMin;
   o.setMax      = MO.SOutline2_setMax;
   o.set         = MO.SOutline2_set;
   o.mergeMin    = MO.SOutline2_mergeMin;
   o.mergeMax    = MO.SOutline2_mergeMax;
   o.mergeMax2   = MO.SOutline2_mergeMax2;
   o.mergePoint  = MO.SOutline2_mergePoint;
   o.serialize   = MO.SOutline2_serialize;
   o.unserialize = MO.SOutline2_unserialize;
   o.toString    = MO.SOutline2_toString;
   return o;
}
MO.SOutline2_isEmpty = function SOutline2_isEmpty(p){
   var o = this;
   return o.min.isEmpty() && o.max.isEmpty();
}
MO.SOutline2_assign = function SOutline2_assign(p){
   var o = this;
   o.min.assign(p.min);
   o.max.assign(p.max);
}
MO.SOutline2_setMin = function SOutline2_setMin(){
   var o = this;
   o.min.setMax();
   o.max.setMin();
}
MO.SOutline2_setMax = function SOutline2_setMax(){
   var o = this;
   o.min.setMin();
   o.max.setMax();
}
MO.SOutline2_set = function SOutline2_set(minX, minY, minZ, maxX, maxY, maxZ){
   var o = this;
   o.min.set(minX, minY, minZ);
   o.max.set(maxX, maxY, maxZ);
}
MO.SOutline2_mergeMin = function SOutline2_mergeMin(p){
   var o = this;
   o.min.mergeMax(p.min);
   o.max.mergeMin(p.max);
}
MO.SOutline2_mergeMax = function SOutline2_mergeMax(p){
   var o = this;
   o.min.mergeMin(p.min);
   o.max.mergeMax(p.max);
}
MO.SOutline2_mergeMax2 = function SOutline2_mergeMax2(x, y){
   var o = this;
   o.min.mergeMin2(x, y);
   o.max.mergeMax2(x, y);
}
MO.SOutline2_mergePoint = function SOutline2_mergePoint(x, y, z){
   var o = this;
   o.min.mergeMin3(x, y, z);
   o.max.mergeMax3(x, y, z);
}
MO.SOutline2_serialize = function SOutline2_serialize(p){
   var o = this;
   o.min.serialize(p);
   o.max.serialize(p);
}
MO.SOutline2_unserialize = function SOutline2_unserialize(p){
   var o = this;
   o.min.unserialize(p);
   o.max.unserialize(p);
}
MO.SOutline2_toString = function SOutline2_toString(){
   var o = this;
   return '(' + o.min + ')-(' + o.max + ')';
}
MO.SOutline2d = function SOutline2d(){
   var o = this;
   MO.SOutline2.call(o);
   o.center        = new MO.SPoint2();
   o.distance      = new MO.SPoint2();
   o.radius        = 0;
   o.points        = new Array(8);
   o.assign        = MO.SOutline2d_assign;
   o.set           = MO.SOutline2d_set;
   o.update        = MO.SOutline2d_update;
   return o;
}
MO.SOutline2d_assign = function SOutline2d_assign(value){
   var o = this;
   o.center.assign(value.center);
   o.distance.assign(value.distance);
   o.radius = value.radius;
   for(var i = 0; i < 8; i++){
      o.points[i] = value.points[i];
   }
}
MO.SOutline2d_set = function SOutline2d_set(minX, minY, maxX, maxY){
   var o = this;
   o.min.set(minX, minY);
   o.max.set(maxX, maxY);
   o.update();
}
MO.SOutline2d_update = function SOutline2d_update(){
   var o = this;
   var min = o.min;
   var minX = min.x;
   var minY = min.y;
   var max = o.max;
   var maxX = max.x;
   var maxY = max.y;
   var ps = o.points;
   ps[0] = minX;
   ps[1] = maxY;
   ps[2] = maxX;
   ps[3] = maxY;
   ps[4] = maxX;
   ps[5] = minY;
   ps[6] = minX;
   ps[7] = minY;
   var center = o.center;
   center.x = (minX + maxX) * 0.5;
   center.y = (minY + maxY) * 0.5;
   var distance = o.distance;
   distance.x = maxX - minX;
   distance.y = maxY - minY;
   var cx = maxX - minX;
   var cy = maxY - minY;
   o.radius = Math.sqrt(cx * cx + cy * cy) * 0.5;
}
MO.SOutline3 = function SOutline3(){
   var o = this;
   o.min         = new MO.SPoint3();
   o.max         = new MO.SPoint3();
   o.isEmpty     = MO.SOutline3_isEmpty;
   o.assign      = MO.SOutline3_assign;
   o.setMin      = MO.SOutline3_setMin;
   o.setMax      = MO.SOutline3_setMax;
   o.set         = MO.SOutline3_set;
   o.mergeMin    = MO.SOutline3_mergeMin;
   o.mergeMax    = MO.SOutline3_mergeMax;
   o.mergePoint  = MO.SOutline3_mergePoint;
   o.serialize   = MO.SOutline3_serialize;
   o.unserialize = MO.SOutline3_unserialize;
   o.toString    = MO.SOutline3_toString;
   return o;
}
MO.SOutline3_isEmpty = function SOutline3_isEmpty(p){
   var o = this;
   return o.min.isEmpty() && o.max.isEmpty();
}
MO.SOutline3_assign = function SOutline3_assign(p){
   var o = this;
   o.min.assign(p.min);
   o.max.assign(p.max);
}
MO.SOutline3_setMin = function SOutline3_setMin(){
   var o = this;
   o.min.setMax();
   o.max.setMin();
}
MO.SOutline3_setMax = function SOutline3_setMax(){
   var o = this;
   o.min.setMin();
   o.max.setMax();
}
MO.SOutline3_set = function SOutline3_set(minX, minY, minZ, maxX, maxY, maxZ){
   var o = this;
   o.min.set(minX, minY, minZ);
   o.max.set(maxX, maxY, maxZ);
}
MO.SOutline3_mergeMin = function SOutline3_mergeMin(p){
   var o = this;
   o.min.mergeMax(p.min);
   o.max.mergeMin(p.max);
}
MO.SOutline3_mergeMax = function SOutline3_mergeMax(p){
   var o = this;
   o.min.mergeMin(p.min);
   o.max.mergeMax(p.max);
}
MO.SOutline3_mergePoint = function SOutline3_mergePoint(x, y, z){
   var o = this;
   o.min.mergeMin3(x, y, z);
   o.max.mergeMax3(x, y, z);
}
MO.SOutline3_serialize = function SOutline3_serialize(p){
   var o = this;
   o.min.serialize(p);
   o.max.serialize(p);
}
MO.SOutline3_unserialize = function SOutline3_unserialize(p){
   var o = this;
   o.min.unserialize(p);
   o.max.unserialize(p);
}
MO.SOutline3_toString = function SOutline3_toString(){
   var o = this;
   return '(' + o.min + ')-(' + o.max + ')';
}
MO.SOutline3d = function SOutline3d(){
   var o = this;
   MO.SOutline3.call(o);
   o.center        = new MO.SPoint3();
   o.distance      = new MO.SPoint3();
   o.radius        = 0;
   o.points        = new Array(24);
   o.assign        = MO.SOutline3d_assign;
   o.set           = MO.SOutline3d_set;
   o.update        = MO.SOutline3d_update;
   o.calculateFrom = MO.SOutline3d_calculateFrom;
   o.calculate     = MO.SOutline3d_calculate;
   return o;
}
MO.SOutline3d_assign = function SOutline3d_assign(value){
   var o = this;
   o.center.assign(value.center);
   o.distance.assign(value.distance);
   o.radius = value.radius;
   for(var i = 0; i < 24; i++){
      o.points[i] = value.points[i];
   }
}
MO.SOutline3d_set = function SOutline3d_set(minX, minY, minZ, maxX, maxY, maxZ){
   var o = this;
   o.min.set(minX, minY, minZ);
   o.max.set(maxX, maxY, maxZ);
   o.update();
}
MO.SOutline3d_update = function SOutline3d_update(){
   var o = this;
   var min = o.min;
   var minX = min.x;
   var minY = min.y;
   var minZ = min.z;
   var max = o.max;
   var maxX = max.x;
   var maxY = max.y;
   var maxZ = max.z;
   var ps = o.points;
   ps[ 0] = minX;
   ps[ 1] = maxY;
   ps[ 2] = minZ;
   ps[ 3] = maxX;
   ps[ 4] = maxY;
   ps[ 5] = minZ;
   ps[ 6] = maxX;
   ps[ 7] = minY;
   ps[ 8] = minZ;
   ps[ 9] = minX;
   ps[10] = minY;
   ps[11] = minZ;
   ps[12] = minX;
   ps[13] = maxY;
   ps[14] = maxZ;
   ps[15] = maxX;
   ps[16] = maxY;
   ps[17] = maxZ;
   ps[18] = maxX;
   ps[19] = minY;
   ps[20] = maxZ;
   ps[21] = minX;
   ps[22] = minY;
   ps[23] = maxZ;
   var center = o.center;
   center.x = (minX + maxX) * 0.5;
   center.y = (minY + maxY) * 0.5;
   center.z = (minZ + maxZ) * 0.5;
   var distance = o.distance;
   distance.x = maxX - minX;
   distance.y = maxY - minY;
   distance.z = maxZ - minZ;
   var cx = maxX - minX;
   var cy = maxY - minY;
   var cz = maxZ - minZ;
   o.radius = Math.sqrt(cx * cx + cy * cy + cz * cz) * 0.5;
}
MO.SOutline3d_calculateFrom = function SOutline3d_calculateFrom(outline, matrix){
   var o = this;
   var points = o.points;
   matrix.transform(points, 0, outline.points, 0, 8);
   var minX = minY = minZ = Number.MAX_VALUE;
   var maxX = maxY = maxZ = -Number.MAX_VALUE;
   var i = 0;
   while(i < 24){
      var x = points[i++];
      if(x < minX){
         minX = x;
      }
      if(x > maxX){
         maxX = x;
      }
      var y = points[i++];
      if(y < minY){
         minY = y;
      }
      if(y > maxY){
         maxY = y;
      }
      var z = points[i++];
      if(z < minZ){
         minZ = z;
      }
      if(z > maxZ){
         maxZ = z;
      }
   }
   o.min.set(minX, minY, minZ);
   o.max.set(maxX, maxY, maxZ);
   o.update();
}
MO.SOutline3d_calculate = function SOutline3d_calculate(p){
   var o = this;
   var vix = viy = viz = Number.MAX_VALUE;
   var vax = vay = vaz = -Number.MAX_VALUE;
   var i = 0;
   var d = o.points;
   while(i < 24){
      var x = d[i++];
      if(x < vix){
         vix = x;
      }
      if(x > vax){
         vax = x;
      }
      var y = d[i++];
      if(y < viy){
         viy = y;
      }
      if(y > vay){
         vay = y;
      }
      var z = d[i++];
      if(z < viz){
         viz = z;
      }
      if(z > vaz){
         vaz = z;
      }
   }
   o.min.set(vix, viy, viz);
   o.max.set(vax, vay, vaz);
   o.center.x = (vix + vax) * 0.5;
   o.center.y = (viy + vay) * 0.5;
   o.center.z = (viz + vaz) * 0.5;
   var cx = vax - vix;
   var cy = vay - viy;
   var cz = vaz - viz;
   o.radius = Math.sqrt(cx * cx + cy * cy + cz * cz) * 0.5;
}
MO.SPadding = function SPadding(l, t, r, b){
   var o = this;
   o.left     = MO.Lang.Integer.nvl(l);
   o.top      = MO.Lang.Integer.nvl(t);
   o.right    = MO.Lang.Integer.nvl(r);
   o.bottom   = MO.Lang.Integer.nvl(b);
   o.isEmpty  = MO.SPadding_isEmpty;
   o.reset    = MO.SPadding_reset;
   o.assign   = MO.SPadding_assign;
   o.set      = MO.SPadding_set;
   o.parse    = MO.SPadding_parse;
   o.toString = MO.SPadding_toString;
   o.dispose  = MO.SPadding_dispose;
   o.dump     = MO.SPadding_dump;
   return o;
}
MO.SPadding_isEmpty = function SPadding_isEmpty(){
   var o = this;
   return (o.left == 0) && (o.top == 0) && (o.right == 0) && (o.bottom == 0);
}
MO.SPadding_reset = function SPadding_reset(){
   var o = this;
   o.left = 0;
   o.top = 0;
   o.right = 0;
   o.bottom = 0;
}
MO.SPadding_assign = function SPadding_assign(p){
   var o = this;
   o.left = p.left;
   o.top = p.top;
   o.right = p.right;
   o.bottom = p.bottom;
}
MO.SPadding_set = function SPadding_set(l, t, r, b){
   var o = this;
   o.left = l;
   o.top = t;
   o.right = r;
   o.bottom = b;
}
MO.SPadding_parse = function SPadding_parse(v){
   var o = this;
   var r = v.split(',')
   if(r.length == 4){
      o.left = parseInt(r[0]);
      o.top = parseInt(r[1]);
      o.right = parseInt(r[2]);
      o.bottom = parseInt(r[3]);
   }else{
      throw new MO.TError(o, "Parse value failure. (value={1})", v);
   }
}
MO.SPadding_toString = function SPadding_toString(){
   var o = this;
   return o.left + ',' + o.top + ',' + o.right + ',' + o.bottom;
}
MO.SPadding_dispose = function SPadding_dispose(){
   var o = this;
   o.left = null;
   o.top = null;
   o.right = null;
   o.bottom = null;
}
MO.SPadding_dump = function SPadding_dump(d){
   var o = this;
   return MO.Class.dump(o) + ' [' + o.left + ',' + o.top + ',' + o.right + ',' + o.bottom + ']';
}
MO.SPlane = function SPlane(){
   var o = this;
   o.a         = 0;
   o.b         = 0;
   o.c         = 0;
   o.d         = 0;
   o.assign    = MO.SPlane_assign;
   o.set       = MO.SPlane_set;
   o.normalize = MO.SPlane_normalize;
   o.dot       = MO.SPlane_dot;
   o.toString  = MO.SPlane_toString;
   o.dump      = MO.SPlane_dump;
   return o;
}
MO.SPlane_assign = function SPlane_assign(p){
   var o = this;
   o.a = p.a;
   o.b = p.b;
   o.c = p.c;
   o.d = p.d;
}
MO.SPlane_set = function SPlane_set(pa, pb, pc, pd){
   var o = this;
   o.a = pa;
   o.b = pb;
   o.c = pc;
   o.d = pd;
}
MO.SPlane_normalize = function SPlane_normalize(){
   var o = this;
   var r = 1 / Math.sqrt((o.a * o.a) + (o.b * o.b) + (o.c * o.c));
   o.a *= r;
   o.b *= r;
   o.c *= r;
   o.d *= r;
}
MO.SPlane_dot = function SPlane_dot(x, y, z){
   var o = this;
   return (x * o.a) + (y * o.b) + (z * o.c ) + o.d;
}
MO.SPlane_toString = function SPlane_toString(){
   var o = this;
   return o.a + ',' + o.b + ',' + o.c + ',' + o.d;
}
MO.SPlane_dump = function SPlane_dump(){
   var o = this;
   return MO.Class.dump(o) + ' [' + o.toString() + ']';
}
MO.SPoint2 = function SPoint2(x, y){
   var o = this;
   MO.SValue2.call(o, MO.Lang.Integer.nvl(x), MO.Lang.Integer.nvl(y));
   o.serialize   = MO.SPoint2_serialize;
   o.unserialize = MO.SPoint2_unserialize;
   o.parse       = MO.SPoint2_parse;
   o.parseFloat  = MO.SPoint2_parseFloat;
   o.toString    = MO.SPoint2_toString;
   o.dispose     = MO.SPoint2_dispose;
   return o;
}
MO.SPoint2_serialize = function SPoint2_serialize(output){
   var o = this;
   output.writeFloat(o.x);
   output.writeFloat(o.y);
}
MO.SPoint2_unserialize = function SPoint2_unserialize(input){
   var o = this;
   o.x = input.readFloat();
   o.y = input.readFloat();
}
MO.SPoint2_parse = function SPoint2_parse(source){
   var o = this;
   var items = source.split(',')
   if(items.length == 2){
      o.x = parseInt(items[0]);
      o.y = parseInt(items[1]);
   }else{
      throw new TError(o, "Parse value failure. (value={1})", source);
   }
}
MO.SPoint2_parseFloat = function SPoint2_parseFloat(source){
   var o = this;
   var items = source.split(',')
   if(items.length == 2){
      o.x = parseFloat(items[0]);
      o.y = parseFloat(items[1]);
   }else{
      throw new TError(o, "Parse value failure. (value={1})", source);
   }
}
MO.SPoint2_toString = function SPoint2_toString(){
   var o = this;
   return o.x + ',' + o.y;
}
MO.SPoint2_dispose = function SPoint2_dispose(){
   var o = this;
   o.x = null;
   o.y = null;
}
MO.SPoint3 = function SPoint3(x, y, z){
   var o = this;
   MO.SValue3.call(o, x, y, z);
   o.conjugate = MO.SPoint3_conjugate;
   o.mergeMin  = MO.SPoint3_mergeMin;
   o.mergeMin3 = MO.SPoint3_mergeMin3;
   o.mergeMax  = MO.SPoint3_mergeMax;
   o.mergeMax3 = MO.SPoint3_mergeMax3;
   o.moveTo    = MO.SPoint3_moveTo;
   o.resize    = MO.SPoint3_resize;
   o.slerp     = MO.SPoint3_slerp;
   return o;
}
MO.SPoint3_conjugate = function SPoint3_conjugate(p){
   var o = this;
   var r = null;
   if(p){
      r = p;
   }else{
      r = new MO.SPoint3();
   }
   r.x = -o.x;
   r.y = -o.y;
   r.z = -o.z;
   return r;
}
MO.SPoint3_mergeMin = function SPoint3_mergeMin(p){
   var o = this;
   o.x = Math.min(o.x, p.x);
   o.y = Math.min(o.y, p.y);
   o.z = Math.min(o.z, p.z);
}
MO.SPoint3_mergeMin3 = function SPoint3_mergeMin3(x, y, z){
   var o = this;
   o.x = Math.min(o.x, x);
   o.y = Math.min(o.y, y);
   o.z = Math.min(o.z, z);
}
MO.SPoint3_mergeMax = function SPoint3_mergeMax(p){
   var o = this;
   o.x = Math.max(o.x, p.x);
   o.y = Math.max(o.y, p.y);
   o.z = Math.max(o.z, p.z);
}
MO.SPoint3_mergeMax3 = function SPoint3_mergeMax3(x, y, z){
   var o = this;
   o.x = Math.max(o.x, x);
   o.y = Math.max(o.y, y);
   o.z = Math.max(o.z, z);
}
MO.SPoint3_resize = function SPoint3_resize(x, y, z){
   var o = this;
   if(x != null){
      o.x += x;
   }
   if(y != null){
      o.y += y;
   }
   if(z != null){
      o.z += z;
   }
}
MO.SPoint3_moveTo = function SPoint3_moveTo(direction, length){
   var o = this;
   o.x += direction.x * length;
   o.y += direction.y * length;
   o.z += direction.z * length;
}
MO.SPoint3_slerp = function SPoint3_slerp(v1, v2, r){
   var o = this;
   o.x = (v2.x - v1.x) * r + v1.x;
   o.y = (v2.y - v1.y) * r + v1.y;
   o.z = (v2.z - v1.z) * r + v1.z;
}
MO.SPoint4 = function SPoint4(x, y, z, w){
   var o = this;
   MO.SValue4.call(o, x, y, z, w);
   o.serialize3   = MO.SPoint4_serialize3;
   o.unserialize3 = MO.SPoint4_unserialize3;
   return o;
}
MO.SPoint4_serialize3 = function SPoint4_serialize3(p){
   var o = this;
   p.writeFloat(o.x);
   p.writeFloat(o.y);
   p.writeFloat(o.z);
}
MO.SPoint4_unserialize3 = function SPoint4_unserialize3(p){
   var o = this;
   o.x = p.readFloat();
   o.y = p.readFloat();
   o.z = p.readFloat();
}
MO.SQuaternion = function SQuaternion(){
   var o = this;
   o.x             = 0;
   o.y             = 0;
   o.z             = 0;
   o.w             = 1;
   o.identity      = MO.SQuaternion_identity;
   o.assign        = MO.SQuaternion_assign;
   o.set           = MO.SQuaternion_set;
   o.absolute      = MO.SQuaternion_absolute;
   o.normalize     = MO.SQuaternion_normalize;
   o.conjugate     = MO.SQuaternion_conjugate;
   o.mul           = MO.SQuaternion_mul;
   o.mul2          = MO.SQuaternion_mul2;
   o.translate     = MO.SQuaternion_translate;
   o.slerp         = MO.SQuaternion_slerp;
   o.fromAxisAngle = MO.SQuaternion_fromAxisAngle;
   o.fromEuler     = MO.SQuaternion_fromEuler;
   o.parseEuler    = MO.SQuaternion_parseEuler;
   o.serialize     = MO.SQuaternion_serialize;
   o.unserialize   = MO.SQuaternion_unserialize;
   o.clone         = MO.SQuaternion_clone;
   o.toString      = MO.SQuaternion_toString;
   return o;
}
MO.SQuaternion_identity = function SQuaternion_identity(){
   var o = this;
   o.x = o.y = o.z = 0;
   o.w = 1;
   return o;
}
MO.SQuaternion_assign = function SQuaternion_assign(value){
   var o = this;
   o.x = value.x;
   o.y = value.y;
   o.z = value.z;
   o.w = value.w;
}
MO.SQuaternion_set = function SQuaternion_set(x, y, z, w){
   var o = this;
   o.x = x;
   o.y = y;
   o.z = z;
   o.w = w;
}
MO.SQuaternion_absolute = function SQuaternion_absolute(){
   var o = this;
   return Math.sqrt((o.x * o.x) + (o.y * o.y) + (o.z * o.z) + (o.w * o.w));
}
MO.SQuaternion_normalize = function SQuaternion_normalize(){
   var o = this;
   var value = o.absolute();
   if(value != 0){
      var rate = 1 / value;
      o.x *= rate;
      o.y *= rate;
      o.z *= rate;
      o.w *= rate;
   }
}
MO.SQuaternion_conjugate = function SQuaternion_conjugate(value){
   var o = this;
   var result = null;
   if(value){
      result = value;
   }else{
      result = new MO.SQuaternion();
   }
   result.x = -o.x;
   result.y = -o.y;
   result.z = -o.z;
   result.w = o.w;
   return result;
}
MO.SQuaternion_mul = function SQuaternion_mul(value){
   var o = this;
   var x = o.x;
   var y = o.y;
   var z = o.z;
   var w = o.w;
   o.x = (w * value.x) + (x * value.w) + (y * value.z) - (z * value.y);
   o.y = (w * value.y) + (y * value.w) + (z * value.x) - (x * value.z);
   o.z = (w * value.z) + (z * value.w) + (x * value.y) - (y * value.x);
   o.w = (w * value.w) - (x * value.x) - (y * value.y) - (z * value.z);
}
MO.SQuaternion_mul2 = function SQuaternion_mul2(value1, value2){
   var o = this;
   o.x = (value1.w * value2.x) + (value1.x * value2.w) + (value1.y * value2.z) - (value1.z * value2.y);
   o.y = (value1.w * value2.y) + (value1.y * value2.w) + (value1.z * value2.x) - (value1.x * value2.z);
   o.z = (value1.w * value2.z) + (value1.z * value2.w) + (value1.x * value2.y) - (value1.y * value2.x);
   o.w = (value1.w * value2.w) - (value1.x * value2.x) - (value1.y * value2.y) - (value1.z * value2.z);
}
MO.SQuaternion_translate = function SQuaternion_translate(input, output){
   var o = this;
   var q1 = new MO.SQuaternion();
   q1.set(input.x, input.y, input.z, 0);
   q1.normalize();
   var q2 = o.conjugate();
   q1.mul(q2);
   var q = o.clone();
   q.mul(q1);
   var result = null;
   if(output){
      result = output;
   }else{
      result = new MO.SVector3();
   }
   result.set(q.x, q.y, q.z);
   return result;
}
MO.SQuaternion_slerp = function SQuaternion_slerp(value1, value2, rate){
   var o = this;
   var rv = (value1.x * value2.x) + (value1.y * value2.y) + (value1.z * value2.z) + (value1.w * value2.w);
   var rf = false;
   if (rv < 0){
      rf = true;
      rv = -rv;
   }
   var r1 = 0;
   var r2 = 0;
   if(rv > 0.999999){
      r1 = 1 - rate;
      r2 = rf ? -rate : rate;
   }else{
      var ra = Math.acos(rv);
      var rb = 1 / Math.sin(ra);
      r1 = Math.sin((1 - rate) * ra) * rb;
      r2 = rf ? (-Math.sin(rate * ra) * rb) : (Math.sin(rate * ra) * rb);
   }
   o.x = (r1 * value1.x) + (r2 * value2.x);
   o.y = (r1 * value1.y) + (r2 * value2.y);
   o.z = (r1 * value1.z) + (r2 * value2.z);
   o.w = (r1 * value1.w) + (r2 * value2.w);
}
MO.SQuaternion_fromAxisAngle = function SQuaternion_fromAxisAngle(axis, angle){
   var o = this;
   var r = angle * 0.5;
   var s = Math.sin(r);
   o.x = axis.x * s;
   o.y = axis.y * s;
   o.z = axis.z * s;
   o.w = Math.cos(r);
}
MO.SQuaternion_fromEuler = function SQuaternion_fromEuler(p, y, r){
   var o = this;
   var sr = Math.sin(r * 0.5);
   var cr = Math.cos(r * 0.5);
   var sp = Math.sin(p * 0.5);
   var cp = Math.cos(p * 0.5);
   var sy = Math.sin(y * 0.5);
   var cy = Math.cos(y * 0.5);
   o.x = cr * sp * cy + sr * cp * sy;
   o.y = cr * cp * sy - sr * sp * cy;
   o.z = sr * cp * cy - cr * sp * sy;
   o.w = cr * cp * cy + sr * sp * sy;
}
MO.SQuaternion_parseEuler = function SQuaternion_parseEuler(p){
   var o = this;
   var x2 = o.x * o.x;
   var y2 = o.y * o.y;
   var z2 = o.z * o.z;
   var r = null;
   if(p){
      r = p;
   }else{
      r = new MO.SVector3();
   }
   r.x = Math.asin(RFloat.toRange((o.w * o.x - o.y * o.z) * 2, -1, 1));
   r.y = Math.atan2(2 * (o.w * o.y + o.z * o.x) , 1 - 2 * (x2 + y2));
   r.z = Math.atan2(2 * (o.w * o.z + o.x * o.y) , 1 - 2 * (z2 + x2));
   return r;
}
MO.SQuaternion_serialize = function SQuaternion_serialize(output){
   var o = this;
   output.writeFloat(o.x);
   output.writeFloat(o.y);
   output.writeFloat(o.z);
   output.writeFloat(o.w);
}
MO.SQuaternion_unserialize = function SQuaternion_unserialize(input){
   var o = this;
   o.x = input.readFloat();
   o.y = input.readFloat();
   o.z = input.readFloat();
   o.w = input.readFloat();
}
MO.SQuaternion_clone = function SQuaternion_clone(){
   var o = this;
   var result = new MO.SQuaternion();
   result.x = o.x;
   result.y = o.y;
   result.z = o.z;
   result.w = o.w;
   return result;
}
MO.SQuaternion_toString = function SQuaternion_toString(){
   var o = this;
   return o.x + ',' + o.y + ',' + o.z + ',' + o.w;
}
MO.SRange = function SRange(x, y, w, h){
   var o = this;
   o.x         = x;
   o.y         = y;
   o.width     = w;
   o.height    = h;
   o.dump      = SRange_dump;
   return o;
}
MO.SRange_reset = function SRange_reset(){
   var o = this;
   o.left = 0;
   o.top = 0;
   o.right = 0;
   o.bottom = 0;
}
MO.SRange_assign = function SRange_assign(rect){
   this.left = rect.left;
   this.top = rect.top;
   this.right = rect.right;
   this.bottom = rect.bottom;
}
MO.SRange_set = function SRange_set(left, top, right, bottom){
   this.left = left;
   this.top = top;
   this.right = right;
   this.bottom = bottom;
}
MO.SRange_setBounds = function SRange_setBounds(left, top, width, height){
   var o = this;
   o.left = left;
   o.top = top;
   o.right = o.left + width - 1;
   o.bottom = o.top + height - 1;
}
MO.SRange_width = function SRange_width(){
   return this.right - this.left + 1;
}
MO.SRange_setWidth = function SRange_setWidth(width){
   if(width){
      this.right = this.left + width - 1;
   }
}
MO.SRange_height = function SRange_height(){
   return this.bottom - this.top + 1;
}
MO.SRange_setHeight = function SRange_setHeight(height){
   if(height){
      this.bottom = this.top + height - 1;
   }
}
MO.SRange_move = function SRange_move(x, y){
   this.left += x;
   this.top += y;
   this.right += x;
   this.bottom += y;
}
MO.SRange_inc = function SRange_inc(border){
   var n = RInt.nvl(border, 1);
   this.left -= n;
   this.top -= n;
   this.right += n;
   this.bottom += n;
}
MO.SRange_dec = function SRange_dec(border){
   var n = RInt.nvl(border, 1);
   this.left += n;
   this.top += n;
   this.right -= n;
   this.bottom -= n;
}
MO.SRange_dump = function SRange_dump(d){
   var o = this;
   d = RString.nvlStr(d);
   d.append(RClass.name(o));
   d.append(' [', o.x, ',', o.y, '-', o.width, ',', o.height, '] ');
   return d;
}
MO.SRectangle = function SRectangle(left, top, width, height){
   var o = this;
   o.left            = MO.Lang.Float.nvl(left);
   o.top             = MO.Lang.Float.nvl(top);
   o.width           = MO.Lang.Float.nvl(width);
   o.height          = MO.Lang.Float.nvl(height);
   o.right           = MO.SRectangle_right;
   o.bottom          = MO.SRectangle_bottom;
   o.isEmpty         = MO.SRectangle_isEmpty;
   o.testRange       = MO.SRectangle_testRange;
   o.testRectangle   = MO.SRectangle_testRectangle;
   o.reset           = MO.SRectangle_reset;
   o.assign          = MO.SRectangle_assign;
   o.setLocation     = MO.SRectangle_setLocation;
   o.setSize         = MO.SRectangle_setSize;
   o.setLocationSize = MO.SRectangle_setLocationSize;
   o.set             = MO.SRectangle_set;
   o.toString        = MO.SRectangle_toString;
   o.dispose         = MO.SRectangle_dispose;
   return o;
}
MO.SRectangle_right = function SRectangle_right(){
   return this.left + this.width;
}
MO.SRectangle_bottom = function SRectangle_bottom(){
   return this.top + this.height;
}
MO.SRectangle_isEmpty = function SRectangle_isEmpty(){
   var o = this;
   if((o.width > 0) && (o.height > 0)){
      return false;
   }
   return true;
}
MO.SRectangle_testRange = function SRectangle_testRange(x, y){
   var o = this;
   if(x < o.left){
      return false;
   }
   if(y < o.top){
      return false;
   }
   if(x - o.left > o.width){
      return false;
   }
   if(y - o.top > o.height){
      return false;
   }
   return true;
}
MO.SRectangle_testRectangle = function SRectangle_testRectangle(value) {
   var o = this;
   return (o.left < value.left + value.width && o.left + o.width > value.left && o.top < value.top + value.height && o.top + o.height > value.top);
}
MO.SRectangle_reset = function SRectangle_reset(){
   var o = this;
   o.left = 0;
   o.top = 0;
   o.width = 0;
   o.height = 0;
}
MO.SRectangle_assign = function SRectangle_assign(value){
   var o = this;
   o.left = value.left;
   o.top = value.top;
   o.width = value.width;
   o.height = value.height;
}
MO.SRectangle_setLocation = function SRectangle_setLocation(left, top){
   var o = this;
   o.left = left;
   o.top = top;
}
MO.SRectangle_setSize = function SRectangle_setSize(width, height){
   var o = this;
   o.width = width;
   o.height = height;
}
MO.SRectangle_setLocationSize = function SRectangle_setLocationSize(location, size){
   var o = this;
   o.left = location.x;
   o.top = location.y;
   o.width = size.width;
   o.height = size.height;
}
MO.SRectangle_set = function SRectangle_set(left, top, width, height){
   var o = this;
   o.left = left;
   o.top = top;
   o.width = width;
   o.height = height;
}
MO.SRectangle_toString = function SRectangle_toString(){
   var o = this;
   return o.left + ',' + o.top + ',' + o.width + ',' + o.height;
}
MO.SRectangle_dispose = function SRectangle_dispose(){
   var o = this;
   o.left = null;
   o.top = null;
   o.width = null;
   o.height = null;
}
MO.SSize2 = function SSize2(width, height){
   var o = this;
   o.width       = MO.Lang.Integer.nvl(width);
   o.height      = MO.Lang.Integer.nvl(height);
   o.isEmpty     = MO.SSize2_isEmpty;
   o.equalsData  = MO.SSize2_equalsData;
   o.equals      = MO.SSize2_equals;
   o.square      = MO.SSize2_square;
   o.assign      = MO.SSize2_assign;
   o.set         = MO.SSize2_set;
   o.serialize   = MO.SSize2_serialize;
   o.unserialize = MO.SSize2_unserialize;
   o.parse       = MO.SSize2_parse;
   o.toDisplay   = MO.SSize2_toDisplay;
   o.toString    = MO.SSize2_toString;
   o.dispose     = MO.SSize2_dispose;
   o.dump        = MO.SSize2_dump;
   return o;
}
MO.SSize2_isEmpty = function SSize2_isEmpty(){
   var o = this;
   return (o.width == 0) && (o.height == 0);
}
MO.SSize2_equalsData = function SSize2_equalsData(width, height){
   var o = this;
   if(o.width != width){
      return false;
   }
   if(o.height != height){
      return false;
   }
   return true;
}
MO.SSize2_equals = function SSize2_equals(p){
   var o = this;
   if(o.width != p.width){
      return false;
   }
   if(o.height != p.height){
      return false;
   }
   return true;
}
MO.SSize2_square = function SSize2_square(){
   return this.width * this.height;
}
MO.SSize2_assign = function SSize2_assign(v){
   var o = this;
   o.width = v.width;
   o.height = v.height;
}
MO.SSize2_set = function SSize2_set(w, h){
   var o = this;
   o.width = w;
   o.height = h;
}
MO.SSize2_serialize = function SSize2_serialize(output){
   var o = this;
   output.writeFloat(o.width);
   output.writeFloat(o.height);
}
MO.SSize2_unserialize = function SSize2_unserialize(input, dataCd){
   var o = this;
   if(!dataCd){
      dataCd = MO.EDataType.Float16;
   }
   o.width = input.readData(dataCd);
   o.height = input.readData(dataCd);
}
MO.SSize2_parse = function SSize2_parse(v){
   var o = this;
   var r = v.split(',')
   if(r.length == 2){
      o.width = parseInt(r[0]);
      o.height = parseInt(r[1]);
   }else{
      throw new TError(o, "Parse value failure. (value={1})", v);
   }
}
MO.SSize2_toDisplay = function SSize2_toDisplay(){
   var o = this;
   return o.width + 'x' + o.height;
}
MO.SSize2_toString = function SSize2_toString(){
   var o = this;
   return o.width + ',' + o.height;
}
MO.SSize2_dispose = function SSize2_dispose(){
   var o = this;
   o.width = null;
   o.height = null;
}
MO.SSize2_dump = function SSize2_dump(){
   var o = this;
   return MO.Class.dump(o) + ' [' + o.width + ',' + o.height + ']';
}
MO.SSize3 = function SSize3(w, h, d){
   var o = this;
   o.width    = MO.Lang.Integer.nvl(w);
   o.height   = MO.Lang.Integer.nvl(h);
   o.deep     = MO.Lang.Integer.nvl(d);
   o.assign   = MO.SSize3_assign;
   o.set      = MO.SSize3_set;
   o.parse    = MO.SSize3_parse;
   o.toString = MO.SSize3_toString;
   o.dump     = MO.SSize3_dump;
   return o;
}
MO.SSize3_assign = function SSize3_assign(v){
   var o = this;
   o.width = v.width;
   o.height = v.height;
   o.deep = v.deep;
}
MO.SSize3_set = function SSize3_set(w, h, d){
   var o = this;
   o.width = w;
   o.height = h;
   o.deep = d;
}
MO.SSize3_parse = function SSize3_parse(v){
   var o = this;
   var r = v.split(',')
   if(r.length == 3){
      o.width = parseInt(r[0]);
      o.height = parseInt(r[1]);
      o.deep = parseInt(r[2]);
   }else{
      throw new MO.TError(o, "Parse value failure. (value={1})", v);
   }
}
MO.SSize3_toString = function SSize3_toString(){
   var o = this;
   return o.width + ',' + o.height + ',' + o.deep;
}
MO.SSize3_dump = function SSize3_dump(){
   var o = this;
   return MO.Lang.Class.dump(o) + ' [' + o.width + ',' + o.height + ',' + o.deep + ']';
}
MO.SSquare = function SSquare(l, t, r, b){
   var o = this;
   o.left      = MO.Lang.Integer.nvl(left);
   o.top       = MO.Lang.Integer.nvl(top);
   o.right     = MO.Lang.Integer.nvl(right);
   o.bottom    = MO.Lang.Integer.nvl(bottom);
   o.reset     = MO.SSquare_reset;
   o.assign    = MO.SSquare_assign;
   o.set       = MO.SSquare_set;
   o.setBounds = MO.SSquare_setBounds;
   o.width     = MO.SSquare_width;
   o.setWidth  = MO.SSquare_setWidth;
   o.height    = MO.SSquare_height;
   o.setHeight = MO.SSquare_setHeight;
   o.move      = MO.SSquare_move;
   o.inc       = MO.SSquare_inc;
   o.dec       = MO.SSquare_dec;
   o.pack      = MO.SSquare_dump;
   o.unpack    = MO.SSquare_dump;
   o.dump      = MO.SSquare_dump;
   return o;
}
MO.SSquare_reset = function SSquare_reset(){
   var o = this;
   o.left = 0;
   o.top = 0;
   o.right = 0;
   o.bottom = 0;
}
MO.SSquare_assign = function SSquare_assign(value){
   var o = this;
   o.left = value.left;
   o.top = value.top;
   o.right = value.right;
   o.bottom = value.bottom;
}
MO.SSquare_set = function SSquare_set(left, top, right, bottom){
   var o = this;
   o.left = left;
   o.top = top;
   o.right = right;
   o.bottom = bottom;
}
MO.SSquare_setBounds = function SSquare_setBounds(left, top, width, height){
   var o = this;
   o.left = left;
   o.top = top;
   o.right = o.left + width - 1;
   o.bottom = o.top + height - 1;
}
MO.SSquare_width = function SSquare_width(){
   return this.right - this.left + 1;
}
MO.SSquare_setWidth = function SSquare_setWidth(width){
   if(width){
      this.right = this.left + width - 1;
   }
}
MO.SSquare_height = function SSquare_height(){
   return this.bottom - this.top + 1;
}
MO.SSquare_setHeight = function SSquare_setHeight(height){
   if(height){
      this.bottom = this.top + height - 1;
   }
}
MO.SSquare_move = function SSquare_move(x, y){
   this.left += x;
   this.top += y;
   this.right += x;
   this.bottom += y;
}
MO.SSquare_inc = function SSquare_inc(border){
   var n = RInt.nvl(border, 1);
   this.left -= n;
   this.top -= n;
   this.right += n;
   this.bottom += n;
}
MO.SSquare_dec = function SSquare_dec(border){
   var n = RInt.nvl(border, 1);
   this.left += n;
   this.top += n;
   this.right -= n;
   this.bottom -= n;
}
MO.SSquare_dump = function SSquare_dump(d){
   d = MO.Lang.String.nvlStr(d);
   d.append(MO.Class.name(this));
   d.append(' [', this.left, ',', this.top, '-', this.right, ',', this.bottom, '] ');
   d.append('(', this.width(), '-', this.height(), ')');
   return d;
}
MO.SValue2 = function SValue2(x, y){
   var o = this;
   o.x            = MO.Runtime.nvl(x, 0);
   o.y            = MO.Runtime.nvl(y, 0);
   o.isEmpty      = MO.SValue2_isEmpty;
   o.equals       = MO.SValue2_equals;
   o.equalsData   = MO.SValue2_equalsData;
   o.assign       = MO.SValue2_assign;
   o.setMin       = MO.SValue2_setMin;
   o.setMax       = MO.SValue2_setMax;
   o.set          = MO.SValue2_set;
   o.setAll       = MO.SValue2_setAll;
   o.add          = MO.SValue2_add;
   o.mul          = MO.SValue2_mul;
   o.mergeMin     = MO.SValue2_mergeMin;
   o.mergeMin2    = MO.SValue2_mergeMin2;
   o.mergeMax     = MO.SValue2_mergeMax;
   o.mergeMax2    = MO.SValue2_mergeMax2;
   o.length       = MO.SValue2_length;
   o.length2      = MO.SValue2_length2;
   o.absolute     = MO.SValue2_absolute;
   o.normalize    = MO.SValue2_normalize;
   o.negative     = MO.SValue2_negative;
   o.parse        = MO.SValue2_parse;
   o.toDisplay    = MO.SValue2_toDisplay;
   o.toString     = MO.SValue2_toString;
   return o;
}
MO.SValue2_isEmpty = function SValue2_isEmpty(){
   return (this.x == 0) && (this.y == 0);
}
MO.SValue2_equals = function SValue2_equals(value){
   return (this.x == value.x) && (this.y == value.y);
}
MO.SValue2_equalsData = function SValue2_equalsData(x, y){
   return (this.x == x) && (this.y == y);
}
MO.SValue2_assign = function SValue2_assign(value){
   this.x = value.x;
   this.y = value.y;
}
MO.SValue2_setMin = function SValue2_setMin(){
   this.x = Number.MIN_VALUE;
   this.y = Number.MIN_VALUE;
}
MO.SValue2_setMax = function SValue2_setMax(){
   this.x = Number.MAX_VALUE;
   this.y = Number.MAX_VALUE;
}
MO.SValue2_set = function SValue2_set(x, y){
   this.x = x;
   this.y = y;
}
MO.SValue2_setAll = function SValue2_set(value){
   this.x = value;
   this.y = value;
}
MO.SValue2_add = function SValue2_add(x, y){
   this.x += x;
   this.y += y;
}
MO.SValue2_mul = function SValue2_mul(x, y){
   this.x *= x;
   this.y *= y;
}
MO.SValue2_normalize = function SValue2_normalize(){
   var value = this.absolute();
   if(value != 0){
      var rate = 1 / value;
      this.x *= rate;
      this.y *= rate;
   }
   return this;
}
MO.SValue2_mergeMin = function SValue2_mergeMin(value){
   var o = this;
   o.x = Math.min(o.x, value.x);
   o.y = Math.min(o.y, value.y);
}
MO.SValue2_mergeMin2 = function SValue2_mergeMin2(x, y){
   var o = this;
   o.x = Math.min(o.x, x);
   o.y = Math.min(o.y, y);
}
MO.SValue2_mergeMax = function SValue2_mergeMax(value){
   var o = this;
   o.x = Math.max(o.x, value.x);
   o.y = Math.max(o.y, value.y);
}
MO.SValue2_mergeMax2 = function SValue2_mergeMax2(x, y){
   var o = this;
   o.x = Math.max(o.x, x);
   o.y = Math.max(o.y, y);
}
MO.SValue2_length = function SValue2_length(value){
   var cx = this.x - value.x;
   var cy = this.y - value.y;
   return Math.sqrt(cx * cx + cy * cy);
}
MO.SValue2_length2 = function SValue2_length2(x, y){
   var cx = this.x - x;
   var cy = this.y - y;
   return Math.sqrt(cx * cx + cy * cy);
}
MO.SValue2_absolute = function SValue2_absolute(){
   return Math.sqrt((this.x * this.x) + (this.y * this.y));
}
MO.SValue2_negative = function SValue2_negative(value){
   var result = null;
   if(p){
      result = value;
   }else{
      result = new this.constructor();
   }
   result.x = -this.x;
   result.y = -this.y;
   return result;
}
MO.SValue2_parse = function SValue2_parse(value){
   var items = value.split(',')
   if(items.length == 2){
      this.x = parseFloat(items[0]);
      this.y = parseFloat(items[1]);
   }else{
      throw new MO.TError(o, "Parse value failure. (value={1})", value);
   }
}
MO.SValue2_toDisplay = function SValue2_toDisplay(){
   var o = this;
   var x = MO.Lang.Float.format(o.x);
   var y = MO.Lang.Float.format(o.y);
   return x + ',' + y;
}
MO.SValue2_toString = function SValue2_toString(){
   return this.x + ',' + this.y;
}
MO.SValue3 = function SValue3(x, y, z){
   var o = this;
   o.x            = MO.Runtime.nvl(x, 0);
   o.y            = MO.Runtime.nvl(y, 0);
   o.z            = MO.Runtime.nvl(z, 0);
   o.isEmpty      = MO.SValue3_isEmpty;
   o.equals       = MO.SValue3_equals;
   o.equalsData   = MO.SValue3_equalsData;
   o.assign       = MO.SValue3_assign;
   o.setMin       = MO.SValue3_setMin;
   o.setMax       = MO.SValue3_setMax;
   o.set          = MO.SValue3_set;
   o.setAll       = MO.SValue3_setAll;
   o.add          = MO.SValue3_add;
   o.addValue3    = MO.SValue3_addValue3;
   o.mul          = MO.SValue3_mul;
   o.mulAll       = MO.SValue3_mulAll;
   o.length       = MO.SValue3_absolute;
   o.lengthTo     = MO.SValue3_lengthTo;
   o.absolute     = MO.SValue3_absolute;
   o.normalize    = MO.SValue3_normalize;
   o.negative     = MO.SValue3_negative;
   o.serialize    = MO.SValue3_serialize;
   o.unserialize  = MO.SValue3_unserialize3;
   o.unserialize2 = MO.SValue3_unserialize2;
   o.unserialize3 = MO.SValue3_unserialize3;
   o.parse        = MO.SValue3_parse;
   o.toDisplay    = MO.SValue3_toDisplay;
   o.toString     = MO.SValue3_toString;
   return o;
}
MO.SValue3_isEmpty = function SValue3_isEmpty(p){
   return (this.x == 0) && (this.y == 0) && (this.z == 0);
}
MO.SValue3_equals = function SValue3_equals(value){
   return (this.x == value.x) && (this.y == value.y) && (this.z == value.z);
}
MO.SValue3_equalsData = function SValue3_equalsData(x, y, z){
   return (this.x == x) && (this.y == y) && (this.z == z);
}
MO.SValue3_assign = function SValue3_assign(value){
   this.x = value.x;
   this.y = value.y;
   this.z = value.z;
}
MO.SValue3_setMin = function SValue3_setMin(){
   this.x = Number.MIN_VALUE;
   this.y = Number.MIN_VALUE;
   this.z = Number.MIN_VALUE;
}
MO.SValue3_setMax = function SValue3_setMax(){
   this.x = Number.MAX_VALUE;
   this.y = Number.MAX_VALUE;
   this.z = Number.MAX_VALUE;
}
MO.SValue3_set = function SValue3_set(x, y, z){
   this.x = x;
   this.y = y;
   this.z = z;
}
MO.SValue3_setAll = function SValue3_set(value){
   this.x = value;
   this.y = value;
   this.z = value;
}
MO.SValue3_add = function SValue3_add(x, y, z){
   this.x += x;
   this.y += y;
   this.z += z;
}
MO.SValue3_addValue3 = function SValue3_addValue3(value){
   this.x += value.x;
   this.y += value.y;
   this.z += value.z;
}
MO.SValue3_mul = function SValue3_mul(x, y, z){
   this.x *= x;
   this.y *= y;
   this.z *= z;
}
MO.SValue3_mulAll = function SValue3_mulAll(value){
   this.x *= value;
   this.y *= value;
   this.z *= value;
}
MO.SValue3_normalize = function SValue3_normalize(){
   var value = this.absolute();
   if(value != 0){
      var rate = 1 / value;
      this.x *= rate;
      this.y *= rate;
      this.z *= rate;
   }
   return this;
}
MO.SValue3_lengthTo = function SValue3_lengthTo(x, y, z){
   var o = this;
   var cx = o.x - x;
   var cy = o.y - y;
   var cz = o.z - z;
   return Math.sqrt((cx * cx) + (cy * cy) + (cz * cz));
}
MO.SValue3_absolute = function SValue3_absolute(){
   return Math.sqrt((this.x * this.x) + (this.y * this.y) + (this.z * this.z));
}
MO.SValue3_negative = function SValue3_negative(value){
   var result = null;
   if(p){
      result = value;
   }else{
      result = new this.constructor();
   }
   result.x = -this.x;
   result.y = -this.y;
   result.z = -this.z;
   return result;
}
MO.SValue3_serialize = function SValue3_serialize(output){
   output.writeFloat(this.x);
   output.writeFloat(this.y);
   output.writeFloat(this.z);
}
MO.SValue3_unserialize2 = function SValue3_unserialize2(input){
   this.x = input.readFloat();
   this.y = input.readFloat();
}
MO.SValue3_unserialize3 = function SValue3_unserialize3(input){
   this.x = input.readFloat();
   this.y = input.readFloat();
   this.z = input.readFloat();
}
MO.SValue3_parse = function SValue3_parse(value){
   var items = value.split(',')
   if(items.length == 3){
      this.x = parseFloat(items[0]);
      this.y = parseFloat(items[1]);
      this.z = parseFloat(items[2]);
   }else{
      throw new MO.TError(o, "Parse value failure. (value={1})", value);
   }
}
MO.SValue3_toDisplay = function SValue3_toDisplay(){
   var o = this;
   var x = MO.Lang.Float.format(o.x);
   var y = MO.Lang.Float.format(o.y);
   var z = MO.Lang.Float.format(o.z);
   return x + ',' + y + ',' + z;
}
MO.SValue3_toString = function SValue3_toString(){
   return this.x + ',' + this.y + ',' + this.z;
}
MO.SValue4 = function SValue4(x, y, z, w){
   var o = this;
   o.x           = MO.Runtime.nvl(x, 0);
   o.y           = MO.Runtime.nvl(y, 0);
   o.z           = MO.Runtime.nvl(z, 0);
   o.w           = MO.Runtime.nvl(w, 1);
   o.assign      = MO.SValue4_assign;
   o.set         = MO.SValue4_set;
   o.add         = MO.SValue4_add;
   o.mul         = MO.SValue4_mul;
   o.absolute    = MO.SValue4_absolute;
   o.normalize   = MO.SValue4_normalize;
   o.negative    = MO.SValue4_negative;
   o.serialize   = MO.SValue4_serialize;
   o.unserialize = MO.SValue4_unserialize;
   o.parse       = MO.SValue4_parse;
   o.toDisplay   = MO.SValue4_toDisplay;
   o.toString    = MO.SValue4_toString;
   return o;
}
MO.SValue4_assign = function SValue4_assign(value){
   this.x = value.x;
   this.y = value.y;
   this.z = value.z;
   this.w = value.w;
}
MO.SValue4_set = function SValue4_set(x, y, z, w){
   this.x = x;
   this.y = y;
   this.z = z;
   this.w = w;
}
MO.SValue4_add = function SValue4_add(x, y, z, w){
   this.x += x;
   this.y += y;
   this.z += z;
   this.w += w;
}
MO.SValue4_mul = function SValue4_mul(x, y, z, w){
   this.x *= x;
   this.y *= y;
   this.z *= z;
   this.w *= w;
}
MO.SValue4_absolute = function SValue4_absolute(){
   return Math.sqrt((this.x * this.x) + (this.y * this.y) + (this.z * this.z) + (this.w * this.w));
}
MO.SValue4_normalize = function SValue4_normalize(){
   var value = this.absolute();
   if(value != 0){
      var rate = 1 / value;
      this.x *= rate;
      this.y *= rate;
      this.z *= rate;
      this.w *= rate;
   }
}
MO.SValue4_negative = function SValue4_negative(value){
   var result = null;
   if(value){
      result = value;
   }else{
      result = new this.constructor();
   }
   result.x = -this.x;
   result.y = -this.y;
   result.z = -this.z;
   result.w = -this.w;
   return result;
}
MO.SValue4_serialize = function SValue4_serialize(output){
   output.writeFloat(this.x);
   output.writeFloat(this.y);
   output.writeFloat(this.z);
   output.writeFloat(this.w);
}
MO.SValue4_unserialize = function SValue4_unserialize(input){
   this.x = input.readFloat();
   this.y = input.readFloat();
   this.z = input.readFloat();
   this.w = input.readFloat();
}
MO.SValue4_parse = function SValue4_parse(value){
   var items = value.split(',')
   if(items.length == 4){
      this.x = parseFloat(items[0]);
      this.y = parseFloat(items[1]);
      this.z = parseFloat(items[2]);
      this.w = parseFloat(items[3]);
   }else{
      throw new MO.TError(o, "Parse value failure. (value={1})", value);
   }
}
MO.SValue4_toDisplay = function SValue4_toDisplay(){
   var o = this;
   var x = MO.Lang.Float.format(o.x);
   var y = MO.Lang.Float.format(o.y);
   var z = MO.Lang.Float.format(o.z);
   var w = MO.Lang.Float.format(o.w);
   return x + ',' + y + ',' + z + ',' + w;
}
MO.SValue4_toString = function SValue4_toString(){
   return this.x + ',' + this.y + ',' + this.z + ',' + this.w;
}
MO.SVector2 = function SVector2(x, y, z){
   var o = this;
   MO.SValue2.call(o, x, y, z);
   o.length    = o.absolute;
   o.direction = MO.SVector2_direction;
   o.conjugate = MO.SVector2_conjugate;
   o.dotPoint3 = MO.SVector2_dotPoint3;
   o.cross     = MO.SVector2_cross;
   o.cross2    = MO.SVector2_cross2;
   o.slerp     = MO.SVector2_slerp;
   o.clone     = MO.SVector2_clone;
   return o;
}
MO.SVector2_direction = function SVector2_direction(startPoint, endPoint){
   var o = this;
   o.x = endPoint.x - startPoint.x;
   o.y = endPoint.y - startPoint.y;
   o.z = endPoint.z - startPoint.z;
   return o;
}
MO.SVector2_conjugate = function SVector2_conjugate(p){
   var o = this;
   var r = null;
   if(p){
      r = p;
   }else{
      r = new MO.SVector2();
   }
   r.x = -o.x;
   r.y = -o.y;
   r.z = -o.z;
   return r;
}
MO.SVector2_dotPoint3 = function SVector2_dotPoint3(v){
   var o = this;
   return (o.x * v.x) + (o.y * v.y) + (o.z * v.z);
}
MO.SVector2_cross = function SVector2_cross(v){
   var o = this;
   var vx = (o.y * v.z) - (o.z * v.y);
   var vy = (o.z * v.x) - (o.x * v.z);
   var vz = (o.x * v.y) - (o.y * v.x);
   o.x = vx;
   o.y = vy;
   o.z = vz;
}
MO.SVector2_cross2 = function SVector2_cross2(po, pi){
   var o = this;
   po.x = (o.y * pi.z) - (o.z * pi.y);
   po.y = (o.z * pi.x) - (o.x * pi.z);
   po.z = (o.x * pi.y) - (o.y * pi.x);
}
MO.SVector2_slerp = function SVector2_slerp(v1, v2, r){
   var o = this;
   o.x = (v2.x - v1.x) * r + v1.x;
   o.y = (v2.y - v1.y) * r + v1.y;
   o.z = (v2.z - v1.z) * r + v1.z;
}
MO.SVector2_clone = function SVector2_clone(){
   var o = this;
   var r = new MO.SVector2();
   r.x = o.x;
   r.y = o.y;
   r.z = o.z;
   return r;
}
MO.SVector3 = function SVector3(x, y, z){
   var o = this;
   MO.SValue3.call(o, x, y, z);
   o.length    = o.absolute;
   o.direction = MO.SVector3_direction;
   o.conjugate = MO.SVector3_conjugate;
   o.dotPoint3 = MO.SVector3_dotPoint3;
   o.cross     = MO.SVector3_cross;
   o.cross2    = MO.SVector3_cross2;
   o.slerp     = MO.SVector3_slerp;
   o.clone     = MO.SVector3_clone;
   return o;
}
MO.SVector3_direction = function SVector3_direction(startPoint, endPoint){
   var o = this;
   o.x = endPoint.x - startPoint.x;
   o.y = endPoint.y - startPoint.y;
   o.z = endPoint.z - startPoint.z;
   return o;
}
MO.SVector3_conjugate = function SVector3_conjugate(p){
   var o = this;
   var r = null;
   if(p){
      r = p;
   }else{
      r = new MO.SVector3();
   }
   r.x = -o.x;
   r.y = -o.y;
   r.z = -o.z;
   return r;
}
MO.SVector3_dotPoint3 = function SVector3_dotPoint3(value){
   var o = this;
   return (o.x * value.x) + (o.y * value.y) + (o.z * value.z);
}
MO.SVector3_cross = function SVector3_cross(value){
   var o = this;
   var vx = (o.y * value.z) - (o.z * value.y);
   var vy = (o.z * value.x) - (o.x * value.z);
   var vz = (o.x * value.y) - (o.y * value.x);
   o.x = vx;
   o.y = vy;
   o.z = vz;
}
MO.SVector3_cross2 = function SVector3_cross2(po, pi){
   var o = this;
   po.x = (o.y * pi.z) - (o.z * pi.y);
   po.y = (o.z * pi.x) - (o.x * pi.z);
   po.z = (o.x * pi.y) - (o.y * pi.x);
}
MO.SVector3_slerp = function SVector3_slerp(v1, v2, r){
   var o = this;
   o.x = (v2.x - v1.x) * r + v1.x;
   o.y = (v2.y - v1.y) * r + v1.y;
   o.z = (v2.z - v1.z) * r + v1.z;
}
MO.SVector3_clone = function SVector3_clone(){
   var o = this;
   var r = new MO.SVector3();
   r.x = o.x;
   r.y = o.y;
   r.z = o.z;
   return r;
}
MO.SVector4 = function SVector4(x, y, z, w){
   var o = this;
   MO.SValue4.call(o, x, y, z, w);
   o.serialize3   = MO.SVector4_serialize3;
   o.unserialize3 = MO.SVector4_unserialize3;
   return o;
}
MO.SVector4_serialize3 = function SVector4_serialize3(p){
   var o = this;
   p.writeFloat(o.x);
   p.writeFloat(o.y);
   p.writeFloat(o.z);
}
MO.SVector4_unserialize3 = function SVector4_unserialize3(p){
   var o = this;
   o.x = p.readFloat();
   o.y = p.readFloat();
   o.z = p.readFloat();
}
MO.RMath = function RMath(){
   var o = this;
   o.PI_2           = Math.PI / 2;
   o.PI             = Math.PI;
   o.PI2            = Math.PI * 2;
   o.PI_2_P         = 1 / (Math.PI / 2);
   o.value1         = new Array(1);
   o.value2         = new Array(2);
   o.value3         = new Array(3);
   o.value4         = new Array(4);
   o.value9         = new Array(9);
   o.value12        = new Array(12);
   o.value16        = new Array(16);
   o.vectorAxisX    = null;
   o.vectorAxisY    = null;
   o.vectorAxisZ    = null;
   o.vectorScale    = null;
   o.vectorForward  = null;
   o.vectorBackward = null;
   o.vector3        = null;
   o.rectangle      = null;
   o.matrix         = null;
   o.faceCenterPositions = [-1, 1, 0, 1, 1, 0, 1, -1, 0, -1, -1, 0];
   return o;
}
MO.RMath.prototype.construct = function RMath_construct(){
   var o = this;
   o.vectorAxisX = new MO.SVector3(1, 0, 0);
   o.vectorAxisY = new MO.SVector3(0, 1, 0);
   o.vectorAxisZ = new MO.SVector3(0, 0, 1);
   o.vectorScale = new MO.SVector3(1, 1, 1);
   o.vectorForward = new MO.SVector3(0, 0, 1);
   o.vectorBackward = new MO.SVector3(0, 0, -1);
   o.vector3 = new MO.SVector3();
   o.rectangle = new MO.SRectangle();
   o.matrix = new MO.SMatrix3d();
}
MO.RMath.prototype.min = function RMath_min(){
   var result = 0;
   var count = arguments.length;
   if(count > 1){
      result = Number.MAX_VALUE;
      for(var i = 0; i < count; i++){
         var value = arguments[i];
         if(value < result){
            result = value;
         }
      }
   }
   return result;
}
MO.RMath.prototype.max = function RMath_max(){
   var result = 0;
   var count = arguments.length;
   if(count > 1){
      result = Number.MIN_VALUE;
      for(var i = 0; i < count; i++){
         var value = arguments[i];
         if(value > result){
            result = value;
         }
      }
   }
   return result;
}
MO.RMath.prototype.sign = function RMath_sign(value){
   if(value > 0){
      return 1;
   }else if(value < 0){
      return -1;
   }
   return 0;
}
MO.RMath = new MO.RMath();
MO.RMath.construct();
MO.Lang.Math = MO.RMath;
MO.RMatrix = function RMatrix(){
   var o = this;
   o.identity3x3 = [1, 0, 0, 0, 1, 0, 0, 0, 1];
   o.identity4x4 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
   return o;
}
MO.RMatrix.prototype.perspectiveLH = function RMatrix_perspectiveLH(matrix, width, height, znear, zfar){
   var data = matrix.data();
   data[ 0] = 2 * znear / width;
   data[ 1] = 0;
   data[ 2] = 0;
   data[ 3] = 0;
   data[ 4] = 0;
   data[ 5] = 2 * znear / height;
   data[ 6] = 0;
   data[ 7] = 0;
   data[ 8] = 0;
   data[ 9] = 0;
   data[10] = zfar / (zfar - znear);
   data[11] = 1;
   data[12] = 0;
   data[13] = 0;
   data[14] = (znear * zfar) / (znear - zfar);
   data[15] = 0;
}
MO.RMatrix.prototype.perspectiveRH = function RMatrix_perspectiveRH(matrix, width, height, znear, zfar){
   var data = matrix.data();
   data[ 0] = 2 * znear / width;
   data[ 1] = 0;
   data[ 2] = 0;
   data[ 3] = 0;
   data[ 4] = 0;
   data[ 5] = 2 * znear / height;
   data[ 6] = 0;
   data[ 7] = 0;
   data[ 8] = 0;
   data[ 9] = 0;
   data[10] = zfar / (znear - zfar);
   data[11] = 1;
   data[12] = 0;
   data[13] = 0;
   data[14] = (znear * zfar) / (znear - zfar);
   data[15] = 0;
}
MO.RMatrix.prototype.perspectiveFieldOfViewLH = function RMatrix_perspectiveFieldOfViewLH(matrix, fieldOfView, aspectRatio, znear, zfar){
   var data = matrix.data();
   var sy = 1 / Math.tan(fieldOfView * 0.5);
   var sx = sy / aspectRatio;
   data[ 0] = sx;
   data[ 1] = 0;
   data[ 2] = 0;
   data[ 3] = 0;
   data[ 4] = 0;
   data[ 5] = sy;
   data[ 6] = 0;
   data[ 7] = 0;
   data[ 8] = 0;
   data[ 9] = 0;
   data[10] = zfar / (zfar - znear);
   data[11] = 1;
   data[12] = 0;
   data[13] = 0;
   data[14] = (znear * zfar) / (znear - zfar);
   data[15] = 0;
}
MO.RMatrix.prototype.perspectiveFieldOfViewRH = function RMatrix_perspectiveFieldOfViewRH(matrix, fieldOfView, aspectRatio, znear, zfar){
   var data = matrix.data();
   var sy = 1 / Math.tan(fieldOfView * 0.5);
   var sx = sy / aspectRatio;
   data[ 0] = sx;
   data[ 1] = 0;
   data[ 2] = 0;
   data[ 3] = 0;
   data[ 4] = 0;
   data[ 5] = sy;
   data[ 6] = 0;
   data[ 7] = 0;
   data[ 8] = 0;
   data[ 9] = 0;
   data[10] = zfar / (znear - zfar);
   data[11] = 1;
   data[12] = 0;
   data[13] = 0;
   data[14] = (znear * zfar) / (zfar - znear);
   data[15] = 0;
}
MO.RMatrix.prototype.orthoLH = function RMatrix_orthoLH(matrix, left, top, width, height, znear, zfar){
   var o = this;
   var right = left + width;
   var bottom = top + height;
   var distance = zfar - znear;
   var x = (left + right) / width;
   var y = (top + bottom) / height;
   var z = znear / distance;
   var data = MO.Lang.Array.copy(o.identity4x4, 0, 16, matrix.data(), 0);
   data[ 0] = 2 / width;
   data[ 5] = 2 / height;
   data[10] = 1 / distance;
   data[12] = -x;
   data[13] = -y;
   data[14] = -z;
}
MO.RMatrix.prototype.orthoRH = function RMatrix_orthoRH(matrix, left, top, width, height, znear, zfar){
   var o = this;
   var right = left + width;
   var bottom = top + height;
   var distance = zfar - znear;
   var x = (left + right) / width;
   var y = (top + bottom) / height;
   var z = (znear + zfar) / distance;
   var data = MO.Lang.Array.copy(o.identity4x4, 0, 16, matrix.data(), 0);
   data[ 0] = 2 / width;
   data[ 5] = 2 / height;
   data[10] = -2 / distance;
   data[12] = -x;
   data[13] = -y;
   data[14] = -z;
}
MO.Lang.Matrix = new MO.RMatrix();
MO.RRandom = function RRandom(){
   var o = this;
   o._seed = (new Date()).getTime();
   return o;
}
MO.RRandom.prototype.get = function RRandom_get(){
   var o = this;
   o._seed = (o._seed * 9301 + 49297) % 233280;
   return o._seed/(233280.0);
}
MO.RRandom.prototype.rand = function RRandom_rand(seed){
   var o = this;
   var value = o.get() * seed;
   return Math.ceil(value);
}
MO.RRandom = new MO.RRandom();
MO.Lang.Random = MO.RRandom;
MO.AListener = function AListener(name, linker){
   var o = this;
   MO.ASource.call(o, name, MO.ESource.Listener, linker);
   o.build = MO.AListener_build;
   if(linker == null){
      var name = o._name;
      if(MO.Lang.String.startsWith(name, '_listeners')){
         name = name.substring(10);
      }else{
         throw new MO.TError('Linker is invalid.');
      }
      o._linker = name;
   }else{
      o._linker = linker;
   }
   return o;
}
MO.AListener_build = function AListener_build(clazz, instance){
   var o = this;
   var addListener = 'add' + o._linker + 'Listener';
   instance[addListener] = MO.RListener.makeAddListener(addListener, o._linker);
   var setListener = 'set' + o._linker + 'Listener';
   instance[setListener] = MO.RListener.makeSetListener(setListener, o._linker);
   var removeListener = 'remove' + o._linker + 'Listener';
   instance[removeListener] = MO.RListener.makeRemoveListener(removeListener, o._linker);
   var clearListeners = 'clear' + o._linker + 'Listeners';
   instance[clearListeners] = MO.RListener.makeClearListener(clearListeners, o._linker);
   var processListener = 'process' + o._linker + 'Listener';
   instance[processListener] = MO.RListener.makeProcessListener(processListener, o._linker);
}
MO.EEvent = new function EEvent(){
   var o = this;
   o.Unknown          = 'Unknown';
   o.Load             = 'Load';
   o.Loaded           = 'Loaded';
   o.Process          = 'Process';
   o.Complete         = 'Complete';
   o.Change           = 'Change';
   o.EnterFrame       = 'EnterFrame';
   o.LeaveFrame       = 'LeaveFrame';
   o.Enter            = 'Enter';
   o.Leave            = 'Leave';
   o.Resize           = 'Reisze';
   o.Focus            = 'Focus';
   o.Blur             = 'Blur';
   o.MouseDown        = 'MouseDown';
   o.MouseMove        = 'MouseMove';
   o.MouseUp          = 'MouseUp';
   o.MouseWheel       = 'MouseWheel';
   o.KeyDown          = 'KeyDown';
   o.KeyPress         = 'KeyPress';
   o.KeyUp            = 'KeyUp';
   o.Click            = 'Click';
   o.DoubleClick      = 'DoubleClick';
   o.NodeClick        = 'NodeClick';
   o.ItemClick        = 'ItemClick';
   o.Selected         = 'Selected';
   o.DataChanged      = 'DataChanged';
   o.Result           = 'Result';
   o.TouchZoom        = 'TouchZoom';
   o.Visibility       = 'Visibility';
   o.Orientation      = 'Orientation';
   o.OperationDown    = 'OperationDown';
   o.OperationMove    = 'OperationMove';
   o.OperationUp      = 'OperationUp';
   return o;
}
MO.EHttpContent = new function EHttpContent(){
   var o = this;
   o.Binary = 1;
   o.Text  = 2;
   return o;
}
MO.EHttpMethod = new function EHttpMethod(){
   var o = this;
   o.Get  = 'GET';
   o.Post = 'POST';
   return o;
}
MO.EHttpStatus = new function EHttpStatus(){
   var o = this;
   o.Uninitialized = 0;
   o.Open          = 1;
   o.Send          = 2;
   o.Receiving     = 3;
   o.Loaded        = 4;
   return o;
}
MO.EOrientation = new function EOrientation(){
   var o = this;
   o.Unknown = 0;
   o.Horizontal = 'H';
   o.Vertical   = 'V';
   return o;
}
MO.MListener = function MListener(o){
   o = MO.Class.inherits(this, o);
   o._listenerss       = null;
   o.addListener       = MO.MListener_addListener;
   o.setListener       = MO.MListener_setListener;
   o.removeListener    = MO.MListener_removeListener;
   o.clearListeners    = MO.MListener_clearListeners;
   o.clearAllListeners = MO.MListener_clearAllListeners;
   o.processListener   = MO.MListener_processListener;
   o.dispose           = MO.MListener_dispose;
   return o;
}
MO.MListener_addListener = function MListener_addListener(name, owner, method){
   var o = this;
   var listenerss = o._listenerss;
   if(!listenerss){
      listenerss = o._listenerss = new MO.TDictionary();
   }
   var listeners = listenerss.get(name);
   if(!listeners){
      listeners = new MO.TListeners();
      listenerss.set(name, listeners);
   }
   return listeners.register(owner, method);
}
MO.MListener_setListener = function MListener_setListener(name, owner, method){
   var o = this;
   var listenerss = o._listenerss;
   if(listenerss){
      var listeners = listenerss.get(name);
      if(listeners){
         listeners.clear();
      }
   }
   return o.addListener(name, owner, method)
}
MO.MListener_removeListener = function MListener_removeListener(name, owner, method){
   var o = this;
   var listenerss = o._listenerss;
   var listeners = listenerss.get(name);
   return listeners.unregister(owner, method);
}
MO.MListener_clearListeners = function MListener_clearListeners(name){
   var o = this;
   var listenerss = o._listenerss;
   if(listenerss){
      var listeners = listenerss.get(name);
      if(listeners){
         listeners.clear();
      }
   }
}
MO.MListener_clearAllListeners = function MListener_clearAllListeners(){
   var o = this;
   var listenerss = o._listenerss;
   if(listenerss){
      var count = listenerss.count();
      for(var i = 0; i < count; i++){
         var listeners = listenerss.at(i);
         if(listeners){
            listeners.clear();
         }
      }
   }
}
MO.MListener_processListener = function MListener_processListener(name, p1, p2, p3, p4, p5){
   var o = this;
   var listenerss = o._listenerss;
   if(listenerss){
      var listeners = listenerss.get(name);
      if(listeners){
         listeners.process(p1, p2, p3, p4, p5);
      }
   }
}
MO.MListener_dispose = function MListener_dispose(){
   var o = this;
   var listenerss = o._listenerss;
   if(listenerss){
      for(var i = listenerss.count() - 1; i >= 0; i--){
         var listeners = listenerss.at(i);
         listeners.dispose();
      }
      o._listenerss = MO.Lang.Object.dispose(listenerss);
   }
}
MO.SEvent = function SEvent(sender){
   var o = this;
   o.code       = null;
   o.annotation = null;
   o.listener   = null;
   o.sender     = sender;
   o.source     = null;
   o.hEvent     = null;
   o.hSender    = null;
   o.hSource    = null;
   o.ohProcess  = null;
   o.onProcess  = null;
   o.process    = null;
   o.dispose    = MO.SEvent_dispose;
   return o;
}
MO.SEvent_dispose = function SEvent_dispose(){
   var o = this;
   for(var name in o){
      o[name] = null;
   }
}
MO.SKeyboardEvent = function SKeyboardEvent(){
   var o = this;
   MO.SEvent.call(o);
   o.altKey      = false;
   o.shiftKey    = false;
   o.ctrlKey     = false;
   o.keyCode     = 0;
   o.attachEvent = MO.SKeyboardEvent_attachEvent;
   o.cancel      = MO.SKeyboardEvent_cancel;
   return o;
}
MO.SKeyboardEvent_attachEvent = function SKeyboardEvent_attachEvent(p){
   var o = this;
   o.altKey = p.altKey;
   o.shiftKey = p.shiftKey;
   o.ctrlKey = p.ctrlKey;
   o.keyCode = p.keyCode;
}
MO.SKeyboardEvent_cancel = function SKeyboardEvent_cancel(){
   var o = this;
   o.hEvent.returnValue = false;
}
MO.SMouseEvent = function SMouseEvent(){
   var o = this;
   MO.SEvent.call(o);
   o.button      = null;
   o.mouseLeft   = false;
   o.mouseMiddle = false;
   o.mouseRight  = false;
   o.altKey      = false;
   o.ctrlKey     = false;
   o.x           = 0;
   o.y           = 0;
   o.offsetX     = 0;
   o.offsetY     = 0;
   o.clientX     = 0;
   o.clientY     = 0;
   o.deltaX      = 0;
   o.deltaY      = 0;
   o.deltaZ      = 0;
   o.attachEvent = MO.SMouseEvent_attachEvent;
   return o;
}
MO.SMouseEvent_attachEvent = function SMouseEvent_attachEvent(event){
   var o = this;
   var hs = o.hSource = MO.RHtml.eventSource(event);
   if(hs){
      o.source = hs.__linker;
   }
   o.button = event.button;
   o.mouseLeft = (event.button == MO.EMouseButton.Left);
   o.mouseMiddle = (event.button == MO.EMouseButton.Middle);
   o.mouseRight = (event.button == MO.EMouseButton.Right);
   o.altKey = event.altKey;
   o.ctrlKey = event.ctrlKey;
   if(MO.RBrowser.isBrowser(MO.EBrowser.FireFox)){
      o.x = event.pageX;
      o.y = event.pageY;
      o.offsetX = event.layerX;
      o.offsetY = event.layerY;
   }else{
      o.x = event.x;
      o.y = event.y;
      o.offsetX = event.offsetX;
      o.offsetY = event.offsetY;
   }
   o.clientX = event.clientX;
   o.clientY = event.clientY;
   o.deltaX = event.deltaX;
   o.deltaY = event.deltaY;
   o.deltaZ = event.deltaZ;
}
MO.SResizeEvent = function SResizeEvent(){
   var o = this;
   MO.SEvent.call(o);
   o.width       = null;
   o.height      = null;
   o.attachEvent = MO.SResizeEvent_attachEvent;
   return o;
}
MO.SResizeEvent_attachEvent = function SResizeEvent_attachEvent(p){
   var o = this;
   var hs = o.hSource = MO.RHtml.eventSource(p);
   if(hs){
      o.source = hs.__linker;
   }
}
MO.FHttpConnection = function FHttpConnection(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListener);
   o._asynchronous        = MO.Class.register(o, new MO.AGetSet('_asynchronous'), false);
   o._methodCd            = MO.EHttpMethod.Get;
   o._contentCd           = MO.EHttpContent.Binary;
   o._url                 = null;
   o._heads               = MO.Class.register(o, new MO.AGetter('_heads'));
   o._attributes          = MO.Class.register(o, new MO.AGetter('_attributes'));
   o._input               = null;
   o._inputData           = MO.Class.register(o, new MO.AGetSet('_inputData'));
   o._output              = null;
   o._outputData          = MO.Class.register(o, new MO.AGetter('_outputData'));
   o._handle              = null;
   o._contentLength       = 0;
   o._statusFree          = true;
   o._event               = null;
   o._listenersLoad       = MO.Class.register(o, new MO.AListener('_listenersLoad', MO.EEvent.Load));
   o._listenersComplete   = MO.Class.register(o, new MO.AListener('_listenersComplete', MO.EEvent.Complete));
   o.onConnectionSend     = MO.FHttpConnection_onConnectionSend;
   o.onConnectionReady    = MO.FHttpConnection_onConnectionReady;
   o.onConnectionComplete = MO.FHttpConnection_onConnectionComplete;
   o.construct            = MO.FHttpConnection_construct;
   o.header               = MO.FHttpConnection_header;
   o.setHeader            = MO.FHttpConnection_setHeader;
   o.setHeaders           = MO.FHttpConnection_setHeaders;
   o.setOutputData        = MO.FHttpConnection_setOutputData;
   o.content              = MO.FHttpConnection_content;
   o.reset                = MO.FHttpConnection_reset;
   o.sendSync             = MO.FHttpConnection_sendSync;
   o.sendAsync            = MO.FHttpConnection_sendAsync;
   o.send                 = MO.FHttpConnection_send;
   o.post                 = MO.FHttpConnection_post;
   o.dispose              = MO.FHttpConnection_dispose;
   return o;
}
MO.FHttpConnection_onConnectionSend = function FHttpConnection_onConnectionSend(){
   var o = this;
   var input = o._input;
   if(input){
      if(input.constructor == String){
         o._inputData = input;
         o._contentLength = input.length;
      }else if(input.constructor == ArrayBuffer){
         o._inputData = input;
         o._contentLength = input.byteLength;
      }else{
         throw new MO.TError('Unknown send data type.');
      }
   }
}
MO.FHttpConnection_onConnectionReady = function FHttpConnection_onConnectionReady(){
   var o = this._linker;
   if(o._asynchronous){
      var handle = o._handle;
      if(handle.readyState == MO.EHttpStatus.Loaded){
         if(handle.status == 200){
            o.setOutputData();
            o.onConnectionComplete();
         }else{
            MO.Logger.fatal(o, 'Connection failure. (url={1})', o._url);
         }
      }
   }
}
MO.FHttpConnection_onConnectionComplete = function FHttpConnection_onConnectionComplete(){
   var o = this;
   o._statusFree = true;
   var event = o._event;
   event.connection = o;
   event.content = o._outputData;
   var attributes = o._attributes;
   var count = attributes.count();
   for(var i = 0; i < count; i++){
      var name = attributes.name(i);
      var value = attributes.value(i);
      event[name] = value;
   }
   o.processLoadListener(event);
   o.processCompleteListener(event);
}
MO.FHttpConnection_construct = function FHttpConnection_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._heads = new MO.TAttributes();
   o._attributes = new MO.TAttributes();
   o._event = new MO.SEvent();
   var handle = o._handle = MO.Window.Xml.createConnection();
   handle._linker = o;
   handle.onreadystatechange = o.onConnectionReady;
}
MO.FHttpConnection_header = function FHttpConnection_header(name){
   return this._heads.get(name);
}
MO.FHttpConnection_setHeader = function FHttpConnection_setHeader(name, value){
   this._heads.set(name, value);
}
MO.FHttpConnection_setHeaders = function FHttpConnection_setHeaders(){
   var o = this;
   var handle = o._handle;
   if(o._contentCd == MO.EHttpContent.Binary){
      if(MO.Window.Browser.isBrowser(MO.EBrowser.Explorer)){
         handle.setRequestHeader('Accept-Charset', 'x-user-defined');
         handle.responseType = 'arraybuffer';
      }else{
         handle.overrideMimeType('text/plain; charset=x-user-defined');
         if(o._asynchronous){
            handle.responseType = 'arraybuffer';
         }
      }
   }else{
      handle.setRequestHeader('content-type', 'application/x-www-form-urlencoded');
   }
   var heads = o._heads;
   var count = heads.count();
   if(count > 0){
      for(var i = 0; i < count; i++){
         var headName = heads.name(i);
         var headValue = heads.value(i);
         handle.setRequestHeader(headName, headValue);
      }
   }
   if(!MO.Window.Browser.isBrowser(MO.EBrowser.Chrome)){
      var contentLength = o._contentLength;
      if(contentLength > 0){
         handle.setRequestHeader('content-length', contentLength);
      }
   }
}
MO.FHttpConnection_setOutputData = function FHttpConnection_setOutputData(){
   var o = this;
   var handle = o._handle;
   if(o._contentCd == MO.EHttpContent.Binary){
      o._outputData = handle.response;
   }else{
      o._outputData = handle.responseText;
   }
}
MO.FHttpConnection_content = function FHttpConnection_content(){
   return this._outputData;
}
MO.FHttpConnection_reset = function FHttpConnection_reset(){
   var o = this;
   o._handle.abort()
   o._attributes.clear();
   o.clearAllListeners();
}
MO.FHttpConnection_sendSync = function FHttpConnection_sendSync(){
   var o = this;
   var handle = o._handle;
   handle.open(o._methodCd, o._url, false);
   o.setHeaders(handle, 0);
   handle.send(o._inputData);
   o.setOutputData();
   o.onConnectionComplete();
   MO.Logger.info(this, 'Send http sync request. (method={1}, url={2})', o._methodCd, o._url);
}
MO.FHttpConnection_sendAsync = function FHttpConnection_sendAsync(){
   var o = this;
   var handle = o._handle;
   handle.open(o._methodCd, o._url, true);
   o.setHeaders(handle, 0);
   handle.send(o._inputData);
   MO.Logger.info(this, 'Send http asynchronous request. (method={1}, url={2})', o._methodCd, o._url);
}
MO.FHttpConnection_send = function FHttpConnection_send(url, data){
   var o = this;
   o._url = url;
   o._input = data;
   o._methodCd = (data != null) ? MO.EHttpMethod.Post : MO.EHttpMethod.Get;
   o._statusFree = false;
   o.onConnectionSend();
   if(o._asynchronous){
      o.sendAsync();
   }else{
      o.sendSync();
   }
   return o.content();
}
MO.FHttpConnection_post = function FHttpConnection_send(url, data){
   var o = this;
   o._url = url;
   o._input = data;
   o._methodCd = MO.EHttpMethod.Post;
   o._statusFree = false;
   o.onConnectionSend();
   if(o._asynchronous){
      o.sendAsync();
   }else{
      o.sendSync();
   }
   return o.content();
}
MO.FHttpConnection_dispose = function FHttpConnection_dispose(){
   var o = this;
   o._heads = MO.Lang.Object.dispose(o._heads);
   o._attributes = MO.Lang.Object.dispose(o._attributes);
   o._event = MO.Lang.Object.dispose(o._event);
   o._input = null;
   o._inputData = null;
   o._output = null;
   o._outputData = null;
   var handle = o._handle;
   if(handle){
      handle.onreadystatechange = null;
      o._handle = null;
   }
   o.__base.MListener.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.RListener = function RListener(){
   var o = this;
   o._listeners = new Object();
   return o;
}
MO.RListener.prototype.makeAddListener = function RListener_makeAddListener(methodName, code){
   var o = this;
   var method = null;
   if(o._listeners[methodName]){
      method = o._listeners[methodName];
   }else{
      var source = 'return this.addListener(\''+ code +'\',owner,callback);';
      method = new Function('owner', 'callback', source);
      o._listeners[methodName] = method;
   }
   return method;
}
MO.RListener.prototype.makeSetListener = function RListener_makeSetListener(methodName, code){
   var o = this;
   var method = null;
   if(o._listeners[methodName]){
      method = o._listeners[methodName];
   }else{
      var source = 'return this.setListener(\''+ code +'\',owner,callback);';
      method = new Function('owner', 'callback', source);
      o._listeners[methodName] = method;
   }
   return method;
}
MO.RListener.prototype.makeRemoveListener = function RListener_makeRemoveListener(methodName, code){
   var o = this;
   var method = null;
   if(o._listeners[methodName]){
      method = o._listeners[methodName];
   }else{
      var source = 'return this.removeListener(\''+ code +'\',owner,callback);';
      method = new Function('owner', 'callback', source);
      o._listeners[methodName] = method;
   }
   return method;
}
MO.RListener.prototype.makeClearListener = function RListener_makeClearListener(methodName, code){
   var o = this;
   var method = null;
   if(o._listeners[methodName]){
      method = o._listeners[methodName];
   }else{
      var source = 'return this.clearListeners(\''+ code +'\');';
      method = new Function(source);
      o._listeners[methodName] = method;
   }
   return method;
}
MO.RListener.prototype.makeProcessListener = function RListener_makeProcessListener(methodName, code){
   var o = this;
   var method = null;
   if(o._listeners[methodName]){
      method = o._listeners[methodName];
   }else{
      var source = 'return this.processListener(\''+ code +'\', p1, p2, p3, p4, p5, p6);';
      method = new Function('p1', 'p2', 'p3', 'p4', 'p5', 'p6', source);
      o._listeners[methodName] = method;
   }
   return method;
}
MO.RListener = new MO.RListener();
MO.APersistence = function APersistence(name, dataCd, dataClass){
   var o = this;
   MO.AAnnotation.call(o, name);
   o._annotationCd = MO.EAnnotation.Persistence;
   o._inherit      = true;
   o._ordered      = true;
   o._dataCd       = dataCd;
   o._dataClass    = dataClass;
   o.dataCd        = MO.APersistence_dataCd;
   o.dataClass     = MO.APersistence_dataClass;
   o.newStruct     = MO.APersistence_newStruct;
   o.newInstance   = MO.APersistence_newInstance;
   o.toString      = MO.APersistence_toString;
   return o;
}
MO.APersistence_dataCd = function APersistence_dataCd(){
   return this._dataCd;
}
MO.APersistence_dataClass = function APersistence_dataClass(){
   return this._dataClass;
}
MO.APersistence_newStruct = function APersistence_newStruct(){
   return new this._dataClass();
}
MO.APersistence_newInstance = function APersistence_newInstance(){
   return MO.Class.create(this._dataClass);
}
MO.APersistence_toString = function APersistence_toString(){
   return '<' + this._annotationCd + ',name=' + this._name + '>';
}
MO.AStyle = function AStyle(name, style){
   var o = this;
   MO.AAnnotation.call(o, name);
   o._annotationCd = MO.EAnnotation.Style;
   o._duplicate    = true;
   o._style        = style;
   o.code          = MO.AStyle_code;
   o.style         = MO.AStyle_style;
   o.build         = MO.AStyle_build;
   o.toString      = MO.AStyle_toString;
   if(style == null){
      var value = null;
      if(MO.Lang.String.startsWith(name, '_style')){
         value = name.substring(6);
      }else if(MO.Lang.String.startsWith(name, 'style')){
         value = name.substring(5);
      }
      if(value == null){
         throw new MO.TError('Style name is empty.');
      }
      o._style = value;
   }
   return o;
}
MO.AStyle_code = function AStyle_code(){
   return this._style;
}
MO.AStyle_style = function AStyle_style(){
   return this._style;
}
MO.AStyle_build = function AStyle_build(value){
   var o = this;
   value[o._name] = null;
}
MO.AStyle_toString = function AStyle_toString(){
   var o = this;
   return 'style=' + o._style;
}
MO.AStyleIcon = function AStyleIcon(name, style){
   var o = this;
   MO.AAnnotation.call(o, name);
   o._annotationCd = MO.EAnnotation.Style;
   o._style        = style;
   o.code          = MO.AStyleIcon_code;
   o.style         = MO.AStyleIcon_style;
   o.build         = MO.AStyleIcon_build;
   o.toString      = MO.AStyleIcon_toString;
   if(style == null){
      var value = null;
      if(MO.Lang.String.startsWith(name, '_style')){
         value = name.substring(6);
      }else if(MO.Lang.String.startsWith(name, 'style')){
         value = name.substring(5);
      }
      if(value == null){
         throw new MO.TError('Style name is empty.');
      }
      o._style = value;
   }
   return o;
}
MO.AStyleIcon_code = function AStyleIcon_code(){
   return this._style;
}
MO.AStyleIcon_style = function AStyleIcon_style(){
   return this._style;
}
MO.AStyleIcon_build = function AStyleIcon_build(value){
   var o = this;
   value[o._name] = null;
}
MO.AStyleIcon_toString = function AStyleIcon_toString(){
   var o = this;
   return 'style=' + o._style;
}
MO.EEventInvoke = new function EEventInvoke(){
   var o = this;
   o.Unknown = 0;
   o.Before  = 1;
   o.After   = 2;
   return o;
}
MO.EEventStatus = new function EEventStatus(){
   var o = this;
   o.Unknown  = 0;
   o.Continue = 1;
   o.Stop     = 2;
   o.Cancel   = 3;
   o.Failure  = 4;
   return o;
}
MO.EKeyCode = new function EKeyCode(){
   var o = this;
   o.None      = 0;
   o.Esc       = 27;
   o.Tab       = 9;
   o.Enter     = 13;
   o.Shift     = 16;
   o.Alt       = 18;
   o.Ctrl      = 17;
   o.BackSpace = 8;
   o.Space     = 32;
   o.Left      = 37;
   o.Up        = 38;
   o.Right     = 39;
   o.Down      = 40;
   o.Insert    = 45;
   o.Delete    = 46;
   o.Home      = 36;
   o.End       = 35;
   o.PageUp    = 33;
   o.PageDown  = 34;
   o.F1        = 112;
   o.F2        = 113;
   o.F3        = 114;
   o.F4        = 115;
   o.F5        = 116;
   o.F6        = 117;
   o.F7        = 118;
   o.F8        = 119;
   o.F9        = 120;
   o.F10       = 121;
   o.F11       = 122;
   o.F12       = 123;
   o.N0        = 48;
   o.N1        = 49;
   o.N2        = 50;
   o.N3        = 51;
   o.N4        = 52;
   o.N5        = 53;
   o.N6        = 54;
   o.N7        = 55;
   o.N8        = 56;
   o.N9        = 57;
   o.A         = 65;
   o.B         = 66;
   o.C         = 67;
   o.D         = 68;
   o.E         = 69;
   o.F         = 70;
   o.G         = 71;
   o.H         = 72;
   o.I         = 73;
   o.J         = 74;
   o.K         = 75;
   o.L         = 76;
   o.M         = 77;
   o.N         = 78;
   o.O         = 79;
   o.P         = 80;
   o.Q         = 81;
   o.R         = 82;
   o.S         = 83;
   o.T         = 84;
   o.U         = 85;
   o.V         = 86;
   o.W         = 87;
   o.X         = 88;
   o.Y         = 89;
   o.Z         = 90;
   o.ControlKeys = [
      o.Tab, o.Enter, o.BackSpace, o.Left, o.Up, o.Right, o.Down,
      o.Insert, o.Delete, o.Home, o.End, o.PageUp, o.PageDown,
      o.F1, o.F2, o.F3, o.F4, o.F5, o.F6, o.F7, o.F8, o.F9, o.F10, o.F11, o.F12];
   var f = o.integerCodes  = new Object();
   f[45] = true;
   f[190] = true;
   for(var n = o.N0; n <= o.N9; n++){
      f[n] = true;
   }
   var f = o.floatCodes  = new Object();
   f[45] = true;
   f[190] = true;
   f[46] = true;
   f[189] = true;
   for(var n = o.N0; n <= o.N9; n++){
      f[n] = true;
   }
   return o;
}
MO.EKeyStatus = new function EKeyStatus(){
   var o = this;
   o.Normal = 0;
   o.Press  = 1;
   return o;
}
MO.EMouseButton = new function EMouseButton(){
   var o = this;
   o.Left   = 0;
   o.Right  = 2;
   o.Middle = 3;
   return o;
}
MO.EMouseCursor = new function EMouseCursor(){
   var o = this;
   o.HSize = 'E-resize';
   o.VSize = 'N-resize';
   return o;
}
MO.MClone = function MClone(o){
   o = MO.Class.inherits(this, o);
   o.clone  = MO.MClone_clone;
   return o;
}
MO.MClone_clone = function MClone_clone(){
   var o = this;
   var result = MO.Class.create(o.constructor);
   for(var name in o){
      var value = o[name];
      if(value != null){
         if(!MO.Class.isBaseDataType(value.constructor)){
            result[name] = value.clone();
         }
      }
      result[name] = value;
   }
   return result;
}
MO.MDataStream = function MDataStream(o){
   o = MO.Class.inherits(this, o);
   o._viewer      = null;
   o._endianCd    = false;
   o._position    = 0;
   o.testString   = MO.MDataStream_testString;
   o.readBoolean  = MO.MDataStream_readBoolean;
   o.readInt8     = MO.MDataStream_readInt8;
   o.readInt16    = MO.MDataStream_readInt16;
   o.readInt32    = MO.MDataStream_readInt32;
   o.readInt64    = MO.MDataStream_readInt64;
   o.readUint8    = MO.MDataStream_readUint8;
   o.readUint16   = MO.MDataStream_readUint16;
   o.readUint32   = MO.MDataStream_readUint32;
   o.readUint64   = MO.MDataStream_readUint64;
   o.readFloat    = MO.MDataStream_readFloat;
   o.readDouble   = MO.MDataStream_readDouble;
   o.readString   = MO.MDataStream_readString;
   o.readBytes    = MO.MDataStream_readBytes;
   o.readData     = MO.MDataStream_readData;
   o.writeBoolean = MO.MDataStream_writeBoolean;
   o.writeInt8    = MO.MDataStream_writeInt8;
   o.writeInt16   = MO.MDataStream_writeInt16;
   o.writeInt32   = MO.MDataStream_writeInt32;
   o.writeInt64   = MO.MDataStream_writeInt64;
   o.writeUint8   = MO.MDataStream_writeUint8;
   o.writeUint16  = MO.MDataStream_writeUint16;
   o.writeUint32  = MO.MDataStream_writeUint32;
   o.writeUint64  = MO.MDataStream_writeUint64;
   o.writeFloat   = MO.MDataStream_writeFloat;
   o.writeDouble  = MO.MDataStream_writeDouble;
   o.writeString  = MO.MDataStream_writeString;
   o.writeBytes   = MO.MDataStream_writeBytes;
   o.writeData    = MO.MDataStream_writeData;
   return o;
}
MO.MDataStream_testString = function MDataStream_testString(){
   var o = this;
   var position = o._position;
   var length = o._viewer.getUint16(position, o._endianCd);
   position += 2;
   var result = new MO.TString();
   for(var i = 0; i < length; i++){
      var value = o._viewer.getUint16(position, o._endianCd);
      position += 2;
      result.push(String.fromCharCode(value));
   }
   return result.flush();
}
MO.MDataStream_readBoolean = function MDataStream_readBoolean(){
   var o = this;
   var value = o._viewer.getInt8(o._position, o._endianCd);
   o._position++;
   return value > 0;
}
MO.MDataStream_readInt8 = function MDataStream_readInt8(){
   var o = this;
   var value = o._viewer.getInt8(o._position, o._endianCd);
   o._position++;
   return value;
}
MO.MDataStream_readInt16 = function MDataStream_readInt16(){
   var o = this;
   var value = o._viewer.getInt16(o._position, o._endianCd);
   o._position += 2;
   return value;
}
MO.MDataStream_readInt32 = function MDataStream_readInt32(){
   var o = this;
   var value = o._viewer.getInt32(o._position, o._endianCd);
   o._position += 4;
   return value;
}
MO.MDataStream_readInt64 = function MDataStream_readInt64(){
   var o = this;
   var value = o._viewer.getInt64(o._position, o._endianCd);
   o._position += 8;
   return value;
}
MO.MDataStream_readUint8 = function MDataStream_readUint8(){
   var o = this;
   var value = o._viewer.getUint8(o._position, o._endianCd);
   o._position += 1;
   return value;
}
MO.MDataStream_readUint16 = function MDataStream_readUint16(){
   var o = this;
   var value = o._viewer.getUint16(o._position, o._endianCd);
   o._position += 2;
   return value;
}
MO.MDataStream_readUint32 = function MDataStream_readUint32(){
   var o = this;
   var value = o._viewer.getUint32(o._position, o._endianCd);
   o._position += 4;
   return value;
}
MO.MDataStream_readUint64 = function MDataStream_readUint64(){
   var o = this;
   var value = o._viewer.getUint64(o._position, o._endianCd);
   o._position += 8;
   return value;
}
MO.MDataStream_readFloat = function MDataStream_readFloat(){
   var o = this;
   var value = o._viewer.getFloat32(o._position, o._endianCd);
   o._position += 4;
   return value;
}
MO.MDataStream_readDouble = function MDataStream_readDouble(){
   var o = this;
   var value = o._viewer.getFloat64(o._position, o._endianCd);
   o._position += 8;
   return value;
}
MO.MDataStream_readString = function MDataStream_readString(){
   var o = this;
   var viewer = o._viewer;
   var endianCd = o._endianCd;
   var position = o._position;
   var length = viewer.getUint16(position, endianCd);
   position += 2;
   var value = new MO.TString();
   for(var i = 0; i < length; i++){
      var character = viewer.getUint16(position, endianCd);
      value.push(String.fromCharCode(character));
      position += 2;
   }
   o._position = position;
   return value.flush();
}
MO.MDataStream_readBytes = function MDataStream_readBytes(data, offset, length){
   var o = this;
   var viewer = o._viewer;
   if(length <= 0){
      return;
   }
   if(offset != 0){
      throw new MO.TError(o, 'Unsupport.');
   }
   var position = o._position;
   var endianCd = o._endianCd;
   if(length % 8 == 0){
      var array = new Float64Array(data);
      var count = length >> 3;
      for(var i = 0; i < count; i++){
         array[i] = viewer.getFloat64(position, endianCd);
         position += 8;
      }
      o._position = position;
      return;
   }
   if(length % 4 == 0){
      var array = new Uint32Array(data);
      var count = length >> 2;
      for(var i = 0; i < count; i++){
         array[i] = viewer.getUint32(position, endianCd);
         position += 4;
      }
      o._position = position;
      return;
   }
   if(length % 2 == 0){
      var array = new Uint16Array(data);
      var count = length >> 1;
      for(var i = 0; i < count; i++){
         array[i] = viewer.getUint16(position, endianCd);
         position += 2;
      }
      o._position = position;
      return;
   }
   var array = new Uint8Array(data);
   for(var i = 0; i < length; i++){
      array[i] = viewer.getUint8(position++, endianCd);
   }
   o._position = position;
}
MO.MDataStream_readData = function MDataStream_readData(dataCd){
   var o = this;
   switch(dataCd){
      case MO.EDataType.Int8:
         return o.readInt8();
      case MO.EDataType.Int16:
         return o.readInt16();
      case MO.EDataType.Int32:
         return o.readInt32();
      case MO.EDataType.Int64:
         return o.readInt64();
      case MO.EDataType.Uint8:
         return o.readUint8();
      case MO.EDataType.Uint16:
         return o.readUint16();
      case MO.EDataType.Uint32:
         return o.readUint32();
      case MO.EDataType.Uint64:
         return o.readUint64();
      case MO.EDataType.Float32:
         return o.readFloat();
      case MO.EDataType.Float64:
         return o.readDouble();
      case MO.EDataType.String:
         return o.readString();
   }
   throw new TError(o, 'Unknown data cd. (data_cd={1})', dataCd);
}
MO.MDataStream_writeBoolean = function MDataStream_writeBoolean(value){
   var o = this;
   o._viewer.setInt8(o._position, (value > 0) ? 1 : 0, o._endianCd);
   o._position++;
}
MO.MDataStream_writeInt8 = function MDataStream_writeInt8(value){
   var o = this;
   o._viewer.setInt8(o._position, value, o._endianCd);
   o._position++;
}
MO.MDataStream_writeInt16 = function MDataStream_writeInt16(value){
   var o = this;
   o._viewer.setInt16(o._position, value, o._endianCd);
   o._position += 2;
}
MO.MDataStream_writeInt32 = function MDataStream_writeInt32(value){
   var o = this;
   o._viewer.setInt32(o._position, value, o._endianCd);
   o._position += 4;
}
MO.MDataStream_writeInt64 = function MDataStream_writeInt64(value){
   var o = this;
   o._viewer.setInt64(o._position, value, o._endianCd);
   o._position += 8;
}
MO.MDataStream_writeUint8 = function MDataStream_writeUint8(value){
   var o = this;
   o._viewer.setUint8(o._position, value, o._endianCd);
   o._position += 1;
}
MO.MDataStream_writeUint16 = function MDataStream_writeUint16(value){
   var o = this;
   o._viewer.setUint16(o._position, value, o._endianCd);
   o._position += 2;
}
MO.MDataStream_writeUint32 = function MDataStream_writeUint32(value){
   var o = this;
   o._viewer.setUint32(o._position, value, o._endianCd);
   o._position += 4;
}
MO.MDataStream_writeUint64 = function MDataStream_writeUint64(value){
   var o = this;
   o._viewer.setUint64(o._position, value, o._endianCd);
   o._position += 8;
}
MO.MDataStream_writeFloat = function MDataStream_writeFloat(value){
   var o = this;
   o._viewer.setFloat32(o._position, value, o._endianCd);
   o._position += 4;
}
MO.MDataStream_writeDouble = function MDataStream_writeDouble(value){
   var o = this;
   o._viewer.setDouble(o._position, value, o._endianCd);
   o._position += 8;
}
MO.MDataStream_writeString = function MDataStream_writeString(value){
   var o = this;
   var viewer = o._viewer;
   var length = v.length;
   var endianCd = o._endianCd;
   var position = o._position;
   viewer.setUint16(position, length, endianCd);
   position += 2;
   for(var i = 0; i < length; i++){
      viewer.setUint16(position, value.charCodeAt(i), endianCd);
      position += 2;
   }
   o._position = position;
}
MO.MDataStream_writeBytes = function MDataStream_writeBytes(data, offset, length){
   var o = this;
   var viewer = o._viewer;
   if(length <= 0){
      return;
   }
   if(offset != 0){
      throw new MO.TError('Unsupport.');
   }
   var position = o._position;
   var endianCd = o._endianCd;
   if(length % 8 == 0){
      var array = new Float64Array(data);
      var count = length >> 3;
      for(var i = 0; i < count; i++){
         viewer.setFloat64(position, array[i], endianCd);
         position += 8;
      }
      o._position = position;
      return;
   }
   if(length % 4 == 0){
      var array = new Uint32Array(data);
      var count = length >> 2;
      for(var i = 0; i < count; i++){
         viewer.setUint32(position, array[i], endianCd);
         position += 4;
      }
      o._position = position;
      return;
   }
   if(length % 2 == 0){
      var array = new Uint16Array(data);
      var count = length >> 1;
      for(var i = 0; i < count; i++){
         viewer.setUint16(position, array[i], endianCd);
         position += 2;
      }
      o._position = position;
      return;
   }
   var array = new Uint8Array(data);
   for(var i = 0; i < length; i++){
      viewer.setUint8(position++, array[i], endianCd);
   }
   o._position = position;
}
MO.MDataStream_writeData = function MDataStream_writeData(dataCd, value){
   var o = this;
   switch(dataCd){
      case MO.EDataType.Int8:
         return o.writeInt8(value);
      case MO.EDataType.Int16:
         return o.writeInt16(value);
      case MO.EDataType.Int32:
         return o.writeInt32(value);
      case MO.EDataType.Int64:
         return o.writeInt64(value);
      case MO.EDataType.Uint8:
         return o.writeUint8(value);
      case MO.EDataType.Uint16:
         return o.writeUint16(value);
      case MO.EDataType.Uint32:
         return o.writeUint32(value);
      case MO.EDataType.Uint64:
         return o.writeUint64(value);
      case MO.EDataType.Float32:
         return o.writeFloat(value);
      case MO.EDataType.Float64:
         return o.writeDouble(value);
      case MO.EDataType.String:
         return o.writeString(value);
   }
   throw new TError(o, 'Unknown data cd. (data_cd={1})', dataCd);
}
MO.MDataView = function MDataView(o){
   o = MO.Class.inherits(this, o);
   o._viewer     = null;
   o._endianCd   = MO.Class.register(o, new MO.AGetSet('_endianCd'), false);
   o.getInt8     = MO.MDataView_getInt8;
   o.getInt16    = MO.MDataView_getInt16;
   o.getInt32    = MO.MDataView_getInt32;
   o.getInt64    = MO.MDataView_getInt64;
   o.getUint8    = MO.MDataView_getUint8;
   o.getUint16   = MO.MDataView_getUint16;
   o.getUint32   = MO.MDataView_getUint32;
   o.getUint64   = MO.MDataView_getUint64;
   o.getFloat    = MO.MDataView_getFloat;
   o.getDouble   = MO.MDataView_getDouble;
   o.setInt8     = MO.MDataView_setInt8;
   o.setInt16    = MO.MDataView_setInt16;
   o.setInt32    = MO.MDataView_setInt32;
   o.setInt64    = MO.MDataView_setInt64;
   o.setUint8    = MO.MDataView_setUint8;
   o.setUint16   = MO.MDataView_setUint16;
   o.setUint32   = MO.MDataView_setUint32;
   o.setUint64   = MO.MDataView_setUint64;
   o.setFloat    = MO.MDataView_setFloat;
   o.setDouble   = MO.MDataView_setDouble;
   return o;
}
MO.MDataView_getInt8 = function MDataView_getInt8(p){
   var o = this;
   return o._viewer.getInt8(p, o._endianCd);
}
MO.MDataView_getInt16 = function MDataView_getInt16(p){
   var o = this;
   return o._viewer.getInt16(p, o._endianCd);
}
MO.MDataView_getInt32 = function MDataView_getInt32(p){
   var o = this;
   return o._viewer.getInt32(p, o._endianCd);
}
MO.MDataView_getInt64 = function MDataView_getInt64(p){
   var o = this;
   return o._viewer.getInt64(p, o._endianCd);
}
MO.MDataView_getUint8 = function MDataView_getUint8(p){
   var o = this;
   return o._viewer.getUint8(p, o._endianCd);
}
MO.MDataView_getUint16 = function MDataView_getUint16(p){
   var o = this;
   return o._viewer.getUint16(p, o._endianCd);
}
MO.MDataView_getUint32 = function MDataView_getUint32(p){
   var o = this;
   return o._viewer.getUint32(p, o._endianCd);
}
MO.MDataView_getUint64 = function MDataView_getUint64(p){
   var o = this;
   return o._viewer.getUint64(p, o._endianCd);
}
MO.MDataView_getFloat = function MDataView_getFloat(p){
   var o = this;
   return o._viewer.getFloat32(p, o._endianCd);
}
MO.MDataView_getDouble = function MDataView_getDouble(p){
   var o = this;
   return o._viewer.getFloat64(p, o._endianCd);
}
MO.MDataView_setInt8 = function MDataView_setInt8(p, v){
   var o = this;
   o._viewer.setInt8(p, v, o._endianCd);
}
MO.MDataView_setInt16 = function MDataView_setInt16(p, v){
   var o = this;
   o._viewer.setInt16(p, v, o._endianCd);
}
MO.MDataView_setInt32 = function MDataView_setInt32(p, v){
   var o = this;
   o._viewer.setInt32(p, v, o._endianCd);
}
MO.MDataView_setInt64 = function MDataView_setInt64(p, v){
   var o = this;
   o._viewer.setInt64(p, v, o._endianCd);
}
MO.MDataView_setUint8 = function MDataView_setUint8(p, v){
   var o = this;
   o._viewer.setUint8(p, v, o._endianCd);
}
MO.MDataView_setUint16 = function MDataView_setUint16(p, v){
   var o = this;
   o._viewer.setUint16(p, v, o._endianCd);
}
MO.MDataView_setUint32 = function MDataView_setUint32(p, v){
   var o = this;
   o._viewer.setUint32(p, v, o._endianCd);
}
MO.MDataView_setUint64 = function MDataView_setUint64(p, v){
   var o = this;
   o._viewer.setUint64(p, v, o._endianCd);
}
MO.MDataView_setFloat = function MDataView_setFloat(p, v){
   var o = this;
   o._viewer.setFloat32(p, v, o._endianCd);
}
MO.MDataView_setDouble = function MDataView_setDouble(p, v){
   var o = this;
   o._viewer.setDouble(p, v, o._endianCd);
}
MO.MEncryptedStream = function MEncryptedStream(o){
   o = MO.Class.inherits(this, o, MO.MDataStream);
   o._sign        = null;
   o._signLength  = null;
   o._data        = null;
   o._dataViewer  = null;
   o.testString   = MO.MEncryptedStream_testString;
   o.readBoolean  = MO.MEncryptedStream_readBoolean;
   o.readInt8     = MO.MEncryptedStream_readInt8;
   o.readInt16    = MO.MEncryptedStream_readInt16;
   o.readInt32    = MO.MEncryptedStream_readInt32;
   o.readInt64    = MO.MEncryptedStream_readInt64;
   o.readUint8    = MO.MEncryptedStream_readUint8;
   o.readUint16   = MO.MEncryptedStream_readUint16;
   o.readUint32   = MO.MEncryptedStream_readUint32;
   o.readUint64   = MO.MEncryptedStream_readUint64;
   o.readFloat    = MO.MEncryptedStream_readFloat;
   o.readDouble   = MO.MEncryptedStream_readDouble;
   o.readString   = MO.MEncryptedStream_readString;
   o.readBytes    = MO.MEncryptedStream_readBytes;
   o.readData     = MO.MEncryptedStream_readData;
   o.writeBoolean = MO.MEncryptedStream_writeBoolean;
   o.writeInt8    = MO.MEncryptedStream_writeInt8;
   o.writeInt16   = MO.MEncryptedStream_writeInt16;
   o.writeInt32   = MO.MEncryptedStream_writeInt32;
   o.writeInt64   = MO.MEncryptedStream_writeInt64;
   o.writeUint8   = MO.MEncryptedStream_writeUint8;
   o.writeUint16  = MO.MEncryptedStream_writeUint16;
   o.writeUint32  = MO.MEncryptedStream_writeUint32;
   o.writeUint64  = MO.MEncryptedStream_writeUint64;
   o.writeFloat   = MO.MEncryptedStream_writeFloat;
   o.writeDouble  = MO.MEncryptedStream_writeDouble;
   o.writeString  = MO.MEncryptedStream_writeString;
   o.writeBytes   = MO.MEncryptedStream_writeBytes;
   o.writeData    = MO.MEncryptedStream_writeData;
   return o;
}
MO.MEncryptedStream_testString = function MEncryptedStream_testString(){
   var o = this;
   debugger
   var position = o._position;
   var length = o._viewer.getUint16(position, o._endianCd);
   position += 2;
   var result = new MO.TString();
   for(var i = 0; i < length; i++){
      var value = o._viewer.getUint16(position, o._endianCd);
      position += 2;
      result.push(String.fromCharCode(value));
   }
   return result.flush();
}
MO.MEncryptedStream_readBoolean = function MEncryptedStream_readBoolean(){
   var o = this;
   var value = o._viewer.getInt8(o._position, o._endianCd) ^ o._sign[0];
   o._position++;
   return value > 0;
}
MO.MEncryptedStream_readInt8 = function MEncryptedStream_readInt8(){
   var o = this;
   var value = o._viewer.getInt8(o._position, o._endianCd) ^ o._sign[0];
   o._position++;
   return value;
}
MO.MEncryptedStream_readInt16 = function MEncryptedStream_readInt16(){
   var o = this;
   var sign = o._sign;
   var viewer = o._viewer;
   var endianCd = o._endianCd;
   var dataViewer = o._dataViewer;
   for(var i = 0; i < 2; i++){
      dataViewer.setUint8(i, viewer.getUint8(o._position + i, endianCd) ^ sign[i], endianCd);
   }
   var value = dataViewer.getInt16(0, endianCd);
   o._position += 2;
   return value;
}
MO.MEncryptedStream_readInt32 = function MEncryptedStream_readInt32(){
   var o = this;
   var sign = o._sign;
   var viewer = o._viewer;
   var endianCd = o._endianCd;
   var dataViewer = o._dataViewer;
   for(var i = 0; i < 4; i++){
      dataViewer.setUint8(i, viewer.getUint8(o._position + i, endianCd) ^ sign[i], endianCd);
   }
   var value = dataViewer.getInt32(0, endianCd);
   o._position += 4;
   return value;
}
MO.MEncryptedStream_readInt64 = function MEncryptedStream_readInt64(){
   var o = this;
   var sign = o._sign;
   var viewer = o._viewer;
   var endianCd = o._endianCd;
   var dataViewer = o._dataViewer;
   for(var i = 0; i < 8; i++){
      dataViewer.setUint8(i, viewer.getUint8(o._position + i, endianCd) ^ sign[i], endianCd);
   }
   var value = dataViewer.getInt64(0, endianCd);
   o._position += 8;
   return value;
}
MO.MEncryptedStream_readUint8 = function MEncryptedStream_readUint8(){
   var o = this;
   var value = o._viewer.getUint8(o._position, o._endianCd) ^ o._sign[0];
   o._position += 1;
   return value;
}
MO.MEncryptedStream_readUint16 = function MEncryptedStream_readUint16(){
   var o = this;
   var sign = o._sign;
   var viewer = o._viewer;
   var endianCd = o._endianCd;
   var dataViewer = o._dataViewer;
   for(var i = 0; i < 2; i++){
      dataViewer.setUint8(i, viewer.getUint8(o._position + i, endianCd) ^ sign[i], endianCd);
   }
   var value = dataViewer.getUint16(0, endianCd);
   o._position += 2;
   return value;
}
MO.MEncryptedStream_readUint32 = function MEncryptedStream_readUint32(){
   var o = this;
   var sign = o._sign;
   var viewer = o._viewer;
   var endianCd = o._endianCd;
   var dataViewer = o._dataViewer;
   for(var i = 0; i < 4; i++){
      dataViewer.setUint8(i, viewer.getUint8(o._position + i, endianCd) ^ sign[i], endianCd);
   }
   var value = dataViewer.getUint32(0, endianCd);
   o._position += 4;
   return value;
}
MO.MEncryptedStream_readUint64 = function MEncryptedStream_readUint64(){
   var o = this;
   var sign = o._sign;
   var viewer = o._viewer;
   var endianCd = o._endianCd;
   var dataViewer = o._dataViewer;
   for(var i = 0; i < 8; i++){
      dataViewer.setUint8(i, viewer.getUint8(o._position + i, endianCd) ^ sign[i], endianCd);
   }
   var value = dataViewer.getUint64(0, endianCd);
   o._position += 8;
   return value;
}
MO.MEncryptedStream_readFloat = function MEncryptedStream_readFloat(){
   var o = this;
   var sign = o._sign;
   var viewer = o._viewer;
   var endianCd = o._endianCd;
   var dataViewer = o._dataViewer;
   for(var i = 0; i < 4; i++){
      dataViewer.setUint8(i, viewer.getUint8(o._position + i, endianCd) ^ sign[i], endianCd);
   }
   var value = dataViewer.getFloat32(0, endianCd);
   o._position += 4;
   return value;
}
MO.MEncryptedStream_readDouble = function MEncryptedStream_readDouble(){
   var o = this;
   var sign = o._sign;
   var viewer = o._viewer;
   var endianCd = o._endianCd;
   var dataViewer = o._dataViewer;
   for(var i = 0; i < 8; i++){
      dataViewer.setUint8(i, viewer.getUint8(o._position + i, endianCd) ^ sign[i], endianCd);
   }
   var value = dataViewer.getFloat64(0, endianCd);
   o._position += 8;
   return value;
}
MO.MEncryptedStream_readString = function MEncryptedStream_readString(){
   var o = this;
   var sign = o._sign;
   var signLength = o._signLength;
   var dataViewer = o._dataViewer;
   var viewer = o._viewer;
   var endianCd = o._endianCd;
   var length = o.readUint16();
   if(length == 0){
      return '';
   }
   var dataBuffer = new Uint8Array(o._data);
   var buffer = new Uint8Array(o._memory);
   var position = o._position;
   var value = new MO.TString();
   for(var i = 0; i < length; i++){
      var index = i << 1;
      dataViewer.setUint8(0, viewer.getUint8(position    , endianCd) ^ sign[(index    ) % signLength], endianCd);
      dataViewer.setUint8(1, viewer.getUint8(position + 1, endianCd) ^ sign[(index + 1) % signLength], endianCd);
      var character = dataViewer.getUint16(0, endianCd);
      value.push(String.fromCharCode(character));
      position += 2;
   }
   o._position = position;
   return value.flush();
}
MO.MEncryptedStream_readBytes = function MEncryptedStream_readBytes(data, offset, length){
   var o = this;
   var viewer = o._viewer;
   if(length <= 0){
      return;
   }
   if(offset != 0){
      throw new MO.TError(o, 'Unsupport.');
   }
   var position = o._position;
   var endianCd = o._endianCd;
   if(length % 8 == 0){
      var array = new Float64Array(data);
      var count = length >> 3;
      for(var i = 0; i < count; i++){
         array[i] = viewer.getFloat64(position, endianCd);
         position += 8;
      }
      o._position = position;
      return;
   }
   if(length % 4 == 0){
      var array = new Uint32Array(data);
      var count = length >> 2;
      for(var i = 0; i < count; i++){
         array[i] = viewer.getUint32(position, endianCd);
         position += 4;
      }
      o._position = position;
      return;
   }
   if(length % 2 == 0){
      var array = new Uint16Array(data);
      var count = length >> 1;
      for(var i = 0; i < count; i++){
         array[i] = viewer.getUint16(position, endianCd);
         position += 2;
      }
      o._position = position;
      return;
   }
   var array = new Uint8Array(data);
   for(var i = 0; i < length; i++){
      array[i] = viewer.getUint8(position++, endianCd);
   }
   o._position = position;
}
MO.MEncryptedStream_readData = function MEncryptedStream_readData(dataCd){
   var o = this;
   switch(dataCd){
      case MO.EDataType.Int8:
         return o.readInt8();
      case MO.EDataType.Int16:
         return o.readInt16();
      case MO.EDataType.Int32:
         return o.readInt32();
      case MO.EDataType.Int64:
         return o.readInt64();
      case MO.EDataType.Uint8:
         return o.readUint8();
      case MO.EDataType.Uint16:
         return o.readUint16();
      case MO.EDataType.Uint32:
         return o.readUint32();
      case MO.EDataType.Uint64:
         return o.readUint64();
      case MO.EDataType.Float32:
         return o.readFloat();
      case MO.EDataType.Float64:
         return o.readDouble();
      case MO.EDataType.String:
         return o.readString();
   }
   throw new TError(o, 'Unknown data cd. (data_cd={1})', dataCd);
}
MO.MEncryptedStream_writeBoolean = function MEncryptedStream_writeBoolean(value){
   var o = this;
   o._viewer.setInt8(o._position, (value > 0) ? 1 : 0, o._endianCd);
   o._position++;
}
MO.MEncryptedStream_writeInt8 = function MEncryptedStream_writeInt8(value){
   var o = this;
   o._viewer.setInt8(o._position, value, o._endianCd);
   o._position++;
}
MO.MEncryptedStream_writeInt16 = function MEncryptedStream_writeInt16(value){
   var o = this;
   o._viewer.setInt16(o._position, value, o._endianCd);
   o._position += 2;
}
MO.MEncryptedStream_writeInt32 = function MEncryptedStream_writeInt32(value){
   var o = this;
   o._viewer.setInt32(o._position, value, o._endianCd);
   o._position += 4;
}
MO.MEncryptedStream_writeInt64 = function MEncryptedStream_writeInt64(value){
   var o = this;
   o._viewer.setInt64(o._position, value, o._endianCd);
   o._position += 8;
}
MO.MEncryptedStream_writeUint8 = function MEncryptedStream_writeUint8(value){
   var o = this;
   o._viewer.setUint8(o._position, value, o._endianCd);
   o._position += 1;
}
MO.MEncryptedStream_writeUint16 = function MEncryptedStream_writeUint16(value){
   var o = this;
   o._viewer.setUint16(o._position, value, o._endianCd);
   o._position += 2;
}
MO.MEncryptedStream_writeUint32 = function MEncryptedStream_writeUint32(value){
   var o = this;
   o._viewer.setUint32(o._position, value, o._endianCd);
   o._position += 4;
}
MO.MEncryptedStream_writeUint64 = function MEncryptedStream_writeUint64(value){
   var o = this;
   o._viewer.setUint64(o._position, value, o._endianCd);
   o._position += 8;
}
MO.MEncryptedStream_writeFloat = function MEncryptedStream_writeFloat(value){
   var o = this;
   o._viewer.setFloat32(o._position, value, o._endianCd);
   o._position += 4;
}
MO.MEncryptedStream_writeDouble = function MEncryptedStream_writeDouble(value){
   var o = this;
   o._viewer.setDouble(o._position, value, o._endianCd);
   o._position += 8;
}
MO.MEncryptedStream_writeString = function MEncryptedStream_writeString(value){
   var o = this;
   var sign = o._sign;
   var signLength = o._signLength;
   var viewer = o._viewer;
   var length = v.length;
   var endianCd = o._endianCd;
   var position = o._position;
   viewer.setUint16(position, length ^ sign[0], endianCd);
   position += 2;
   for(var i = 0; i < length; i++){
      viewer.setUint16(position, value.charCodeAt(i) ^ sign[i % signLength], endianCd);
      position += 2;
   }
   o._position = position;
}
MO.MEncryptedStream_writeBytes = function MEncryptedStream_writeBytes(data, offset, length){
   var o = this;
   var viewer = o._viewer;
   if(length <= 0){
      return;
   }
   if(offset != 0){
      throw new MO.TError('Unsupport.');
   }
   var position = o._position;
   var endianCd = o._endianCd;
   if(length % 8 == 0){
      var array = new Float64Array(data);
      var count = length >> 3;
      for(var i = 0; i < count; i++){
         viewer.setFloat64(position, array[i], endianCd);
         position += 8;
      }
      o._position = position;
      return;
   }
   if(length % 4 == 0){
      var array = new Uint32Array(data);
      var count = length >> 2;
      for(var i = 0; i < count; i++){
         viewer.setUint32(position, array[i], endianCd);
         position += 4;
      }
      o._position = position;
      return;
   }
   if(length % 2 == 0){
      var array = new Uint16Array(data);
      var count = length >> 1;
      for(var i = 0; i < count; i++){
         viewer.setUint16(position, array[i], endianCd);
         position += 2;
      }
      o._position = position;
      return;
   }
   var array = new Uint8Array(data);
   for(var i = 0; i < length; i++){
      viewer.setUint8(position++, array[i], endianCd);
   }
   o._position = position;
}
MO.MEncryptedStream_writeData = function MEncryptedStream_writeData(dataCd, value){
   var o = this;
   switch(dataCd){
      case MO.EDataType.Int8:
         return o.writeInt8(value);
      case MO.EDataType.Int16:
         return o.writeInt16(value);
      case MO.EDataType.Int32:
         return o.writeInt32(value);
      case MO.EDataType.Int64:
         return o.writeInt64(value);
      case MO.EDataType.Uint8:
         return o.writeUint8(value);
      case MO.EDataType.Uint16:
         return o.writeUint16(value);
      case MO.EDataType.Uint32:
         return o.writeUint32(value);
      case MO.EDataType.Uint64:
         return o.writeUint64(value);
      case MO.EDataType.Float32:
         return o.writeFloat(value);
      case MO.EDataType.Float64:
         return o.writeDouble(value);
      case MO.EDataType.String:
         return o.writeString(value);
   }
   throw new TError(o, 'Unknown data cd. (data_cd={1})', dataCd);
}
MO.MListenerLoad = function MListenerLoad(o){
   o = MO.Class.inherits(this, o, MO.MListener);
   o.addLoadListener     = MO.MListenerLoad_addLoadListener;
   o.removeLoadListener  = MO.MListenerLoad_removeLoadListener;
   o.clearLoadListeners  = MO.MListenerLoad_clearLoadListeners;
   o.processLoadListener = MO.MListenerLoad_processLoadListener;
   return o;
}
MO.MListenerLoad_addLoadListener = function MListenerLoad_addLoadListener(w, m){
   return this.addListener(MO.EEvent.Load, w, m);
}
MO.MListenerLoad_removeLoadListener = function MListenerLoad_removeLoadListener(w, m){
   this.removeListener(MO.EEvent.Load, w, m);
}
MO.MListenerLoad_clearLoadListeners = function MListenerLoad_clearLoadListeners(){
   this.clearListeners(MO.EEvent.Load);
}
MO.MListenerLoad_processLoadListener = function MListenerLoad_processLoadListener(p1, p2, p3, p4, p5){
   this.processListener(MO.EEvent.Load, p1, p2, p3, p4, p5);
}
MO.MListenerProcess = function MListenerProcess(o){
   o = MO.Class.inherits(this, o, MO.MListener);
   o.addProcessListener     = MO.MListenerProcess_addProcessListener;
   o.removeProcessListener  = MO.MListenerProcess_removeProcessListener;
   o.clearProcessListeners  = MO.MListenerProcess_clearProcessListeners;
   o.processProcessListener = MO.MListenerProcess_processProcessListener;
   return o;
}
MO.MListenerProcess_addProcessListener = function MListenerProcess_addProcessListener(owner, process){
   return this.addListener(MO.EEvent.Process, owner, process);
}
MO.MListenerProcess_removeProcessListener = function MListenerProcess_removeProcessListener(owner, process){
   this.removeListener(MO.EEvent.Process, owner, process);
}
MO.MListenerProcess_clearProcessListeners = function MListenerProcess_clearProcessListeners(){
   this.clearListeners(MO.EEvent.Process);
}
MO.MListenerProcess_processProcessListener = function MListenerProcess_processProcessListener(p1, p2, p3, p4, p5){
   this.processListener(MO.EEvent.Process, p1, p2, p3, p4, p5);
}
MO.MListenerTouchZoom = function MListenerTouchZoom(o){
   o = MO.Class.inherits(this, o, MO.MListener);
   o.addTouchZoomListener     = MO.MListenerTouchZoom_addTouchZoomListener;
   o.removeTouchZoomListener  = MO.MListenerTouchZoom_removeTouchZoomListener;
   o.clearTouchZoomListeners  = MO.MListenerTouchZoom_clearTouchZoomListeners;
   o.processTouchZoomListener = MO.MListenerTouchZoom_processTouchZoomListener;
   return o;
}
MO.MListenerTouchZoom_addTouchZoomListener = function MListenerTouchZoom_addTouchZoomListener(w, m){
   return this.addListener(MO.EEvent.TouchZoom, w, m);
}
MO.MListenerTouchZoom_removeTouchZoomListener = function MListenerTouchZoom_removeTouchZoomListener(w, m){
   this.removeListener(MO.EEvent.TouchZoom, w, m);
}
MO.MListenerTouchZoom_clearTouchZoomListeners = function MListenerTouchZoom_clearTouchZoomListeners(){
   this.clearListeners(MO.EEvent.TouchZoom);
}
MO.MListenerTouchZoom_processTouchZoomListener = function MListenerTouchZoom_processTouchZoomListener(p1, p2, p3, p4, p5){
   this.processListener(MO.EEvent.TouchZoom, p1, p2, p3, p4, p5);
}
MO.MMouseCapture = function MMouseCapture(o){
   o = MO.Class.inherits(this, o);
   o.onMouseCaptureStart = MO.Method.virtual(o, 'onMouseCaptureStart');
   o.onMouseCapture      = MO.Method.virtual(o, 'onMouseCapture');
   o.onMouseCaptureStop  = MO.Method.virtual(o, 'onMouseCaptureStop');
   o.testMouseCapture    = MO.Method.emptyTrue;
   return o;
}
MO.MMouseWheel = function MMouseWheel(o){
   o = MO.Class.inherits(this, o);
   o.onMouseWheel = MO.Class.register(o, new MO.AEventMouseWheel('onMouseWheel'), MO.Method.empty);
   return o;
}
MO.MParent = function MParent(o){
   o = MO.Class.inherits(this, o);
   o._parent    = MO.Class.register(o, new MO.AGetSet('_parent'));
   o.isParent   = MO.MParent_isParent;
   o.findParent = MO.MParent_findParent;
   o.dispose    = MO.MParent_dispose;
   return o;
}
MO.MParent_isParent = function MParent_isParent(value){
   while(value){
      if(value == this){
         return true;
      }
      value = value.parent();
   }
}
MO.MParent_findParent = function MParent_findParent(clazz){
   var find = this;
   if(clazz){
      while(MO.Class.isClass(find._parent, clazz)){
         find = find.parent();
      }
   }else{
      while(find._parent){
         find = find.parent();
      }
   }
   return find;
}
MO.MParent_dispose = function MParent_dispose(){
   var o = this;
   o._parent = null;
}
MO.MPersistence = function MPersistence(o){
   o = MO.Class.inherits(this, o, MO.MPersistenceAble);
   o.unserialize = MO.MPersistence_unserialize;
   o.serialize   = MO.MPersistence_serialize;
   return o;
}
MO.MPersistence_unserialize = function MPersistence_unserialize(input){
   var o = this;
   var clazz = MO.Class.find(o.constructor);
   var annotations = clazz.annotations(MO.EAnnotation.Persistence);
   var count = annotations.count();
   for(var n = 0; n < count; n++){
      var annotation = annotations.at(n);
      var dateCd = annotation.dataCd();
      var name = annotation.name();
      if(dateCd == MO.EDataType.Struct){
         var item = o[name];
         if(!item){
            item = o[name] = annotation.newStruct();
         }
         item.unserialize(input);
      }else if(dateCd == MO.EDataType.Object){
         var item = o[name];
         if(!item){
            item = o[name] = annotation.newInstance();
         }
         item.unserialize(input);
      }else if(dateCd == MO.EDataType.Objects){
         var items = o[name];
         if(!items){
            items = o[name] = new MO.TObjects();
         }
         items.clear();
         var itemCount = input.readInt32();
         for(var i = 0; i < itemCount; i++){
            var item = annotation.newInstance();
            item.unserialize(input);
            items.push(item);
         }
      }else if(dateCd == MO.EDataType.Dictionary){
         var items = o[name];
         if(!items){
            items = o[name] = new MO.TDictionary();
         }
         items.clear();
         var itemCount = input.readInt32();
         for(var i = 0; i < itemCount; i++){
            var item = annotation.newInstance();
            item.unserialize(input);
            items.set(item.code(), item);
         }
      }else{
         o[name] = input.readData(dateCd);
      }
   }
}
MO.MPersistence_serialize = function MPersistence_serialize(output){
   var o = this;
   var clazz = MO.Class.find(o.constructor);
   var annotations = clazz.annotations(MO.EAnnotation.Persistence);
   var count = annotations.count();
   for(var i = 0; i < count; i++){
      var annotation = annotations.at(i);
      var dateCd = annotation.dataCd();
      var name = annotation.name();
      var value = o[name];
      if(dateCd == MO.EDataType.Object){
         value.unserialize(input);
      }else if(dateCd == MO.EDataType.Objects){
         var itemCount = value.count();
         input.writeInt32(itemCount);
         for(var i = 0; i < itemCount; i++){
            var item = value.at(i);
            item.serialize(input);
         }
      }else if(dateCd == MO.EDataType.Dictionary){
         var items = o[name];
         var itemCount = value.count();
         input.writeInt32(itemCount);
         for(var i = 0; i < itemCount; i++){
            var item = value.at(i);
            item.serialize(input);
         }
      }else{
         input.writeData(dateCd, value);
      }
   }
}
MO.MPersistenceAble = function MPersistenceAble(o){
   o = MO.Class.inherits(this, o);
   o.unserialize                = MO.Method.empty;
   o.unserializeBuffer          = MO.MPersistenceAble_unserializeBuffer;
   o.unserializeSignBuffer      = MO.MPersistenceAble_unserializeSignBuffer;
   o.unserializeEncryptedBuffer = MO.MPersistenceAble_unserializeEncryptedBuffer;
   o.serialize                  = MO.Method.empty;
   o.serializeBuffer            = MO.MPersistenceAble_serializeBuffer;
   o.serializeSignBuffer        = MO.MPersistenceAble_serializeSignBuffer;
   o.serializeEncryptedBuffer   = MO.MPersistenceAble_serializeEncryptedBuffer;
   return o;
}
MO.MPersistenceAble_unserializeBuffer = function MPersistenceAble_unserializeBuffer(buffer, endianCd){
   var o = this;
   var view = MO.Class.create(MO.FDataView);
   view.setEndianCd(endianCd);
   view.link(buffer);
   o.unserialize(view);
   view.dispose();
}
MO.MPersistenceAble_unserializeSignBuffer = function MPersistenceAble_unserializeSignBuffer(sign, buffer, endianCd){
   var o = this;
   var bytes = new Uint8Array(buffer);
   MO.Lang.Byte.encodeBytes(bytes, 0, bytes.length, sign);
   var view = MO.Class.create(MO.FDataView);
   view.setEndianCd(endianCd);
   view.link(buffer);
   o.unserialize(view);
   view.dispose();
}
MO.MPersistenceAble_unserializeEncryptedBuffer = function MPersistenceAble_unserializeEncryptedBuffer(sign, buffer, endianCd){
   var o = this;
   var view = MO.Class.create(MO.FEncryptedView);
   view.setSign(sign);
   view.setEndianCd(endianCd);
   view.link(buffer);
   o.unserialize(view);
   view.dispose();
}
MO.MPersistenceAble_serializeBuffer = function MPersistenceAble_serializeBuffer(buffer, endianCd){
   var o = this;
   var view = MO.Class.create(MO.FDataView);
   view.setEndianCd(endianCd);
   view.link(buffer);
   o.serialize(view);
   view.dispose();
}
MO.MPersistenceAble_serializeSignBuffer = function MPersistenceAble_serializeSignBuffer(buffer, endianCd){
   var o = this;
   var view = MO.Class.create(MO.FDataView);
   view.setEndianCd(endianCd);
   view.link(buffer);
   o.serialize(view);
   view.dispose();
}
MO.MPersistenceAble_serializeEncryptedBuffer = function MPersistenceAble_serializeEncryptedBuffer(sign, buffer, endianCd){
   var o = this;
   var view = MO.Class.create(MO.FEncryptedView);
   view.setSign(sign);
   view.setEndianCd(endianCd);
   view.link(buffer);
   o.serialize(view);
   view.dispose();
}
MO.MProperty = function MProperty(o){
   o = MO.Class.inherits(this, o);
   o.propertyAssign = MO.MProperty_propertyAssign;
   o.propertyLoad   = MO.MProperty_propertyLoad;
   o.propertySave   = MO.MProperty_propertySave;
   return o;
}
MO.MProperty_propertyAssign = function MProperty_propertyAssign(value){
   var o = this;
   var clazz = MO.Class.find(o.constructor);
   var annotations = clazz.annotations(MO.EAnnotation.Property);
   for(var name in annotations){
      var annotation = annotations[name];
      if(annotation.constructor != Function){
         o[annotation._name] = value[annotation._name];
      }
   }
}
MO.MProperty_propertyLoad = function MProperty_propertyLoad(xconfig){
   var o = this;
   var clazz = MO.Class.find(o.constructor);
   var annotations = clazz.annotations(MO.EAnnotation.Property);
   for(var name in annotations){
      var annotation = annotations[name];
      if(annotation.constructor != Function){
         if(annotation._force){
            annotation.load(o, xconfig);
         }else{
            if(xconfig.contains(annotation._linker)){
               annotation.load(o, xconfig);
            }else if(o[annotation._name] == null){
               o[annotation._name] = annotation._value;
            }
         }
      }
   }
}
MO.MProperty_propertySave = function MProperty_propertySave(xconfig){
   var o = this;
   var clazz = MO.Class.find(o.constructor);
   var annotations = clazz.annotations(MO.EAnnotation.Property);
   for(var name in annotations){
      var annotation = annotations[name];
      if(annotation.constructor != Function){
         annotation.save(o, xconfig);
      }
   }
}
MO.SClickEvent = function SClickEvent(sender){
   var o = this;
   MO.SEvent.call(o, sender);
   return o;
}
MO.SXmlEvent = function SXmlEvent(){
   var o = this;
   MO.SEvent.call(o);
   o.connection = null;
   o.document   = null;
   o.root       = null;
   return o;
}
MO.THtmlItem = function THtmlItem(){
   var o = this;
   o._link  = null;
   o._links = new Object();
   o.get    = MO.THtmlItem_get;
   o.set    = MO.THtmlItem_set;
   return o;
}
MO.THtmlItem_get = function THtmlItem_get(name){
   return this._links[name];
}
MO.THtmlItem_set = function THtmlItem_set(name, value){
   this._links[name] = value;
}
MO.TXmlDocument = function TXmlDocument(){
   var o = this;
   o._root   = null;
   o.create  = MO.TXmlDocument_create;
   o.root    = MO.TXmlDocument_root;
   o.setRoot = MO.TXmlDocument_setRoot;
   o.xml     = MO.TXmlDocument_xml;
   o.dump    = MO.TXmlDocument_dump;
   return o;
}
MO.TXmlDocument_create = function TXmlDocument_create(n, a, v){
   var r = new MO.TXmlNode();
   r._name = n;
   r._attributes = a;
   r._value = v;
   return r;
}
MO.TXmlDocument_root = function TXmlDocument_root(){
   var o = this;
   var r = o._root;
   if(!r){
      r = o._root = new MO.TXmlNode();
      r._name = 'Configuration';
   }
   return r;
}
MO.TXmlDocument_setRoot = function TXmlDocument_setRoot(p){
   var o = this;
   if(!o._root){
      o._root = p;
   }else{
      throw new MO.TError(o, 'Root node is already exists.');
   }
}
MO.TXmlDocument_xml = function TXmlDocument_xml(){
   var xml = new MO.TString();
   xml.append("<?xml version='1.0' encoding='UTF-8'?>");
   this.root().innerXml(xml, 0);
   return xml.flush();
}
MO.TXmlDocument_dump = function TXmlDocument_dump(){
   var o = this;
   var r = new MO.TString();
   r.appendLine(MO.RClass.name(o));
   o.root().dump(r);
   return r.flush();
}
MO.TXmlNode = function TXmlNode(name){
   var o = this;
   MO.TNode.call(o, name);
   o.create   = MO.TXmlNode_create;
   o.innerXml = MO.TXmlNode_innerXml;
   o.xml      = MO.TXmlNode_xml;
   o.toString = MO.TXmlNode_toString;
   return o;
}
MO.TXmlNode_create = function TXmlNode_create(name, attribtues){
   var o = this;
   var xnode = new MO.TXmlNode();
   xnode._name = name;
   xnode._attributes = attribtues;
   if(!MO.Class.isClass(attribtues, MO.TAttributes)){
      var a = arguments;
      var len = a.length;
      for(var n = 1; n < len; n += 2){
         if(n + 1 < len){
            xnode.set(a[n], a[n+1]);
         }else{
            xnode.setValue(a[n]);
         }
      }
   }
   o.push(xnode);
   return xnode;
}
MO.TXmlNode_innerXml = function TXmlNode_innerXml(s, l){
   var o = this;
   s.appendRepeat('   ', l);
   s.append('<', o._name);
   var as = o._attributes;
   if(as){
      var ac = as.count();
      for(var n = 0; n < ac; n++){
         s.append(' ', as.name(n), '="');
         MO.RXml.buildText(s, as.value(n));
         s.append('"');
      }
   }
   if(!o._nodes && (o._value == null)){
      s.append('/');
   }
   s.append('>\n');
   var ns = o._nodes;
   if(ns){
      var c = ns.count();
      for(var n = 0; n < c; n++){
         ns.get(n).innerXml(s, l + 1);
      }
   }
   MO.RXml.buildText(s, o._value)
   if(o._nodes || o._value != null){
      s.appendRepeat('   ', l);
      s.append('</', o._name, '>');
      s.append('\n');
   }
   return s;
}
MO.TXmlNode_xml = function TXmlNode_xml(){
   var xml = new MO.TString();
   this.innerXml(xml, 0);
   return xml.flush();
}
MO.TXmlNode_toString = function TXmlNode_toString(){
   return this.xml().toString();
}
MO.FBinarySocket = function FBinarySocket(o){
   o = MO.Class.inherits(this, o, MO.FSocket);
   o.connect = MO.FBinarySocket_connect;
   return o;
}
MO.FBinarySocket_connect = function FBinarySocket_connect(url){
   var o = this;
   o.__base.FSocket.connect.call(o, url);
   o._handle.binaryType = "arraybuffer" ;
}
MO.FBufferedSocket = function FBufferedSocket(o){
   o = MO.Class.inherits(this, o, MO.FSocket);
   o._bufferSends    = MO.Class.register(o, new MO.AGetter('_bufferSends'));
   o._bufferReceives = MO.Class.register(o, new MO.AGetter('_bufferReceives'));
   o.onOpen          = MO.FBufferedSocket_onOpen;
   o.construct       = MO.FBufferedSocket_construct;
   o.push            = MO.FBufferedSocket_push;
   o.process         = MO.FBufferedSocket_process;
   o.dispose         = MO.FBufferedSocket_dispose;
   return o;
}
MO.FBufferedSocket_onOpen = function FBufferedSocket_onOpen(event){
   var o = this;
   o.__base.FSocket.onOpen.call(o, event);
   o.process();
}
MO.FBufferedSocket_ohError = function FBufferedSocket_ohError(event){
   var o = this._linker;
}
MO.FBufferedSocket_ohMessage = function FBufferedSocket_ohMessage(event){
   var o = this._linker;
}
MO.FBufferedSocket_ohClose = function FBufferedSocket_ohClose(event){
   var o = this._linker;
   o._connected = false;
}
MO.FBufferedSocket_construct = function FBufferedSocket_construct(){
   var o = this;
   o.__base.FSocket.construct.call(o);
   o._bufferSends = new MO.TObjects();
   o._bufferReceives = new MO.TObjects();
}
MO.FBufferedSocket_push = function FBufferedSocket_push(message){
   this._bufferSends.push(message);
}
MO.FBufferedSocket_process = function FBufferedSocket_process(){
   var o = this;
   if(!o._connected){
      return false;
   }
   var sends = o._bufferSends;
   if(!sends.isEmpty()){
      var count = sends.count();
      for(var i = 0; i < count; i++){
         var message = sends.at(i);
         o.send(message);
      }
      sends.clear();
   }
   return true;
}
MO.FBufferedSocket_dispose = function FBufferedSocket_dispose(){
   var o = this;
   o._bufferSends = MO.Lang.Object.dispose(o._bufferSends);
   o._bufferReceives = MO.Lang.Object.dispose(o._bufferReceives);
   o.__base.FSocket.dispose.call(o);
}
MO.FBytes = function FBytes(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MDataView);
   o._memory   = MO.Class.register(o, new MO.AGetter('_memory'));
   o.construct = MO.FBytes_construct;
   o.dispose   = MO.FBytes_dispose;
   return o;
}
MO.FBytes_construct = function FBytes_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._memory = new ArrayBuffer();
   o._viewer = new DataView(o._memory);
}
MO.FBytes_dispose = function FBytes_dispose(){
   var o = this;
   o._memory = null;
   o._viewer = null;
   o.__base.FObject.dispose.call(o);
}
MO.FClassFactory = function FClassFactory(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._classes   = null;
   o.construct  = MO.FClassFactory_construct;
   o.register   = MO.FClassFactory_register;
   o.unregister = MO.FClassFactory_unregister;
   o.create     = MO.FClassFactory_create;
   o.dispose    = MO.FClassFactory_dispose;
   return o;
}
MO.FClassFactory_construct = function FClassFactory_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._classes = new MO.TDictionary();
}
MO.FClassFactory_register = function FClassFactory_register(n, c){
   this._classes.set(n, c);
}
MO.FClassFactory_unregister = function FClassFactory_unregister(n){
   this._classes.set(n, null);
}
MO.FClassFactory_create = function FClassFactory_create(n){
   var o = this;
   var c = o._classes.get(n);
   if(!c){
      throw new MO.TError('Create unregister class. (name={1})', n);
   }
   return MO.Class.create(c);
}
MO.FClassFactory_dispose = function FClassFactory_dispose(){
   var o = this;
   o._classes = MO.Lang.Object.dispose(o._classes);
   o.__base.FObject.dispose.call(o);
}
MO.FComponent = function FComponent(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MParent);
   o._code   = MO.Class.register(o, new MO.AGetSet('_code'));
   o.dispose = MO.FComponent_dispose;
   return o;
}
MO.FComponent_dispose = function FComponent_dispose(){
   var o = this;
   o.__base.MParent.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FDataStream = function FDataStream(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MDataView, MO.MDataStream);
   o._length   = MO.Class.register(o, new MO.AGetter('_length'), 0);
   o._memory   = MO.Class.register(o, new MO.AGetter('_memory'));
   o._viewer   = null;
   o.construct = MO.FDataStream_construct;
   o.setLength = MO.FDataStream_setLength;
   o.flip      = MO.FDataStream_flip;
   o.dispose   = MO.FDataStream_dispose;
   return o;
}
MO.FDataStream_construct = function FDataStream_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.FDataStream_setLength = function FDataStream_setLength(length){
   var o = this;
   o._length = length;
   o._memory = new ArrayBuffer(length);
   o._viewer = new DataView(o._memory);
}
MO.FDataStream_flip = function FDataStream_flip(){
   var o = this;
   o._length = o._position;
   o._position = 0;
}
MO.FDataStream_dispose = function FDataStream_dispose(){
   var o = this;
   o._viewer = null;
   o._memory = null;
   o.__base.FObject.dispose.call(o);
}
MO.FDataView = function FDataView(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MDataView, MO.MDataStream);
   o.link    = MO.FDataView_link;
   o.dispose = MO.FDataView_dispose;
   return o;
}
MO.FDataView_link = function FDataView_link(data){
   var o = this;
   o._memory = data;
   o._viewer = new DataView(data);
}
MO.FDataView_dispose = function FDataView_dispose(){
   var o = this;
   o._viewer = null;
   o._memory = null;
   o.__base.FObject.dispose.call(o);
}
MO.FEncryptedView = function FEncryptedView(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MDataView, MO.MEncryptedStream);
   o.construct = MO.FEncryptedView_construct;
   o.setSign   = MO.FEncryptedView_setSign;
   o.link      = MO.FEncryptedView_link;
   o.dispose   = MO.FEncryptedView_dispose;
   return o;
}
MO.FEncryptedView_construct = function FEncryptedView_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._data = new ArrayBuffer(8);
   o._dataViewer = new DataView(o._data);
}
MO.FEncryptedView_setSign = function FEncryptedView_setSign(value){
   var o = this;
   var sign = o._sign = new Uint8Array(8);
   sign[0] = (value      ) & 0xFF;
   sign[1] = (value >>  8) & 0xFF;
   sign[2] = (value >> 16) & 0xFF;
   sign[3] = (value >> 24) & 0xFF;
   sign[4] = (value >> 24) & 0xFF;
   sign[5] = (value >> 16) & 0xFF;
   sign[6] = (value >>  8) & 0xFF;
   sign[7] = (value      ) & 0xFF;
   o._signLength = sign.length;
}
MO.FEncryptedView_link = function FEncryptedView_link(data){
   var o = this;
   o._memory = data;
   o._viewer = new DataView(data);
}
MO.FEncryptedView_dispose = function FEncryptedView_dispose(){
   var o = this;
   o._sign = null;
   o._data = null;
   o._dataViewer.buffer = null;
   o._dataViewer = null;
   o._viewer = null;
   o._memory = null;
   o.__base.FObject.dispose.call(o);
}
MO.FFileReader = function FFileReader(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListenerLoad);
   o._reader        = null;
   o._fileName      = MO.Class.register(o, new MO.AGetter('_fileName'));
   o._length        = MO.Class.register(o, new MO.AGetter('_length'), 0);
   o._data          = MO.Class.register(o, new MO.AGetter('_data'));
   o._statusLoading = false;
   o.ohloadStart    = MO.FFileReader_ohLoadStart;
   o.ohLoad         = MO.FFileReader_ohLoad;
   o.ohLoadEnd      = MO.FFileReader_ohLoadEnd;
   o.ohProgress     = MO.FFileReader_ohProgress;
   o.construct      = MO.FFileReader_construct;
   o.loadFile       = MO.FFileReader_loadFile;
   o.dispose        = MO.FFileReader_dispose;
   return o;
}
MO.FFileReader_ohLoadStart = function FFileReader_ohLoadStart(){
   var o = this.__linker;
}
MO.FFileReader_ohLoad = function FFileReader_ohLoad(){
   var o = this.__linker;
}
MO.FFileReader_ohLoadEnd = function FFileReader_ohLoadEnd(){
   var o = this.__linker;
   var reader = o._reader;
   o._statusFree = true;
   if(reader.error){
      MO.Logger.error(o, 'Load file failure. (error={1])', reader.error);
   }else{
      o._length = reader.result.byteLength;
      o._data = reader.result;
      var event = new MO.SEvent(o);
      o.processLoadListener(event);
      event.dispose();
   }
}
MO.FFileReader_ohProgress = function FFileReader_ohProgress(){
   var o = this.__linker;
}
MO.FFileReader_construct = function FFileReader_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   var reader = o._reader = new FileReader();
   reader.__linker = o;
   reader.onloadstart = o.ohLoadStart;
   reader.onload = o.ohLoad;
   reader.onloadend = o.ohLoadEnd;
   reader.onprogress = o.ohProgress;
}
MO.FFileReader_loadFile = function FFileReader_loadFile(file){
   var o = this;
   o._fileName = file.name;
   o._length = file.size;
   var reader = o._reader;
   reader.readAsArrayBuffer(file);
}
MO.FFileReader_dispose = function FFileReader_dispose(){
   var o = this;
   var reader = o._reader;
   reader.__linker = null;
   reader.onloadstart = null;
   reader.onload = null;
   reader.onloadend = null;
   reader.onprogress = null;
   o._reader = null;
   o._fileName = null;
   o._data = null;
   o.__base.MListenerLoad.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FJsonConnection = function FJsonConnection(o){
   o = MO.Class.inherits(this, o, MO.FHttpConnection);
   o._contentCd           = MO.EHttpContent.Text;
   o._content             = null;
   o.onConnectionComplete = MO.FJsonConnection_onConnectionComplete;
   o.content              = MO.FJsonConnection_content;
   return o;
}
MO.FJsonConnection_onConnectionComplete = function FJsonConnection_onConnectionComplete(){
   var o = this;
   o._statusFree = true;
   var content = null;
   var data = o._outputData;
   if(data){
      content = o._content = JSON.parse(data);
   }
   var event = o._event;
   event.connection = o;
   event.data = data;
   event.content = content;
   o.processLoadListener(event);
   o.processCompleteListener(event);
}
MO.FJsonConnection_content = function FJsonConnection_content(){
   return this._content;
}
MO.FSocket = function FSocket(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListener);
   o._url              = MO.Class.register(o, new MO.AGetSet('_url'));
   o._stoped           = MO.Class.register(o, new MO.AGetter('_stoped'), true);
   o._connected        = MO.Class.register(o, new MO.AGetter('_connected'), false);
   o._handle           = MO.Class.register(o, new MO.AGetter('_handle'));
   o._eventOpen        = null;
   o._eventSend        = null;
   o._eventReceive     = null;
   o._eventClose       = null;
   o._eventError       = null;
   o._listenersOpen    = MO.Class.register(o, new MO.AListener('_listenersOpen'));
   o._listenersSend    = MO.Class.register(o, new MO.AListener('_listenersSend'));
   o._listenersReceive = MO.Class.register(o, new MO.AListener('_listenersReceive'));
   o._listenersClose   = MO.Class.register(o, new MO.AListener('_listenersClose'));
   o._listenersError   = MO.Class.register(o, new MO.AListener('_listenersError'));
   o.onOpen            = MO.FSocket_onOpen;
   o.onReveive         = MO.FSocket_onReveive;
   o.onClose           = MO.FSocket_onClose;
   o.ohOpen            = MO.FSocket_ohOpen;
   o.ohError           = MO.FSocket_ohError;
   o.ohReceive         = MO.FSocket_ohReceive;
   o.ohClose           = MO.FSocket_ohClose;
   o.construct         = MO.FSocket_construct;
   o.connect           = MO.FSocket_connect;
   o.send              = MO.FSocket_send;
   o.process           = MO.FSocket_process;
   o.disconnect        = MO.FSocket_disconnect;
   o.dispose           = MO.FSocket_dispose;
   return o;
}
MO.FSocket_onOpen = function FSocket_onOpen(event){
   var o = this;
   o._connected = true;
   o.processOpenListener(event);
}
MO.FSocket_ohOpen = function FSocket_ohOpen(hEvent){
   var o = this._linker;
   var event = o._eventOpen;
   o.onOpen(event);
}
MO.FSocket_onReveive = function FSocket_onReveive(event){
   var o = this;
   o.processReceiveListener(event);
}
MO.FSocket_ohReceive = function FSocket_ohReceive(hEvent){
   var o = this._linker;
   var event = o._eventReceive;
   event.message = hEvent.data;
   o.onReveive(event);
}
MO.FSocket_onClose = function FSocket_onClose(event){
   var o = this;
   o._connected = false;
   o.processCloseListener(o._eventClose);
   o._handle = null;
}
MO.FSocket_ohClose = function FSocket_ohClose(hEvent){
   var o = this._linker;
   var event = o._eventClose;
   o.onClose(event);
}
MO.FSocket_onError = function FSocket_onError(event){
   var o = this;
   var event = o._eventError;
   o.processErrorListener(event);
   o._handle = null;
}
MO.FSocket_ohError = function FSocket_ohError(hEvent){
   this._linker.onError(event);
}
MO.FSocket_construct = function FSocket_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._eventOpen = new MO.SEvent(o);
   o._eventSend = new MO.SEvent(o);
   o._eventReceive = new MO.SEvent(o);
   o._eventClose = new MO.SEvent(o);
   o._eventError = new MO.SEvent(o);
}
MO.FSocket_connect = function FSocket_connect(uri){
   var o = this;
   var url = o._url = MO.Console.find(MO.FEnvironmentConsole).parse(uri);
   var handle = o._handle = new WebSocket(url);
   handle._linker = o;
   handle.onopen = o.ohOpen;
   handle.onmessage = o.ohReceive;
   handle.onclose = o.ohClose;
   handle.onerror = o.ohError
   o._stoped = false;
}
MO.FSocket_send = function FSocket_send(message){
   var o = this;
   var event = o._eventSend;
   event.message = message;
   o.processSendListener(event);
   o._handle.send(message);
}
MO.FSocket_process = function FSocket_process(){
   var o = this;
   if(!o._stoped){
      if(!o._handle){
         o.connect(o._url);
      }
   }
}
MO.FSocket_disconnect = function FSocket_disconnect(){
   var o = this;
   var handle = o._handle;
   if(handle){
      handle.close();
      o._handle = null;
   }
   o._stoped = true;
}
MO.FSocket_dispose = function FSocket_dispose(){
   var o = this;
   o._eventOpen = MO.Lang.Object.dispose(o._eventOpen);
   o._eventSend = MO.Lang.Object.dispose(o._eventSend);
   o._eventReceive = MO.Lang.Object.dispose(o._eventReceive);
   o._eventClose = MO.Lang.Object.dispose(o._eventClose);
   o._eventError = MO.Lang.Object.dispose(o._eventError);
   o._handle = null;
   o.__base.FObject.dispose.call(o);
}
MO.FXmlConnection = function FXmlConnection(o){
   o = MO.Class.inherits(this, o, MO.FHttpConnection);
   o._contentCd           = MO.EHttpContent.Text;
   o._inputNode           = null;
   o._outputNode          = null;
   o.onConnectionSend     = MO.FXmlConnection_onConnectionSend;
   o.onConnectionComplete = MO.FXmlConnection_onConnectionComplete;
   o.content              = MO.FXmlConnection_content;
   return o;
}
MO.FXmlConnection_onConnectionSend = function FXmlConnection_onConnectionSend(){
   var o = this;
   var data = o._input;
   if(data){
      var xml = null;
      if(data.constructor == String){
         xml = data;
         o._inputNode = null;
      }else if(data.constructor == MO.TXmlNode){
         var document = new MO.TXmlDocument();
         document.setRoot(data);
         xml = document.xml();
         o._inputNode = data;
      }else if(data.constructor == MO.TXmlDocument){
         xml = data.xml();
         o._inputNode = data.root();
      }else{
         throw new MO.TError('Unknown send data type.');
      }
      o._inputData = xml;
      o._contentLength = xml.length;
   }
}
MO.FXmlConnection_onConnectionComplete = function FXmlConnection_onConnectionComplete(){
   var o = this;
   var handle = o._handle;
   var element = null;
   if(handle.responseXML){
      element = handle.responseXML.documentElement;
   }else if(handle.responseXml){
      element = handle.responseXml.documentElement;
   }else{
      throw new MO.TError(o, "Fetch xml data failure.");
   }
   if(!element){
      return MO.Logger.fatal(o, 'Read xml error. (url={1})\n{2}', o._url, c._outputText)
   }
   var document = new MO.TXmlDocument();
   MO.Lang.Xml.buildNode(document, null, element);
   var root = o._outputNode = document.root();
   o._statusFree = true;
   var event = o._event;
   event.connection = o;
   event.document = document;
   event.root = root;
   event.content = root;
   event.parameters = o._parameters;
   o.processLoadListener(event);
   event.dispose();
   if(o._asynchronous){
      o._input = null;
      o._inputNode = null;
      o._output = null;
      o._outputNode = null;
      o._parameters = null;
   }
}
MO.FXmlConnection_content = function FXmlConnection_content(){
   return this._outputNode;
}
MO.FXmlData = function FXmlData(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._ready    = null;
   o._config   = null;
   o.testReady = MO.FXmlData_testReady;
   return o;
}
MO.FXmlData_testReady = function FXmlData_testReady(){
   return this._ready;
}
MO.REngine = function REngine(){
   var o = this;
   o._spaces    = new Object();
   o.Global     = new Object();
   o.Top        = new Object();
   o.Local      = new Object();
   o.onRelease  = MO.REngine_onRelease;
   o.register   = MO.REngine_register;
   o.initialize = MO.REngine_initialize;
   o.connect    = MO.REngine_connect;
   o.buildSpace = MO.REngine_buildSpace;
   o.find       = MO.REngine_find;
   o.findGlobal = MO.REngine_findGlobal;
   o.findTop    = MO.REngine_findTop;
   o.findLocal  = MO.REngine_findLocal;
   return o;
}
MO.REngine_onRelease = function REngine_onRelease(){
   MO.RConsole.release();
   MO.REvent.release();
   CollectGarbage();
}
MO.REngine_register = function REngine_register(s){
   var o = this;
   var p = o._spaces[s.space];
   if(!p){
      p = o._spaces[s.space] = new Object();
   }
   p[s.name] = s;
}
MO.REngine_initialize = function REngine_initialize(){
   var o = this;
   MO.RConsole.initialize();
}
MO.REngine_connect = function REngine_connect(){
   var o = this;
   MO.RConsole.initialize();
}
MO.REngine_buildSpace = function REngine_buildSpace(t, p){
   var o = this;
   for(var n in p){
      if(MO.Lang.String.startsWith(n, 'R')){
         t[n.substring(1)] = p[n].instance;
      }
   }
}
MO.REngine_find = function REngine_find(s, n){
   var r = null;
   var s = this._spaces[s];
   if(s){
      r = s[n];
      if(r){
         return r.instance;
      }
   }
   return null;
}
MO.REngine_findGlobal = function REngine_findGlobal(n){
   return this.find(MO.ESpace.Global, n);
}
MO.REngine_findTop = function REngine_findTop(n){
   return top.MO.REngine.find(MO.ESpace.Top, n);
}
MO.REngine_findLocal = function REngine_findLocal(n){
   return this.find(MO.ESpace.Local, n);
}
MO.REngine = new MO.REngine();
MO.RLoader = function RLoader(){
   var o = this;
   o._loading      = new MO.TArray();
   o._loaded       = new MO.TArray()
   o._waits        = new MO.TArray()
   o._intervalId   = null;
   o.hWindow       = null;
   o.onInterval    = MO.RLoader_onInterval;
   o.intervalStart = MO.RLoader_intervalStart;
   o.intervalStop  = MO.RLoader_intervalStop;
   o.loadJsFile    = MO.RLoader_loadJsFile;
   o.loadJs        = MO.RLoader_loadJs;
   o.loaded        = MO.RLoader_loaded;
   o.wait          = MO.RLoader_wait;
   o.waitJs        = MO.RLoader_waitJs;
   o.dispose       = MO.RLoader_dispose;
   return o;
}
MO.RLoader_dispose = function RLoader_dispose(){
   var o = this;
   o.intervalStop();
   o.hWindow = null;
}
MO.RLoader_onInterval = function RLoader_onInterval(){
   var o = this;
   var ws = o._waits;
   var c = ws.length;
   for(var n=0; n<c; n++){
      var l = ws.get(n);
      if(l){
         if(l.check(o._loaded)){
            l.invoke.invoke();
            ws.set(n, null);
         }
      }
   }
   ws.compress();
   if(ws.isEmpty()){
      o.intervalStop();
   }
}
MO.RLoader_intervalStart = function RLoader_intervalStart(){
   var o = this;
   if(!o._intervalId){
      o.hWindow = window;
      o._intervalId = window.setInterval(function(){o.onInterval();}, 10);
   }
}
MO.RLoader_intervalStop = function RLoader_intervalStop(){
   var o = this;
   var w = o.hWindow;
   if(w && o._intervalId){
      w.clearInterval(o._intervalId);
      o.hWindow = null;
      o._intervalId = null;
   }
}
MO.RLoader_loadJsFile = function RLoader_loadJsFile(id, src){
   var o = this;
   var d = MO.RWindow.hDocument;
   var h = d.getElementsByTagName("head")[0];
   if(document.getElementById(id) == null){
      var url = top.MO.RContext.location(src);
      var hs = MO.RWindow.createElement('SCRIPT');
      hs.id = id;
      hs.type = 'text/javascript';
      hs.src = url;
      if(d.attachEvent){
         hs.onreadystatechange = function(){
            var s = hs.readyState;
            if('loaded' == s || 'complete' == s){
               hs.onreadystatechange = null;
               o._loading.extract(id);
               o._loaded.push(id);
            }
         }
      }else{
         hs.onload = function(){
            if(d.readyState == 'complete'){
               hs.onload = null;
               o._loading.extract(id);
               o._loaded.push(id);
            }
         }
      }
      h.appendChild(hs);
   }
}
MO.RLoader_loadJs = function RLoader_loadJs(ps){
   var as = arguments;
   var c = as.length;
   for(var n = 0; n < c; n++){
      var p = as[n];
      this.loadJsFile('js:' + p, '/ajs/' + p.replace(/\./g, '/') + '.js');
   }
}
MO.RLoader_loaded = function RLoader_loaded(id){
   var o = this;
   o._loading.extract(id);
   o._loaded.push(id);
}
MO.RLoader_wait = function RLoader_wait(invoke, ids){
   var o = this;
   var l = new MO.TLoaderListener();
   l.invoke = invoke;
   var c = arguments.length;
   for(var n = 1; n < c; n++){
      l.ids.push(arguments[n]);
   }
   o._waits.push(l);
   o.intervalStart();
}
MO.RLoader_waitJs = function RLoader_waitJs(invoke, ids){
   var o = this;
   var l = new MO.TLoaderListener();
   l.invoke = invoke;
   var as = arguments;
   var c = as.length;
   for(var n = 1; n < c; n++){
      l.ids.push('js:' + as[n]);
   }
   o._waits.push(l);
   o.intervalStart();
}
MO.RLoader = new MO.RLoader();
MO.RMessage = function RMessage(){
   var o = this;
   o._hasError     = false;
   o._messages     = null;
   o.push          = MO.RMessage_push;
   o.fatal         = MO.RMessage_fatal;
   o.confirmResult = false;
   o.error         = MO.RMessage_error;
   o.warn          = MO.RMessage_warn;
   o.onWindowClose = MO.RMessage_onWindowClose;
   o.confirm       = MO.RMessage_confirm;
   o.info          = MO.RMessage_info;
   return o;
}
MO.RMessage_push = function RMessage_push(msg){
   if(!this._messages){
      this._messages = new FLoopList();
   }
   this._messages.push(msg);
}
MO.RMessage_fatal = function RMessage_fatal(sf, er, ms, pm){
   var o = this;
   if(o._hasError){
      return;
   }
   o._hasError = true;
   var s = new MO.TString();
   var t = new Array();
   var f = MO.RMessage_fatal.caller;
   while(f){
      if(MO.Lang.Array.contains(t, f)){
         break;
      }
      t.push(f);
      f = f.caller;
   }
   var c = t.length;
   for(var n = 0; n < c; n++){
      f = t[n];
      if(n > 0){
         s.appendLine();
      }
      s.append('   ' + (c - n) + ': ' + MO.Method.name(f));
   }
   var m = new MO.TString();
   m.appendLine(MO.RContext.get('RMessage:fatal'));
   m.appendLine(MO.Lang.String.repeat('-', 60));
   m.append(MO.Class.dump(sf), ': ');
   if(ms){
      var ag = arguments;
      c = ag.length;
      for(var n = 3; n < c; n++){
         var p = ag[n];
         if('function' == typeof(p)){
            p = MO.Method.name(p);
         }
         var pi = n - 2;
         ms = ms.replace('{' + pi + '}', p);
      }
   }
   m.appendLine(ms);
   m.appendLine(MO.String.repeat('-', 60));
   m.appendLine('Stack:');
   m.append(s);
   alert(m);
}
MO.RMessage_error = function RMessage_error(self, method, msg, params){
   if(this._hasError){
      return;
   }
   this._hasError = true;
   throw new Error(msg);
}
MO.RMessage_warn = function RMessage_warn(self, message, params){
   var s = new MO.TString();
   var n = 0;
   var aw = top.MO.RControl.create(MO.FAlertWindow);
   aw.setText(message);
   aw.show();
}
MO.RMessage_info = function RMessage_info(self, message, params){
   var s = new MO.TString();
   var n = 0;
   var aw = top.MO.RControl.create(MO.FInfoWindow);
   aw.setText(message);
   aw.show();
}
MO.RMessage_confirm = function RMessage_confirm(message,callback){
   var o = this;
   var ls = top.MO.RControl.create(MO.FConfirmWindow);
   ls.setText(message);
   ls.lsns.register(o, callback);
   ls.show();
}
MO.RMessage_onWindowClose = function RMessage_onWindowClose(v){
   this.confirmResult = v;
}
MO.RMessage = new MO.RMessage();
MO.RStyle = function RStyle(){
   var o = this;
   o._connected = false;
   o._rules     = new MO.TMap();
   o.connect    = MO.RStyle_connect;
   o.has        = MO.RStyle_has;
   o.nvl        = MO.RStyle_nvl;
   o.style      = MO.RStyle_style;
   return o;
}
MO.RStyle_connect = function RStyle_connect(){
   var o = this;
   if(o._connected){
      return;
   }
   var s = o._rules;
   var ds = document.styleSheets;
   var dc = ds.length;
   for(var n = 0; n < dc; n++){
      var rs = ds[n].cssRules;
      if(rs){
         var rc = rs.length;
         for(var i = 0; i < rc; i++){
            var r = rs[i];
            s.set(r.selectorText, r);
         }
      }
   }
   o._connected = true;
}
MO.RStyle_has = function RStyle_has(s){
   var o = this;
   if(!o._connected){
      o.connect();
   }
   if(s){
      return this._rules.contains('.' + s.toLowerCase());
   }
   return false;
}
MO.RStyle_nvl = function RStyle_nvl(s, n){
   var o = this;
   o.connect();
   var a = arguments;
   var c = a.length;
   for(var n = 0; n < c; n++){
      var s = a[n];
      if(s){
         if(o._rules.contains('.' + s.toLowerCase())){
            return s;
         }
      }
   }
   return null;
}
MO.RStyle_style = function RStyle_style(c, n){
   return MO.Class.name(c) + '_' + n;
}
MO.RStyle = new MO.RStyle();
MO.RTypeArray = function RTypeArray(){
   var o = this;
   o._float3 = null;
   o._float4 = null;
   o._data   = new Object();
   return o;
}
MO.RTypeArray.prototype.float3 = function RTypeArray_float3(){
   var o = this;
   var value = o._float3;
   if(value == null){
      value = o._float3 = new Float32Array(3);
   }
   return value;
}
MO.RTypeArray.prototype.float4 = function RTypeArray_float4(){
   var o = this;
   var value = o._float4;
   if(value == null){
      value = o._float4 = new Float32Array(4);
   }
   return value;
}
MO.RTypeArray.prototype.createArray = function RTypeArray_createArray(typeCd, length){
   switch(typeCd){
      case MO.EDataType.Boolean:
      case MO.EDataType.Int8:
         return new Int8Array(length);
      case MO.EDataType.Int16:
         return new Int16Array(length);
      case MO.EDataType.Int32:
         return new Int32Array(length);
      case MO.EDataType.Int64:
         return new Int64Array(length);
      case MO.EDataType.Uint8:
         return new Uint8Array(length);
      case MO.EDataType.Uint16:
         return new Uint16Array(length);
      case MO.EDataType.Uint32:
         return new Uint32Array(length);
      case MO.EDataType.Float32:
         return new Float32Array(length);
      case MO.EDataType.Float64:
         return new Float64Array(length);
   }
   throw new TError('Create unknown type array. (type={1}, length={2})', typeCd, length);
}
MO.RTypeArray.prototype.findTemp = function RTypeArray_findTemp(typeCd, length){
   var o = this;
   var data = o._data;
   var collection = data[typeCd];
   if(collection == null){
      collection = data[typeCd] = new Object();
   }
   var result = collection[length];
   if(result == null){
      result = collection[length] = o.createArray(typeCd, length);
   }
   return result;
}
MO.Lang.TypeArray = new MO.RTypeArray();
MO.RXml = function RXml(){
   return this;
}
MO.RXml.prototype.isNode = function RXml_isNode(n){
   return MO.Class.isName(n, 'TNode');
}
MO.RXml.prototype.formatText = function RXml_formatText(s){
   if(s != null){
      s = s.replace(/\\n/g, '\n');
   }
   return s;
}
MO.RXml.prototype.buildText = function RXml_buildText(s, v){
   if(v != null){
      v = v.toString();
      var c = v.length;
      for(var i = 0; i < c; i++){
         var ch = v.charAt(i);
         switch(ch){
            case '<':
               s.append('&lt;');
               break;
            case '>':
               s.append('&gt;');
               break;
            case '&':
               s.append('&amp;');
               break;
            case '\'':
               s.append('&apos;');
               break;
            case '"':
               s.append('&quot;');
               break;
            case '\r':
               continue;
            case '\n':
               s.append('\\n');
               break;
            default:
               s.append(ch);
         }
      }
   }
   return s;
}
MO.RXml.prototype.buildNode = function RXml_buildNode(pd, pn, pe){
   var xas = null;
   var eas = pe.attributes;
   if(eas){
      var eac = eas.length;
      if(eac > 0){
         xas = new MO.TAttributes();
         for(var n = 0; n < eac; n++){
            var ea = eas[n];
            if(ea.nodeName){
               xas.set(ea.nodeName, this.formatText(ea.value));
            }
         }
      }
   }
   var xt = new MO.TString();
   xt.append(pe.value);
   var ecs = pe.childNodes
   if(ecs){
      var ecc = ecs.length;
      for(var n = 0; n < ecc; n++){
         var en = ecs[n];
         var ect = en.nodeType;
         if(ect == MO.ENodeType.Text){
            xt.append(en.nodeValue);
         }else if(ect == MO.ENodeType.Data){
            xt.append(en.data);
         }
      }
   }
   var xc = pd.create(pe.nodeName, xas, MO.Lang.String.trim(xt.toString()));
   if(pn){
      pn.push(xc);
   }else{
      pd._root = xc;
   }
   if(ecs){
      var cc = ecs.length;
      for(var n = 0; n < cc; n++){
         if(ecs[n].nodeType == MO.ENodeType.Node){
            this.buildNode(pd, xc, ecs[n]);
         }
      }
   }
}
MO.RXml.prototype.makeNode = function RXml_makeNode(p){
   var o = this;
   if(p.documentElement){
      var d = new MO.TXmlDocument();
      o.buildNode(d, null, p.documentElement);
      return d.root();
   }else if(p.tagName == 'SCRIPT'){
      var s = p.textContent;
      if(!s){
         s = p.text;
      }
      if(s){
         var d = new MO.TXmlDocument();
         var xd = o.makeString(s)
         o.buildNode(d, null, xd.documentElement);
         return d.root();
      }
   }
   return null;
}
MO.RXml.prototype.makeDocument = function RXml_makeDocument(p){
   var d = new MO.TXmlDocument();
   if(p.documentElement){
      this.buildNode(d, null, p.documentElement);
   }
   return d;
}
MO.RXml.prototype.unpack = function RXml_unpack(s, n){
   var o = this;
   if(MO.Lang.String.isEmpty(s)){
      return null;
   }
   if(!n){
      n = new MO.TNode();
   }
   var np = new MO.TAttributes();
   np.unpack(s);
   n.name = np.get('name');
   n.value = np.get('value');
   if(np.contains('attributes')){
      n.attributes().unpack(np.get('attributes'));
   }
   if(np.contains('nodes')){
      var ns = new MO.TStrings();
      ns.unpack(np.get('nodes'));
      for(var i = 0; i < ns.count; i++){
         o.unpack(ns.get(i), n.create());
      }
   }
   return n;
}
MO.RXml.prototype.saveObject = function RXml_saveObject(xconfig, tag, item){
   var o = this;
   for(var name in item){
      var value = item[name];
      if(value != null){
         var xtag = xconfig.create(tag);
         xtag.set('name', name);
         var typeName = typeof(value);
         switch(typeName){
            case 'boolean':
            case 'number':
            case 'date':
            case 'string':
               xtag.setValue(value);
               break;
            case 'function':
               xtag.setValue(MO.Method.name(value));
               break;
            case 'object':
               o.saveObject(xtag, 'Property', value);
               break;
            default:
               throw new MO.TError('Invalid object.');
         }
      }
   }
}
MO.Lang.Xml = new MO.RXml();
MO.FTag = function FTag(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._name      = 'Tag';
   o._children  = null;
   o._trimLeft  = false;
   o._trimRight = false;
   o.onBegin    = MO.FTag_onBegin;
   o.onEnd      = MO.FTag_onEnd;
   o.name       = MO.FTag_name;
   o.set        = MO.FTag_set;
   o.push       = MO.FTag_push;
   o.parse      = MO.FTag_parse;
   o.toString   = MO.FTag_toString;
   o.innerDump  = MO.FTag_innerDump;
   o.dump       = MO.FTag_dump;
   return o;
}
MO.FTag_onBegin = function FTag_onBegin(p){
   return MO.EResult.Continue;
}
MO.FTag_onEnd = function FTag_onEnd(p){
   return MO.EResult.Continue;
}
MO.FTag_name = function FTag_name(){
   return this._name;
}
MO.FTag_set = function FTag_set(n, v){
   throw new MO.TError(this, 'Unknown attribute name. (name={1}, value={2})', n, v);
}
MO.FTag_push = function FTag_push(p){
   var o = this;
   var ts = o._children;
   if(ts == null){
      ts = o._children = new MO.TObjects();
   }
   ts.push(p);
}
MO.FTag_parse = function FTag_parse(p){
   var o = this;
   var r = o.onBegin(p);
   if(r == MO.EResult.Continue){
      var ts = o._children;
      if(ts){
         var c = ts.count();
         for(var i = 0; i < c; i++){
            var t = ts.get(i);
            r = t.parse(p);
            if(r == MO.EResult.Cancel){
               return r;
            }
            p._trimLeft = t._trimLeft;
            p._trimRight = t._trimRight;
         }
      }
      return o.onEnd(p);
   }
   return r;
}
MO.FTag_toString = function FTag_toString(){
   return null;
}
MO.FTag_innerDump = function FTag_innerDump(ps, pt, pl){
   var o = this;
   ps.appendRepeat('   ', pl);
   ps.append(MO.Class.dump(pt));
   var s = pt.toString();
   if(!MO.MO.Lang.String.isEmpty(s)){
      ps.append(' [', s, ']');
   }
   var ts = pt._children;
   if(ts){
      ps.append('\n');
      var c = ts.count();
      for(var i = 0; i < c; i++){
         var t = ts.get(i);
         o.innerDump(ps, t, pl + 1);
         if(i < c - 1){
            ps.append('\n');
         }
      }
   }
}
MO.FTag_dump = function FTag_dump(){
   var result = new MO.TString();
   this.innerDump(result, this, 0);
   return result.toString();
}
MO.FTagContext = function FTagContext(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MInstance);
   o._trimLeft       = false;
   o._trimRight      = false;
   o._attributes     = MO.Class.register(o, new MO.AGetter('_attributes'));
   o._source         = null;
   o.construct       = MO.FTagContext_construct;
   o.instanceAlloc   = MO.FTagContext_instanceAlloc;
   o.get             = MO.FTagContext_get;
   o.set             = MO.FTagContext_set;
   o.setBoolean      = MO.FTagContext_setBoolean;
   o.source          = MO.FTagContext_source;
   o.write           = MO.FTagContext_write;
   o.resetSource     = MO.FTagContext_resetSource;
   o.dispose         = MO.FTagContext_dispose;
   return o;
}
MO.FTagContext_construct = function FTagContext_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._attributes = new MO.TAttributes();
   o._source = new MO.TString();
}
MO.FTagContext_instanceAlloc = function FTagContext_instanceAlloc(){
   this._attributes.clear();
}
MO.FTagContext_get = function FTagContext_get(name, value){
   return this._attributes.get(name, value);
}
MO.FTagContext_set = function FTagContext_set(name, value){
   this._attributes.set(name, value);
}
MO.FTagContext_setBoolean = function FTagContext_setBoolean(name, value){
   this._attributes.set(name, MO.RBoolean.toString(value));
}
MO.FTagContext_source = function FTagContext_source(){
   return this._source.toString();
}
MO.FTagContext_write = function FTagContext_write(p){
   if(!MO.Lang.String.isEmpty(p)){
      this._source.append(p);
   }
}
MO.FTagContext_resetSource = function FTagContext_resetSource(p){
   this._source.clear();
}
MO.FTagContext_dispose = function FTagContext_dispose(){
   var o = this;
   o._attributes = MO.Lang.Object.dispose(o._attributes);
   o._source = MO.Lang.Object.dispose(o._source);
   o.__base.FObject.dispose.call(o);
}
MO.FTagDocument = function FTagDocument(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._space  = MO.Class.register(o, MO.AGetSet('_space'));
   o._root   = MO.Class.register(o, MO.AGetter('_root'));
   o.create   = MO.FTagDocument_create;
   o.loadNode = MO.FTagDocument_loadNode;
   o.load     = MO.FTagDocument_load;
   o.parse    = MO.FTagDocument_parse;
   o.dump     = MO.FTagDocument_dump;
   return o;
}
MO.FTagDocument_create = function FTagDocument_create(p){
   var o = this;
   var sn = o._space + '_';
   var n = null;
   if(MO.RString.startsWith(p, sn)){
      n = p.substring(sn.length);
   }else{
      n = p;
   }
   var t = null;
   switch(n){
      case 'source':
         t = MO.Class.create(MO.FTag);
         break;
      case 'write':
         t = MO.Class.create(MO.FTagWrite);
         break;
      case 'true':
         t = MO.Class.create(MO.FTagTrue);
         break;
      case 'false':
         t = MO.Class.create(MO.FTagFalse);
         break;
      case 'equals':
         t = MO.Class.create(MO.FTagEquals);
         break;
      case 'notEquals':
         t = MO.Class.create(MO.FTagNotEquals);
         break;
      default:
         throw new MO.TError(o, 'Unknown tag type. (name={1})', n);
   }
   return t;
}
MO.FTagDocument_loadNode = function FTagDocument_loadNode(pn, pe){
   var o = this;
   var x = o.create(pe.nodeName);
   if(pn){
      pn.push(x);
   }else{
      o._root = x;
   }
   var eas = pe.attributes;
   if(eas){
      var c = eas.length;
      for(var i = 0; i < c; i++){
         var ea = eas[i];
         if(ea.nodeName){
            x.set(ea.nodeName, MO.RXml.formatText(ea.value));
         }
      }
   }
   var ens = pe.childNodes
   if(ens){
      var c = ens.length;
      for(var i = 0; i < c; i++){
         var en = ens[i];
         switch(en.nodeType){
            case MO.ENodeType.Text:
               var xt = MO.Class.create(MO.FTagText);
               xt.setText(en.nodeValue);
               x.push(xt);
               break;
            case MO.ENodeType.Data:
               var xt = MO.Class.create(MO.FTagText);
               xt.setText(en.data);
               x.push(xt);
               break;
            case MO.ENodeType.Node:
               o.loadNode(x, en);
               break;
         }
      }
   }
}
MO.FTagDocument_load = function FTagDocument_load(p){
   var o = this;
   var s = '<source>' + p + '</source>'
   s = s.replace(new RegExp('<' + o._space + ':', 'g'), '<' + o._space + '_');
   s = s.replace(new RegExp('</' + o._space + ':', 'g'), '</' + o._space + '_');
   s = s.replace(new RegExp(' & ', 'g'), ' &amp; ');
   s = s.replace(new RegExp(' < ', 'g'), ' &lt; ');
   s = s.replace(new RegExp(' > ', 'g'), ' &gt; ');
   var xr = MO.RXml.makeString(s);
   o.loadNode(null, xr.firstChild);
}
MO.FTagDocument_parse = function FTagDocument_parse(p){
   var o = this;
   p.resetSource();
   o._root.parse(p);
   return p.source();
}
MO.FTagDocument_dump = function FTagDocument_dump(){
   var o = this;
   var r = new MO.TString();
   r.appendLine(MO.Class.dump(o));
   r.appendLine(o.root().dump(r));
   return r.toString();
}
MO.FTagEquals = function FTagEquals(o){
   o = MO.Class.inherits(this, o, MO.FTag);
   o._trimLeft = true;
   o._source   = null;
   o._value    = null;
   o.onBegin   = MO.FTagEquals_onBegin;
   o.set       = MO.FTagEquals_set;
   o.toString  = MO.FTagEquals_toString;
   return o;
}
MO.FTagEquals_onBegin = function FTagEquals_onBegin(p){
   var o = this;
   var r = false;
   var s = p.get(o._source);
   var vs = o._value.split('|');
   var c = vs.length;
   for(var i = 0; i < c; i++){
      var v = vs[i]
      if(s == v){
         r = true;
         break;
      }
   }
   return r ? MO.EResult.Continue : MO.EResult.Skip;
}
MO.FTagEquals_set = function FTagEquals_set(n, v){
   var o = this;
   switch(n){
      case 'source':
         o._source = v;
         return;
      case 'value':
         o._value = v;
         return;
   }
   o.__base.FTag.set.call(o, n, v);
}
MO.FTagEquals_toString = function FTagEquals_toString(){
   var o = this;
   return 'source=' + o._source + ', value=' + o._value;
}
MO.FTagFalse = function FTagFalse(o){
   o = MO.Class.inherits(this, o, MO.FTag);
   o._trimLeft = true;
   o._source   = null;
   o.onBegin   = MO.FTagFalse_onBegin;
   o.set       = MO.FTagFalse_set;
   o.toString  = MO.FTagFalse_toString;
   return o;
}
MO.FTagFalse_onBegin = function FTagFalse_onBegin(p){
   var o = this;
   var v = p.get(o._source);
   return MO.RBoolean.parse(v) ? MO.EResult.Skip : MO.EResult.Continue;
}
MO.FTagFalse_set = function FTagFalse_set(n, v){
   var o = this;
   switch(n){
      case 'source':
         o._source = v;
         return;
   }
   o.__base.FTag.set.call(o, n, v);
}
MO.FTagFalse_toString = function FTagFalse_toString(){
   var o = this;
   return 'source=' + o._source;
}
MO.FTagNotEquals = function FTagNotEquals(o){
   o = MO.Class.inherits(this, o, MO.FTag);
   o._trimLeft = true;
   o._source   = null;
   o._value    = null;
   o.onBegin   = MO.FTagNotEquals_onBegin;
   o.set       = MO.FTagNotEquals_set;
   o.toString  = MO.FTagNotEquals_toString;
   return o;
}
MO.FTagNotEquals_onBegin = function FTagNotEquals_onBegin(p){
   var o = this;
   var r = true;
   var s = p.get(o._source);
   var vs = o._value.split('|');
   var c = vs.length;
   for(var i = 0; i < c; i++){
      var v = vs[i]
      if(s == v){
         r = false;
         break;
      }
   }
   return r ? MO.EResult.Continue : MO.EResult.Skip;
}
MO.FTagNotEquals_set = function FTagNotEquals_set(n, v){
   var o = this;
   switch(n){
      case 'source':
         o._source = v;
         return;
      case 'value':
         o._value = v;
         return;
   }
   o.__base.FTag.set.call(o, n, v);
}
MO.FTagNotEquals_toString = function FTagNotEquals_toString(){
   var o = this;
   return 'source=' + o._source + ', value=' + o._value;
}
MO.FTagText = function FTagText(o){
   o = MO.Class.inherits(this, o, MO.FTag);
   o._text    = MO.Class.register(o, new MO.AGetSet('_text'));
   o.onBegin  = MO.FTagText_onBegin;
   o.toString = MO.FTagText_toString;
   return o;
}
MO.FTagText_onBegin = function FTagText_onBegin(p){
   var t = this._text;
   if(p._trimLeft){
      if(MO.RString.startsWith(t, '\r')){
         t = t.substring(1);
      }
      if(MO.RString.startsWith(t, '\n')){
         t = t.substring(1);
      }
   }
   if(p._trimRight){
      if(MO.RString.endsWith(t, '\r')){
         t = t.substring(0, t.length - 1);
      }
      if(MO.RString.endsWith(t, '\n')){
         t = t.substring(0, t.length - 1);
      }
   }
   p.write(t);
   return MO.EResult.Skip;
}
MO.FTagText_toString = function FTagText_toString(){
   var o = this;
   return '{' + o._text + '}';
}
MO.FTagTrue = function FTagTrue(o){
   o = MO.Class.inherits(this, o, MO.FTag);
   o._trimLeft = true;
   o._source   = null;
   o.onBegin   = MO.FTagTrue_onBegin;
   o.set       = MO.FTagTrue_set;
   o.toString  = MO.FTagTrue_toString;
   return o;
}
MO.FTagTrue_onBegin = function FTagTrue_onBegin(p){
   var o = this;
   var r = false;
   var ns = o._source.split('|');
   var c = ns.length;
   for(var i = 0; i < c; i++){
      var n = ns[i]
      var v = p.get(n);
      if(MO.Lang.Boolean.parse(v)){
         r = true;
         break;
      }
   }
   return r ? MO.EResult.Continue : MO.EResult.Skip;
}
MO.FTagTrue_set = function FTagTrue_set(n, v){
   var o = this;
   switch(n){
      case 'source':
         o._source = v;
         return;
   }
   o.__base.FTag.set.call(o, n, v);
}
MO.FTagTrue_toString = function FTagTrue_toString(){
   var o = this;
   return 'source=' + o._source;
}
MO.FTagWrite = function FTagWrite(o){
   o = MO.Class.inherits(this, o, MO.FTag);
   o._source  = null;
   o.onBegin  = MO.FTagWrite_onBegin;
   o.set      = MO.FTagWrite_set;
   o.toString = MO.FTagWrite_toString;
   return o;
}
MO.FTagWrite_onBegin = function FTagWrite_onBegin(p){
   var o = this;
   var v = p.get(o._source);
   p.write(v);
   return MO.EResult.Skip;
}
MO.FTagWrite_set = function FTagWrite_set(n, v){
   var o = this;
   switch(n){
      case 'source':
         o._source = v;
         return;
   }
   o.__base.FTag.set.call(o, n, v);
}
MO.FTagWrite_toString = function FTagWrite_toString(){
   var o = this;
   return 'source=' + o._source;
}
MO.EThreadStatus = new function EThreadStatus(){
   var o = this;
   o.Sleep  = 0;
   o.Active = 1;
   o.Finish = 2;
   return o;
}
MO.SProcessEvent = function SProcessEvent(){
   var o = this;
   o.index = null;
   o.code  = null;
   o.data  = null;
   return o;
}
MO.SXmlEvent = function SXmlEvent(){
   var o = this;
   o.owner          = null;
   o.url            = null;
   o.action         = null;
   o.parameter      = null;
   o.inputDocument  = null;
   o.outputDocument = null;
   o.callback       = null;
   o.process        = MO.SXmlEvent_process;
   o.dispose        = MO.SXmlEvent_dispose;
   return o;
}
MO.SXmlEvent_process = function SXmlEvent_process(p){
   var o = this;
   o.outputDocument = p.document;
   o.outputNode = p.root;
   if(o.owner){
      o.callback.call(o.owner, o);
   }else{
      o.callback(o);
   }
}
MO.SXmlEvent_dispose = function SXmlEvent_dispose(){
   var o = this;
   o.owner = null;
   o.url = null;
   o.action = null;
   o.parameter = null;
   o.inputDocument = null;
   o.outputDocument = null;
   o.callback = null;
}
MO.FContent = function FContent(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._name = MO.Class.register(o, new MO.AGetter('_name'));
   return o;
}
MO.FContentConsole = function FContentConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd     = MO.EScope.Local;
   o._connections = null;
   o.onLoad       = MO.FContentConsole_onLoad;
   o.construct    = MO.FContentConsole_construct;
   o.alloc        = MO.FContentConsole_alloc;
   o.process      = MO.FContentConsole_process;
   o.send         = MO.FContentConsole_send;
   return o;
}
MO.FContentConsole_construct = function FContentConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._connections = new MO.TObjects();
}
MO.FContentConsole_onLoad = function FContentConsole_onLoad(){
   var o = this;
   var e = o.event;
   e.document = o.document;
   e.process();
   o.event = null;
   o.document = null;
   o._statusFree = true;
}
MO.FContentConsole_alloc = function FContentConsole_alloc(){
   var o = this;
   var a = null;
   var cs = o._connections;
   for(var n = cs.count - 1; n >= 0; n--){
      var c = cs.get(n);
      if(c._statusFree){
         a = c;
         break;
      }
   }
   if(!a){
      a = MO.Class.create(MO.FXmlConnection);
      cs.push(a);
      a.onLoad = o.onLoad;
   }
   a._statusFree = false;
   return a;
}
MO.FContentConsole_process = function FContentConsole_process(e){
   var o = this;
   var c = o.alloc();
   c.event = e;
   switch(e.code){
      case MO.EXmlEvent.Send:
         c.send(e.url, e.document);
         break;
      case MO.EXmlEvent.Receive:
         c.receive(e.url, e.document);
         break;
      case MO.EXmlEvent.SyncSend:
         return c.syncSend(e.url, e.document);
      case MO.EXmlEvent.SyncReceive:
         return c.syncReceive(e.url, e.document);
   }
}
MO.FContentConsole_send = function FContentConsole_send(u, d){
   var o = this;
   var c = o.alloc();
   var r = c.syncSend(u, d);
   c._statusFree = true;
   return r;
}
MO.FContentPipeline = function FContentPipeline(o){
   o = MO.Class.inherits(this, o, MO.FPipeline);
   o._scopeCd = MO.Class.register(o, new MO.AGetter('_scopeCd'), MO.EScope.Global);
   return o;
}
MO.FDragConsole = function FDragConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd        = MO.EScope.Local;
   o._activeDragable = null;
   o._dragables      = null;
   o.onMouseDown     = MO.FDragConsole_onMouseDown;
   o.onMouseMove     = MO.FDragConsole_onMouseMove;
   o.onMouseUp       = MO.FDragConsole_onMouseUp;
   o.construct       = MO.FDragConsole_construct;
   o.register        = MO.FDragConsole_register;
   o.unregister      = MO.FDragConsole_unregister;
   o.clear           = MO.FDragConsole_clear;
   return o;
}
MO.FDragConsole_onMouseDown = function FDragConsole_onMouseDown(p){
   var o = this;
   var es = p.source;
   if(!es){
      return;
   }
   if(!MO.Class.isClass(es, MO.MUiDragable)){
      return;
   }
   MO.RWindow.setOptionSelect(false);
   o._activeDragable = es;
   es.onDragStart(p);
}
MO.FDragConsole_onMouseMove = function FDragConsole_onMouseMove(p){
   var o = this;
   if(!o._activeDragable){
      return;
   }
   o._activeDragable.onDragMove(p);
}
MO.FDragConsole_onMouseUp = function FDragConsole_onMouseUp(p){
   var o = this;
   if(!o._activeDragable){
      return;
   }
   MO.RWindow.setOptionSelect(true);
   o._activeDragable.onDragStop(p);
   o._activeDragable = null;
}
MO.FDragConsole_construct = function FDragConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._dragables = new MO.TObjects();
   MO.RWindow.lsnsMouseDown.register(o, o.onMouseDown);
   MO.RWindow.lsnsMouseMove.register(o, o.onMouseMove);
   MO.RWindow.lsnsMouseUp.register(o, o.onMouseUp);
}
MO.FDragConsole_register = function FDragConsole_register(p){
   this._dragables.push(p);
}
MO.FDragConsole_unregister = function FDragConsole_unregister(po, pc){
   this._dragables.remove(p);
}
MO.FDragConsole_clear = function FDragConsole_clear(){
   this._dragables.clear();
}
MO.FEnvironment = function FEnvironment(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._name  = MO.Class.register(o, new MO.AGetSet('_name'));
   o._value = MO.Class.register(o, new MO.AGetSet('_value'));
   o.set    = MO.FEnvironment_set;
   return o;
}
MO.FEnvironment_set = function FEnvironment_set(name, value){
   var o = this;
   o._name = name;
   o._value = value;
}
MO.FEnvironmentConsole = function FEnvironmentConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd      = MO.EScope.Local;
   o._environments = MO.Class.register(o, new MO.AGetSet('_environments'));
   o.construct     = MO.FEnvironmentConsole_construct;
   o.register      = MO.FEnvironmentConsole_register;
   o.registerValue = MO.FEnvironmentConsole_registerValue;
   o.find          = MO.FEnvironmentConsole_find;
   o.findValue     = MO.FEnvironmentConsole_findValue;
   o.parse         = MO.FEnvironmentConsole_parse;
   o.parseUrl      = MO.FEnvironmentConsole_parseUrl;
   o.dispose       = MO.FEnvironmentConsole_dispose;
   return o;
}
MO.FEnvironmentConsole_construct = function FEnvironmentConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._environments = new MO.TDictionary();
}
MO.FEnvironmentConsole_register = function FEnvironmentConsole_register(environment){
   var o = this;
   var name = environment.name();
   o._environments.set(name, environment);
}
MO.FEnvironmentConsole_registerValue = function FEnvironmentConsole_registerValue(name, value){
   var o = this;
   var environment = MO.Class.create(MO.FEnvironment);
   environment.set(name, value);
   o._environments.set(name, environment);
   return environment;
}
MO.FEnvironmentConsole_find = function FEnvironmentConsole_find(name){
   return this._environments.get(name);
}
MO.FEnvironmentConsole_findValue = function FEnvironmentConsole_findValue(name){
   var o = this;
   var value = null;
   var environment = o._environments.get(name);
   if(environment){
      value = environment.value();
   }
   return value;
}
MO.FEnvironmentConsole_parse = function FEnvironmentConsole_parse(value){
   var o = this;
   var result = value;
   var environments = o._environments;
   var count = environments.count();
   for(var i = 0; i < count; i++){
      var environment = environments.at(i);
      result = MO.Lang.String.replace(result, '{' + environment.name() + '}', environment.value());
   }
   return result;
}
MO.FEnvironmentConsole_parseUrl = function FEnvironmentConsole_parseUrl(value){
   var o = this;
   var result = null;
   var version = MO.Runtime.version();
   var url = o.parse(value);
   if(url.indexOf('?') != -1){
      result = url + '&' + version;
   }else{
      result = url + '?' + version;
   }
   return result;
}
MO.FEnvironmentConsole_dispose = function FEnvironmentConsole_dispose(){
   var o = this;
   o._environments = MO.Lang.Object.dispose(o._environments);
   o.__base.FConsole.dispose.call(o);
}
MO.FEvent = function FEvent(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._owner      = MO.Class.register(o, new MO.AGetSet('_owner'));
   o._callback   = MO.Class.register(o, new MO.AGetSet('_callback'));
   o._valid      = MO.Class.register(o, new MO.AGetSet('_valid'), true);
   o.process     = MO.FEvent_process;
   return o;
}
MO.FEvent_process = function FEvent_process(){
   var o = this;
   if(o._valid){
      var owner = o._owner;
      if(owner){
         o._callback.call(owner, o);
      }else{
         o._callback(o);
      }
   }
}
MO.FEventConsole = function FEventConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd       = MO.EScope.Local;
   o._thread        = null;
   o._interval      = 100;
   o._processEvents = null;
   o._events        = null;
   o.onProcess      = MO.FEventConsole_onProcess;
   o.construct      = MO.FEventConsole_construct;
   o.register       = MO.FEventConsole_register;
   o.push           = MO.FEventConsole_push;
   o.clear          = MO.FEventConsole_clear;
   return o;
}
MO.FEventConsole_onProcess = function FEventConsole_onProcess(){
   var o = this;
   var es = o._events;
   if(es.isEmpty()){
      return;
   }
   var ps = o._processEvents;
   ps.assign(es);
   es.clear();
   var c = ps.count();
   if(c > 0){
      for(var i = 0; i < c; i++){
         ps.get(i).process();
      }
      ps.clear();
   }
}
MO.FEventConsole_construct = function FEventConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._processEvents = new MO.TObjects();
   o._events = new MO.TObjects();
   var thread = o._thread = MO.Class.create(MO.FThread);
   thread.setInterval(o._interval);
   thread.lsnsProcess.register(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(thread);
}
MO.FEventConsole_register = function FEventConsole_register(po, pc){
   var o = this;
   var e = MO.Class.create(FEvent);
   e.owner = po;
   e.callback = pc;
   o._events.push(e);
}
MO.FEventConsole_push = function FEventConsole_push(p){
   var o = this;
   var es = o._events;
   if(!es.contains(p)){
      es.push(p);
   }
}
MO.FEventConsole_clear = function FEventConsole_clear(){
   this._events.clear();
}
MO.FHttpConsole = function FHttpConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd   = MO.EScope.Local;
   o._pool      = null;
   o.onComplete = MO.FHttpConsole_onComplete;
   o.construct  = MO.FHttpConsole_construct;
   o.create     = MO.FHttpConsole_create;
   o.alloc      = MO.FHttpConsole_alloc;
   o.free       = MO.FHttpConsole_free;
   o.send       = MO.FHttpConsole_sendAsync;
   o.sendSync   = MO.FHttpConsole_sendSync;
   o.sendAsync  = MO.FHttpConsole_sendAsync;
   o.fetch      = MO.FHttpConsole_fetchAsync;
   o.fetchSync  = MO.FHttpConsole_fetchSync;
   o.fetchAsync = MO.FHttpConsole_fetchAsync;
   o.dispose    = MO.FHttpConsole_dispose;
   return o;
}
MO.FHttpConsole_onComplete = function FHttpConsole_onComplete(event){
   var o = this;
   var connection = event.connection;
   o._pool.free(connection);
}
MO.FHttpConsole_construct = function FHttpConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._pool = MO.Class.create(MO.FObjectPool);
}
MO.FHttpConsole_create = function FHttpConsole_create(){
   return MO.Class.create(MO.FHttpConnection);
}
MO.FHttpConsole_alloc = function FHttpConsole_alloc(clazz){
   var o = this;
   var pool = o._pool;
   if(!pool.hasFree()){
      o._pool.push(o.create());
   }
   var connection = pool.alloc();
   connection.reset();
   connection.addCompleteListener(o, o.onComplete);
   return connection;
}
MO.FHttpConsole_free = function FHttpConsole_free(connection){
   this._pool.free(connection);
}
MO.FHttpConsole_sendSync = function FHttpConsole_sendSync(url, data){
   var o = this;
   var connection = o.alloc();
   connection._asynchronous = false;
   connection.send(url, data);
   return connection.content();
}
MO.FHttpConsole_sendAsync = function FHttpConsole_sendAsync(url, data){
   var o = this;
   var connection = o.alloc();
   connection._asynchronous = true;
   connection.send(url, data);
   return connection;
}
MO.FHttpConsole_fetchSync = function FHttpConsole_fetchSync(url, data){
   var o = this;
   var connection = o.alloc();
   connection._asynchronous = false;
   connection._contentCd = MO.EHttpContent.Text;
   connection.send(url, data);
   return connection.content();
}
MO.FHttpConsole_fetchAsync = function FHttpConsole_fetchAsync(url, data){
   var o = this;
   var connection = o.alloc();
   connection._asynchronous = true;
   connection._contentCd = MO.EHttpContent.Text;
   connection.send(url, data);
   return connection;
}
MO.FHttpConsole_dispose = function FHttpConsole_dispose(){
   var o = this;
   o.__base.FConsole.dispose.call(o);
}
MO.FIdleConsole = function FIdleConsole(o){
   o = MO.Class.inherits(this, o, FConsole);
   o.scope    = MO.EScope.Page;
   o.register = MO.FIdleConsole_register;
   return o;
}
MO.FIdleConsole_register = function FIdleConsole_register(c, cFun){
   var o = this;
   o.active = new TActive(c, cFun);
   o.active.interval = 100;
   RConsole.find(FActiveConsole).push(o.active);
}
MO.FIdleConsole_construct = function FIdleConsole_construct(){
   var o = this;
}
MO.FJsonConsole = function FJsonConsole(o){
   o = MO.Class.inherits(this, o, MO.FHttpConsole);
   o.create = MO.FJsonConsole_create;
   return o;
}
MO.FJsonConsole_create = function FJsonConsole_create(){
   return MO.Class.create(MO.FJsonConnection);
}
MO.FLoggerConsole = function FLoggerConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd   = MO.EScope.Global;
   o._socket    = null;
   o.onOutput   = MO.FLoggerConsole_onOutput;
   o.construct  = MO.FLoggerConsole_construct;
   o.connect    = MO.FLoggerConsole_connect;
   o.output     = MO.FLoggerConsole_output;
   o.disconnect = MO.FLoggerConsole_disconnect;
   o.dispose    = MO.FLoggerConsole_dispose;
   return o;
}
MO.FLoggerConsole_onOutput = function FLoggerConsole_onOutput(event){
   var message = event.message;
   this.output(message);
}
MO.FLoggerConsole_construct = function FLoggerConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   MO.Logger.lsnsOutput.register(o, o.onOutput);
}
MO.FLoggerConsole_connect = function FLoggerConsole_connect(url){
   var o = this;
   var socket = o._socket = MO.Class.create(MO.FBufferedSocket);
   socket.connect(url);
}
MO.FLoggerConsole_output = function FLoggerConsole_output(message){
   var socket = this._socket;
   if(socket){
      var url = window.location.toString();
      socket.push('[' + url + '] - ' + message);
      socket.process();
   }
}
MO.FLoggerConsole_disconnect = function FLoggerConsole_disconnect(){
   var socket = this._socket;
   if(socket){
      socket.close();
   }
}
MO.FLoggerConsole_dispose = function FLoggerConsole_dispose(){
   var o = this;
   o._socket = MO.Lang.Object.dispose(o._socket);
   o.__base.FConsole.dispose.call(o);
}
MO.FMonitorConsole = function FMonitorConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o.scope      = MO.EScope.Global;
   o.working    = false;
   o.interval   = 10;
   o.intervalId = null;
   o.monitors   = new MO.TList();
   o.hWindow    = null;
   o.doInterval = MO.FMonitorConsole_doInterval;
   o.push       = MO.FMonitorConsole_push;
   o.process    = MO.FMonitorConsole_process;
   o.processAll = MO.FMonitorConsole_processAll;
   o.startup    = MO.FMonitorConsole_startup;
   o.wait       = MO.FMonitorConsole_wait;
   o.release    = MO.FMonitorConsole_release;
   return o;
}
MO.FMonitorConsole_push = function FMonitorConsole_push(monitor){
   this.startup();
   monitor.id = this.monitors.sync(monitor);
   monitor.name = 'T:' + MO.Lang.String.lpad(monitor.id, 4, '0');
   monitor.status = EMonitor.Active;
}
MO.FMonitorConsole_process = function FMonitorConsole_process(monitor){
   if(monitor){
      switch(monitor.status){
         case MO.EMonitor.Sleep:
            break;
         case MO.EMonitor.Active:
            monitor.process(this.interval);
            break;
         case MO.EMonitor.Cancel:
            this.monitors.removeItem(monitor);
            break;
      }
   }
}
MO.FMonitorConsole_processAll = function FMonitorConsole_processAll(){
   this.working = true;
   var monitors = this.monitors;
   for(var n = 0; n < monitors.count; n++){
      this.process(monitors.get(n));
   }
   this.working = false;
}
MO.FMonitorConsole_doInterval = function FMonitorConsole_doInterval(){
   var con = MO.RGlobal.get(FMonitorConsole);
   if(con && !con.working){
      con.processAll();
   }
}
MO.FMonitorConsole_startup = function FMonitorConsole_startup(){
   if(!this.hWindow){
      this.hWindow = window;
      debugger;
      this.intervalId = this.hWindow.setInterval(this.doInterval, this.interval);
   }
}
MO.FMonitorConsole_wait = function FMonitorConsole_wait(request){
}
MO.FMonitorConsole_release = function FMonitorConsole_release(){
   if(this.hWindow && this.intervalId){
      this.hWindow.clearInterval(this.intervalId);
   }
}
MO.FMouseConsole = function FMouseConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd       = MO.EScope.Local;
   o._activeCapture = null;
   o.onMouseDown    = MO.FMouseConsole_onMouseDown;
   o.onMouseMove    = MO.FMouseConsole_onMouseMove;
   o.onMouseUp      = MO.FMouseConsole_onMouseUp;
   o.construct      = MO.FMouseConsole_construct;
   o.captureStart   = MO.FMouseConsole_captureStart;
   o.capture        = MO.FMouseConsole_capture;
   o.captureStop    = MO.FMouseConsole_captureStop;
   o.register       = MO.FMouseConsole_register;
   o.unregister     = MO.FMouseConsole_unregister;
   o.clear          = MO.FMouseConsole_clear;
   return o;
}
MO.FMouseConsole_onMouseDown = function FMouseConsole_onMouseDown(p){
   var o = this;
   var s = MO.RHtml.searchLinker(p.hSource, MO.MMouseCapture);
   if(!s){
      return;
   }
   if(!s.testMouseCapture()){
      return;
   }
   o._activeCapture = s;
   o.captureStart(p);
}
MO.FMouseConsole_onMouseMove = function FMouseConsole_onMouseMove(p){
   var o = this;
   if(!o._activeCapture){
      return;
   }
   o.capture(p);
}
MO.FMouseConsole_onMouseUp = function FMouseConsole_onMouseUp(p){
   var o = this;
   if(!o._activeCapture){
      return;
   }
   o.captureStop(p);
}
MO.FMouseConsole_construct = function FMouseConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   MO.RWindow.lsnsMouseDown.register(o, o.onMouseDown);
   MO.RWindow.lsnsMouseMove.register(o, o.onMouseMove);
   MO.RWindow.lsnsMouseUp.register(o, o.onMouseUp);
}
MO.FMouseConsole_captureStart = function FMouseConsole_captureStart(p){
   var o = this;
   var c = o._activeCapture;
   if(c){
      MO.RWindow.setOptionSelect(false);
      c.onMouseCaptureStart(p);
   }
}
MO.FMouseConsole_capture = function FMouseConsole_capture(p){
   var o = this;
   var c = o._activeCapture;
   if(c){
      if(c.testMouseCapture()){
         c.onMouseCapture(p);
      }else{
         o.captureStop(p)
      }
   }
}
MO.FMouseConsole_captureStop = function FMouseConsole_captureStop(p){
   var o = this;
   var c = o._activeCapture;
   if(c){
      c.onMouseCaptureStop(p);
      o._activeCapture = null;
   }
   MO.RWindow.setOptionSelect(true);
}
MO.FMouseConsole_register = function FMouseConsole_register(p){
}
MO.FMouseConsole_unregister = function FMouseConsole_unregister(p){
}
MO.FMouseConsole_clear = function FMouseConsole_clear(){
}
MO.FPipeline = function FPipeline(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._code = MO.Class.register(o, new MO.AGetter('_code'));
   return o;
}
MO.FProcess = function FProcess(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._name     = MO.Class.register(o, new MO.AGetter('_name'));
   o._source   = null;
   o._worker   = null;
   o._events   = null;
   o.ohMessage = MO.FProcess_ohMessage;
   o.onMessage = MO.FProcess_onMessage;
   o.construct = MO.FProcess_construct;
   o.name      = MO.FProcess_name;
   o.start     = MO.FProcess_start;
   o.process   = MO.FProcess_process;
   return o;
}
MO.FProcess_ohMessage = function FProcess_ohMessage(){
   var o = this.__linker;
   o.onMessage(this);
}
MO.FProcess_onMessage = function FProcess_onMessage(p){
}
MO.FProcess_construct = function FProcess_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._events = new MO.TObjects();
}
MO.FProcess_start = function FProcess_start(p){
   var o = this;
   if(o._worker){
      throw new MO.TError(o, 'Process is already start.');
   }
   o._source = p;
   var w = o._worker = new Worker(p);
   w.__linker = o;
   w.onmessage = o.ohMessage;
}
MO.FProcess_process = function FProcess_process(p){
   var o = this;
   var es = o._events;
   var c = es.count();
   es.push(p);
   var e = new MO.SProcessEvent();
   e.index = c;
   e.code = p.code();
   e.data = p.data();
   o._worker.postMessage(e);
}
MO.FProcessConsole = function FProcessConsole(o){
   o = MO.Class.inherits(this, o, FConsole);
   o._scopeCd     = MO.EScope.Local;
   o._connections = null;
   o.onLoad       = MO.FProcessConsole_onLoad;
   o.construct    = MO.FProcessConsole_construct;
   o.alloc        = MO.FProcessConsole_alloc;
   o.process      = MO.FProcessConsole_process;
   o.send         = MO.FProcessConsole_send;
   return o;
}
MO.FProcessConsole_construct = function FProcessConsole_construct(){
   var o = this;
   o._connections = new MO.TObjects();
}
MO.FProcessConsole_onLoad = function FProcessConsole_onLoad(){
   var o = this;
   var e = o.event;
   e.document = o.document;
   e.process();
   o.event = null;
   o.document = null;
   o._statusFree = true;
}
MO.FProcessConsole_alloc = function FProcessConsole_alloc(){
   var o = this;
   var a = null;
   var cs = o._connections;
   for(var n = cs.count - 1; n >= 0; n--){
      var c = cs.get(n);
      if(c._statusFree){
         a = c;
         break;
      }
   }
   if(!a){
      a = MO.Class.create(MO.FXmlConnection);
      cs.push(a);
      a.onLoad = o.onLoad;
   }
   a._statusFree = false;
   return a;
}
MO.FProcessConsole_process = function FProcessConsole_process(e){
   var o = this;
   var c = o.alloc();
   c.event = e;
   switch(e.code){
      case MO.EXmlEvent.Send:
         c.send(e.url, e.document);
         break;
      case MO.EXmlEvent.Receive:
         c.receive(e.url, e.document);
         break;
      case MO.EXmlEvent.SyncSend:
         return c.syncSend(e.url, e.document);
      case MO.EXmlEvent.SyncReceive:
         return c.syncReceive(e.url, e.document);
   }
}
MO.FProcessConsole_send = function FProcessConsole_send(u, d){
   var o = this;
   var c = o.alloc();
   var r = c.syncSend(u, d);
   c._statusFree = true;
   return r;
}
MO.FProcessEvent = function FProcessEvent(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._code      = MO.Class.register(o, new MO.AGetSet('_code'));
   o._data      = MO.Class.register(o, new MO.AGetSet('_data'));
   o._listeners = null;
   o.register   = MO.FProcessEvent_register;
   return o;
}
MO.FProcessEvent_register = function FProcessEvent_register(owner, callback){
   var o = this;
   if(!o._listeners){
      o._listeners = new MO.TListeners();
   }
   o._listeners.register(owner, callback);
}
MO.FProcessor = function FProcessor(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._name     = MO.Class.register(o, new MO.AGetter('_name'));
   o._source   = null;
   o._worker   = null;
   o._events   = null;
   o.ohMessage = MO.FProcessor_ohMessage;
   o.onMessage = MO.FProcessor_onMessage;
   o.construct = MO.FProcessor_construct;
   o.start     = MO.FProcessor_start;
   o.process   = MO.FProcessor_process;
   return o;
}
MO.FProcessor_ohMessage = function FProcessor_ohMessage(){
   var o = this.__linker;
   o.onMessage(this);
}
MO.FProcessor_onMessage = function FProcessor_onMessage(p){
}
MO.FProcessor_construct = function FProcessor_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._events = new MO.TObjects();
}
MO.FProcessor_start = function FProcessor_start(p){
   var o = this;
   if(o._worker){
      throw new MO.TError(o, 'Process is already start.');
   }
   o._source = p;
   var w = o._worker = new Worker(p);
   w.__linker = o;
   w.onmessage = o.ohMessage;
}
MO.FProcessor_process = function FProcessor_process(p){
   var o = this;
   var es = o._events;
   var c = es.count();
   es.push(p);
   var event = new MO.SProcessEvent();
   event.index = c;
   event.code = p.code();
   event.data = p.data();
   o._worker.postMessage(event);
}
MO.FProcessServer = function FProcessServer(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._name               = MO.Class.register(o, new MO.AGetSet('_name'));
   o._handle             = null;
   o._processors         = null;
   o.ohInterval          = MO.FProcessServer_ohInterval;
   o.onInterval          = MO.FProcessServer_onInterval;
   o.ohMessage           = MO.FProcessServer_ohMessage;
   o.onMessage           = MO.FProcessServer_onMessage;
   o.construct           = MO.FProcessServer_construct;
   o.registerProcessor   = MO.FProcessServer_registerProcessor;
   o.unregisterProcessor = MO.FProcessServer_unregisterProcessor;
   o.send                = MO.FProcessServer_send;
   o.process             = MO.FProcessServer_process;
   return o;
}
MO.FProcessServer_ohInterval = function FProcessServer_ohInterval(){
   MO.FProcessServer.__linker.onInterval();
}
MO.FProcessServer_onInterval = function FProcessServer_onInterval(){
   var o = this;
}
MO.FProcessServer_ohMessage = function FProcessServer_ohMessage(p){
   MO.FProcessServer.__linker.onMessage(p.data);
}
MO.FProcessServer_onMessage = function FProcessServer_onMessage(p){
   var o = this;
   console.log('messgae', this, p);
}
MO.FProcessServer_construct = function FProcessServer_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._processors = new MO.TDictionary();
}
MO.FProcessServer_registerProcessor = function FProcessServer_registerProcessor(c, p){
   this._processors.set(c, p);
}
MO.FProcessServer_unregisterProcessor = function FProcessServer_unregisterProcessor(c){
   this._processors.set(c, null);
}
MO.FProcessServer_send = function FProcessServer_send(p){
   var o = this;
   postMessage(p);
}
MO.FProcessServer_process = function FProcessServer_process(){
   var o = this;
   onmessage = o.ohMessage;
   FProcessServer.__linker = o;
}
MO.FServiceConsole = function FServiceConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd  = MO.EScope.Global;
   o.construct = MO.FServiceConsole_construct;
   o.send      = MO.FServiceConsole_send;
   o.dispose   = MO.FServiceConsole_dispose;
   return o;
}
MO.FServiceConsole_onLoad = function FServiceConsole_onLoad(connection){
   var o = this;
   o._pool.free(connection);
}
MO.FServiceConsole_construct = function FServiceConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
}
MO.FServiceConsole_send = function FServiceConsole_send(code, action, content){
   var o = this;
   var uri = '/' + code + '.ws?action=' + action;
   var url = MO.Window.Browser.hostPath(uri);
   var connection = MO.Console.find(MO.FXmlConsole).sendAsync(url, content);
   return connection;
}
MO.FServiceConsole_dispose = function FServiceConsole_dispose(){
   var o = this;
   o.__base.FConsole.dispose.call(o);
}
MO.FStatistics = function FStatistics(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._code      = null;
   o.reset      = MO.FStatistics_reset;
   o.resetFrame = MO.FStatistics_resetFrame;
   return o;
}
MO.FStatistics_reset = function FStatistics_reset(){
}
MO.FStatistics_resetFrame = function FStatistics_resetFrame(){
}
MO.FStatisticsConsole = function FStatisticsConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd      = MO.EScope.Local;
   o._statisticses = MO.Class.register(o, new MO.AGetter('_statisticses'));
   o.construct     = MO.FStatisticsConsole_construct;
   o.register      = MO.FStatisticsConsole_register;
   o.unregister    = MO.FStatisticsConsole_unregister;
   o.find          = MO.FStatisticsConsole_find;
   o.reset         = MO.FStatisticsConsole_reset;
   o.resetFrame    = MO.FStatisticsConsole_resetFrame;
   return o;
}
MO.FStatisticsConsole_construct = function FStatisticsConsole_construct(){
   var o = this;
   o._statisticses = new MO.TDictionary();
}
MO.FStatisticsConsole_register = function FStatisticsConsole_register(n, s){
   this._statisticses.set(n, s);
}
MO.FStatisticsConsole_unregister = function FStatisticsConsole_unregister(n){
   return this._statisticses.remove(n);
}
MO.FStatisticsConsole_find = function FStatisticsConsole_find(n){
   return this._statisticses.get(n);
}
MO.FStatisticsConsole_reset = function FStatisticsConsole_reset(e){
   var statisticses = this._statisticses;
   for(var i = statisticses.count() - 1; i >= 0; i--){
      statisticses.at(i).reset();
   }
}
MO.FStatisticsConsole_resetFrame = function FStatisticsConsole_resetFrame(u, d){
   var statisticses = this._statisticses;
   for(var i = statisticses.count() - 1; i >= 0; i--){
      statisticses.at(i).resetFrame();
   }
}
MO.FThread = function FThread(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListenerProcess);
   o._name       = MO.Class.register(o, new MO.AGetter('_name'));
   o._statusCd   = MO.Class.register(o, new MO.AGetter('_statusCd'), MO.EThreadStatus.Sleep);
   o._interval   = MO.Class.register(o, new MO.AGetSet('_interval'), 100);
   o._delay      = 0;
   o.construct   = MO.FThread_construct;
   o.start       = MO.FThread_start;
   o.stop        = MO.FThread_stop;
   o.process     = MO.FThread_process;
   return o;
}
MO.FThread_construct = function FThread_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.FThread_start = function FThread_start(){
   this._statusCd = MO.EThreadStatus.Active;
}
MO.FThread_stop = function FThread_stop(){
   this._statusCd = MO.EThreadStatus.Finish;
}
MO.FThread_process = function FThread_process(interval){
   var o = this;
   if(o._delay <= 0){
      o.processProcessListener(o);
      o._delay = o._interval;
   }else{
      o._delay -= interval;
   }
}
MO.FThreadConsole = function FThreadConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd     = MO.EScope.Global;
   o._active      = true;
   o._requestFlag = false;
   o._interval    = 5;
   o._threads     = MO.Class.register(o, new MO.AGetter('_threads'));
   o._hIntervalId = null;
   o.ohInterval   = MO.FThreadConsole_ohInterval;
   o.construct    = MO.FThreadConsole_construct;
   o.push         = MO.FThreadConsole_push;
   o.start        = MO.FThreadConsole_start;
   o.process      = MO.FThreadConsole_process;
   o.processAll   = MO.FThreadConsole_processAll;
   o.dispose      = MO.FThreadConsole_dispose;
   return o;
}
MO.FThreadConsole_ohInterval = function FThreadConsole_ohInterval(){
   var threadConsole = MO.Console.find(MO.FThreadConsole);
   threadConsole.processAll();
}
MO.FThreadConsole_push = function FThreadConsole_push(thread){
   this._threads.push(thread);
}
MO.FThreadConsole_start = function FThreadConsole_start(thread){
   thread.start();
   this._threads.push(thread);
}
MO.FThreadConsole_construct = function FThreadConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._threads = new MO.TObjects();
      o._hIntervalId = MO.Window.htmlWindow().setInterval(o.ohInterval, o._interval);
}
MO.FThreadConsole_process = function FThreadConsole_process(thread){
   var o = this;
   if(thread){
      var statusCd = thread.statusCd();
      switch(statusCd){
         case MO.EThreadStatus.Sleep:
            break;
         case MO.EThreadStatus.Active:
            thread.process(o._interval);
            break;
         case MO.EThreadStatus.Finish:
            o._threads.remove(thread);
            thread.dispose();
            break;
      }
   }
}
MO.FThreadConsole_processAll = function FThreadConsole_processAll(){
   var o = this;
   if(o._active){
      var threads = o._threads;
      var count = threads.count();
      try{
         for(var i = 0; i < count; i++){
            var thread = threads.at(i);
            o.process(thread);
         }
      }catch(error){
         MO.Logger.fatal(o, error, 'Thread process failure. (thread_count={1})', count);
      }
   }
   if(o._requestFlag){
      MO.Window.requestAnimationFrame(o.ohInterval);
   }
}
MO.FThreadConsole_dispose = function FThreadConsole_dispose(){
   var o = this;
   if(o._requestFlag){
      MO.Window.cancelRequestAnimationFrame(o.ohInterval);
   }else{
      var hIntervalId = o._hIntervalId;
      if(hIntervalId){
         MO.Window.htmlWindow().clearInterval(hIntervalId);
         o._hIntervalId = null;
      }
   }
   o._threads = MO.Lang.Object.dispose(o._threads);
   o.__base.FConsole.dispose.call(o);
}
MO.FTimeConsole = function FTimeConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd  = MO.EScope.Global;
   o._date     = null;
   o.construct = MO.FTimeConsole_construct;
   o.dispose   = MO.FTimeConsole_dispose;
   return o;
}
MO.FTimeConsole_construct = function FTimeConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
}
MO.FTimeConsole_dispose = function FTimeConsole_dispose(){
   var o = this;
   o.__base.FConsole.dispose.call(o);
}
MO.FXmlConsole = function FXmlConsole(o){
   o = MO.Class.inherits(this, o, MO.FHttpConsole);
   o.create = MO.FXmlConsole_create;
   return o;
}
MO.FXmlConsole_create = function FXmlConsole_create(){
   return MO.Class.create(MO.FXmlConnection);
}
MO.EBrowser = new function EBrowser(){
   var o = this;
   o.Unknown = 'unknown';
   o.Explorer = 'explorer';
   o.FireFox = 'firefox';
   o.Chrome = 'chrome';
   o.Safari = 'safari';
   return o;
}
MO.EDevice = new function EDevice(){
   var o = this;
   o.Unknown = 'unknown';
   o.Pc = 'pc';
   o.Mobile = 'mobile';
   return o;
}
MO.ESoftware = new function ESoftware(){
   var o = this;
   o.Unknown = 'unknown';
   o.Window = 'window';
   o.Linux = 'linux';
   o.Android = 'android';
   o.Apple = 'apple';
   return o;
}
MO.RWindow = function RWindow(){
   var o = this;
   o._optionSelect     = true;
   o._statusError      = false;
   o._statusEnable     = true;
   o._disableDeep      = 0;
   o._cookies          = new MO.TAttributes();
   o._localStorage     = null;
   o._sessionStorage   = null;
   o._eventMouse       = new MO.SMouseEvent();
   o._eventKey         = new MO.SKeyboardEvent();
   o._eventResize      = new MO.SResizeEvent();
   o._eventVisibility  = new MO.SEvent();
   o._eventOrientation = new MO.SEvent();
   o._eventUnload      = new MO.SEvent();
   o._hWindow          = null;
   o._hDocument        = null;
   o._hContainer       = null;
   o._hDisablePanel    = null;
   o._hDisableImage    = null;
   o.lsnsLoad          = new MO.TListeners();
   o.lsnsLoaded        = new MO.TListeners();
   o.lsnsUnload        = new MO.TListeners();
   o.lsnsMouseDown     = new MO.TListeners();
   o.lsnsMouseUp       = new MO.TListeners();
   o.lsnsMouseOver     = new MO.TListeners();
   o.lsnsMouseMove     = new MO.TListeners();
   o.lsnsMouseWheel    = new MO.TListeners();
   o.lsnsKeyDown       = new MO.TListeners();
   o.lsnsKeyUp         = new MO.TListeners();
   o.lsnsKeyPress      = new MO.TListeners();
   o.lsnsResize        = new MO.TListeners();
   o.lsnsVisibility    = new MO.TListeners();
   o.lsnsOrientation   = new MO.TListeners();
   o.lsnsDeviceError   = new MO.TListeners();
   return o;
}
MO.RWindow.prototype.ohMouseDown = function RWindow_ohMouseDown(hEvent){
   var o = MO.Window;
   if(!hEvent){
      hEvent = o._hWindow.event;
   }
   var event = o._eventMouse;
   event.code = MO.EEvent.MouseDown;
   event.attachEvent(hEvent);
   o.lsnsMouseDown.process(event);
}
MO.RWindow.prototype.ohMouseMove = function RWindow_ohMouseMove(hEvent){
   var o = MO.Window;
   if(!hEvent){
      hEvent = o._hWindow.event;
   }
   var event = o._eventMouse;
   event.code = MO.EEvent.MouseMove;
   event.attachEvent(hEvent);
   o.lsnsMouseMove.process(event);
}
MO.RWindow.prototype.ohMouseUp = function RWindow_ohMouseUp(hEvent){
   var o = MO.Window;
   if(!hEvent){
      hEvent = o._hWindow.event;
   }
   var event = o._eventMouse;
   event.code = MO.EEvent.MouseUp;
   event.attachEvent(hEvent);
   o.lsnsMouseUp.process(event);
}
MO.RWindow.prototype.ohMouseWheel = function RWindow_ohMouseWheel(hEvent){
   var o = MO.Window;
   if(!hEvent){
      hEvent = o._hWindow.event;
   }
   var event = o._eventMouse;
   event.code = MO.EEvent.MouseWheel;
   event.attachEvent(hEvent);
   o.lsnsMouseWheel.process(event);
}
MO.RWindow.prototype.ohKeyDown = function RWindow_ohKeyDown(hEvent){
   var o = MO.Window;
   if(!hEvent){
      hEvent = o._hWindow.event;
   }
   var event = o._eventKey;
   event.code = MO.EEvent.KeyDown;
   event.attachEvent(hEvent);
   o.lsnsKeyDown.process(event);
}
MO.RWindow.prototype.ohKeyUp = function RWindow_ohKeyUp(hEvent){
   var o = MO.Window;
   if(!hEvent){
      hEvent = o._hWindow.event;
   }
   var event = o._eventKey;
   event.code = MO.EEvent.KeyUp;
   event.attachEvent(hEvent);
   o.lsnsKeyUp.process(event);
}
MO.RWindow.prototype.ohKeyPress = function RWindow_ohKeyPress(hEvent){
   var o = MO.Window;
   if(!hEvent){
      hEvent = o._hWindow.event;
   }
   var event = o._eventKey;
   event.code = MO.EEvent.KeyPress;
   event.attachEvent(hEvent);
   o.lsnsKeyPress.process(event);
}
MO.RWindow.prototype.ohResize = function RWindow_ohResize(hEvent){
   var o = MO.Window;
   if(!hEvent){
      hEvent = o._hWindow.event;
   }
   var event = o._eventResize;
   event.code = MO.EEvent.Resize;
   event.attachEvent(hEvent);
   o.lsnsResize.process(event);
}
MO.RWindow.prototype.ohSelect = function RWindow_ohSelect(event){
   return MO.Window._optionSelect;
}
MO.RWindow.prototype.ohVisibility = function RWindow_ohVisibility(hEvent){
   var o = MO.Window;
   var visibility = MO.Window.Browser.isVisibility();
   var event = o._eventVisibility;
   event.visibility = visibility;
   o.lsnsVisibility.process(event);
}
MO.RWindow.prototype.ohOrientation = function RWindow_ohOrientation(hEvent){
   var o = MO.Window;
   var orientationCd = o.Browser.refreshOrientation();
   var event = o._eventOrientation;
   event.orientationCd = orientationCd;
   o.lsnsOrientation.process(event);
}
MO.RWindow.prototype.ohUnload = function RWindow_ohUnload(event){
   var o = MO.Window;
   var event = o._eventUnload;
   o.lsnsUnload.process(event);
   o.dispose();
}
MO.RWindow.prototype.connect = function RWindow_connect(hWindow){
   var o = this;
   o._eventVisibility.code = MO.EEvent.Visibility;
   o._eventOrientation.code = MO.EEvent.Orientation;
   var hWindow = o._hWindow = hWindow;
   var hDocument = o._hDocument = hWindow.document;
   var hContainer = o._hContainer = hDocument.body;
   var visibilitychange = MO.Window.Browser.defineEventGet('visibilitychange');
   if(MO.Window.Browser.supportHtml5()){
      hContainer.addEventListener('mousedown', o.ohMouseDown, true);
      hContainer.addEventListener('mousemove', o.ohMouseMove, true);
      hContainer.addEventListener('mouseup', o.ohMouseUp, true);
      hContainer.addEventListener('mousewheel', o.ohMouseWheel, true);
      hContainer.addEventListener('keydown', o.ohKeyDown, true);
      hContainer.addEventListener('keyup', o.ohKeyUp, true);
      hContainer.addEventListener('keypress', o.ohKeyPress, true);
      hDocument.addEventListener(visibilitychange, o.ohVisibility, true);
   }else{
      hContainer.onmousedown = o.ohMouseDown;
      hContainer.onmousemove = o.ohMouseMove;
      hContainer.onmouseup = o.ohMouseUp;
      hContainer.onmousewheel = o.ohMouseWheel;
      hContainer.onkeydown = o.ohKeyDown;
      hContainer.onkeyup = o.ohKeyUp;
      hContainer.onkeypress = o.ohKeyPress;
      hDocument['on' + visibilitychange] = o.ohVisibility;
   }
   hWindow.onorientationchange = o.ohOrientation;
   hContainer.onresize = o.ohResize;
   hContainer.onselectstart = o.ohSelect;
   hContainer.onunload = o.ohUnload;
   o._cookies.split(hDocument.cookie, '=', ';');
   o._requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
   o._cancelAnimationFrame = window.cancelRequestAnimationFrame || window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame;
}
MO.RWindow.prototype.htmlWindow = function RWindow_htmlWindow(){
   return this._hWindow;
}
MO.RWindow.prototype.optionSelect = function RWindow_optionSelect(){
   return this._optionSelect;
}
MO.RWindow.prototype.setOptionSelect = function RWindow_setOptionSelect(select){
   var o = this;
   o._optionSelect = select;
   if(MO.Window.Browser.isBrowser(MO.EBrowser.FireFox)){
      o._hContainer.style.MozUserSelect = select ? '' : 'none';
   }
}
MO.RWindow.prototype.statusError = function RWindow_statusError(){
   return this._statusError;
}
MO.RWindow.prototype.setStatusError = function RWindow_setStatusError(value){
   this._statusError = value;
}
MO.RWindow.prototype.processDeviceError = function RWindow_processDeviceError(event){
   var o = this;
   o._statusError = true;
   o.lsnsDeviceError.process(event);
}
MO.RWindow.prototype.setCaption = function RWindow_setCaption(value){
   top.document.title = MO.Lang.String.nvl(value);
}
MO.RWindow.prototype.setStatus = function RWindow_setStatus(value){
   window.status = MO.Lang.String.nvl(value);
}
MO.RWindow.prototype.cookies = function RWindow_cookies(){
   return this._cookies;
}
MO.RWindow.prototype.cookie = function RWindow_cookie(name){
   return this._cookies.get(name);
}
MO.RWindow.prototype.storage = function RWindow_storage(scopeCd){
   var o = this;
   switch(scopeCd){
      case MO.EScope.Local:
         var storage = o._localStorage;
         if(!storage){
            storage = o._localStorage = MO.Class.create(MO.FWindowStorage);
            storage.link(window.localStorage);
         }
         return storage;
      case MO.EScope.Session:
         var storage = o._sessionStorage;
         if(!storage){
            storage = o._sessionStorage = MO.Class.create(MO.FWindowStorage);
            storage.link(window.sessionStorage);
         }
         return storage;
   }
   throw new TError(o, 'Unknown scope. (scope_cd={1})', scopeCd);
}
MO.RWindow.prototype.makeDisablePanel = function RWindow_makeDisablePanel(f){
   var o = this;
   var hPanel = o._hDisablePanel;
   if(!hPanel){
      hPanel = o._hDisablePanel = MO.Window.Builder.createDiv(o._hDocument, 'RWindow_Disable');
      hPanel.style.zIndex = 5000;
   }
   var hImage = o._hDisableImage;
   if(!hImage){
      hImage = o._hDisableImage = MO.Window.Builder.appendIcon(hPanel);
      hImage.src = MO.RResource.iconPath('control.RWindow_Loading');
      hImage.style.margin = o._hContainer.offsetHeight / 2;
      hImage.style.display = 'none';
   }
   MO.Window.Html.visibleSet(hImage, f);
   return hPanel;
}
MO.RWindow.prototype.windowDisable = function RWindow_windowDisable(){
   this._hContainer.disabled = true;
}
MO.RWindow.prototype.windowEnable = function RWindow_windowEnable(){
   this._hContainer.disabled = false;
}
MO.RWindow.prototype.isEnable = function RWindow_isEnable(){
   return this._statusEnable;
}
MO.RWindow.prototype.enable = function RWindow_enable(){
   var o = this;
   o._disableDeep--;
   if(o._disableDeep == 0){
      o.setEnable(true);
   }
}
MO.RWindow.prototype.disable = function RWindow_disable(){
   var o = this;
   if(o._disableDeep == 0){
      o.setEnable(false);
   }
   o._disableDeep++;
}
MO.RWindow.prototype.setEnable = function RWindow_setEnable(v, f){
   var o = this;
   var h = o.makeDisablePanel(f);
   var st = h.style;
   if(!v){
      var hd = o._hDocument;
      var s = o._hDisablePanel.style;
      s.left = '0px';
      s.top = '0px';
      s.width = (hd.all ? o._hContainer.scrollWidth : hd.documentElement.scrollWidth) + 'px';
      s.height = (hd.all ? o._hContainer.scrollHeight : hd.documentElement.scrollHeight) + 'px';
      if(!h._linked){
         o._hContainer.appendChild(h);
         h._linked = true;
      }
   }else{
      o.windowEnable();
      if(h._linked){
         o._hContainer.removeChild(h);
         h._linked = false;
      }
   }
   o._statusEnable = v;
}
MO.RWindow.prototype.appendElement = function RWindow_appendElement(hPanel){
   this._hContainer.appendChild(hPanel);
}
MO.RWindow.prototype.requestAnimationFrame = function RWindow_requestAnimationFrame(callback){
   var method = this._requestAnimationFrame;
   if(method){
      method(callback);
      return true;
   }
   return false;
}
MO.RWindow.prototype.cancelRequestAnimationFrame = function RWindow_cancelRequestAnimationFrame(callback){
   var method = this._cancelAnimationFrame;
   if(method){
      method(callback);
      return true;
   }
   return false;
}
MO.RWindow.prototype.redirect = function RWindow_redirect(){
}
MO.RWindow.prototype.historyForward = function RWindow_historyForward(){
}
MO.RWindow.prototype.historyBack = function RWindow_historyBack(){
}
MO.RWindow.prototype.dispose = function RWindow_dispose(){
   var o = this;
   var hWindow = o._hWindow;
   var hDocument = o._hDocument;
   var hContainer = o._hContainer;
   if(MO.Window.Browser.supportHtml5()){
      hContainer.removeEventListener('mousedown', o.onMouseDown, true);
      hContainer.removeEventListener('mousemove', o.onMouseMove, true);
      hContainer.removeEventListener('mouseup', o.onMouseUp, true);
      hContainer.removeEventListener('mousewheel', o.onMouseWheel, true);
      hContainer.removeEventListener('keydown', o.onKeyDown, true);
      hContainer.removeEventListener('keyup', o.onKeyUp, true);
      hContainer.removeEventListener('keypress', o.onKeyPress, true);
      hWindow.removeEventListener('orientationchange', o.onOrientation);
   }else{
      hContainer.onmousedown = null;
      hContainer.onmousemove = null;
      hContainer.onmouseup = null;
      hContainer.onmousewheel = null;
      hContainer.onkeydown = null;
      hContainer.onkeyup = null;
      hContainer.onkeypress = null;
      hWindow.onorientationchange = null;
   }
   hContainer.onresize = null;
   hContainer.onselectstart = null;
   hContainer.onunload = null;
   o._localStorage = MO.Lang.Object.dispose(o._localStorage);
   o._sessionStorage = MO.Lang.Object.dispose(o._sessionStorage);
   o._hWindow = null;
   o._hDocument = null;
   o._hContainer = null;
   o._eventMouse = MO.Lang.Object.dispose(o._eventMouse);
   o._eventKey = MO.Lang.Object.dispose(o._eventKey);
   o._eventResize = MO.Lang.Object.dispose(o._eventResize);
   o._eventOrientation = MO.Lang.Object.dispose(o._eventOrientation);
   o._eventUnload = MO.Lang.Object.dispose(o._eventUnload);
}
MO.RWindow = new MO.RWindow();
MO.Window = MO.RWindow;
MO.SBrowserCapability = function SBrowserCapability(){
   var o = this;
   o.optionProcess    = false;
   o.optionStorage    = false;
   o.canvasScale      = true;
   o.soundConfirm     = false;
   o.soundFinish      = true;
   o.blobCreate       = false;
   o.pixelRatio       = 1;
   return o;
}
MO.FWindowStorage = function FWindowStorage(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._scopeCd  = MO.Class.register(o, new MO.AGetter('_scopeCd'));
   o._storage  = null;
   o.link      = MO.FWindowStorage_link;
   o.get       = MO.FWindowStorage_get;
   o.set       = MO.FWindowStorage_set;
   o.remove    = MO.FWindowStorage_remove;
   o.clear     = MO.FWindowStorage_clear;
   o.dispose   = MO.FWindowStorage_dispose;
   o.innerDump = MO.FWindowStorage_innerDump;
   return o;
}
MO.FWindowStorage_link = function FWindowStorage_link(storage){
   this._storage = storage;
}
MO.FWindowStorage_get = function FWindowStorage_get(name){
   return this._storage.getItem(name);
}
MO.FWindowStorage_set = function FWindowStorage_set(name, value){
   this._storage.setItem(name, value);
}
MO.FWindowStorage_remove = function FWindowStorage_remove(name){
   this._storage.removeItem(name);
}
MO.FWindowStorage_clear = function FWindowStorage_clear(){
   this._storage.clear();
}
MO.FWindowStorage_dispose = function FWindowStorage_dispose(){
   var o = this;
   o._storage  = null;
   o.__base.FObject.dispose.call(o);
}
MO.FWindowStorage_innerDump = function FWindowStorage_innerDump(dump, level){
   var o = this;
   var storage = o._storage;
   var count = storage.length;
   for(var i = 0; i < count; i++){
      var name = storage.key(i);
      var value = storage.getItem(name);
      if(i > 0){
         dump.append(';');
      }
      dump.append(name + '=' + value);
   }
}
MO.RBrowser = function RBrowser(){
   var o = this;
   o._agent            = null;
   o._capability       = null;
   o._defineProperties = null;
   o._defineEvents     = null;
   o._defineMethods    = null;
   o._deviceCd         = MO.EDevice.Unknown;
   o._softwareCd       = MO.ESoftware.Unknown;
   o._typeCd           = MO.EBrowser.Unknown;
   o._orientationCd    = MO.EOrientation.Horizontal;
   o._supportHtml5     = false;
   o._hostPath         = '';
   o._contentPath      = '';
   return o;
}
MO.RBrowser.prototype.onLog = function RBrowser_onLog(event){
   console.log(event.message);
}
MO.RBrowser.prototype.construct = function RBrowser_construct(){
   var o = this;
   var code = o._agent = window.navigator.userAgent.toString();
   var agent = code.toLowerCase();
   var properties = o._defineProperties = new Object();
   var events = o._defineEvents = new Object();
   var methods = o._defineMethods = new Object();
   var capability = o._capability = new MO.SBrowserCapability();
   if(agent.indexOf("android") != -1){
      o._typeCd = MO.EDevice.Mobile;
      o._softwareCd = MO.ESoftware.Android;
   }
   if(agent.indexOf("chrome") != -1){
      o._typeCd = MO.EBrowser.Chrome;
   }else if(agent.indexOf("firefox") != -1){
      o._typeCd = MO.EBrowser.FireFox;
   }else if((agent.indexOf("msie") != -1) || (agent.indexOf("windows") != -1)){
      o._typeCd = MO.EBrowser.Explorer;
   }else if((agent.indexOf("safari") != -1) || (agent.indexOf("applewebkit") != -1)){
      o._typeCd = MO.EBrowser.Safari;
   }else{
      alert('Unknown browser.\n' + agent);
      return;
   }
   var platformCd = MO.EPlatform.Mobile;
   var environmentConsole = MO.Console.find(MO.FEnvironmentConsole);
   if(MO.Lang.String.contains(agent, 'android', 'ipad', 'iphone', 'midp', 'rv:1.2.3.4', 'windows ce', 'windows mobile')){
      platformCd = MO.EPlatform.Mobile;
      environmentConsole.registerValue(MO.EConstant.DeviceType, 'mb');
   }else{
      platformCd = MO.EPlatform.Pc;
      environmentConsole.registerValue(MO.EConstant.DeviceType, 'pc');
   }
   MO.Runtime.setPlatformCd(platformCd);
   if(MO.Lang.String.contains(agent, 'android 5.1', 'iphone', 'ipad')){
      capability.soundConfirm = true;
   }
   if(MO.Lang.String.contains(agent, 'mqqbrowser')){
      capability.canvasScale = false;
   }
   if(o._typeCd == MO.EBrowser.Chrome){
      MO.Logger.lsnsOutput.register(o, o.onLog);
   }
   if(window.applicationCache){
      o._supportHtml5 = true;
   }
   var external = window.external;
   if(external){
      if(external.twGetRunPath){
         if((agent.indexOf('360chrome') != -1) || (agent.indexOf('360se') != -1)){
            capability.soundFinish = false;
         }else{
            var runPath = external.twGetRunPath().toLowerCase();
            if(runPath.indexOf('360se') != -1){
               capability.soundFinish = false;
            }
         }
      }
   }
   var pixelRatio = window.devicePixelRatio;
   if(pixelRatio){
      if(MO.Runtime.isPlatformMobile()){
         capability.pixelRatio = Math.min(pixelRatio, 3);
      }
   }
   if(window.Worker){
      capability.optionProcess = true;
   }
   if(window.localStorage){
      capability.optionStorage = true;
   }
   try{
      new Blob(["Test"], {'type':'text/plain'});
      capability.blobCreate = true;
   }catch(e){
      MO.Logger.warn(o, 'Browser blob not support.');
   }
   var hDocument = window.document;
   var visibilityChange = null;
   if(typeof hDocument.hidden !== "undefined"){
      properties['hidden'] = 'hidden';
      events['visibilitychange'] = 'visibilitychange';
   } else if (typeof hDocument.mozHidden !== "undefined"){
      properties['hidden'] = 'mozHidden';
      events['visibilitychange'] = 'mozvisibilitychange';
   }else if (typeof hDocument.msHidden !== "undefined"){
      properties['hidden'] = 'msHidden';
      events['visibilitychange'] = 'msvisibilitychange';
   }else if (typeof hDocument.webkitHidden !== "undefined"){
      properties['hidden'] = 'webkitHidden';
      events['visibilitychange'] = 'webkitvisibilitychange';
   }
   o.refreshOrientation();
}
MO.RBrowser.prototype.agent = function RBrowser_agent(){
   return this._agent;
}
MO.RBrowser.prototype.capability = function RBrowser_capability(){
   return this._capability;
}
MO.RBrowser.prototype.defineProperties = function RBrowser_defineProperties(){
   return this._defineProperties;
}
MO.RBrowser.prototype.definePropertyGet = function RBrowser_definePropertyGet(name){
   return this._defineProperties[name];
}
MO.RBrowser.prototype.defineEvents = function RBrowser_defineEvents(){
   return this._defineEvents;
}
MO.RBrowser.prototype.defineEventGet = function RBrowser_defineEventGet(name){
   return this._defineEvents[name];
}
MO.RBrowser.prototype.defineMethods = function RBrowser_defineMethods(){
   return this._defineMethods;
}
MO.RBrowser.prototype.defineMethodGet = function RBrowser_defineMethodGet(name){
   return this._defineMethods[name];
}
MO.RBrowser.prototype.supportHtml5 = function RBrowser_supportHtml5(){
   return this._supportHtml5;
}
MO.RBrowser.prototype.hostPath = function RBrowser_hostPath(uri){
   var o = this;
   if(uri){
      return o._hostPath + uri;
   }
   return o._hostPath;
}
MO.RBrowser.prototype.setHostPath = function RBrowser_setHostPath(host){
   this._hostPath = host;
}
MO.RBrowser.prototype.contentPath = function RBrowser_contentPath(uri){
   var o = this;
   if(uri){
      return o._contentPath + uri;
   }
   return o._contentPath;
}
MO.RBrowser.prototype.setContentPath = function RBrowser_setContentPath(path){
   this._contentPath = path;
}
MO.RBrowser.prototype.typeCd = function RBrowser_typeCd(){
   return this._typeCd;
}
MO.RBrowser.prototype.isBrowser = function RBrowser_isBrowser(browserCd){
   return this._typeCd == browserCd;
}
MO.RBrowser.prototype.orientationCd = function RBrowser_orientationCd(){
   return this._orientationCd;
}
MO.RBrowser.prototype.setOrientationCd = function RBrowser_setOrientationCd(orientationCd){
   this._orientationCd = orientationCd;
}
MO.RBrowser.prototype.isOrientationHorizontal = function RBrowser_isOrientationHorizontal(){
   return this._orientationCd == MO.EOrientation.Horizontal;
}
MO.RBrowser.prototype.isOrientationVertical = function RBrowser_isOrientationVertical(){
   return this._orientationCd == MO.EOrientation.Vertical;
}
MO.RBrowser.prototype.refreshOrientation = function RBrowser_refreshOrientation(){
   var o = this;
   var orientation = window.orientation;
   if(orientation != null){
      if((window.orientation == 180) || (window.orientation == 0)){
         o._orientationCd = MO.EOrientation.Vertical;
      }else if((window.orientation == 90) || (window.orientation == -90)){
         o._orientationCd = MO.EOrientation.Horizontal;
      }else{
         throw new MO.TError(o, 'Unknown orientation mode.');
      }
   }
   return o._orientationCd;
}
MO.RBrowser.prototype.isVisibility = function RBrowser_isVisibility(){
   var name = this.definePropertyGet('hidden');
   return !window.document[name];
}
MO.RBrowser.prototype.encode = function RBrowser_encode(value){
   return escape(value);
}
MO.RBrowser.prototype.decode = function RBrowser_decode(value){
   return unescape(value);
}
MO.RBrowser.prototype.urlEncode = function RBrowser_urlEncode(url, flag){
   if(flag){
      return encodeURIComponent(url);
   }
   return encodeURI(url);
}
MO.RBrowser.prototype.urlDecode = function RBrowser_urlDecode(url, flag){
   if(flag){
      return decodeURIComponent(url);
   }
   return decodeURI(url);
}
MO.RBrowser.prototype.fullscreen = function RBrowser_fullscreen(hWindow, flag){
   if(flag){
      if (hWindow.requestFullscreen){
         hWindow.requestFullscreen();
      }else if(hWindow.mozRequestFullScreen){
         hWindow.mozRequestFullScreen();
      }else if(hWindow.webkitRequestFullScreen){
         hWindow.webkitRequestFullScreen();
      }else if(hWindow.msRequestFullscreen){
         hWindow.msRequestFullscreen();
      }
   }else{
      if (hWindow.exitFullscreen){
         hWindow.exitFullscreen();
      }else if(hWindow.mozCancelFullScreen){
         hWindow.mozCancelFullScreen();
      }else if(hWindow.webkitCancelFullScreen){
         hWindow.webkitCancelFullScreen();
      }else if(hWindow.msExitFullscreen){
         hWindow.msExitFullscreen();
      }
   }
}
MO.RBrowser.prototype.downloadBlob = function RBrowser_downloadBlob(fileName, blob){
   var link = document.createElement('A');
   var event = document.createEvent("MouseEvents");
   event.initEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
   link.download = fileName;
   link.href = URL.createObjectURL(blob);
   link.dispatchEvent(event);
}
MO.RBrowser.prototype.downloadText = function RBrowser_downloadText(fileName, text){
   var blob = MO.Labg.Blob.fromText(text);
   this.downloadBlob(fileName, blob);
}
MO.RBrowser.prototype.saveConfig = function RBrowser_saveConfig(xconfig){
   var o = this;
   var xagent = xconfig.create('Agent');
   xagent.setValue(o._agent);
}
MO.RBrowser = new MO.RBrowser();
MO.Window.Browser = MO.RBrowser;
MO.RXmlUtil = function RXmlUtil(){
   var o = this;
   o.httpActiveX = false;
   o.httpVendor  = null;
   o.domActiveX  = false;
   o.domVendor   = null;
   o.construct();
   return o;
}
MO.RXmlUtil.prototype.construct = function RXmlUtil_construct(){
   var o = this;
   var d = window.document;
   if(window.ActiveXObject && !window.XMLHttpRequest){
      var vs = ["MSXml2.XmlHTTP", "Microsoft.XmlHTTP", "MSXml.XmlHTTP", "MSXml3.XmlHTTP"];
      var c = vs.length;
      for(var n = 0; n < c; n++){
         var v = vs[n];
         try{
            r = new ActiveXObject(v);
            o.httpActiveX = true;
            o.httpVendor = v;
            break;
         }catch(e){
            m = e;
         }
      }
   }else if(window.XMLHttpRequest){
      try{
         var r = new XMLHttpRequest();
         o.httpActiveX = false;
      }catch(e){
         m = e;
      }
   }else{
      alert('Unknown http vendor.');
   }
   if(window.ActiveXObject || !window.DOMParser){
      var vs = ["MSXml2.DOMDocument", "Microsoft.XmlDOM", "MSXml.DOMDocument", "MSXml3.XmlDOM"];
      var c = vs.length;
      for(var n = 0; n < c; n++){
         var v = vs[n];
         try{
            var r = new ActiveXObject(v);
            o.domActiveX = true;
            o.domVendor = v;
            break;
         }catch(e){
            m = e;
         }
      }
   }else if(window.DOMParser && d && d.implementation && d.implementation.createDocument){
      try{
         var r = document.implementation.createDocument('', '', null);
         o.domActiveX = false;
      }catch(e){
         m = e;
      }
   }else{
      alert('Unknown dom vendor.');
   }
}
MO.RXmlUtil.prototype.isNode = function RXmlUtil_isNode(n){
   return RClass.isName(n, 'TNode');
}
MO.RXmlUtil.prototype.createConnection = function RXmlUtil_createConnection(){
   var o = this;
   var r = null;
   if(o.httpActiveX){
      r = new ActiveXObject(o.httpVendor);
   }else{
      r = new XMLHttpRequest();
   }
   if(!r){
      alert('Create xml connection failure. (message=' + m + ')');
   }
   return r;
}
MO.RXmlUtil.prototype.createDocument = function RXmlUtil_createDocument(){
   var o = this;
   var r = null;
   if(o.domActiveX){
      r = new ActiveXObject(o.domVendor);
   }else{
      r = document.implementation.createDocument('', '', null);
   }
   if(!r){
      alert('Create xml document failure. (message=' + m + ')');
   }
   return r;
}
MO.RXmlUtil.prototype.formatText = function RXmlUtil_formatText(s){
   if(s != null){
      s = s.replace(/\\n/g, '\n');
   }
   return s;
}
MO.RXmlUtil.prototype.buildText = function RXmlUtil_buildText(s, v){
   if(v != null){
      v = v.toString();
      var c = v.length;
      for(var i = 0; i < c; i++){
         var ch = v.charAt(i);
         switch(ch){
            case '<':
               s.append('&lt;');
               break;
            case '>':
               s.append('&gt;');
               break;
            case '&':
               s.append('&amp;');
               break;
            case '\'':
               s.append('&apos;');
               break;
            case '"':
               s.append('&quot;');
               break;
            case '\r':
               continue;
            case '\n':
               s.append('\\n');
               break;
            default:
               s.append(ch);
         }
      }
   }
   return s;
}
MO.RXmlUtil.prototype.buildNode = function RXmlUtil_buildNode(pd, pn, pe){
   var xas = null;
   var eas = pe.attributes;
   if(eas){
      var eac = eas.length;
      if(eac > 0){
         xas = new MO.TAttributes();
         for(var n = 0; n < eac; n++){
            var ea = eas[n];
            if(ea.nodeName){
               xas.set(ea.nodeName, this.formatText(ea.value));
            }
         }
      }
   }
   var xt = new MO.TString();
   xt.append(pe.value);
   var ecs = pe.childNodes
   if(ecs){
      var ecc = ecs.length;
      for(var n = 0; n < ecc; n++){
         var en = ecs[n];
         var ect = en.nodeType;
         if(ect == MO.ENodeType.Text){
            xt.append(en.nodeValue);
         }else if(ect == MO.ENodeType.Data){
            xt.append(en.data);
         }
      }
   }
   var xc = pd.create(pe.nodeName, xas, MO.Lang.String.trim(xt.toString()));
   if(pn){
      pn.push(xc);
   }else{
      pd._root = xc;
   }
   if(ecs){
      var cc = ecs.length;
      for(var n = 0; n < cc; n++){
         if(ecs[n].nodeType == MO.ENodeType.Node){
            this.buildNode(pd, xc, ecs[n]);
         }
      }
   }
}
MO.RXmlUtil.prototype.makeString = function RXmlUtil_makeString(s){
   var o = this;
   var x = null;
   if(o.domActiveX){
      x = new ActiveXObject(o.domVendor);
      x.async = false;
      x.loadXML(s);
   }else{
      var p = new DOMParser();
      x = p.parseFromString(s, 'text/xml');
   }
   return x;
}
MO.RXmlUtil.prototype.makeNode = function RXmlUtil_makeNode(p){
   var o = this;
   if(p.documentElement){
      var d = new MO.TXmlDocument();
      o.buildNode(d, null, p.documentElement);
      return d.root();
   }else if(p.tagName == 'SCRIPT'){
      var s = p.textContent;
      if(!s){
         s = p.text;
      }
      if(s){
         var d = new MO.TXmlDocument();
         var xd = o.makeString(s)
         o.buildNode(d, null, xd.documentElement);
         return d.root();
      }
   }
   return null;
}
MO.RXmlUtil.prototype.makeDocument = function RXmlUtil_makeDocument(p){
   var d = new MO.TXmlDocument();
   if(p.documentElement){
      this.buildNode(d, null, p.documentElement);
   }
   return d;
}
MO.RXmlUtil.prototype.unpack = function RXmlUtil_unpack(s, n){
   var o = this;
   if(MO.Lang.String.isEmpty(s)){
      return null;
   }
   if(!n){
      n = new MO.TNode();
   }
   var np = new MO.TAttributes();
   np.unpack(s);
   n.name = np.get('name');
   n.value = np.get('value');
   if(np.contains('attributes')){
      n.attributes().unpack(np.get('attributes'));
   }
   if(np.contains('nodes')){
      var ns = new MO.TStrings();
      ns.unpack(np.get('nodes'));
      for(var i = 0; i < ns.count; i++){
         o.unpack(ns.get(i), n.create());
      }
   }
   return n;
}
MO.RXml = new MO.RXmlUtil();
MO.Window.Xml = MO.RXml;
MO.EConstant = new function EConstant(){
   var o = this;
   o.DeviceType = 'device.type';
   return o;
}
MO.STouchEvent = function STouchEvent(){
   var o = this;
   o.dispose = MO.STouchEvent_dispose;
   return o;
}
MO.STouchEvent_dispose = function STouchEvent_dispose(){
   var o = this;
}
MO.TDumpItem = function TDumpItem(){
   var o = this;
   o.hParent      = null;
   o.hPanel       = null;
   o.hDocument    = null;
   o.hTable       = null;
   o.hText        = null;
   o.hRow         = null;
   o.link         = null;
   o.level        = 0;
   o.caption      = null;
   o.children     = new Array();
   o.items        = new Array();
   o.loaded       = false;
   o.innerDisplay = false;
   o.display      = false;
   o.create       = MO.TDumpItem_create;
   o.push         = MO.TDumpItem_push;
   o.innerShow    = MO.TDumpItem_innerShow;
   o.show         = MO.TDumpItem_show;
   return o;
}
MO.TDumpItem_create = function TDumpItem_create(){
   var o = this;
   var r = o.children[o.children.length] = new MO.TDumpItem();
   return r;
}
MO.TDumpItem_push = function TDumpItem_push(v){
   var o = this;
   o.items[o.items.length] = v;
}
MO.TDumpItem_innerShow = function TDumpItem_innerShow(v){
   var o = this;
   var c = o.items.length;
   for(var n = 0; n < c; n++){
      var tr = o.items[n];
      MO.RHtml.visibleSet(tr, v);
   }
   var c = o.children.length;
   for(var n = 0; n < c; n++){
      var d = o.children[n];
      MO.RHtml.visibleSet(d.hRow, v);
      if(v){
         d.show(d.innerDisplay);
      }else{
         d.innerDisplay = d.display;
         d.show(false);
      }
   }
}
MO.TDumpItem_show = function TDumpItem_show(v){
   var o = this;
   o.display = v;
   var label = MO.Lang.String.repeat('   ', o.level-1) + (v ? ' -' : ' +') + ' ' + o.caption;
   o.hText.innerHTML = MO.RHtml.toHtml(label);
   o.innerShow(v);
}
MO.FImage = function FImage(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListenerLoad);
   o._optionAlpha   = MO.Class.register(o, new MO.AGetter('_optionAlpha'), true);
   o._ready         = false;
   o._size          = MO.Class.register(o, new MO.AGetter('_size'));
   o._url           = MO.Class.register(o, new MO.AGetter('_url'));
   o._hImage        = null;
   o.ohLoad         = MO.FImage_ohLoad;
   o.ohError        = MO.FImage_ohError;
   o.construct      = MO.FImage_construct;
   o.image          = MO.FImage_image;
   o.testReady      = MO.FImage_testReady;
   o.loadUrl        = MO.FImage_loadUrl;
   o.dispose        = MO.FImage_dispose;
   return o;
}
MO.FImage_ohLoad = function FImage_ohLoad(){
   var o = this.__linker;
   var hImage = o._hImage;
   o._size.set(hImage.naturalWidth, hImage.naturalHeight);
   o._ready = true;
   var event = new MO.SEvent(o);
   o.processLoadListener(event);
   event.dispose();
}
MO.FImage_ohError = function FImage_ohError(p){
   var o = this.__linker;
   var url = o._url;
   MO.Logger.error(o, 'Load image failure. (url={1})', url);
}
MO.FImage_construct = function FImage_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._size = new MO.SSize2();
}
MO.FImage_image = function FImage_image(){
   return this._hImage;
}
MO.FImage_testReady = function FImage_testReady(){
   return this._ready;
}
MO.FImage_loadUrl = function FImage_loadUrl(uri){
   var o = this;
   var url = MO.Console.find(MO.FEnvironmentConsole).parseUrl(uri);
   var hImage = o._hImage;
   if(!hImage){
      hImage = o._hImage = new Image();
      hImage.__linker = o;
      hImage.onload = o.ohLoad;
      hImage.onerror = o.ohError;
   }
   o._url = url;
   hImage.src = url;
}
MO.FImage_dispose = function FImage_dispose(){
   var o = this;
   o._size = MO.Lang.Object.dispose(o._size);
   o._hImage = MO.Window.Html.free(o._hImage);
   o.__base.MListenerLoad.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FTouchTracker = function FTouchTracker(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListenerTouchZoom);
   o._touchsLength   = null;
   o._touchs         = null;
   o._touchPool      = null;
   o._touchZoomEvent = null;
   o.construct       = MO.FTouchTracker_construct;
   o.calculateLength = MO.FTouchTracker_calculateLength;
   o.eventStart      = MO.FTouchTracker_eventStart;
   o.eventMove       = MO.FTouchTracker_eventMove;
   o.eventStop       = MO.FTouchTracker_eventStop;
   o.dispose         = MO.FTouchTracker_dispose;
   return o;
}
MO.FTouchTracker_construct = function FTouchTracker_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._touchs = new MO.TObjects();
   o._touchPool = MO.Class.create(MO.FObjectPool);
   o._touchZoomEvent = new MO.SEvent(o);
}
MO.FTouchTracker_calculateLength = function FTouchTracker_calculateLength(hEvent){
   var o = this;
   var total = 0;
   var hTouches = hEvent.touches;
   var count = hTouches.length;
   if(count > 0){
      for(var i = 0; i < count; i++){
         var hTouche1 = hTouches[i];
         var hTouche2 = (i == count - 1) ? hTouches[0] : hTouches[i + 1];
         var cx = hTouche1.clientX - hTouche2.clientX;
         var cy = hTouche1.clientY - hTouche2.clientY;
         var length = Math.sqrt(cx * cx + cy * cy);
         total += length;
      }
   }
   return total;
}
MO.FTouchTracker_eventStart = function FTouchTracker_eventStart(hEvent){
   var o = this;
   var touchs = o._touchs;
   touchs.clear();
   var hTouches = hEvent.touches;
   var count = hTouches.length;
   for(var i = 0; i < count; i++){
      var hTouche = hTouches[i];
      var touch = new STouchEvent();
      touch.clientX = hTouche.clientX;
      touch.clientY = hTouche.clientY;
      touchs.push(touch);
   }
   o._touchsLength = o.calculateLength(hEvent);
}
MO.FTouchTracker_eventMove = function FTouchTracker_eventMove(hEvent){
   var o = this;
   var touchs = o._touchs;
   var hTouches = hEvent.touches;
   var count = hTouches.length;
   for(var i = 0; i < count; i++){
      var hTouche = hTouches[i];
      var touch = touchs.at(i);
      touch.clientX = hTouche.clientX;
      touch.clientY = hTouche.clientY;
   }
   var touchsLength = o.calculateLength(hEvent);
   if(o._touchsLength != touchsLength){
      var event = o._touchZoomEvent;
      event.touchsLength = touchsLength;
      event.delta = touchsLength - o._touchsLength;
      o.processTouchZoomListener(event);
      o._touchsLength = touchsLength;
   }
}
MO.FTouchTracker_eventStop = function FTouchTracker_eventStop(hEvent){
   var o = this;
}
MO.FTouchTracker_dispose = function FTouchTracker_dispose(){
   var o = this;
   o._touchs = MO.Lang.Object.dispose(o._touchs);
   o._touchZoomEvent = MO.Lang.Object.dispose(o._touchZoomEvent);
   o.__base.MListenerTouchZoom.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.RBuilder = function RBuilder(){
   return this;
}
MO.RBuilder.prototype.create = function RBuilder_create(h, t, s){
   var o = this;
   var d = null;
   if(h.ownerDocument){
      d = h.ownerDocument;
   }else if(h.hDocument){
      d = h.hDocument;
   }else{
      d = h;
   }
   var h = d.createElement(t);
   if(s){
      h.className = s;
   }
   return h;
}
MO.RBuilder.prototype.createIcon = function RBuilder_createIcon(hDocument, style, uri, width, height){
   var hImage = this.create(hDocument, 'IMG', MO.Lang.String.nvl(style, 'Tag_Icon'));
   hImage.align = 'absmiddle';
   if(uri){
      hImage.src = MO.Window.Resource.iconPath(uri);
   }
   if(width){
      hImage.style.width = width + 'px';
   }
   if(height){
      hImage.style.height = height + 'px';
   }
   return hImage;
}
MO.RBuilder.prototype.createImage = function RBuilder_createImage(hDocument, style, uri, width, height){
   var hImage = this.create(hDocument, 'IMG', style);
   if(uri){
      hImage.src = MO.Window.Resource.imagePath(uri);
   }
   if(width){
      hImage.style.width = width + 'px';
   }
   if(height){
      hImage.style.height = height + 'px';
   }
   return hImage;
}
MO.RBuilder.prototype.createText = function RBuilder_createText(d, s, v){
   var r = this.create(d, 'SPAN', s);
   if(v){
      r.innerHTML = v;
   }
   return r;
}
MO.RBuilder.prototype.createButton = function RBuilder_createButton(d, s){
   var r = this.create(d, "INPUT", s);
   r.type = 'button';
   return r;
}
MO.RBuilder.prototype.createCheck = function RBuilder_createCheck(d, s){
   var r = this.create(d, "INPUT", s);
   r.type = 'checkbox';
   return r;
}
MO.RBuilder.prototype.createRadio = function RBuilder_createRadio(d, s){
   var r = this.create(d, "INPUT", s);
   r.type = 'radio';
   return r;
}
MO.RBuilder.prototype.createEdit = function RBuilder_createEdit(d, s){
   var r = this.create(d, "INPUT", s);
   r.type = 'text';
   return r;
}
MO.RBuilder.prototype.createFile = function RBuilder_createFile(d, s){
   var r = this.create(d, "INPUT", s);
   r.type = 'file';
   return r;
}
MO.RBuilder.prototype.createSpan = function RBuilder_createSpan(d, s){
   return this.create(d, 'SPAN', s);
}
MO.RBuilder.prototype.createDiv = function RBuilder_createDiv(d, s){
   return this.create(d, 'DIV', s);
}
MO.RBuilder.prototype.createTable = function RBuilder_createTable(d, s, b, cs, cp){
   var h = this.create(d, 'TABLE', s);
   if(b){
      h.border = MO.Lang.Integer.nvl(b);
   }
   h.cellSpacing = MO.Lang.Integer.nvl(cs);
   h.cellPadding = MO.Lang.Integer.nvl(cp);
   return h;
}
MO.RBuilder.prototype.createTableRow = function RBuilder_createTableRow(d, s){
   var h = this.create(d, 'TR', s);
   return h;
}
MO.RBuilder.prototype.createTableCell = function RBuilder_createTableCell(d, s){
   var h = this.create(d, 'TD', s);
   return h;
}
MO.RBuilder.prototype.createFragment = function RBuilder_createFragment(document){
   var hDocument = null;
   if(document.ownerDocument){
      hDocument = document.ownerDocument;
   }else if(document.hDocument){
      hDocument = document.hDocument;
   }else{
      hDocument = document;
   }
   var hElement = hDocument.createDocumentFragment();
   hElement.__fragment = true;
   return hElement;
}
MO.RBuilder.prototype.append = function RBuilder_append(p, t, s){
   var r = this.create(p.ownerDocument, t, s);
   if(p){
      p.appendChild(r);
   }else{
      this.hDocument.body.appendChild(r);
   }
   return r;
}
MO.RBuilder.prototype.appendIcon = function RBuilder_appendIcon(p, s, u, w, h){
   var r = this.createIcon(p.ownerDocument, s, u, w, h);
   p.appendChild(r);
   return r;
}
MO.RBuilder.prototype.appendImage = function RBuilder_appendImage(p, s, u, w, h){
   var r = this.createImage(p.ownerDocument, s, u, w, h);
   p.appendChild(r);
   return r;
}
MO.RBuilder.prototype.appendEmpty = function RBuilder_appendEmpty(p, w, h){
   var r = this.createIcon(p.ownerDocument, null, 'n', w, h);
   p.appendChild(r);
   return r;
}
MO.RBuilder.prototype.appendText = function RBuilder_appendText(p, s, v){
   var r = this.createText(p.ownerDocument, s, v);
   p.appendChild(r);
   return r;
}
MO.RBuilder.prototype.appendButton = function RBuilder_appendButton(p, s){
   var r = this.createButton(p.ownerDocument, s);
   p.appendChild(r);
   return r;
}
MO.RBuilder.prototype.appendCheck = function RBuilder_appendCheck(p, s){
   var r = this.createCheck(p.ownerDocument, s);
   p.appendChild(r);
   return r;
}
MO.RBuilder.prototype.appendRadio = function RBuilder_appendRadio(p, s){
   var r = this.createRadio(p.ownerDocument, s);
   p.appendChild(r);
   return r;
}
MO.RBuilder.prototype.appendEdit = function RBuilder_appendEdit(p, s){
   var r = this.createEdit(p.ownerDocument, s);
   p.appendChild(r);
   return r;
}
MO.RBuilder.prototype.appendFile = function RBuilder_appendFile(p, s){
   var r = this.createFile(p.ownerDocument, s);
   p.appendChild(r);
   return r;
}
MO.RBuilder.prototype.appendSpan = function RBuilder_appendSpan(p, s){
   var r = this.createSpan(p.ownerDocument, s);
   p.appendChild(r);
   return r;
}
MO.RBuilder.prototype.appendDiv = function RBuilder_appendDiv(p, s){
   var r = this.createDiv(p.ownerDocument, s);
   p.appendChild(r);
   return r;
}
MO.RBuilder.prototype.appendTable = function RBuilder_appendTable(p, s, b, cs, cp){
   var r = this.createTable(p.ownerDocument, s, b, cs, cp);
   if(p){
      p.appendChild(r);
   }else{
      this.hDocument.body.appendChild(r);
   }
   return r;
}
MO.RBuilder.prototype.appendTableRow = function RBuilder_appendTableRow(p, s, i, h){
   var r = null;
   if(i == null){
      if(MO.RBrowser.isBrowser(MO.EBrowser.Explorer)){
         r = p.insertRow();
      }else{
         r = p.insertRow(-1);
      }
   }else{
      r = p.insertRow(i);
   }
   if(s){
      r.className = s;
   }
   if(h){
      r.height = h;
   }
   return r;
}
MO.RBuilder.prototype.appendTableRowCell = function RBuilder_appendTableRowCell(p, s, w, h){
   var o = this;
   var hr = o.appendTableRow(p, null, null, w);
   var hc = o.appendTableCell(hr, s, null, h);
   return hc;
}
MO.RBuilder.prototype.appendTableCell = function RBuilder_appendTableCell(p, s, i, w){
   var o = this;
   var r = null;
   if(i == null){
      r = o.create(p, 'TD', s);
      p.appendChild(r);
   }else{
      r = p.insertCell(i);
   }
   if(s){
      r.className = s;
   }
   if(w){
      r.width = w;
   }
   return r;
}
MO.RBuilder = new MO.RBuilder();
MO.Window.Builder = MO.RBuilder;
MO.RContext = function RContext(){
   var o = this;
   o._location   = null;
   o._contexts   = new Object();
   o.contextPath = null;
   o.contextTag  = null;
   o.themeId     = null;
   o.languageId  = null;
   return o;
}
MO.RContext.prototype.location = function RContext_location(s){
   var o = this;
   var r = o._location;
   if(r == null){
      var l = window.location;
      var hr = l.href;
      var pn = l.pathname;
      r = hr.substring(0, hr.indexOf(pn))
      if(o.contextPath){
         r += o.contextPath;
      }
      o._location = r;
   }
   if(s){
      r += s;
   }
   return r;
}
MO.RContext.prototype.context = function RContext_context(s){
   var o = this;
   if(s != null){
      if(MO.Lang.String.endsWith(s, '.wv')){
         return o.contextPath + '/' + s;
      }else if(MO.Lang.String.startsWith(s, '#')){
         return o.contextPath + o.contextTag + s.substr(1);
      }
      return o.contextPath + s;
   }
   return o.contextPath;
}
MO.RContext.prototype.initialize = function RContext_initialize(s){
   var o = this;
   for(var n in s){
      var ls = s[n];
      for(var nc in ls){
         var v = ls[nc];
         var fn = n + ':' + nc;
         o._contexts[fn] = new MO.TContext(n, nc, v);
      }
   }
}
MO.RContext.prototype.get = function RContext_get(code, p1, p2, p3, p4, p5){
   var o = this;
   var context = o._contexts[code];
   if(!context){
      return MO.Logger.warn(o, 'Can not find context (code={1})', code);
   }
   return MO.Lang.String.format(context.text, p1, p2, p3, p4, p5)
}
MO.RContext.prototype.find = function RContext_find(s, c){
   var o = this;
   var id = s + ':' + c;
   var r = o._contexts[id];
   if(!r){
      return MO.Logger.warn(o, 'Can not find context (id={1})', id);
   }
   return r.text;
}
MO.RContext = new MO.RContext();
MO.Context = MO.RContext;
MO.RDump = function RDump(){
   var o = this;
   o.LINE_SINGLE = '------------------------------';
   o.LINE_DOUBLE = '==============================';
   o.LINE_DOT    = '..............................';
   o.LINE_STAR   = '******************************';
   return o;
}
MO.RDump.prototype.onclick = function RDump_onclick(){
   var o = this;
   var d = o.link;
   if(o.link){
      if(d.loaded){
         d.show(!d.display);
      }else{
         MO.RDump.dumpInner(o.link);
         d.loaded = true;
         d.show(true);
      }
   }
}
MO.RDump.prototype.nameInfo = function RDump_nameInfo(v){
   var t = MO.Class.typeOf(v);
   switch(t){
      case 'Unknown':
         return '@unknown';
      case 'Function':
         return MO.Method.name(v) + '@Function';
      case 'Array':
         return '@<Array>';
   }
   return v;
}
MO.RDump.prototype.typeInfo = function RDump_typeInfo(v, t){
   if(v == null){
      return 'null';
   }
   switch(t){
      case 'Unknown':
         return 'unknown';
      case 'Undefined':
         return 'undefined';
      case 'Boolean':
      case 'Number':
         return v.toString();
      case 'String':
         return v.length + ':\'' + MO.Lang.String.toLine(v) + '\'';
      case 'Function':
         if(v.__virtual){
            return 'virtual';
         }
         return MO.Method.name(v, true);
      case 'Array':
         return '@<Array@' + MO.Class.code(v) + '> length=' + v.length;
      case 'Html':
         return '@<' + v.tagName + '>';
      default:
         if(v.constructor == MO.TClass){
            return '@<' + v.name + '@' + MO.Class.code(v) + '>';
         }
         if(v.constructor == Function){
            return "@" + v.toString();
         }
         try{
            for(var name in v){
               return '@<Object@' + MO.Class.code(v) + '>';
            }
         }catch(e){}
         return '<Object@' + MO.Class.code(v) + '>';
   }
}
MO.RDump.prototype.dumpInner = function RDump_dumpInner(di){
   var hTable  = di.hTable;
   var hParent = di.hParent;
   var hInsRow = di.hRow;
   var level   = di.level;
   var obj     = di.link;
   var type    = MO.Class.typeOf(obj, true);
   var vcls    = obj.__class;
   var names = new Array();
   for(var name in obj){
      names[names.length] = name;
   }
   if(MO.Lang.String.endsWith(type, 'Array')){
      MO.Lang.Array.reverse(names, 0, names.length - 1);
   }else{
      MO.Lang.Array.sort(names, true);
   }
   var items = new Array();
   var c = names.length;
   if(c > 2000){
      c = 2000;
   }
   for(var n = 0; n < c; n++){
      var name = names[n];
      var value = '{error}';
      try{
         value = obj[name];
      }catch(e){}
      var stype = MO.Class.safeTypeOf(value, true);
      var type = MO.Class.safeTypeOf(value, true);
      var info = null;
      var infoFormat = true;
      if(vcls){
         var ann = vcls.attributeFind(name);
         if(ann){
            type = 'Annotation<' + MO.Method.name(ann.constructor) + '>'
            if(value && value.constructor == Function){
               info = "<FONT color='green'>" + MO.Method.name(value) + "</FONT>";
            }else{
               info = value + "<FONT color='green'> - (" + MO.RHtml.toHtml(ann.toString()) + ")</FONT>";
            }
            infoFormat = false;
         }
      }
      if(info == null){
         info = this.typeInfo(value, type);
      }
      var rdi = null;
      var index = hInsRow ? hInsRow.rowIndex + 1 : 0;
      var hRow = MO.RBuilder.appendTableRow(hTable, null, index);
      hRow.bgColor = '#FFFFFF';
      if(MO.Lang.String.startsWith(info, '@')){
         hRow.style.cursor = 'pointer';
         hRow.onclick = this.onclick;
         hRow.bgColor = '#FFF0E0';
         rdi = hRow.link = di.create();
         rdi.link = value;
         rdi.level = level;
         rdi.caption = name;
         rdi.hTable = hTable;
         rdi.level = level + 1;
         rdi.hRow = hRow;
      }else{
         di.push(hRow);
      }
      if((type == 'Function') && (info == 'virtual')){
         hRow.bgColor = '#E0F0FF';
      }
      var hCell = MO.RBuilder.appendTableCell(hRow);
      var icon = MO.Lang.String.startsWith(info, '@') ? ' +' : '  ';
      var label = MO.Lang.String.repeat('   ', level) + icon + ' ' + name
      hCell.innerHTML = MO.RHtml.toHtml(label);
      hCell.style.borderBottom = '1px solid #F0F0F0';
      hCell.width = '240px'
      if(rdi){
         rdi.hText = hCell;
      }
      var hCell = MO.RBuilder.appendTableCell(hRow);
      hCell.innerHTML = MO.RHtml.toHtml(type);
      hCell.style.borderBottom = '1px solid #F0F0F0';
      if(type == 'Function'){
         hCell.style.color = '#3333FF';
      }else{
         hCell.style.color = '#FF3333';
      }
      hCell.width = '200px'
      var hCell = MO.RBuilder.appendTableCell(hRow);
      if(MO.Lang.String.startsWith(info, '@')){
         info = info.substr(1);
      }
      if(infoFormat){
         hCell.innerHTML = MO.RHtml.toHtml(info);
      }else{
         hCell.innerHTML = info;
      }
      hCell.style.borderBottom = '1px solid #F0F0F0';
   }
   hTable.width = '100%'
}
MO.RDump.prototype.dump = function RDump_dump(value, hPanel){
   if(!hPanel){
      hPanel = MO.RBuilder.append(null, 'DIV')
   }
   var s = new MO.TString();
   s.append('<', MO.Class.safeTypeOf(value));
   if(value && value.tagName){
      s.append(' - ', value.tagName);
   }
   s.appendLine('@' + MO.Class.code(value) + '>');
   var hPanel = MO.RBuilder.append(hPanel, 'DIV');
   hPanel.style.border = '1px solid #BBBBBB';
   hPanel.style.backgroundColor = '#E0E0EB';
   var hTitleTable = MO.RBuilder.appendTable(hPanel, null, null, 0, 1, 0);
   var hRow = MO.RBuilder.appendTableRow(hTitleTable);
   var hCell = MO.RBuilder.appendTableCell(hRow);
   hTitleTable.width = '100%'
   hCell.style.padding = 2;
   hCell.style.borderBottom = '1px solid gray';
   hCell.style.backgroundColor = '#E0E0EB';
   MO.RHtml.textSet(hCell, s.toString());
   var hTable = MO.RBuilder.appendTable(hPanel, null, null, 0, 1, 0);
   hTable.style.width = '100%';
   var di = new MO.TDumpItem();
   di.hTable = hTable;
   di.hRow = null;
   di.hParent = hPanel;
   di.link = value;
   di.level = 0;
   this.dumpInner(di);
}
MO.RDump.prototype.appendLevel = function RDump_appendLevel(r, l){
   for(var n = 0; n < l; n++){
      r.append('   ');
   }
}
MO.RDump.prototype.stack = function RDump_stack(){
   var o = RDump_stack.caller;
   var s = new MO.TString();
   while(o){
      s.append(MO.Method.name(o));
      o = o.caller;
      if(o){
         s.appendLine();
      }
   }
}
MO.RDump = new MO.RDump();
MO.RHtml = function RHtml(){
   var o = this;
   o._nextUid        = 1;
   o._links          = new Object();
   o._clientPosition = null;
   return o;
}
MO.RHtml.prototype.uid = function RHtml_uid(value){
   var uuid = value.__puuid;
   if(uuid == null){
      uuid = value.__puuid = this._nextUid++;
   }
   return uuid;
}
MO.RHtml.prototype.displayGet = function RHtml_displayGet(hTag){
   var result = null;
   var text = hTag.style.display;
   if(MO.Window.Browser.isBrowser(MO.EBrowser.Explorer)){
      result = (text == 'inline');
   }else{
      result = (text != 'none');
   }
   return result;
}
MO.RHtml.prototype.displaySet = function RHtml_displaySet(hTag, visible){
   var text = null;
   if(MO.Window.Browser.isBrowser(MO.EBrowser.Explorer)){
      text = visible ? 'inline' : 'none';
   }else{
      text = visible ? null : 'none';
   }
   hTag.style.display = text;
}
MO.RHtml.prototype.visibleGet = function RHtml_visibleGet(hTag){
   var result = null;
   var text = hTag.style.display;
   if(MO.Window.Browser.isBrowser(MO.EBrowser.Explorer)){
      result = (text == 'block');
   }else{
      result = (text != 'none');
   }
   return result;
}
MO.RHtml.prototype.visibleSet = function RHtml_visibleSet(hTag, visible){
   var text = null;
   if(MO.Window.Browser.isBrowser(MO.EBrowser.Explorer)){
      text = visible ? '' : 'none';
   }else{
      text = visible ? null : 'none';
   }
   hTag.style.display = text;
}
MO.RHtml.prototype.textGet = function RHtml_textGet(hTag, defaultText){
   var text = null;
   if(MO.Window.Browser.isBrowser(MO.EBrowser.FireFox)){
      text = hTag.textContent;
   }else{
      text = hTag.innerText;
   }
   return text;
}
MO.RHtml.prototype.textSet = function RHtml_textSet(hTag, text){
   if(MO.Window.Browser.isBrowser(MO.EBrowser.FireFox)){
      hTag.textContent = text;
   }else{
      hTag.innerText = text;
   }
}
MO.RHtml.prototype.checkGet = function RHtml_checkGet(hTag){
   return MO.Lang.Bool.toString(hTag.checked);
}
MO.RHtml.prototype.checkSet = function RHtml_checkSet(hTag, value){
   hTag.checked = MO.Lang.Bool.isTrue(value);
}
MO.RHtml.prototype.radioGet = function RHtml_radioGet(hs){
   if(hs){
      var count = hs.length;
      for(var n = 0; n < count; n++){
         var hItem = hs[n];
         if(hItem.checked){
            return hItem.value;
         }
      }
   }
   return null;
}
MO.RHtml.prototype.radioSet = function RHtml_radioSet(hTag, value){
   if(hTag){
      var count = hTag.length;
      for(var n = 0; n < count; n++){
         var hItem = hTag[n];
         if(hItem.value == value){
            hItem.checked = true;
            break;
         }
      }
   }
}
MO.RHtml.prototype.cursorSet = function RHtml_cursorSet(hTag, value){
   if(hTag){
      hTag.style.cursor = value;
   }
}
MO.RHtml.prototype.linkGet = function RHtml_linkGet(hTag, name){
   var o = this;
   var uid = o.uid(hTag);
   var item = o._links[uid];
   return item ? item.get(name) : null;
}
MO.RHtml.prototype.linkSet = function RHtml_linkSet(hTag, n, v){
   var o = this;
   var links = o._links;
   var uid = o.uid(hTag);
   var item = links[uid];
   if(!item){
      item = links[uid] = new MO.THtmlItem();
      item._link = hTag;
   }
   item.set(n, v);
}
MO.RHtml.prototype.clientPosition = function RHtml_clientPosition(hTag, hTop){
   var o = this;
   var position = o._clientPosition;
   if(!position){
      position = o._clientPosition = new MO.SPoint2();
   }
   position.set(0, 0);
   while(hTag != hTop){
      position.x += hTag.offsetLeft + hTag.clientLeft - hTag.scrollLeft;
      position.y += hTag.offsetTop + hTag.clientTop - hTag.scrollTop;
      hTag = hTag.offsetParent;
   }
   return position;
}
MO.RHtml.prototype.clientX = function RHtml_clientX(p, t){
   var r = 0;
   while(p != t){
      r += p.offsetLeft - p.scrollLeft;
      p = p.offsetParent;
   }
   return r;
}
MO.RHtml.prototype.clientY = function RHtml_clientY(p, t){
   var r = 0;
   while(p != t){
      r += p.offsetTop - p.scrollTop;
      p = p.offsetParent;
   }
   return r;
}
MO.RHtml.prototype.setSize = function RHtml_setSize(hTag, size){
   if(size){
      if(size.width){
         hTag.style.width = size.width + 'px';
      }
      if(size.height){
         hTag.style.height = size.height + 'px';
      }
   }
}
MO.RHtml.prototype.toText = function RHtml_toText(p){
   if(p != null){
      p = p.toString();
      p = p.replace(/&lt;/, '<');
      p = p.replace(/&gt;/g, '>');
      p = p.replace(/&nbsp;/g, ' ');
      p = p.replace(/<BR>/g, '\n');
   }
   return p;
}
MO.RHtml.prototype.toHtml = function RHtml_toHtml(p){
   if(p != null){
      p = p.toString();
      p = p.replace(/</g, '&lt;');
      p = p.replace(/>/g, '&gt;');
      p = p.replace(/ /g, '&nbsp;');
      p = p.replace(/\n/g, '<BR>');
      p = p.replace(/\\n/g, '<BR>');
      p = p.replace(/\r/g, '');
      p = p.replace(/\\r/g, '');
   }
   return p;
}
MO.RHtml.prototype.eventSource = function RHtml_eventSource(p){
   return p.srcElement ? p.srcElement : p.target;
}
MO.RHtml.prototype.get = function RHtml_get(name){
   return document.getElementById(name);
}
MO.RHtml.prototype.parent = function RHtml_parent(tag, typeName){
   if(tag && t){
      typeName = typeName.toLowerCase();
      while(tag){
         if(tag.tagName.toLowerCase() == typeName){
            return tag;
         }
         tag = tag.parentElement;
      }
   }
   return null;
}
MO.RHtml.prototype.searchLinker = function RHtml_searchLinker(hTag, clazz){
   while(hTag){
      var linker = hTag.__linker;
      if(linker){
         if(MO.Class.isClass(linker, clazz)){
            return linker;
         }
      }
      hTag = hTag.parentElement;
   }
   return null;
}
MO.RHtml.prototype.searchObject = function RHtml_searchObject(hTag, name){
   while(hTag){
      var flag = hTag[name];
      if(flag){
         return flag;
      }
      hTag = hTag.parentElement;
   }
   return null;
}
MO.RHtml.prototype.tableMoveRow = function RHtml_tableMoveRow(ph, ps, pt){
   if(ph.tagName != 'TABLE'){
      throw new MO.TError('Html table is invalid.');
   }
   if(ps == pt){
      return false;
   }
   if(ph.moveRow){
      ph.moveRow(ps, pt);
   }else{
      var hb = ph.getElementsByTagName('tbody')[0];
      var sr = hb.rows[ps];
      var tr = hb.rows[pt];
      if((sr == null) || (tr == null)){
         return false;
      }
      var nr = null;
      if(ps <= pt){
         nr = tr;
         while(nr = nr.nextSibling){
            if(nr.tagName == 'TR'){
               break;
            }
         }
      }
      if(nr == null){
         hb.insertBefore(sr, tr);
      }else{
         if(nr == null){
            hb.appendChild(sr);
         }else{
            hb.insertBefore(sr, nr);
         }
      }
   }
   return true;
}
MO.RHtml.prototype.clear = function RHtml_clear(hTag){
   var o = this;
   if(hTag){
      var hChildren = hTag.children;
      if(hChildren){
         var count = hChildren.length;
         for(var i = count - 1; i >= 0; i--){
            var hChild = hChildren[i];
            hTag.removeChild(hChild);
         }
      }
   }
}
MO.RHtml.prototype.clearAll = function RHtml_clearAll(hTag){
   var o = this;
   if(hTag){
      var hChildren = hTag.children;
      if(hChildren){
         var count = hChildren.length;
         for(var i = count - 1; i >= 0; i--){
            var hChild = hChildren[i];
            if(hChild.children){
               o.clear(hChild);
            }
            hTag.removeChild(hChild);
         }
      }
   }
}
MO.RHtml.prototype.free = function RHtml_free(p){
   return null;
}
MO.RHtml = new MO.RHtml();
MO.Window.Html = MO.RHtml;
MO.RKeyboard = function RKeyboard(){
   var o = this;
   o._status = new Array();
   return o;
}
MO.RKeyboard.prototype.onKeyDown = function RKeyboard_onKeyDown(p){
   var o = this;
   var c = p.keyCode;
   o._status[c] = MO.EKeyStatus.Press;
}
MO.RKeyboard.prototype.onKeyUp = function RKeyboard_onKeyUp(p){
   var o = this;
   var c = p.keyCode;
   o._status[c] = MO.EKeyStatus.Normal;
}
MO.RKeyboard.prototype.construct = function RKeyboard_construct(){
   var o = this;
   var s = o._status;
   for(var i = 0; i < 256; i++){
      s[i] = MO.EKeyStatus.Normal;
   }
   MO.RWindow.lsnsKeyDown.register(o, o.onKeyDown);
   MO.RWindow.lsnsKeyUp.register(o, o.onKeyUp);
}
MO.RKeyboard.prototype.isControlKey = function RKeyboard_isControlKey(p){
   var s = MO.EKeyCode.ControlKeys;
   for(var i = s.length - 1; i >= 0; i--){
      if(s[i] == p){
         return true;
      }
   }
   return false;
}
MO.RKeyboard.prototype.isIntegerKey = function RKeyboard_isIntegerKey(c){
   return MO.EKeyCode.integerCodes[c];
}
MO.RKeyboard.prototype.isFloatKey = function RKeyboard_isFloatKey(c){
   return MO.EKeyCode.floatCodes[c];
}
MO.RKeyboard.prototype.isNumKey = function RKeyboard_isNumKey(c){
   if(p >= 96 && p <= 105){
      return true;
   }
   return false;
}
MO.RKeyboard.prototype.isPress = function RKeyboard_isPress(keyCode){
   var o = this;
   var status = o._status[keyCode];
   return status == MO.EKeyStatus.Press;
}
MO.RKeyboard.prototype.fixCase = function RKeyboard_fixCase(e, c){
   if(e && c){
      var k = e.keyCode;
      if(ECase.Upper == c){
         k = String.fromCharCode(k).toUpperCase().charCodeAt(0)
      }else if(ECase.Lower == c){
         k = String.fromCharCode(k).toLowerCase().charCodeAt(0)
      }
      e.keyCode = k;
   }
}
MO.RKeyboard.prototype.fixPattern = function RKeyboard_fixPattern(e, p){
   if(p){
      var k = e.keyCode;
      if(!this.isControlKeyPress(k)){
         if(!MO.Lang.String.isPattern(String.fromCharCode(k), p)){
            e.keyCode = 0;
            return false;
         }
      }
   }
   return true;
}
MO.RKeyboard.prototype.fixChars = function RKeyboard_fixChars(e, p){
   if(p){
      var k = e.keyCode;
      if(this.isNumKey(k)){
    	  k = e.keyCode = e.keyCode - 48;
      }
      if(!this.isControlKeyPress(k)){
         if(!MO.Lang.String.inChars(String.fromCharCode(k), p)){
            e.keyCode = 0;
            e.returnValue = false;
            return false;
         }
      }
   }
   return true;
}
MO.Window.Keyboard = new MO.RKeyboard();
MO.RResource = function RResource(){
   var o = this;
   o.uriIcon  = '/ars/icon/';
   o.uriImage = '/ars/img/';
   return o;
}
MO.RResource.prototype.iconPath = function RResource_iconPath(code, type){
   var o = this;
   var path = null;
   if(code.indexOf('|') != -1){
      var items = code.split('|');
      path = items[0];
      type = items[1];
   }else{
      path = code;
   }
   path = MO.Lang.String.nvl(path, 'n').replace(/\./g, '/') + '.' + MO.Lang.String.nvl(type, 'gif');
   return MO.Window.Browser.contentPath('/ars/icon/' + path);
}
MO.RResource.prototype.iconUrlPath = function RResource_iconUrlPath(path, type){
   var o = this;
   path = MO.Lang.String.nvl(path, 'n').replace(/\./g, '/') + '.' + MO.Lang.String.nvl(type, 'gif');
   return MO.RBrowser.contentPath('/ars/icon/' + path);
}
MO.RResource.prototype.imagePath = function RResource_imagePath(path, type){
   var o = this;
}
MO.RResource = new MO.RResource();
MO.Window.Resource = MO.RResource;
MO.RValue = function RValue(){
   var o = this;
   o.float1    = null;
   o.float2    = null;
   o.float3    = null;
   o.float4    = null;
   o.float9    = null;
   o.float12   = null;
   o.float16   = null;
   o.double1   = null;
   o.double2   = null;
   o.double3   = null;
   o.double4   = null;
   o.double16  = null;
   o.double16  = null;
   o.double64  = null;
   o.construct();
   return o;
}
MO.RValue.prototype.construct = function RValue_construct(){
   var o = this;
   if(MO.RBrowser.supportHtml5()){
      o.float1 = new Float32Array(1);
      o.float2 = new Float32Array(2);
      o.float3 = new Float32Array(3);
      o.float4 = new Float32Array(4);
      o.float9 = new Float32Array(9);
      o.float12 = new Float32Array(12);
      o.float16 = new Float32Array(16);
      o.double1 = new Float64Array(1);
      o.double2 = new Float64Array(2);
      o.double3 = new Float64Array(3);
      o.double4 = new Float64Array(4);
      o.double9 = new Float64Array(9);
      o.double12 = new Float64Array(12);
      o.double16 = new Float64Array(16);
   }
}
MO.RValue = new MO.RValue();
MO.EGraphicError = new function EGraphicError(){
   var o = this;
   o.Unsupport2d    = 'unsupport.2d';
   o.UnsupportWebGL = 'unsupport.webgL';
   return o;
}
MO.EGraphicQuality = new function EGraphicQuality(){
   var o = this;
   o.Lowest  = 'lowest';
   o.Low     = 'low';
   o.Middle  = 'middle';
   o.High    = 'high';
   o.Highest = 'highest';
   o.Auto    = 'auto';
   return o;
}
MO.MCanvasObject = function MCanvasObject(o){
   o = MO.Class.inherits(this, o);
   o.htmlCanvas = MO.Method.virtual(o, 'htmlCanvas');
   return o;
}
MO.MGraphicObject = function MGraphicObject(o){
   o = MO.Class.inherits(this, o);
   o._graphicContext    = MO.Class.register(o, new MO.AGetter('_graphicContext'));
   o.linkGraphicContext = MO.MGraphicObject_linkGraphicContext;
   o.dispose            = MO.MGraphicObject_dispose;
   return o;
}
MO.MGraphicObject_linkGraphicContext = function MGraphicObject_linkGraphicContext(context){
   var o = this;
   if(MO.Class.isClass(context, MO.FGraphicContext)){
      o._graphicContext = context;
   }else if(MO.Class.isClass(context, MO.MGraphicObject)){
      o._graphicContext = context.graphicContext();
   }else{
      throw new MO.TError(o, 'Link graphic context failure. (context={1})', context);
   }
}
MO.MGraphicObject_dispose = function MGraphicObject_dispose(){
   var o = this;
   o._graphicContext = null;
}
MO.MGraphicRenderable = function MGraphicRenderable(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o.process = MO.Method.empty;
   return o;
}
MO.Graphic = new function MoGraphicSpace(){
   return this;
}
MO.FFloatStream = function FFloatStream(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._length     = MO.Class.register(o, new MO.AGetter('_length'), 0);
   o._memory     = MO.Class.register(o, new MO.AGetter('_memory'), null);
   o._position   = 0;
   o.construct   = MO.FFloatStream_construct;
   o.setLength   = MO.FFloatStream_setLength;
   o.writeFloat4 = MO.FFloatStream_writeFloat4;
   o.writeColor4 = MO.FFloatStream_writeColor4;
   o.reset       = MO.FFloatStream_reset;
   o.clear       = MO.FFloatStream_clear;
   o.dispose     = MO.FFloatStream_dispose;
   return o;
}
MO.FFloatStream_construct = function FFloatStream_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.FFloatStream_setLength = function FFloatStream_setLength(length){
   var o = this;
   o._length = length;
   o._memory = new Float32Array(length);
}
MO.FFloatStream_writeFloat4 = function FFloatStream_writeFloat4(value1, value2, value3, value4){
   var o = this;
   o._memory[o._position++] = value1;
   o._memory[o._position++] = value2;
   o._memory[o._position++] = value3;
   o._memory[o._position++] = value4;
}
MO.FFloatStream_writeColor4 = function FFloatStream_writeColor4(value){
   this.writeFloat4(value.red, value.green, value.blue, value.alpha);
}
MO.FFloatStream_reset = function FFloatStream_reset(){
   this._position = 0;
}
MO.FFloatStream_clear = function FFloatStream_clear(){
   this._position = 0;
}
MO.FFloatStream_dispose = function FFloatStream_dispose(){
   var o = this;
   o._memory = null;
   o.__base.FObject.dispose.call(o);
}
MO.FGraphicContext = function FGraphicContext(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject);
   o._size      = MO.Class.register(o, new MO.AGetter('_size'));
   o._hCanvas   = MO.Class.register(o, new MO.AGetter('_hCanvas', 'htmlCanvas'));
   o.construct  = MO.FGraphicContext_construct;
   o.linkCanvas = MO.Method.virtual(o, 'linkCanvas');
   o.dispose    = MO.FGraphicContext_dispose;
   return o;
}
MO.FGraphicContext_construct = function FGraphicContext_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._size = new MO.SSize2(1280, 720);
}
MO.FGraphicContext_dispose = function FGraphicContext_dispose(){
   var o = this;
   o._size = MO.Lang.Object.dispose(o._size);
   o._hCanvas = null;
   o.__base.FObject.dispose.call(o);
}
MO.SBorder = function SBorder(){
   var o = this;
   o.valid    = false;
   o.left     = new MO.SBorderLine();
   o.top      = new MO.SBorderLine();
   o.right    = new MO.SBorderLine();
   o.bottom   = new MO.SBorderLine();
   o.parse    = MO.SBorder_parse;
   o.toString = MO.SBorder_toString;
   o.dispose  = MO.SBorder_dispose;
   return o;
}
MO.SBorder_parse = function SBorder_parse(source){
   var o = this;
   var items = source.split(',')
   if(items.length == 4){
      o.left.parse(items[0]);
      o.top.parse(items[1]);
      o.right.parse(items[2]);
      o.bottom.parse(items[3]);
   }else{
      throw new MO.TError(o, "Parse value failure. (source={1})", source);
   }
}
MO.SBorder_toString = function SBorder_toString(){
   var o = this;
   return o.left + ',' + o.top + ',' + o.right + ',' + o.bottom;
}
MO.SBorder_dispose = function SBorder_dispose(){
   var o = this;
   o.left = MO.Lang.Object.dispose(o.left)
   o.top = MO.Lang.Object.dispose(o.top)
   o.right = MO.Lang.Object.dispose(o.right)
   o.bottom = MO.Lang.Object.dispose(o.bottom)
}
MO.SBorderLine = function SBorderLine(width, style, color){
   var o = this;
   o.width    = MO.Runtime.nvl(width, 1);
   o.style    = MO.Runtime.nvl(style, 'solid');
   o.color    = MO.Runtime.nvl(color, '#FFFFFF');
   o.parse    = MO.SBorderLine_parse;
   o.toString = MO.SBorderLine_toString;
   o.dispose  = MO.SBorderLine_dispose;
   return o;
}
MO.SBorderLine_parse = function SBorderLine_parse(source){
   var o = this;
   var items = source.split(' ')
   if(items.length == 3){
      o.width = parseInt(items[0]);
      o.style = items[1];
      o.color = items[2];
   }else{
      throw new TError(o, "Parse value failure. (source={1})", source);
   }
}
MO.SBorderLine_toString = function SBorderLine_toString(){
   var o = this;
   return o.width + ' ' + o.style + ' ' + o.color;
}
MO.SBorderLine_dispose = function SBorderLine_dispose(){
   var o = this;
   o.width = null;
   o.style = null;
   o.color = null;
}
MO.FG2dObject = function FG2dObject(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject);
   o.setup   = MO.FG2dObject_setup;
   o.dispose = MO.FG2dObject_dispose;
   return o;
}
MO.FG2dObject_setup = function FG2dObject_setup(){
}
MO.FG2dObject_dispose = function FG2dObject_dispose(){
   var o = this;
   o.__base.MGraphicObject.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FG2dContext = function FG2dContext(o){
   o = MO.Class.inherits(this, o, MO.FGraphicContext);
   o._globalScale = MO.Class.register(o, new MO.AGetter('_globalScale'));
   o._scale       = MO.Class.register(o, new MO.AGetter('_scale'));
   o.construct    = MO.FG2dContext_construct;
   o.linkCanvas   = MO.FG2dContext_linkCanvas;
   o.dispose      = MO.FG2dContext_dispose;
   return o;
}
MO.FG2dContext_construct = function FG2dContext_construct(){
   var o = this;
   o.__base.FGraphicContext.construct.call(o);
   o._globalScale = new MO.SSize2(1, 1);
   o._scale = new MO.SSize2(1, 1);
}
MO.FG2dContext_linkCanvas = function FG2dContext_linkCanvas(hCanvas){
   var o = this;
   o._size.set(hCanvas.width, hCanvas.height);
}
MO.FG2dContext_dispose = function FG2dContext_dispose(){
   var o = this;
   o._globalScale = MO.Lang.Object.dispose(o._globalScale);
   o._scale = MO.Lang.Object.dispose(o._scale);
   o.__base.FGraphicContext.dispose.call(o);
}
MO.FG2dCanvasContext = function FG2dCanvasContext(o) {
   o = MO.Class.inherits(this, o, MO.FG2dContext);
   o._handle              = null;
   o._gridSourceX         = null;
   o._gridSourceY         = null;
   o._gridSourceWidth     = null;
   o._gridSourceHeight    = null;
   o._gridDrawX           = null;
   o._gridDrawY           = null;
   o._gridDrawWidth       = null;
   o._gridDrawHeight      = null;
   o.construct            = MO.FG2dCanvasContext_construct;
   o.linkCanvas           = MO.FG2dCanvasContext_linkCanvas;
   o.setGlobalScale       = MO.FG2dCanvasContext_setGlobalScale;
   o.setScale             = MO.FG2dCanvasContext_setScale;
   o.setAlpha             = MO.FG2dCanvasContext_setAlpha;
   o.setFont              = MO.FG2dCanvasContext_setFont;
   o.store                = MO.FG2dCanvasContext_store;
   o.restore              = MO.FG2dCanvasContext_restore;
   o.prepare              = MO.FG2dCanvasContext_prepare;
   o.clear                = MO.FG2dCanvasContext_clear;
   o.clearRectangle       = MO.FG2dCanvasContext_clearRectangle;
   o.clip                 = MO.FG2dCanvasContext_clip;
   o.textWidth            = MO.FG2dCanvasContext_textWidth;
   o.createLinearGradient = MO.FG2dCanvasContext_createLinearGradient;
   o.drawLine             = MO.FG2dCanvasContext_drawLine;
   o.drawRectangle        = MO.FG2dCanvasContext_drawRectangle;
   o.drawTriangle         = MO.FG2dCanvasContext_drawTriangle;
   o.drawCircle           = MO.FG2dCanvasContext_drawCircle;
   o.drawText             = MO.FG2dCanvasContext_drawText;
   o.drawTextVertical     = MO.FG2dCanvasContext_drawTextVertical;
   o.drawImage            = MO.FG2dCanvasContext_drawImage;
   o.drawGridImage        = MO.FG2dCanvasContext_drawGridImage;
   o.drawQuadrilateral    = MO.FG2dCanvasContext_drawQuadrilateral;
   o.drawBorderLine       = MO.FG2dCanvasContext_drawBorderLine;
   o.drawBorder           = MO.FG2dCanvasContext_drawBorder;
   o.fillRectangle        = MO.FG2dCanvasContext_fillRectangle;
   o.toBytes              = MO.FG2dCanvasContext_toBytes;
   o.saveFile             = MO.FG2dCanvasContext_saveFile;
   o.dispose              = MO.FG2dCanvasContext_dispose;
   return o;
}
MO.FG2dCanvasContext_construct = function FG2dCanvasContext_construct() {
   var o = this;
   o.__base.FG2dContext.construct.call(o);
   o._gridSourceX = new Array(3);
   o._gridSourceY = new Array(3);
   o._gridSourceWidth = new Array(3);
   o._gridSourceHeight = new Array(3);
   o._gridDrawX = new Array(3);
   o._gridDrawY = new Array(3);
   o._gridDrawWidth = new Array(3);
   o._gridDrawHeight = new Array(3);
}
MO.FG2dCanvasContext_linkCanvas = function FG2dCanvasContext_linkCanvas(hCanvas) {
   var o = this;
   o.__base.FG2dContext.linkCanvas.call(o, hCanvas);
   if (hCanvas.getContext) {
      var handle = hCanvas.getContext('2d');
      if (!handle) {
         throw new MO.TError(o, "Current browser can't support Context2D technique.");
      }
      o._handle = handle;
   }
   o._hCanvas = hCanvas;
}
MO.FG2dCanvasContext_setGlobalScale = function FG2dCanvasContext_setGlobalScale(width, height){
   this._globalScale.set(width, height);
}
MO.FG2dCanvasContext_setScale = function FG2dCanvasContext_setScale(width, height){
   var o = this;
   if(!o._scale.equalsData(width, height)){
      o._handle.scale(width, height);
      o._scale.set(width, height);
   }
}
MO.FG2dCanvasContext_setAlpha = function FG2dCanvasContext_setAlpha(alpha){
   var o = this;
   this._handle.globalAlpha = alpha;
}
MO.FG2dCanvasContext_setFont = function FG2dCanvasContext_setFont(font) {
   this._handle.font = font;
}
MO.FG2dCanvasContext_store = function FG2dCanvasContext_store(){
   this._handle.save();
}
MO.FG2dCanvasContext_restore = function FG2dCanvasContext_restore(){
   this._handle.restore();
}
MO.FG2dCanvasContext_prepare = function FG2dCanvasContext_prepare(clearFlag){
   var o = this;
   var handle = o._handle;
   var scale = o._globalScale;
   if(clearFlag){
      var size = o._size;
      handle.setTransform(1, 0, 0, 1, 0, 0);
      handle.clearRect(0, 0, size.width, size.height);
   }
   handle.setTransform(scale.width, 0, 0, scale.height, 0, 0);
}
MO.FG2dCanvasContext_clear = function FG2dCanvasContext_clear(){
   var o = this;
   var size = o._size;
   var handle = o._handle;
   var hCanvas = handle.canvas;
   handle.save();
   handle.setTransform(1, 0, 0, 1, 0, 0);
   o._handle.clearRect(0, 0, size.width, size.height);
   handle.restore();
}
MO.FG2dCanvasContext_clearRectangle = function FG2dCanvasContext_clearRectangle(rectangle){
   this._handle.clearRect(rectangle.left, rectangle.top, rectangle.width, rectangle.height);
}
MO.FG2dCanvasContext_clip = function FG2dCanvasContext_clip(left, top, width, height){
   var o = this;
   var handle = o._handle;
   handle.beginPath();
   handle.rect(left, top, width, height);
   handle.clip();
}
MO.FG2dCanvasContext_textWidth = function FG2dCanvasContext_textWidth(text){
   var info = this._handle.measureText(text);
   return info.width;
}
MO.FG2dCanvasContext_createLinearGradient = function FG2dCanvasContext_createLinearGradient(x1, y1, x2, y2) {
   var o = this;
   var handle = o._handle;
   return handle.createLinearGradient(x1, y1, x2, y2);
}
MO.FG2dCanvasContext_drawLine = function FG2dCanvasContext_drawLine(x1, y1, x2, y2, color, lineWidth) {
   var o = this;
   var handle = o._handle;
   handle.strokeStyle = color;
   handle.lineWidth = lineWidth;
   handle.beginPath();
   handle.moveTo(x1, y1);
   handle.lineTo(x2, y2);
   handle.closePath();
   handle.stroke();
}
MO.FG2dCanvasContext_drawRectangle = function FG2dCanvasContext_drawRectangle(x, y, width, height, color, lineWidth) {
   var o = this;
   var handle = o._handle;
   handle.strokeStyle = color;
   handle.lineWidth = lineWidth;
   handle.strokeRect(x, y, width, height);
}
MO.FG2dCanvasContext_drawText = function FG2dCanvasContext_drawText(text, x, y, color) {
   var o = this;
   var handle = o._handle;
   handle.fillStyle = color;
   handle.fillText(text, x, y);
}
MO.FG2dCanvasContext_drawTextVertical = function FG2dCanvasContext_drawTextVertical(text, x, y, font) {
   var o = this;
   var handle = o._handle;
   handle.font = font.toString();
   handle.fillStyle = font.color;
   for (var i = 0; i < text.length; i++) {
      handle.fillText(text.charAt(i), x, y);
      y += font.size + parseInt(font.size / 5);
   }
}
MO.FG2dCanvasContext_drawImage = function FG2dCanvasContext_drawImage(content, x, y, width, height){
   var o = this;
   var handle = o._handle;
   var size = o._size;
   var data = null
   if(content.tagName == 'IMG'){
      data = content;
   }else if(MO.Class.isClass(content, MO.FImage)){
      if(!content.testReady()){
         return;
      }
      data = content.image();
      if(width == null){
         width = data.size().width;
      }
      if(height == null){
         height = data.size().height;
      }
   }else{
      throw new MO.TError(o, 'Unknown content type');
   }
   handle.drawImage(data, x, y, width, height);
}
MO.FG2dCanvasContext_drawGridImage = function FG2dCanvasContext_drawGridImage(content, x, y, width, height, padding) {
   var o = this;
   var handle = o._handle;
   var data = null
   if (MO.Class.isClass(content, MO.FImage)) {
      if(!content.testReady()){
         return;
      }
      data = content.image();
   } else {
      throw new TError(o, 'Unknown content type');
   }
   var ssize = content.size();
   var sx = o._gridSourceX;
   sx[0] = 0;
   sx[1] = padding.left;
   sx[2] = ssize.width - padding.right;
   var sy = o._gridSourceY;
   sy[0] = 0;
   sy[1] = padding.top;
   sy[2] = ssize.height - padding.bottom;
   var dx = o._gridDrawX;
   dx[0] = x;
   dx[1] = x + padding.left;
   dx[2] = x + width - padding.right;
   var dy = o._gridDrawY;
   dy[0] = y;
   dy[1] = y + padding.top;
   dy[2] = y + height - padding.bottom;
   var sw = o._gridSourceWidth;
   sw[0] = padding.left;
   sw[1] = ssize.width - padding.left - padding.right;
   sw[2] = padding.right;
   var sh = o._gridSourceHeight;
   sh[0] = padding.top;
   sh[1] = ssize.height - padding.top - padding.bottom;
   sh[2] = padding.bottom;
   var dw = o._gridDrawWidth;
   dw[0] = padding.left;
   dw[1] = width - padding.left - padding.right;
   dw[2] = padding.right;
   var dh = o._gridDrawHeight;
   dh[0] = padding.top;
   dh[1] = height - padding.top - padding.bottom;
   dh[2] = padding.bottom;
   for (var i = 0; i < 9; i++) {
      var row = parseInt(i / 3);
      var column = i % 3;
      if (dh[row] > 0 && dw[column] > 0) {
         handle.drawImage(data, sx[column], sy[row], sw[column], sh[row], dx[column], dy[row], dw[column], dh[row]);
      }
   }
}
MO.FG2dCanvasContext_drawImageRectangle = function FG2dCanvasContext_drawImageRectangle(content, rectangle){
   return this.drawImage(content, rectangle.left, rectangle.top, rectangle.width, rectangle.height);
}
MO.FG2dCanvasContext_drawBorderLine = function FG2dCanvasContext_drawBorderLine(x1, y1, x2, y2, borderLine){
   var o = this;
   var handle = o._handle;
   handle.strokeStyle = borderLine.color;
   handle.lineWidth = borderLine.width;
   handle.beginPath();
   handle.moveTo(x1 + 0.5, y1 + 0.5);
   handle.lineTo(x2 + 0.5, y2 + 0.5);
   handle.closePath();
   handle.stroke();
}
MO.FG2dCanvasContext_drawBorder = function FG2dCanvasContext_drawBorder(rectangle, border) {
   var o = this;
   var left = rectangle.left;
   var top = rectangle.top;
   var right = rectangle.left + rectangle.width - 1;
   var bottom = rectangle.top + rectangle.height - 1;
   o.drawBorderLine(left, bottom, left, top, border.left);
   o.drawBorderLine(left - 0.5, top, right + 0.5, top, border.top);
   o.drawBorderLine(right, top, right, bottom, border.right);
   o.drawBorderLine(left - 0.5, bottom, right + 0.5, bottom, border.bottom);
}
MO.FG2dCanvasContext_fillRectangle = function FG2dCanvasContext_fillRectangle(x, y, width, height, color) {
   var o = this;
   var handle = o._handle;
   handle.fillStyle = color;
   handle.beginPath();
   handle.fillRect(x, y, width, height);
   handle.closePath();
}
MO.FG2dCanvasContext_drawQuadrilateral = function FG2dCanvasContext_drawQuadrilateral(x1, y1, x2, y2, x3, y3, x4, y4, lineWidth, strokeColor, fillColor) {
   var o = this;
   var handle = o._handle;
   handle.beginPath();
   handle.lineWidth = lineWidth;
   handle.strokeStyle = strokeColor;
   handle.fillStyle = fillColor;
   handle.moveTo(x1 + 0.5, y1 + 0.5);
   handle.lineTo(x2 + 0.5, y2 + 0.5);
   handle.lineTo(x3 + 0.5, y3 + 0.5);
   handle.lineTo(x4 + 0.5, y4 + 0.5);
   handle.lineTo(x1 + 0.5, y1 + 0.5);
   handle.closePath();
   if(lineWidth != null && strokeColor != null){
      handle.stroke();
   }
   if (fillColor != null) {
      handle.fill();
   }
}
MO.FG2dCanvasContext_drawTriangle = function FG2dCanvasContext_drawTriangle(x1, y1, x2, y2, x3, y3, lineWidth, strokeColor, fillColor) {
   var o = this;
   var handle = o._handle;
   handle.lineWidth = lineWidth;
   handle.strokeStyle = strokeColor;
   handle.fillStyle = fillColor;
   handle.beginPath();
   handle.moveTo(x1 + 0.5, y1 + 0.5);
   handle.lineTo(x2 + 0.5, y2 + 0.5);
   handle.lineTo(x3 + 0.5, y3 + 0.5);
   handle.closePath();
   handle.fill();
   handle.stroke();
}
MO.FG2dCanvasContext_drawCircle = function FG2dCanvasContext_drawCircle(x, y, radius, lineWidth, strokeColor, fillColor) {
   var o = this;
   var handle = o._handle;
   handle.lineWidth = lineWidth;
   handle.strokeStyle = strokeColor;
   handle.fillStyle = fillColor;
   handle.beginPath();
   handle.arc(x, y, radius, 0, 2 * Math.PI, false);
   handle.closePath();
   if (fillColor || fillColor != '') {
      handle.fill();
   }
   if (strokeColor || strokeColor != '') {
      handle.stroke();
   }
}
MO.FG2dCanvasContext_toBytes = function FG2dCanvasContext_toBytes() {
   var o = this;
   var size = o._size;
   return o._handle.getImageData(0, 0, size.width, size.height);
}
MO.FG2dCanvasContext_saveFile = function FG2dCanvasContext_saveFile(fileName, extention){
   var o = this;
   var handle = context2d._handle;
   var hCanvas = handle.canvas;
   var imageUrl = hCanvas.toDataURL("image/" + extention);
   var link = document.createElement('A');
   var event = document.createEvent("MouseEvents");
   event.initEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
   link.download = fileName;
   link.href = imageUrl;
   link.dispatchEvent(event);
}
MO.FG2dCanvasContext_dispose = function FG2dCanvasContext_dispose() {
   var o = this;
   o._handle = null;
   o._gridSourceX = null;
   o._gridSourceY = null;
   o._gridSourceWidth = null;
   o._gridSourceHeight = null;
   o._gridDrawX = null;
   o._gridDrawY = null;
   o._gridDrawWidth = null;
   o._gridDrawHeight = null;
   o.__base.FG2dContext.dispose.call(o);
}
MO.EG3dMaterialMap = new function EG3dMaterialMap(){
   var o = this;
   o.AmbientColor = 0;
   o.DiffuseColor = 1;
   o.SpecularColor = 2;
   o.ReflectColor = 3;
   o.EmissiveColor = 4;
   o.Count = 8;
   return o;
}
MO.EG3dRegionParameter = new function EG3dRegionParameter(){
   var o = this;
   o.Unknown                    = 0;
   o.CameraPosition             = 1;
   o.CameraDirection            = 2;
   o.CameraViewMatrix           = 3;
   o.CameraProjectionMatrix     = 4;
   o.CameraViewProjectionMatrix = 5;
   o.LightPosition              = 6;
   o.LightDirection             = 7;
   o.LightViewMatrix            = 8;
   o.LightProjectionMatrix      = 9;
   o.LightViewProjectionMatrix  = 10;
   o.LightInfo                  = 11;
   return o;
}
MO.EG3dTechniqueMode = new function EG3dTechniqueMode(){
   var o = this;
   o.Color         = 'color';
   o.Ambient       = 'ambient';
   o.DiffuseLevel  = 'diffuse.level';
   o.DiffuseColor  = 'diffuse.color';
   o.SpecularLevel = 'specular.level';
   o.SpecularColor = 'specular.color';
   o.Reflect       = 'reflect';
   o.Emissive      = 'emissive';
   o.Result        = 'result';
   return o;
}
MO.MG3dRegion = function MG3dRegion(o){
   o = MO.Class.inherits(this, o);
   o._changed                    = false;
   o._spaceName                  = MO.Class.register(o, new MO.AGetter('_spaceName'));
   o._technique                  = MO.Class.register(o, new MO.AGetSet('_technique'));
   o._techniquePass              = MO.Class.register(o, new MO.AGetter('_techniquePass'));
   o._camera                     = MO.Class.register(o, new MO.AGetter('_camera'));
   o._projection                 = null;
   o._directionalLight           = MO.Class.register(o, new MO.AGetter('_directionalLight'));
   o._lights                     = MO.Class.register(o, new MO.AGetter('_lights'));
   o._allRenderables             = MO.Class.register(o, new MO.AGetter('_allRenderables'));
   o._renderables                = MO.Class.register(o, new MO.AGetter('_renderables'));
   o._ratioMatrix                = null;
   o._cameraPosition             = null;
   o._cameraDirection            = null;
   o._cameraViewMatrix           = null;
   o._cameraProjectionMatrix     = null;
   o._cameraViewProjectionMatrix = null;
   o._lightPosition              = null;
   o._lightDirection             = null;
   o._lightViewMatrix            = null;
   o._lightProjectionMatrix      = null;
   o._lightViewProjectionMatrix  = null;
   o._lightInfo                  = null;
   o.construct                   = MO.MG3dRegion_construct;
   o.isChanged                   = MO.MG3dRegion_isChanged;
   o.setTechniquePass            = MO.MG3dRegion_setTechniquePass;
   o.pushRenderable              = MO.MG3dRegion_pushRenderable;
   o.setup                       = MO.MG3dRegion_setup;
   o.change                      = MO.MG3dRegion_change;
   o.prepare                     = MO.MG3dRegion_prepare;
   o.reset                       = MO.MG3dRegion_reset;
   o.calculate                   = MO.MG3dRegion_calculate;
   o.update                      = MO.MG3dRegion_update;
   o.dispose                     = MO.MG3dRegion_dispose;
   return o;
}
MO.MG3dRegion_construct = function MG3dRegion_construct(){
   var o = this;
   o._lights = new MO.TObjects();
   o._renderables = new MO.TObjects();
   o._allRenderables = new MO.TObjects();
   o._ratioMatrix = new MO.SMatrix3d();
   o._cameraPosition = new MO.SPoint3();
   o._cameraDirection = new MO.SVector3();
   o._cameraViewMatrix = new MO.SMatrix3d();
   o._cameraProjectionMatrix = new MO.SMatrix3d();
   o._cameraViewProjectionMatrix = new MO.SMatrix3d();
   o._lightPosition = new MO.SPoint3();
   o._lightDirection = new MO.SVector3();
   o._lightViewMatrix = new MO.SMatrix3d();
   o._lightProjectionMatrix = new MO.SMatrix3d();
   o._lightViewProjectionMatrix = new MO.SMatrix3d();
   o._lightInfo = new MO.SVector4();
}
MO.MG3dRegion_isChanged = function MG3dRegion_isChanged(){
   return this._changed;
}
MO.MG3dRegion_setTechniquePass = function MG3dRegion_setTechniquePass(p, f){
   var o = this;
   o._techniquePass = p;
   o._spaceName = p.fullCode();
   o._finish = f;
}
MO.MG3dRegion_pushRenderable = function MG3dRegion_pushRenderable(p){
   var o = this;
   o._renderables.push(p);
   o._allRenderables.push(p);
}
MO.MG3dRegion_setup = function MG3dRegion_setup(){
   var o = this;
}
MO.MG3dRegion_change = function MG3dRegion_change(){
   this._changed = true;
}
MO.MG3dRegion_prepare = function MG3dRegion_prepare(){
   var o = this;
   o._changed = false;
   var camera = o._camera;
   var projection = camera.projection();
   camera.updateFrustum();
   var pixelRatio = MO.Window.Browser.capability().pixelRatio;
   var ratioMatrix = o._ratioMatrix.identity();
   o._cameraPosition.assign(camera.position());
   o._cameraDirection.assign(camera.direction());
   o._cameraViewMatrix.assign(camera.matrix());
   o._cameraProjectionMatrix.assign(projection.matrix());
   o._cameraViewProjectionMatrix.assign(camera.matrix());
   o._cameraViewProjectionMatrix.append(projection.matrix());
   var light = o._directionalLight;
   var lc = light.camera();
   var lcp = lc.position();
   o._lightPosition.assign(lc.position());
   o._lightDirection.assign(lc.direction());
   o._lightViewMatrix.assign(lc.matrix());
   o._allRenderables.clear();
}
MO.MG3dRegion_reset = function MG3dRegion_reset(){
   var o = this;
   o._renderables.clear();
}
MO.MG3dRegion_calculate = function MG3dRegion_calculate(parameterCd){
   var o = this;
   switch(parameterCd){
      case MO.EG3dRegionParameter.CameraPosition:
         return o._cameraPosition;
      case MO.EG3dRegionParameter.CameraDirection:
         return o._cameraDirection;
      case MO.EG3dRegionParameter.CameraViewMatrix:
         return o._cameraViewMatrix;
      case MO.EG3dRegionParameter.CameraProjectionMatrix:
         return o._cameraProjectionMatrix;
      case MO.EG3dRegionParameter.CameraViewProjectionMatrix:
         return o._cameraViewProjectionMatrix;
      case MO.EG3dRegionParameter.LightPosition:
         return o._lightPosition;
      case MO.EG3dRegionParameter.LightDirection:
         return o._lightDirection;
      case MO.EG3dRegionParameter.LightViewMatrix:
         return o._lightViewMatrix;
      case MO.EG3dRegionParameter.LightProjectionMatrix:
         return o._lightProjectionMatrix;
      case MO.EG3dRegionParameter.LightViewProjectionMatrix:
         return o._lightViewProjectionMatrix;
      case MO.EG3dRegionParameter.LightInfo:
         return o._lightInfo;
   }
   throw new MO.TError(o, 'Unknown parameter type. (type_cd={1})', parameterCd);
}
MO.MG3dRegion_update = function MG3dRegion_update(){
   var o = this;
   var renderables = o._renderables;
   var count = renderables.count();
   for(var i = 0; i < count; i++){
      var renderable = renderables.at(i);
      renderable.update(o);
   }
}
MO.MG3dRegion_dispose = function MG3dRegion_dispose(){
   var o = this;
   o._ratioMatrix = MO.Lang.Object.free(o._ratioMatrix);
   o._renderables = MO.Lang.Object.free(o._renderables);
   o._allRenderables = MO.Lang.Object.free(o._allRenderables);
}
MO.MG3dRenderable = function MG3dRenderable(o){
   o = MO.Class.inherits(this, o, MO.MGraphicRenderable);
   o._optionMerge   = MO.Class.register(o, new MO.AGetSet('_optionMerge'), false);
   o._optionFull    = MO.Class.register(o, new MO.AGetSet('_optionFull'), false);
   o._optionSelect  = MO.Class.register(o, new MO.AGetSet('_optionSelect'), true);
   o._currentMatrix = MO.Class.register(o, new MO.AGetter('_currentMatrix'));
   o._matrix        = MO.Class.register(o, new MO.AGetter('_matrix'));
   o._material      = MO.Class.register(o, new MO.AGetSet('_material'));
   o._activeInfo    = MO.Class.register(o, new MO.AGetter('_activeInfo'));
   o._infos         = null;
   o.construct      = MO.MG3dRenderable_construct;
   o.activeEffect   = MO.MG3dRenderable_activeEffect;
   o.effectFind     = MO.MG3dRenderable_effectFind;
   o.effectSet      = MO.MG3dRenderable_effectSet;
   o.infos          = MO.MG3dRenderable_infos;
   o.selectInfo     = MO.MG3dRenderable_selectInfo;
   o.resetInfos     = MO.MG3dRenderable_resetInfos;
   o.testVisible    = MO.Method.emptyTrue;
   o.update         = MO.Method.empty;
   o.dispose        = MO.MG3dRenderable_dispose;
   return o;
}
MO.MG3dRenderable_construct = function MG3dRenderable_construct(){
   var o = this;
   o._currentMatrix = new MO.SMatrix3d();
   o._matrix = new MO.SMatrix3d();
}
MO.MG3dRenderable_activeEffect = function MG3dRenderable_activeEffect(){
   var info = this._activeInfo;
   return info ? info.effect : null;
}
MO.MG3dRenderable_effectFind = function MG3dRenderable_effectFind(code){
   var o = this;
   var infos = o._infos;
   if(infos){
      var info = infos.get(code);
      if(info){
         return info.effect;
      }
   }
   return null;
}
MO.MG3dRenderable_effectSet = function MG3dRenderable_effectSet(code, effect){
   var o = this;
   var infos = o.infos();
   var info = infos.get(code);
   if(!info){
      info = new MO.SG3dRenderableInfo();
      infos.set(code, info)
   }
   info.effect = effect;
}
MO.MG3dRenderable_infos = function MG3dRenderable_infos(){
   var o = this;
   var infos = o._infos;
   if(!infos){
      infos = o._infos = new MO.TDictionary();
   }
   return infos;
}
MO.MG3dRenderable_selectInfo = function MG3dRenderable_selectInfo(code){
   var o = this;
   var infos = o.infos();
   var info = infos.get(code);
   if(!info){
      info = new MO.SG3dRenderableInfo();
      infos.set(code, info)
   }
   o._activeInfo = info;
   return info;
}
MO.MG3dRenderable_resetInfos = function MG3dRenderable_resetInfos(){
   var o = this;
   var infos = o._infos;
   if(infos){
      var count = infos.count();
      for(var i = 0; i < count; i++){
         var info = infos.at(i);
         info.reset();
      }
   }
}
MO.MG3dRenderable_dispose = function MG3dRenderable_dispose(){
   var o = this;
   o._currentMatrix = MO.Lang.Object.dispose(o._currentMatrix);
   o._matrix = MO.Lang.Object.dispose(o._matrix);
   o._material = MO.Lang.Object.dispose(o._material);
   o._activeInfo = null;
   o._infos = MO.Lang.Object.dispose(o._infos);
}
MO.SG3dEffectInfo = function SG3dEffectInfo(){
   var o = this;
   o.code                  = null;
   o.techniqueCode         = null;
   o.techniqueModeCode     = null;
   o.optionMerge           = null;
   o.mergeCount            = null;
   o.fillModeCd            = null;
   o.optionCullMode        = null;
   o.cullModeCd            = null;
   o.optionDepthTest       = null;
   o.depthModeCd           = null;
   o.optionDepthWrite      = null;
   o.optionBlendMode       = null;
   o.blendSourceMode       = null;
   o.blendTargetMode       = null;
   o.optionAlphaTest       = null;
   o.optionNormalInvert    = null;
   o.optionNormalCompress  = null;
   o.supportInstance       = null;
   o.vertexCount           = 0;
   o.vertexColor           = null;
   o.vertexCoord           = null;
   o.vertexNormal          = null;
   o.vertexNormalFull      = null;
   o.vertexSkeleton        = null;
   o.vertexBoneCount       = 0;
   o.fragmentAlpha         = null;
   o.fragmentBump          = null;
   o.fragmentAmbient       = null;
   o.fragmentDiffuse       = null;
   o.fragmentDiffuseView   = null;
   o.fragmentSpecularColor = null;
   o.fragmentSpecularLevel = null;
   o.fragmentSpecularView  = null;
   o.fragmentEnvironment   = null;
   o.fragmentLight         = null;
   o.fragmentReflect       = null;
   o.fragmentRefract       = null;
   o.fragmentEmissive      = null;
   o.fragmentHeight        = null;
   o.attributes            = new MO.TArray();
   o.samplers              = new MO.TArray();
   o.attributeContains     = MO.SG3dEffectInfo_attributeContains;
   o.samplerContains       = MO.SG3dEffectInfo_samplerContains;
   o.reset                 = MO.SG3dEffectInfo_reset;
   o.reset();
   return o;
}
MO.SG3dEffectInfo_attributeContains = function SG3dEffectInfo_attributeContains(p){
   return this.attributes.contains(p);
}
MO.SG3dEffectInfo_samplerContains = function SG3dEffectInfo_samplerContains(p){
   return this.samplers.contains(p);
}
MO.SG3dEffectInfo_reset = function SG3dEffectInfo_reset(){
   var o = this;
   o.code = null;
   o.optionMerge = false;
   o.mergeCount = 0;
   o.fillModeCd = MO.EG3dFillMode.Fill;
   o.optionCullMode = true;
   o.cullModeCd = MO.EG3dCullMode.Front;
   o.optionDepthTest = true;
   o.depthModeCd = MO.EG3dDepthMode.Less;
   o.optionDepthWrite = true;
   o.optionBlendMode = false;
   o.blendSourceMode = MO.EG3dBlendMode.SourceAlpha;
   o.blendTargetMode = MO.EG3dBlendMode.OneMinusSourceAlpha;
   o.optionAlphaTest = false;
   o.optionNormalInvert = false;
   o.optionNormalCompress = true;
   o.supportInstance = false;
   o.vertexCount = 0;
   o.vertexColor = false;
   o.vertexCoord = false;
   o.vertexNormal = false;
   o.vertexNormalFull = false;
   o.vertexSkeleton = false;
   o.vertexBoneCount = 0;
   o.fragmentAlpha = false;
   o.fragmentBump = false;
   o.fragmentAmbient = false;
   o.fragmentDiffuse = false;
   o.fragmentDiffuseView = false;
   o.fragmentSpecularColor = false;
   o.fragmentSpecularLevel = false;
   o.fragmentSpecularView = false;
   o.fragmentEnvironment = false;
   o.fragmentLight = false;
   o.fragmentReflect = false;
   o.fragmentRefract = false;
   o.fragmentEmissive = false;
   o.fragmentHeight = false;
   o.attributes.clear();
   o.samplers.clear();
}
MO.SG3dMaterialInfo = function SG3dMaterialInfo(){
   var o = this;
   o.effectCode           = 'automatic';
   o.optionDepth          = null;
   o.optionDouble         = null;
   o.optionNormalInvert   = null;
   o.optionShadow         = null;
   o.optionShadowSelf     = null;
   o.optionAlpha          = null;
   o.alphaBase            = 1.0;
   o.alphaRate            = 1.0;
   o.alphaLevel           = 1.0;
   o.alphaMerge           = 1.0;
   o.optionColor          = null;
   o.colorMin             = 0.0;
   o.colorMax             = 1.0;
   o.colorBalance         = 0.5;
   o.colorRate            = 1.0;
   o.optionVertex         = null;
   o.vertexColor          = new MO.SColor4();
   o.optionAmbient        = null;
   o.ambientColor         = new MO.SColor4();
   o.ambientShadow        = 1.0;
   o.optionDiffuse        = null;
   o.diffuseColor         = new MO.SColor4();
   o.diffuseShadow        = 1.0;
   o.optionDiffuseView    = null;
   o.diffuseViewColor     = new MO.SColor4();
   o.diffuseViewShadow    = 1.0;
   o.optionSpecular       = null;
   o.specularColor        = new MO.SColor4();
   o.specularBase         = 1.0;
   o.specularLevel        = 1.0;
   o.specularAverage      = 1.0;
   o.specularShadow       = 1.0;
   o.specularInfo         = null;
   o.optionSpecularView   = null;
   o.specularViewColor    = new MO.SColor4();
   o.specularViewBase     = 1.0;
   o.specularViewRate     = 1.0;
   o.specularViewAverage  = 1.0;
   o.specularViewShadow   = 1.0;
   o.specularViewShadow   = null;
   o.optionReflect        = null;
   o.reflectColor         = new MO.SColor4();
   o.reflectMerge         = 1.0;
   o.reflectShadow        = 1.0;
   o.optionRefract        = null;
   o.refractFrontColor    = new MO.SColor4();
   o.refractBackColor     = new MO.SColor4();
   o.optionOpacity        = null;
   o.opacityColor         = new MO.SColor4();
   o.opacityRate          = 1.0;
   o.opacityAlpha         = 1.0;
   o.opacityDepth         = 1.0;
   o.opacityTransmittance = 1.0;
   o.optionEmissive       = null;
   o.emissiveColor        = new MO.SColor4();
   o.assign               = MO.SG3dMaterialInfo_assign;
   o.calculate            = MO.SG3dMaterialInfo_calculate;
   o.reset                = MO.SG3dMaterialInfo_reset;
   o.reset();
   return o;
}
MO.SG3dMaterialInfo_assign = function SG3dMaterialInfo_assign(info){
   var o = this;
   o.effectCode = info.effectCode;
   o.transformName = info.transformName;
   o.optionDepth = info.optionDepth;
   o.optionDouble = info.optionDouble;
   o.optionNormalInvert = info.optionNormalInvert;
   o.optionShadow = info.optionShadow;
   o.optionShadowSelf = info.optionShadowSelf;
   o.optionAlpha = info.optionAlpha;
   o.alphaBase = info.alphaBase;
   o.alphaRate = info.alphaRate;
   o.alphaLevel = info.alphaLevel;
   o.alphaMerge = info.alphaMerge;
   o.optionColor = info.optionColor;
   o.colorMin = info.colorMin;
   o.colorMax = info.colorMax;
   o.colorBalance = info.colorBalance;
   o.colorRate = info.colorRate;
   o.optionVertex = info.optionVertex;
   o.vertexColor.assign(info.vertexColor);
   o.optionAmbient = info.optionAmbient;
   o.ambientColor.assign(info.ambientColor);
   o.ambientShadow = info.ambientShadow;
   o.optionDiffuse = info.optionDiffuse;
   o.diffuseColor.assign(info.diffuseColor);
   o.diffuseShadow = info.diffuseShadow;
   o.optionDiffuseView = info.optionDiffuseView;
   o.diffuseViewColor.assign(info.diffuseViewColor);
   o.diffuseViewShadow = info.diffuseViewShadow;
   o.optionSpecular = info.optionSpecular;
   o.specularColor.assign(info.specularColor);
   o.specularBase = info.specularBase;
   o.specularLevel = info.specularLevel;
   o.specularAverage = info.specularAverage;
   o.specularShadow = info.specularShadow;
   o.optionSpecularView = info.optionSpecularView;
   o.specularViewColor.assign(info.specularViewColor);
   o.specularViewBase = info.specularViewBase;
   o.specularViewRate = info.specularViewRate;
   o.specularViewAverage = info.specularViewAverage;
   o.specularViewShadow = info.specularViewShadow;
   o.optionReflect = info.optionReflect;
   o.reflectColor.assign(info.reflectColor);
   o.reflectMerge = MO.Lang.Float.toRange(info.reflectMerge, 0, 2);
   o.reflectShadow = info.reflectShadow;
   o.optionRefract = info.optionRefract;
   o.refractFrontColor.assign(info.refractFrontColor);
   o.refractFrontMerge = info.refractFrontMerge;
   o.refractFrontShadow = info.refractFrontShadow;
   o.refractBackColor.assign(info.refractBackColor);
   o.refractBackMerge = info.refractBackMerge;
   o.refractBackShadow = info.refractBackShadow;
   o.optionOpacity = info.optionOpacity;
   o.opacityColor.assign(info.opacityColor);
   o.opacityRate = info.opacityRate;
   o.opacityAlpha = info.optionAlpha;
   o.opacityDepth = info.optionDepth;
   o.opacityTransmittance = info.optionTransmittance;
   o.optionEmissive = info.optionEmissive;
   o.emissiveColor.assign(info.emissiveColor);
}
MO.SG3dMaterialInfo_calculate = function SG3dMaterialInfo_calculate(info){
   var o = this;
   o.effectCode = info.effectCode;
   o.transformName = info.transformName;
   o.optionDepth = info.optionDepth;
   o.optionDouble = info.optionDouble;
   o.optionNormalInvert = info.optionNormalInvert;
   o.optionShadow = info.optionShadow;
   o.optionShadowSelf = info.optionShadowSelf;
   o.optionAlpha = info.optionAlpha;
   o.alphaBase = info.alphaBase;
   o.alphaRate = info.alphaRate;
   o.alphaLevel = info.alphaLevel;
   o.alphaMerge = info.alphaMerge;
   o.optionColor = info.optionColor;
   o.colorMin = info.colorMin;
   o.colorMax = info.colorMax;
   o.colorBalance = info.colorBalance;
   o.colorRate = info.colorRate;
   o.optionVertex = info.optionVertex;
   o.vertexColor.assignPower(info.vertexColor);
   o.optionAmbient = info.optionAmbient;
   o.ambientColor.assignPower(info.ambientColor);
   o.ambientShadow = info.ambientShadow;
   o.optionDiffuse = info.optionDiffuse;
   o.diffuseColor.assignPower(info.diffuseColor);
   o.diffuseShadow = info.diffuseShadow;
   o.optionDiffuseView = info.optionDiffuseView;
   o.diffuseViewColor.assignPower(info.diffuseViewColor);
   o.diffuseViewShadow = info.diffuseViewShadow;
   o.optionSpecular = info.optionSpecular;
   o.specularColor.assignPower(info.specularColor);
   o.specularBase = info.specularBase;
   o.specularLevel = info.specularLevel;
   o.specularAverage = info.specularAverage;
   o.specularShadow = info.specularShadow;
   o.optionSpecularView = info.optionSpecularView;
   o.specularViewColor.assignPower(info.specularViewColor);
   o.specularViewBase = info.specularViewBase;
   o.specularViewRate = info.specularViewRate;
   o.specularViewAverage = info.specularViewAverage;
   o.specularViewShadow = info.specularViewShadow;
   o.optionReflect = info.optionReflect;
   o.reflectColor.assignPower(info.reflectColor);
   o.reflectMerge = MO.Lang.Float.toRange(info.reflectMerge, 0, 2);
   o.reflectShadow = info.reflectShadow;
   o.optionRefract = info.optionRefract;
   o.refractFrontColor.assignPower(info.refractFrontColor);
   o.refractFrontMerge = info.refractFrontMerge;
   o.refractFrontShadow = info.refractFrontShadow;
   o.refractBackColor.assignPower(info.refractBackColor);
   o.refractBackMerge = info.refractBackMerge;
   o.refractBackShadow = info.refractBackShadow;
   o.optionOpacity = info.optionOpacity;
   o.opacityColor.assignPower(info.opacityColor);
   o.opacityRate = info.opacityRate;
   o.opacityAlpha = info.optionAlpha;
   o.opacityDepth = info.optionDepth;
   o.opacityTransmittance = info.optionTransmittance;
   o.optionEmissive = info.optionEmissive;
   o.emissiveColor.assignPower(info.emissiveColor);
}
MO.SG3dMaterialInfo_reset = function SG3dMaterialInfo_reset(){
   var o = this;
   o.optionDepth = true;
   o.optionDouble = false;
   o.optionNormalInvert = false;
   o.optionShadow = true;
   o.optionShadowSelf = true;
   o.optionAlpha = false;
   o.alphaBase = 0.2;
   o.alphaRate = 1;
   o.alphaLevel = 1;
   o.alphaMerge = 1;
   o.optionColor = true;
   o.colorMin = 0;
   o.colorMax = 1;
   o.colorBalance = 0.5;
   o.colorRate = 1;
   o.optionVertex = true;
   o.vertexColor.set(1, 1, 1, 1);
   o.optionAmbient = true;
   o.ambientColor.set(0.5, 0.5, 0.5, 1);
   o.ambientShadow = 1;
   o.optionDiffuse = true;
   o.diffuseColor.set(0.5, 0.5, 0.5, 1);
   o.diffuseShadow = 1;
   o.optionDiffuseView = true;
   o.diffuseViewColor.set(1, 1, 1, 1);
   o.diffuseViewShadow = 1;
   o.optionSpecular = true;
   o.specularColor.set(0.5, 0.5, 0.5, 1);
   o.specularBase = 0;
   o.specularLevel = 16;
   o.specularAverage = 1;
   o.specularShadow = 1;
   o.optionSpecularView = true;
   o.specularViewColor.set(1, 1, 1, 1);
   o.specularViewBase = 0;
   o.specularViewRate = 16;
   o.specularViewAverage = 1;
   o.specularViewShadow = 1;
   o.optionReflect = true;
   o.reflectColor.set(1, 1, 1, 1);
   o.reflectMerge = 1;
   o.reflectShadow = 1;
   o.optionRefract = true;
   o.refractFrontColor.set(1, 1, 1, 1);
   o.refractFrontMerge = 1;
   o.refractFrontShadow = 1;
   o.refractBackColor.set(1, 1, 1, 1);
   o.refractBackMerge = 1;
   o.refractBackShadow = 1;
   o.optionOpacity = true;
   o.opacityColor.set(1, 1, 1, 1);
   o.opacityRate = 1;
   o.opacityAlpha = 1;
   o.opacityDepth = 1;
   o.opacityTransmittance = 1;
   o.optionEmissive = true;
   o.emissiveColor.set(1, 1, 1, 1);
}
MO.SG3dRenderableInfo = function SG3dRenderableInfo(){
   var o = this;
   o.effect   = null;
   o.layout   = null;
   o.material = null;
   o.reset    = MO.SG3dRenderableInfo_reset;
   return o;
}
MO.SG3dRenderableInfo_reset = function SG3dRenderableInfo_reset(){
   var o = this;
   o.effect = null;
   o.layout = MO.Lang.Object.dispose(o.layout);
}
MO.FG3dAnimation = function FG3dAnimation(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._baseTick    = 0;
   o._currentTick = 0;
   o._lastTick    = 0
   o._bones       = null;
   o.construct    = MO.FG3dAnimation_construct;
   o.findBone     = MO.FG3dAnimation_findBone;
   o.process      = MO.FG3dAnimation_process;
   o.dispose      = MO.FG3dAnimation_dispose;
   return o;
}
MO.FG3dAnimation_construct = function FG3dAnimation_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._bones = new MO.TObjects();
}
MO.FG3dAnimation_findBone = function FG3dAnimation_findBone(p){
   var o = this;
   var bs = o._bones;
   var c = bs.count();
   for(var i = 0; i < c; i++){
      var b = bs.get(i);
      if(b.boneId() == p){
         return b;
      }
   }
   return null;
}
MO.FG3dAnimation_process = function FG3dAnimation_process(){
   var o = this;
   var t = MO.Timer.current();
   if(o._lastTick == 0){
      o._lastTick = t;
   }
   o._currentTick = (t - o._lastTick + o._baseTick) / 1000;
   var bs = o._bones;
   var c = bs.count();
   for(var i = 0; i < c; i++){
      var b = bs.get(i);
      b.update(o._currentTick);
   }
   return true;
}
MO.FG3dAnimation_dispose = function FG3dAnimation_dispose(){
   var o = this;
   o._bones.dispose();
   o._bones = null;
   o.__base.FObject.dispose.call(o);
}
MO.FG3dBaseMaterial = function FG3dBaseMaterial(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._name       = null;
   o._info       = MO.Class.register(o, new MO.AGetter('_info'));
   o.construct   = MO.FG3dBaseMaterial_construct;
   o.assignInfo  = MO.FG3dBaseMaterial_assignInfo;
   o.assign      = MO.FG3dBaseMaterial_assign;
   o.calculate   = MO.FG3dBaseMaterial_calculate;
   return o;
}
MO.FG3dBaseMaterial_construct = function FG3dBaseMaterial_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._info = new MO.SG3dMaterialInfo();
}
MO.FG3dBaseMaterial_assignInfo = function FG3dBaseMaterial_assignInfo(info){
   this._info.assign(info);
}
MO.FG3dBaseMaterial_assign = function FG3dBaseMaterial_assign(material){
   this._info.assign(material.info());
}
MO.FG3dBaseMaterial_calculate = function FG3dBaseMaterial_calculate(material){
   this._info.calculate(material.info());
}
MO.FG3dBone = function FG3dBone(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._boneId   = 0;
   o._modeId   = null;
   o.update    = MO.FG3dBone_update;
   return o;
}
MO.FG3dBone_update = function FG3dBone_update(p){
}
MO.FG3dCamera = function FG3dCamera(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._matrix          = MO.Class.register(o, new MO.AGetter('_matrix'));
   o._position        = MO.Class.register(o, new MO.AGetter('_position'));
   o._target          = null;
   o._direction       = MO.Class.register(o, new MO.AGetter('_direction'));
   o._directionTarget = null;
   o._centerFront     = 0.6;
   o._centerBack      = 1.0;
   o._focalNear       = 0.1;
   o._focalFar        = 200.0;
   o._frustum         = MO.Class.register(o, new MO.AGetter('_frustum'));
   o._planes          = MO.Class.register(o, new MO.AGetter('_planes'));
   o._viewport        = null;
   o.__axisUp         = null;
   o.__axisX          = null;
   o.__axisY          = null;
   o.__axisZ          = null;
   o.construct        = MO.FG3dCamera_construct;
   o.setPosition      = MO.FG3dCamera_setPosition;
   o.setDirection     = MO.FG3dCamera_setDirection;
   o.doWalk           = MO.FG3dCamera_doWalk;
   o.doStrafe         = MO.FG3dCamera_doStrafe;
   o.doFly            = MO.FG3dCamera_doFly;
   o.doPitch          = MO.FG3dCamera_doPitch;
   o.doYaw            = MO.FG3dCamera_doYaw;
   o.doRoll           = MO.FG3dCamera_doRoll;
   o.lookAt           = MO.FG3dCamera_lookAt;
   o.update           = MO.FG3dCamera_update;
   o.updateFrustum    = MO.FG3dCamera_updateFrustum;
   o.dispose          = MO.FG3dCamera_dispose;
   return o;
}
MO.FG3dCamera_construct = function FG3dCamera_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._matrix = new MO.SMatrix3d();
   o._position = new MO.SPoint3();
   o._target = new MO.SPoint3();
   o._direction = new MO.SVector3();
   o._directionTarget = new MO.SVector3();
   o._frustum = new MO.SFrustum();
   o._planes = new MO.SFrustumPlanes();
   o._viewport = MO.Class.create(MO.FG3dViewport);
   o.__axisUp = new MO.SVector3(0, 1, 0);
   o.__axisX = new MO.SVector3();
   o.__axisY = new MO.SVector3();
   o.__axisZ = new MO.SVector3();
}
MO.FG3dCamera_setPosition = function FG3dCamera_setPosition(x, y, z){
   this._position.set(x, y, z);
}
MO.FG3dCamera_setDirection = function FG3dCamera_setDirection(x, y, z){
   var o = this;
   o._direction.set(x, y, z);
   o._directionTarget.set(x, y, z);
}
MO.FG3dCamera_doWalk = function FG3dCamera_doWalk(p){
   var o = this;
   o._position.x += o._direction.x * p;
   o._position.z += o._direction.z * p;
}
MO.FG3dCamera_doStrafe = function FG3dCamera_doStrafe(p){
   var o = this;
   o._position.x += o.__axisY.x * p;
   o._position.z += o.__axisY.z * p;
}
MO.FG3dCamera_doFly = function FG3dCamera_doFly(p){
   var o = this;
   o._position.y += p;
}
MO.FG3dCamera_doPitch = function FG3dCamera_doPitch(p){
   throw new MO.TFatal(o, 'Unsupport.')
}
MO.FG3dCamera_doYaw = function FG3dCamera_doYaw(p){
   throw new MO.TFatal(o, 'Unsupport.')
}
MO.FG3dCamera_doRoll = function FG3dCamera_doRoll(p){
   throw new MO.TFatal(o, 'Unsupport.')
}
MO.FG3dCamera_lookAt = function FG3dCamera_lookAt(x, y, z){
   var o = this;
   var position = o._position;
   var direction = o._direction;
   o._target.set(x, y, z);
   direction.set(x - position.x, y - position.y, z - position.z);
   direction.normalize();
   o._directionTarget.assign(direction);
}
MO.FG3dCamera_update = function FG3dCamera_update(){
   var o = this;
   var axisX = o.__axisX;
   var axisY = o.__axisY;
   var axisZ = o.__axisZ;
   axisZ.assign(o._direction);
   axisZ.normalize();
   o.__axisUp.cross2(axisX, axisZ);
   axisX.normalize();
   axisZ.cross2(axisY, axisX);
   axisY.normalize();
   var data = o._matrix.data();
   data[ 0] = axisX.x;
   data[ 1] = axisY.x;
   data[ 2] = axisZ.x;
   data[ 3] = 0.0;
   data[ 4] = axisX.y;
   data[ 5] = axisY.y;
   data[ 6] = axisZ.y;
   data[ 7] = 0.0;
   data[ 8] = axisX.z;
   data[ 9] = axisY.z;
   data[10] = axisZ.z;
   data[11] = 0.0;
   data[12] = -axisX.dotPoint3(o._position);
   data[13] = -axisY.dotPoint3(o._position);
   data[14] = -axisZ.dotPoint3(o._position);
   data[15] = 1.0;
}
MO.FG3dCamera_updateFrustum = function FG3dCamera_updateFrustum(){
   var o = this;
   var m = MO.Lang.Math.matrix;
   m.assign(o._matrix);
   m.append(o._projection.matrix());
   o._planes.updateVision(m.data());
}
MO.FG3dCamera_dispose = function FG3dCamera_dispose(){
   var o = this;
   o._matrix = MO.Lang.Obejct.dispose(o._matrix);
   o.__base.FObject.dispose.call(o);
}
MO.FG3dDirectionalLight = function FG3dDirectionalLight(o){
   o = MO.Class.inherits(this, o, MO.FG3dLight);
   o._camera    = MO.Class.register(o, new MO.AGetter('_camera'));
   o._viewport  = MO.Class.register(o, new MO.AGetter('_viewport'));
   o._direction = MO.Class.register(o, new MO.AGetter('_direction'));
   o.construct  = MO.FG3dDirectionalLight_construct;
   o.dispose    = MO.FG3dDirectionalLight_dispose;
   return o;
}
MO.FG3dDirectionalLight_construct = function FG3dDirectionalLight_construct(){
   var o = this;
   o.__base.FG3dLight.construct.call(o);
   o._camera = MO.Class.create(MO.FG3dCamera);
   o._direction = new MO.SVector3();
}
MO.FG3dDirectionalLight_dispose = function FG3dDirectionalLight_dispose(){
   var o = this;
   o._camera = MO.Lang.Object.dispose(o._camera);
   o.__base.FG3dLight.dispose.call(o);
}
MO.FG3dEffect = function FG3dEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dObject);
   o._ready              = null;
   o._code               = MO.Class.register(o, new MO.AGetter('_code'));
   o._stateFillCd        = MO.EG3dFillMode.Face;
   o._stateCullCd        = MO.EG3dCullMode.Front;
   o._stateDepth         = true;
   o._stateDepthCd       = MO.EG3dDepthMode.LessEqual;
   o._stateDepthWrite    = true;
   o._stateBlend         = true;
   o._stateBlendSourceCd = MO.EG3dBlendMode.SourceAlpha;
   o._stateBlendTargetCd = MO.EG3dBlendMode.OneMinusSourceAlpha;
   o._stateAlphaTest     = false;
   o._optionShadow       = false;
   o._optionLightMap     = false;
   o._optionFog          = false;
   o._program            = MO.Class.register(o, new MO.AGetter('_program'));
   o._vertexTemplate     = null;
   o._fragmentTemplate   = null;
   o.setup               = MO.Method.empty;
   o.testReady           = MO.FG3dEffect_testReady;
   o.setParameter        = MO.FG3dEffect_setParameter;
   o.setSampler          = MO.FG3dEffect_setSampler;
   o.drawRenderable      = MO.FG3dEffect_drawRenderable;
   o.drawRenderables     = MO.FG3dEffect_drawRenderables;
   o.drawGroup           = MO.FG3dEffect_drawGroup;
   o.drawRegion          = MO.FG3dEffect_drawRegion;
   o.buildInfo           = MO.FG3dEffect_buildInfo;
   o.loadConfig          = MO.FG3dEffect_loadConfig;
   o.load                = MO.FG3dEffect_load;
   o.build               = MO.FG3dEffect_build;
   return o;
}
MO.FG3dEffect_testReady = function FG3dEffect_testReady(){
   return this._ready;
}
MO.FG3dEffect_setParameter = function FG3dEffect_setParameter(name, value, count){
   this._program.setParameter(name, value, count);
}
MO.FG3dEffect_setSampler = function FG3dEffect_setSampler(name, texture){
   this._program.setSampler(name, texture);
}
MO.FG3dEffect_buildInfo = function FG3dEffect_buildInfo(tagContext, effectInfo){
}
MO.FG3dEffect_drawRenderable = function FG3dEffect_drawRenderable(region, renderable){
   var o = this;
   var context = o._graphicContext;
   var program = o._program;
   if(program.hasAttribute()){
      var attributes = program.attributes();
      var attributeCount = attributes.count();
      for(var i = 0; i < attributeCount; i++){
         var attribute = attributes.value(i);
         if(attribute._statusUsed){
            var linker = attribute._linker;
            var vertexBuffer = renderable.findVertexBuffer(linker);
            if(!vertexBuffer){
               throw new MO.TError("Can't find renderable vertex buffer. (linker={1})", linker);
            }
            program.setAttribute(attribute._name, vertexBuffer, vertexBuffer._formatCd);
         }
      }
   }
   var indexBuffer = renderable.indexBuffer();
   context.drawTriangles(indexBuffer, 0, indexBuffer.count());
}
MO.FG3dEffect_drawRenderables = function FG3dEffect_drawRenderables(region, renderables, offset, count){
   var o = this;
   o._graphicContext.setProgram(o._program);
   for(var i = 0; i < count; i++){
      var renderable = renderables.at(offset + i);
      o.drawRenderable(region, renderable);
   }
}
MO.FG3dEffect_drawGroup = function FG3dEffect_drawGroup(region, renderables, offset, count){
   this.drawRenderables(region, renderables, offset, count);
}
MO.FG3dEffect_drawRegion = function FG3dEffect_drawRegion(region, offset, count){
   var o = this;
   var renderabels = region.renderables();
   for(var n = 0; n < count; ){
      var groupBegin = n;
      var groupEnd = count;
      var groupRenderable = renderabels.at(offset + groupBegin);
      var groupMaterial = groupRenderable.materialReference();
      for(var i = n; i < count; i++){
         var renderable = renderabels.at(offset + i);
         var material = renderable.materialReference();
         if(groupMaterial != material){
            groupEnd = i;
            break;
         }
         n++;
      }
      o.drawGroup(region, renderabels, offset + groupBegin, groupEnd - groupBegin);
   }
}
MO.FG3dEffect_loadConfig = function FG3dEffect_loadConfig(xconfig){
   var o = this;
   var context = o._graphicContext;
   var program = o._program = context.createProgram();
   var xnodes = xconfig.nodes();
   var count = xnodes.count();
   for(var i = 0; i < count; i++){
      var xnode = xnodes.get(i);
      if(xnode.isName('State')){
         var name = xnode.get('name');
         var value = xnode.get('value');
         if(name == 'fill_mode'){
            o._stateFillCd = MO.Lang.Enum.parse(MO.EG3dFillMode, value);
         }else if(name == 'cull_mode'){
            o._stateCullCd = MO.Lang.Enum.parse(MO.EG3dCullMode, value);
         }else if(name == 'depth_mode'){
            o._stateDepth = true;
            o._stateDepthCd = MO.Lang.Enum.parse(MO.EG3dDepthMode, value);
         }else if(name == 'depth_write'){
            o._stateDepthWrite = MO.Lang.Boolean.parse(value);
         }else if(name == 'blend_mode'){
            o._stateBlend = MO.Lang.Boolean.parse(value);
            if(o._stateBlend){
               o._stateBlendSourceCd = MO.Lang.Enum.parse(MO.EG3dBlendMode, xnode.get('source'));
               o._stateBlendTargetCd = MO.Lang.Enum.parse(MO.EG3dBlendMode, xnode.get('target'));
            }
         }else if(name == 'alpha_test'){
            o._stateAlphaTest = MO.RBoolean.parse(value);
         }
      }else if(xnode.isName('Option')){
         var name = xnode.get('name');
         var value = xnode.get('value');
         if(name == 'shadow'){
            o._optionShadow = MO.Lang.Boolean.parse(value);
         }else if(name == 'lightmap'){
            o._optionLightMap = MO.Lang.Boolean.parse(value);
         }else if(name == 'fog'){
            o._optionFog = MO.Lang.Boolean.parse(value);
         }
      }else if(xnode.isName('Parameter')){
         var parameter = MO.Class.create(MO.FG3dProgramParameter);
         parameter.loadConfig(xnode);
         program.parameters().set(parameter.name(), parameter);
      }else if(xnode.isName('Attribute')){
         var attribute = MO.Class.create(MO.FG3dProgramAttribute);
         attribute.loadConfig(xnode);
         program.attributes().set(attribute.name(), attribute);
      }else if(xnode.isName('Sampler')){
         var sampler = MO.Class.create(MO.FG3dProgramSampler);
         sampler.loadConfig(xnode);
         program.samplers().set(sampler.name(), sampler);
      }else if(xnode.isName('Source')){
         var name = xnode.get('name');
         if(name == 'vertex'){
            o._vertexSource = xnode.value();
         }else if(name == 'fragment'){
            o._fragmentSource = xnode.value();
         }else{
            throw new MO.TError(o, 'Unknown source type. (name={1})', name);
         }
      }else{
         throw new MO.TError(o, 'Unknown config type. (name={1})', xnode.name());
      }
   }
   var vertexTemplate = o._vertexTemplate = MO.Class.create(MO.FG3dShaderTemplate);
   vertexTemplate.load(o._vertexSource);
   var fragmentTemplate = o._fragmentTemplate = MO.Class.create(MO.FG3dShaderTemplate);
   fragmentTemplate.load(o._fragmentSource);
}
MO.FG3dEffect_build = function FG3dEffect_build(p){
   var o = this;
   var program = o._program;
   var parameters = program.parameters();
   var parameterCount = parameters.count();
   var tagContext = MO.RInstance.get(MO.FTagContext);
   o.buildInfo(tagContext, p);
   var source = o._vertexTemplate.parse(tagContext);
   var formatSource = MO.Lang.String.formatLines(source);
   program.upload(MO.EG3dShader.Vertex, formatSource);
   var source = o._fragmentTemplate.parse(tagContext);
   for(var i = 0; i < parameterCount; i++){
      var parameter = parameters.at(i);
      var parameterName = parameter.name();
      var parameterDefine = parameter.define();
      if(parameterDefine){
         source = source.replace(new RegExp(parameterName, 'g'), parameterDefine);
      }
   }
   var formatSource = MO.Lang.String.formatLines(source);
   program.upload(MO.EG3dShader.Fragment, formatSource);
   program.build();
   program.link();
}
MO.FG3dEffect_load = function FG3dEffect_load(){
   var o = this;
   var xconfig = MO.Console.find(MO.FG3dEffectConsole).loadConfig(o._code);
   o.loadConfig(xconfig);
}
MO.FG3dEffectConsole = function FG3dEffectConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd         = MO.EScope.Local;
   o._configs         = null;
   o._loadEffects     = null;
   o._registerEffects = null;
   o._templateEffects = null;
   o._effects         = null;
   o._path            = MO.Class.register(o, MO.AGetter('_path'), "/ars/shader/");
   o._effectInfo      = null;
   o._tagContext      = null;
   o._thread          = null;
   o._interval        = 300;
   o.onProcess        = MO.FG3dEffectConsole_onProcess;
   o.construct        = MO.FG3dEffectConsole_construct;
   o.register         = MO.FG3dEffectConsole_register;
   o.unregister       = MO.FG3dEffectConsole_unregister;
   o.create           = MO.FG3dEffectConsole_create;
   o.buildEffectInfo  = MO.FG3dEffectConsole_buildEffectInfo;
   o.findTemplate     = MO.FG3dEffectConsole_findTemplate;
   o.find             = MO.FG3dEffectConsole_find;
   o.loadConfig       = MO.FG3dEffectConsole_loadConfig;
   return o;
}
MO.FG3dEffectConsole_onProcess = function FG3dEffectConsole_onProcess(){
   var o = this;
   var effects = o._loadEffects;
   effects.record();
   while(effects.next()){
      var effect = effects.current();
      if(effect.processLoad()){
         effects.removeCurrent();
      }
   }
}
MO.FG3dEffectConsole_construct = function FG3dEffectConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._configs = new MO.TDictionary();
   o._loadEffects = new MO.TLooper();
   o._registerEffects = new MO.TDictionary();
   o._templateEffects = new MO.TDictionary();
   o._effects = new MO.TDictionary();
   o._effectInfo = new MO.SG3dEffectInfo();
   o._tagContext = MO.Class.create(MO.FTagContext);
}
MO.FG3dEffectConsole_register = function FG3dEffectConsole_register(name, effect){
   this._registerEffects.set(name, effect);
}
MO.FG3dEffectConsole_unregister = function FG3dEffectConsole_unregister(name){
   this._registerEffects.set(name, null);
}
MO.FG3dEffectConsole_create = function FG3dEffectConsole_create(context, name){
   var o = this;
   var clazz = o._registerEffects.get(name);
   if(!clazz){
      throw new MO.TError(this, 'Unknown effect type name. (type={1})', clazz);
   }
   var effect = MO.Class.create(clazz);
   effect.linkGraphicContext(context);
   effect.setup();
   return effect;
}
MO.FG3dEffectConsole_buildEffectInfo = function FG3dEffectConsole_buildEffectInfo(context, effectInfo, region, renderable){
   var o = this;
   var capability = context.capability();
   var technique = region.technique();
   effectInfo.techniqueModeCode = technique.activeMode().code();
   effectInfo.optionMerge = renderable._optionMerge;
   if(effectInfo.optionMerge){
      effectInfo.mergeCount = renderable.mergeMaxCount();
      effectInfo.mergeStride = renderable.mergeStride();
   }
   var mi = renderable.material().info();
   effectInfo.optionNormalInvert = mi.optionNormalInvert;
   effectInfo.optionColor = mi.optionColor;
   effectInfo.optionAmbient = mi.optionAmbient;
   effectInfo.optionDiffuse = mi.optionDiffuse;
   effectInfo.optionSpecular = mi.optionSpecular;
   effectInfo.optionReflect = mi.optionReflect;
   effectInfo.optionRefract = mi.optionRefract;
   effectInfo.vertexCount = renderable.vertexCount();
   var vertexBuffers = renderable.vertexBuffers();
   var count = vertexBuffers.count();
   for(var i = 0; i < count; i++){
      var vertexBuffer = vertexBuffers.at(i);
      var vertexCode = vertexBuffer.code();
      if(vertexCode == 'normal'){
         var stride = vertexBuffer.stride();
         if(stride == 4){
            effectInfo.optionNormalCompress = true;
         }else{
            effectInfo.optionNormalCompress = false;
         }
      }
      if(MO.Lang.String.isEmpty(vertexCode)){
         throw new MO.TError(o, 'Vertex buffer code is empty.');
      }
      effectInfo.attributes.push(vertexCode);
   }
   var textures = renderable.textures();
   if(textures){
      var count = textures.count();
      for(var i = 0; i < count; i++){
         var textureCode = textures.name(i);
         if(MO.Lang.String.isEmpty(textureCode)){
            throw new MO.TError(o, 'Texture code is empty.');
         }
         effectInfo.samplers.push(textureCode);
      }
   }
   var bones = renderable.bones();
   if(bones){
      var boneCount = bones.count();
      effectInfo.vertexBoneCount = boneCount;
      var boneLimit = capability.calculateBoneCount(effectInfo.vertexBoneCount, effectInfo.vertexCount);
      if(boneCount > boneLimit){
         boneCount = boneLimit;
      }
      renderable._boneLimit = boneCount;
      effectInfo.vertexBoneLimit = boneCount;
   }
}
MO.FG3dEffectConsole_findTemplate = function FG3dEffectConsole_findTemplate(context, code){
   var o = this;
   var effects = o._templateEffects;
   var effect = effects.get(code);
   if(effect == null){
      var effect = o.create(context, code);
      effect.load();
      MO.Logger.info(o, 'Create effect template. (code={1}, instance={2})', code, effect);
      effects.set(code, effect);
   }
   return effect;
}
MO.FG3dEffectConsole_find = function FG3dEffectConsole_find(context, region, renderable){
   var o = this;
   if(!MO.Class.isClass(context, MO.FGraphicContext)){
      context = context.graphicContext();
   }
   if(!MO.Class.isClass(context, MO.FGraphicContext)){
      throw new MO.TError(o, 'Unknown context.');
   }
   var effectCode = renderable.material().info().effectCode;
   if(MO.Lang.String.isEmpty(effectCode)){
      effectCode = 'automatic'
   }
   if(effectCode == 'skeleton' || effectCode == 'skeleton.4'){
      if(renderable.bones() == null){
         effectCode = 'automatic'
      }
   }
   var effectFlag = region.spaceName() + '.' + effectCode;
   var effectTemplate = o.findTemplate(context, effectFlag);
   if(effectTemplate){
      var effectInfo = o._effectInfo;
      effectInfo.reset();
      o.buildEffectInfo(context, effectInfo, region, renderable);
      effectTemplate.buildInfo(o._tagContext, effectInfo);
      var flag = effectFlag + o._tagContext.code;
      var effects = o._effects;
      var effect = effects.get(flag);
      if(!effect){
         effect = o.create(context, effectFlag);
         effect._flag = flag;
         effect.load();
         effect.build(o._effectInfo);
         MO.Logger.info(o, 'Create effect. (name={1}, instance={2})', effectCode, effect);
      }
      effects.set(flag, effect);
   }
   return effect;
}
MO.FG3dEffectConsole_loadConfig = function FG3dEffectConsole_loadConfig(name){
   var o = this;
   var xconfig = o._configs.get(uri);
   if(!xconfig){
      var uri = MO.Window.Browser.contentPath(o._path + name + ".xml");
      var url = o._url = MO.Console.find(MO.FEnvironmentConsole).parseUrl(uri);
      xconfig = MO.Class.create(MO.FXmlConnection).send(url);
      o._configs.set(name, xconfig);
   }
   return xconfig;
}
MO.FG3dLight = function FG3dLight(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   return o;
}
MO.FG3dLightMaterial = function FG3dLightMaterial(o){
   o = MO.Class.inherits(this, o, MO.FG3dBaseMaterial);
   return o;
}
MO.FG3dMaterial = function FG3dMaterial(o){
   o = MO.Class.inherits(this, o, MO.FG3dBaseMaterial);
   o._dirty     = true;
   o._textures  = MO.Class.register(o, new MO.AGetter('_textures'))
   o.setTexture = MO.FG3dMaterial_setTexture;
   o.update     = MO.FG3dMaterial_update;
   return o;
}
MO.FG3dMaterial_setTexture = function FG3dMaterial_setTexture(code, texture){
   var o = this;
   var textures = o._textures;
   if(!textures){
      textures = o._textures = new MO.TDictionary();
   }
   textures.set(code, texture);
}
MO.FG3dMaterial_update = function FG3dMaterial_update(){
   this._dirty = true;
}
MO.FG3dMaterialMap = function FG3dMaterialMap(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject);
   o._size      = MO.Class.register(o, new MO.AGetter('_size'));
   o._data      = MO.Class.register(o, new MO.AGetter('_data'));
   o._texture   = MO.Class.register(o, new MO.AGetter('_texture'));
   o._stride    = null;
   o._dirty     = false;
   o.construct  = MO.FG3dMaterialMap_construct;
   o.setup      = MO.FG3dMaterialMap_setup;
   o.resize     = MO.FG3dMaterialMap_resize;
   o.setUint8   = MO.FG3dMaterialMap_setUint8;
   o.setUint16  = MO.FG3dMaterialMap_setUint16;
   o.setUint32  = MO.FG3dMaterialMap_setUint32;
   o.setFloat16 = MO.FG3dMaterialMap_setFloat16;
   o.setFloat32 = MO.FG3dMaterialMap_setFloat32;
   o.update     = MO.FG3dMaterialMap_update;
   return o;
}
MO.FG3dMaterialMap_construct = function FG3dMaterialMap_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._size = new MO.SSize2();
}
MO.FG3dMaterialMap_setup = function FG3dMaterialMap_setup(width, height){
   var o = this;
   var c = o._graphicContext;
   var texture = o._texture = c.createFlatTexture();
   o.resize(width, height);
   texture.setFilterCd(MO.EG3dSamplerFilter.Nearest, MO.EG3dSamplerFilter.Nearest);
   texture.uploadData(o._data, width, height);
}
MO.FG3dMaterialMap_resize = function FG3dMaterialMap_resize(width, height){
   var o = this;
   var s = o._size;
   if(height > 2048){
      height = 4096;
   }else if(height > 1024){
      height = 2048;
   }else if(height > 512){
      height = 1024;
   }else if(height > 256){
      height = 512;
   }else if(height > 128){
      height = 256;
   }else if(height > 64){
      height = 128;
   }else if(height > 32){
      height = 64;
   }else if(height > 16){
     height = 32;
   }
   if(height < s.height){
      height = s.height;
   }
   if((s.width == width) && (s.height == height)){
      return;
   }
   s.set(width, height);
   o._stride = 4 * width;
   var total = 4 * width * height;
   o._data = new Uint8Array(total);
}
MO.FG3dMaterialMap_setUint8 = function FG3dMaterialMap_setUint8(n, i, v1, v2, v3, v4){
   var o = this;
   var d = o._data;
   var p = (o._stride * n) + (i << 2);
   if(v1.constructor == MO.SColor4){
      var v = v1.red * 255;
      if(d[p] != v){
         o._dirty = true;
      }
      d[p++] = v;
      var v = v1.green * 255;
      if(d[p] != v){
         o._dirty = true;
      }
      d[p++] = v;
      var v = v1.blue * 255;
      if(d[p] != v){
         o._dirty = true;
      }
      d[p++] = v;
      var v = v1.alpha * 255;
      if(d[p] != v){
         o._dirty = true;
      }
      d[p++] = v;
   }else{
      d[p++] = v1;
      d[p++] = v2;
      d[p++] = v3;
      d[p++] = v4;
   }
}
MO.FG3dMaterialMap_setUint16 = function FG3dMaterialMap_setUint16(n, i, v1, v2){
   var o = this;
   var d = o._data;
   var p = (o._stride * n) + (i << 2);
   d[p++] = (v1 >> 8) & 0xFF;
   d[p++] = v1 & 0xFF;
   d[p++] = (v2 >> 8) & 0xFF;
   d[p++] = v2 & 0xFF;
   o._dirty = true;
}
MO.FG3dMaterialMap_setUint32 = function FG3dMaterialMap_setUint32(n, i, v){
   var o = this;
   var d = o._data;
   var p = (o._stride * n) + (i << 2);
   d[p++] = (v >> 24) & 0xFF;
   d[p++] = (v >> 16) & 0xFF;
   d[p++] = (v >> 8) & 0xFF;
   d[p++] = v & 0xFF;
   o._dirty = true;
}
MO.FG3dMaterialMap_setFloat16 = function FG3dMaterialMap_setFloat16(n, i, v1, v2){
   var o = this;
   var d = o._data;
   var p = (o._stride * n) + (i << 2);
   var v = parseInt(v1 * 256);
   d[p++] = parseInt(v1) & 0xFF;
   d[p++] = parseInt(v1 * 256) & 0xFF;
   d[p++] = parseInt(v2) & 0xFF;
   d[p++] = parseInt(v2 * 256) & 0xFF;
   o._dirty = true;
}
MO.FG3dMaterialMap_setFloat32 = function FG3dMaterialMap_setFloat32(n, i, v){
   var o = this;
   var d = o._data;
   var p = (o._stride * n) + (i << 2);
   d[p++] = parseInt(v * 0.00390625) & 0xFF;
   d[p++] = parseInt(v) & 0xFF;
   d[p++] = parseInt(v * 256) & 0xFF;
   d[p++] = parseInt(v * 65536) & 0xFF;
   o._dirty = true;
}
MO.FG3dMaterialMap_update = function FG3dMaterialMap_update(){
   var o = this;
   if(o._dirty){
      var s = o._size;
      o._texture.uploadData(o._data, s.width, s.height);
      o._dirty = false;
   }
}
MO.FG3dMaterialTexture = function FG3dMaterialTexture(o){
   o = MO.Class.inherits(this, o, MO.FG3dMaterial);
   o._texture = null;
   return o;
}
MO.FG3dObject = function FG3dObject(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject);
   o.setup   = MO.FG3dObject_setup;
   o.dispose = MO.FG3dObject_dispose;
   return o;
}
MO.FG3dObject_setup = function FG3dObject_setup(){
}
MO.FG3dObject_dispose = function FG3dObject_dispose(){
   var o = this;
   o.__base.MGraphicObject.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FG3dOrthoProjection = function FG3dOrthoProjection(o){
   o = MO.Class.inherits(this, o, MO.FG3dProjection);
   o.construct     = MO.FG3dOrthoProjection_construct;
   o.update        = MO.FG3dOrthoProjection_update;
   o.updateFrustum = MO.FG3dOrthoProjection_updateFrustum;
   o.dispose       = MO.FG3dOrthoProjection_dispose;
   return o;
}
MO.FG3dOrthoProjection_construct = function FG3dOrthoProjection_construct(){
   var o = this;
   o.__base.FG3dProjection.construct.call(o);
}
MO.FG3dOrthoProjection_update = function FG3dOrthoProjection_update(){
   var o = this;
   var size = o._size;
   var left = -size.width * 0.5;
   var top = -size.height * 0.5;
   MO.Lang.Matrix.orthoLH(o._matrix, left, top, size.width, size.height, o._znear, o._zfar);
}
MO.FG3dOrthoProjection_updateFrustum = function FG3dOrthoProjection_updateFrustum(frustum){
   var o = this;
   o._znear = frustum.minZ;
   o._zfar = frustum.maxZ;
   o.update();
}
MO.FG3dOrthoProjection_dispose = function FG3dOrthoProjection_dispose(){
   var o = this;
   o.__base.FG3dProjection.dispose.call(o);
}
MO.FG3dPerspectiveProjection = function FG3dPerspectiveProjection(o){
   o = MO.Class.inherits(this, o, MO.FG3dProjection);
   o.construct     = MO.FG3dPerspectiveProjection_construct;
   o.update        = MO.FG3dPerspectiveProjection_update;
   o.updateFrustum = MO.FG3dPerspectiveProjection_updateFrustum;
   o.dispose       = MO.FG3dPerspectiveProjection_dispose;
   return o;
}
MO.FG3dPerspectiveProjection_construct = function FG3dPerspectiveProjection_construct(){
   var o = this;
   o.__base.FG3dProjection.construct.call(o);
}
MO.FG3dPerspectiveProjection_update = function FG3dPerspectiveProjection_update(){
   var o = this;
   var size = o._size;
   o._fieldOfView = MO.RConst.DEGREE_RATE * o._angle;
   MO.Lang.Matrix.perspectiveFieldOfViewLH(o._matrix, o._fieldOfView, size.width / size.height, o._znear, o._zfar);
}
MO.FG3dPerspectiveProjection_updateFrustum = function FG3dPerspectiveProjection_updateFrustum(p){
   var o = this;
   o._znear = p.minZ;
   o._zfar = p.maxZ;
   o.update();
}
MO.FG3dPerspectiveProjection_dispose = function FG3dPerspectiveProjection_dispose(){
   var o = this;
   o.__base.FG3dProjection.dispose.call(o);
}
MO.FG3dPointLight = function FG3dPointLight(o){
   o = MO.Class.inherits(this, o, MO.FG3dLight);
   return o;
}
MO.FG3dProjection = function FG3dProjection(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._matrix      = MO.Class.register(o, new MO.AGetter('_matrix'));
   o._size        = MO.Class.register(o, new MO.AGetter('_size'));
   o._angle       = MO.Class.register(o, new MO.AGetSet('_angle'), 60.0);
   o._fieldOfView = MO.Class.register(o, new MO.AGetSet('_fieldOfView'), 0);
   o._znear       = MO.Class.register(o, new MO.AGetSet('_znear'), 0.1);
   o._zfar        = MO.Class.register(o, new MO.AGetSet('_zfar'), 200);
   o._zoom        = MO.Class.register(o, new MO.AGetSet('_zoom'), 1);
   o.construct    = MO.FG3dProjection_construct;
   o.distance     = MO.FG3dProjection_distance;
   o.dispose      = MO.FG3dProjection_dispose;
   return o;
}
MO.FG3dProjection_construct = function FG3dProjection_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._matrix = new MO.SMatrix3d();
   o._size = new MO.SSize2();
}
MO.FG3dProjection_distance = function FG3dProjection_distance(){
   return this._zfar - this._znear;
}
MO.FG3dProjection_dispose = function FG3dProjection_dispose(){
   var o = this;
   o._matrix = MO.Lang.Object.dispose(o._matrix);
   o._size = MO.Lang.Object.dispose(o._size);
   o.__base.FObject.dispose.call(o);
}
MO.FG3dShaderTemplate = function FG3dShaderTemplate(o){
   o = MO.Class.inherits(this, o, MO.FTagDocument);
   o._space  = 'shader';
   return o;
}
MO.FG3dSpotLight = function FG3dSpotLight(o){
   o = MO.Class.inherits(this, o, MO.FG3dLight);
   return o;
}
MO.FG3dTechnique = function FG3dTechnique(o){
   o = MO.Class.inherits(this, o, MO.FG3dObject);
   o._code           = MO.Class.register(o, new MO.AGetter('_code'));
   o._activeMode     = MO.Class.register(o, new MO.AGetter('_activeMode'));
   o._modes          = MO.Class.register(o, new MO.AGetter('_modes'));
   o._passes         = MO.Class.register(o, new MO.AGetter('_passes'));
   o.construct       = MO.FG3dTechnique_construct;
   o.registerMode    = MO.FG3dTechnique_registerMode;
   o.selectMode      = MO.FG3dTechnique_selectMode;
   o.pushPass        = MO.FG3dTechnique_pushPass;
   o.updateRegion    = MO.Method.empty;
   o.clear           = MO.FG3dTechnique_clear;
   o.clearDepth      = MO.FG3dTechnique_clearDepth;
   o.sortRenderables = MO.FG3dTechnique_sortRenderables;
   o.drawRegion      = MO.FG3dTechnique_drawRegion;
   o.present         = MO.FG3dTechnique_present;
   return o;
}
MO.FG3dTechnique_construct = function FG3dTechnique_construct(){
   var o = this;
   o.__base.FG3dObject.construct.call(o);
   o._modes = new MO.TObjects();
   o._passes = new MO.TObjects();
}
MO.FG3dTechnique_registerMode = function FG3dTechnique_registerMode(p){
   var o = this;
   var m = MO.Class.create(MO.FG3dTechniqueMode);
   m.setCode(p);
   o._modes.push(m);
   o._activeMode = m;
   return m;
}
MO.FG3dTechnique_selectMode = function FG3dTechnique_selectMode(p){
   var o = this;
}
MO.FG3dTechnique_pushPass = function FG3dTechnique_pushPass(pass){
   var o = this;
   pass.setTechnique(o);
   o._passes.push(pass);
}
MO.FG3dTechnique_clear = function FG3dTechnique_clear(color){
   var o = this;
   var context = o._graphicContext;
   context.setRenderTarget(null);
   context.clear(color.red, color.green, color.blue, color.alpha, 1);
}
MO.FG3dTechnique_clearDepth = function FG3dTechnique_clearDepth(depth){
   var o = this;
   if(depth == null){
      depth = 1;
   }
   var context = o._graphicContext;
   context.clearDepth(depth);
}
MO.FG3dTechnique_sortRenderables = function FG3dTechnique_sortRenderables(a, b){
}
MO.FG3dTechnique_drawRegion = function FG3dTechnique_drawRegion(region){
   var o = this;
   region.setTechnique(o);
   var passes = o._passes;
   var count = passes.count();
   for(var i = 0; i < count; i++){
      var pass = passes.at(i);
      region.setTechniquePass(pass, (i == count - 1));
      pass.drawRegion(region);
   }
}
MO.FG3dTechnique_present = function FG3dTechnique_present(p){
   this._graphicContext.present();
}
MO.FG3dTechniqueConsole = function FG3dTechniqueConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd    = MO.EScope.Local;
   o._techniques = MO.Class.register(o, new MO.AGetter('_techniques'));
   o.construct   = MO.FG3dTechniqueConsole_construct;
   o.find        = MO.FG3dTechniqueConsole_find;
   return o;
}
MO.FG3dTechniqueConsole_construct = function FG3dTechniqueConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._techniques = new MO.TDictionary();
}
MO.FG3dTechniqueConsole_find = function FG3dTechniqueConsole_find(context, clazz){
   var o = this;
   if(!MO.Class.isClass(context, MO.FGraphicContext)){
      context = context.graphicContext();
   }
   if(!MO.Class.isClass(context, MO.FGraphicContext)){
      throw new MO.TError(o, 'Unknown context.');
   }
   var code = context.hashCode() + '|' + MO.Class.name(clazz);
   var techniques = o._techniques;
   var technique = techniques.get(code);
   if(!technique){
      technique = MO.Class.create(clazz);
      technique.linkGraphicContext(context);
      technique.setup();
      var techniqueCode = technique.code();
      var passes = technique.passes();
      var passCount = passes.count();
      for(var i = 0; i < passCount; i++){
         var pass = passes.at(i);
         var passCode = pass.code();
         pass.setFullCode(techniqueCode + '.' + passCode);
      }
      techniques.set(code, technique);
   }
   return technique;
}
MO.FG3dTechniqueMode = function FG3dTechniqueMode(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._code = MO.Class.register(o, new MO.AGetSet('_code'));
   return o;
}
MO.FG3dTechniquePass = function FG3dTechniquePass(o){
   o = MO.Class.inherits(this, o, MO.FG3dObject);
   o._technique      = MO.Class.register(o, new MO.AGetSet('_technique'));
   o._fullCode       = MO.Class.register(o, new MO.AGetSet('_fullCode'));
   o._code           = MO.Class.register(o, new MO.AGetter('_code'));
   o._index          = null;
   o._finish         = false;
   o._materialMap    = null;
   o.setup           = MO.FG3dTechniquePass_setup;
   o.activeEffects   = MO.FG3dTechniquePass_activeEffects;
   o.sortRenderables = MO.FG3dTechniquePass_sortRenderables;
   o.drawBegin       = MO.FG3dTechniquePass_drawBegin;
   o.drawRegion      = MO.FG3dTechniquePass_drawRegion;
   o.drawEnd         = MO.FG3dTechniquePass_drawEnd;
   return o;
}
MO.FG3dTechniquePass_setup = function FG3dTechniquePass_setup(){
   var o = this;
   var map = o._materialMap = MO.Class.create(MO.FG3dMaterialMap);
   map.linkGraphicContext(o);
   map.setup(MO.EG3dMaterialMap.Count, 32);
}
MO.FG3dTechniquePass_sortRenderables = function FG3dTechniquePass_sortRenderables(source, target){
   var sourceMaterial = source.material().info();
   var targetMaterial = target.material().info();
   if(sourceMaterial.optionAlpha && targetMaterial.optionAlpha){
      var sourceEffect = source.activeEffect();
      var targetEffect = target.activeEffect();
      if(sourceEffect == targetEffect){
         var sourceReference = source.materialReference();
         var targetReference = target.materialReference();
         if(sourceReference && targetReference){
            return sourceReference.hashCode() - targetReference.hashCode();
         }
      }
      return sourceEffect.hashCode() - targetEffect.hashCode();
   }else if(sourceMaterial.optionAlpha && !targetMaterial.optionAlpha){
      return 1;
   }else if(!sourceMaterial.optionAlpha && targetMaterial.optionAlpha){
      return -1;
   }else{
      var sourceEffect = source.activeEffect();
      var targetEffect = target.activeEffect();
      if(sourceEffect == targetEffect){
         var sourceReference = source.materialReference();
         var targetReference = target.materialReference();
         if(sourceReference && targetReference){
            return sourceReference.hashCode() - targetReference.hashCode();
         }
      }
      return sourceEffect.hashCode() - targetEffect.hashCode();
   }
}
MO.FG3dTechniquePass_activeEffects = function FG3dTechniquePass_activeEffects(region, renderables){
   var o = this;
   var spaceName = region.spaceName();
   var count = renderables.count();
   for(var i = 0; i < count; i++){
      var renderable = renderables.at(i);
      var info = renderable.selectInfo(spaceName);
      if(!info.effect){
         info.effect = MO.Console.find(MO.FG3dEffectConsole).find(o._graphicContext, region, renderable);
      }
   }
}
MO.FG3dTechniquePass_drawBegin = function FG3dTechniquePass_drawBegin(region){
   var o = this;
   o._technique.clear(region.backgroundColor());
}
MO.FG3dTechniquePass_drawRegion = function FG3dTechniquePass_drawRegion(region){
   var o = this;
   var renderables = region.renderables();
   var count = renderables.count();
   if(count == 0){
      return;
   }
   var statistics = region._statistics;
   statistics._frameDrawSort.begin();
   o.activeEffects(region, renderables);
   renderables.sort(o.sortRenderables);
   statistics._frameDrawSort.end();
   var capability = o._graphicContext.capability();
   if(capability.optionMaterialMap){
      var mm = o._materialMap;
      mm.resize(MO.EG3dMaterialMap.Count, count);
      for(var i = 0; i < count; i++){
         var r = renderables.get(i);
         r._materialId = i;
         var m = r.material();
         var mi = m.info();
         mm.setUint8(i, MO.EG3dMaterialMap.AmbientColor, mi.ambientColor);
         mm.setUint8(i, MO.EG3dMaterialMap.DiffuseColor, mi.diffuseColor);
         mm.setUint8(i, MO.EG3dMaterialMap.SpecularColor, mi.specularColor);
         mm.setUint8(i, MO.EG3dMaterialMap.ReflectColor, mi.reflectColor);
         mm.setUint8(i, MO.EG3dMaterialMap.EmissiveColor, mi.emissiveColor);
      }
      mm.update();
      region._materialMap = mm;
   }
   for(var n = 0; n < count; ){
      var groupBegin = n;
      var groupEnd = count;
      var effect = renderables.at(groupBegin).activeEffect();
      for(var i = n; i < count; i++){
         var activeEffect = renderables.at(i).activeEffect();
         if(effect != activeEffect){
            groupEnd = i;
            break;
         }
         n++;
      }
      effect.drawRegion(region, groupBegin, groupEnd - groupBegin);
   }
}
MO.FG3dTechniquePass_drawEnd = function FG3dTechniquePass_drawEnd(region){
}
MO.FG3dTrack = function FG3dTrack(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._frames   = null;
   o.construct = MO.FG3dTrack_construct;
   o.calculate = MO.FG3dTrack_calculate;
   return o;
}
MO.FG3dTrack_construct = function FG3dTrack_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.FG3dTrack_update = function FG3dTrack_update(p){
   var o = this;
   var info = new MO.SG3dFrameInfo();
   o._trackResource.calculateFrameInfo(info, tick);
   info.update();
   o._matrix.assign(o._trackResource.matrixInvert());
   o._matrix.append(info.matrix);
   return true;
}
MO.FG3dTrack_calculate = function FG3dTrack_calculate(tick){
   var o = this;
   var frameCount = o._frames.count();
   if(frameCount == 0){
      return false;
   }
   if(tick < 0){
      tick = -tick;
   }
   var pCurrentFrame = o._frames.Get(index);
   var pNextFrame = null;
   if(index < frameCount -1){
      pNextFrame = o._frames.Get(index + 1);
   }else{
      pNextFrame = o._frames.Get(0);
   }
   info.tick = tick;
   info.currentFrame = pCurrentFrame;
   info.nextFrame = pNextFrame;
   return true;
}
MO.FG3dTrackBall = function FG3dTrackBall(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._matrix          = MO.Class.register(o, new MO.AGetter('_matrix'));
   o._rotation        = MO.Class.register(o, new MO.AGetter('_rotation'));
   o._axis            = MO.Class.register(o, new MO.AGetter('_axis'));
   o._angularVelocity = MO.Class.register(o, new MO.AGetter('_direction'));
   o._lastPosition    = null;
   o.construct        = MO.FG3dTrackBall_construct;
   o.push             = MO.FG3dTrackBall_push;
   o.move             = MO.FG3dTrackBall_move;
   o.release          = MO.FG3dTrackBall_release;
   o.dispose          = MO.FG3dTrackBall_dispose;
   return o;
}
MO.FG3dTrackBall_construct = function FG3dTrackBall_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._matrix = new MO.SMatrix3d();
   o._rotation = new MO.SQuaternion();
   o._axis = new MO.SVector3();
   o._lastPosition = new MO.SPoint3();
}
MO.FG3dTrackBall_move = function FG3dTrackBall_move(x, y){
   var lastPos3D = new MO.SVector3(o._lastPosition.x, o._lastPosition.y, 0);
}
MO.FG3dTrackBall_update = function FG3dTrackBall_update(){
   var o = this;
   var axisX = o.__axisX;
   var axisY = o.__axisY;
   var axisZ = o.__axisZ;
   axisZ.assign(o._direction);
   axisZ.normalize();
   o.__axisUp.cross2(axisX, axisZ);
   axisX.normalize();
   axisZ.cross2(axisY, axisX);
   axisY.normalize();
   var data = o._matrix.data();
   data[ 0] = axisX.x;
   data[ 1] = axisY.x;
   data[ 2] = axisZ.x;
   data[ 3] = 0.0;
   data[ 4] = axisX.y;
   data[ 5] = axisY.y;
   data[ 6] = axisZ.y;
   data[ 7] = 0.0;
   data[ 8] = axisX.z;
   data[ 9] = axisY.z;
   data[10] = axisZ.z;
   data[11] = 0.0;
   data[12] = -axisX.dotPoint3(o._position);
   data[13] = -axisY.dotPoint3(o._position);
   data[14] = -axisZ.dotPoint3(o._position);
   data[15] = 1.0;
}
MO.FG3dTrackBall_updateFrustum = function FG3dTrackBall_updateFrustum(){
   var o = this;
   var m = MO.Lang.Math.matrix;
   m.assign(o._matrix);
   m.append(o._projection.matrix());
   o._planes.updateVision(m.data());
}
MO.FG3dTrackBall_dispose = function FG3dTrackBall_dispose(){
   var o = this;
   o._matrix = MO.Lang.Obejct.dispose(o._matrix);
   o.__base.FObject.dispose.call(o);
}
MO.FG3dViewport = function FG3dViewport(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o.left   = 0;
   o.top    = 0;
   o.width  = 0;
   o.height = 0;
   o.set    = MO.FG3dViewport_set;
   return o;
}
MO.FG3dViewport_set = function FG3dViewport_set(left, top, width, height){
   var o = this;
   o.left = left;
   o.top = top;
   o.width = width;
   o.height= height;
}
MO.REngine3d = function REngine3d(){
   var o = this;
   o._setuped  = false;
   o._contexts = null;
   return o;
}
MO.REngine3d.prototype.onUnload = function REngine3d_onUnload(event){
   this.dispose();
}
MO.REngine3d.prototype.setup = function REngine3d_setup(){
   var o = this;
   if(!o._setuped){
      o._contexts = new MO.TObjects();
      MO.Window.lsnsUnload.register(o, o.onUnload);
      o._setuped = true;
   }
}
MO.REngine3d.prototype.contexts = function REngine3d_contexts(){
   return this._contexts;
}
MO.REngine3d.prototype.createContext = function REngine3d_createContext(clazz, hCanvas, attributes){
   var o = this;
   o.setup();
   var context = MO.Class.create(clazz);
   if(attributes){
      context._optionAlpha = attributes.alpha;
      context._optionAntialias = attributes.antialias;
   }
   if(!context.linkCanvas(hCanvas)){
      return null;
   }
   o._contexts.push(context);
   return context;
}
MO.REngine3d.prototype.dispose = function REngine3d_dispose(){
   var o = this;
   var contexts = o._contexts;
   if(contexts){
      var count = contexts.count();
      for(var i = 0; i < count; i++){
         var context = contexts.at(i);
         context.dispose();
      }
      o._contexts = MO.Lang.Object.dispose(contexts);
   }
}
MO.REngine3d = new MO.REngine3d();
MO.Graphic.Context3d = MO.REngine3d;
MO.Engine3d = MO.REngine3d;
MO.EG3dAttribute = new function EG3dAttribute(){
   var o = this;
   o.Position   = 'position';
   o.Color      = 'color';
   o.Coord      = 'coord';
   o.Normal     = 'normal';
   o.Binormal   = 'binormal';
   o.Tangent    = 'tangent';
   o.BoneIndex  = 'bone_index';
   o.BoneWeight = 'bone_weight';
   return o;
}
MO.EG3dAttributeFormat = new function EG3dAttributeFormat(){
   var o = this;
   o.Unknown = 0;
   o.Float1 = 1;
   o.Float2 = 2;
   o.Float3 = 3;
   o.Float4 = 4;
   o.Byte4 = 5;
   o.Byte4Normal = 6;
   return o;
}
MO.EG3dBlendMode = new function EG3dBlendMode(){
   var o = this;
   o.Zero             = 0;
   o.One              = 1;
   o.SrcColor         = 2;
   o.OneMinusSrcColor = 3;
   o.DstColor         = 4;
   o.OneMinusDstColor = 5;
   o.SrcAlpha         = 6;
   o.OneMinusSrcAlpha = 7;
   o.DstAlpha         = 8;
   o.OneMinusDstAlpha = 9;
   o.SrcAlphaSaturate = 10;
   return o;
}
MO.EG3dCullMode = new function EG3dCullMode(){
   var o = this;
   o.None = 0;
   o.Front= 1;
   o.Back = 2;
   o.Both = 3;
   return o;
}
MO.EG3dDepthMode = new function EG3dDepthMode(){
   var o = this;
   o.None = 0;
   o.Equal = 1;
   o.NotEqual = 2;
   o.Less = 3;
   o.LessEqual = 4;
   o.Greater = 5;
   o.GreaterEqual = 6;
   o.Always = 7;
   return o;
}
MO.EG3dDrawMode = new function EG3dDrawMode(){
   var o = this;
   o.Unknown = 0;
   o.Points = 1;
   o.Lines = 2;
   o.LineStrip = 3;
   o.LineLoop = 4;
   o.Triangles = 5;
   o.TriangleStrip = 6;
   o.TriangleFan = 7;
   o.Quads = 8;
   o.QuadStrip = 9;
   return o;
}
MO.EG3dFillMode = new function EG3dFillMode(){
   var o = this;
   o.Unknown = 0;
   o.Point = 1;
   o.Line = 2;
   o.Face = 3;
   return o;
}
MO.EG3dIndexStride = new function EG3dIndexStride(){
   var o = this;
   o.Unknown = 0;
   o.Uint16 = 1;
   o.Uint32 = 2;
   return o;
}
MO.EG3dParameterFormat = new function EG3dParameterFormat(){
   var o = this;
   o.Unknown = 0;
   o.Float1 = 1;
   o.Float2 = 2;
   o.Float3 = 3;
   o.Float4 = 4;
   o.Float3x3 = 5;
   o.Float4x3 = 6;
   o.Float4x4 = 7;
   return o;
}
MO.EG3dSampler = new function EG3dSampler(){
   var o = this;
   o.Diffuse       = 'diffuse';
   o.Alpha         = 'alpha';
   o.Normal        = 'normal';
   o.SpecularColor = 'specular.color';
   o.SpecularLevel = 'specular.level';
   o.Light         = 'light';
   o.Reflect       = 'reflect';
   o.Refract       = 'refract';
   o.Emissive      = 'emissive';
   o.Height        = 'height';
   o.Environment   = 'environment';
   return o;
}
MO.EG3dSamplerFilter = new function EG3dSamplerFilter(){
   var o = this;
   o.Unknown        = 'Unknown';
   o.Nearest        = 'Nearest';
   o.Linear         = 'Linear';
   o.Repeat         = 'Repeat';
   o.MirroredRepeat = 'MirroredRepeat';
   o.ClampToEdge    = 'ClampToEdge';
   o.ClampToBorder  = 'ClampToBorder';
   return o;
}
MO.EG3dShader = new function EG3dShader(){
   var o = this;
   o.Unknown = 0;
   o.Vertex   = 1;
   o.Fragment = 2;
   return o;
}
MO.EG3dTexture = new function EG3dTexture(){
   var o = this;
   o.Unknown = 0;
   o.Flat2d = 1;
   o.Flat3d = 2;
   o.Cube= 3;
   return o;
}
MO.SG3dContextCapability = function SG3dContextCapability(){
   var o = this;
   o.vendor              = null;
   o.version             = null;
   o.shaderVersion       = null;
   o.optionDebug         = false;
   o.optionInstance      = false;
   o.optionLayout        = false;
   o.optionMaterialMap   = false;
   o.optionIndex32       = false;
   o.optionShaderSource  = false;
   o.mergeCount          = 0;
   o.attributeCount      = null;
   o.vertexCount         = 65536;
   o.vertexConst         = null;
   o.fragmentConst       = null;
   o.varyingCount        = null;
   o.samplerCount        = null;
   o.samplerSize         = null;
   o.samplerCompressRgb  = null;
   o.samplerCompressRgba = null;
   o.shader              = null;
   return o;
}
MO.SG3dContextCapability.prototype.calculateBoneCount = function SG3dContextCapability_calculateBoneCount(boneCount, vertexCount){
   var o = this;
   var rb = 0;
   var bi = boneCount % 4;
   if(bi != 0){
      rb = boneCount + 4 - bi;
   }else{
      rb = boneCount;
   }
   var r = 0;
   var ib = (o.vertexConst - 16) / 4;
   if(rb > ib){
      r = ib;
   }else{
      r = rb;
   }
   return r;
}
MO.SG3dContextCapability.prototype.calculateInstanceCount = function SG3dContextCapability_calculateInstanceCount(boneCount, vertexCount){
   var o = this;
   var cr = (4 * boneCount) + 4;
   var ib = (o.vertexConst - 16) / cr;
   var r = cl;
   if(vertexCount > 0){
      var iv = o.vertexCount / vertexCount;
      r = Math.min(ib, iv);
   }
   if(r > 64){
      r = 64;
   }
   return r;
}
MO.SG3dContextCapability.prototype.dispose = function SG3dContextCapability_dispose(){
   var o = this;
   o.shader = null;
   MO.RObject.free(o);
}
MO.SG3dLayoutBuffer = function SG3dLayoutBuffer(){
   var o = this;
   o.slot     = null;
   o.buffer   = null;
   o.index    = null;
   o.formatCd = null;
   o.dispose  = MO.SG3dLayoutBuffer_dispose;
   return o;
}
MO.SG3dLayoutBuffer_dispose = function SG3dLayoutBuffer_dispose(){
   var o = this;
   o.slot = null;
   o.buffer = null;
   o.index = null;
   o.formatCd = null;
}
MO.SG3dLayoutSampler = function SG3dLayoutSampler(){
   var o = this;
   o.slot    = null;
   o.index   = -1;
   o.texture = null;
   o.dispose = MO.SG3dLayoutSampler_dispose;
   return o;
}
MO.SG3dLayoutSampler_dispose = function SG3dLayoutSampler_dispose(){
   var o = this;
   o.slot = null;
   o.index = -1;
   o.texture = null;
}
MO.FG3dBuffer = function FG3dBuffer(o){
   o = MO.Class.inherits(this, o, MO.FG3dObject);
   o._code   = MO.Class.register(o, new MO.AGetSet('_code'));
   o._data   = MO.Class.register(o, new MO.AGetSet('_data'));
   o.isValid = MO.Method.virtual(o, 'isValid');
   o.dispose = MO.FG3dBuffer_dispose;
   return o;
}
MO.FG3dBuffer_dispose = function FG3dBuffer_dispose(){
   var o = this;
   o._data = null;
   o.__base.FG3dObject.dispose.call(o);
}
MO.FG3dContext = function FG3dContext(o){
   o = MO.Class.inherits(this, o, MO.FGraphicContext);
   o._optionAlpha        = true;
   o._optionAntialias    = false;
   o._viewportRectangle  = MO.Class.register(o, new MO.AGetter('_viewportRectangle'));
   o._capability         = MO.Class.register(o, new MO.AGetter('_capability'));
   o._statistics         = MO.Class.register(o, new MO.AGetter('_statistics'));
   o._fillModeCd         = MO.EG3dFillMode.Face;
   o._optionDepth        = false;
   o._optionCull         = false;
   o._depthModeCd        = 0;
   o._cullModeCd         = 0;
   o._statusBlend        = false;
   o._blendSourceCd      = 0;
   o._blendTargetCd      = 0;
   o._program            = null;
   o._storePrograms      = null;
   o._storeLayouts       = null;
   o._storeBuffers       = null;
   o._storeTextures      = null;
   o._storeTargets       = null;
   o.construct           = MO.FG3dContext_construct;
   o.linkCanvas          = MO.FG3dContext_linkCanvas;
   o.createObject        = MO.FG3dContext_createObject;
   o.createProgram       = MO.Method.virtual(o, 'createProgram');
   o.createLayout        = MO.Method.virtual(o, 'createLayout');
   o.createVertexBuffer  = MO.Method.virtual(o, 'createVertexBuffer');
   o.createIndexBuffer   = MO.Method.virtual(o, 'createIndexBuffer');
   o.createFlatTexture   = MO.Method.virtual(o, 'createFlatTexture');
   o.createCubeTexture   = MO.Method.virtual(o, 'createCubeTexture');
   o.createRenderTarget  = MO.Method.virtual(o, 'createRenderTarget');
   o.setViewport         = MO.Method.virtual(o, 'setViewport');
   o.setFillMode         = MO.Method.virtual(o, 'setFillMode');
   o.setDepthMode        = MO.Method.virtual(o, 'setDepthMode');
   o.setCullingMode      = MO.Method.virtual(o, 'setCullingMode');
   o.setBlendFactors     = MO.Method.virtual(o, 'setBlendFactors');
   o.setScissorRectangle = MO.Method.virtual(o, 'setScissorRectangle');
   o.setRenderTarget     = MO.Method.virtual(o, 'setRenderTarget');
   o.setProgram          = MO.Method.virtual(o, 'setProgram');
   o.bindVertexBuffer    = MO.Method.virtual(o, 'bindVertexBuffer');
   o.bindTexture         = MO.Method.virtual(o, 'bindTexture');
   o.prepare             = MO.FG3dContext_prepare;
   o.clear               = MO.Method.virtual(o, 'clear');
   o.clearColor          = MO.Method.virtual(o, 'clearColor');
   o.clearDepth          = MO.Method.virtual(o, 'clearDepth');
   o.drawTriangles       = MO.Method.virtual(o, 'drawTriangles');
   o.present             = MO.Method.virtual(o, 'present');
   o.dispose             = MO.FG3dContext_dispose;
   return o;
}
MO.FG3dContext_construct = function FG3dContext_construct(){
   var o = this;
   o.__base.FGraphicContext.construct.call(o);
   o._viewportRectangle = new MO.SRectangle();
   o._statistics = MO.Class.create(MO.FG3dStatistics);
   MO.Console.find(MO.FStatisticsConsole).register('graphic3d.context', o._statistics);
   o._storePrograms = new MO.TObjects();
   o._storeLayouts = new MO.TObjects();
   o._storeBuffers = new MO.TObjects();
   o._storeTextures = new MO.TObjects();
   o._storeTargets = new MO.TObjects();
}
MO.FG3dContext_linkCanvas = function FG3dContext_linkCanvas(h){
   var o = this;
   o._size.set(h.width, h.height);
}
MO.FG3dContext_createObject = function FG3dContext_createObject(clazz){
   var o = this;
   var instance = MO.Class.create(clazz);
   instance.linkGraphicContext(o);
   instance.setup();
   return instance;
}
MO.FG3dContext_prepare = function FG3dContext_prepare(){
   this._statistics.resetFrame();
}
MO.FG3dContext_dispose = function FG3dContext_dispose(){
   var o = this;
   var programs = o._storePrograms;
   if(programs){
      var count = programs.count();
      for(var i = 0; i < count; i++){
         var program = programs.at(i);
         program.dispose();
      }
      o._storePrograms = MO.Lang.Object.dispose(programs);
   }
   var layouts = o._storeLayouts;
   if(layouts){
      var count = layouts.count();
      for(var i = 0; i < count; i++){
         var layout = layouts.at(i);
         layout.dispose();
      }
      o._storeLayouts = MO.Lang.Object.dispose(layouts);
   }
   var buffers = o._storeBuffers;
   if(buffers){
      var count = buffers.count();
      for(var i = 0; i < count; i++){
         var buffer = buffers.at(i);
         buffer.dispose();
      }
      o._storeBuffers = MO.Lang.Object.dispose(buffers);
   }
   var textures = o._storeTextures;
   if(textures){
      var count = textures.count();
      for(var i = 0; i < count; i++){
         var texture = textures.at(i);
         texture.dispose();
      }
      o._storeTextures = MO.Lang.Object.dispose(textures);
   }
   var targets = o._storeTargets;
   if(targets){
      var count = targets.count();
      for(var i = 0; i < count; i++){
         var target = targets.at(i);
         target.dispose();
      }
      o._storeTargets = MO.Lang.Object.dispose(targets);
   }
   o._program = null;
   o._viewportRectangle = MO.Lang.Object.dispose(o._viewportRectangle);
   o._capability = MO.Lang.Object.dispose(o._capability);
   o._statistics = MO.Lang.Object.dispose(o._statistics);
   o._handleInstance = null;
   o._handleLayout = null;
   o._handle = null;
   o.__base.FGraphicContext.dispose.call(o);
}
MO.FG3dCubeTexture = function FG3dCubeTexture(o){
   o = MO.Class.inherits(this, o, MO.FG3dTexture);
   o.size = 0;
   o.construct = MO.FG3dTexture_construct;
   o.upload    = MO.Method.virtual(o, 'upload');
   o.update    = MO.Method.empty;
   return o;
}
MO.FG3dTexture_construct = function FG3dTexture_construct(){
   var o = this;
   o.__base.FG3dTexture.construct();
   o._textureCd = MO.EG3dTexture.Cube;
}
MO.FG3dFlatTexture = function FG3dFlatTexture(o){
   o = MO.Class.inherits(this, o, MO.FG3dTexture);
   o._optionFlipY = MO.Class.register(o, new MO.AGetSet('_optionFlipY'), false);
   o._size        = MO.Class.register(o, new MO.AGetter('_size'));
   o.construct    = MO.FG3dFlatTexture_construct;
   o.uploadData   = MO.Method.virtual(o, 'uploadData');
   o.upload       = MO.Method.virtual(o, 'upload');
   o.update       = MO.Method.empty;
   o.dispose      = MO.FG3dFlatTexture_dispose;
   return o;
}
MO.FG3dFlatTexture_construct = function FG3dFlatTexture_construct(){
   var o = this;
   o.__base.FG3dTexture.construct.call(o);
   o._textureCd = MO.EG3dTexture.Flat2d;
   o._size = new MO.SSize2();
}
MO.FG3dFlatTexture_dispose = function FG3dFlatTexture_dispose(){
   var o = this;
   o._size = MO.Lang.Object.dispose(o._size);
   o.__base.FG3dTexture.dispose.call(o);
}
MO.FG3dFragmentShader = function FG3dFragmentShader(o){
   o = MO.Class.inherits(this, o, MO.FG3dShader);
   return o;
}
MO.FG3dIndexBuffer = function FG3dIndexBuffer(o){
   o = MO.Class.inherits(this, o, MO.FG3dBuffer);
   o._strideCd   = MO.Class.register(o, new MO.AGetSet('_strideCd'), MO.EG3dIndexStride.Uint16);
   o._count      = MO.Class.register(o, new MO.AGetSet('_count'), 0);
   o._drawModeCd = MO.Class.register(o, new MO.AGetSet('_drawModeCd'), MO.EG3dDrawMode.Triangles);
   o._lineWidth  = MO.Class.register(o, new MO.AGetSet('_lineWidth'), 1);
   o.upload      = MO.Method.virtual(o, 'upload');
   return o;
}
MO.FG3dLayout = function FG3dLayout(o){
   o = MO.Class.inherits(this, o, MO.FG3dObject);
   o._buffers       = MO.Class.register(o, new MO.AGetter('_buffers'));
   o._samplers      = MO.Class.register(o, new MO.AGetter('_samplers'));
   o.linkBuffers    = MO.FG3dLayout_linkBuffers;
   o.bindBuffers    = MO.FG3dLayout_bindBuffers;
   o.linkSamplers   = MO.FG3dLayout_linkSamplers;
   o.bindSamplers   = MO.FG3dLayout_bindSamplers;
   o.unbindSamplers = MO.FG3dLayout_unbindSamplers;
   o.dispose        = MO.FG3dLayout_dispose;
   return o;
}
MO.FG3dLayout_construct = function FG3dLayout_construct(){
   var o = this;
   o.__base.FG3dObject.construct.call(o);
}
MO.FG3dLayout_linkBuffers = function FG3dLayout_linkBuffers(buffers){
   var o = this;
   if(!buffers.isEmpty()){
      var items = o._buffers;
      if(!items){
         items = o._buffers = new MO.TObjects();
      }
      items.assign(buffers);
   }
}
MO.FG3dLayout_bindBuffers = function FG3dLayout_bindBuffers(){
   var o = this;
   var context = o._graphicContext;
   var buffers = o._buffers;
   if(buffers){
      var count = buffers.count();
      for(var i = 0; i < count; i++){
         var buffer = buffers.at(i);
         context.bindVertexBuffer(buffer.slot, buffer.buffer, buffer.index, buffer.formatCd);
      }
   }
}
MO.FG3dLayout_linkSamplers = function FG3dLayout_linkSamplers(samplers){
   var o = this;
   if(!samplers.isEmpty()){
      var items = o._samplers;
      if(!items){
         items = o._samplers = new MO.TObjects();
      }
      items.assign(samplers);
   }
}
MO.FG3dLayout_bindSamplers = function FG3dLayout_bindSamplers(){
   var o = this;
   var context = o._graphicContext;
   var samplers = o._samplers;
   if(samplers){
      var count = samplers.count();
      for(var i = 0; i < count; i++){
         var sampler = samplers.at(i);
         context.bindTexture(sampler.slot, sampler.index, sampler.texture);
      }
   }
}
MO.FG3dLayout_unbindSamplers = function FG3dLayout_unbindSamplers(){
   var o = this;
   var context = o._graphicContext;
   var samplers = o._samplers;
   if(samplers){
      var count = samplers.count();
      for(var i = 0; i < count; i++){
         var sampler = samplers.at(i);
         context.bindTexture(sampler.slot, sampler.index, null);
      }
   }
}
MO.FG3dLayout_dispose = function FG3dLayout_dispose(){
   var o = this;
   o._buffers = MO.Lang.Object.dispose(o._buffers);
   o._samplers = MO.Lang.Object.dispose(o._samplers);
   o.__base.FG3dObject.dispose.call(o);
}
MO.FG3dProgram = function FG3dProgram(o){
   o = MO.Class.inherits(this, o, MO.FG3dObject);
   o._attributes       = null;
   o._parameters       = null;
   o._samplers         = null;
   o._vertexShader     = null;
   o._fragmentShader   = null;
   o.hasAttribute      = MO.FG3dProgram_hasAttribute;
   o.registerAttribute = MO.FG3dProgram_registerAttribute;
   o.findAttribute     = MO.FG3dProgram_findAttribute;
   o.attributes        = MO.FG3dProgram_attributes;
   o.hasParameter      = MO.FG3dProgram_hasParameter;
   o.registerParameter = MO.FG3dProgram_registerParameter;
   o.findParameter     = MO.FG3dProgram_findParameter;
   o.parameters        = MO.FG3dProgram_parameters;
   o.hasSampler        = MO.FG3dProgram_hasSampler;
   o.registerSampler   = MO.FG3dProgram_registerSampler;
   o.findSampler       = MO.FG3dProgram_findSampler;
   o.samplers          = MO.FG3dProgram_samplers;
   o.vertexShader      = MO.Method.virtual(o, 'vertexShader');
   o.fragmentShader    = MO.Method.virtual(o, 'fragmentShader');
   o.setAttribute      = MO.FG3dProgram_setAttribute;
   o.setParameter      = MO.FG3dProgram_setParameter;
   o.setParameter4     = MO.FG3dProgram_setParameter4;
   o.setSampler        = MO.FG3dProgram_setSampler;
   o.upload            = MO.Method.virtual(o, 'upload');
   o.dispose           = MO.FG3dProgram_dispose;
   return o;
}
MO.FG3dProgram_hasAttribute = function FG3dProgram_hasAttribute(){
   var o = this;
   var r = o._attributes;
   return r ? !r.isEmpty() : false;
}
MO.FG3dProgram_registerAttribute = function FG3dProgram_registerAttribute(n){
   var o = this;
   var r = MO.Class.create(MO.FG3dProgramAttribute);
   r._name = n;
   o.attributes().set(n, r);
   return r;
}
MO.FG3dProgram_findAttribute = function FG3dProgram_findAttribute(n){
   return this._attributes ? this._attributes.get(n) : null;
}
MO.FG3dProgram_attributes = function FG3dProgram_attributes(){
   var o = this;
   var r = o._attributes;
   if(r == null){
      r = o._attributes = new MO.TDictionary();
   }
   return r;
}
MO.FG3dProgram_hasParameter = function FG3dProgram_hasParameter(){
   var o = this;
   var r = o._parameters;
   return r ? !r.isEmpty() : false;
}
MO.FG3dProgram_registerParameter = function FG3dProgram_registerParameter(pn, pf){
   var o = this;
   var r = MO.Class.create(MO.FG3dProgramParameter);
   r._name = pn;
   r.formatCd = pf;
   o.parameters().set(pn, r);
   return r;
}
MO.FG3dProgram_findParameter = function FG3dProgram_findParameter(n){
   return this._parameters ? this._parameters.get(n) : null;
}
MO.FG3dProgram_parameters = function FG3dProgram_parameters(){
   var o = this;
   var r = o._parameters;
   if(r == null){
      r = o._parameters = new MO.TDictionary();
   }
   return r;
}
MO.FG3dProgram_hasSampler = function FG3dProgram_hasSampler(){
   var o = this;
   var r = o._samplers;
   return r ? !r.isEmpty() : false;
}
MO.FG3dProgram_registerSampler = function FG3dProgram_registerSampler(pn){
   var o = this;
   var r = MO.Class.create(MO.FG3dProgramSampler);
   r._name = pn;
   o.samplers().set(pn, r);
   return r;
}
MO.FG3dProgram_findSampler = function FG3dProgram_findSampler(n){
   return this._samplers ? this._samplers.get(n) : null;
}
MO.FG3dProgram_samplers = function FG3dProgram_samplers(){
   var o = this;
   var r = o._samplers;
   if(r == null){
      r = o._samplers = new MO.TDictionary();
   }
   return r;
}
MO.FG3dProgram_setAttribute = function FG3dProgram_setAttribute(pn, pb, pf){
   var o = this;
   var p = o.findAttribute(pn);
   if(p == null){
      throw new MO.TError(o, 'Bind invalid attribute. (name={1})', pn);
   }
   o._graphicContext.bindVertexBuffer(p._slot, pb, 0, pf);
}
MO.FG3dProgram_setParameter = function FG3dProgram_setParameter(pn, pv, pc){
   var o = this;
   var p = o.findParameter(pn);
   if(p == null){
      throw new MO.TError(o, 'Bind invalid parameter. (name={1})', pn);
   }
   var d = null;
   var t = pv.constructor;
   if((t == Float32Array) || (t == MO.SMatrix3d) || (t == MO.SPerspectiveMatrix3d)){
      d = pv;
   }else if(t == MO.SColor4){
      d = MO.Lang.TypeArray.float4();
      d[0] = pv.red;
      d[1] = pv.green;
      d[2] = pv.blue;
      d[3] = pv.alpha;
   }else if((t == MO.SPoint3) || (t == MO.SVector3)){
      d = MO.Lang.TypeArray.float3();
      d[0] = pv.x;
      d[1] = pv.y;
      d[2] = pv.z;
   }else if((t == MO.SPoint4) || (t == MO.SVector4)){
      d = MO.Lang.TypeArray.float4();
      d[0] = pv.x;
      d[1] = pv.y;
      d[2] = pv.z;
      d[3] = pv.w;
   }else{
      throw new MO.TError(o, 'Bind invalid parameter type. (name={1}, type={2})', pn, t);
   }
   if(p.attachData(d)){
      o._graphicContext.bindConst(null, p._slot, p._formatCd, d, pc);
   }
}
MO.FG3dProgram_setParameter4 = function FG3dProgram_setParameter4(pn, px, py, pz, pw){
   var v = MO.Lang.TypeArray.float4();
   v[0] = px;
   v[1] = py;
   v[2] = pz;
   v[3] = pw;
   this.setParameter(pn, v, 1);
}
MO.FG3dProgram_setSampler = function FG3dProgram_setSampler(name, texture){
   var o = this;
   var sampler = o.findSampler(name);
   if(!sampler){
      throw new MO.TError(o, 'Bind invalid sampler. (name={1})', name);
   }
   o._graphicContext.bindTexture(sampler._slot, sampler._index, texture);
}
MO.FG3dProgram_dispose = function FG3dProgram_dispose(){
   var o = this;
   o._attributes = MO.Lang.Object.dispose(o._attributes, true);
   o._parameters = MO.Lang.Object.dispose(o._parameters, true);
   o._samplers = MO.Lang.Object.dispose(o._samplers, true);
   o._vertexShader = MO.Lang.Object.dispose(o._vertexShader);
   o._fragmentShader = MO.Lang.Object.dispose(o._fragmentShader);
   o.__base.FG3dObject.dispose.call(o);
}
MO.FG3dProgramAttribute = function FG3dProgramAttribute(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._name       = MO.Class.register(o, new MO.AGetter('_name'));
   o._linker     = MO.Class.register(o, new MO.AGetter('_linker'));
   o._statusUsed = MO.Class.register(o, new MO.AGetter('_statusUsed'), false);
   o._slot       = null;
   o._index      = -1;
   o._formatCd   = MO.Class.register(o, new MO.AGetter('_formatCd'), MO.EG3dAttributeFormat.Unknown);
   o.loadConfig  = MO.FG3dProgramAttribute_loadConfig;
   o.dispose     = MO.FG3dProgramAttribute_dispose;
   return o;
}
MO.FG3dProgramAttribute_loadConfig = function FG3dProgramAttribute_loadConfig(xconfig){
   var o = this;
   o._name = xconfig.get('name');
   o._linker = xconfig.get('linker');
   o._formatCd = MO.Lang.Enum.encode(MO.EG3dAttributeFormat, xconfig.get('format'));
}
MO.FG3dProgramAttribute_dispose = function FG3dProgramAttribute_dispose(){
   var o = this;
   o._slot = null;
   o.__base.FObject.dispose.call(o);
}
MO.FG3dProgramParameter = function FG3dProgramParameter(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._name       = MO.Class.register(o, new MO.AGetter('_name'));
   o._linker     = MO.Class.register(o, new MO.AGetter('_linker'));
   o._formatCd   = MO.EG3dParameterFormat.Unknown;
   o._define     = MO.Class.register(o, new MO.AGetter('_define'));
   o._statusUsed = false;
   o._slot       = null;
   o._size       = 0;
   o._buffer     = null;
   o._memory     = null;
   o.attachData  = MO.FG3dProgramParameter_attachData;
   o.loadConfig  = MO.FG3dProgramParameter_loadConfig;
   o.dispose     = MO.FG3dProgramParameter_dispose;
   return o;
}
MO.FG3dProgramParameter_attachData = function FG3dProgramParameter_attachData(value){
   var o = this;
   var result = false;
   var clazz = value.constructor;
   if(clazz == MO.SMatrix3d){
      var memory = o._memory;
      if(!memory){
         memory = o._memory = new Float32Array(16);
      }
      result = MO.Lang.Float.attach(memory, value._data, 16);
   }else if(clazz == Float32Array){
      var length = value.length;
      var memory = o._memory;
      if(!memory){
         memory = o._memory = new Float32Array(length);
      }
      result = MO.Lang.Float.attach(memory, value, length);
   }else{
      throw new MO.TError(o, 'Unknown data type.');
   }
   return result;
}
MO.FG3dProgramParameter_loadConfig = function FG3dProgramParameter_loadConfig(xconfig){
   var o = this;
   o._name = xconfig.get('name');
   o._linker = xconfig.get('linker');
   o._formatCd = MO.Lang.Enum.encode(MO.EG3dParameterFormat, xconfig.get('format'));
   o._define = xconfig.get('define');
}
MO.FG3dProgramParameter_dispose = function FG3dProgramParameter_dispose(){
   var o = this;
   o._slot = null;
   o._memory = null;
   o.__base.FObject.dispose.call(o);
}
MO.FG3dProgramSampler = function FG3dProgramSampler(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._name       = MO.Class.register(o, new MO.AGetter('_name'));
   o._linker     = MO.Class.register(o, new MO.AGetter('_linker'));
   o._statusUsed = false;
   o._formatCd   = MO.Class.register(o, new MO.AGetter('_formatCd'), MO.EG3dTexture.Flat2d);
   o._bind       = true;
   o._slot       = -1;
   o._index      = 0;
   o._source     = null;
   o.loadConfig  = MO.FG3dProgramSampler_loadConfig;
   o.dispose     = MO.FG3dProgramSampler_dispose;
   return o;
}
MO.FG3dProgramSampler_loadConfig = function FG3dProgramSampler_loadConfig(xconfig){
   var o = this;
   o._name = xconfig.get('name');
   o._linker = xconfig.get('linker');
   o._bind = MO.Lang.Boolean.parse(xconfig.get('bind', 'Y'));
   o._formatCd = MO.Lang.Enum.encode(MO.EG3dTexture, xconfig.get('format', 'Flat2d'));
}
MO.FG3dProgramSampler_dispose = function FG3dProgramSampler_dispose(){
   var o = this;
   o._slot = null;
   o.__base.FObject.dispose.call(o);
}
MO.FG3dRenderTarget = function FG3dRenderTarget(o){
   o = MO.Class.inherits(this, o, MO.FG3dObject);
   o._size     = MO.Class.register(o, new MO.AGetter('_size'));
   o._color    = MO.Class.register(o, new MO.AGetter('_color'));
   o._textures = null;
   o.construct = MO.FG3dRenderTarget_construct;
   o.setQualityCd = MO.FG3dRenderTarget_setQualityCd;
   o.textures  = MO.FG3dRenderTarget_textures;
   o.dispose   = MO.FG3dRenderTarget_dispose;
   return o;
}
MO.FG3dRenderTarget_construct = function FG3dRenderTarget_construct(){
   var o = this;
   o.__base.FG3dObject.construct();
   o._size = new MO.SSize2();
   o._color = new MO.SColor4();
   o._color.set(0.0, 0.0, 0.0, 1.0);
}
MO.FG3dRenderTarget_setQualityCd = function FG3dRenderTarget_setQualityCd(qualityCd){
   var o = this;
   var size = o._size;
   switch(qualityCd){
      case MO.EGraphicQuality.Highest:
         size.set(4096, 4096);
         break;
      case MO.EGraphicQuality.High:
         size.set(2048, 2048);
         break;
      case MO.EGraphicQuality.Middle:
         size.set(1024, 1024);
         break;
      case MO.EGraphicQuality.Low:
         size.set(512, 512);
         break;
      case MO.EGraphicQuality.Lowest:
         size.set(256, 256);
         break;
      default:
         size.set(64, 64);
   }
}
MO.FG3dRenderTarget_textures = function FG3dRenderTarget_textures(){
   var o = this;
   var textures = o._textures;
   if(!textures){
      textures = o._textures = new MO.TObjects();
   }
   return textures;
}
MO.FG3dRenderTarget_dispose = function FG3dRenderTarget_dispose(){
   var o = this;
   o._size = MO.Lang.Object.dispose(o._size);
   o._color = MO.Lang.Object.dispose(o._color);
   o._textures = MO.Lang.Object.dispose(o._textures);
   o.__base.FG3dObject.dispose.call(o);
}
MO.FG3dShader = function FG3dShader(o){
   o = MO.Class.inherits(this, o, MO.FG3dObject);
   o._source = MO.Class.register(o, new MO.AGetter('_source'));
   o.upload  = MO.Method.virtual(o, 'upload');
   return o;
}
MO.FG3dStatistics = function FG3dStatistics(o){
   o = MO.Class.inherits(this, o, MO.FStatistics);
   o._frameClearCount     = MO.Class.register(o, new MO.AGetter('_frameClearCount'), 0);
   o._frameFillModeCount  = MO.Class.register(o, new MO.AGetter('_frameFillModeCount'), 0);
   o._frameDepthModeCount = MO.Class.register(o, new MO.AGetter('_frameDepthModeCount'), 0);
   o._frameCullModeCount  = MO.Class.register(o, new MO.AGetter('_frameCullModeCount'), 0);
   o._frameBlendModeCount = MO.Class.register(o, new MO.AGetter('_frameBlendModeCount'), 0);
   o._frameProgramCount   = MO.Class.register(o, new MO.AGetter('_frameProgramCount'), 0);
   o._frameConstCount     = MO.Class.register(o, new MO.AGetter('_frameConstCount'), 0);
   o._frameConstLength    = MO.Class.register(o, new MO.AGetter('_frameConstLength'), 0);
   o._frameBufferCount    = MO.Class.register(o, new MO.AGetter('_frameBufferCount'), 0);
   o._frameTextureCount   = MO.Class.register(o, new MO.AGetter('_frameTextureCount'), 0);
   o._frameTargetCount    = MO.Class.register(o, new MO.AGetter('_frameTargetCount'), 0);
   o._frameDrawCount      = MO.Class.register(o, new MO.AGetter('_frameDrawCount'), 0);
   o._frameTriangleCount  = MO.Class.register(o, new MO.AGetter('_frameTriangleCount'), 0);
   o._programTotal        = MO.Class.register(o, new MO.AGetter('_programTotal'), 0);
   o._layoutTotal         = MO.Class.register(o, new MO.AGetter('_layoutTotal'), 0);
   o._vertexBufferTotal   = MO.Class.register(o, new MO.AGetter('_vertexBufferTotal'), 0);
   o._indexBufferTotal    = MO.Class.register(o, new MO.AGetter('_indexBufferTotal'), 0);
   o._flatTextureTotal    = MO.Class.register(o, new MO.AGetter('_flatTextureTotal'), 0);
   o._cubeTextureTotal    = MO.Class.register(o, new MO.AGetter('_cubeTextureTotal'), 0);
   o._targetTotal         = MO.Class.register(o, new MO.AGetter('_targetTotal'), 0);
   o.reset                = MO.FG3dStatistics_reset;
   o.resetFrame           = MO.FG3dStatistics_resetFrame;
   return o;
}
MO.FG3dStatistics_reset = function FG3dStatistics_reset(){
   o._programTotal = 0;
   o._layoutTotal = 0;
   o._vertexBufferTotal = 0;
   o._indexBufferTotal = 0;
   o._flatTextureTotal = 0;
   o._cubeTextureTotal = 0;
   o._targetTotal = 0;
}
MO.FG3dStatistics_resetFrame = function FG3dStatistics_resetFrame(){
   var o = this;
   o._frameClearCount = 0;
   o._frameFillModeCount = 0;
   o._frameDepthModeCount = 0;
   o._frameCullModeCount = 0;
   o._frameBlendModeCount = 0;
   o._frameProgramCount = 0;
   o._frameConstCount = 0;
   o._frameConstLength = 0;
   o._frameBufferCount = 0;
   o._frameTextureCount = 0;
   o._frameTargetCount = 0;
   o._frameTriangleCount = 0;
   o._frameDrawCount = 0;
}
MO.FG3dTexture = function FG3dTexture(o){
   o = MO.Class.inherits(this, o, MO.FG3dObject);
   o._code        = MO.Class.register(o, new MO.AGetSet('_code'));
   o._textureCd   = MO.Class.register(o, new MO.AGetter('_textureCd'), MO.EG3dTexture.Unknown);
   o._filterMinCd = MO.Class.register(o, new MO.AGetSet('_filterMinCd'), MO.EG3dSamplerFilter.Linear);
   o._filterMagCd = MO.Class.register(o, new MO.AGetSet('_filterMagCd'), MO.EG3dSamplerFilter.Linear);
   o._wrapS       = MO.Class.register(o, new MO.AGetSet('_wrapS'), MO.EG3dSamplerFilter.Unknown);
   o._wrapT       = MO.Class.register(o, new MO.AGetSet('_wrapT'), MO.EG3dSamplerFilter.Unknown);
   o._statusLoad  = false;
   o.isValid      = MO.Method.virtual(o, 'isValid');
   o.setFilterCd  = MO.FG3dTexture_setFilterCd;
   o.setWrapCd    = MO.FG3dTexture_setWrapCd;
   return o;
}
MO.FG3dTexture_setFilterCd = function FG3dTexture_setFilterCd(minCd, magCd){
   var o = this;
   o._filterMinCd = minCd;
   o._filterMagCd = magCd;
}
MO.FG3dTexture_setWrapCd = function FG3dTexture_setWrapCd(wrapS, wrapT){
   var o = this;
   o._wrapS = wrapS;
   o._wrapT = wrapT;
}
MO.FG3dVertexBuffer = function FG3dVertexBuffer(o){
   o = MO.Class.inherits(this, o, MO.FG3dBuffer);
   o._formatCd = MO.Class.register(o, new MO.AGetSet('_formatCd'), MO.EG3dAttributeFormat.Unknown);
   o._stride   = MO.Class.register(o, new MO.AGetSet('_stride'), 0);
   o._count    = MO.Class.register(o, new MO.AGetSet('_count'), 0);
   o.upload    = MO.Method.virtual(o, 'upload');
   return o;
}
MO.FG3dVertexShader = function FG3dVertexShader(o){
   o = MO.Class.inherits(this, o, MO.FG3dShader);
   return o;
}
MO.FG3dAutomaticEffect = function FG3dAutomaticEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dEffect);
   o._optionMerge                 = false;
   o._optionBlendMode             = true;
   o._supportInstance             = false;
   o._supportLayout               = false;
   o._supportMaterialMap          = false;
   o._supportVertexColor          = true;
   o._supportVertexCoord          = true;
   o._supportVertexNormal         = true;
   o._supportVertexNormalFull     = true;
   o._supportVertexNormalCompress = false;
   o._supportSkeleton             = false;
   o._supportAlpha                = true;
   o._supportAmbient              = true;
   o._supportDiffuse              = true;
   o._supportDiffuseView          = true;
   o._supportSpecularColor        = true;
   o._supportSpecularLevel        = true;
   o._supportSpecularView         = true;
   o._supportLight                = true;
   o._supportReflect              = true;
   o._supportRefract              = true;
   o._supportEmissive             = true;
   o._supportHeight               = true;
   o._supportEnvironment          = true;
   o._dynamicSkeleton             = true;
   o.setup                        = MO.FG3dAutomaticEffect_setup;
   o.buildInfo                    = MO.FG3dAutomaticEffect_buildInfo;
   o.bindAttributes               = MO.FG3dAutomaticEffect_bindAttributes;
   o.bindSamplers                 = MO.FG3dAutomaticEffect_bindSamplers;
   o.bindMaterialSamplers         = MO.FG3dAutomaticEffect_bindMaterialSamplers;
   o.bindMaterial                 = MO.FG3dAutomaticEffect_bindMaterial;
   o.drawRenderable               = MO.FG3dAutomaticEffect_drawRenderable;
   return o;
}
MO.FG3dAutomaticEffect_setup = function FG3dAutomaticEffect_setup(){
   var o = this;
   var c = o._graphicContext;
   var cp = c.capability();
   o._supportLayout = cp.optionLayout;
}
MO.FG3dAutomaticEffect_buildInfo = function FG3dAutomaticEffect_buildInfo(tagContext, info){
   var o = this;
   var context = o._graphicContext;
   var capability = context.capability();
   var flag = new MO.TString();
   flag.append(info.techniqueModeCode)
   tagContext.set("technique.mode", info.techniqueModeCode);
   var om = o._optionMerge = info.optionMerge;
   if(om){
      var mergeCount = info.mergeCount;
      var mergeStride = info.mergeStride;
      flag.append("|OI" + mergeCount);
      tagContext.setBoolean("option.instance", true);
      tagContext.set("instance.count", mergeCount);
      tagContext.set("instance.length", mergeStride * mergeCount);
   }
   if(capability.optionMaterialMap){
      flag.append("|OM");
      tagContext.setBoolean("option.material.map", true);
      o._supportMaterialMap = true;
   }
   if(info.optionNormalInvert){
      flag.append("|ON");
      tagContext.setBoolean("option.normal.invert", true);
      o._supportNormalInvert = true;
   }
   if(info.optionColor){
      flag.append("|OC");
      tagContext.setBoolean("option.color", true);
      o.optionAmbient = true;
   }
   if(info.optionAmbient){
      flag.append("|OA");
      tagContext.setBoolean("option.ambient", true);
      o.optionAmbient = true;
   }
   if(info.optionDiffuse){
      flag.append("|OD");
      tagContext.setBoolean("option.diffuse", true);
      o.optionDiffuse = true;
   }
   if(info.optionSpecular){
      flag.append("|OS");
      tagContext.setBoolean("option.specular", true);
      o.optionSpecular = true;
   }
   if(info.optionReflect){
      flag.append("|ORL");
      tagContext.setBoolean("option.reflect", true);
      o.optionReflect = true;
   }
   if(info.optionRefract){
      flag.append("|ORF");
      tagContext.setBoolean("option.refract", true);
      o.optionRefract = true;
   }
   var ac = info.attributeContains(MO.EG3dAttribute.Color);
   o._dynamicVertexColor = (o._supportVertexColor && ac);
   if(o._dynamicVertexColor){
      flag.append("|AC");
      tagContext.setBoolean("vertex.attribute.color", true);
   }
   var ad = info.attributeContains(MO.EG3dAttribute.Coord);
   o._dynamicVertexCoord = (o._supportVertexCoord && ad);
   if(o._dynamicVertexCoord){
      flag.append("|AD");
      tagContext.setBoolean("vertex.attribute.coord", true);
   }
   var an = info.attributeContains(MO.EG3dAttribute.Normal);
   o._dynamicVertexNormal = (o._supportVertexNormal && an);
   if(o._dynamicVertexNormal){
      flag.append("|AN");
      tagContext.setBoolean("vertex.attribute.normal", true);
   }
   var ab = info.attributeContains(MO.EG3dAttribute.Binormal);
   var at = info.attributeContains(MO.EG3dAttribute.Tangent);
   var af = (an && ab && at);
   o._dynamicVertexNormalFull = (o._supportVertexNormalFull && af);
   if(o._dynamicVertexNormalFull){
      flag.append("|ANF");
      tagContext.setBoolean("vertex.attribute.normal.full", true);
   }
   o._dynamicVertexNormalCompress = info.optionNormalCompress;
   if(o._dynamicVertexNormalCompress){
      flag.append("|ANC");
      tagContext.setBoolean("vertex.attribute.normal.compress", true);
   }
   o._dynamicInstance = (o._supportInstance && capability.optionInstance);
   if(o._dynamicInstance){
      flag.append("|SI");
      if(info){
         tagContext.setBoolean("support.instance", true);
      }
   }
   o._dynamicSkeleton = o._supportSkeleton;
   if(o._dynamicSkeleton){
      flag.append("|SS");
      if(info){
         tagContext.setBoolean("support.skeleton", true);
      }
   }
   var sdf  = info.samplerContains(MO.EG3dSampler.Diffuse);
   o._dynamicAlpha = o._supportAlpha;
   if(o._dynamicAlpha){
      flag.append("|RA");
      if(info){
         tagContext.setBoolean("support.alpha", true);
      }
      o._optionBlendMode = true;
   }else{
      o._optionBlendMode = false;
   }
   o._dynamicAmbient = o._supportAmbient;
   if(o._dynamicAmbient){
      flag.append("|TA");
      if(info){
         tagContext.setBoolean("support.ambient", true);
      }
      if(sdf){
         flag.append("|TAS");
         if(info){
            tagContext.setBoolean("support.ambient.sampler", true);
         }
      }
   }
   if(info.samplerContains(MO.EG3dSampler.Alpha)){
      tagContext.setBoolean("support.alpha.sampler", true);
   }
   var snr = info.samplerContains(MO.EG3dSampler.Normal);
   o._dynamicDiffuse = o._supportDiffuse && (o._dynamicVertexNormal || snr);
   if(o._supportDiffuse){
      if(info){
         tagContext.setBoolean("support.diffuse", true);
      }
      if(snr){
         flag.append("|TDD");
         if(info){
            tagContext.setBoolean("support.dump", true);
            tagContext.setBoolean("support.diffuse.dump", true);
         }
      }else if(o._dynamicVertexNormal){
         flag.append("|TDN");
         if(info){
            tagContext.setBoolean("support.diffuse.normal", true);
         }
      }
   }
   o._dynamicDiffuseView = (o._supportDiffuseView && (o._dynamicVertexNormal || snr));
   if(o._supportDiffuseView){
      if(info){
         tagContext.setBoolean("support.diffuse.view", true);
      }
      if(snr){
         flag.append("|TDVD");
         if(info){
            tagContext.setBoolean("support.dump", true);
            tagContext.setBoolean("support.diffuse.view.dump", true);
         }
      }else if(o._dynamicVertexNormal){
         flag.append("|TDVN");
         if(info){
            tagContext.setBoolean("support.diffuse.view.normal", true);
         }
      }
   }
   var spc = info.samplerContains(MO.EG3dSampler.SpecularColor);
   var spl = info.samplerContains(MO.EG3dSampler.SpecularLevel);
   o._dynamicSpecularColor = (o._supportSpecularColor && spc);
   o._dynamicSpecularLevel = (o._supportSpecularLevel && spl);
   if((o._dynamicSpecularColor || o._dynamicSpecularLevel) && o._dynamicVertexNormal){
      flag.append("|TS");
      if(info){
         tagContext.setBoolean("support.specular", true);
      }
      if(o._dynamicSpecularColor){
         flag.append("|TSC");
         if(info){
            tagContext.setBoolean("support.specular.color", true);
         }
      }
      if(o._dynamicSpecularLevel){
         flag.append("|TSL");
         if(info){
            tagContext.setBoolean("support.specular.level", true);
         }
      }else{
         flag.append("|NSL");
         if(info){
            tagContext.setBoolean("support.specular.normal", true);
         }
      }
   }
   o._dynamicSpecularView = o._supportSpecularView;
   if(o._dynamicSpecularView && o._dynamicVertexNormal){
      flag.append("|TSV");
      if(info){
         tagContext.setBoolean("support.specular.view", true);
      }
      if(o._dynamicSpecularColor){
         flag.append("|TSVC");
         if(info){
            tagContext.setBoolean("support.specular.view.color", true);
         }
      }
      if(o._dynamicSpecularLevel){
         flag.append("|TSVL");
         if(info){
            tagContext.setBoolean("support.specular.view.level", true);
         }
      }else{
         flag.append("|NSVL");
         if(info){
            tagContext.setBoolean("support.specular.view.normal", true);
         }
      }
   }
   var slg = info.samplerContains(MO.EG3dSampler.Light);
   o._dynamicLight = (o._supportLight && slg);
   if(o._dynamicLight){
      flag.append("|TL");
      if(info){
         tagContext.setBoolean("support.sampler.light", true);
         tagContext.setBoolean("support.light", true);
      }
   }
   var slr = info.samplerContains(MO.EG3dSampler.Reflect);
   o._dynamicReflect = (o._supportReflect && slr);
   if(o._dynamicReflect){
      flag.append("|TRL");
      if(info){
         tagContext.setBoolean("support.sampler.light", true);
         tagContext.setBoolean("support.reflect", true);
      }
   }
   var slf = info.samplerContains(MO.EG3dSampler.Refract);
   o._dynamicRefract = (o._supportRefract && slf);
   if(o._dynamicRefract){
      flag.append("|TRF");
      if(info){
         tagContext.setBoolean("support.sampler.light", true);
         tagContext.setBoolean("support.refract", true);
      }
   }
   var sle = info.samplerContains(MO.EG3dSampler.Emissive);
   o._dynamicEmissive = (o._supportEmissive && sle);
   if(o._dynamicEmissive){
      flag.append("|TLE");
      if(info){
         tagContext.setBoolean("support.sampler.light", true);
         tagContext.setBoolean("support.emissive", true);
      }
   }
   var shg = info.samplerContains(MO.EG3dSampler.Height);
   o._dynamicHeight = (o._supportHeight && shg);
   if(o._dynamicHeight){
      flag.append("|TH");
      if(info){
         tagContext.setBoolean("support.height", true);
      }
   }
   var sen = info.samplerContains(MO.EG3dSampler.Environment);
   o._dynamicEnvironment = (o._supportEnvironment && sen);
   if(o._dynamicEnvironment){
      flag.append("|TE");
      if(info){
         tagContext.setBoolean("support.environment", true);
      }
   }
   if(o._dynamicSkeleton){
      var boneCount = capability.calculateBoneCount(info.vertexBoneCount, info.vertexCount);
      flag.append("|B" + boneCount);
      tagContext.set("bone.count", boneCount);
      tagContext.set("bone.array.count", boneCount * 3);
      tagContext.setBoolean("support.bone.weight.1", true);
      tagContext.setBoolean("support.bone.weight.2", true);
      tagContext.setBoolean("support.bone.weight.3", true);
      tagContext.setBoolean("support.bone.weight.4", true);
   }
   tagContext.code = flag.flush();
}
MO.FG3dAutomaticEffect_bindAttributes = function FG3dAutomaticEffect_bindAttributes(renderable){
   var o = this;
   var program = o._program;
   if(program.hasAttribute()){
      var attributes = program.attributes();
      var count = attributes.count();
      for(var n = 0; n < count; n++){
         var attribute = attributes.at(n);
         if(attribute._statusUsed){
            var buffer = renderable.findVertexBuffer(attribute._linker);
            program.setAttribute(attribute._name, buffer, buffer._formatCd);
         }
      }
   }
}
MO.FG3dAutomaticEffect_bindSamplers = function FG3dAutomaticEffect_bindSamplers(renderable){
   var o = this;
   var program = o._program;
   if(o._supportMaterialMap){
      program.setSampler('fs_material', region.materialMap().texture());
   }
   if(program.hasSampler()){
      var samplers = program.samplers();
      var count = samplers.count();
      for(var n = 0; n < count; n++){
         var sampler = samplers.at(n);
         if(sampler._bind && sampler._statusUsed){
            var name = sampler.name();
            var linker = sampler.linker();
            var texture = renderable.findTexture(linker);
            program.setSampler(name, texture.texture());
         }
      }
   }
}
MO.FG3dAutomaticEffect_bindMaterialSamplers = function FG3dAutomaticEffect_bindMaterialSamplers(renderable, material){
   var o = this;
   var program = o._program;
   if(program.hasSampler()){
      var samplers = program.samplers();
      var count = samplers.count();
      for(var n = 0; n < count; n++){
         var sampler = samplers.at(n);
         if(sampler._bind && sampler._statusUsed){
            var linker = sampler.linker();
            var texture = material.findBitmap(linker);
            program.setSampler(sampler.name(), texture.texture());
         }
      }
   }
}
MO.FG3dAutomaticEffect_bindMaterial = function FG3dAutomaticEffect_bindMaterial(material){
   var o = this;
   var context = o._graphicContext;
   var info = material.info();
   if(info.optionDepth){
      context.setDepthMode(o._stateDepth, o._stateDepthCd);
   }else{
      context.setDepthMode(false);
   }
   if(info.optionAlpha){
      context.setBlendFactors(o._stateBlend, o._stateBlendSourceCd, o._stateBlendTargetCd);
   }else{
      context.setBlendFactors(false);
   }
   if(info.optionDouble){
      context.setCullingMode(false);
   }else{
      context.setCullingMode(o._stateDepth, o._stateCullCd);
   }
}
MO.FG3dAutomaticEffect_drawRenderable = function FG3dAutomaticEffect_drawRenderable(region, renderable){
   var o = this;
   var context = o._graphicContext;
   var program = o._program;
   var info = renderable.activeInfo();
   var layout = info.layout;
   if(!layout){
      layout = info.layout = context.createLayout();
      if(o._supportLayout){
         layout.bind();
         o.bindAttributes(renderable);
         layout.unbind();
         layout.active();
      }else{
         context.recordBegin();
         o.bindAttributes(renderable);
         context.recordEnd();
         layout.linkBuffers(context.recordBuffers());
      }
      context.recordBegin();
      o.bindSamplers(renderable);
      context.recordEnd();
      layout.linkSamplers(context.recordSamplers());
   }else{
      if(o._supportLayout){
         layout.active();
      }else{
         layout.bindBuffers();
      }
      layout.bindSamplers();
   }
   var indexCount = 0;
   var indexBuffers = renderable.indexBuffers();
   if(indexBuffers){
      indexCount = indexBuffers.count();
   }
   if(indexCount > 1){
      var materials = renderable.materials();
      for(var i = 0; i < indexCount; i++){
         var indexBuffer = indexBuffers.at(i);
         if(materials){
            var material = materials.at(i);
            if(material){
               o.bindMaterialSamplers(renderable, material);
            }
         }
         context.drawTriangles(indexBuffer);
      }
   }else if(indexCount == 1){
      var indexBuffer = indexBuffers.first();
      context.drawTriangles(indexBuffer);
   }else{
      throw new MO.TError(o, 'Index buffer is not found.');
   }
   if(o._supportLayout){
      layout.deactive();
   }
}
MO.FG3dSelectAutomaticEffect = function FG3dSelectAutomaticEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dAutomaticEffect);
   o._code          = 'select.automatic';
   o.drawRenderable = MO.FG3dSelectAutomaticEffect_drawRenderable;
   return o;
}
MO.FG3dSelectAutomaticEffect_drawRenderable = function FG3dSelectAutomaticEffect_drawRenderable(region, renderable, index){
   var o = this;
   var context = o._graphicContext;
   var size = context.size();
   var program = o._program;
   var selectX = region._selectX;
   var selectY = region._selectY;
   var material = renderable.material();
   var materialInfo = material.info();
   o.bindMaterial(material);
   program.setParameter('vc_model_matrix', renderable.currentMatrix());
   program.setParameter('vc_vp_matrix', region.calculate(MO.EG3dRegionParameter.CameraViewProjectionMatrix));
   program.setParameter4('vc_offset', size.width, size.height, 1 - (selectX / size.width) * 2, (selectY / size.height) * 2 - 1);
   var i = index + 1;
   var i1 = i  & 0xFF;
   var i2 = (i >> 8) & 0xFF;
   var i3 = (i >> 16) & 0xFF;
   program.setParameter4('fc_index', i1 / 255, i2 / 255, i3 / 255, materialInfo.alphaBase);
   o.bindAttributes(renderable);
   o.bindSamplers(renderable);
   var indexBuffers = renderable.indexBuffers();
   var count = indexBuffers.count();
   for(var i = 0; i < count; i++){
      var indexBuffer = indexBuffers.at(i);
      context.drawTriangles(indexBuffer);
   }
}
MO.FG3dSelectPass = function FG3dSelectPass(o){
   o = MO.Class.inherits(this, o, MO.FG3dTechniquePass);
   o._code         = 'select';
   o._texture      = MO.Class.register(o, new MO.AGetter('_texture'));
   o._renderTarget = null;
   o._position     = null;
   o._data         = null;
   o.construct     = MO.FG3dSelectPass_construct;
   o.setup         = MO.FG3dSelectPass_setup;
   o.activeEffects = MO.FG3dSelectPass_activeEffects;
   o.drawRegion    = MO.FG3dSelectPass_drawRegion;
   return o;
}
MO.FG3dSelectPass_construct = function FG3dSelectPass_construct(){
   var o = this;
   o.__base.FG3dTechniquePass.construct.call(o);
   o._data = new Uint8Array(4);
   o._position = new MO.SPoint2();
}
MO.FG3dSelectPass_setup = function FG3dSelectPass_setup(){
   var o = this;
   o.__base.FG3dTechniquePass.setup.call(o);
   var c = o._graphicContext;
   var T = o._texture = c.createFlatTexture();
   T.setFilterCd(MO.EG3dSamplerFilter.Nearest, MO.EG3dSamplerFilter.Nearest);
   T.setWrapCd(MO.EG3dSamplerFilter.ClampToEdge, MO.EG3dSamplerFilter.ClampToEdge);
   var t = o._renderTarget = c.createRenderTarget();
   t.size().set(1, 1);
   t.textures().push(T);
   t.build();
}
MO.FG3dSelectPass_activeEffects = function FG3dSelectPass_activeEffects(region, renderables){
   var o = this;
   var spaceName = region.spaceName();
   var count = renderables.count();
   for(var i = 0; i < count; i++){
      var renderable = renderables.at(i);
      if(renderable.optionSelect()){
         var info = renderable.selectInfo(spaceName);
         if(!info.effect){
            info.effect = MO.Console.find(MO.FG3dEffectConsole).find(o._graphicContext, region, renderable);
         }
      }
   }
}
MO.FG3dSelectPass_drawRegion = function FG3dSelectPass_drawRegion(region){
   var o = this;
   var context = o._graphicContext;
   var handle = context.handle();
   context.setRenderTarget(o._renderTarget);
   context.clear(0, 0, 0, 0, 1, 1);
   var renderables = region.allRenderables();
   o.activeEffects(region, renderables);
   var renderableCount = renderables.count();
   for(var i = 0; i < renderableCount; i++){
      var renderable = renderables.at(i);
      if(renderable.optionSelect()){
         var effect = renderable.activeEffect();
         context.setProgram(effect.program());
         var display = renderable.display();
         if(!display){
            effect.drawRenderable(region, renderable, i);
         }else if(!display._optionFace){
            effect.drawRenderable(region, renderable, i);
         }
      }
   }
   context.clearDepth(1);
   for(var i = 0; i < renderableCount; i++){
      var renderable = renderables.at(i);
      if(renderable.optionSelect()){
         var effect = renderable.activeEffect();
         context.setProgram(effect.program());
         var display = renderable.display();
         if(display && display._optionFace){
            effect.drawRenderable(region, renderable, i);
         }
      }
   }
   handle.readPixels(0, 0, 1, 1, handle.RGBA, handle.UNSIGNED_BYTE, o._data);
   var index = o._data[0] + (o._data[1] << 8) + (o._data[2] << 16);
   o._selectRenderable = null;
   if(index != 0){
      o._selectRenderable = renderables.get(index - 1);
   }
}
MO.FG3dSelectSkeletonEffect = function FG3dSelectSkeletonEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dAutomaticEffect);
   o._code          = 'select.automatic';
   o.drawRenderable = MO.FG3dSelectSkeletonEffect_drawRenderable;
   return o;
}
MO.FG3dSelectSkeletonEffect_drawRenderable = function FG3dSelectSkeletonEffect_drawRenderable(pg, pr, pi){
   var o = this;
   var c = o._graphicContext;
   var s = c.size();
   var p = o._program;
   var sx = pg._selectX;
   var sy = pg._selectY;
   var m = pr.material();
   var mi = m.info();
   o.bindMaterial(m);
   p.setParameter('vc_model_matrix', pr.currentMatrix());
   p.setParameter('vc_vp_matrix', pg.calculate(MO.EG3dRegionParameter.CameraViewProjectionMatrix));
   p.setParameter4('vc_offset', s.width, s.height, 1 - (sx / s.width) * 2, (sy / s.height) * 2 - 1);
   var i = pi + 1;
   var i1 = i  & 0xFF;
   var i2 = (i >> 8) & 0xFF;
   var i3 = (i >> 16) & 0xFF;
   p.setParameter4('fc_index', i1 / 255, i2 / 255, i3 / 255, mi.alphaBase);
   o.bindAttributes(pr);
   o.bindSamplers(pr);
   c.drawTriangles(pr.indexBuffer());
}
MO.FG3dSelectTechnique = function FG3dSelectTechnique(o){
   o = MO.Class.inherits(this, o, MO.FG3dTechnique);
   o._code       = 'select';
   o._passSelect = MO.Class.register(o, new MO.AGetter('_passSelect'));
   o.setup       = MO.FG3dSelectTechnique_setup;
   o.test        = MO.FG3dSelectTechnique_test;
   o.testDynamic = MO.FG3dSelectTechnique_testDynamic;
   return o;
}
MO.FG3dSelectTechnique_setup = function FG3dSelectTechnique_setup(){
   var o = this;
   o.__base.FG3dTechnique.setup.call(o);
   o.registerMode(MO.EG3dTechniqueMode.Result);
   var pass = o._passSelect = MO.Class.create(MO.FG3dSelectPass);
   pass.linkGraphicContext(o);
   pass.setup();
   o.pushPass(pass);
}
MO.FG3dSelectTechnique_test = function FG3dSelectTechnique_test(region, x, y){
   var o = this;
   region._selectX = x;
   region._selectY = y;
   region.setTechnique(o);
   o.drawRegion(region);
   return o._passSelect._selectRenderable;
}
MO.FWglContext = function FWglContext(o){
   o = MO.Class.inherits(this, o, MO.FG3dContext);
   o._handle             = MO.Class.register(o, new MO.AGetter('_handle'));
   o._handleInstance     = null;
   o._handleLayout       = null;
   o._handleDrawBuffers  = MO.Class.register(o, new MO.AGetter('_handleDrawBuffers'));
   o._handleSamplerS3tc  = MO.Class.register(o, new MO.AGetter('_handleSamplerS3tc'));
   o._handleDebugShader  = null;
   o._activeRenderTarget = null;
   o._activeTextureSlot  = null;
   o._parameters         = null;
   o._extensions         = null;
   o._statusRecord       = false;
   o._recordBuffers      = MO.Class.register(o, new MO.AGetter('_recordBuffers'));
   o._recordSamplers     = MO.Class.register(o, new MO.AGetter('_recordSamplers'));
   o._statusFloatTexture = MO.Class.register(o, new MO.AGetter('_statusFloatTexture'), false);
   o._statusDrawBuffers  = MO.Class.register(o, new MO.AGetter('_statusDrawBuffers'), false);
   o._statusScissor      = MO.Class.register(o, new MO.AGetter('_statusScissor'), false);
   o._data9              = null;
   o._data16             = null;
   o.construct           = MO.FWglContext_construct;
   o.isValid             = MO.FWglContext_isValid;
   o.linkCanvas          = MO.FWglContext_linkCanvas;
   o.parameter           = MO.FWglContext_parameter;
   o.parameters          = MO.FWglContext_parameters;
   o.extension           = MO.FWglContext_extension;
   o.extensions          = MO.FWglContext_extensions;
   o.enableFloatTexture  = MO.FWglContext_enableFloatTexture;
   o.enableDrawBuffers   = MO.FWglContext_enableDrawBuffers;
   o.recordBegin         = MO.FWglContext_recordBegin;
   o.recordEnd           = MO.FWglContext_recordEnd;
   o.createProgram       = MO.FWglContext_createProgram;
   o.createLayout        = MO.FWglContext_createLayout;
   o.createVertexBuffer  = MO.FWglContext_createVertexBuffer;
   o.createIndexBuffer   = MO.FWglContext_createIndexBuffer;
   o.createFlatTexture   = MO.FWglContext_createFlatTexture;
   o.createCubeTexture   = MO.FWglContext_createCubeTexture;
   o.createRenderTarget  = MO.FWglContext_createRenderTarget;
   o.setViewport         = MO.FWglContext_setViewport;
   o.setFillMode         = MO.FWglContext_setFillMode;
   o.setDepthMode        = MO.FWglContext_setDepthMode;
   o.setCullingMode      = MO.FWglContext_setCullingMode;
   o.setBlendFactors     = MO.FWglContext_setBlendFactors;
   o.setScissorRectangle = MO.FWglContext_setScissorRectangle;
   o.setRenderTarget     = MO.FWglContext_setRenderTarget;
   o.setProgram          = MO.FWglContext_setProgram;
   o.bindConst           = MO.FWglContext_bindConst;
   o.bindVertexBuffer    = MO.FWglContext_bindVertexBuffer;
   o.bindTexture         = MO.FWglContext_bindTexture;
   o.clear               = MO.FWglContext_clear;
   o.clearColor          = MO.FWglContext_clearColor;
   o.clearDepth          = MO.FWglContext_clearDepth;
   o.readPixels          = MO.FWglContext_readPixels;
   o.drawTriangles       = MO.FWglContext_drawTriangles;
   o.present             = MO.FWglContext_present;
   o.checkError          = MO.FWglContext_checkError;
   o.saveConfig          = MO.FWglContext_saveConfig;
   o.dispose             = MO.FWglContext_dispose;
   return o;
}
MO.FWglContext_construct = function FWglContext_construct(){
   var o = this;
   o.__base.FG3dContext.construct.call(o);
   o._capability = new MO.SG3dContextCapability();
   o._data9 = new Float32Array(9);
   o._data16 = new Float32Array(16);
   o._recordBuffers = new MO.TObjects();
   o._recordSamplers = new MO.TObjects();
}
MO.FWglContext_isValid = function FWglContext_isValid(){
   return this._handle;
}
MO.FWglContext_linkCanvas = function FWglContext_linkCanvas(hCanvas){
   var o = this;
   o.__base.FG3dContext.linkCanvas.call(o, hCanvas)
   o._hCanvas = hCanvas;
   if(hCanvas.getContext){
      var parameters = new Object();
      parameters.alpha = o._optionAlpha;
      parameters.antialias = o._optionAntialias;
      parameters.depth = true;
      parameters.stencil = false;
      parameters.premultipliedAlpha = false;
      var handle = null;
      var codes = ['experimental-webgl2', 'experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl']
      var count = codes.length;
      for(var i = 0; i < count; i++){
         var code = codes[i];
         handle = hCanvas.getContext(code, parameters);
         if(handle){
            break;
         }
      }
      if(!handle){
         MO.Logger.error(o, 'Create context3d failure.');
         var event = new MO.SEvent(o);
         event.code = MO.EGraphicError.UnsupportWebGL;
         event.message = "Current browser can't support WebGL technique.";
         MO.Window.processDeviceError(event);
         event.dispose();
         return false;
      }
      o._handle = handle;
      o._contextAttributes = handle.getContextAttributes();
   }else{
      var event = new MO.SEvent(o);
      event.code = MO.EGraphicError.UnsupportWebGL;
      event.message = "Canvas can't support WebGL technique.";
      MO.Window.processDeviceError(event);
      event.dispose();
      return false;
   }
   var handle = o._handle;
   o.setDepthMode(true, MO.EG3dDepthMode.LessEqual);
   o.setCullingMode(true, MO.EG3dCullMode.Front);
   var capability = o._capability;
   capability.vendor = handle.getParameter(handle.VENDOR);
   capability.version = handle.getParameter(handle.VERSION);
   capability.shaderVersion = handle.getParameter(handle.SHADING_LANGUAGE_VERSION);
   capability.attributeCount = handle.getParameter(handle.MAX_VERTEX_ATTRIBS);
   capability.vertexConst = handle.getParameter(handle.MAX_VERTEX_UNIFORM_VECTORS);
   capability.varyingCount = handle.getParameter(handle.MAX_VARYING_VECTORS);
   capability.fragmentConst = handle.getParameter(handle.MAX_FRAGMENT_UNIFORM_VECTORS);
   capability.samplerCount = handle.getParameter(handle.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
   capability.samplerSize = handle.getParameter(handle.MAX_TEXTURE_SIZE);
   var extension = o._handleInstance = handle.getExtension('ANGLE_instanced_arrays');
   if(extension){
      capability.optionInstance = true;
   }
   capability.mergeCount = parseInt((capability.vertexConst - 32) / 4);
   var extension = o._handleLayout = handle.getExtension('OES_vertex_array_object');
   if(extension){
      capability.optionLayout = true;
   }
   var extension = handle.getExtension('OES_element_index_uint');
   if(extension){
      capability.optionIndex32 = true;
   }
   var extension = o._handleDrawBuffers = handle.getExtension('WEBGL_draw_buffers');
   if(extension){
      capability.optionDrawBuffers = true;
   }
   var extension = o._handleSamplerS3tc = handle.getExtension('WEBGL_compressed_texture_s3tc');
   if(extension){
      capability.samplerCompressRgb = extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
      capability.samplerCompressRgba = extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
   }
   var shader = capability.shader = new Object();
   var vertexPrecision = shader.vertexPrecision = new Object();
   if(handle.getShaderPrecisionFormat){
      vertexPrecision.floatLow = handle.getShaderPrecisionFormat(handle.VERTEX_SHADER, handle.LOW_FLOAT);
      vertexPrecision.floatMedium = handle.getShaderPrecisionFormat(handle.VERTEX_SHADER, handle.MEDIUM_FLOAT);
      vertexPrecision.floatHigh = handle.getShaderPrecisionFormat(handle.VERTEX_SHADER, handle.HIGH_FLOAT);
      vertexPrecision.intLow = handle.getShaderPrecisionFormat(handle.VERTEX_SHADER, handle.LOW_INT);
      vertexPrecision.intMedium = handle.getShaderPrecisionFormat(handle.VERTEX_SHADER, handle.MEDIUM_INT);
      vertexPrecision.intHigh = handle.getShaderPrecisionFormat(handle.VERTEX_SHADER, handle.HIGH_INT);
   }
   var fragmentPrecision = shader.fragmentPrecision = new Object();
   if(handle.getShaderPrecisionFormat){
      fragmentPrecision.floatLow = handle.getShaderPrecisionFormat(handle.FRAGMENT_SHADER, handle.LOW_FLOAT);
      fragmentPrecision.floatMedium = handle.getShaderPrecisionFormat(handle.FRAGMENT_SHADER, handle.MEDIUM_FLOAT);
      fragmentPrecision.floatHigh = handle.getShaderPrecisionFormat(handle.FRAGMENT_SHADER, handle.HIGH_FLOAT);
      fragmentPrecision.intLow = handle.getShaderPrecisionFormat(handle.FRAGMENT_SHADER, handle.LOW_INT);
      fragmentPrecision.intMedium = handle.getShaderPrecisionFormat(handle.FRAGMENT_SHADER, handle.MEDIUM_INT);
      fragmentPrecision.intHigh = handle.getShaderPrecisionFormat(handle.FRAGMENT_SHADER, handle.HIGH_INT);
   }
   var extension = o._handleDebugShader = handle.getExtension('WEBGL_debug_shaders');
   if(extension){
      capability.optionShaderSource = true;
   }
   return true;
}
MO.FWglContext_parameter = function FWglContext_parameter(name){
   var parameters = this.parameters();
   return parameters[name];
}
MO.FWglContext_parameters = function FWglContext_parameters(){
   var o = this;
   var parameters = o._parameters;
   if(parameters){
      return parameters;
   }
   var names =['ACTIVE_TEXTURE',
      'ALIASED_LINE_WIDTH_RANGE',
      'ALIASED_POINT_SIZE_RANGE',
      'ALPHA_BITS',
      'ARRAY_BUFFER_BINDING',
      'BLEND',
      'BLEND_COLOR',
      'BLEND_DST_ALPHA',
      'BLEND_DST_RGB',
      'BLEND_EQUATION_ALPHA',
      'BLEND_EQUATION_RGB',
      'BLEND_SRC_ALPHA',
      'BLEND_SRC_RGB',
      'BLUE_BITS',
      'COLOR_CLEAR_VALUE',
      'COLOR_WRITEMASK',
      'COMPRESSED_TEXTURE_FORMATS',
      'CULL_FACE',
      'CULL_FACE_MODE',
      'CURRENT_PROGRAM',
      'DEPTH_BITS',
      'DEPTH_CLEAR_VALUE',
      'DEPTH_FUNC',
      'DEPTH_RANGE',
      'DEPTH_TEST',
      'DEPTH_WRITEMASK',
      'DITHER',
      'ELEMENT_ARRAY_BUFFER_BINDING',
      'FRAMEBUFFER_BINDING',
      'FRONT_FACE',
      'GENERATE_MIPMAP_HINT',
      'GREEN_BITS',
      'IMPLEMENTATION_COLOR_READ_FORMAT',
      'IMPLEMENTATION_COLOR_READ_TYPE',
      'LINE_WIDTH',
      'MAX_COMBINED_TEXTURE_IMAGE_UNITS',
      'MAX_CUBE_MAP_TEXTURE_SIZE',
      'MAX_FRAGMENT_UNIFORM_VECTORS',
      'MAX_RENDERBUFFER_SIZE',
      'MAX_TEXTURE_IMAGE_UNITS',
      'MAX_TEXTURE_SIZE',
      'MAX_VARYING_VECTORS',
      'MAX_VERTEX_ATTRIBS',
      'MAX_VERTEX_TEXTURE_IMAGE_UNITS',
      'MAX_VERTEX_UNIFORM_VECTORS',
      'MAX_VIEWPORT_DIMS',
      'PACK_ALIGNMENT',
      'POLYGON_OFFSET_FACTOR',
      'POLYGON_OFFSET_FILL',
      'POLYGON_OFFSET_UNITS',
      'RED_BITS',
      'RENDERBUFFER_BINDING',
      'RENDERER',
      'SAMPLE_BUFFERS',
      'SAMPLE_COVERAGE_INVERT',
      'SAMPLE_COVERAGE_VALUE',
      'SAMPLES',
      'SCISSOR_BOX',
      'SCISSOR_TEST',
      'SHADING_LANGUAGE_VERSION',
      'STENCIL_BACK_FAIL',
      'STENCIL_BACK_FUNC',
      'STENCIL_BACK_PASS_DEPTH_FAIL',
      'STENCIL_BACK_PASS_DEPTH_PASS',
      'STENCIL_BACK_REF',
      'STENCIL_BACK_VALUE_MASK',
      'STENCIL_BACK_WRITEMASK',
      'STENCIL_BITS',
      'STENCIL_CLEAR_VALUE',
      'STENCIL_FAIL',
      'STENCIL_FUNC',
      'STENCIL_PASS_DEPTH_FAIL',
      'STENCIL_PASS_DEPTH_PASS',
      'STENCIL_REF',
      'STENCIL_TEST',
      'STENCIL_VALUE_MASK',
      'STENCIL_WRITEMASK',
      'SUBPIXEL_BITS',
      'TEXTURE_BINDING_2D',
      'TEXTURE_BINDING_CUBE_MAP',
      'UNPACK_ALIGNMENT',
      'UNPACK_COLORSPACE_CONVERSION_WEBGL',
      'UNPACK_FLIP_Y_WEBGL',
      'UNPACK_PREMULTIPLY_ALPHA_WEBGL',
      'VENDOR',
      'VERSION',
      'VIEWPORT'];
   var handle = o._handle;
   var count = names.length;
   parameters = new Object();
   for(var i = 0; i < count; i++){
      var name = names[i];
      parameters[name] = handle.getParameter(handle[name]);
   }
   var extension = handle.getExtension('WEBGL_debug_renderer_info');
   if(extension){
      parameters['UNMASKED_RENDERER_WEBGL'] = handle.getParameter(extension.UNMASKED_RENDERER_WEBGL);
      parameters['UNMASKED_VENDOR_WEBGL'] = handle.getParameter(extension.UNMASKED_VENDOR_WEBGL);
   }
   o._parameters = parameters;
   return parameters;
}
MO.FWglContext_extension = function FWglContext_extension(name){
   var extensions = this.extensions();
   return extensions[name];
}
MO.FWglContext_extensions = function FWglContext_extensions(){
   var o = this;
   var extensions = o._extensions;
   if(!extensions){
      extensions = o._extensions = new Object();
      var handle = o._handle;
      var names = handle.getSupportedExtensions();
      var count = names.length;
      for(var i = 0; i < count; i++){
         var name = names[i];
         extensions[name] = handle.getExtension(name);
      }
   }
   return extensions;
}
MO.FWglContext_enableFloatTexture = function FWglContext_enableFloatTexture(){
   var o = this;
   if(!o._statusFloatTexture){
      var handle = o._handle;
      var extension = handle.getExtension('OES_texture_float');
      if(!extension){
         return false;
      }
      var extension = handle.getExtension('OES_texture_float_linear');
      if(!extension){
         return false;
      }
      o._statusFloatTexture = true;
   }
   return o._statusFloatTexture;
}
MO.FWglContext_enableDrawBuffers = function FWglContext_enableDrawBuffers(){
   var o = this;
   if(!o._statusDrawBuffers){
      var handle = o._handle;
      var extension = o._handleDrawBuffers;
      if(!extension){
         return false;
      }
      extension.drawBuffersWEBGL([
         extension.COLOR_ATTACHMENT0_WEBGL
      ]);
      o._statusDrawBuffers = true;
   }
}
MO.FWglContext_recordBegin = function FWglContext_recordBegin(){
   var o = this;
   o._recordBuffers.clear();
   o._recordSamplers.clear();
   o._statusRecord = true;
}
MO.FWglContext_recordEnd = function FWglContext_recordEnd(){
   this._statusRecord = false;
}
MO.FWglContext_createProgram = function FWglContext_createProgram(){
   var o = this;
   var program = o.createObject(MO.FWglProgram);
   o._storePrograms.push(program);
   o._statistics._programTotal++;
   return program;
}
MO.FWglContext_createLayout = function FWglContext_createLayout(){
   var o = this;
   var layout = MO.Class.create(MO.FWglLayout);
   layout.linkGraphicContext(o);
   if(o._capability.optionLayout){
      layout.setup();
   }
   o._storeLayouts.push(layout);
   o._statistics._layoutTotal++;
   return layout;
}
MO.FWglContext_createVertexBuffer = function FWglContext_createVertexBuffer(clazz){
   var o = this;
   var buffer = o.createObject(MO.Runtime.nvl(clazz, MO.FWglVertexBuffer));
   buffer.linkGraphicContext(o);
   buffer.setup();
   o._storeBuffers.push(buffer);
   o._statistics._vertexBufferTotal++;
   return buffer;
}
MO.FWglContext_createIndexBuffer = function FWglContext_createIndexBuffer(clazz){
   var o = this;
   var buffer = o.createObject(MO.Runtime.nvl(clazz, MO.FWglIndexBuffer));
   o._storeBuffers.push(buffer);
   o._statistics._indexBufferTotal++;
   return buffer;
}
MO.FWglContext_createFlatTexture = function FWglContext_createFlatTexture(clazz){
   var o = this;
   var texture = o.createObject(MO.Runtime.nvl(clazz, MO.FWglFlatTexture));
   o._storeTextures.push(texture);
   o._statistics._flatTextureTotal++;
   return texture;
}
MO.FWglContext_createCubeTexture = function FWglContext_createCubeTexture(clazz){
   var o = this;
   var texture = o.createObject(MO.Runtime.nvl(clazz, MO.FWglCubeTexture));
   o._storeTextures.push(texture);
   o._statistics._cubeTextureTotal++;
   return texture;
}
MO.FWglContext_createRenderTarget = function FWglContext_createRenderTarget(clazz){
   var o = this;
   var texture = o.createObject(MO.Runtime.nvl(clazz, MO.FWglRenderTarget));
   o._storeTargets.push(texture);
   o._statistics._targetTotal++;
   return texture;
}
MO.FWglContext_setViewport = function FWglContext_setViewport(left, top, width, height){
   var o = this;
   o._viewportRectangle.set(left, top, width, height);
   o._handle.viewport(left, top, width, height);
}
MO.FWglContext_setFillMode = function FWglContext_setFillMode(fillModeCd){
   var o = this;
   var graphic = o._handle;
   if(o._fillModeCd == fillModeCd){
      return false;
   }
   o._statistics._frameFillModeCount++;
   switch(fillModeCd){
      case EG3dFillMode.Point:
         graphic.polygonMode(graphic.FRONT_AND_BACK, graphic.POINT);
         break;
      case EG3dFillMode.Line:
         graphic.polygonMode(graphic.FRONT_AND_BACK, graphic.LINE);
         break;
      case EG3dFillMode.Face:
         graphic.polygonMode(graphic.FRONT, graphic.FILL);
         break;
      default:
         throw new MO.TError('Invalid parameter. (fill_mode={1})', fillModeCd);
   }
   o._fillModeCd = fillModeCd;
   return true;
}
MO.FWglContext_setDepthMode = function FWglContext_setDepthMode(depthFlag, depthCd){
   var o = this;
   var graphic = o._handle;
   if((o._optionDepth == depthFlag) && (o._depthModeCd == depthCd)){
      return false;
   }
   o._statistics._frameDepthModeCount++;
   if(o._optionDepth != depthFlag){
      if(depthFlag){
         graphic.enable(graphic.DEPTH_TEST);
      }else{
         graphic.disable(graphic.DEPTH_TEST);
      }
      o._optionDepth = depthFlag;
   }
   if(depthFlag && (o._depthModeCd != depthCd)){
      var depthCode = MO.RWglUtility.convertDepthMode(graphic, depthCd);
      graphic.depthFunc(depthCode);
      o._depthModeCd = depthCd;
   }
   return true;
}
MO.FWglContext_setCullingMode = function FWglContext_setCullingMode(cullFlag, cullCd){
   var o = this;
   var graphic = o._handle;
   if((o._optionCull == cullFlag) && (o._cullModeCd == cullCd)){
      return false;
   }
   o._statistics._frameCullModeCount++;
   if(o._optionCull != cullFlag){
      if(cullFlag){
         graphic.enable(graphic.CULL_FACE);
      }else{
         graphic.disable(graphic.CULL_FACE);
      }
      o._optionCull = cullFlag;
   }
   if(cullFlag && (o._cullModeCd != cullCd)){
      var cullValue = MO.RWglUtility.convertCullMode(graphic, cullCd);
      graphic.cullFace(cullValue);
      o._cullModeCd = cullCd;
   }
   return true;
}
MO.FWglContext_setBlendFactors = function FWglContext_setBlendFactors(blendFlag, sourceCd, tagetCd){
   var o = this;
   var graphic = o._handle;
   if((o._statusBlend == blendFlag) && (o._blendSourceCd == sourceCd) && (o._blendTargetCd == tagetCd)){
      return false;
   }
   o._statistics._frameBlendModeCount++;
   if(o._statusBlend != blendFlag){
      if(blendFlag){
         graphic.enable(graphic.BLEND);
      }else{
         graphic.disable(graphic.BLEND);
         o._blendSourceCd = 0;
         o._blendTargetCd = 0;
      }
      o._statusBlend = blendFlag;
   }
   if(blendFlag && ((o._blendSourceCd != sourceCd) || (o._blendTargetCd != tagetCd))){
      var sourceValue = MO.RWglUtility.convertBlendFactors(graphic, sourceCd);
      var tagetValue = MO.RWglUtility.convertBlendFactors(graphic, tagetCd);
      graphic.blendFunc(sourceValue, tagetValue);
      o._blendSourceCd = sourceCd;
      o._blendTargetCd = tagetCd;
   }
   return true;
}
MO.FWglContext_setScissorRectangle = function FWglContext_setScissorRectangle(left, top, width, height){
   var o = this;
   var handle = o._handle;
   var scissorFlag = (width > 0) && (height > 0);
   if(o._statusScissor != scissorFlag){
      if(scissorFlag){
         handle.enable(handle.SCISSOR_TEST);
      }else{
         handle.disable(handle.SCISSOR_TEST);
      }
      o._statusScissor = scissorFlag;
   }
   if(scissorFlag){
      handle.scissor(left, top, width, height);
   }
}
MO.FWglContext_setRenderTarget = function FWglContext_setRenderTarget(renderTarget){
   var o = this;
   var graphic = o._handle;
   if(o._activeRenderTarget == renderTarget){
      return;
   }
   o._statistics._frameTargetCount++;
   var result = true;
   if(renderTarget == null){
      graphic.bindFramebuffer(graphic.FRAMEBUFFER, null);
      result = o.checkError("glBindFramebuffer", "Bind frame buffer. (frame_buffer={1})", null);
      if(!result){
         return result;
      }
      var size = o._size;
      graphic.viewport(0, 0, size.width, size.height);
   }else{
      graphic.bindFramebuffer(graphic.FRAMEBUFFER, renderTarget._handle);
      result = o.checkError("glBindFramebuffer", "Bind frame buffer. (frame_buffer={1})", renderTarget._handle);
      if(!result){
         return result;
      }
      var size = renderTarget.size();
      graphic.viewport(0, 0, size.width, size.height);
   }
   o._activeRenderTarget = renderTarget;
   return result;
}
MO.FWglContext_setProgram = function FWglContext_setProgram(program){
   var o = this;
   var graphic = o._handle;
   if(o._program == program){
      return;
   }
   o._statistics._frameProgramCount++;
   if(program){
      graphic.useProgram(program._handle);
   }else{
      graphic.useProgram(null);
   }
   o._program = program;
   return o.checkError("useProgram", "Set program failure. (program={1}, program_native={2})", program, program._handle);
}
MO.FWglContext_bindConst = function FWglContext_bindConst(shaderCd, slot, formatCd, data, count){
   var o = this;
   var graphic = o._handle;
   var result = true;
   o._statistics._frameConstCount++;
   switch(formatCd){
      case MO.EG3dParameterFormat.Float1:{
         graphic.uniform1fv(slot, data);
         o._statistics._frameConstLength += data.byteLength;
         result = o.checkError("uniform1fv", "Bind const data failure. (shader_cd={1}, slot={2}, data={3}, count={4})", shaderCd, slot, data, count);
         break;
      }
      case MO.EG3dParameterFormat.Float2:{
         graphic.uniform2fv(slot, data);
         o._statistics._frameConstLength += data.byteLength;
         result = o.checkError("uniform2fv", "Bind const data failure. (shader_cd={1}, slot={2}, data={3}, count={4})", shaderCd, slot, data, count);
         break;
      }
      case MO.EG3dParameterFormat.Float3:{
         graphic.uniform3fv(slot, data);
         o._statistics._frameConstLength += data.byteLength;
         result = o.checkError("uniform3fv", "Bind const data failure. (shader_cd={1}, slot={2}, data={3}, count={4})", shaderCd, slot, data, count);
         break;
      }
      case MO.EG3dParameterFormat.Float4:{
         graphic.uniform4fv(slot, data);
         o._statistics._frameConstLength += data.byteLength;
         result = o.checkError("uniform4fv", "Bind const data failure. (shader_cd={1}, slot={2}, data={3}, count={4})", shaderCd, slot, data, count);
         break;
      }
      case MO.EG3dParameterFormat.Float3x3:{
         var bytes = o._data9;
         bytes[ 0] = data[ 0];
         bytes[ 1] = data[ 4];
         bytes[ 2] = data[ 8];
         bytes[ 3] = data[ 1];
         bytes[ 4] = data[ 5];
         bytes[ 5] = data[ 9];
         bytes[ 6] = data[ 2];
         bytes[ 7] = data[ 6];
         bytes[ 8] = data[10];
         graphic.uniformMatrix3fv(slot, graphic.FALSE, bytes);
         o._statistics._frameConstLength += bytes.byteLength;
         result = o.checkError("uniformMatrix3fv", "Bind const matrix3x3 failure. (shader_cd={1}, slot={2}, data={3}, count={4})", shaderCd, slot, data, count);
         break;
      }
      case MO.EG3dParameterFormat.Float4x4:{
         var bytes = null;
         if(data.constructor == Float32Array){
            bytes = data;
         }else if(data.writeData){
            bytes = o._data16;
            data.writeData(bytes, 0);
         }else{
            throw new MO.TError('Unknown data type.');
         }
         graphic.uniformMatrix4fv(slot, graphic.FALSE, bytes);
         o._statistics._frameConstLength += bytes.byteLength;
         result = o.checkError("uniformMatrix4fv", "Bind const matrix4x4 failure. (shader_cd={1}, slot={2}, data={3}, count={4})", shaderCd, slot, data, count);
         break;
      }
      default:{
         throw new MO.TError(o, 'Unknown format type. (format_cd={1})', formatCd);
      }
   }
   return result;
}
MO.FWglContext_bindVertexBuffer = function FWglContext_bindVertexBuffer(slot, vertexBuffer, offset, formatCd){
   var o = this;
   var graphic = o._handle;
   var result = true;
   o._statistics._frameBufferCount++;
   if(o._statusRecord){
      var layout = new MO.SG3dLayoutBuffer();
      layout.slot = slot;
      layout.buffer = vertexBuffer;
      layout.index = offset;
      layout.formatCd = formatCd;
      o._recordBuffers.push(layout);
   }
   var handle = null;
   if(vertexBuffer != null){
      handle = vertexBuffer._handle;
   }
   graphic.bindBuffer(graphic.ARRAY_BUFFER, handle);
   result = o.checkError("bindBuffer", "Bind buffer. (buffer_id=%d)", handle);
   if(!result){
      return result;
   }
   if(vertexBuffer){
      graphic.enableVertexAttribArray(slot);
      result = o.checkError("enableVertexAttribArray", "Enable vertex attribute array. (slot=%d)", slot);
      if(!result){
         return result;
      }
   }else{
      graphic.disableVertexAttribArray(slot);
      result = o.checkError("disableVertexAttribArray", "Disable vertex attribute array. (slot=%d)", slot);
      return result;
   }
   var stride = vertexBuffer._stride;
   switch(formatCd){
      case MO.EG3dAttributeFormat.Float1:
         graphic.vertexAttribPointer(slot, 1, graphic.FLOAT, false, stride, offset);
         break;
      case MO.EG3dAttributeFormat.Float2:
         graphic.vertexAttribPointer(slot, 2, graphic.FLOAT, false, stride, offset);
         break;
      case MO.EG3dAttributeFormat.Float3:
         graphic.vertexAttribPointer(slot, 3, graphic.FLOAT, false, stride, offset);
         break;
      case MO.EG3dAttributeFormat.Float4:
         graphic.vertexAttribPointer(slot, 4, graphic.FLOAT, false, stride, offset);
         break;
      case MO.EG3dAttributeFormat.Byte4:
         graphic.vertexAttribPointer(slot, 4, graphic.UNSIGNED_BYTE, false, stride, offset);
         break;
      case MO.EG3dAttributeFormat.Byte4Normal:
         graphic.vertexAttribPointer(slot, 4, graphic.UNSIGNED_BYTE, true, stride, offset);
         break;
      default:
         throw new MO.TError(o, "Unknown vertex format. (format_cd=%d)", formatCd);
   }
   result = o.checkError("glVertexAttribPointer", "Bind vertex attribute pointer. (slot=%d, format_cd=%d)", slot, formatCd);
   return result;
}
MO.FWglContext_bindTexture = function FWglContext_bindTexture(slot, index, texture){
   var o = this;
   var graphic = o._handle;
   var result = true;
   o._statistics._frameTextureCount++;
   if(o._statusRecord){
      var layout = new MO.SG3dLayoutSampler();
      layout.slot = slot;
      layout.index = index;
      layout.texture = texture;
      o._recordSamplers.push(layout);
   }
   if(o._activeTextureSlot != slot){
      graphic.uniform1i(slot, index);
      graphic.activeTexture(graphic.TEXTURE0 + index);
      result = o.checkError("activeTexture", "Active texture failure. (slot=%d, index=%d)", slot, index);
      if(!result){
         return result;
      }
      o._activeTextureSlot = slot;
   }
   if(texture == null){
      graphic.bindTexture(graphic.TEXTURE_2D, null);
      result = o.checkError("bindTexture", "Bind texture clear failure. (slot=%d)", slot);
      return result;
   }
   var handle = texture._handle;
   var textureCd = texture.textureCd();
   switch(textureCd){
      case MO.EG3dTexture.Flat2d:{
         graphic.bindTexture(graphic.TEXTURE_2D, handle);
         result = o.checkError("glBindTexture", "Bind flag texture failure. (texture_id=%d)", handle);
         if(!result){
            return result;
         }
         break;
      }
      case MO.EG3dTexture.Cube:{
         graphic.bindTexture(graphic.TEXTURE_CUBE_MAP, handle);
         result = o.checkError("glBindTexture", "Bind cube texture failure. (texture_id=%d)", handle);
         if(!result){
            return result;
         }
         break;
      }
      default:{
         throw new MO.TError(o, 'Unknown texture type.');
      }
   }
   return result;
}
MO.FWglContext_clear = function FWglContext_clear(red, green, blue, alpha, depth){
   var o = this;
   var graphic = o._handle;
   graphic.clearColor(red, green, blue, alpha);
   graphic.clearDepth(depth);
   graphic.clear(graphic.COLOR_BUFFER_BIT | graphic.DEPTH_BUFFER_BIT);
   o._statistics._frameClearCount++;
}
MO.FWglContext_clearColor = function FWglContext_clearColor(red, green, blue, alpha){
   var o = this;
   var graphic = o._handle;
   graphic.clearColor(red, green, blue, alpha);
   graphic.clear(graphic.COLOR_BUFFER_BIT);
   o._statistics._frameClearCount++;
}
MO.FWglContext_clearDepth = function FWglContext_clearDepth(depth){
   var o = this;
   var graphic = o._handle;
   graphic.clearDepth(depth);
   graphic.clear(graphic.DEPTH_BUFFER_BIT);
   o._statistics._frameClearCount++;
}
MO.FWglContext_readPixels = function FWglContext_readPixels(left, top, width, height){
   var o = this;
   var graphic = o._handle;
   var length = 4 * width * height;
   var data = new Uint8Array(length);
   graphic.readPixels(left, top, width, height, graphic.RGBA, graphic.UNSIGNED_BYTE, data);
   return data;
}
MO.FWglContext_drawTriangles = function FWglContext_drawTriangles(indexBuffer, offset, count){
   var o = this;
   var graphic = o._handle;
   var result = true;
   if(offset == null){
      offset = 0;
   }
   if(count == null){
      count = indexBuffer.count();
   }
   graphic.bindBuffer(graphic.ELEMENT_ARRAY_BUFFER, indexBuffer._handle);
   result = o.checkError("bindBuffer", "Bind element array buffer failure. (index=0x%08X, offset=%d, count=%d, buffer_id)", indexBuffer, offset, count, indexBuffer._handle);
   if(!result){
       return result;
   }
   var strideCd = indexBuffer.strideCd();
   var strideValue = MO.RWglUtility.convertIndexStride(graphic, strideCd);
   var offsetValue = 0;
   switch(strideCd){
      case MO.EG3dIndexStride.Uint16:
         offsetValue = offset << 1;
         break;
      case MO.EG3dIndexStride.Uint32:
         offsetValue = offset << 2;
         break;
   }
   var drawModeCd = indexBuffer.drawModeCd();
   var drawModeValue = MO.RWglUtility.convertDrawMode(graphic, drawModeCd);
   switch(drawModeCd){
      case MO.EG3dDrawMode.Line:
         break;
   }
   graphic.drawElements(drawModeValue, count, strideValue, offsetValue);
   o._statistics._frameTriangleCount += count;
   o._statistics._frameDrawCount++;
   result = o.checkError("drawElements", "Draw triangles failure. (index={1}, offset={2}, count={3})", indexBuffer, offset, count);
   if(!result){
       return result;
   }
   graphic.bindBuffer(graphic.ELEMENT_ARRAY_BUFFER, null);
   result = o.checkError("bindBuffer", "Bind element array buffer failure. (index={1}, offset={2}, count={3})", indexBuffer, offset, count);
   if(!result){
       return result;
   }
   return result;
}
MO.FWglContext_present = function FWglContext_present(){
}
MO.FWglContext_checkError = function FWglContext_checkError(code, message, parameter1){
   var o = this;
   if(!o._capability.optionDebug){
      return true;
   }
   if(!MO.Runtime.isDebug()){
      return true;
   }
   var graphic = o._handle;
   var result = false;
   var error = null;
   var errorInfo = null;
   while(true){
      error = graphic.getError();
      if(error == graphic.NO_ERROR){
         result = true;
         break;
      }
      switch(error){
         case graphic.INVALID_OPERATION:
            errorInfo = "Invalid operation.";
            break;
         case graphic.INVALID_ENUM:
            errorInfo = "Invalid enum.";
            break;
         case graphic.INVALID_VALUE:
            errorInfo = "Invalid value.";
            break;
         case graphic.INVALID_FRAMEBUFFER_OPERATION:
            errorInfo = "Invalid paramebuffer opeartion.";
            break;
         case graphic.OUT_OF_MEMORY:
            errorInfo = "Out of memory.";
            break;
         default:
            errorInfo = "Unknown";
            break;
      }
   }
   if(!result){
      MO.Logger.fatal(o, null, 'OpenGL check failure. (code={1}, description={2})', error, errorInfo);
   }
   return result;
}
MO.FWglContext_saveConfig = function FWglContext_saveConfig(xconfig){
   var o = this;
   var parameters = o.parameters();
   var xparameters = xconfig.create('Parameters');
   MO.Lang.Xml.saveObject(xparameters, 'Parameter', parameters);
   var extensions = o.extensions();
   var xextensions = xconfig.create('Extensions');
   MO.Lang.Xml.saveObject(xextensions, 'Extension', extensions);
}
MO.FWglContext_dispose = function FWglContext_dispose(){
   var o = this;
   o._data9 = null;
   o._data16 = null;
   o._recordBuffers = MO.Lang.Object.dispose(o._recordBuffers);
   o._recordSamplers = MO.Lang.Object.dispose(o._recordSamplers);
   o._contextAttributes = null;
   o._parameters = null;
   o._extensions = null;
   o._activeTextureSlot = null;
   o._handleDrawBuffers  = null;
   o._handleSamplerS3tc = null;
   o._handleDebugShader = null;
   o.__base.FG3dContext.dispose.call(o);
}
MO.FWglCubeTexture = function FWglCubeTexture(o){
   o = MO.Class.inherits(this, o, MO.FG3dCubeTexture);
   o._handle    = null;
   o.setup      = MO.FWglCubeTexture_setup;
   o.isValid    = MO.FWglCubeTexture_isValid;
   o.makeMipmap = MO.FWglCubeTexture_makeMipmap;
   o.upload     = MO.FWglCubeTexture_upload;
   o.update     = MO.FWglCubeTexture_update;
   o.dispose    = MO.FWglCubeTexture_dispose;
   return o;
}
MO.FWglCubeTexture_setup = function FWglCubeTexture_setup(){
   var o = this;
   var g = o._graphicContext._handle;
   o.__base.FG3dCubeTexture.setup.call(o);
   o._handle = g.createTexture();
}
MO.FWglCubeTexture_isValid = function FWglCubeTexture_isValid(){
   var o = this;
   var g = o._graphicContext._handle;
   return g.isTexture(o._handle);
}
MO.FWglCubeTexture_makeMipmap = function FWglCubeTexture_makeMipmap(){
   var o = this;
   var g = o._graphicContext._handle;
   g.bindTexture(g.TEXTURE_CUBE_MAP, o._handle);
   g.generateMipmap(g.TEXTURE_CUBE_MAP);
}
MO.FWglCubeTexture_upload = function FWglCubeTexture_upload(x1, x2, y1, y2, z1, z2){
   var o = this;
   var c = o._graphicContext;
   var g = c._handle;
   g.bindTexture(g.TEXTURE_CUBE_MAP, o._handle);
   g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X, 0, g.RGB, g.RGB, g.UNSIGNED_BYTE, x1.image());
   g.texImage2D(g.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, g.RGB, g.RGB, g.UNSIGNED_BYTE, x2.image());
   g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, g.RGB, g.RGB, g.UNSIGNED_BYTE, y1.image());
   g.texImage2D(g.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, g.RGB, g.RGB, g.UNSIGNED_BYTE, y2.image());
   g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, g.RGB, g.RGB, g.UNSIGNED_BYTE, z1.image());
   g.texImage2D(g.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, g.RGB, g.RGB, g.UNSIGNED_BYTE, z2.image());
   o._statusLoad = c.checkError("texImage2D", "Upload cube image failure.");
   o.update();
}
MO.FWglCubeTexture_update = function FWglCubeTexture_update(){
   var o = this;
   o.__base.FG3dCubeTexture.update.call(o);
   var g = o._graphicContext._handle;
   g.bindTexture(g.TEXTURE_CUBE_MAP, o._handle);
   var c = MO.RWglUtility.convertSamplerFilter(g, o._filterMinCd);
   if(c){
      g.texParameteri(g.TEXTURE_CUBE_MAP, g.TEXTURE_MIN_FILTER, c);
   }
   var c = MO.RWglUtility.convertSamplerFilter(g, o._filterMagCd);
   if(c){
      g.texParameteri(g.TEXTURE_CUBE_MAP, g.TEXTURE_MAG_FILTER, c);
   }
}
MO.FWglCubeTexture_dispose = function FWglCubeTexture_dispose(){
   var o = this;
   var c = o._graphicContext;
   var n = o._handle;
   if(n){
      c._handle.deleteTexture(n);
      o._handle = null;
   }
   o.__base.FG3dCubeTexture.dispose.call(o);
}
MO.FWglFlatTexture = function FWglFlatTexture(o){
   o = MO.Class.inherits(this, o, MO.FG3dFlatTexture);
   o._handle       = null;
   o._statusUpdate = false;
   o.setup         = MO.FWglFlatTexture_setup;
   o.isValid       = MO.FWglFlatTexture_isValid;
   o.texture       = MO.FWglFlatTexture_texture;
   o.makeMipmap    = MO.FWglFlatTexture_makeMipmap;
   o.uploadData    = MO.FWglFlatTexture_uploadData;
   o.upload        = MO.FWglFlatTexture_upload;
   o.uploadElement = MO.FWglFlatTexture_uploadElement;
   o.update        = MO.FWglFlatTexture_update;
   o.dispose       = MO.FWglFlatTexture_dispose;
   return o;
}
MO.FWglFlatTexture_setup = function FWglFlatTexture_setup(){
   var o = this;
   var g = o._graphicContext._handle;
   o.__base.FG3dFlatTexture.setup.call(o);
   o._handle = g.createTexture();
}
MO.FWglFlatTexture_isValid = function FWglFlatTexture_isValid(){
   var o = this;
   var g = o._graphicContext._handle;
   return g.isTexture(o._handle);
}
MO.FWglFlatTexture_texture = function FWglFlatTexture_texture(){
   return this;
}
MO.FWglFlatTexture_makeMipmap = function FWglFlatTexture_makeMipmap(){
   var o = this;
   var context = o._graphicContext;
   var handle = context._handle;
   handle.bindTexture(handle.TEXTURE_2D, o._handle);
   handle.generateMipmap(handle.TEXTURE_2D);
}
MO.FWglFlatTexture_uploadData = function FWglFlatTexture_uploadData(content, width, height){
   var o = this;
   var context = o._graphicContext;
   var handle = context._handle;
   var data = null;
   if(content.constructor == ArrayBuffer){
      data = new Uint8Array(content);
   }else if(content.constructor == Uint8Array){
      data = content;
   }else if(content.constructor == Float32Array){
      if(!context.enableFloatTexture()){
         throw new MO.TError('Invalid content float format.');
      }
      data = content;
   }else{
      throw new MO.TError('Invalid content format.');
   }
   o.width = width;
   o.height = height;
   handle.bindTexture(handle.TEXTURE_2D, o._handle);
   var internalformatCd = handle.RGBA;
   var formatCd = handle.RGBA;
   var typeCd = handle.UNSIGNED_BYTE;
   if(content.constructor == Float32Array){
      internalformatCd = handle.ALPHA;
      formatCd = handle.ALPHA;
      typeCd = handle.FLOAT;
   }
   handle.texImage2D(handle.TEXTURE_2D, 0, internalformatCd, width, height, 0, formatCd, typeCd, data);
   o._statusLoad = context.checkError("texImage2D", "Upload content failure.");
   o.update();
}
MO.FWglFlatTexture_upload = function FWglFlatTexture_upload(content){
   var o = this;
   var context = o._graphicContext;
   var capability = context.capability();
   var handle = context._handle;
   var data = null;
   var tagName = content.tagName;
   if((tagName == 'IMG') || (tagName == 'VIDEO') || (tagName == 'CANVAS')){
      data = content;
   }else if(MO.Class.isClass(content, MO.FImage)){
      data = content.image();
   }else if(MO.Class.isClass(content, MO.MCanvasObject)){
      data = content.htmlCanvas();
   }else{
      throw new TError('Invalid image format.');
   }
   handle.bindTexture(handle.TEXTURE_2D, o._handle);
   if(o._optionFlipY){
      handle.pixelStorei(handle.UNPACK_FLIP_Y_WEBGL, true);
   }
   handle.texImage2D(handle.TEXTURE_2D, 0, handle.RGBA, handle.RGBA, handle.UNSIGNED_BYTE, data);
   o.update();
   o._statusLoad = context.checkError("texImage2D", "Upload image failure.");
}
MO.FWglFlatTexture_uploadElement = function FWglFlatTexture_uploadElement(element){
   var o = this;
   var handle = o._graphicContext._handle;
   handle.bindTexture(handle.TEXTURE_2D, o._handle);
   handle.texImage2D(handle.TEXTURE_2D, 0, handle.RGBA, handle.RGBA, handle.UNSIGNED_BYTE, element);
   if(!o._statusUpdate){
      o.update();
      o._statusUpdate = true;
   }
}
MO.FWglFlatTexture_update = function FWglFlatTexture_update(){
   var o = this;
   o.__base.FG3dFlatTexture.update.call(o);
   var handle = o._graphicContext._handle;
   handle.bindTexture(handle.TEXTURE_2D, o._handle);
   var code = MO.RWglUtility.convertSamplerFilter(handle, o._filterMinCd);
   if(code){
      handle.texParameteri(handle.TEXTURE_2D, handle.TEXTURE_MIN_FILTER, code);
   }
   var code = MO.RWglUtility.convertSamplerFilter(handle, o._filterMagCd);
   if(code){
      handle.texParameteri(handle.TEXTURE_2D, handle.TEXTURE_MAG_FILTER, code);
   }
   var code = MO.RWglUtility.convertSamplerFilter(handle, o._wrapS);
   if(code){
      handle.texParameteri(handle.TEXTURE_2D, handle.TEXTURE_WRAP_S, code);
   }
   var code = MO.RWglUtility.convertSamplerFilter(handle, o._wrapT);
   if(code){
      handle.texParameteri(handle.TEXTURE_2D, handle.TEXTURE_WRAP_T, code);
   }
}
MO.FWglFlatTexture_dispose = function FWglFlatTexture_dispose(){
   var o = this;
   var context = o._graphicContext;
   var handle = o._handle;
   if(handle){
      context._handle.deleteTexture(handle);
      o._handle = null;
   }
   o.__base.FG3dFlatTexture.dispose.call(o);
}
MO.FWglFragmentShader = function FWglFragmentShader(o){
   o = MO.Class.inherits(this, o, MO.FG3dFragmentShader);
   o._handle      = null;
   o.setup        = MO.FWglFragmentShader_setup;
   o.targetSource = MO.FWglFragmentShader_targetSource;
   o.upload       = MO.FWglFragmentShader_upload;
   o.dispose      = MO.FWglFragmentShader_dispose;
   return o;
}
MO.FWglFragmentShader_setup = function FWglFragmentShader_setup(){
   var o = this;
   o.__base.FG3dFragmentShader.setup.call(o);
   var graphic = o._graphicContext._handle;
   o._handle = graphic.createShader(graphic.FRAGMENT_SHADER);
}
MO.FWglFragmentShader_targetSource = function FWglFragmentShader_targetSource(){
   var o = this;
   var source = null;
   var context = o._graphicContext;
   var capability = context.capability();
   if(capability.optionShaderSource){
      source = context._handleDebugShader.getTranslatedShaderSource(o._handle);
   }else{
      source = o._source;
   }
   return source;
}
MO.FWglFragmentShader_upload = function FWglFragmentShader_upload(source){
   var o = this;
   var graphic = o._graphicContext._handle;
   var shader = o._handle;
   graphic.shaderSource(shader, source);
   graphic.compileShader(shader);
   var result = graphic.getShaderParameter(shader, graphic.COMPILE_STATUS);
   if(!result){
      var info = graphic.getShaderInfoLog(shader);
      graphic.deleteShader(shader);
      o._handle = null;
      throw new MO.TError(o, 'Upload fragment shader source failure. (error={1})\n{2}', info, source);
   }
   o._source = source;
   return true;
}
MO.FWglFragmentShader_dispose = function FWglFragmentShader_dispose(){
   var o = this;
   var context = o._graphicContext;
   var shader = o._handle;
   if(shader){
      context._handle.deleteShader(shader);
      o._handle = null;
   }
   o.__base.FG3dFragmentShader.dispose.call(o);
}
MO.FWglIndexBuffer = function FWglIndexBuffer(o){
   o = MO.Class.inherits(this, o, MO.FG3dIndexBuffer);
   o._handle = null;
   o.setup   = MO.FWglIndexBuffer_setup;
   o.isValid = MO.FWglIndexBuffer_isValid;
   o.upload  = MO.FWglIndexBuffer_upload;
   o.dispose = MO.FWglIndexBuffer_dispose;
   return o;
}
MO.FWglIndexBuffer_setup = function FWglIndexBuffer_setup(){
   var o = this;
   o.__base.FG3dIndexBuffer.setup.call(o);
   o._handle = o._graphicContext._handle.createBuffer();
}
MO.FWglIndexBuffer_isValid = function FWglIndexBuffer_isValid(){
   var o = this;
   var handle = o._graphicContext._handle;
   return handle.isBuffer(o._handle);
}
MO.FWglIndexBuffer_upload = function FWglIndexBuffer_upload(data, count, remain){
   var o = this;
   var context = o._graphicContext;
   var handle = context._handle;
   if(remain){
      o._data = data;
   }
   o._count = count;
   var memory = null;
   if((data.constructor == Array) || (data.constructor == ArrayBuffer)){
      if(o._strideCd == MO.EG3dIndexStride.Uint16){
         memory = new Uint16Array(data);
      }else if(o._strideCd == MO.EG3dIndexStride.Uint32){
         memory = new Uint32Array(data);
      }else{
         throw new TError(o, 'Index stride is invalid.');
      }
   }else if(data.constructor == Uint16Array){
      if(o._strideCd != MO.EG3dIndexStride.Uint16){
         throw new TError(o, 'Index stride16 is invalid.');
      }
      memory = data;
   }else if(data.constructor == Uint32Array){
      if(o._strideCd != MO.EG3dIndexStride.Uint32){
         throw new TError(o, 'Index stride16 is invalid.');
      }
      memory = data;
   }else{
      throw new TError(o, 'Upload index data type is invalid. (value={1})', data);
   }
   handle.bindBuffer(handle.ELEMENT_ARRAY_BUFFER, o._handle);
   context.checkError('bindBuffer', 'Bind buffer failure.');
   handle.bufferData(handle.ELEMENT_ARRAY_BUFFER, memory, handle.STATIC_DRAW);
   context.checkError('bufferData', 'Upload buffer data. (count={1})', count);
}
MO.FWglIndexBuffer_dispose = function FWglIndexBuffer_dispose(){
   var o = this;
   var context = o._graphicContext;
   o._resource = null;
   var handle = o._handle;
   if(handle){
      context._handle.deleteBuffer(handle);
      o._handle = null;
   }
   o.__base.FG3dIndexBuffer.dispose.call(o);
}
MO.FWglLayout = function FWglLayout(o){
   o = MO.Class.inherits(this, o, MO.FG3dLayout);
   o._handle  = null;
   o.setup    = MO.FWglLayout_setup;
   o.bind     = MO.FWglLayout_bind;
   o.unbind   = MO.FWglLayout_unbind;
   o.active   = MO.FWglLayout_active;
   o.deactive = MO.FWglLayout_deactive;
   o.dispose  = MO.FWglLayout_dispose;
   return o;
}
MO.FWglLayout_setup = function FWglLayout_setup(){
   var o = this;
   o.__base.FG3dLayout.setup.call(o);
   var c = o._graphicContext;
   o._handle = c._handleLayout.createVertexArrayOES();
}
MO.FWglLayout_bind = function FWglLayout_bind(){
   var o = this;
   var c = o._graphicContext;
   c._handleLayout.bindVertexArrayOES(o._handle);
}
MO.FWglLayout_unbind = function FWglLayout_unbind(){
   var o = this;
   var c = o._graphicContext;
   c._handleLayout.bindVertexArrayOES(null);
}
MO.FWglLayout_active = function FWglLayout_active(){
   var o = this;
   var c = o._graphicContext;
   c._handleLayout.bindVertexArrayOES(o._handle);
}
MO.FWglLayout_deactive = function FWglLayout_deactive(){
   var o = this;
   var c = o._graphicContext;
   c._handleLayout.bindVertexArrayOES(null);
}
MO.FWglLayout_dispose = function FWglLayout_dispose(){
   var o = this;
   var c = o._graphicContext;
   var layout = o._handle;
   if(layout){
      c._handleLayout.deleteVertexArrayOES(layout);
      o._handle = null;
   }
   o.__base.FG3dLayout.dispose.call(o);
}
MO.FWglProgram = function FWglProgram(o){
   o = MO.Class.inherits(this, o, MO.FG3dProgram);
   o._handle        = null;
   o.setup          = MO.FWglProgram_setup;
   o.vertexShader   = MO.FWglProgram_vertexShader;
   o.fragmentShader = MO.FWglProgram_fragmentShader;
   o.upload         = MO.FWglProgram_upload;
   o.build          = MO.FWglProgram_build;
   o.link           = MO.FWglProgram_link;
   o.dispose        = MO.FWglProgram_dispose;
   return o;
}
MO.FWglProgram_setup = function FWglProgram_setup(){
   var o = this;
   var c = g = o._graphicContext;
   o._handle = c._handle.createProgram();
}
MO.FWglProgram_vertexShader = function FWglProgram_vertexShader(){
   var o = this;
   var shader = o._vertexShader;
   if(!shader){
      shader = o._vertexShader = MO.Class.create(MO.FWglVertexShader);
      shader.linkGraphicContext(o);
      shader.setup();
   }
   return shader;
}
MO.FWglProgram_fragmentShader = function FWglProgram_fragmentShader(){
   var o = this;
   var shader = o._fragmentShader;
   if(!shader){
      shader = o._fragmentShader = MO.Class.create(MO.FWglFragmentShader);
      shader.linkGraphicContext(o);
      shader.setup();
   }
   return shader;
}
MO.FWglProgram_upload = function FWglProgram_upload(shaderCd, source){
   var o = this;
   if(shaderCd == MO.EG3dShader.Vertex){
      o.vertexShader().upload(source);
   }else if(shaderCd == MO.EG3dShader.Fragment){
      o.fragmentShader().upload(source);
   }else{
      throw new Error('Unknown type');
   }
}
MO.FWglProgram_build = function FWglProgram_build(){
   var o = this;
   var context = o._graphicContext;
   var g = context._handle;
   var pn = o._handle;
   var vertexShader = o.vertexShader();
   g.attachShader(pn, vertexShader._handle);
   var result = context.checkError("attachShader", "Attach shader failure. (program_id=%d, shader_id=%d)", pn, vertexShader._handle);
   if(!result){
      return result;
   }
   var fragmentShader = o.fragmentShader();
   g.attachShader(pn, fragmentShader._handle);
   var result = context.checkError("attachShader", "Attach shader failure. (program_id=%d, shader_id=%d)", pn, fragmentShader._handle);
   if(!result){
      return result;
   }
   if(o.hasAttribute()){
      var attributes = o.attributes();
      var ac = attributes.count();
      for(var n = 0; n < ac; n++){
         var attribute = attributes.at(n);
         var attributeName = attribute.name();
         g.bindAttribLocation(pn, n, attributeName);
         result = context.checkError("bindAttribLocation", "Bind attribute location. (program_id=%d, slot=%d, name=%s)", pn, n, attributeName);
         if(!result){
            return result;
         }
      }
   }
}
MO.FWglProgram_link = function FWglProgram_link(){
   var o = this;
   var context = o._graphicContext;
   var g = context._handle;
   var result = false;
   var pn = o._handle;
   g.linkProgram(pn);
   var pr = g.getProgramParameter(pn, g.LINK_STATUS);
   if(!pr){
      var pi = g.getProgramInfoLog(pn);
      MO.Logger.fatal(this, null, "Link program failure. (status={1}, reason={2})", pr, pi);
      g.deleteProgram(o._handle);
      o._handle = null;
      return false;
   }
   g.validateProgram(pn);
   var pr = g.getProgramParameter(pn, g.VALIDATE_STATUS);
   if(!pr){
      var pi = g.getProgramInfoLog(pn);
   }
   g.finish();
   result = context.checkError("finish", "Finish program link faliure. (program_id={1})", pn);
   if(!result){
      return result;
   }
   if(o.hasParameter()){
      var count = o._parameters.count();
      for(var n = 0; n < count; n++){
         var parameter = o._parameters.at(n);
         var handle = g.getUniformLocation(pn, parameter.name());
         result = context.checkError("getUniformLocation", "Find parameter slot. (program_id=%d, name=%s, slot=%d)", pn, parameter.name(), handle);
         if(!result){
            return result;
         }
         parameter._slot = handle;
         if(handle != null){
            parameter._statusUsed = true;
         }
      }
   }
   if(o.hasAttribute()){
      var count = o._attributes.count();
      for(var n = 0; n < count; n++){
         var attribute = o._attributes.at(n);
         var handle = g.getAttribLocation(pn, attribute.name());
         result = context.checkError("getAttribLocation", "Find attribute slot. (program_id=%d, name=%s, slot=%d)", pn, attribute.name(), handle);
         if(!result){
            return result;
         }
         attribute._slot = handle;
         if(handle != -1){
            attribute._statusUsed = true;
         }
      }
   }
   if(o.hasSampler()){
      var count = o._samplers.count();
      for(var n = 0; n < count; n++){
         var sampler = o._samplers.at(n);
         var handle = g.getUniformLocation(pn, sampler.name());
         result = context.checkError("getUniformLocation", "Find sampler slot. (program_id=%d, name=%s, slot=%d)", pn, sampler.name(), handle);
         if(!result){
            return result;
         }
         sampler._slot = handle;
         if(handle != null){
            sampler._statusUsed = true;
         }
      }
      var si = 0;
      for(var n = 0; n < count; n++){
         var sampler = o._samplers.value(n);
         if(sampler._statusUsed){
            sampler._index = si++;
         }
      }
   }
   return result;
}
MO.FWglProgram_dispose = function FWglProgram_dispose(){
   var o = this;
   var context = o._graphicContext;
   var handle = o._handle;
   if(handle){
      context._handle.deleteProgram(handle);
      o._handle = null;
   }
   o.__base.FG3dProgram.dispose.call(o);
}
MO.FWglRenderTarget = function FWglRenderTarget(o){
   o = MO.Class.inherits(this, o, MO.FG3dRenderTarget);
   o._optionDepth = true;
   o._handle      = null;
   o._handleDepth = null;
   o.setup        = MO.FWglRenderTarget_setup;
   o.build        = MO.FWglRenderTarget_build;
   o.dispose      = MO.FWglRenderTarget_dispose;
   return o;
}
MO.FWglRenderTarget_setup = function FWglRenderTarget_setup(){
   var o = this;
   o.__base.FG3dRenderTarget.setup.call(o);
   var context = o._graphicContext;
   var graphic = context._handle;
   o._handle = graphic.createFramebuffer();
   return context.checkError('createFramebuffer', 'Create frame buffer failure.');
}
MO.FWglRenderTarget_build = function FWglRenderTarget_build(){
   var o = this;
   var size = o._size;
   var context = o._graphicContext;
   var handle = context._handle;
   handle.bindFramebuffer(handle.FRAMEBUFFER, o._handle);
   var result = context.checkError('bindFramebuffer', 'Bind frame buffer failure.');
   if(!result){
      return result;
   }
   if(o._optionDepth){
      var depthHandle = o._handleDepth = handle.createRenderbuffer();
      var result = context.checkError('createRenderbuffer', 'Create render buffer failure.');
      if(!result){
         return result;
      }
      handle.bindRenderbuffer(handle.RENDERBUFFER, depthHandle);
      var result = context.checkError('bindRenderbuffer', 'Bind render buffer failure.');
      if(!result){
         return result;
      }
      handle.renderbufferStorage(handle.RENDERBUFFER, handle.DEPTH_COMPONENT16, size.width, size.height);
      var result = context.checkError('renderbufferStorage', 'Set render buffer storage format failure.');
      if(!result){
         return result;
      }
      handle.framebufferRenderbuffer(handle.FRAMEBUFFER, handle.DEPTH_ATTACHMENT, handle.RENDERBUFFER, depthHandle);
      var result = context.checkError('framebufferRenderbuffer', "Set depth buffer to frame buffer failure. (framebuffer=%d, depthbuffer=%d)", o._handle, depthHandle);
      if(!result){
         return result;
      }
   }
   var textures = o._textures;
   var textureCount = textures.count();
   var attachment0 = handle.COLOR_ATTACHMENT0;
   if(context.statusDrawBuffers()){
      var extension = context.handleDrawBuffers();
      attachment0 = extension.COLOR_ATTACHMENT0_WEBGL;
   }
   for(var i = 0; i < textureCount; i++){
      var texture = textures.get(i);
      handle.bindTexture(handle.TEXTURE_2D, texture._handle);
      handle.texParameteri(handle.TEXTURE_2D, handle.TEXTURE_MAG_FILTER, handle.LINEAR);
      handle.texParameteri(handle.TEXTURE_2D, handle.TEXTURE_MIN_FILTER, handle.LINEAR);
      handle.texImage2D(handle.TEXTURE_2D, 0, handle.RGBA, size.width, size.height, 0, handle.RGBA, handle.UNSIGNED_BYTE, null);
      var result = context.checkError('texImage2D', "Alloc texture storage. (texture_id, size=%dx%d)", texture._handle, size.width, size.height);
      if(!result){
         return result;
      }
      handle.framebufferTexture2D(handle.FRAMEBUFFER, attachment0 + i, handle.TEXTURE_2D, texture._handle, 0);
      var result = context.checkError('framebufferTexture2D', "Set color buffer into frame buffer failure. (framebuffer_id=%d, texture_id=%d)", o._handle, texture._handle);
      if(!result){
         return result;
      }
   }
   handle.bindFramebuffer(handle.FRAMEBUFFER, null);
}
MO.FWglRenderTarget_dispose = function FWglRenderTarget_dispose(){
   var o = this;
   var context = o._graphicContext;
   var handleDepth = o._handleDepth;
   if(handleDepth){
      context._handle.deleteRenderbuffer(handleDepth);
      o._handleDepth = null;
   }
   var handle = o._handle;
   if(handle){
      context._handle.deleteFramebuffer(handle);
      o._handle = null;
   }
   o.__base.FG3dRenderTarget.dispose.call(o);
}
MO.FWglVertexBuffer = function FWglVertexBuffer(o){
   o = MO.Class.inherits(this, o, MO.FG3dVertexBuffer);
   o._handle = null;
   o.setup   = MO.FWglVertexBuffer_setup;
   o.isValid = MO.FWglVertexBuffer_isValid;
   o.upload  = MO.FWglVertexBuffer_upload;
   o.dispose = MO.FWglVertexBuffer_dispose;
   return o;
}
MO.FWglVertexBuffer_setup = function FWglVertexBuffer_setup(){
   var o = this;
   o.__base.FG3dVertexBuffer.setup.call(o);
   var graphic = o._graphicContext._handle;
   o._handle = graphic.createBuffer();
}
MO.FWglVertexBuffer_isValid = function FWglVertexBuffer_isValid(){
   var o = this;
   var graphic = o._graphicContext._handle;
   return graphic.isBuffer(o._handle);
}
MO.FWglVertexBuffer_upload = function FWglVertexBuffer_upload(data, stride, count, remain){
   var o = this;
   var context = o._graphicContext;
   var graphics = context._handle;
   if(remain){
      o._data = data;
   }
   o._stride = stride;
   o._count = count;
   var arrays = null;
   if((data.constructor == Array) || (data.constructor == ArrayBuffer)){
      switch(o._formatCd){
         case MO.EG3dAttributeFormat.Float1:
         case MO.EG3dAttributeFormat.Float2:
         case MO.EG3dAttributeFormat.Float3:
         case MO.EG3dAttributeFormat.Float4:
            arrays = new Float32Array(data);
            break;
         case MO.EG3dAttributeFormat.Byte4:
         case MO.EG3dAttributeFormat.Byte4Normal:
            arrays = new Uint8Array(data);
            break;
         default:
            throw new MO.TError(o, 'Unknown data type.');
      }
   }else if(data.constructor == Uint8Array){
      arrays = data;
   }else if(data.constructor == Float32Array){
      arrays = data;
   }else{
      throw new MO.TError(o, 'Upload vertex data type is invalid. (data={1})', data);
   }
   graphics.bindBuffer(graphics.ARRAY_BUFFER, o._handle);
   context.checkError('bindBuffer', 'Bindbuffer');
   graphics.bufferData(graphics.ARRAY_BUFFER, arrays, graphics.STATIC_DRAW);
   context.checkError('bufferData', 'bufferData');
}
MO.FWglVertexBuffer_dispose = function FWglVertexBuffer_dispose(){
   var o = this;
   var context = o._graphicContext;
   o._resource = null;
   var buffer = o._handle;
   if(buffer){
      context._handle.deleteBuffer(buffer);
      o._handle = null;
   }
   o.__base.FG3dVertexBuffer.dispose.call(o);
}
MO.FWglVertexShader = function FWglVertexShader(o){
   o = MO.Class.inherits(this, o, MO.FG3dVertexShader);
   o._handle      = null;
   o.setup        = MO.FWglVertexShader_setup;
   o.targetSource = MO.FWglVertexShader_targetSource;
   o.upload       = MO.FWglVertexShader_upload;
   o.dispose      = MO.FWglVertexShader_dispose;
   return o;
}
MO.FWglVertexShader_setup = function FWglVertexShader_setup(){
   var o = this;
   o.__base.FG3dVertexShader.setup.call(o);
   var graphic = o._graphicContext._handle;
   o._handle = graphic.createShader(graphic.VERTEX_SHADER);
}
MO.FWglVertexShader_targetSource = function FWglVertexShader_targetSource(){
   var o = this;
   var source = null;
   var context = o._graphicContext;
   var capability = context.capability();
   if(capability.optionShaderSource){
      source = context._handleDebugShader.getTranslatedShaderSource(o._handle);
   }else{
      source = o._source;
   }
   return source;
}
MO.FWglVertexShader_upload = function FWglVertexShader_upload(source){
   var o = this;
   var graphic = o._graphicContext._handle;
   var shader = o._handle;
   graphic.shaderSource(shader, source);
   graphic.compileShader(shader);
   var result = graphic.getShaderParameter(shader, graphic.COMPILE_STATUS);
   if(!result){
      var info = graphic.getShaderInfoLog(shader);
      graphic.deleteShader(shader);
      o._handle = null;
      throw new MO.TError(o, 'Upload vertex shader source failure. (error={1})\n{2}', info, source);
   }
   o._source = source;
   return true;
}
MO.FWglVertexShader_dispose = function FWglVertexShader_dispose(){
   var o = this;
   var context = o._graphicContext;
   var shader = o._handle;
   if(shader){
      context._handle.deleteShader(shader);
      o._handle = null;
   }
   o.__base.FG3dVertexShader.dispose.call(o);
}
MO.RWglUtility = function RWglUtility(){
   return this;
}
MO.RWglUtility.prototype.convertFillMode = function RWglUtility_convertFillMode(graphic, fillCd){
   switch(fillCd){
      case MO.EG3dFillMode.Point:
         return graphic.POINT;
      case MO.EG3dFillMode.Line:
         return graphic.LINE;
      case MO.EG3dFillMode.Face:
         return graphic.FILL;
   }
   throw new TError(this, "Convert fill mode failure. (fill_cd={1})", fillCd);
}
MO.RWglUtility.prototype.convertDrawMode = function RWglUtility_convertDrawMode(graphic, drawCd){
   switch(drawCd){
      case MO.EG3dDrawMode.Point:
         return graphic.POINTS;
      case MO.EG3dDrawMode.Lines:
         return graphic.LINES;
      case MO.EG3dDrawMode.LineStrip:
         return graphic.LINE_STRIP;
      case MO.EG3dDrawMode.LineLoop:
         return graphic.LINE_LOOP;
      case MO.EG3dDrawMode.Triangles:
         return graphic.TRIANGLES;
      case MO.EG3dDrawMode.TriangleStrip:
         return graphic.TRIANGLE_STRIP;
      case MO.EG3dDrawMode.TriangleFan:
         return graphic.TRIANGLE_FAN;
      case MO.EG3dDrawMode.Quads:
         return graphic.QUADS;
      case MO.EG3dDrawMode.QuadStrip:
         return graphic.QUAD_STRIP;
   }
   throw new TError(this, "Convert draw mode failure. (draw_cd={1})", drawCd);
}
MO.RWglUtility.prototype.convertCullMode = function RWglUtility_convertCullMode(graphic, cullCd){
   switch(cullCd){
      case MO.EG3dCullMode.Front:
         return graphic.FRONT;
      case MO.EG3dCullMode.Back:
         return graphic.BACK;
      case MO.EG3dCullMode.Both:
         return graphic.FRONT_AND_BACK;
   }
   throw new TError(this, "Convert cull mode failure. (cull_cd={1})", cullCd);
}
MO.RWglUtility.prototype.convertDepthMode = function RWglUtility_convertDepthMode(graphic, depthCd){
   switch(depthCd){
      case MO.EG3dDepthMode.Equal:
         return graphic.EQUAL;
      case MO.EG3dDepthMode.NotEqual:
         return graphic.NOTEQUAL;
      case MO.EG3dDepthMode.Less:
         return graphic.LESS;
      case MO.EG3dDepthMode.LessEqual:
         return graphic.LEQUAL;
      case MO.EG3dDepthMode.Greater:
         return graphic.GREATER;
      case MO.EG3dDepthMode.GreaterEqual:
         return graphic.GEQUAL;
      case MO.EG3dDepthMode.Always:
         return graphic.ALWAYS;
   }
   throw new TError(this, "Convert depth mode failure. (depth_cd={1})", depthCd);
}
MO.RWglUtility.prototype.convertBlendFactors = function RWglUtility_convertBlendFactors(graphic, blendCd){
   switch(blendCd){
      case MO.EG3dBlendMode.Zero:
         return graphic.ZERO;
      case MO.EG3dBlendMode.One:
         return graphic.ONE;
      case MO.EG3dBlendMode.SrcColor:
         return graphic.SRC_COLOR;
      case MO.EG3dBlendMode.OneMinusSrcColor:
         return graphic.ONE_MINUS_SRC_COLOR;
      case MO.EG3dBlendMode.DstColor:
         return graphic.DST_COLOR;
      case MO.EG3dBlendMode.OneMinusDstColor:
         return graphic.ONE_MINUS_DST_COLOR;
      case MO.EG3dBlendMode.SrcAlpha:
         return graphic.SRC_ALPHA;
      case MO.EG3dBlendMode.OneMinusSrcAlpha:
         return graphic.ONE_MINUS_SRC_ALPHA;
      case MO.EG3dBlendMode.DstAlpha:
         return graphic.DST_ALPHA;
      case MO.EG3dBlendMode.OneMinusDstAlpha:
         return graphic.ONE_MINUS_DST_ALPHA;
      case MO.EG3dBlendMode.SrcAlphaSaturate:
         return graphic.SRC_ALPHA_SATURATE;
   }
   throw new TError(this, "Convert blend factors failure. (blend_cd={1})", blendCd);
}
MO.RWglUtility.prototype.convertIndexStride = function RWglUtility_convertIndexStride(graphic, strideCd){
   switch(strideCd){
      case MO.EG3dIndexStride.Uint16:
         return graphic.UNSIGNED_SHORT;
      case MO.EG3dIndexStride.Uint32:
         return graphic.UNSIGNED_INT;
   }
   throw new TError(this, "Convert index stride failure. (stride_cd={1})", strideCd);
}
MO.RWglUtility.prototype.convertSamplerFilter = function RWglUtility_convertSamplerFilter(graphic, filterCd){
   switch(filterCd){
      case MO.EG3dSamplerFilter.Unknown:
         return 0;
      case MO.EG3dSamplerFilter.Nearest:
         return graphic.NEAREST;
      case MO.EG3dSamplerFilter.Linear:
         return graphic.LINEAR;
      case MO.EG3dSamplerFilter.Repeat:
         return graphic.REPEAT;
      case MO.EG3dSamplerFilter.MirroredRepeat:
         return graphic.MIRRORED_REPEAT;
      case MO.EG3dSamplerFilter.ClampToEdge:
         return graphic.CLAMP_TO_EDGE;
      case MO.EG3dSamplerFilter.ClampToBorder:
         return graphic.CLAMP_TO_BORDER;
   }
   throw new TError(this, "Convert sampler filter failure. (filter_cd={1})", filterCd);
}
MO.RWglUtility = new MO.RWglUtility();
MO.EDisplayTransform = new function EDisplayTransform(){
   var o = this;
   o.CameraPosition     = 'camera.position';
   o.CameraDirection    = 'camera.direction';
   o.BilboardedSphere   = 'bilboarded.sphere';
   o.BilboardedCylinder = 'bilboarded.cylinder';
   return o;
}
MO.EResourceCompress = new function EResourceCompress(){
   var o = this;
   o.None    = 'none';
   o.Deflate = 'deflate';
   o.Lzma    = 'lzma';
   return o;
}
MO.EStageKey = new function EStageKey(){
   var o = this;
   o.Forward       = MO.EKeyCode.W;
   o.Back          = MO.EKeyCode.S;
   o.Up            = MO.EKeyCode.Q;
   o.Down          = MO.EKeyCode.E;
   o.RotationLeft  = MO.EKeyCode.A;
   o.RotationRight = MO.EKeyCode.D;
   o.RotationUp    = MO.EKeyCode.Z;
   o.RotationDown  = MO.EKeyCode.X;
   o.FocusForward  = MO.EKeyCode.I;
   o.FocusBack     = MO.EKeyCode.K;
   o.FocusLeft     = MO.EKeyCode.J;
   o.FocusRight    = MO.EKeyCode.L;
   return o;
}
MO.MEventDispatcher = function MEventDispatcher(o){
   o = MO.Class.inherits(this, o);
   o.onOperationDown        = MO.Method.empty;
   o.onOperationMove        = MO.Method.empty;
   o.onOperationUp          = MO.Method.empty;
   o.onOperationWheel       = MO.Method.empty;
   o.onOperationKeyDown     = MO.Method.empty;
   o.onOperationKeyPress    = MO.Method.empty;
   o.onOperationKeyUp       = MO.Method.empty;
   o.onOperationResize      = MO.Method.empty;
   o.onOperationVisibility  = MO.Method.empty;
   o.onOperationOrientation = MO.Method.empty;
   o.dispatcherEvent        = MO.MEventDispatcher_dispatcherEvent;
   return o;
}
MO.MEventDispatcher_dispatcherEvent = function MEventDispatcher_dispatcherEvent(event, flag){
   var o = this;
   switch(event.code){
      case MO.EEvent.MouseDown:
         o.onOperationDown(event);
         break;
      case MO.EEvent.MouseMove:
         o.onOperationMove(event);
         break;
      case MO.EEvent.MouseUp:
         o.onOperationUp(event);
         break;
      case MO.EEvent.MouseWheel:
         o.onOperationWheel(event);
         break;
      case MO.EEvent.KeyDown:
         o.onOperationKeyDown(event);
         break;
      case MO.EEvent.KeyPress:
         o.onOperationKeyPress(event);
         break;
      case MO.EEvent.KeyUp:
         o.onOperationKeyUp(event);
         break;
      case MO.EEvent.Resize:
         o.onOperationResize(event);
         break;
      case MO.EEvent.Visibility:
         o.onOperationVisibility(event);
         break;
      case MO.EEvent.Orientation:
         o.onOperationOrientation(event);
         break;
      default:
         throw new MO.TError('Unknown event type.');
   }
}
MO.MProcessReady = function MProcessReady(o){
   o = MO.Class.inherits(this, o);
   o._readyLoader   = MO.Class.register(o, new MO.AGetter('_readyLoader'));
   o.onProcessReady = MO.Method.empty;
   o.construct      = MO.MFrameProcessor_construct;
   o.dispose        = MO.MFrameProcessor_dispose;
   return o;
}
MO.MFrameProcessor_construct = function MFrameProcessor_construct(){
   var o = this;
   var loader = o._readyLoader = MO.Class.create(MO.FReadyLoader);
   loader.addChangeListener(o, o.onProcessReady);
}
MO.MFrameProcessor_dispose = function MFrameProcessor_dispose(){
   var o = this;
   o._readyLoader = MO.Lang.Object.dispose(o._readyLoader);
}
MO.MReady = function MReady(o){
   o = MO.Class.inherits(this, o);
   o.testReady = MO.Method.virtual(o, 'testReady');
   return o;
}
MO.MRenderableLinker = function MRenderableLinker(o){
   o = MO.Class.inherits(this, o);
   o._renderable = MO.RClass.register(o, new MO.AGetter('_renderable'));
   o.dispose     = MO.MRenderableLinker_dispose;
   return o;
}
MO.MRenderableLinker_dispose = function MRenderableLinker_dispose(){
   var o = this;
   o._renderable = null;
}
MO.MResourceData = function MResourceData(o){
   o = MO.Class.inherits(this, o);
   o._ready          = false;
   o._guid           = null;
   o._index          = -1;
   o._compressData   = MO.Class.register(o, new MO.AGetSet('_compressData'));
   o._data           = null;
   o.testReady       = MO.MResourceData_testReady;
   o.completeData    = MO.MResourceData_completeData;
   o.dispose         = MO.MResourceData_dispose;
   return o;
}
MO.MResourceData_testReady = function MResourceData_testReady(){
   return this._ready;
}
MO.MResourceData_completeData = function MResourceData_completeData(data){
   var o = this;
   o._data = data;
   o._ready = true;
}
MO.MResourceData_dispose = function MResourceData_dispose(){
   var o = this;
   o._compressData = null;
   o._data = null;
}
MO.MTimeline = function MTimeline(o){
   o = MO.Class.inherits(this, o, MO.MTimelineWorker);
   return o;
}
MO.MTimelineAction = function MTimelineAction(o){
   o = MO.Class.inherits(this, o, MO.MTimelineWorker);
   return o;
}
MO.MTimelineActions = function MTimelineActions(o){
   o = MO.Class.inherits(this, o);
   o._actions   = MO.Class.register(o, new MO.AGetter('_actions'));
   o.construct  = MO.MTimelineActions_construct;
   o.setup      = MO.MTimelineActions_setup;
   o.pushAction = MO.MTimelineActions_pushAction;
   o.process    = MO.MTimelineActions_process;
   o.dispose    = MO.MTimelineActions_dispose;
   return o;
}
MO.MTimelineActions_construct = function MTimelineActions_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._actions = new MO.TObjects();
}
MO.MTimelineActions_setup = function MTimelineActions_setup(){
   var o = this;
}
MO.MTimelineActions_pushAction = function MTimelineActions_pushAction(action){
   this._actions.push(action);
}
MO.MTimelineActions_process = function MTimelineActions_process(context){
   var o = this;
   var tick = context.tick;
   var actions = o._actions;
   var count = actions.count();
   for(var i = count - 1; i >= 0; i--){
      var action = actions.at(i);
      var actionTick = tick - action.tick;
      if(actionTick < 0){
         continue;
      }
      if(!action.statusStart()){
         action.start();
      }else if(action.statusStop()){
         actions.erase(i);
         action.dispose();
      }else{
         var duration = action.duration();
         if(duration != 0){
            if(actionTick > duration){
               action.stop();
               continue;
            }
         }
         context.tick = actionTick;
         action.process(context);
      }
   }
   context.tick = tick;
}
MO.MTimelineActions_dispose = function MTimelineActions_dispose(){
   var o = this;
   o._actions = MO.Lang.Obejct.dispose(o._actions);
   o.__base.FObject.dispose.call(o);
}
MO.MTimelines = function MTimelines(o){
   o = MO.Class.inherits(this, o);
   o._timelines   = MO.Class.register(o, new MO.AGetter('_timelines'));
   o.construct    = MO.MTimelines_construct;
   o.setup        = MO.MTimelines_setup;
   o.pushTimeline = MO.MTimelines_pushTimeline;
   o.process      = MO.MTimelines_process;
   o.dispose      = MO.MTimelines_dispose;
   return o;
}
MO.MTimelines_construct = function MTimelines_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._timelines = new MO.TObjects();
}
MO.MTimelines_setup = function MTimelines_setup(){
   var o = this;
}
MO.MTimelines_pushTimeline = function MTimelines_pushTimeline(timeline){
   this._timelines.push(timeline);
}
MO.MTimelines_process = function MTimelines_process(context){
   var o = this;
   var tick = context.tick;
   var timelines = o._timelines;
   var count = timelines.count();
   for(var i = count - 1; i >= 0; i--){
      var timeline = timelines.at(i);
      var timelineTick = tick - timeline.tick;
      if(timelineTick < 0){
         continue;
      }
      if(!timeline.statusStart()){
         timeline.start();
      }else if(timeline.statusStop()){
         timelines.erase(i);
         timeline.dispose();
      }else{
         var duration = timeline.duration();
         if(duration != 0){
            if(timelineTick > duration){
               timeline.stop();
               continue;
            }
         }
         context.tick = timelineTick;
         timeline.process(context);
      }
   }
   context.tick = tick;
}
MO.MTimelines_dispose = function MTimelines_dispose(){
   var o = this;
   o._timelines = MO.Lang.Obejct.dispose(o._timelines);
   o.__base.FObject.dispose.call(o);
}
MO.MTimelineWorker = function MTimelineWorker(o){
   o = MO.Class.inherits(this, o);
   o._code        = MO.Class.register(o, new MO.AGetSet('_code'));
   o._tick        = MO.Class.register(o, new MO.AGetSet('_tick'), 0);
   o._duration    = MO.Class.register(o, new MO.AGetSet('_duration'), 0);
   o._statusStart = MO.Class.register(o, new MO.AGetter('_statusStart'), false);
   o._statusStop  = MO.Class.register(o, new MO.AGetter('_statusStop'), false);
   o.onStart      = MO.MTimelineWorker_onStart;
   o.onStop       = MO.MTimelineWorker_onStop;
   o.construct    = MO.MTimelineWorker_construct;
   o.setup        = MO.MTimelineWorker_setup;
   o.start        = MO.MTimelineWorker_start;
   o.process      = MO.MTimelineWorker_process;
   o.stop         = MO.MTimelineWorker_stop;
   o.dispose      = MO.MTimelineWorker_dispose;
   return o;
}
MO.MTimelineWorker_onStart = function MTimelineWorker_onStart(){
   var o = this;
}
MO.MTimelineWorker_onStop = function MTimelineWorker_onStop(){
   var o = this;
}
MO.MTimelineWorker_construct = function MTimelineWorker_construct(){
   var o = this;
}
MO.MTimelineWorker_setup = function MTimelineWorker_setup(){
   var o = this;
   o._statusStart = false;
}
MO.MTimelineWorker_start = function MTimelineWorker_start(){
   var o = this;
   if(!o._statusStart){
      o.onStart();
      o._statusStart = true;
   }
   o._statusStop = false;
}
MO.MTimelineWorker_process = function MTimelineWorker_process(){
   var o = this;
}
MO.MTimelineWorker_stop = function MTimelineWorker_stop(){
   var o = this;
   if(!o._statusStop){
      o.onStop();
      o._statusStop = true;
   }
}
MO.MTimelineWorker_dispose = function MTimelineWorker_dispose(){
   var o = this;
}
MO.STimelineContext = function STimelineContext(){
   var o = this;
   o._mainTimeline = null;
   o._timeline     = null;
   o._action       = null;
   return o;
}
MO.FCanvas = function FCanvas(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._desktop     = MO.Class.register(o, new MO.AGetSet('_desktop'));
   o._activeStage = MO.Class.register(o, new MO.AGetter('_activeStage'));
   o.construct    = MO.FCanvas_construct;
   o.dispose      = MO.FCanvas_dispose;
   return o;
}
MO.FCanvas_construct = function FCanvas_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.FCanvas_dispose = function FCanvas_dispose(){
   var o = this;
   o._desktop = null;
   o.__base.FObject.dispose.call(o);
}
MO.FDesktop = function FDesktop(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MEventDispatcher);
   o._size            = MO.Class.register(o, new MO.AGetter('_size'));
   o._sizeRate        = MO.Class.register(o, new MO.AGetter('_sizeRate'), 1);
   o._calculateSize   = MO.Class.register(o, new MO.AGetter('_calculateSize'));
   o._calculateRate   = MO.Class.register(o, new MO.AGetter('_calculateRate'));
   o._logicSize       = MO.Class.register(o, new MO.AGetter('_logicSize'));
   o._logicRate       = MO.Class.register(o, new MO.AGetter('_logicRate'));
   o._screenSize      = MO.Class.register(o, new MO.AGetter('_screenSize'));
   o._virtualSize     = MO.Class.register(o, new MO.AGetter('_virtualSize'));
   o._canvases        = MO.Class.register(o, new MO.AGetter('_canvases'));
   o.construct        = MO.FDesktop_construct;
   o.canvasRegister   = MO.FDesktop_canvasRegister;
   o.canvasUnregister = MO.FDesktop_canvasUnregister;
   o.setup            = MO.Method.empty;
   o.build            = MO.Method.empty;
   o.resize           = MO.Method.empty;
   o.processEvent     = MO.FDesktop_processEvent;
   o.process          = MO.Method.empty;
   o.dispose          = MO.FDesktop_dispose;
   return o;
}
MO.FDesktop_construct = function FDesktop_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._size = new MO.SSize2(1280, 720);
   o._calculateSize = new MO.SSize2(1280, 720);
   o._calculateRate = new MO.SSize2(1, 1);
   o._logicSize = new MO.SSize2(1280, 720);
   o._logicRate = new MO.SSize2(1, 1);
   o._screenSize = new MO.SSize2(1280, 720);
   o._virtualSize = new MO.SSize2(1280, 720);
   o._canvases = new MO.TObjects();
}
MO.FDesktop_canvasRegister = function FDesktop_canvasRegister(canvas){
   var canvases = this._canvases;
   canvases.push(canvas);
}
MO.FDesktop_canvasUnregister = function FDesktop_canvasUnregister(canvas){
   var canvases = this._canvases;
   canvases.remove(canvas);
}
MO.FDesktop_processEvent = function FDesktop_processEvent(event){
   var o = this;
   o.dispatcherEvent(event);
}
MO.FDesktop_dispose = function FDesktop_dispose(){
   var o = this;
   o._size = MO.Lang.Object.dispose(o._size);
   o._calculateSize = MO.Lang.Object.dispose(o._calculateSize);
   o._logicSize = MO.Lang.Object.dispose(o._logicSize);
   o._logicRate = MO.Lang.Object.dispose(o._logicRate);
   o._screenSize = MO.Lang.Object.dispose(o._screenSize);
   o._virtualSize = MO.Lang.Object.dispose(o._virtualSize);
   o._canvases = MO.Lang.Object.dispose(o._canvases);
   o.__base.FObject.dispose.call(o);
}
MO.FDisplay = function FDisplay(o){
   o = MO.Class.inherits(this, o, MO.FComponent, MO.MGraphicObject);
   o._currentMatrix    = MO.Class.register(o, new MO.AGetter('_currentMatrix'));
   o._matrix           = MO.Class.register(o, new MO.AGetter('_matrix'));
   o._location         = MO.Class.register(o, new MO.AGetter('_location'));
   o._rotation         = MO.Class.register(o, new MO.AGetter('_rotation'));
   o._scale            = MO.Class.register(o, new MO.AGetter('_scale'));
   o._visible          = true;
   o._renderables      = null;
   o.construct         = MO.FDisplay_construct;
   o.hasRenderable     = MO.FDisplay_hasRenderable;
   o.renderables       = MO.FDisplay_renderables;
   o.pushRenderable    = MO.FDisplay_pushRenderable;
   o.removeRenderable  = MO.FDisplay_removeRenderable;
   o.clearRenderables  = MO.FDisplay_clearRenderables;
   o.push              = MO.FDisplay_push;
   o.remove            = MO.FDisplay_remove;
   o.filterDisplays    = MO.FDisplay_filterDisplays;
   o.filterRenderables = MO.FDisplay_filterRenderables;
   o.show              = MO.FDisplay_show;
   o.hide              = MO.FDisplay_hide;
   o.setVisible        = MO.FDisplay_setVisible;
   o.update            = MO.FDisplay_update;
   o.updateMatrix      = MO.FDisplay_updateMatrix;
   o.process           = MO.FDisplay_process;
   o.dispose           = MO.FDisplay_dispose;
   return o;
}
MO.FDisplay_construct = function FDisplay_construct(){
   var o = this;
   o.__base.FComponent.construct.call(o);
   o._currentMatrix = new MO.SMatrix3d();
   o._matrix = new MO.SMatrix3d();
   o._location = new MO.SPoint3();
   o._rotation = new MO.SVector3();
   o._scale = new MO.SVector3(1, 1, 1);
}
MO.FDisplay_hasRenderable = function FDisplay_hasRenderable(){
   var renderables = this._renderables;
   return renderables ? !renderables.isEmpty() : false;
}
MO.FDisplay_renderables = function FDisplay_renderables(){
   var o = this;
   var renderables = o._renderables;
   if(!renderables){
      renderables = o._renderables = new MO.TObjects();
   }
   return renderables;
}
MO.FDisplay_pushRenderable = function FDisplay_pushRenderable(renderable){
   var o = this;
   renderable._display = o;
   o.renderables().push(renderable);
}
MO.FDisplay_removeRenderable = function FDisplay_removeRenderable(renderable){
   var renderables = this._renderables;
   if(renderables){
      renderables.remove(renderable);
   }
}
MO.FDisplay_clearRenderables = function FDisplay_clearRenderables(){
   var renderables = this._renderables;
   if(renderables){
      renderables.clear();
   }
}
MO.FDisplay_push = function FDisplay_push(item){
   var o = this;
   if(MO.Class.isClass(item, MO.FRenderable)){
      o.pushRenderable(item);
   }else if(MO.Class.isClass(item, MO.MRenderableLinker)){
      o.pushRenderable(item.renderable());
   }else if(MO.Class.isClass(item, MO.FDisplay)){
      o.pushDisplay(item);
   }else{
      throw new MO.TError(o, 'Unknown item type.');
   }
}
MO.FDisplay_remove = function FDisplay_remove(){
   var o = this;
   var c = o._parent;
   if(c){
      c.removeDisplay(o);
      o._parent = null;
   }
}
MO.FDisplay_filterDisplays = function FDisplay_filterDisplays(p){
   var o = this;
   if(o._visible){
      p.push(o);
   }
}
MO.FDisplay_filterRenderables = function FDisplay_filterRenderables(p){
   var o = this;
   if(!o._visible){
      return false;
   }
   var s = o._renderables;
   if(s){
      var c = s.count();
      for(var i = 0; i < c; i++){
         s.getAt(i).filterDrawables(p);
      }
   }
   return true;
}
MO.FDisplay_show = function FDisplay_show(){
   this.setVisible(true);
}
MO.FDisplay_hide = function FDisplay_hide(){
   this.setVisible(false);
}
MO.FDisplay_setVisible = function FDisplay_setVisible(p){
   this._visible = p;
}
MO.FDisplay_update = function FDisplay_update(){
   var o = this;
   var m = o._matrix;
   m.set(o._location, o._rotation, o._scale);
   m.update();
}
MO.FDisplay_updateMatrix = function FDisplay_updateMatrix(region){
   var o = this;
   o._currentMatrix.assign(o._matrix);
   var parent = o._parent;
   if(parent){
      o._currentMatrix.append(parent._currentMatrix);
   }
}
MO.FDisplay_process = function FDisplay_process(region){
   var o = this;
   o.updateMatrix(region);
   var renderables = o._renderables;
   if(renderables){
      var count = renderables.count();
      for(var i = 0; i < count; i++){
         var renderable = renderables.at(i);
         renderable.process(region);
      }
   }
}
MO.FDisplay_dispose = function FDisplay_dispose(){
   var o = this;
   o._currentMatrix = MO.Lang.Object.dispose(o._currentMatrix);
   o._matrix = MO.Lang.Object.dispose(o._matrix);
   o._position = MO.Lang.Object.dispose(o._position);
   o._direction = MO.Lang.Object.dispose(o._direction);
   o._scale = MO.Lang.Object.dispose(o._scale);
   o._renderables = MO.Lang.Object.dispose(o._renderables);
   o.__base.FComponent.dispose.call(o);
}
MO.FDisplayContainer = function FDisplayContainer(o){
   o = MO.Class.inherits(this, o, MO.FDisplay);
   o._displays         = null;
   o.hasDisplay        = MO.FDisplayContainer_hasDisplay;
   o.findDisplay       = MO.FDisplayContainer_findDisplay;
   o.searchDisplay     = MO.FDisplayContainer_searchDisplay;
   o.displays          = MO.FDisplayContainer_displays;
   o.pushDisplay       = MO.FDisplayContainer_pushDisplay;
   o.removeDisplay     = MO.FDisplayContainer_removeDisplay;
   o.filterDisplays    = MO.FDisplayContainer_filterDisplays;
   o.filterRenderables = MO.FDisplayContainer_filterRenderables;
   o.process           = MO.FDisplayContainer_process;
   o.dispose           = MO.FDisplayContainer_dispose;
   return o;
}
MO.FDisplayContainer_hasDisplay = function FDisplayContainer_hasDisplay(){
   var displays = this._displays;
   if(displays){
      return !displays.isEmpty();
   }
   return false;
}
MO.FDisplayContainer_findDisplay = function FDisplayContainer_findDisplay(code){
   var o = this;
   var displays = o._displays;
   if(displays){
      var count = displays.count();
      for(var i = 0; i < count; i++){
         var display = displays.at(i);
         if(display.code() == code){
            return display;
         }
      }
   }
   return null
}
MO.FDisplayContainer_searchDisplay = function FDisplayContainer_searchDisplay(p){
   var o = this;
   var displays = o._displays;
   if(displays){
      var c = displays.count();
      for(var i = 0; i < c; i++){
         var f = displays.at(i);
         if(f.isName(p)){
            return f;
         }
         var r = f.searchDisplay(p);
         if(r){
            return r;
         }
      }
   }
   return null
}
MO.FDisplayContainer_displays = function FDisplayContainer_displays(){
   var o = this;
   var displays = o._displays;
   if(!displays){
      displays = o._displays = new MO.TObjects();
   }
   return displays;
}
MO.FDisplayContainer_pushDisplay = function FDisplayContainer_pushDisplay(display){
   var o = this;
   display.setParent(o);
   o.displays().push(display);
}
MO.FDisplayContainer_removeDisplay = function FDisplayContainer_removeDisplay(display){
   var o = this;
   o.displays().remove(display);
   display.setParent(null);
}
MO.FDisplayContainer_filterDisplays = function FDisplayContainer_filterDisplays(region){
   var o = this;
   o.__base.FDisplay.filterDisplays.call(o, region);
   if(!o._visible){
      return false;
   }
   var displays = o._displays;
   if(displays){
      var count = displays.count();
      for(var i = 0; i < count; i++){
         var display = displays.at(i);
         display.filterDisplays(region);
      }
   }
}
MO.FDisplayContainer_filterRenderables = function FDisplayContainer_filterRenderables(region){
   var o = this;
   o.__base.FDisplay.filterRenderables.call(o, region);
   if(!o._visible){
      return false;
   }
   var displays = o._displays;
   if(displays){
      var count = displays.count();
      for(var i = 0; i < count; i++){
         var display = displays.at(i);
         display.filterRenderables(region);
      }
   }
   return true;
}
MO.FDisplayContainer_process = function FDisplayContainer_process(region){
   var o = this;
   o.__base.FDisplay.process.call(o, region);
   var displays = o._displays;
   if(displays){
      var count = displays.count();
      for(var i = 0; i < count; i++){
         var display = displays.at(i);
         display.process(region);
      }
   }
}
MO.FDisplayContainer_dispose = function FDisplayContainer_dispose(){
   var o = this;
   var displays = o._displays;
   if(displays){
      for(var i = v.count() - 1; i >= 0; i--){
         displays.at(i).dispose();
      }
      o._displays = MO.Lang.Object.dispose(displays);
   }
   o.__base.FDisplay.dispose.call(o);
}
MO.FDisplayLayer = function FDisplayLayer(o){
   o = MO.Class.inherits(this, o, MO.FDisplayContainer);
   o._optionClearDepth   = MO.Class.register(o, new MO.AGetSet('_optionClearDepth'), false);
   o._statusActive       = false;
   o._technique          = MO.Class.register(o, new MO.AGetSet('_technique'));
   o._visibleRenderables = MO.Class.register(o, new MO.AGetter('_visibleRenderables'));
   o.construct           = MO.FDisplayLayer_construct;
   o.selectTechnique     = MO.FDisplayLayer_selectTechnique;
   o.filterRenderables   = MO.FDisplayLayer_filterRenderables;
   o.active              = MO.FDisplayLayer_active;
   o.deactive            = MO.FDisplayLayer_deactive;
   return o;
}
MO.FDisplayLayer_construct = function FDisplayLayer_construct(){
   var o = this;
   o.__base.FDisplayContainer.construct.call(o);
   o._visibleRenderables = new MO.TObjects();
}
MO.FDisplayLayer_selectTechnique = function FDisplayLayer_selectTechnique(context, name){
   var technique = MO.Console.find(MO.FG3dTechniqueConsole).find(context, name);
   this.selectTechnique(technique);
}
MO.FDisplayLayer_filterRenderables = function FDisplayLayer_filterRenderables(p){
   var o = this;
   o.__base.FDisplayContainer.filterRenderables.call(o, p);
   o._visibleRenderables.assign(p.renderables());
}
MO.FDisplayLayer_active = function FDisplayLayer_active(){
   this._statusActive = true;
}
MO.FDisplayLayer_deactive = function FDisplayLayer_deactive(){
   this._statusActive = false;
}
MO.FDisplayUiLayer = function FDisplayUiLayer(o){
   o = MO.Class.inherits(this, o, MO.FDisplayLayer);
   return o;
}
MO.FDrawable = function FDrawable(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._visible    = MO.Class.register(o, new MO.AGetSet('_visible'), true);
   o.testVisible = MO.FDrawable_testVisible;
   o.process     = MO.Method.empty;
   return o;
}
MO.FDrawable_testVisible = function FDrawable_testVisible(){
   return this._visible;
}
MO.FMainTimeline = function FMainTimeline(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListener, MO.MTimelineActions, MO.MTimeline, MO.MTimelines);
   o._context   = null;
   o._startTick = 0;
   o._lastTick  = 0;
   o._interval  = 0;
   o.construct  = MO.FMainTimeline_construct;
   o.setup      = MO.FMainTimeline_setup;
   o.start      = MO.FMainTimeline_start;
   o.process    = MO.FMainTimeline_process;
   o.dispose    = MO.FMainTimeline_dispose;
   return o;
}
MO.FMainTimeline_construct = function FMainTimeline_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o.__base.MTimelineActions.construct.call(o);
   o._context = new MO.STimelineContext();
   o._timelines = new MO.TObjects();
}
MO.FMainTimeline_setup = function FMainTimeline_setup(){
   var o = this;
}
MO.FMainTimeline_start = function FMainTimeline_start(){
   var o = this;
}
MO.FMainTimeline_process = function FMainTimeline_process(){
   var o = this;
   var tick = MO.Timer.current();
   if(tick - o._lastTick < o._interval){
      return false;
   }
   o._lastTick = tick;
   if(o._startTick == 0){
      o._startTick = tick;
   }
   var context = o._context;
   context.tick = o._startTick - tick;
   o.__base.MTimelineActions.process.call(o, context);
   o.__base.MTimelines.process.call(o, context);
}
MO.FMainTimeline_dispose = function FMainTimeline_dispose(){
   var o = this;
   o._timelines = MO.Lang.Object.dispose(o._timelines);
   o._context = MO.Lang.Object.dispose(o._context);
   o.__base.MTimelineActions.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FReadyLoader = function FReadyLoader(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListener);
   o._items           = MO.Class.register(o, new MO.AGetter('_items'));
   o._listenersChange = MO.Class.register(o, new MO.AListener('_listenersChange', MO.EEvent.Change));
   o._statusEvent     = null;
   o._statusReady     = false;
   o.construct        = MO.FReadyLoader_construct;
   o.testReady        = MO.FReadyLoader_testReady;
   o.push             = MO.FReadyLoader_push;
   o.clear            = MO.FReadyLoader_clear;
   o.dispose          = MO.FReadyLoader_dispose;
   return o;
}
MO.FReadyLoader_construct = function FReadyLoader_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._items = new MO.TObjects();
   o._statusEvent = new MO.SEvent();
}
MO.FReadyLoader_testReady = function FReadyLoader_testReady(){
   var o = this;
   var ready = o._statusReady;
   if(!ready){
      var items = o._items;
      var count = items.count();
      for(var i = 0; i < count; i++){
         var item = items.at(i);
         if(!item.testReady()){
            return false;
         }
      }
      var event = o._statusEvent;
      event.ready = true;
      o.processChangeListener(event);
      ready = o._statusReady = true;
   }
   return ready;
}
MO.FReadyLoader_push = function FReadyLoader_push(item){
   var o = this;
   o._items.push(item);
   o._statusReady = false;
}
MO.FReadyLoader_clear = function FReadyLoader_clear(){
   var o = this;
   o._items.clear();
   o._statusReady = true;
}
MO.FReadyLoader_dispose = function FReadyLoader_dispose(){
   var o = this;
   o._items = MO.Lang.Object.dispose(o._items);
   o._statusEvent = MO.Lang.Object.dispose(o._statusEvent);
   o.__base.MListener.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FRegion = function FRegion(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   return o;
}
MO.FRenderable = function FRenderable(o){
   o = MO.Class.inherits(this, o, MO.FDrawable);
   o._drawables      = null;
   o.hasDrawable     = MO.FRenderable_hasDrawable;
   o.drawables       = MO.FRenderable_drawables;
   o.pushDrawable    = MO.FRenderable_pushDrawable;
   o.removeDrawable  = MO.FRenderable_removeDrawable;
   o.filterDrawables = MO.FRenderable_filterDrawables;
   o.process         = MO.FRenderable_process;
   return o;
}
MO.FRenderable_hasDrawable = function FRenderable_hasDrawable(){
   var drawables = this._drawables;
   return drawables ? !drawables.isEmpty() : false;
}
MO.FRenderable_drawables = function FRenderable_drawables(){
   var o = this;
   var drawables = o._drawables;
   if(!drawables){
      drawables = o._drawables = new MO.TObjects();
   }
   return drawables;
}
MO.FRenderable_pushDrawable = function FRenderable_pushDrawable(drawable){
   var o = this;
   drawable._drawable = o;
   drawable._parent = o;
   o.drawables().push(drawable);
}
MO.FRenderable_removeDrawable = function FRenderable_removeDrawable(drawable){
   this._drawables.remove(drawable);
}
MO.FRenderable_filterDrawables = function FRenderable_filterDrawables(region){
   var o = this;
   if(!o.testVisible()){
      return false;
   }
   region.pushRenderable(o);
   var drawables = o._drawables;
   if(drawables){
      var count = drawables.count();
      for(var i = 0; i < count; i++){
         var drawable = drawables.getAt(i);
         if(drawable.testVisible()){
            region.pushRenderable(drawable);
         }
      }
   }
   return true;
}
MO.FRenderable_process = function FRenderable_process(region){
   var o = this;
   o.__base.FDrawable.process.call(o, region);
   var drawables = o._drawables;
   if(drawables){
      var count = drawables.count();
      for(var i = 0; i < count; i++){
         var drawable = drawables.getAt(i);
         drawable.process(region);
      }
   }
}
MO.FStage = function FStage(o){
   o = MO.Class.inherits(this, o, MO.FComponent, MO.MListener);
   o._code                = 'stage';
   o._statusActive        = false;
   o._size                = MO.Class.register(o, new MO.AGetter('_size'));
   o._timer               = MO.Class.register(o, new MO.AGetter('_timer'));
   o._layers              = MO.Class.register(o, new MO.AGetter('_layers'));
   o._enterFrameListeners = MO.Class.register(o, new MO.AListener('_enterFrameListeners', MO.EEvent.EnterFrame));
   o._leaveFrameListeners = MO.Class.register(o, new MO.AListener('_leaveFrameListeners', MO.EEvent.LeaveFrame));
   o.onProcess            = MO.FStage_onProcess;
   o.construct            = MO.FStage_construct;
   o.registerLayer        = MO.FStage_registerLayer;
   o.unregisterLayer      = MO.FStage_unregisterLayer;
   o.active               = MO.FStage_active;
   o.deactive             = MO.FStage_deactive;
   o.process              = MO.FStage_process;
   o.dispose              = MO.FStage_dispose;
   return o;
}
MO.FStage_onProcess = function FStage_onProcess(){
   var o = this;
   var layers = o._layers;
   var count = layers.count();
   for(var i = 0; i < count; i++){
      var layer = layers.at(i);
      layer.process();
   }
}
MO.FStage_construct = function FStage_construct(){
   var o = this;
   o.__base.FComponent.construct.call(o);
   o._size = new MO.SSize2(1920, 1080);
   o._timer = MO.Class.create(MO.FTimer);
   o._layers = new MO.TDictionary();
}
MO.FStage_registerLayer = function FStage_registerLayer(code, layer){
   layer.setCode(code);
   this._layers.set(code, layer);
}
MO.FStage_unregisterLayer = function FStage_unregisterLayer(code){
   this._layers.set(code, null);
}
MO.FStage_active = function FStage_active(){
   var o = this;
   o._statusActive = true;
   var layers = o._layers;
   var count = layers.count();
   for(var i = 0; i < count; i++){
      var layer = layers.at(i);
      layer.active();
   }
}
MO.FStage_deactive = function FStage_deactive(){
   var o = this;
   var layers = o._layers;
   var count = layers.count();
   for(var i = 0; i < count; i++){
      var layer = layers.at(i);
      layer.deactive();
   }
   o._statusActive = false;
}
MO.FStage_process = function FStage_process(){
   var o = this;
   var timer = o._timer;
   if(!timer){
      timer = MO.Class.create(MO.FTimer);
      timer.setup();
   }
   o.processEnterFrameListener(o);
   o.onProcess();
   o.processLeaveFrameListener(o);
   timer.update();
}
MO.FStage_dispose = function FStage_dispose(){
   var o = this;
   o._timer = MO.Lang.Object.dispose(o._timer);
   o._layers = MO.Lang.Object.dispose(o._layers);
   o.__base.MListener.dispose.call(o);
   o.__base.FComponent.dispose.call(o);
}
MO.FTimeline = function FTimeline(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListener, MO.MTimelineActions, MO.MTimeline, MO.MTimelines);
   o._mainTimeline = MO.Class.register(o, new MO.AGetter('_mainTimeline'));
   o.construct     = MO.FTimeline_construct;
   o.setup         = MO.FTimeline_setup;
   o.process       = MO.FTimeline_process;
   o.dispose       = MO.FTimeline_dispose;
   return o;
}
MO.FTimeline_construct = function FTimeline_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o.__base.MTimelineActions.construct.call(o);
   o._actions = new MO.TObejcts();
}
MO.FTimeline_setup = function FTimeline_setup(){
   var o = this;
}
MO.FTimeline_process = function FTimeline_process(context){
   var o = this;
   o.__base.MTimelineActions.process.call(o, context);
   o.__base.MTimelines.process.call(o, context);
}
MO.FTimeline_dispose = function FTimeline_dispose(){
   var o = this;
   o._actions = MO.Lang.Obejct.dispose(o._actions);
   o.__base.MTimelineActions.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.RStage = function RStage(){
   var o = this;
   o._started       = false;
   o._thread        = null;
   o._active        = true;
   o._interval      = 10;
   o._stages        = null;
   o.lsnsEnterFrame = null;
   o.lsnsLeaveFrame = null;
   o.construct();
   return o;
}
MO.RStage.prototype.onProcess = function RStage_onProcess(event){
   var o = this;
   if(!o._active){
      return;
   }
   try{
      o.lsnsEnterFrame.process(o);
      var stages = o._stages;
      if(stages){
         var count = stages.count();
         for(var i = 0; i < count; i++){
            var stage = stages.at(i);
            stage.process();
         }
      }
      o.lsnsLeaveFrame.process(o);
      MO.Timer.update();
   }catch(e){
      alert(e);
   }
}
MO.RStage.prototype.construct = function RStage_construct(){
   var o = this;
   o.lsnsEnterFrame = new MO.TListeners();
   o.lsnsLeaveFrame = new MO.TListeners();
}
MO.RStage.prototype.register = function RStage_register(name, stage){
   var o = this;
   var stages = o._stages;
   if(!stages){
      stages = o._stages = new MO.TDictionary();
   }
   stages.set(name , stage);
}
MO.RStage.prototype.unregister = function RStage_unregister(stage){
   this._stages.removeValue(stage);
}
MO.RStage.prototype.active = function RStage_active(){
   var o = this;
   var stages = o._stages;
   if(stages){
      var count = stages.count();
      for(var i = 0; i < count; i++){
         var stage = stages.at(i);
         stage.active();
      }
   }
}
MO.RStage.prototype.process = function RStage_process(){
   this.onProcess();
}
MO.RStage.prototype.deactive = function RStage_deactive(){
   var o = this;
   var stages = o._stages;
   if(stages){
      var count = stages.count();
      for(var i = 0; i < count; i++){
         var stage = stages.at(i);
         stage.deactive();
      }
   }
}
MO.RStage.prototype.start = function RStage_start(interval){
   var o = this;
   if(o._started){
      return;
   }
   MO.RE3dEngine.setup();
   o.active();
   MO.Timer.setup();
   if(interval == null){
      interval = o._interval;
   }
   o._interval = parseInt(interval);
   var thread = o._thread = MO.Class.create(MO.FThread);
   thread.setInterval(o._interval);
   thread.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(thread);
   o._started = true;
}
MO.RStage = new MO.RStage();
MO.Stage = MO.RStage;
MO.MAudio = function MAudio(o){
   o = MO.Class.inherits(this, o, MO.MListener);
   o._ready         = MO.Class.register(o, new MO.AGetterSource('_ready', 'testReady'), false);
   o._loaded        = MO.Class.register(o, new MO.AGetterSource('_loaded', 'testLoaded'), false);
   o._finish        = MO.Class.register(o, new MO.AGetterSource('_finish', 'testFinish'), false);
   o._listenersLoad = MO.Class.register(o, new MO.AListener('_listenersLoad', MO.EEvent.Load));
   o.construct      = MO.MAudio_construct;
   o.volume         = MO.MAudio_volume;
   o.setVolume      = MO.MAudio_setVolume;
   o.loop           = MO.MAudio_loop;
   o.setLoop        = MO.MAudio_setLoop;
   o.play           = MO.MAudio_play;
   o.pause          = MO.MAudio_pause;
   o.dispose        = MO.MAudio_dispose;
   return o;
}
MO.MAudio_construct = function MAudio_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.MAudio_volume = function MAudio_volume(){
   return 0;
}
MO.MAudio_setVolume = function MAudio_setVolume(value){
}
MO.MAudio_loop = function MAudio_loop(){
   return false;
}
MO.MAudio_setLoop = function MAudio_setLoop(value){
}
MO.MAudio_play = function MAudio_play(position){
}
MO.MAudio_pause = function MAudio_pause(){
}
MO.MAudio_dispose = function MAudio_dispose(){
   var o = this;
   o.__base.MListener.dispose.call(o);
}
MO.MLinkerResource = function MLinkerResource(o){
   o = MO.Class.inherits(this, o);
   o._resource      = MO.Class.register(o, new MO.AGetSet('_resource'));
   o.loadResource   = MO.MLinkerResource_loadResource;
   o.reloadResource = MO.MLinkerResource_reloadResource;
   o.dispose        = MO.MLinkerResource_dispose;
   return o;
}
MO.MLinkerResource_loadResource = function MLinkerResource_loadResource(resource){
   this._resource = resource;
}
MO.MLinkerResource_reloadResource = function MLinkerResource_reloadResource(){
   var o = this;
   o.loadResource(o._resource);
}
MO.MLinkerResource_dispose = function MLinkerResource_dispose(){
   var o = this;
   o._resource = null;
}
MO.FAudio = function FAudio(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MAudio);
   o._url      = MO.Class.register(o, new MO.AGetter('_url'));
   o._hAudio   = null;
   o.ohLoad    = MO.FAudio_ohLoad;
   o.ohLoaded  = MO.FAudio_ohLoaded;
   o.ohError   = MO.FAudio_ohError;
   o.construct = MO.FAudio_construct;
   o.volume    = MO.FAudio_volume;
   o.setVolume = MO.FAudio_setVolume;
   o.loop      = MO.FAudio_loop;
   o.setLoop   = MO.FAudio_setLoop;
   o.play      = MO.FAudio_play;
   o.pause     = MO.FAudio_pause;
   o.loadUrl   = MO.FAudio_loadUrl;
   o.select    = MO.FAudio_select;
   o.dispose   = MO.FAudio_dispose;
   return o;
}
MO.FAudio_ohLoad = function FAudio_ohLoad(){
   var o = this.__linker;
   o._ready = true;
   o._hAudio.oncanplay = null;
   MO.Logger.info(o, 'Audio load success. (url={1})', o._url);
}
MO.FAudio_ohLoaded = function FAudio_ohLoaded(event){
   var o = this.__linker;
   o._ready = true;
   o._loaded = true;
   o._finish = true;
   o._hAudio.oncanplaythrough = null;
   MO.Logger.info(o, 'Audio loaded success. (url={1})', o._url);
}
MO.FAudio_ohError = function FAudio_ohError(event){
   var o = this.__linker;
   o._finish = true;
   MO.Logger.error(o, 'Audio load failure. (url={1})', o._url);
}
MO.FAudio_construct = function FAudio_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o.__base.MAudio.construct.call(o);
}
MO.FAudio_volume = function FAudio_volume(){
   return this._hAudio.volume;
}
MO.FAudio_setVolume = function FAudio_setVolume(value){
   this._hAudio.volume = value;
}
MO.FAudio_loop = function FAudio_loop(){
   return this._hAudio.loop;
}
MO.FAudio_setLoop = function FAudio_setLoop(value){
   this._hAudio.loop = value;
}
MO.FAudio_play = function FAudio_play(position){
   var o = this;
   var hAudio = o._hAudio;
   if(position != null){
      if(hAudio.currentTime != position){
         hAudio.currentTime = position;
      }
   }
   hAudio.play();
}
MO.FAudio_pause = function FAudio_pause(){
   var o = this;
   o._hAudio.pause();
}
MO.FAudio_loadUrl = function FAudio_loadUrl(uri){
   var o = this;
   var url = MO.Console.find(MO.FEnvironmentConsole).parseUrl(uri);
   var hAudio = o._hAudio;
   if(!hAudio){
      hAudio = o._hAudio = new Audio();
      hAudio.__linker = o;
      hAudio.oncanplay = o.ohLoad;
      hAudio.oncanplaythrough = o.ohLoaded;
      hAudio.onerror = o.ohError;
      hAudio.loop = false;
   }
   if(!MO.Window.Browser.capability.soundFinish){
      o._ready = true;
      o._loaded = true;
      o._finish = true;
   }
   o._url = url;
   hAudio.src = url;
}
MO.FAudio_select = function FAudio_select(){
   var o = this;
   o._hAudio.play();
   o._hAudio.pause();
}
MO.FAudio_dispose = function FAudio_dispose(){
   var o = this;
   o._hAudio = MO.Window.Html.free(o._hAudio);
   o.__base.MListenerLoad.dispose.call(o);
   o.__base.MAudio.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FAudioBuffer = function FAudioBuffer(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MAudio);
   o._context        = MO.Class.register(o, new MO.AGetSet('_context'));
   o._url            = MO.Class.register(o, new MO.AGetSet('_url'));
   o._handle         = MO.Class.register(o, new MO.AGetter('_handle'));
   o._buffer         = MO.Class.register(o, new MO.AGetter('_buffer'));
   o.onDecodeSuccess = MO.FAudioBuffer_onDecodeSuccess;
   o.onDecodeFailure = MO.FAudioBuffer_onDecodeFailure;
   o.onLoad          = MO.FAudioBuffer_onLoad;
   o.construct       = MO.FAudioBuffer_construct;
   o.testReady       = MO.FAudioBuffer_testReady;
   o.loadUrl         = MO.FAudioBuffer_loadUrl;
   o.play            = MO.FAudioBuffer_play;
   o.dispose         = MO.FAudioBuffer_dispose;
   return o;
}
MO.FAudioBuffer_onDecodeSuccess = function FAudioBuffer_onDecodeSuccess(buffer){
   var o = this;
   var contextHandle = o._context.handle();
   var bufferSource = o._buffer = contextHandle.createBufferSource();
   bufferSource.buffer = buffer;
   bufferSource.connect(contextHandle.destination)
   o._ready = true;
   o._loaded = true;
   o._finish = true;
   var event = new MO.SEvent(o);
   o.processLoadListener(event);
   event.dispose();
}
MO.FAudioBuffer_onDecodeFailure = function FAudioBuffer_onDecodeFailure(buffer){
   var o = this;
   o._finish = true;
   MO.Logger.error(o, 'Decode audio buffer failure. (url={1})', o._url);
}
MO.FAudioBuffer_onLoad = function FAudioBuffer_onLoad(connection){
   var o = this;
   var data = connection.outputData();
   var contextHandle = o._context.handle();
   contextHandle.decodeAudioData(data, o.onDecodeSuccess.bind(o), o.onDecodeFailure.bind(o));
}
MO.FAudioBuffer_construct = function FAudioBuffer_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o.__base.MAudio.construct.call(o);
}
MO.FAudioBuffer_testReady = function FAudioBuffer_testReady(){
   return this._ready;
}
MO.FAudioBuffer_loadUrl = function FAudioBuffer_loadUrl(uri){
   var o = this;
   var url = o._url = MO.Console.find(MO.FEnvironmentConsole).parse(uri);
   var connection = MO.Console.find(MO.FHttpConsole).sendAsync(o._url);
   connection.addLoadListener(o, o.onLoad);
}
MO.FAudioBuffer_play = function FAudioBuffer_play(position){
   this._buffer.start(MO.Lang.Integer.nvl(position));
}
MO.FAudioBuffer_dispose = function FAudioBuffer_dispose(){
   var o = this;
   o.__base.MAudio.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FAudioConsole = function FAudioConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd  = MO.EScope.Global;
   o._audios   = null;
   o.construct = MO.FAudioConsole_construct;
   o.create    = MO.FAudioConsole_create;
   o.load      = MO.FAudioConsole_load;
   o.select    = MO.FAudioConsole_select;
   o.dispose   = MO.FAudioConsole_dispose;
   return o;
}
MO.FAudioConsole_construct = function FAudioConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._audios = new MO.TDictionary();
}
MO.FAudioConsole_create = function FAudioConsole_create(uri){
   var o = this;
   var url = MO.Console.find(MO.FEnvironmentConsole).parse(uri);
   var audio = MO.Class.create(MO.FAudioResource);
   audio.loadUrl(url);
   return audio;
}
MO.FAudioConsole_load = function FAudioConsole_load(uri){
   var o = this;
   var audios = o._audios;
   var audio = audios.get(uri);
   if(!audio){
      audio = o.create(uri);
      audios.set(uri, audio);
   }
   return audio;
}
MO.FAudioConsole_select = function FAudioConsole_select(){
   var o = this;
   var audios = o._audios;
   var count = audios.count();
   for(var i = 0; i < count; i++){
      var audio = audios.at(i);
      audio.select();
   }
}
MO.FAudioConsole_dispose = function FAudioConsole_dispose(){
   var o = this;
   o._audios = MO.Lang.Object.dispose(o._audios);
   o.__base.FConsole.dispose.call(o);
}
MO.FAudioContext = function FAudioContext(o) {
   o = MO.Class.inherits(this, o, MO.FObject);
   o._handle      = MO.Class.register(o, new MO.AGetter('_handle'));
   o._buffers     = MO.Class.register(o, new MO.AGetter('_buffers'));
   o.construct    = MO.FAudioContext_construct;
   o.setup        = MO.FAudioContext_setup;
   o.createBuffer = MO.FAudioContext_createBuffer;
   o.dispose      = MO.FAudioContext_dispose;
   return o;
}
MO.FAudioContext_construct = function FAudioContext_construct() {
   var o = this;
   o.__base.FObject.construct.call(o);
   o._buffers = new MO.TDictionary();
}
MO.FAudioContext_setup = function FAudioContext_setup(uri) {
   var o = this;
   o._audioBuffers = new MO.TDictionary();
   var context = null;
   if(window.AudioContext){
      context = new AudioContext();
   }else if(window.webkitAudioContext){
      context = new webkitAudioContext();
   }
   if(!context){
      return MO.Logger.error(o, 'Invalid audio context.');
   }
   o._handle = context;
}
MO.FAudioContext_createBuffer = function FAudioContext_createBuffer(uri) {
   var o = this;
   var url = MO.Console.find(MO.FEnvironmentConsole).parse(uri);
   var buffer = null;
   o._handle = null;
   if(o._handle){
      buffer = MO.Class.create(MO.FAudioBuffer);
      buffer.setContext(o);
   }else{
      buffer = MO.Class.create(MO.FAudio);
   }
   buffer.loadUrl(url);
   return buffer;
}
MO.FAudioContext_dispose = function FAudioContext_dispose() {
   var o = this;
   o._buffers = MO.Lang.Object.dispose(o._buffers);
   o.__base.FObject.dispose.call(o);
}
MO.FAudioContextConsole = function FAudioContextConsole(o) {
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd  = MO.EScope.Global;
   o._contexts = null;
   o.construct = MO.FAudioContextConsole_construct;
   o.create    = MO.FAudioContextConsole_create;
   o.dispose   = MO.FAudioContextConsole_dispose;
   return o;
}
MO.FAudioContextConsole_construct = function FAudioContextConsole_construct() {
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._contexts = new MO.TObjects();
}
MO.FAudioContextConsole_create = function FAudioContextConsole_create(uri) {
   var o = this;
   var context = MO.Class.create(MO.FAudioContext);
   context.setup();
   o._contexts.push(context);
   return context;
}
MO.FAudioContextConsole_dispose = function FAudioContextConsole_dispose(){
   var o = this;
   o._contexts = MO.Lang.Object.dispose(o._contexts);
   o.__base.FConsole.dispose.call(o);
}
MO.FAudioResource = function FAudioResource(o){
   o = MO.Class.inherits(this, o, MO.FAudio);
   return o;
}
MO.FImageConsole = function FImageConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd  = MO.EScope.Global;
   o._images   = null;
   o.construct = MO.FImageConsole_construct;
   o.create    = MO.FImageConsole_create;
   o.load      = MO.FImageConsole_load;
   o.dispose   = MO.FImageConsole_dispose;
   return o;
}
MO.FImageConsole_construct = function FImageConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._images = new MO.TDictionary();
}
MO.FImageConsole_create = function FImageConsole_create(uri){
   var o = this;
   var url = MO.Console.find(MO.FEnvironmentConsole).parse(uri);
   var image = MO.Class.create(MO.FImageResource);
   image.loadUrl(url);
   return image;
}
MO.FImageConsole_load = function FImageConsole_load(uri){
   var o = this;
   var images = o._images;
   var image = images.get(uri);
   if(!image){
      image = o.create(uri);
      images.set(uri, image);
   }
   return image;
}
MO.FImageConsole_dispose = function FImageConsole_dispose(){
   var o = this;
   o._images = MO.Lang.Object.dispose(o._images);
   o.__base.FConsole.dispose.call(o);
}
MO.FImageResource = function FImageResource(o){
   o = MO.Class.inherits(this, o, MO.FImage);
   return o;
}
MO.FResource = function FResource(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._guid         = MO.Class.register(o, new MO.AGetSet('_guid'));
   o._code         = MO.Class.register(o, new MO.AGetSet('_code'));
   o._label        = MO.Class.register(o, new MO.AGetSet('_label'));
   return o;
}
MO.FResourceBlockStorage = function FResourceBlockStorage(o){
   o = MO.Class.inherits(this, o, MO.FResourceStorage);
   o._ready      = false;
   o._dataLength = 0;
   o._blockSize  = 0;
   o._blockCount = 0;
   o._blocks     = MO.Class.register(o, new MO.AGetter('_blocks'));
   o._resource   = null;
   o.construct   = MO.FResourceBlockStorage_construct;
   o.testReady   = MO.FResourceBlockStorage_testReady;
   o.load        = MO.FResourceBlockStorage_load;
   o.complete    = MO.FResourceBlockStorage_complete;
   o.dispose     = MO.FResourceBlockStorage_dispose;
   return o;
}
MO.FResourceBlockStorage_construct = function FResourceBlockStorage_construct(){
   var o = this;
   o.__base.FResourceStorage.construct.call(o);
   o._blocks = new MO.TObjects();
}
MO.FResourceBlockStorage_testReady = function FResourceBlockStorage_testReady(){
   var o = this;
   if(!o._ready){
      var blocks = o._blocks;
      var count = blocks.count();
      for(var i = 0; i < count; i++){
         var block = blocks.at(i);
         if(!block.testReady()){
            return false;
         }
      }
      o._ready = true;
   }
   return o._ready;
}
MO.FResourceBlockStorage_load = function FResourceBlockStorage_load(buffer){
   var o = this;
   var resource = o._resource;
   o._compressLength = buffer.byteLength;
   var view = MO.Class.create(MO.FDataView);
   view.setEndianCd(true);
   view.link(buffer);
   var compressCode = view.readString();
   var length = o._dataLength = view.readInt32();
   var blockSize = o._blockSize = view.readInt32();
   var blockCount = o._blockCount = view.readInt32();
   var blocks = o._blocks;
   for(var i = 0; i < blockCount; i++){
      var size = view.readInt32();
      var blockData = new ArrayBuffer(size);
      view.readBytes(blockData, 0, size);
      var block = MO.Class.create(MO.FResourceBlockStorageData);
      block._guid = resource.guid();
      block._index = i;
      block.setCompressData(blockData);
      blocks.push(block)
   }
   view.dispose();
}
MO.FResourceBlockStorage_complete = function FResourceBlockStorage_complete(){
   var o = this;
   var resource = o._resource;
   var stream = MO.Class.create(MO.FDataStream);
   stream.setEndianCd(true);
   stream.setLength(o._dataLength);
   var blocks = o._blocks;
   var count = blocks.count();
   for(var i = 0; i < count; i++){
      var block = blocks.at(i);
      var data = block._data;
      stream.writeBytes(data.buffer, 0, data.byteLength);
   }
   stream.flip();
   var span = MO.Timer.current() - resource._compressStartTick;
   MO.Logger.info(o, 'Process resource storage. (guid={1}, block_count={2}, length={3}, total={4}, tick={5})', resource.guid(), count, o._compressLength, o._dataLength, span);
   resource.onComplete(stream);
   stream.dispose();
}
MO.FResourceBlockStorage_dispose = function FResourceBlockStorage_dispose(){
   var o = this;
   o._resource = null;
   var blocks = o._blocks;
   if(blocks){
      var count = blocks.count();
      for(var i = 0; i < count; i++){
         var block = blocks.at(i);
         block.dispose();
      }
      o._blocks = MO.Lang.Object.dispose(blocks);
   }
   o.__base.FResourceStorage.dispose.call(o);
}
MO.FResourceBlockStorageData = function FResourceBlockStorageData(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MResourceData);
   o.dispose = MO.FResourceBlockStorageData_dispose;
   return o;
}
MO.FResourceBlockStorageData_dispose = function FResourceBlockStorageData_dispose(){
   var o = this;
   o.__base.MResourceData.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FResourceConsole = function FResourceConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd          = MO.EScope.Global;
   o._factory          = null;
   o._types            = null;
   o._packages         = null;
   o._resources        = null;
   o._loadResources    = null;
   o._loadingResources = null;
   o._processStorages  = null;
   o._thread           = null;
   o._loadLimit        = 8;
   o._interval         = 150;
   o.onComplete        = MO.FResourceConsole_onComplete;
   o.onLoad            = MO.FResourceConsole_onLoad;
   o.onBlockLoad       = MO.FResourceConsole_onBlockLoad;
   o.onProcess         = MO.FResourceConsole_onProcess;
   o.construct         = MO.FResourceConsole_construct;
   o.registerType      = MO.FResourceConsole_registerType;
   o.factory           = MO.FResourceConsole_factory;
   o.load              = MO.FResourceConsole_load;
   o.loadPackage       = MO.FResourceConsole_loadPackage;
   o.loadPackageByUrl  = MO.FResourceConsole_loadPackageByUrl;
   o.dispose           = MO.FResourceConsole_dispose;
   return o;
}
MO.FResourceConsole_onComplete = function FResourceConsole_onComplete(resource, data){
   var o = this;
   resource._data = null;
   o._loadingResources.remove(resource);
   resource.onComplete(data);
}
MO.FResourceConsole_onLoad = function FResourceConsole_onLoad(connection){
   var o = this;
   var data = connection.outputData();
   var resource = connection._resource;
   var storage = MO.Class.create(MO.FResourceSingleStorage);
   storage.setResource(resource);
   storage.load(data);
   MO.Console.find(MO.FResourceDataConsole).load(storage);
   o._loadingResources.remove(resource);
   o._processStorages.push(storage);
}
MO.FResourceConsole_onBlockLoad = function FResourceConsole_onBlockLoad(connection){
   var o = this;
   var data = connection.outputData();
   var resource = connection._resource;
   resource._compressLength = data.byteLength;
   resource._compressStartTick = RTimer.current();
   var storage = MO.Class.create(MO.FResourceBlockStorage);
   storage.setResource(resource);
   storage.load(data);
   var dataConsole = MO.Console.find(MO.FResourceDataConsole);
   var blocks = storage.blocks();
   var count = blocks.count();
   for(var i = 0; i < count; i++){
      var block = blocks.at(i);
      dataConsole.load(block);
   }
   o._loadingResources.remove(resource);
   o._processStorages.push(storage);
}
MO.FResourceConsole_onProcess = function FResourceConsole_onProcess(){
   var o = this;
   var httpConsole = MO.Console.find(MO.FHttpConsole);
   var loadResources = o._loadResources;
   var loadingResources = o._loadingResources;
   var pc = loadingResources.count();
   if(!loadResources.isEmpty()){
      for(var i = o._loadLimit - pc; i > 0; i--){
         var resource = loadResources.shift();
         var sourceUrl = resource.sourceUrl();
         var connection = httpConsole.send(sourceUrl);
         connection._resource = resource;
         if(resource._dataCompress){
            if(resource._dataBlock){
               connection.addLoadListener(o, o.onBlockLoad);
            }else{
               connection.addLoadListener(o, o.onLoad);
            }
         }else{
            connection.addLoadListener(o, o.onComplete);
         }
         resource._dataLoad = true;
         loadingResources.push(resource);
         if(loadResources.isEmpty()){
            break;
         }
      }
   }
   var storages = o._processStorages;
   storages.record();
   while(storages.next()){
      var storage = storages.current();
      if(storage.testReady()){
         storages.removeCurrent();
         storage.complete();
         storage.dispose();
      }
   }
}
MO.FResourceConsole_construct = function FResourceConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._factory = MO.Class.create(MO.FClassFactory);
   o._types = new MO.TDictionary();
   o._packages = new MO.TDictionary();
   o._resources = new MO.TDictionary();
   o._loadResources  = new MO.TObjects();
   o._loadingResources = new MO.TObjects();
   o._processStorages = new MO.TLooper();
   var thread = o._thread = MO.Class.create(MO.FThread);
   thread.setInterval(o._interval);
   thread.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(thread);
}
MO.FResourceConsole_registerType = function FResourceConsole_registerType(type){
   var o = this;
   var code = type.code();
   return o._types.set(code, type);
}
MO.FResourceConsole_factory = function FResourceConsole_factory(){
   return this._factory;
}
MO.FResourceConsole_load = function FResourceConsole_load(resource){
   var o = this;
   var guid = resource.guid();
   var resources = o._resources;
   if(resources.contains(guid)){
      throw new MO.TError(o, 'Resource is already loaded. (guid={1})', guid);
   }
   resources.set(guid, resource);
   o._loadResources.push(resource);
   resource._dataLoad = true;
}
MO.FResourceConsole_loadPackage = function FResourceConsole_loadPackage(resourcePackage){
   var o = this;
}
MO.FResourceConsole_loadPackageByUrl = function FResourceConsole_loadPackageByUrl(uri){
   var o = this;
   var resourcePackages = o._packages;
   var resourcePackage = resourcePackages.get(uri);
   if(!resourcePackage){
      var url = MO.Console.find(MO.FEnvironmentConsole).parse(uri);
      resourcePackage = MO.Class.create(MO.FResourcePackage);
      resourcePackage.loadUrl(url);
      resourcePackages.set(uri, resourcePackage);
   }
   return resourcePackage;
}
MO.FResourceConsole_dispose = function FResourceConsole_dispose(){
   var o = this;
   o._factory = MO.Lang.Object.dispose(o._factory);
   o._types = MO.Lang.Object.dispose(o._types);
   o._packages = MO.Lang.Object.dispose(o._packages);
   o._resources = MO.Lang.Object.dispose(o._resources);
   o._loadResources  = MO.Lang.Object.dispose(o._loadResources);
   o._loadingResources = MO.Lang.Object.dispose(o._loadingResources);
   o._processStorages = MO.Lang.Object.dispose(o._processStorages);
   o.__base.FConsole.dispose.call(o);
}
MO.FResourceDataConsole = function FResourceDataConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd           = MO.EScope.Global;
   o._loadDatas         = null;
   o._processDatas      = null;
   o._pipeline          = null;
   o._pipelinePool      = null;
   o._thread            = null;
   o._processLimit      = 4;
   o._interval          = 200;
   o.onPipelineComplete = MO.FResourceDataConsole_onPipelineComplete;
   o.onProcess          = MO.FResourceDataConsole_onProcess;
   o.construct          = MO.FResourceDataConsole_construct;
   o.allocPipeline      = MO.FResourceDataConsole_allocPipeline;
   o.freePipeline       = MO.FResourceDataConsole_freePipeline;
   o.load               = MO.FResourceDataConsole_load;
   return o;
}
MO.FResourceDataConsole_onPipelineComplete = function FResourceDataConsole_onPipelineComplete(pipeline, data){
   var o = this;
   if(pipeline){
      o.freePipeline(pipeline);
   }
   o._processDatas.remove(data);
}
MO.FResourceDataConsole_onProcess = function FResourceDataConsole_onProcess(){
   var o = this;
   var loadDatas = o._loadDatas;
   var loadCount = loadDatas.count();
   if(loadCount == 0){
      return;
   }
   var pipeline = o._pipeline;
   if(pipeline){
      if(!pipeline.testBusy()){
         var data = loadDatas.shift();
         pipeline.decompress(data);
      }
   }else{
      var processDatas = o._processDatas;
      var processCount = processDatas.count();
      var idleCount = o._processLimit - processCount;
      if(idleCount <= 0){
         return;
      }
      var freeCount = Math.min(loadCount, idleCount);
      for(var i = 0; i < freeCount; i++){
         var data = loadDatas.shift();
         var pipeline = o.allocPipeline();
         pipeline.decompress(data);
         processDatas.push(data);
      }
   }
}
MO.FResourceDataConsole_construct = function FResourceDataConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._loadDatas  = new MO.TObjects();
   o._processDatas = new MO.TObjects();
   o._pipelinePool  = MO.Class.create(MO.FObjectPool);
   var capability = MO.Window.Browser.capability();
   if(!capability.optionProcess){
      var pipeline = o._pipeline = MO.Class.create(FResourceSinglePipeline);
      pipeline.setConsole(o);
   }
   var thread = o._thread = MO.Class.create(MO.FThread);
   thread.setInterval(o._interval);
   thread.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(thread);
}
MO.FResourceDataConsole_allocPipeline = function FResourceDataConsole_allocPipeline(){
   var o = this;
   var pool = o._pipelinePool;
   if(!pool.hasFree()){
      var pipeline = MO.Class.create(MO.FResourceThreadPipeline);
      pipeline.setConsole(o);
      pool.push(pipeline);
   }
   return pool.alloc();
}
MO.FResourceDataConsole_freePipeline = function FResourceDataConsole_freePipeline(pipeline){
   this._pipelinePool.free(pipeline);
}
MO.FResourceDataConsole_load = function FResourceDataConsole_load(data){
   this._loadDatas.push(data);
}
MO.FResourceGroup = function FResourceGroup(o){
   o = MO.Class.inherits(this, o, MO.FResource);
   o._resources = null;
   return o;
}
MO.FResourceObject = function FResourceObject(o){
   o = MO.Class.inherits(this, o, MO.FResource);
   o._typeCode = MO.Class.register(o, new MO.AGetter('_typeCode'));
   return o;
}
MO.FResourcePackage = function FResourcePackage(o){
   o = MO.Class.inherits(this, o, MO.FResource, MO.MPersistenceAble);
   o._uri         = MO.Class.register(o, new MO.AGetSet('_uri'));
   o._url         = MO.Class.register(o, new MO.AGetter('_url'));
   o._statusReady = false;
   o.onLoad       = MO.FResourcePackage_onLoad;
   o.testReady    = MO.FResourcePackage_testReady;
   o.unserialize  = MO.Method.empty;
   o.load         = MO.FResourcePackage_load;
   return o;
}
MO.FResourcePackage_onLoad = function FResourcePackage_onLoad(event){
   var o = this;
   o.unserializeBuffer(event.content, true);
   o._statusReady = true;
}
MO.FResourcePackage_testReady = function FResourcePackage_testReady(){
   return this._statusReady;
}
MO.FResourcePackage_load = function FResourcePackage_load(){
   var o = this;
   var url = o._url = MO.Console.find(MO.FEnvironmentConsole).parseUrl(o._uri);
   var connection = MO.Console.find(MO.FHttpConsole).sendAsync(url);
   connection.addLoadListener(o, o.onLoad);
   return connection;
}
MO.FResourcePipeline = function FResourcePipeline(o){
   o = MO.Class.inherits(this, o, MO.FPipeline);
   o._console    = MO.Class.register(o, new MO.AGetSet('_console'));
   o._compressCd = MO.Class.register(o, new MO.AGetter('_compressCd'));
   o._resource   = MO.Class.register(o, new MO.AGetSet('_resource'));
   o.dispose     = MO.FResourcePipeline_dispose;
   return o;
}
MO.FResourcePipeline_dispose = function FResourcePipeline_dispose(){
   var o = this;
   o._console = null;
   o._resource = null;
   o.__base.FPipeline.dispose.call(o);
}
MO.FResourceSinglePipeline = function FResourceSinglePipeline(o){
   o = MO.Class.inherits(this, o, MO.FResourcePipeline);
   o._startTime  = 0;
   o._statusBusy = false;
   o._data       = 0;
   o._dataLength = 0;
   o._worker     = null;
   o.onComplete  = MO.FResourceSinglePipeline_onComplete;
   o.construct   = MO.FResourceSinglePipeline_construct;
   o.testBusy    = MO.FResourceSinglePipeline_testBusy;
   o.decompress  = MO.FResourceSinglePipeline_decompress;
   o.dispose     = MO.FResourceSinglePipeline_dispose;
   return o;
}
MO.FResourceSinglePipeline_onComplete = function FResourceSinglePipeline_onComplete(buffer){
   var o = this;
   var data = o._data;
   var bufferData = null;
   if(buffer.constructor == Array){
      bufferData = new Uint8Array(buffer);
   }else if(buffer.constructor == ArrayBuffer){
      bufferData = buffer;
   }else{
      throw new MO.TError(o, 'Unknown buffer type.');
   }
   data.completeData(bufferData);
   var span = MO.Timer.now() - o._startTime;
   MO.Logger.info(o, 'Process resource data decompress. (guid={1}, block={2}, length={3}, total={4}, tick={5})', data._guid, data._index, o._dataLength, bufferData.byteLength, span);
   o._console.onPipelineComplete(null, data);
   o._data = null;
   o._statusBusy = false;
}
MO.FResourceSinglePipeline_construct = function FResourceSinglePipeline_construct(){
   var o = this;
   o.__base.FResourcePipeline.construct.call(o);
}
MO.FResourceSinglePipeline_testBusy = function FResourceSinglePipeline_testBusy(){
   return this._statusBusy;
}
MO.FResourceSinglePipeline_decompress = function FResourceSinglePipeline_decompress(data){
   var o = this;
   o._statusBusy = true;
   o._startTime = MO.Timer.current();
   var compressData = data.compressData();
   o._data = data;
   o._dataLength = compressData.byteLength;
   var processData = null;
   if(compressData.constructor == ArrayBuffer){
      processData = new Uint8Array(compressData);
   }else if(compressData.constructor == Uint8Array){
      processData = compressData;
   }else{
      throw new MO.TError(o, 'Unknown data type.');
   }
   LZMAD.decompress(processData, function(buffer){o.onComplete(buffer);}, null);
}
MO.FResourceSinglePipeline_dispose = function FResourceSinglePipeline_dispose(){
   var o = this;
   o._data = null;
   o._worker = null;
   o.__base.FPipeline.dispose.call(o);
}
MO.FResourceSingleStorage = function FResourceSingleStorage(o){
   o = MO.Class.inherits(this, o, MO.FResourceStorage, MO.MResourceData);
   o.construct   = MO.FResourceSingleStorage_construct;
   o.load        = MO.FResourceSingleStorage_load;
   o.complete    = MO.FResourceSingleStorage_complete;
   o.dispose     = MO.FResourceSingleStorage_dispose;
   return o;
}
MO.FResourceSingleStorage_construct = function FResourceSingleStorage_construct(){
   var o = this;
   o.__base.FResourceStorage.construct.call(o);
}
MO.FResourceSingleStorage_load = function FResourceSingleStorage_load(buffer){
   var o = this;
   var resource = o._resource;
   o._compressLength = buffer.byteLength;
   o._compressData = new Uint8Array(buffer);
}
MO.FResourceSingleStorage_complete = function FResourceSingleStorage_complete(){
   var o = this;
   var resource = o._resource;
   resource.onComplete(o._data);
}
MO.FResourceSingleStorage_dispose = function FResourceSingleStorage_dispose(){
   var o = this;
   o.__base.MResourceData.dispose.call(o);
   o.__base.FResourceStorage.dispose.call(o);
}
MO.FResourceStorage = function FResourceStorage(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._ready      = false;
   o._dataLength = 0;
   o._resource   = MO.Class.register(o, new MO.AGetSet('_resource'));
   o.construct   = MO.FResourceStorage_construct;
   o.testReady   = MO.FResourceStorage_testReady;
   o.load        = MO.FResourceStorage_load;
   o.complete    = MO.FResourceStorage_complete;
   o.dispose     = MO.FResourceStorage_dispose;
   return o;
}
MO.FResourceStorage_construct = function FResourceStorage_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.FResourceStorage_testReady = function FResourceStorage_testReady(){
   return this._ready;
}
MO.FResourceStorage_load = function FResourceStorage_load(buffer){
}
MO.FResourceStorage_complete = function FResourceStorage_complete(){
}
MO.FResourceStorage_dispose = function FResourceStorage_dispose(){
   var o = this;
   o._resource = null;
   o.__base.FObject.dispose.call(o);
}
MO.FResourceThreadPipeline = function FResourceThreadPipeline(o){
   o = MO.Class.inherits(this, o, MO.FResourcePipeline);
   o._startTime  = 0;
   o._data       = 0;
   o._dataLength = 0;
   o._worker     = null;
   o.onComplete  = MO.FResourceThreadPipeline_onComplete;
   o.construct   = MO.FResourceThreadPipeline_construct;
   o.worker      = MO.FResourceThreadPipeline_worker;
   o.decompress  = MO.FResourceThreadPipeline_decompress;
   o.dispose     = MO.FResourceThreadPipeline_dispose;
   return o;
}
MO.FResourceThreadPipeline_onComplete = function FResourceThreadPipeline_onComplete(buffer){
   var o = this;
   var bufferData = null;
   if(buffer.constructor == Array){
      bufferData = new Uint8Array(buffer);
   }else if(buffer.constructor == Uint8Array){
      bufferData = buffer;
   }else{
      throw new MO.TError(o, 'Unknown buffer type.');
   }
   var data = o._data;
   data.completeData(bufferData);
   var span = MO.Timer.now() - o._startTime;
   MO.Logger.info(o, 'Process resource data decompress. (guid={1}, block={2}, length={3}, total={4}, tick={5})', data._guid, data._index, o._dataLength, buffer.byteLength, span);
   o._console.onPipelineComplete(o, data);
   o._data = null;
}
MO.FResourceThreadPipeline_construct = function FResourceThreadPipeline_construct(){
   var o = this;
   o.__base.FResourcePipeline.construct.call(o);
}
MO.FResourceThreadPipeline_worker = function FResourceThreadPipeline_worker(){
   var o = this;
   var worker = o._worker;
   if(!worker){
      var uri = MO.RBrowser.contentPath('/ajs/lzma_worker.js');
      worker = o._worker = new LZMA_WORKER(uri);
   }
   return worker;
}
MO.FResourceThreadPipeline_decompress = function FResourceThreadPipeline_decompress(data){
   var o = this;
   o._startTime = MO.Timer.current();
   var compressData = data.compressData();
   o._data = data;
   o._dataLength = compressData.byteLength;
   var worker = o.worker();
   worker.decompress(compressData, function(buffer){o.onComplete(buffer);}, null);
}
MO.FResourceThreadPipeline_dispose = function FResourceThreadPipeline_dispose(){
   var o = this;
   o._data = null;
   o._worker = null;
   o.__base.FPipeline.dispose.call(o);
}
MO.FResourceType = function FResourceType(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._code        = MO.Class.register(o, new MO.AGetSet('_code'));
   o._pipeline    = MO.Class.register(o, new MO.AGetSet('_pipeline'));
   o._resources   = MO.Class.register(o, new MO.AGetter('_resources'));
   o.construct    = MO.FResourceType_construct;
   o.findResource = MO.FResourceType_findResource;
   o.dispose      = MO.FResourceType_dispose;
   return o;
}
MO.FResourceType_construct = function FResourceType_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._resources = new MO.TDictionary();
}
MO.FResourceType_findResource = function FResourceType_findResource(p){
   return this._resources.get(p);
}
MO.FResourceType_dispose = function FResourceType_dispose(){
   var o = this;
   o._resources = MO.Lang.Object.dispose(o._resources);
   o.__base.FObject.dispose.call(o);
}
MO.FEntity = function FEntity(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MReady);
   o._statusReady = false;
   o.testReady    = MO.FEntity_testReady;
   o.processLoad  = MO.Method.emptyTrue;
   return o;
}
MO.FEntity_testReady = function FEntity_testReady(){
   return this._statusReady;
}
MO.FEntityConsole = function FEntityConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd    = MO.EScope.Global;
   o._looperLoad = null;
   o._thread     = null;
   o._interval   = 100;
   o.onProcess   = MO.FEntityConsole_onProcess;
   o.construct   = MO.FEntityConsole_construct;
   o.loadEntity  = MO.FEntityConsole_loadEntity;
   o.dispose     = MO.FEntityConsole_dispose;
   return o;
}
MO.FEntityConsole_onProcess = function FEntityConsole_onProcess(){
   var o = this;
   var looper = o._looperLoad;
   looper.record();
   while(looper.next()){
      var entity = looper.current();
      if(entity.processLoad()){
         looper.removeCurrent();
      }
   }
}
MO.FEntityConsole_construct = function FEntityConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._looperLoad = new MO.TLooper();
   var thread = o._thread = MO.Class.create(MO.FThread);
   thread.setInterval(o._interval);
   thread.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(thread);
}
MO.FEntityConsole_loadEntity = function FEntityConsole_loadEntity(entity){
   this._looperLoad.push(entity);
}
MO.FEntityConsole_dispose = function FEntityConsole_dispose(){
   var o = this;
   o._looperLoad = MO.Lang.Object.dispose(o._looperLoad);
   o.__base.FConsole.dispose.call(o);
}
MO.FE2dCanvas = function FE2dCanvas(o){
   o = MO.Class.inherits(this, o, MO.FCanvas, MO.MCanvasObject, MO.MGraphicObject);
   o._size         = MO.Class.register(o, new MO.AGetter('_size'));
   o._hCanvas      = null;
   o.onResize      = MO.FE2dCanvas_onResize;
   o.construct     = MO.FE2dCanvas_construct;
   o.createContext = MO.FE2dCanvas_createContext;
   o.htmlCanvas    = MO.FE2dCanvas_htmlCanvas;
   o.build         = MO.FE2dCanvas_build;
   o.setPanel      = MO.FE2dCanvas_setPanel;
   o.resize        = MO.FE2dCanvas_resize;
   o.show          = MO.FE2dCanvas_show;
   o.hide          = MO.FE2dCanvas_hide;
   o.setVisible    = MO.FE2dCanvas_setVisible;
   o.reset         = MO.FE2dCanvas_reset;
   o.dispose       = MO.FE2dCanvas_dispose;
   return o;
}
MO.FE2dCanvas_onResize = function FE2dCanvas_onResize(p){
   var o = this;
}
MO.FE2dCanvas_construct = function FE2dCanvas_construct(){
   var o = this;
   o.__base.FCanvas.construct.call(o);
   o._size = new MO.SSize2(1280, 720);
}
MO.FE2dCanvas_createContext = function FE2dCanvas_createContext(){
   return MO.Class.create(MO.FG2dCanvasContext);
}
MO.FE2dCanvas_htmlCanvas = function FE2dCanvas_htmlCanvas(){
   return this._hCanvas;
}
MO.FE2dCanvas_build = function FE2dCanvas_build(hDocument){
   var o = this;
   var size = o._size;
   var width = size.width;
   var height = size.height;
   var hCanvas = o._hCanvas = MO.Window.Builder.create(hDocument, 'CANVAS');
   hCanvas.__linker = o;
   var hStyle = hCanvas.style;
   hStyle.left = '0px';
   hStyle.top = '0px';
   hStyle.width = '100%';
   hStyle.height = '100%';
   var context = o._graphicContext = o.createContext();
   context.linkCanvas(hCanvas);
   o.resize(width, height);
}
MO.FE2dCanvas_setPanel = function FE2dCanvas_setPanel(hPanel){
   var o = this;
   o._hPanel = hPanel;
   hPanel.appendChild(o._hCanvas);
   o.onResize();
}
MO.FE2dCanvas_resize = function FE2dCanvas_resize(width, height){
   var o = this;
   var hCanvas = o._hCanvas;
   hCanvas.width = width;
   hCanvas.height = height;
   o._size.set(width, height);
   o._graphicContext.size().set(width, height);
}
MO.FE2dCanvas_show = function FE2dCanvas_show(){
   this.setVisible(true);
}
MO.FE2dCanvas_hide = function FE2dCanvas_hide(){
   this.setVisible(false);
}
MO.FE2dCanvas_setVisible = function FE2dCanvas_setVisible(visible){
   MO.Window.Html.visibleSet(this._hCanvas, visible);
}
MO.FE2dCanvas_reset = function FE2dCanvas_reset(){
   this._graphicContext.clear();
}
MO.FE2dCanvas_dispose = function FE2dCanvas_dispose(){
   var o = this;
   o._size = MO.Lang.Object.dispose(o._size);
   o._graphicContext = MO.Lang.Object.dispose(o._graphicContext);
   o._hPanel = MO.Window.Html.free(o._hPanel);
   o._hCanvas = MO.Window.Html.free(o._hCanvas);
   o.__base.FCanvas.dispose.call(o);
}
MO.FE2dCanvasConsole = function FE2dCanvasConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd    = MO.EScope.Local;
   o._pools      = null;
   o.construct   = MO.FE2dCanvasConsole_construct;
   o.allocBySize = MO.FE2dCanvasConsole_allocBySize;
   o.free        = MO.FE2dCanvasConsole_free;
   return o;
}
MO.FE2dCanvasConsole_construct = function FE2dCanvasConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._pools = MO.Class.create(MO.FObjectPools);
}
MO.FE2dCanvasConsole_allocBySize = function FE2dCanvasConsole_allocBySize(width, height, clazz){
   var o = this;
   var pools = o._pools;
   var code = width + 'x' + height;
   var canvas = pools.alloc(code);
   if(!canvas){
      canvas = MO.Class.create(MO.Runtime.nvl(clazz, MO.FE2dCanvas));
      canvas.size().set(width, height);
      canvas.build(MO.Window._hDocument);
   }
   canvas.reset();
   return canvas;
}
MO.FE2dCanvasConsole_free = function FE2dCanvasConsole_free(canvas){
   var o = this;
   var pools = o._pools;
   var size = canvas.size();
   var code = size.width + 'x' + size.height;
   pools.free(code, canvas);
}
MO.FE2dDrawable = function FE2dDrawable(o){
   o = MO.Class.inherits(this, o, MO.FDrawable);
   return o;
}
MO.ME3dObject = function ME3dObject(o){
   o = MO.Class.inherits(this, o, MO.MGraphicObject, MO.MAttributeCode);
   o._guid = MO.Class.register(o, new MO.AGetSet('_guid'));
   return o;
}
MO.FE3dCanvas = function FE3dCanvas(o){
   o = MO.Class.inherits(this, o, MO.FCanvas, MO.MGraphicObject, MO.MMouseCapture);
   o._optionAlpha        = true;
   o._optionAntialias    = true;
   o._optionStageProcess = true;
   o._optionResize       = true;
   o._optionMouseCapture = true;
   o._listenerLoad       = MO.Class.register(o, new MO.AListener('_listenerLoad', MO.EEvent.Load));
   o._size               = MO.Class.register(o, new MO.AGetter('_size'));
   o._logicSize          = MO.Class.register(o, new MO.AGetter('_logicSize'));
   o._screenSize         = MO.Class.register(o, new MO.AGetter('_screenSize'));
   o._interval           = 10;
   o._hPanel             = null;
   o._hCanvas            = null;
   o.onEnterFrame        = MO.Method.empty;
   o.ohTouchStart        = MO.FE3dCanvas_ohTouchStart;
   o.ohTouchMove         = MO.FE3dCanvas_ohTouchMove;
   o.ohTouchStop         = MO.FE3dCanvas_ohTouchStop;
   o.onMouseCaptureStart = MO.Method.empty;
   o.onMouseCapture      = MO.Method.empty;
   o.onMouseCaptureStop  = MO.Method.empty;
   o.onTouchStart        = MO.Method.empty;
   o.onTouchMove         = MO.Method.empty;
   o.onTouchStop         = MO.Method.empty;
   o.onResize            = MO.FE3dCanvas_onResize;
   o.construct           = MO.FE3dCanvas_construct;
   o.build               = MO.FE3dCanvas_build;
   o.resize              = MO.FE3dCanvas_resize;
   o.show                = MO.FE3dCanvas_show;
   o.hide                = MO.FE3dCanvas_hide;
   o.setVisible          = MO.FE3dCanvas_setVisible;
   o.setPanel            = MO.FE3dCanvas_setPanel;
   o.dispose             = MO.FE3dCanvas_dispose;
   return o;
}
MO.FE3dCanvas_ohTouchStart = function FE3dCanvas_ohTouchStart(event){
   this.__linker.onTouchStart(event);
}
MO.FE3dCanvas_ohTouchMove = function FE3dCanvas_ohTouchMove(event){
   this.__linker.onTouchMove(event);
}
MO.FE3dCanvas_ohTouchStop = function FE3dCanvas_ohTouchStop(event){
   this.__linker.onTouchStop(event);
}
MO.FE3dCanvas_onResize = function FE3dCanvas_onResize(event){
   this.resize();
}
MO.FE3dCanvas_construct = function FE3dCanvas_construct(){
   var o = this;
   o.__base.FCanvas.construct.call(o);
   o._size = new MO.SSize2(1280, 720);
   o._logicSize = new MO.SSize2(1280, 720);
   o._screenSize = new MO.SSize2(1280, 720);
}
MO.FE3dCanvas_build = function FE3dCanvas_build(hPanel){
   var o = this;
   var size = o._size;
   var width = size.width;
   var height = size.height;
   var hCanvas = o._hCanvas = MO.RBuilder.create(hPanel, 'CANVAS');
   hCanvas.__linker = o;
   hCanvas.width = width;
   hCanvas.height = height;
   var hStyle = hCanvas.style;
   hStyle.left = '0px';
   hStyle.top = '0px';
   hStyle.width = '100%';
   hStyle.height = '100%';
   if(!MO.Method.isEmpty(o.onTouchStart)){
      hCanvas.addEventListener('touchstart', o.ohTouchStart, false);
   }
   if(!MO.Method.isEmpty(o.onTouchMove)){
      hCanvas.addEventListener('touchmove', o.ohTouchMove, false);
   }
   if(!MO.Method.isEmpty(o.onTouchStop)){
      hCanvas.addEventListener('touchend', o.ohTouchStop, false);
   }
   var parameters = new Object();
   parameters.alpha = o._optionAlpha;
   parameters.antialias = o._optionAntialias;
   o._graphicContext = MO.Graphic.Context3d.createContext(MO.FWglContext, hCanvas, parameters);
   if(o._optionStageProcess){
      RStage.lsnsEnterFrame.register(o, o.onEnterFrame);
      RStage.start(o._interval);
   }
   if(o._optionResize){
      MO.Window.lsnsResize.register(o, o.onResize);
      MO.Window.lsnsOrientation.register(o, o.onResize);
   }
   if(o._optionMouseCapture){
      MO.Console.find(MO.FMouseConsole).register(o);
   }
}
MO.FE3dCanvas_resize = function FE3dCanvas_resize(sourceWidth, sourceHeight){
   var o = this;
   if(!sourceWidth || !sourceHeight){
      throw new MO.TError(o, 'Invalid canvas size.');
   }
   o._screenSize.set(sourceWidth, sourceHeight);
   var width = parseInt(sourceWidth);
   var height = parseInt(sourceHeight);
   var hCanvas = o._hCanvas;
   hCanvas.width = width;
   hCanvas.height = height;
   o._size.set(width, height);
   var context = o._graphicContext;
   context.setViewport(0, 0, width, height);
}
MO.FE3dCanvas_show = function FE3dCanvas_show(){
   this.setVisible(true);
}
MO.FE3dCanvas_hide = function FE3dCanvas_hide(){
   this.setVisible(false);
}
MO.FE3dCanvas_setVisible = function FE3dCanvas_setVisible(visible){
   MO.Window.Html.visibleSet(this._hCanvas, visible);
}
MO.FE3dCanvas_setPanel = function FE3dCanvas_setPanel(hPanel){
   var o = this;
   hPanel.appendChild(o._hCanvas);
   o._hPanel = hPanel;
   o.resize();
}
MO.FE3dCanvas_dispose = function FE3dCanvas_dispose(){
   var o = this;
   var h = o._hCanvas;
   if(h){
      h.__linker = null;
      h.removeEventListener('touchstart', o.ohTouchStart);
      h.removeEventListener('touchmove', o.ohTouchMove);
      h.removeEventListener('touchend', o.ohTouchStop);
   }
   o._graphicContext = MO.Lang.Object.dispose(o._graphicContext);
   o._size = MO.Lang.Object.dispose(o._size);
   o._screenSize = MO.Lang.Object.dispose(o._screenSize);
   o._logicSize = MO.Lang.Object.dispose(o._logicSize);
   o._hPanel = MO.Window.Html.free(o._hPanel);
   o._hCanvas = MO.Window.Html.free(o._hCanvas);
   o.__base.FCanvas.dispose.call(o);
}
MO.FE3dDisplay = function FE3dDisplay(o){
   o = MO.Class.inherits(this, o, MO.FDisplay);
   o._outline         = MO.Class.register(o, new MO.AGetter('_outline'));
   o._materials       = MO.Class.register(o, new MO.AGetter('_materials'));
   o.construct        = MO.FE3dDisplay_construct;
   o.calculateOutline = MO.FE3dDisplay_calculateOutline;
   o.dispose          = MO.FE3dDisplay_dispose;
   return o;
}
MO.FE3dDisplay_construct = function FE3dDisplay_construct(){
   var o = this;
   o.__base.FDisplay.construct.call(o);
   o._outline = new MO.SOutline3d();
}
MO.FE3dDisplay_calculateOutline = function FE3dDisplay_calculateOutline(){
   return this._outline;
}
MO.FE3dDisplay_dispose = function FE3dDisplay_dispose(){
   var o = this;
   o._materials = MO.Lang.Object.free(o._materials);
   o.__base.FDisplay.dispose.call(o);
}
MO.FE3dDisplayContainer = function FE3dDisplayContainer(o){
   o = MO.Class.inherits(this, o, MO.FDisplayContainer);
   o._outline         = null;
   o._materials       = MO.Class.register(o, new MO.AGetter('_materials'));
   o.construct        = MO.FE3dDisplayContainer_construct;
   o.calculateOutline = MO.FE3dDisplayContainer_calculateOutline;
   o.dispose          = MO.FE3dDisplayContainer_dispose;
   return o;
}
MO.FE3dDisplayContainer_construct = function FE3dDisplayContainer_construct(){
   var o = this;
   o.__base.FDisplayContainer.construct.call(o);
   o._outline = new MO.SOutline3d();
}
MO.FE3dDisplayContainer_calculateOutline = function FE3dDisplayContainer_calculateOutline(){
   var o = this;
   var outline = o._outline;
   if(outline.isEmpty()){
      outline.setMin();
      var renderables = o._renderables;
      if(renderables){
         var count = renderables.count();
         for(var i = 0; i < count; i++){
            var renderable = renderables.at(i);
            var renderableOutline = renderable.calculateOutline()
            outline.mergeMax(renderableOutline);
         }
      }
   }
   return outline;
}
MO.FE3dDisplayContainer_dispose = function FE3dDisplayContainer_dispose(){
   var o = this;
   o._materials = MO.Lang.Object.dispose(o._materials);
   o.__base.FDisplayContainer.dispose.call(o);
}
MO.FE3dRenderable = function FE3dRenderable(o){
   o = MO.Class.inherits(this, o, MO.FRenderable, MO.MG3dRenderable, MO.MGraphicObject, MO.MLinkerResource);
   o._display           = MO.Class.register(o, new MO.AGetSet('_display'));
   o._outline           = null;
   o._outlineVisible    = true;
   o._calculateMatrix   = null;
   o._vertexCount       = MO.Class.register(o, new MO.AGetSet('_vertexCount'));
   o._vertexBuffers     = MO.Class.register(o, new MO.AGetter('_vertexBuffers'));
   o._indexBuffers      = MO.Class.register(o, new MO.AGetter('_indexBuffers'));
   o._materialReference = MO.Class.register(o, new MO.AGetSet('_materialReference'));
   o._materials         = MO.Class.register(o, new MO.AGetter('_materials'));
   o._bones             = MO.Class.register(o, new MO.AGetter('_bones'));
   o._textures          = MO.Class.register(o, new MO.AGetter('_textures'));
   o.construct          = MO.FE3dRenderable_construct;
   o.setup              = MO.Method.empty;
   o.testReady          = MO.Method.emptyTrue;
   o.testVisible        = MO.FE3dRenderable_testVisible;
   o.findVertexBuffer   = MO.FE3dRenderable_findVertexBuffer;
   o.pushVertexBuffer   = MO.FE3dRenderable_pushVertexBuffer;
   o.pushIndexBuffer    = MO.FE3dRenderable_pushIndexBuffer;
   o.pushMaterial       = MO.FE3dRenderable_pushMaterial;
   o.findTexture        = MO.FE3dRenderable_findTexture;
   o.pushTexture        = MO.FE3dRenderable_pushTexture;
   o.processDelay       = MO.Method.empty;
   o.update             = MO.FE3dRenderable_update;
   o.remove             = MO.FE3dRenderable_remove;
   return o;
}
MO.FE3dRenderable_construct = function FE3dRenderable_construct(){
   var o = this;
   o.__base.FRenderable.construct.call(o);
   o.__base.MG3dRenderable.construct.call(o);
   o._outline = new MO.SOutline3d();
   o._calculateMatrix = new MO.SMatrix3d();
   o._vertexBuffers = new MO.TDictionary();
   o._materialReference = o;
}
MO.FE3dRenderable_testVisible = function FE3dRenderable_testVisible(){
   var o = this;
   var ready = o.testReady();
   if(!ready){
      return false;
   }
   var visible = o.__base.FRenderable.testVisible.call(o);
   if(!visible){
      return false;
   }
   if(!o._outlineVisible){
      return false;
   }
   var material = o._material;
   if(material){
      if(!material.testVisible()){
         return false;
      }
   }
   return true;
}
MO.FE3dRenderable_findVertexBuffer = function FE3dRenderable_findVertexBuffer(code){
   return this._vertexBuffers.get(code);
}
MO.FE3dRenderable_pushVertexBuffer = function FE3dRenderable_pushVertexBuffer(buffer){
   var o = this;
   var code = buffer.code();
   if(MO.Lang.String.isEmpty(code)){
      throw new MO.TError('Buffer code is empty.');
   }
   var buffers = o._vertexBuffers;
   if(!buffers){
      buffers =  o._vertexBuffers = new MO.TDictionary();
   }
   buffers.set(code, buffer);
}
MO.FE3dRenderable_pushIndexBuffer = function FE3dRenderable_pushIndexBuffer(buffer){
   var o = this;
   var buffers = o._indexBuffers;
   if(!buffers){
      buffers =  o._indexBuffers = new MO.TObjects();
   }
   buffers.push(buffer);
}
MO.FE3dRenderable_pushMaterial = function FE3dRenderable_pushMaterial(material){
   var o = this;
   var materials = o._materials;
   if(!materials){
      materials = o._materials = new MO.TObjects();
   }
   materials.push(material);
}
MO.FE3dRenderable_findTexture = function FE3dRenderable_findTexture(name){
   return this._textures.get(name);
}
MO.FE3dRenderable_pushTexture = function FE3dRenderable_pushTexture(texture, code){
   var o = this;
   var textures = o._textures;
   if(!textures){
      textures = o._textures = new MO.TDictionary();
   }
   if(code){
      textures.set(code, texture);
   }else if(texture._name){
      textures.set(texture._name, texture);
   }else{
      textures.set(texture.code(), texture);
   }
}
MO.FE3dRenderable_update = function FE3dRenderable_update(region){
   var o = this;
   var calculateMatrix = o._calculateMatrix;
   calculateMatrix.assign(o._matrix);
   var drawable = o._drawable;
   if(drawable){
      calculateMatrix.append(drawable.currentMatrix());
   }
   var display = o._display;
   if(display){
      calculateMatrix.append(display.currentMatrix());
   }
   var changed = o._currentMatrix.attachData(calculateMatrix.data());
   if(changed && region){
      region.change();
   }
}
MO.FE3dRenderable_remove = function FE3dRenderable_remove(){
   var o = this;
   var display = o._display;
   if(display){
      display.removeRenderable(o);
      o._display = null;
   }
}
MO.FE3dStage = function FE3dStage(o){
   o = MO.Class.inherits(this, o, MO.FStage, MO.MGraphicObject);
   o._statistics        = MO.Class.register(o, new MO.AGetter('_statistics'));
   o._technique         = MO.Class.register(o, new MO.AGetter('_technique'));
   o._region            = MO.Class.register(o, new MO.AGetter('_region'));
   o._allDisplays       = null;
   o.onProcess          = MO.FE3dStage_onProcess;
   o.construct          = MO.FE3dStage_construct;
   o.createRegion       = MO.FE3dStage_createRegion;
   o.linkGraphicContext = MO.FE3dStage_linkGraphicContext;
   o.setup              = MO.FE3dStage_setup;
   o.camera             = MO.FE3dStage_camera;
   o.projection         = MO.FE3dStage_projection;
   o.directionalLight   = MO.FE3dStage_directionalLight;
   o.selectTechnique    = MO.FE3dStage_selectTechnique;
   o.filterDisplays     = MO.FE3dStage_filterDisplays;
   o.allDisplays        = MO.FE3dStage_allDisplays;
   return o;
}
MO.FE3dStage_onProcess = function FE3dStage_onProcess(){
   var o = this;
   var region = o._region;
   if(!region){
      return;
   }
   var technique = o._technique;
   if(!technique){
      return;
   }
   var context = technique._graphicContext;
   var statistics = region._statistics = o._statistics;
   statistics.resetFrame();
   statistics._frame.begin();
   statistics._frameProcess.begin();
   context.prepare();
   technique.updateRegion(region);
   region.prepare();
   region.change();
   var layers = o._layers;
   var layerCount = layers.count();
   for(var i = 0; i < layerCount; i++){
      var layer = layers.at(i);
      region.reset();
      layer.process(region);
      layer.filterRenderables(region);
      region.update();
   }
   MO.Console.find(MO.FE3dStageConsole).process(region);
   statistics._frameProcess.end();
   statistics._frameDraw.begin();
   if(region.isChanged()){
      technique.drawStage(o, region);
   }
   statistics._frameDraw.end();
   statistics._frame.end();
}
MO.FE3dStage_construct = function FE3dStage_construct(){
   var o = this;
   o.__base.FStage.construct.call(o);
   o._statistics = MO.Class.create(MO.FE3dStageStatistics);
   MO.Console.find(MO.FStatisticsConsole).register('engine.stage', o._statistics);
   o._allDisplays = new MO.TObjects();
   var region = o._region = o.createRegion();
   region._timer = o._timer;
}
MO.FE3dStage_createRegion = function FE3dStage_createRegion(){
   return MO.Class.create(MO.FE3dRegion);
}
MO.FE3dStage_linkGraphicContext = function FE3dStage_linkGraphicContext(context){
   var o = this;
   o.__base.MGraphicObject.linkGraphicContext.call(o, context);
   var region = o._region;
   if(region){
      region.linkGraphicContext(context);
   }
}
MO.FE3dStage_setup = function FE3dStage_setup(){
   var o = this;
   o.__base.FStage.construct.call(o);
   o._region.linkGraphicContext(o);
   o._region.setup();
}
MO.FE3dStage_camera = function FE3dStage_camera(){
   return this._region.camera();
}
MO.FE3dStage_projection = function FE3dStage_projection(){
   return this._region.camera().projection();
}
MO.FE3dStage_directionalLight = function FE3dStage_directionalLight(){
   return this._region.directionalLight();
}
MO.FE3dStage_selectTechnique = function FE3dStage_selectTechnique(context, clazz){
   var o = this;
   var techniqueConsole = MO.Console.find(MO.FG3dTechniqueConsole);
   var technique = o._technique = techniqueConsole.find(context, clazz);
   return technique;
}
MO.FE3dStage_filterDisplays = function FE3dStage_filterDisplays(displays){
   var o = this;
   var layers = o._layers;
   var count = layers.count();
   for(var i = 0; i < count; i++){
      var layer = layers.at(i);
      layer.filterDisplays(displays);
   }
}
MO.FE3dStage_allDisplays = function FE3dStage_allDisplays(){
   var o = this;
   var displays = o._allDisplays;
   displays.clear();
   o.filterDisplays(displays);
   return displays;
}
MO.FE3dStageConsole = function FE3dStageConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd  = MO.EScope.Local;
   o._looper   = null;
   o._thread   = null;
   o._interval = 25;
   o._limit    = 8;
   o.onProcess = MO.FE3dStageConsole_onProcess;
   o.construct = MO.FE3dStageConsole_construct;
   o.process   = MO.FE3dStageConsole_process;
   return o;
}
MO.FE3dStageConsole_onProcess = function FE3dStageConsole_onProcess(){
   var o = this;
   var looper = o._looper;
   looper.record();
   for(var i = o._limit - 1; i >= 0; i--){
      var renderable = looper.next();
      if(renderable){
         renderable.processDelay(renderable._linkRegion);
      }else{
         break;
      }
   }
}
MO.FE3dStageConsole_construct = function FE3dStageConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._looper = new MO.TLooper();
   o._renderables = new MO.TDictionary();
   var thread = o._thread = MO.Class.create(MO.FThread);
   thread.setInterval(o._interval);
   thread.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(thread);
}
MO.FE3dStageConsole_process = function FE3dStageConsole_process(region){
   var o = this;
   var renderables = region.allRenderables();
   for(var i = renderables.count() - 1; i >= 0; i--){
      var renderable = renderables.at(i);
      if(!renderable._linkStageLooper){
         renderable._linkRegion = region;
         renderable._linkStageLooper = o._looper;
         o._looper.push(renderable);
      }
   }
}
MO.FE3dStageStatistics = function FE3dStageStatistics(o){
   o = MO.Class.inherits(this, o, MO.FStatistics);
   o._frame               = null;
   o._frameProcess        = null;
   o._frameDraw           = null;
   o._frameDrawSort       = null;
   o._frameDrawRenderable = null;
   o.construct            = MO.FE3dStageStatistics_construct;
   o.reset                = MO.FE3dStageStatistics_reset;
   o.resetFrame           = MO.FE3dStageStatistics_resetFrame;
   return o;
}
MO.FE3dStageStatistics_construct = function FE3dStageStatistics_construct(){
   var o = this;
   o.__base.FStatistics.construct.call(o);
   o._frame = new MO.TSpeed();
   o._frameProcess = new MO.TSpeed();
   o._frameDraw = new MO.TSpeed();
   o._frameDrawSort = new MO.TSpeed();
   o._frameDrawRenderable = new MO.TSpeed();
}
MO.FE3dStageStatistics_reset = function FE3dStageStatistics_reset(){
}
MO.FE3dStageStatistics_resetFrame = function FE3dStageStatistics_resetFrame(){
   var o = this;
   o._frame.reset();
   o._frameProcess.reset();
   o._frameDraw.reset();
   o._frameDrawSort.reset();
   o._frameDrawRenderable.reset();
}
MO.FE3dTechnique = function FE3dTechnique(o){
   o = MO.Class.inherits(this, o, MO.FG3dTechnique, MO.MLinkerResource);
   o.drawStage = MO.FE3dTechnique_drawStage;
   return o;
}
MO.FE3dTechnique_drawStage = function FE3dTechnique_drawStage(stage, region){
   var o = this;
   var layers = stage.layers();
   var layerCount = layers.count();
   region.setTechnique(o);
   var passes = o._passes;
   var count = passes.count();
   for(var passIndex = 0; passIndex < count; passIndex++){
      var pass = passes.at(passIndex);
      pass.drawBegin(region);
      for(var layerIndex = 0; layerIndex < layerCount; layerIndex++){
         var layer = layers.at(layerIndex);
         var layerTechnique = layer.technique();
         if(!layerTechnique){
            layerTechnique = o;
         }
         region.reset();
         region.renderables().assign(layer.visibleRenderables());
         if(layer.optionClearDepth()){
            layerTechnique.clearDepth();
         }
         region.setTechniquePass(pass, (passIndex == count - 1));
         pass.drawRegion(region);
      }
      pass.drawEnd(region);
   }
   o.present(region);
}
MO.RE3dEngine = function RE3dEngine(){
   var o = this;
   o._setuped = false;
   return o;
}
MO.RE3dEngine.prototype.onSetup = function RE3dEngine_onSetup(){
   var effectConsole = MO.Console.find(MO.FG3dEffectConsole);
   effectConsole.register('select.select.flat', MO.FG3dSelectAutomaticEffect);
   effectConsole.register('select.select.control', MO.FG3dSelectAutomaticEffect);
   effectConsole.register('select.select.automatic', MO.FG3dSelectAutomaticEffect);
   effectConsole.register('select.select.skeleton', MO.FG3dSelectSkeletonEffect);
   effectConsole.register('select.select.skeleton.4', MO.FG3dSelectSkeletonEffect);
   effectConsole.register('control.control.automatic', MO.FE3dControlAutomaticEffect);
   effectConsole.register('control.control.control', MO.FE3dControlAutomaticEffect);
   effectConsole.register('general.color.control', MO.FE3dControlAutomaticEffect);
   effectConsole.register('general.color.flat', MO.FE3dGeneralColorFlatEffect);
   effectConsole.register('general.color.fill', MO.FE3dGeneralColorFillEffect);
   effectConsole.register('general.color.automatic', MO.FE3dGeneralColorAutomaticEffect);
   effectConsole.register('general.color.skin', MO.FE3dGeneralColorAutomaticEffect);
   effectConsole.register('general.color.parallax', MO.FE3dGeneralColorAutomaticEffect);
   effectConsole.register('general.color.video', MO.FE3dGeneralColorVideoEffect);
   effectConsole.register('general.color.video.mask', MO.FE3dGeneralColorVideoMaskEffect);
   effectConsole.register('general.color.skeleton', MO.FE3dGeneralColorSkeletonEffect);
   effectConsole.register('general.color.skeleton.4', MO.FE3dGeneralColorSkeletonEffect);
   effectConsole.register('general.color.fur.skeleton', MO.FE3dGeneralColorSkeletonEffect);
   effectConsole.register('general.color.fur.skeleton.4', MO.FE3dGeneralColorSkeletonEffect);
   effectConsole.register('shadow.depth.automatic', MO.FE3dShadowDepthAutomaticEffect);
   effectConsole.register('shadow.depth.skeleton', MO.FE3dShadowDepthSkeletonEffect);
   effectConsole.register('shadow.color.automatic', MO.FE3dShadowColorAutomaticEffect);
   effectConsole.register('shadow.color.skeleton', MO.FE3dShadowColorSkeletonEffect);
}
MO.RE3dEngine.prototype.setup = function RE3dEngine_setup(){
   var o = this;
   if(!o._setuped){
      o.onSetup();
      o._setuped = true;
   }
}
MO.RE3dEngine = new MO.RE3dEngine();
MO.EE3sResource = new function EE3sResource(){
   var o = this;
   o.Unknown  = 'Unknown';
   o.Bitmap   = 'Bitmap';
   o.Material = 'Material';
   o.Mesh     = 'Mesh';
   o.Model    = 'Model';
   o.Template = 'Template';
   o.Scene    = 'Scene';
   o.Project  = 'Project';
   o.All      = 'All';
   return o;
}
MO.ME3sGeometry = function ME3sGeometry(o){
   o = MO.Class.inherits(this, o);
   o._outline         = MO.Class.register(o, new MO.AGetter('_outline'));
   o._streams         = MO.Class.register(o, new MO.AGetter('_streams'));
   o.construct        = MO.ME3sGeometry_construct;
   o.findStream       = MO.ME3sGeometry_findStream;
   o.calculateOutline = MO.ME3sGeometry_calculateOutline;
   o.dispose          = MO.ME3sGeometry_dispose;
   return o;
}
MO.ME3sGeometry_construct = function ME3sGeometry_construct(){
   var o = this;
   o._outline = new MO.SOutline3d();
}
MO.ME3sGeometry_findStream = function ME3sGeometry_findStream(code){
   var o = this;
   var streams = o._streams;
   var count = streams.count();
   for(n = 0; n < count; n++){
      var stream = streams.getAt(n);
      if(stream.code() == code){
         return stream;
      }
   }
   return null;
}
MO.ME3sGeometry_calculateOutline = function ME3sGeometry_calculateOutline(){
   var o = this;
   var outline = o._outline;
   if(outline.isEmpty()){
      outline.setMin();
      var stream = o.findStream('position');
      var dataCount = stream.dataCount();
      var data = new Float32Array(stream.data())
      var index = 0;
      for(var i = 0; i < dataCount; i++){
         var x = data[index++];
         var y = data[index++];
         var z = data[index++];
         outline.mergePoint(x, y, z);
      }
      outline.update();
   }
   return outline;
}
MO.ME3sGeometry_dispose = function ME3sGeometry_dispose(){
   var o = this;
   o._outline = MO.Lang.Object.dispose(o._outline);
   o.__base.FE3sSpace.dispose.call(o);
}
MO.SE3sCompressEvent = function SE3sCompressEvent(w, f, d){
   var o = this;
   o.owner   = w;
   o.process = f;
   o.data    = d;
   return o;
}
MO.SE3sMaterialInfo = function SE3sMaterialInfo(){
   var o = this;
   MO.SG3dMaterialInfo.call(o);
   o.unserialize = MO.SE3sMaterialInfo_unserialize;
   o.saveConfig  = MO.SE3sMaterialInfo_saveConfig;
   return o;
}
MO.SE3sMaterialInfo_unserialize = function SE3sMaterialInfo_unserialize(input){
   var o = this;
   o.effectCode = input.readString();
   o.optionDepth = input.readBoolean();
   o.optionDouble = input.readBoolean();
   o.optionNormalInvert = input.readBoolean();
   o.optionShadow = input.readBoolean();
   o.optionShadowSelf = input.readBoolean();
   o.optionAlpha = input.readBoolean();
   o.alphaBase = input.readFloat();
   o.alphaRate = input.readFloat();
   o.optionColor = input.readBoolean();
   o.colorMin = input.readFloat();
   o.colorMax = input.readFloat();
   o.colorBalance = input.readFloat();
   o.colorRate = input.readFloat();
   o.optionVertex = input.readBoolean();
   o.vertexColor.unserialize(input);
   o.optionAmbient = input.readBoolean();
   o.ambientColor.unserialize(input);
   o.optionDiffuse = input.readBoolean();
   o.diffuseColor.unserialize(input);
   o.optionDiffuseView = input.readBoolean();
   o.diffuseViewColor.unserialize(input);
   o.optionSpecular = input.readBoolean();
   o.specularColor.unserialize(input);
   o.specularBase = input.readFloat();
   o.specularLevel = input.readFloat();
   o.optionSpecularView = input.readBoolean();
   o.specularViewColor.unserialize(input);
   o.specularViewBase = input.readFloat();
   o.specularViewLevel = input.readFloat();
   o.optionReflect = input.readBoolean();
   o.reflectColor.unserialize(input);
   o.reflectMerge = input.readFloat();
   o.optionRefract = input.readBoolean();
   o.refractFrontColor.unserialize(input);
   o.refractBackColor.unserialize(input);
   o.optionOpacity = input.readBoolean();
   o.opacityColor.unserialize(input);
   o.opacityRate = input.readFloat();
   o.opacityAlpha = input.readFloat();
   o.opacityDepth = input.readFloat();
   o.opacityTransmittance = input.readFloat();
   o.optionEmissive = input.readBoolean();
   o.emissiveColor.unserialize(input);
}
MO.SE3sMaterialInfo_saveConfig = function SE3sMaterialInfo_saveConfig(xconfig){
   var o = this;
   xconfig.set('effect_code', o.effectCode);
   xconfig.setBoolean('option_double', o.optionDouble);
   xconfig.setBoolean('option_alpha', o.optionAlpha);
   xconfig.setBoolean('option_normal_invert', o.optionNormalInvert);
   xconfig.setBoolean('option_shadow', o.optionShadow);
   xconfig.setBoolean('option_shadow_self', o.optionShadowSelf);
   var x = xconfig.create('Alpha');
   x.setBoolean('valid', o.optionAlpha);
   x.setFloat('base', o.alphaBase);
   x.setFloat('rate', o.alphaRate);
   var x = xconfig.create('Color');
   x.setBoolean('valid', o.optionColor);
   x.setFloat('min', o.colorMin);
   x.setFloat('max', o.colorMax);
   x.setFloat('balance', o.colorBalance);
   x.setFloat('rate', o.colorRate);
   var x = xconfig.create('Vertex')
   x.setBoolean('valid', o.optionVertex);
   o.vertexColor.savePower(x);
   var x = xconfig.create('Ambient')
   x.setBoolean('valid', o.optionAmbient);
   o.ambientColor.savePower(x);
   var x = xconfig.create('Diffuse');
   x.setBoolean('valid', o.optionDiffuse);
   o.diffuseColor.savePower(x);
   var x = xconfig.create('DiffuseView');
   x.setBoolean('valid', o.optionDiffuseView);
   o.diffuseViewColor.savePower(x);
   var x = xconfig.create('Specular');
   x.setBoolean('valid', o.optionSpecular);
   o.specularColor.savePower(x);
   x.setFloat('base', o.specularBase);
   x.setFloat('level', o.specularLevel);
   var x = xconfig.create('SpecularView');
   x.setBoolean('valid', o.optionSpecularView);
   o.specularViewColor.savePower(x);
   x.setFloat('base', o.specularViewBase);
   x.setFloat('level', o.specularViewLevel);
   var x = xconfig.create('Reflect');
   x.setBoolean('valid', o.optionReflect);
   o.reflectColor.savePower(x);
   x.setFloat('merge', o.reflectMerge);
   var x = xconfig.create('Refract')
   x.setBoolean('valid', o.optionRefract);
   o.refractFrontColor.savePower(x.create('Front'));
   o.refractBackColor.savePower(x.create('Back'));
   var x = xconfig.create('Opacity')
   x.setBoolean('valid', o.optionOpacity);
   o.opacityColor.savePower(x);
   x.setFloat('rate', o.opacityRate);
   x.setFloat('alpha', o.opacityAlpha);
   x.setFloat('depth', o.opacityDepth);
   x.setFloat('transmittance', o.opacityTransmittance);
   var x = xconfig.create('Emissive')
   x.setBoolean('valid', o.optionEmissive);
   o.emissiveColor.savePower(x);
}
MO.SE3sSceneShadow = function SE3sSceneShadow(){
   var o = this;
   o.base        = null;
   o.rate        = null;
   o.level       = null;
   o.range       = null;
   o.unserialize = MO.SE3sSceneShadow_unserialize;
   return o;
}
MO.SE3sSceneShadow_unserialize = function SE3sSceneShadow_unserialize(input){
   var o = this;
   o.base = input.readFloat();
   o.rate = input.readFloat();
   o.level = input.readFloat();
   o.range = input.readFloat();
}
MO.FE3sAnimation = function FE3sAnimation(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._model           = null;
   o._skeletonGuid    = MO.Class.register(o, new MO.AGetter('_skeletonGuid'));
   o._skeleton        = null;
   o._frameCount      = MO.Class.register(o, new MO.AGetter('_frameCount'), 0);
   o._frameTick       = MO.Class.register(o, new MO.AGetter('_frameTick'), 0);
   o._frameSpan       = MO.Class.register(o, new MO.AGetter('_frameSpan'), 0);
   o._frameTranslates = null;
   o._frameRotations  = null;
   o._frameScales     = null;
   o._tracks          = MO.Class.register(o, new MO.AGetter('_tracks'));
   o.skeleton         = MO.FE3sAnimation_skeleton;
   o.tracks           = MO.FE3sAnimation_tracks;
   o.unserialize      = MO.FE3sAnimation_unserialize;
   return o;
}
MO.FE3sAnimation_skeleton = function FE3sAnimation_skeleton(){
   var o = this;
   var skeleton = o._skeleton;
   if(!skeleton){
      var guid = o._skeletonGuid;
      if(guid){
         skeleton = o._skeleton = MO.Console.find(MO.FE3sModelConsole).findSkeleton(guid);
      }
   }
   return skeleton;
}
MO.FE3sAnimation_unserialize = function FE3sAnimation_unserialize(input){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, input)
   o._skeletonGuid = input.readString();
   o._frameCount = input.readUint16();
   o._frameTick = input.readUint16();
   o._frameSpan = input.readUint32();
   var translateCount = input.readUint32();
   var translateBytes = MO.Lang.Integer.strideByte(translateCount);
   if(translateCount > 0){
      var translates = o._frameTranslates = new MO.TObjects();
      for(var i = 0; i < translateCount; i++){
         var translate = new MO.SPoint3();
         translate.unserialize(input);
         translates.push(translate);
      }
   }
   var rotationCount = input.readUint32();
   var rotationBytes = MO.Lang.Integer.strideByte(rotationCount);
   if(rotationCount > 0){
      var rotations = o._frameRotations = new MO.TObjects();
      for(var i = 0; i < rotationCount; i++){
         var rotation = new MO.SQuaternion();
         rotation.unserialize(input);
         rotations.push(rotation);
      }
   }
   var scaleCount = input.readUint32();
   var scaleBytes = MO.Lang.Integer.strideByte(scaleCount);
   if(scaleCount > 0){
      var scales = o._frameScales = new MO.TObjects();
      for(var i = 0; i < scaleCount; i++){
         var scale = new MO.SVector3();
         scale.unserialize(input);
         scales.push(scale);
      }
   }
   var tracks = null;
   var trackCount = input.readUint16();
   if(trackCount > 0){
      tracks = o._tracks = new MO.TObjects();
      for(var n = 0; n < trackCount; n++){
         var track = MO.Class.create(MO.FE3sTrack);
         track.unserialize(input);
         tracks.push(track);
         var frameCount = track._frameCount;
         var frames = track._frames;
         for(var i = 0; i < frameCount; i++){
            var frame = MO.Class.create(MO.FE3sFrame);
            var translateIndex = 0;
            if(translateBytes == 4){
               translateIndex = input.readUint32();
            }else if(translateBytes == 2){
               translateIndex = input.readUint16();
            }else{
               translateIndex = input.readUint8();
            }
            frame._translation = translates.at(translateIndex);
            var rotationIndex = 0;
            if(rotationBytes == 4){
               rotationIndex = input.readUint32();
            }else if(rotationBytes == 2){
               rotationIndex = input.readUint16();
            }else{
               rotationIndex = input.readUint8();
            }
            frame._quaternion = rotations.at(rotationIndex);
            var scaleIndex = 0;
            if(scaleBytes == 4){
               scaleIndex = input.readUint32();
            }else if(scaleBytes == 2){
               scaleIndex = input.readUint16();
            }else{
               scaleIndex = input.readUint8();
            }
            frame._scale = scales.at(scaleIndex);
            frames.push(frame);
         }
      }
   }
   if(tracks && o._skeletonGuid){
      var skeleton = o.skeleton();
      for(var i = 0; i < trackCount; i++){
         var track = tracks.at(i);
         var boneIndex = track.boneIndex();
         var bone = skeleton.findBone(boneIndex);
         bone.setTrack(track);
      }
      skeleton.pushAnimation(o);
   }
}
MO.FE3sBone = function FE3sBone(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._index      = MO.Class.register(o, new MO.AGetter('_index'));
   o._track      = MO.Class.register(o, new MO.AGetSet('_track'));
   o._bones      = MO.Class.register(o, new MO.AGetter('_bones'));
   o.unserialize = MO.FE3sBone_unserialize;
   return o;
}
MO.FE3sBone_unserialize = function FE3sBone_unserialize(input){
   var o = this;
   o._index = input.readUint8();
   var count = input.readUint8();
   if(count > 0){
      var bones = o._bones = new MO.TObjects();
      for(var i = 0; i < count; i++){
         var bone = MO.Class.create(MO.FE3sBone);
         bone.unserialize(input);
         bones.push(bone);
      }
   }
}
MO.FE3sBoneRefer = function FE3sBoneRefer(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._index      = MO.Class.register(o, new MO.AGetter('_index'));
   o._bone       = MO.Class.register(o, new MO.AGetSet('_bone'));
   o._track      = MO.Class.register(o, new MO.AGetSet('_track'));
   o.unserialize = MO.FE3sBoneRefer_unserialize;
   return o;
}
MO.FE3sBoneRefer_unserialize = function FE3sBoneRefer_unserialize(input){
   var o = this;
   o._index = input.readUint8();
}
MO.FE3sCamera = function FE3sCamera(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._typeCd     = MO.Class.register(o, new MO.AGetter('_typeCd'));
   o._position   = MO.Class.register(o, new MO.AGetter('_position'));
   o._direction  = MO.Class.register(o, new MO.AGetter('_direction'));
   o._projection = MO.Class.register(o, new MO.AGetter('_projection'));
   o.construct   = MO.FE3sCamera_construct;
   o.unserialize = MO.FE3sCamera_unserialize;
   o.saveConfig  = MO.FE3sCamera_saveConfig;
   return o;
}
MO.FE3sCamera_construct = function FE3sCamera_construct(){
   var o = this;
   o.__base.FE3sObject.construct.call(o);
   o._position = new MO.SPoint3();
   o._direction = new MO.SVector3();
   o._projection = MO.Class.create(MO.FE3sProjection);
}
MO.FE3sCamera_unserialize = function FE3sCamera_unserialize(p){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, p);
   o._typeCd = p.readString();
   o._position.unserialize(p);
   o._direction.unserialize(p);
   o._projection.unserialize(p);
}
MO.FE3sCamera_saveConfig = function FE3sCamera_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sObject.saveConfig.call(o, xconfig);
   xconfig.set('position', o._position.toString());
   xconfig.set('direction', o._direction.toString());
   o._projection.saveConfig(xconfig.create('Projection'));
}
MO.FE3sComponent = function FE3sComponent(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   return o;
}
MO.FE3sDisplay = function FE3sDisplay(o){
   o = MO.Class.inherits(this, o, MO.FE3sDrawable);
   o._outline         = null;
   o._renderables     = MO.Class.register(o, new MO.AGetter('_renderables'));
   o.construct        = MO.FE3sDisplay_construct;
   o.calculateOutline = MO.FE3sDisplay_calculateOutline;
   o.unserialize      = MO.FE3sDisplay_unserialize;
   o.saveConfig       = MO.FE3sDisplay_saveConfig;
   o.clone            = MO.FE3sDisplay_clone;
   return o;
}
MO.FE3sDisplay_construct = function FE3sDisplay_construct(){
   var o = this;
   o.__base.FE3sDrawable.construct.call(o);
   o._outline = new MO.SOutline3d();
}
MO.FE3sDisplay_calculateOutline = function FE3sDisplay_calculateOutline(){
   var o = this;
   var outline = o._outline;
   if(outline.isEmpty()){
      var renderabels = o._renderables;
      if(renderabels){
         outline.setMin();
         var count = renderabels.count();
         for(var i = 0; i < count; i++){
            var renderable = renderabels.at(i);
            var renderableOutline = renderable.calculateOutline();
            outline.mergeMax(renderableOutline);
         }
         outline.update();
      }
   }
   return outline;
}
MO.FE3sDisplay_unserialize = function FE3sDisplay_unserialize(input){
   var o = this;
   o.__base.FE3sDrawable.unserialize.call(o, input);
   var resourceConsole = MO.Console.find(MO.FE3sResourceConsole);
   var renderableCount = input.readUint16();
   if(renderableCount > 0){
      var renderables = o._renderables = new MO.TObjects();
      for(var i = 0; i < renderableCount; i++){
         var renderable = resourceConsole.unserialize(input);
         renderables.push(renderable);
      }
   }
}
MO.FE3sDisplay_saveConfig = function FE3sDisplay_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sDrawable.saveConfig.call(o, xconfig);
   var renderables = o._renderables;
   if(renderables){
      var xrenderables = xconfig.create('RenderableCollection');
      var count = renderables.count();
      for(var i = 0; i < count; i++){
         var renderable = renderables.at(i);
         renderable.saveConfig(xrenderables.create('Renderable'));
      }
   }
}
MO.FE3sDisplay_clone = function FE3sDisplay_clone(instance){
   var o = this;
   var result = o.__base.FE3sDrawable.clone.call(o, instance);
   result._outline.assign(o._outline)
   return result;
}
MO.FE3sDisplayContainer = function FE3sDisplayContainer(o){
   o = MO.Class.inherits(this, o, MO.FE3sDisplay);
   o._displays        = MO.Class.register(o, new MO.AGetter('_displays'));
   o.construct        = MO.FE3sDisplayContainer_construct;
   o.pushDisplay      = MO.FE3sDisplayContainer_pushDisplay;
   o.calculateOutline = MO.FE3sDisplayContainer_calculateOutline;
   o.unserialize      = MO.FE3sDisplayContainer_unserialize;
   o.saveConfig       = MO.FE3sDisplayContainer_saveConfig;
   o.clone            = MO.FE3sDisplayContainer_clone;
   return o;
}
MO.FE3sDisplayContainer_construct = function FE3sDisplayContainer_construct(){
   var o = this;
   o.__base.FE3sDisplay.construct.call(o);
}
MO.FE3sDisplayContainer_pushDisplay = function FE3sDisplayContainer_pushDisplay(display){
   var o = this;
   var displays = o._displays;
   if(!displays){
      displays = o._displays = new MO.TObjects();
   }
   display.setParent(o);
   displays.push(display);
}
MO.FE3sDisplayContainer_calculateOutline = function FE3sDisplayContainer_calculateOutline(){
   var o = this;
   var outline = o._outline;
   if(outline.isEmpty()){
      var renderabels = o._renderables;
      if(renderabels){
         outline.setMin();
         var count = renderabels.count();
         for(var i = 0; i < count; i++){
            var renderable = renderabels.getAt(i);
            var renderableOutline = renderable.calculateOutline();
            outline.mergeMax(renderableOutline);
         }
         outline.update();
      }
   }
   return outline;
}
MO.FE3sDisplayContainer_unserialize = function FE3sDisplayContainer_unserialize(input){
   var o = this;
   o.__base.FE3sDisplay.unserialize.call(o, input);
   var displayCount = input.readUint16();
   if(displayCount > 0){
      var displays = o._displays = new MO.TObjects();
      for(var i = 0; i < displayCount; i++){
         var display = MO.Class.create(MO.FE3sSceneDisplay);
         display.unserialize(input);
         o.pushDisplay(display);
      }
   }
}
MO.FE3sDisplayContainer_saveConfig = function FE3sDisplayContainer_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sDisplay.saveConfig.call(o, xconfig);
   var displays = o._displays;
   if(displays){
      var xdisplays = xconfig.create('DisplayCollection');
      var count = displays.count();
      for(var i = 0; i < count; i++){
         var display = displays.at(i);
         display.saveConfig(xdisplays.create('Display'));
      }
   }
}
MO.FE3sDisplayContainer_clone = function FE3sDisplayContainer_clone(instance){
   var o = this;
   var result = o.__base.FE3sDisplay.clone.call(o, instance);
   return result;
}
MO.FE3sDisplayLayer = function FE3sDisplayLayer(o){
   o = MO.Class.inherits(this, o, MO.FE3sDisplayContainer);
   o._typeCd      = MO.Class.register(o, new MO.AGetSet('_typeCd'));
   o._transformCd = MO.Class.register(o, new MO.AGetSet('_transformCd'));
   o.unserialize  = MO.FE3sDisplayLayer_unserialize;
   o.saveConfig   = MO.FE3sDisplayLayer_saveConfig;
   return o;
}
MO.FE3sDisplayLayer_unserialize = function FE3sDisplayLayer_unserialize(input){
   var o = this;
   o.__base.FE3sDisplayContainer.unserialize.call(o, input);
   o._typeCd = input.readString();
   o._transformCd = input.readString();
}
MO.FE3sDisplayLayer_saveConfig = function FE3sDisplayLayer_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sDisplayContainer.saveConfig.call(o, xconfig);
   xconfig.set('type_cd', o._typeCd);
   xconfig.set('transform_cd', o._transformCd);
}
MO.FE3sDisplayMaterial = function FE3sDisplayMaterial(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._groupGuid  = MO.Class.register(o, new MO.AGetter('_groupGuid'));
   o._material   = MO.Class.register(o, new MO.AGetter('_material'));
   o.unserialize = MO.FE3sDisplayMaterial_unserialize;
   return o;
}
MO.FE3sDisplayMaterial_unserialize = function FE3sDisplayMaterial_unserialize(p){
   var o = this;
   o._groupGuid = p.readString();
   o._material = o._template._activeTheme.findMaterial(o._groupGuid);
}
MO.FE3sDrawable = function FE3sDrawable(o){
   o = MO.Class.inherits(this, o, MO.FE3sComponent);
   o._matrix     = MO.Class.register(o, new MO.AGetter('_matrix'));
   o.construct   = MO.FE3sDrawable_construct;
   o.matrix      = MO.FE3sDrawable_matrix;
   o.unserialize = MO.FE3sDrawable_unserialize;
   o.saveConfig  = MO.FE3sDrawable_saveConfig;
   o.clone       = MO.FE3sDrawable_clone;
   return o;
}
MO.FE3sDrawable_construct = function FE3sDrawable_construct(){
   var o = this;
   o.__base.FE3sComponent.construct.call(o);
   o._matrix = new MO.SMatrix3d();
}
MO.FE3sDrawable_unserialize = function FE3sDrawable_unserialize(input){
   var o = this;
   o.__base.FE3sComponent.unserialize.call(o, input);
   o._matrix.unserialize(input);
}
MO.FE3sDrawable_saveConfig = function FE3sDrawable_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sComponent.saveConfig.call(o, xconfig);
   o._matrix.saveConfig(xconfig.create('Matrix'));
}
MO.FE3sDrawable_clone = function FE3sDrawable_clone(instance){
   var o = this;
   var result = o.__base.FE3sComponent.clone.call(o, instance);
   result._matrix.assign(o._matrix);
   return result;
}
MO.FE3sFrame = function FE3sFrame(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._tick        = MO.Class.register(o, new MO.AGetter('_tick'));
   o._translation = MO.Class.register(o, new MO.AGetter('_translation'));
   o._quaternion  = MO.Class.register(o, new MO.AGetter('_quaternion'));
   o._scale       = MO.Class.register(o, new MO.AGetter('_scale'));
   return o;
}
MO.FE3sGeometry = function FE3sGeometry(o){
   o = MO.Class.inherits(this, o, MO.FE3sRenderable, MO.ME3sGeometry);
   o.construct   = MO.FE3sGeometry_construct;
   o.unserialize = MO.FE3sGeometry_unserialize;
   o.dispose     = MO.FE3sGeometry_dispose;
   return o;
}
MO.FE3sGeometry_construct = function FE3sGeometry_construct(){
   var o = this;
   o.__base.FE3sRenderable.construct.call(o);
   o.__base.ME3sGeometry.construct.call(o);
}
MO.FE3sGeometry_unserialize = function FE3sGeometry_unserialize(input){
   var o = this;
   o.__base.FE3sRenderable.unserialize.call(o, input);
   var outline = o._outline;
   outline.unserialize(input);
   var streamCount = input.readInt8();
   if(streamCount > 0){
      var streams = o._streams = new MO.TObjects();
      for(var i = 0; i < streamCount; i++){
         var stream = MO.Class.create(MO.FE3sStream);
         stream.unserialize(input)
         streams.push(stream);
      }
   }
   if(outline.isEmpty()){
      o.calculateOutline();
   }
   outline.update();
}
MO.FE3sGeometry_dispose = function FE3sGeometry_dispose(){
   var o = this;
   o.__base.ME3sGeometry.dispose.call(o);
   o.__base.FE3sRenderable.dispose.call(o);
}
MO.FE3sLight = function FE3sLight(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._typeName   = MO.Class.register(o, new MO.AGetter('_typeName'));
   o._material   = MO.Class.register(o, new MO.AGetter('_material'));
   o._camera     = MO.Class.register(o, new MO.AGetter('_camera'));
   o.construct   = MO.FE3sLight_construct;
   o.unserialize = MO.FE3sLight_unserialize;
   return o;
}
MO.FE3sLight_construct = function FE3sLight_construct(){
   var o = this;
   o.__base.FE3sObject.construct.call(o);
   o._material = MO.Class.create(MO.FE3sMaterial);
   o._camera = MO.Class.create(MO.FE3sCamera);
}
MO.FE3sLight_unserialize = function FE3sLight_unserialize(p){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, p);
   o._typeName = p.readString();
   o._material.unserialize(p);
   o._camera.unserialize(p);
}
MO.FE3sMaterial = function FE3sMaterial(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._parentGuid  = MO.Class.register(o, new MO.AGetter('_parentGuid'));
   o._info        = MO.Class.register(o, new MO.AGetter('_info'));
   o._bitmaps     = MO.Class.register(o, new MO.AGetter('_bitmaps'));
   o._bitmapPacks = MO.Class.register(o, new MO.AGetter('_bitmapPacks'));
   o.construct    = MO.FE3sMaterial_construct;
   o.effectCode   = MO.FE3sMaterial_effectCode;
   o.unserialize  = MO.FE3sMaterial_unserialize;
   o.saveConfig   = MO.FE3sMaterial_saveConfig;
   o.clone        = MO.FE3sMaterial_clone;
   return o;
}
MO.FE3sMaterial_construct = function FE3sMaterial_construct(){
   var o = this;
   o.__base.FE3sObject.construct.call(o);
   o._info = new MO.SE3sMaterialInfo();
}
MO.FE3sMaterial_effectCode = function FE3sMaterial_effectCode(){
   return this._info.effectCode;
}
MO.FE3sMaterial_unserialize = function FE3sMaterial_unserialize(input){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, input);
   o._parentGuid = input.readString();
   o._info.unserialize(input);
   var packCount = input.readInt16();
   if(packCount > 0){
      var bitmapPacks = o._bitmapPacks = new MO.TDictionary();
      for(var i = 0; i < packCount; i++){
         var bitmapPack = MO.Class.create(MO.FE3sMaterialBitmapPack);
         bitmapPack.unserialize(input);
         bitmapPacks.set(bitmapPack.guid(), bitmapPack);
      }
   }
   var bitmapCount = input.readInt16();
   if(bitmapCount > 0){
      var bitmaps = o._bitmaps = new MO.TObjects();
      for(var i = 0; i < bitmapCount; i++){
         var bitmap = MO.Class.create(MO.FE3sMaterialBitmap);
         bitmap.unserialize(input);
         bitmaps.push(bitmap);
         var pack = bitmapPacks.get(bitmap.bitmapPackGuid());
         bitmap.setBitmapPack(pack);
      }
   }
}
MO.FE3sMaterial_saveConfig = function FE3sMaterial_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sObject.saveConfig.call(o, xconfig);
   xconfig.set('parent_guid', o._parentGuid);
   o._info.saveConfig(xconfig);
}
MO.FE3sMaterial_clone = function FE3sMaterial_clone(instance){
   var o = this;
   var result = o.__base.FE3sObject.clone.call(o, instance);
   result._parentGuid = o._parentGuid;
   result._info.assign(o._info);
   return result;
}
MO.FE3sMaterialBitmap = function FE3sMaterialBitmap(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._bitmapPackGuid = MO.Class.register(o, new MO.AGetter('_bitmapPackGuid'));
   o._bitmapPack     = MO.Class.register(o, new MO.AGetSet('_bitmapPack'));
   o._bitmapGuid     = MO.Class.register(o, new MO.AGetter('_bitmapGuid'));
   o._index          = 0;
   o.unserialize     = MO.FE3sMaterialBitmap_unserialize;
   return o;
}
MO.FE3sMaterialBitmap_unserialize = function FE3sMaterialBitmap_unserialize(input){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, input);
   o._bitmapPackGuid = input.readString();
   o._bitmapGuid = input.readString();
   o._index = input.readUint16();
}
MO.FE3sMaterialBitmapPack = function FE3sMaterialBitmapPack(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._typeName   = MO.Class.register(o, new MO.AGetter('_typeName'));
   o._formatName = MO.Class.register(o, new MO.AGetter('_formatName'));
   o._size       = MO.Class.register(o, new MO.AGetter('_size'));
   o.construct   = MO.FE3sMaterialBitmapPack_construct;
   o.unserialize = MO.FE3sMaterialBitmapPack_unserialize;
   o.dispose     = MO.FE3sMaterialBitmapPack_dispose;
   return o;
}
MO.FE3sMaterialBitmapPack_construct = function FE3sMaterialBitmapPack_construct(){
   var o = this;
   o.__base.FE3sObject.construct.call(o);
   o._size = new MO.SSize2();
}
MO.FE3sMaterialBitmapPack_unserialize = function FE3sMaterialBitmapPack_unserialize(input){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, input);
   o._typeName = input.readString();
   o._formatName = input.readString();
   o._size.unserialize(input, MO.EDataType.Uint16);
}
MO.FE3sMaterialBitmapPack_dispose = function FE3sMaterialBitmapPack_dispose(){
   var o = this;
   o._size = MO.Lang.Object.dispose(o._size);
   o.__base.FE3sObject.dispose.call(o);
}
MO.FE3sMaterialConsole = function FE3sMaterialConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._resources  = null;
   o._materials  = null;
   o.construct   = MO.FE3sMaterialConsole_construct;
   o.find        = MO.FE3sMaterialConsole_find;
   o.unserialize = MO.FE3sMaterialConsole_unserialize;
   o.loadByGuid  = MO.FE3sMaterialConsole_loadByGuid;
   o.dispose     = MO.FE3sMaterialConsole_dispose;
   return o;
}
MO.FE3sMaterialConsole_construct = function FE3sMaterialConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._resources = new MO.TDictionary();
   o._materials = new MO.TDictionary();
}
MO.FE3sMaterialConsole_find = function FE3sMaterialConsole_find(p){
   return this._materials.get(p);
}
MO.FE3sMaterialConsole_unserialize = function FE3sMaterialConsole_unserialize(input){
   var o = this;
   var material = MO.Class.create(MO.FE3sMaterial);
   material.unserialize(input);
   var materialGuid = material.guid();
   if(o._materials.contains(materialGuid)){
      throw new MO.TError(o, 'Material is already exists.');
   }
   o._materials.set(materialGuid, material);
   return material;
}
MO.FE3sMaterialConsole_loadByGuid = function FE3sMaterialConsole_loadByGuid(guid){
   var o = this;
   var resources = o._resources;
   var resource = resources.get(guid);
   if(resource){
      return resource;
   }
   var vendor = MO.Console.find(MO.FE3sVendorConsole).find('material');
   vendor.set('guid', guid);
   var url = vendor.makeUrl();
   resource = MO.Class.create(MO.FE3sMaterialResource);
   resource.setGuid(guid);
   resource.setVendor(vendor);
   resource.setSourceUrl(url);
   MO.Console.find(MO.FResourceConsole).load(resource);
   resources.set(guid, resource);
   return resource;
}
MO.FE3sMaterialConsole_dispose = function FE3sMaterialConsole_dispose(){
   var o = this;
   o._resources = MO.Lang.Object.free(o._resources);
   o._materials = MO.Lang.Object.free(o._materials);
   o.__base.FConsole.dispose.call(o);
}
MO.FE3sMaterialRefer = function FE3sMaterialRefer(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   return o;
}
MO.FE3sMaterialResource = function FE3sMaterialResource(o){
   o = MO.Class.inherits(this, o, MO.FE3sResource);
   o._typeName     = 'Material';
   o._dataCompress = true;
   o._material     = MO.Class.register(o, new MO.AGetter('_material'));
   o.unserialize   = MO.FE3sMaterialResource_unserialize;
   return o;
}
MO.FE3sMaterialResource_unserialize = function FE3sMaterialResource_unserialize(input){
   var o = this;
   o.__base.FE3sResource.unserialize.call(o, input);
   o._material = MO.Console.find(MO.FE3sMaterialConsole).unserialize(input);
   MO.Logger.info(o, "Unserialize material success. (guid={1}, code={2})", o._guid, o._code);
}
MO.FE3sMesh = function FE3sMesh(o){
   o = MO.Class.inherits(this, o, MO.FE3sSpace, MO.ME3sGeometry);
   o._dataCompress = true;
   o._typeName     = 'Mesh';
   o._display      = null;
   o._renderable   = null;
   o.construct     = MO.FE3sMesh_construct;
   o.unserialize   = MO.FE3sMesh_unserialize;
   o.saveConfig    = MO.FE3sMesh_saveConfig;
   o.dispose       = MO.FE3sMesh_dispose;
   return o;
}
MO.FE3sMesh_construct = function FE3sMesh_construct(){
   var o = this;
   o.__base.FE3sSpace.construct.call(o);
   o.__base.ME3sGeometry.construct.call(o);
   o._display = MO.Class.create(MO.FE3sMeshDisplay);
}
MO.FE3sMesh_unserialize = function FE3sMesh_unserialize(input){
   var o = this;
   o.__base.FE3sSpace.unserialize.call(o, input);
   o._outline.unserialize(input);
   o._outline.update();
   var streamCount = input.readInt8();
   if(streamCount > 0){
      var streams = o._streams = new MO.TObjects();
      for(var i = 0; i < streamCount; i++){
         var stream = MO.Class.create(MO.FE3sStream);
         stream.unserialize(input)
         streams.push(stream);
      }
   }
   o._display.unserialize(input);
   o._renderable = o._display._renderable;
}
MO.FE3sMesh_saveConfig = function FE3sMesh_saveConfig(config){
   var o = this;
   o.__base.FE3sSpace.saveConfig.call(o, config);
   o._display.saveConfig(config.create('Display'));
}
MO.FE3sMesh_dispose = function FE3sMesh_dispose(){
   var o = this;
   o._outline = MO.Lang.Object.dispose(o._outline);
   o._display = MO.Lang.Object.dispose(o._display);
   o.__base.ME3sGeometry.dispose.call(o);
   o.__base.FE3sSpace.dispose.call(o);
}
MO.FE3sMeshConsole = function FE3sMeshConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._venderCode = 'mesh';
   o._serviceUrl = '/cloud.content.mesh.ws'
   o._dataUrl    = '/cloud.content.mesh.wv'
   o._meshs      = MO.Class.register(o, new MO.AGetter('_meshs'));
   o.construct   = MO.FE3sMeshConsole_construct;
   o.find        = MO.FE3sMeshConsole_find;
   o.loadByGuid  = MO.FE3sMeshConsole_loadByGuid;
   o.loadByCode  = MO.FE3sMeshConsole_loadByCode;
   o.dispose     = MO.FE3sMeshConsole_dispose;
   return o;
}
MO.FE3sMeshConsole_construct = function FE3sMeshConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._meshs = new MO.TDictionary();
}
MO.FE3sMeshConsole_find = function FE3sMeshConsole_find(p){
   return this._meshs.get(p);
}
MO.FE3sMeshConsole_loadByGuid = function FE3sMeshConsole_loadByGuid(p){
   var o = this;
   var s = o._meshs;
   var r = s.get(p);
   if(r){
      return r;
   }
   var v = MO.Console.find(MO.FE3sVendorConsole).find(o._venderCode);
   v.set('guid', p);
   var u = v.makeUrl();
   r = MO.Class.create(MO.FE3sMesh);
   r.setGuid(p);
   r.setVendor(v);
   r.setSourceUrl(u);
   MO.Console.find(MO.FResourceConsole).load(r);
   s.set(p, r);
   return r;
}
MO.FE3sMeshConsole_loadByCode = function FE3sMeshConsole_loadByCode(p){
   var o = this;
   var s = o._meshs;
   var r = s.get(p);
   if(r){
      return r;
   }
   var v = MO.Console.find(MO.FE3sVendorConsole).find(o._venderCode);
   v.set('code', p);
   var u = v.makeUrl();
   r = MO.Class.create(MO.FE3sMesh);
   r.setGuid(p);
   r.setVendor(v);
   r.setSourceUrl(u);
   MO.Console.find(MO.FResourceConsole).load(r);
   s.set(p, r);
   return r;
}
MO.FE3sMeshConsole_dispose = function FE3sMeshConsole_dispose(){
   var o = this;
   o._meshs = MO.Lang.Object.free(o._meshs);
   o.__base.FConsole.dispose.call(o);
}
MO.FE3sMeshDisplay = function FE3sMeshDisplay(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._matrix     = MO.Class.register(o, new MO.AGetter('_matrix'));
   o._material   = MO.Class.register(o, new MO.AGetter('_material'));
   o._renderable = MO.Class.register(o, new MO.AGetter('_renderable'));
   o.construct   = MO.FE3sMeshDisplay_construct;
   o.unserialize = MO.FE3sMeshDisplay_unserialize;
   o.saveConfig  = MO.FE3sMeshDisplay_saveConfig;
   return o;
}
MO.FE3sMeshDisplay_construct = function FE3sMeshDisplay_construct(){
   var o = this;
   o.__base.FE3sObject.construct.call(o);
   o._matrix = new MO.SMatrix3d();
   o._material = MO.Class.create(MO.FE3sMaterial);
   o._renderable = MO.Class.create(MO.FE3sRenderable);
}
MO.FE3sMeshDisplay_unserialize = function FE3sMeshDisplay_unserialize(p){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, p);
   o._matrix.unserialize(p);
   o._material.unserialize(p);
   o._renderable.unserialize(p);
}
MO.FE3sMeshDisplay_saveConfig = function FE3sMeshDisplay_saveConfig(p){
   var o = this;
   o.__base.FE3sObject.saveConfig.call(o, p);
   o._matrix.saveConfig(p.create('Matrix'));
   o._material.saveConfig(p.create('Material'));
   o._renderable.saveConfig(p.create('Renderable'));
}
MO.FE3sModel = function FE3sModel(o){
   o = MO.Class.inherits(this, o, MO.FE3sSpace);
   o._typeName      = 'Model';
   o._dataCompress  = true;
   o._dataBlock     = true;
   o._meshes        = MO.Class.register(o, new MO.AGetter('_meshes'));
   o._skeletons     = MO.Class.register(o, new MO.AGetter('_skeletons'));
   o._animations    = MO.Class.register(o, new MO.AGetter('_animations'));
   o._display       = MO.Class.register(o, new MO.AGetter('_display'));
   o.construct      = MO.FE3sModel_construct;
   o.findMeshByCode = MO.FE3sModel_findMeshByCode;
   o.unserialize    = MO.FE3sModel_unserialize;
   o.saveConfig     = MO.FE3sModel_saveConfig;
   return o;
}
MO.FE3sModel_construct = function FE3sModel_construct(){
   var o = this;
   o.__base.FE3sSpace.construct.call(o);
   var display = o._display = MO.Class.create(MO.FE3sModelDisplay);
   display._model = o;
}
MO.FE3sModel_findMeshByCode = function FE3sModel_findMeshByCode(p){
   var s = this._meshes;
   for(var i = s.count() - 1; i >= 0; i--){
      var m = s.at(i);
      if(m._code == p){
         return m;
      }
   }
   return null;
}
MO.FE3sModel_unserialize = function FE3sModel_unserialize(input){
   var o = this;
   o.__base.FE3sSpace.unserialize.call(o, input);
   var modelConsole = MO.Console.find(MO.FE3sModelConsole);
   modelConsole.models().set(o.guid(), o);
   var meshCount = input.readInt16();
   if(meshCount > 0){
      var meshes = o._meshes = new MO.TDictionary();
      for(var i = 0; i < meshCount; i++){
         var mesh = modelConsole.unserialMesh(input)
         var meshGuid = mesh.guid();
         meshes.set(meshGuid, mesh);
      }
   }
   var skeletonCount = input.readInt16();
   if(skeletonCount > 0){
      var s = o._skeletons = new MO.TObjects();
      for(var i = 0; i < skeletonCount; i++){
         var skeleton = modelConsole.unserialSkeleton(input)
         s.push(skeleton);
      }
   }
   var animationCount = input.readInt16();
   if(animationCount > 0){
      var animations = o._animations = new MO.TObjects();
      for(var i = 0; i < animationCount; i++){
         var animation = modelConsole.unserialAnimation(o, input)
         animations.push(animation);
      }
   }
   var display = o._display;
   display.unserialize(input);
   var renderables = display.renderables();
   if(renderables){
      var renderableCount = renderables.count();
      for(var i = 0; i < renderableCount; i++){
         var renderable = renderables.get(i);
         var meshGuid = renderable.meshGuid();
         var mesh = meshes.get(meshGuid);
         renderable.setMesh(mesh);
      }
   }
   MO.Logger.info(o, "Unserialize model success. (guid={1}, code={2})", o._guid, o._code);
}
MO.FE3sModel_saveConfig = function FE3sModel_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sSpace.saveConfig.call(o, xconfig);
   o._display.saveConfig(xconfig.create('Display'));
}
MO.FE3sModelConsole = function FE3sModelConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._models           = MO.Class.register(o, new MO.AGetter('_models'));
   o._meshs            = MO.Class.register(o, new MO.AGetter('_meshs'));
   o._skeletons        = MO.Class.register(o, new MO.AGetter('_skeletons'));
   o._animations       = MO.Class.register(o, new MO.AGetter('_animations'));
   o.construct         = MO.FE3sModelConsole_construct;
   o.findModel         = MO.FE3sModelConsole_findModel;
   o.findMesh          = MO.FE3sModelConsole_findMesh;
   o.findSkeleton      = MO.FE3sModelConsole_findSkeleton;
   o.findAnimation     = MO.FE3sModelConsole_findAnimation;
   o.unserialMesh      = MO.FE3sModelConsole_unserialMesh;
   o.unserialSkeleton  = MO.FE3sModelConsole_unserialSkeleton;
   o.unserialAnimation = MO.FE3sModelConsole_unserialAnimation;
   o.load              = MO.FE3sModelConsole_load;
   o.dispose           = MO.FE3sModelConsole_dispose;
   return o;
}
MO.FE3sModelConsole_construct = function FE3sModelConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._models = new MO.TDictionary();
   o._meshs = new MO.TDictionary();
   o._skeletons = new MO.TDictionary();
   o._animations = new MO.TDictionary();
   var rc = MO.Console.find(MO.FResourceConsole);
   var rp = MO.Class.create(MO.FResourcePipeline);
   var rt = MO.Class.create(MO.FResourceType);
   rt.setCode('resource3d.model');
   rt._pipeline = rp;
   rc.registerType(rt);
}
MO.FE3sModelConsole_findModel = function FE3sModelConsole_findModel(p){
   return this._models.get(p);
}
MO.FE3sModelConsole_findMesh = function FE3sModelConsole_findMesh(p){
   return this._meshs.get(p);
}
MO.FE3sModelConsole_findSkeleton = function FE3sModelConsole_findSkeleton(p){
   return this._skeletons.get(p);
}
MO.FE3sModelConsole_findAnimation = function FE3sModelConsole_findAnimation(p){
   return this._animations.get(p);
}
MO.FE3sModelConsole_unserialMesh = function FE3sModelConsole_unserialMesh(p){
   var o = this;
   var r = MO.Class.create(MO.FE3sModelMesh);
   r.unserialize(p);
   o._meshs.set(r.guid(), r);
   return r;
}
MO.FE3sModelConsole_unserialSkeleton = function FE3sModelConsole_unserialSkeleton(p){
   var o = this;
   var r = MO.Class.create(MO.FE3sSkeleton);
   r.unserialize(p);
   o._skeletons.set(r.guid(), r);
   return r;
}
MO.FE3sModelConsole_unserialAnimation = function FE3sModelConsole_unserialAnimation(m, p){
   var o = this;
   var r = MO.Class.create(MO.FE3sAnimation);
   r._model = m;
   r.unserialize(p);
   o._animations.set(r.guid(), r);
   return r;
}
MO.FE3sModelConsole_load = function FE3sModelConsole_load(guid){
   var o = this;
   var models = o._models;
   var model = models.get(guid);
   if(model){
      return model;
   }
   var vendor = MO.Console.find(MO.FE3sVendorConsole).find('model');
   vendor.set('guid', guid);
   var url = vendor.makeUrl();
   model = MO.Class.create(MO.FE3sModel);
   model.setGuid(guid);
   model.setVendor(vendor);
   model.setSourceUrl(url);
   MO.Console.find(MO.FResourceConsole).load(model);
   models.set(guid, model);
   return model;
}
MO.FE3sModelConsole_dispose = function FE3sModelConsole_dispose(){
   var o = this;
   o._materials = MO.Lang.Object.free(o._materials);
   o.__base.FConsole.dispose.call(o);
}
MO.FE3sModelDisplay = function FE3sModelDisplay(o){
   o = MO.Class.inherits(this, o, MO.FE3sDisplay);
   o._model           = null;
   o._material        = null;
   o.construct        = MO.FE3sModelDisplay_construct;
   o.material         = MO.FE3sModelDisplay_material;
   o.calculateOutline = MO.FE3sModelDisplay_calculateOutline;
   o.unserialize      = MO.FE3sModelDisplay_unserialize;
   o.saveConfig       = MO.FE3sModelDisplay_saveConfig;
   return o;
}
MO.FE3sModelDisplay_construct = function FE3sModelDisplay_construct(){
   var o = this;
   o.__base.FE3sDisplay.construct.call(o);
   o._material = MO.Class.create(MO.FE3sMaterial);
}
MO.FE3sModelDisplay_material = function FE3sModelDisplay_material(){
   return this._material;
}
MO.FE3sModelDisplay_calculateOutline = function FE3sModelDisplay_calculateOutline(){
   var o = this;
   var outline = o._outline;
   if(outline.isEmpty()){
      var meshes = o._model.meshes();
      if(meshes){
         outline.setMin();
         var count = meshes.count();
         for(var i = 0; i < count; i++){
            var mesh = meshes.at(i);
            var meshOutline = mesh.calculateOutline();
            outline.mergeMax(meshOutline);
         }
         outline.update();
      }
   }
   return outline;
}
MO.FE3sModelDisplay_unserialize = function FE3sModelDisplay_unserialize(p){
   var o = this;
   o.__base.FE3sDisplay.unserialize.call(o, p);
   o._material.unserialize(p);
}
MO.FE3sModelDisplay_saveConfig = function FE3sModelDisplay_saveConfig(p){
   var o = this;
   o.__base.FE3sDisplay.saveConfig.call(o, p);
   o._material.saveConfig(p.create('Material'));
}
MO.FE3sModelMesh = function FE3sModelMesh(o){
   o = MO.Class.inherits(this, o, MO.FE3sGeometry);
   return o;
}
MO.FE3sModelRenderable = function FE3sModelRenderable(o){
   o = MO.Class.inherits(this, o, MO.FE3sRenderable);
   o._meshGuid   = MO.Class.register(o, new MO.AGetter('_meshGuid'));
   o._mesh       = MO.Class.register(o, new MO.AGetSet('_mesh'));
   o.construct   = MO.FE3sModelRenderable_construct;
   o.unserialize = MO.FE3sModelRenderable_unserialize;
   o.saveConfig  = MO.FE3sModelRenderable_saveConfig;
   return o;
}
MO.FE3sModelRenderable_construct = function FE3sModelRenderable_construct(){
   var o = this;
   o.__base.FE3sRenderable.construct.call(o);
}
MO.FE3sModelRenderable_unserialize = function FE3sModelRenderable_unserialize(input){
   var o = this;
   o.__base.FE3sRenderable.unserialize.call(o, input);
   o._meshGuid = input.readString();
}
MO.FE3sModelRenderable_saveConfig = function FE3sModelRenderable_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sRenderable.saveConfig.call(o, xconfig);
   xconfig.set('mesh_guid', o._meshGuid);
}
MO.FE3sMovie = function FE3sMovie(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._interval   = MO.Class.register(o, new MO.AGetSet('_interval'));
   o._rotation   = MO.Class.register(o, new MO.AGetter('_rotation'));
   o.construct   = MO.FE3sMovie_construct;
   o.unserialize = MO.FE3sMovie_unserialize;
   o.saveConfig  = MO.FE3sMovie_saveConfig;
   o.dispose     = MO.FE3sMovie_dispose;
   return o;
}
MO.FE3sMovie_construct = function FE3sMovie_construct(){
   var o = this;
   o.__base.FE3sObject.construct.call(o);
   o._rotation = new MO.SVector3();
}
MO.FE3sMovie_unserialize = function FE3sMovie_unserialize(input){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, input);
   o._interval = input.readInt32();
   o._rotation.unserialize(input);
}
MO.FE3sMovie_saveConfig = function FE3sMovie_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sObject.saveConfig.call(o, xconfig);
   xconfig.set('interval', o._interval);
   xconfig.set('rotation', o._rotation);
}
MO.FE3sMovie_dispose = function FE3sMovie_dispose(){
   var o = this;
   o._rotation = MO.Lang.Object.dispose(o._rotation);
   o.__base.FE3sObject.disposet.call(o);
}
MO.FE3sObject = function FE3sObject(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MParent);
   o._typeName   = null;
   o._guid       = MO.Class.register(o, new MO.AGetSet('_guid'));
   o._code       = MO.Class.register(o, new MO.AGetSet('_code'));
   o._label      = MO.Class.register(o, new MO.AGetSet('_label'));
   o._isClone    = false;
   o.makeLabel   = MO.FE3sObject_makeLabel;
   o.unserialize = MO.FE3sObject_unserialize;
   o.saveConfig  = MO.FE3sObject_saveConfig;
   o.clone       = MO.FE3sObject_clone;
   o.dispose     = MO.FE3sObject_dispose;
   return o;
}
MO.FE3sObject_makeLabel = function FE3sObject_makeLabel(){
   var o = this;
   var result = '';
   if(!MO.Lang.String.isEmpty(o._code)){
      result += o._code;
   }
   if(!MO.Lang.String.isEmpty(o._label)){
      result += ' [' + o._label + ']';
   }
   return result;
}
MO.FE3sObject_unserialize = function FE3sObject_unserialize(input){
   var o = this;
   o._typeName = input.readString();
   o._guid = input.readString();
   o._code = input.readString();
   o._label = input.readString();
}
MO.FE3sObject_saveConfig = function FE3sObject_saveConfig(xconfig){
   var o = this;
   if(!MO.Lang.String.isEmpty(o._typeName)){
      xconfig.setName(o._typeName);
   }
   xconfig.set('guid', o._guid);
   xconfig.set('code', o._code);
   xconfig.set('label', o._label);
   if(o._isClone){
      xconfig.set('is_clone', 'Y');
   }
}
MO.FE3sObject_clone = function FE3sObject_clone(instance){
   var o = this;
   var result = null;
   if(instance){
      result = instance;
   }else{
      result = MO.Class.create(o.constructor);
   }
   result._isClone = true;
   result._typeName = o._typeName;
   result._guid = o._guid;
   result._code = o._code;
   result._label = o._label;
   return result;
}
MO.FE3sObject_dispose = function FE3sObject_dispose(){
   var o = this;
   o.__base.MAttributeParent.dispose.call(o);
   o.__base.FComponent.dispose.call(o);
}
MO.FE3sProjection = function FE3sProjection(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._angle      = MO.Class.register(o, MO.AGetter('_angle'), 90);
   o._znear      = MO.Class.register(o, MO.AGetter('_znear'), 1);
   o._zfar       = MO.Class.register(o, MO.AGetter('_zfar'), 200);
   o.unserialize = MO.FE3sProjection_unserialize;
   o.saveConfig  = MO.FE3sProjection_saveConfig;
   return o;
}
MO.FE3sProjection_unserialize = function FE3sProjection_unserialize(input){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, input);
   o._angle = input.readFloat();
   o._znear = input.readFloat();
   o._zfar = input.readFloat();
}
MO.FE3sProjection_saveConfig = function FE3sProjection_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sObject.saveConfig.call(o, xconfig);
   xconfig.setFloat('angle', o._angle);
   xconfig.setFloat('znear', o._znear);
   xconfig.setFloat('zfar', o._zfar);
}
MO.FE3sRegion = function FE3sRegion(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._optionBackground     = MO.Class.register(o, new MO.AGetSet('_optionBackground'), true);
   o._backgroundColor      = MO.Class.register(o, new MO.AGetter('_backgroundColor'));
   o._moveSpeed            = MO.Class.register(o, new MO.AGetSet('_moveSpeed'), 0.1);
   o._rotationKeySpeed     = MO.Class.register(o, new MO.AGetSet('_rotationKeySpeed'), 0.005);
   o._rotationMouseSpeed   = MO.Class.register(o, new MO.AGetSet('_rotationMouseSpeed'), 0.003);
   o._material             = null;
   o._camera               = MO.Class.register(o, new MO.AGetter('_camera'));
   o._light                = MO.Class.register(o, new MO.AGetter('_light'));
   o.construct             = MO.FE3sRegion_construct;
   o.unserialize           = MO.FE3sRegion_unserialize;
   o.saveConfig            = MO.FE3sRegion_saveConfig;
   return o;
}
MO.FE3sRegion_construct = function FE3sRegion_construct(){
   var o = this;
   o.__base.FE3sObject.construct.call(o);
   o._backgroundColor = new MO.SColor4();
   o._material = MO.Class.create(MO.FE3sMaterial);
   o._camera = MO.Class.create(MO.FE3sCamera);
   o._light = MO.Class.create(MO.FE3sLight);
}
MO.FE3sRegion_unserialize = function FE3sRegion_unserialize(input){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, input);
   o._backgroundColor.unserialize(input);
   o._moveSpeed = input.readFloat();
   o._rotationKeySpeed = input.readFloat();
   o._rotationMouseSpeed = input.readFloat();
   o._material.unserialize(input);
   o._camera.unserialize(input);
   o._light.unserialize(input);
}
MO.FE3sRegion_saveConfig = function FE3sRegion_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sObject.saveConfig.call(o, xconfig);
   xconfig.set('color', o._backgroundColor.toString());
   xconfig.setFloat('move_speed', o._moveSpeed);
   xconfig.setFloat('rotation_key_speed', o._rotationKeySpeed);
   xconfig.setFloat('rotation_mouse_speed', o._rotationMouseSpeed);
   o._camera.saveConfig(xconfig.create('Camera'));
}
MO.FE3sRenderable = function FE3sRenderable(o){
   o = MO.Class.inherits(this, o, MO.FE3sDrawable);
   o._materialRefers   = MO.Class.register(o, new MO.AGetter('_materialRefers'));
   o.construct         = MO.FE3sRenderable_construct;
   o.syncMaterialRefer = MO.FE3sRenderable_syncMaterialRefer;
   o.pushMaterialRefer = MO.FE3sRenderable_pushMaterialRefer;
   o.unserialize       = MO.FE3sRenderable_unserialize;
   o.saveConfig        = MO.FE3sRenderable_saveConfig;
   o.clone             = MO.FE3sRenderable_clone;
   return o;
}
MO.FE3sRenderable_construct = function FE3sRenderable_construct(){
   var o = this;
   o.__base.FE3sDrawable.construct.call(o);
}
MO.FE3sRenderable_syncMaterialRefer = function FE3sRenderable_syncMaterialRefer(index){
   var o = this;
   var materialRefers = o._materialRefers;
   if(!materialRefers){
      materialRefers = o._materialRefers = new MO.TObjects();
   }
   for(var i = materialRefers.count(); i <= index; i++){
      materialRefers.push(MO.Class.create(MO.FE3sMaterialRefer));
   }
   return materialRefers.at(index);
}
MO.FE3sRenderable_pushMaterialRefer = function FE3sRenderable_pushMaterialRefer(materialRefer){
   var o = this;
   var materialRefers = o._materialRefers;
   if(!materialRefers){
      materialRefers = o._materialRefers = new MO.Objects();
   }
   materialRefers.push(materialRefer);
}
MO.FE3sRenderable_unserialize = function FE3sRenderable_unserialize(input){
   var o = this;
   o.__base.FE3sDrawable.unserialize.call(o, input);
   var count = input.readUint16();
   if(count > 0){
      for(var i = 0; i < count; i++){
         var materialRefer = MO.Class.create(MO.FE3sMaterialRefer);
         materialRefer.unserialize(input);
         o.pushMaterialRefer(materialRefer);
      }
   }
}
MO.FE3sRenderable_saveConfig = function FE3sRenderable_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sDrawable.saveConfig.call(o, xconfig);
   var materialRefers = o._materialRefers;
   if(materialRefers){
      var count = materialRefers.count();
      var xmaterialRefers = xconfig.create('MaterialReferCollection');
      for(var i = 0; i < count; i++){
         materialRefers.at(i).saveConfig(xmaterialRefers.create('MaterialRefer'));
      }
   }
}
MO.FE3sRenderable_clone = function FE3sRenderable_clone(instance){
   var o = this;
   var result = o.__base.FE3sDrawable.clone.call(o, instance);
   var materialRefers = o._materialRefers;
   if(materialRefers){
      var count = materialRefers.count();
      for(var i = 0; i < count; i++){
         var materialRefer = materialRefers.at(i);
         result.pushMaterialRefer(materialRefer.clone());
      }
   }
   return result;
}
MO.FE3sResource = function FE3sResource(o){
   o = MO.Class.inherits(this, o, MO.FResource, MO.MListener);
   o._dataLoad      = false;
   o._dataReady     = false;
   o._dataSize      = 0;
   o._blockSize     = 0;
   o._blockCount    = 0;
   o._vendor        = MO.Class.register(o, new MO.AGetSet('_vendor'));
   o._loadListeners = MO.Class.register(o, new MO.AListener('_loadListeners', MO.EEvent.Load));
   o.onComplete     = MO.FE3sResource_onComplete;
   o.makeLabel      = MO.FE3sResource_makeLabel;
   o.testReady      = MO.FE3sResource_testReady;
   o.unserialize    = MO.FE3sResource_unserialize;
   o.saveConfig     = MO.FE3sResource_saveConfig;
   o.dispose        = MO.FE3sResource_dispose;
   return o;
}
MO.FE3sResource_onComplete = function FE3sResource_onComplete(input){
   var o = this;
   if(MO.Class.isClass(input, MO.MDataStream)){
      o.unserialize(input);
   }else{
      var view = MO.Class.create(MO.FDataView);
      view.setEndianCd(true);
      if(input.constructor == Array){
         var inputData = new Uint8Array(input);
         view.link(inputData.buffer);
      }else if(input.constructor == Uint8Array){
         view.link(input.buffer);
      }else{
         view.link(input.outputData());
      }
      o.unserialize(view);
      view.dispose();
   }
   o._dataReady = true;
   o.processLoadListener();
}
MO.FE3sResource_makeLabel = function FE3sResource_makeLabel(){
   var o = this;
   var result = '';
   if(!MO.Lang.String.isEmpty(o._code)){
      result += o._code;
   }
   if(!MO.Lang.String.isEmpty(o._label)){
      result += ' [' + o._label + ']';
   }
   return result;
}
MO.FE3sResource_testReady = function FE3sResource_testReady(){
   return this._dataReady;
}
MO.FE3sResource_unserialize = function FE3sResource_unserialize(input){
   var o = this;
   o._typeName = input.readString();
   o._guid = input.readString();
   o._code = input.readString();
   o._label = input.readString();
}
MO.FE3sResource_saveConfig = function FE3sResource_saveConfig(xconfig){
   var o = this;
   if(!MO.Lang.String.isEmpty(o._typeName)){
      xconfig.setName(o._typeName);
   }
   xconfig.set('guid', o._guid);
   xconfig.set('code', o._code);
   xconfig.set('label', o._label);
}
MO.FE3sResource_dispose = function FE3sResource_dispose(){
   var o = this;
   o._vendor = null;
   o.__base.MListener.dispose.call(o);
   o.__base.FConsole.dispose.call(o);
}
MO.FE3sResourceConsole = function FE3sResourceConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._factory            = MO.Class.register(o, new MO.AGetter('_factory'));
   o.construct           = MO.FE3sResourceConsole_construct;
   o.create              = MO.FE3sResourceConsole_create;
   o.unserializeResource = MO.FE3sResourceConsole_unserializeResource;
   o.unserialize         = MO.FE3sResourceConsole_unserialize;
   return o;
}
MO.FE3sResourceConsole_construct = function FE3sResourceConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   var factory = o._factory = MO.Class.create(MO.FClassFactory);
   factory.register('Shape', MO.FE3sShape);
   factory.register('Sprite', MO.FE3sSprite);
   factory.register('ModelMesh', MO.FE3sModelMesh);
   factory.register('ModelRenderable', MO.FE3sModelRenderable);
}
MO.FE3sResourceConsole_create = function FE3sResourceConsole_create(typeName){
   return this._factory.create(typeName);
}
MO.FE3sResourceConsole_unserializeResource = function FE3sResourceConsole_unserializeResource(resource, input){
   var o = this;
   resource.unserialize(input);
}
MO.FE3sResourceConsole_unserialize = function FE3sResourceConsole_unserialize(input){
   var o = this;
   var typeName = input.testString();
   var resource = o._factory.create(typeName);
   resource.unserialize(input);
   return resource;
}
MO.FE3sScene = function FE3sScene(o){
   o = MO.Class.inherits(this, o, MO.FE3sSpace);
   o._typeName     = 'Scene';
   o._dataCompress = true;
   o._templates    = null;
   o.construct     = MO.FE3sScene_construct;
   o.unserialize   = MO.FE3sScene_unserialize;
   o.saveConfig    = MO.FE3sScene_saveConfig;
   return o;
}
MO.FE3sScene_construct = function FE3sScene_construct(){
   var o = this;
   o.__base.FE3sSpace.construct.call(o);
}
MO.FE3sScene_unserialize = function FE3sScene_unserialize(input){
   var o = this;
   o.__base.FE3sSpace.unserialize.call(o, input);
   var templateCount = input.readInt16();
   if(templateCount > 0){
      var templateConsole = MO.Console.find(MO.FE3sTemplateConsole);
      var templates = o._templates = new MO.TDictionary();
      for(var i = 0; i < templateCount; i++){
         var template = templateConsole.unserialize(p);
         templates.set(ttemplate.guid(), template);
      }
   }
}
MO.FE3sScene_saveConfig = function FE3sScene_saveConfig(p){
   var o = this;
   o.__base.FE3sSpace.saveConfig.call(o, p);
}
MO.FE3sSceneAnimation = function FE3sSceneAnimation(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._playRate   = MO.Class.register(o, new MO.AGetSet('_playRate'), 1);
   o.construct   = MO.FE3sSceneAnimation_construct;
   o.unserialize = MO.FE3sSceneAnimation_unserialize;
   o.saveConfig  = MO.FE3sSceneAnimation_saveConfig;
   return o;
}
MO.FE3sSceneAnimation_construct = function FE3sSceneAnimation_construct(){
   var o = this;
   o.__base.FE3sObject.construct.call(o);
}
MO.FE3sSceneAnimation_unserialize = function FE3sSceneAnimation_unserialize(p){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, p);
   o._playRate = p.readFloat();
}
MO.FE3sSceneAnimation_saveConfig = function FE3sSceneAnimation_saveConfig(p){
   var o = this;
   o.__base.FE3sObject.saveConfig.call(o, p);
   p.set('play_rate', o._playRate);
}
MO.FE3sSceneConsole = function FE3sSceneConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._vendorCode = 'scene';
   o._dataUrl    = '/cloud.content.scene.wv'
   o._scenes     = null;
   o.construct   = MO.FE3sSceneConsole_construct;
   o.loadByGuid  = MO.FE3sSceneConsole_loadByGuid;
   o.loadByCode  = MO.FE3sSceneConsole_loadByCode;
   return o;
}
MO.FE3sSceneConsole_construct = function FE3sSceneConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._scenes = new MO.TDictionary();
}
MO.FE3sSceneConsole_loadByGuid = function FE3sSceneConsole_loadByGuid(guid){
   var o = this;
   var scenes = o._scenes;
   var scene = scenes.get(guid);
   if(scene){
      return scene;
   }
   var vendor = MO.Console.find(MO.FE3sVendorConsole).find(o._vendorCode);
   vendor.set('guid', guid);
   var url = vendor.makeUrl();
   scene = MO.Class.create(MO.FE3sScene);
   scene.setGuid(guid);
   scene.setVendor(vendor);
   scene.setSourceUrl(url);
   MO.Console.find(MO.FResourceConsole).load(scene);
   scenes.set(guid, scene);
   return scene;
}
MO.FE3sSceneConsole_loadByCode = function FE3sSceneConsole_loadByCode(code){
   var o = this;
   var scenes = o._scenes;
   var scene = scenes.get(code);
   if(scene){
      return scene;
   }
   var vendor = MO.Console.find(MO.FE3sVendorConsole).find(o._vendorCode);
   vendor.set('code', code);
   var url = vendor.makeUrl();
   scene = MO.Class.create(MO.FE3sScene);
   scene.setCode(code);
   scene.setVendor(vendor);
   scene.setSourceUrl(url);
   MO.Console.find(MO.FResourceConsole).load(scene);
   scenes.set(code, scene);
   return scene;
}
MO.FE3sSceneDisplay = function FE3sSceneDisplay(o){
   o = MO.Class.inherits(this, o, MO.FE3sSprite);
   o._templateGuid        = MO.Class.register(o, new MO.AGetter('_templateGuid'));
   o._animations          = MO.Class.register(o, new MO.AGetter('_animations'));
   o._movies              = MO.Class.register(o, new MO.AGetter('_movies'));
   o._renderables         = MO.Class.register(o, new MO.AGetter('_renderables'));
   o.construct            = MO.FE3sSceneDisplay_construct;
   o.findAnimation        = MO.FE3sSceneDisplay_findAnimation;
   o.syncAnimation        = MO.FE3sSceneDisplay_syncAnimation;
   o.unserialize          = MO.FE3sSceneDisplay_unserialize;
   o.saveConfig           = MO.FE3sSceneDisplay_saveConfig;
   o.clone                = MO.FE3sSceneDisplay_clone;
   return o;
}
MO.FE3sSceneDisplay_construct = function FE3sSceneDisplay_construct(){
   var o = this;
   o.__base.FE3sSprite.construct.call(o);
}
MO.FE3sSceneDisplay_findAnimation = function FE3sSceneDisplay_findAnimation(guid){
   var o = this;
   var animations = o._animations;
   if(animations){
      return animations.get(guid);
   }
   return null;
}
MO.FE3sSceneDisplay_syncAnimation = function FE3sSceneDisplay_syncAnimation(guid){
   var o = this;
   var animations = o._animations;
   if(!animations){
      animations = o._animations = new MO.TDictionary();
   }
   var animation = animations.get(guid);
   if(!animation){
      animation = MO.Class.create(MO.FE3sSceneAnimation);
      animation._guid = guid;
      animations.set(guid, animation);
   }
   return animation;
}
MO.FE3sSceneDisplay_unserialize = function FE3sSceneDisplay_unserialize(input){
   var o = this;
   o.__base.FE3sSprite.unserialize.call(o, input);
   o._templateGuid = input.readString();
   var animationCount = input.readUint16();
   if(animationCount > 0){
      var animations = o._animations = new MO.TDictionary();
      for(var i = 0; i < animationCount; i++){
         var animation = MO.Class.create(MO.FE3sSceneAnimation);
         animation.unserialize(input);
         animations.set(animation.guid(), animation);
      }
   }
   var movieCount = input.readUint16();
   if(movieCount > 0){
      var movies = o._movies = new MO.TObjects();
      for(var i = 0; i < movieCount; i++){
         var movie = MO.Class.create(MO.FE3sMovie);
         movie.unserialize(input);
         movies.push(movie);
      }
   }
}
MO.FE3sSceneDisplay_saveConfig = function FE3sSceneDisplay_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sSprite.saveConfig.call(o, xconfig);
   xconfig.set('template_guid', o._templateGuid);
   var animations = o._animations;
   if(animations){
      var count = animations.count();
      var xanimations = xconfig.create('AnimationCollection');
      for(var i = 0; i < count; i++){
         animations.at(i).saveConfig(xanimations.create('Animation'));
      }
   }
}
MO.FE3sSceneDisplay_clone = function FE3sSceneDisplay_clone(instance){
   var o = this;
   var result = o.__base.FE3sSprite.clone.call(o, instance);
   result._templateGuid = o._templateGuid;
   return result;
}
MO.FE3sSceneLayer = function FE3sSceneLayer(o){
   o = MO.Class.inherits(this, o, MO.FE3sDisplayLayer);
   return o;
}
MO.FE3sSceneRenderable = function FE3sSceneRenderable(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o.unserialize = MO.FE3sSceneRenderable_unserialize;
   return o;
}
MO.FE3sSceneRenderable_unserialize = function FE3sSceneRenderable_unserialize(input){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, input);
}
MO.FE3sShape = function FE3sShape(o){
   o = MO.Class.inherits(this, o, FE3sRenderable);
   o._modelGuid    = MO.Class.register(o, new MO.AGetter('_modelGuid'));
   o._model        = null;
   o._meshGuid     = MO.Class.register(o, new MO.AGetter('_meshGuid'));
   o._mesh         = null;
   o._materialGuid = MO.Class.register(o, new MO.AGetter('_materialGuid'));
   o._material     = null;
   o.construct     = FE3sShape_construct;
   o.model         = FE3sShape_model;
   o.mesh          = FE3sShape_mesh;
   o.material      = FE3sShape_material;
   o.unserialize   = FE3sShape_unserialize;
   return o;
}
MO.FE3sShape_construct = function FE3sShape_construct(){
   var o = this;
   o.__base.FE3sRenderable.construct.call(o);
}
MO.FE3sShape_model = function FE3sShape_model(){
   var o = this;
   var model = o._model;
   if(!model){
      model = o._model = MO.Console.find(MO.FE3sModelConsole).findModel(o._modelGuid);
   }
   return model;
}
MO.FE3sShape_mesh = function FE3sShape_mesh(){
   var o = this;
   var mesh = o._mesh;
   if(!mesh){
      mesh = o._mesh = MO.Console.find(MO.FE3sModelConsole).findMesh(this._meshGuid);
   }
   return mesh;
}
MO.FE3sShape_material = function FE3sShape_material(){
   var o = this;
   var material = o._material;
   if(!material){
      material = o._material = MO.Console.find(MO.FE3sMaterialConsole).find(this._materialGuid);
   }
   return material;
}
MO.FE3sShape_unserialize = function FE3sShape_unserialize(input){
   var o = this;
   o.__base.FE3sRenderable.unserialize.call(o, input);
   o._modelGuid = input.readString();
   o._meshGuid = input.readString();
   o._materialGuid = input.readString();
}
MO.FE3sSkeleton = function FE3sSkeleton(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._bones        = MO.Class.register(o, new MO.AGetter('_bones'));
   o._roots        = MO.Class.register(o, new MO.AGetter('_roots'));
   o._skins        = MO.Class.register(o, new MO.AGetter('_skins'));
   o._animations   = MO.Class.register(o, new MO.AGetter('_animations'));
   o.findBone      = MO.FE3sSkeleton_findBone;
   o.pushAnimation = MO.FE3sSkeleton_pushAnimation;
   o.innerFilter   = MO.FE3sSkeleton_innerFilter;
   o.unserialize   = MO.FE3sSkeleton_unserialize;
   return o;
}
MO.FE3sSkeleton_findBone = function FE3sSkeleton_findBone(p){
   return this._bones.get(p);
}
MO.FE3sSkeleton_pushAnimation = function FE3sSkeleton_pushAnimation(p){
   var o = this;
   var r = o._animations;
   if(!r){
      r = o._animations = new MO.TObjects();
   }
   r.push(p);
}
MO.FE3sSkeleton_innerFilter = function FE3sSkeleton_innerFilter(p){
   var o = this;
   o._bones.set(p.index(), p);
   var bs = p.bones();
   if(bs){
      var c = bs.count();
      for(var i = 0; i < c; i++){
         var b = bs.get(i);
         o.innerFilter(b)
      }
   }
}
MO.FE3sSkeleton_unserialize = function FE3sSkeleton_unserialize(p){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, p);
   var c = p.readUint8();
   if(c > 0){
      o._bones = new MO.TDictionary();
      var s = o._roots = new MO.TObjects();
      for(var i = 0; i < c; i++){
         var b = MO.Class.create(MO.FE3sBone);
         b.unserialize(p);
         o.innerFilter(b);
         s.push(b);
      }
   }
   var c = p.readUint8();
   if(c > 0){
      var s = o._skins = new MO.TObjects();
      for(var i = 0; i < c; i++){
         var k = MO.Class.create(MO.FE3sSkeletonSkin);
         k.unserialize(p);
         s.push(k);
      }
   }
}
MO.FE3sSkeletonSkin = function FE3sSkeletonSkin(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._meshGuid   = MO.Class.register(o, new MO.AGetter('_meshGuid'));
   o._streams    = MO.Class.register(o, new MO.AGetter('_streams'));
   o._boneRefers = MO.Class.register(o, new MO.AGetter('_boneRefers'));
   o.find        = MO.FE3sSkeletonSkin_find;
   o.unserialize = MO.FE3sSkeletonSkin_unserialize;
   return o;
}
MO.FE3sSkeletonSkin_find = function FE3sSkeletonSkin_find(p){
   return this._streams.get(p);
}
MO.FE3sSkeletonSkin_unserialize = function FE3sSkeletonSkin_unserialize(input){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, input)
   o._meshGuid = input.readString();
   var streamCount = input.readUint8();
   if(streamCount > 0){
      var streams = o._streams = new MO.TObjects();
      for(var i = 0; i < streamCount; i++){
         var stream = MO.Class.create(MO.FE3sStream);
         stream.unserialize(input);
         streams.push(stream);
      }
   }
   var boneReferCount = input.readUint8();
   if(boneReferCount > 0){
      var boneRefers = o._boneRefers = new MO.TObjects();
      for(var i = 0; i < boneReferCount; i++){
         var boneRefer = MO.Class.create(MO.FE3sBoneRefer);
         boneRefer.unserialize(input);
         boneRefers.push(boneRefer);
      }
   }
}
MO.FE3sSpace = function FE3sSpace(o){
   o = MO.Class.inherits(this, o, MO.FE3sResource);
   o._typeName   = null;
   o._technique  = MO.Class.register(o, new MO.AGetter('_technique'));
   o._region     = MO.Class.register(o, new MO.AGetter('_region'));
   o._materials  = MO.Class.register(o, new MO.AGetter('_materials'));
   o._displays   = MO.Class.register(o, new MO.AGetter('_displays'));
   o._layers     = MO.Class.register(o, new MO.AGetter('_layers'));
   o.construct   = MO.FE3sSpace_construct;
   o.unserialize = MO.FE3sSpace_unserialize;
   o.saveConfig  = MO.FE3sSpace_saveConfig;
   return o;
}
MO.FE3sSpace_construct = function FE3sSpace_construct(){
   var o = this;
   o.__base.FE3sResource.construct.call(o);
   o._technique = MO.Class.create(MO.FE3sTechnique);
   o._region = MO.Class.create(MO.FE3sRegion);
}
MO.FE3sSpace_unserialize = function FE3sSpace_unserialize(input){
   var o = this;
   o.__base.FE3sResource.unserialize.call(o, input);
   var resourceConsole = MO.Console.find(MO.FE3sResourceConsole);
   var materialConsole = MO.Console.find(MO.FE3sMaterialConsole);
   o._technique.unserialize(input);
   o._region.unserialize(input);
   var materialCount = input.readInt16();
   if(materialCount > 0){
      var materials = o._materials = new MO.TDictionary();
      for(var i = 0; i < materialCount; i++){
         var material = materialConsole.unserialize(input)
         materials.set(material.guid(), material);
      }
   }
   var displayCount = input.readInt16();
   if(displayCount > 0){
      var displays = o._displays = new MO.TObjects();
      for(var i = 0; i < displayCount; i++){
         var display = resourceConsole.unserialize(input);
         displays.push(display);
      }
   }
   var layerCount = input.readInt16();
   if(layerCount > 0){
      var layers = o._layers = new MO.TDictionary();
      for(var i = 0; i < layerCount; i++){
         var layer = MO.Class.create(MO.FE3sDisplayLayer);
         layer.unserialize(input);
         layers.set(layer.code(), layer);
      }
   }
}
MO.FE3sSpace_saveConfig = function FE3sSpace_saveConfig(p){
   var o = this;
   o.__base.FE3sResource.saveConfig.call(o, p);
   o._technique.saveConfig(p.create('Technique'));
   o._region.saveConfig(p.create('Region'));
   var materials = o._materials;
   if(materials){
      var xmaterials = p.create('MaterialCollection');
      var materialCount = materials.count();
      for(var i = 0; i < materialCount; i++){
         var material = materials.at(i);
         material.saveConfig(xmaterials.create('Material'));
      }
   }
   var displays = o._displays;
   if(displays){
      var xdisplays = p.create('DisplayCollection');
      var displayCount = displays.count();
      for(var i = 0; i < displayCount; i++){
         var display = displays.at(i);
         display.saveConfig(xdisplays.create('Display'));
      }
   }
   var layers = o._layers;
   if(layers){
      var xlayers = p.create('LayerCollection');
      var layerCount = layers.count();
      for(var i = 0; i < layerCount; i++){
         var layer = layers.valueAt(i);
         layer.saveConfig(xlayers.create('Layer'));
      }
   }
}
MO.FE3sSprite = function FE3sSprite(o){
   o = MO.Class.inherits(this, o, MO.FE3sDisplayContainer);
   o._materials   = MO.Class.register(o, new MO.AGetter('_materials'));
   o.construct    = MO.FE3sSprite_construct;
   o.pushMaterial = MO.FE3sSprite_pushMaterial;
   o.unserialize  = MO.FE3sSprite_unserialize;
   o.saveConfig   = MO.FE3sSprite_saveConfig;
   o.clone        = MO.FE3sSprite_clone;
   return o;
}
MO.FE3sSprite_construct = function FE3sSprite_construct(){
   var o = this;
   o.__base.FE3sDisplayContainer.construct.call(o);
}
MO.FE3sSprite_pushMaterial = function FE3sSprite_pushMaterial(material){
   var o = this;
   var materials = o._materials;
   if(!materials){
      materials = o._materials = new MO.TDictionary();
   }
   materials.set(material.guid(), material);
}
MO.FE3sSprite_unserialize = function FE3sSprite_unserialize(input){
   var o = this;
   o.__base.FE3sDisplayContainer.unserialize.call(o, input);
   var materialCount = input.readUint16();
   if(materialCount > 0){
      var materialConsole = MO.Console.find(MO.FE3sMaterialConsole);
      for(var i = 0; i < materialCount; i++){
         var material = materialConsole.unserialize(input)
         o.pushMaterial(material);
      }
   }
}
MO.FE3sSprite_saveConfig = function FE3sSprite_saveConfig(xconfig){
   var o = this;
   o.__base.FE3sDisplayContainer.saveConfig.call(o, xconfig);
   var materials = o._materials;
   if(materials){
      var count = materials.count();
      var xmaterials = xconfig.create('MaterialCollection');
      for(var i = 0; i < count; i++){
         var material = materials.at(i);
         material.saveConfig(xmaterials.create('Material'));
      }
   }
   var movies = o._movies;
   if(movies){
      var count = movies.count();
      var xmovies = xconfig.create('MovieCollection');
      for(var i = 0; i < count; i++){
         var movie = movies.at(i);
         movie.saveConfig(xmovies.create('Movie'));
      }
   }
}
MO.FE3sSprite_clone = function FE3sSprite_clone(instance){
   var o = this;
   var result = o.__base.FE3sDisplayContainer.clone.call(o, instance);
   var materials = o._materials;
   if(materials){
      var count = materials.count();
      for(var i = 0; i < count; i++){
         var material = materials.at(i);
         result.pushMaterial(material.clone());
      }
   }
   return result;
}
MO.FE3sStream = function FE3sStream(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._code             = MO.Class.register(o, new MO.AGetSet('_code'));
   o._elementDataCd    = MO.Class.register(o, new MO.AGetSet('_elementDataCd'), 0);
   o._elementCount     = MO.Class.register(o, new MO.AGetSet('_elementCount'), 0);
   o._elementNormalize = MO.Class.register(o, new MO.AGetSet('_elementNormalize'), false);
   o._dataStride       = MO.Class.register(o, new MO.AGetSet('_dataStride'), 0);
   o._dataCount        = MO.Class.register(o, new MO.AGetSet('_dataCount'), 0);
   o._dataLength       = MO.Class.register(o, new MO.AGetSet('_dataLength'), 0);
   o._data             = MO.Class.register(o, new MO.AGetSet('_data'));
   o._formatCd         = MO.Class.register(o, new MO.AGetSet('_formatCd'), MO.EG3dAttributeFormat.Unknown);
   o.unserialize       = MO.FE3sStream_unserialize;
   o.dispose           = MO.FE3sStream_dispose;
   return o;
}
MO.FE3sStream_unserialize = function FE3sStream_unserialize(input){
   var o = this;
   o._code = input.readString();
   o._elementDataCd = input.readUint8();
   o._elementCount = input.readUint8();
   o._elementNormalize = input.readBoolean();
   var dataStride = o._dataStride = input.readUint8();
   var dataCount = o._dataCount = input.readInt32();
   var dataLength = o._dataLength = dataStride * dataCount;
   var data = o._data = new ArrayBuffer(dataLength);
   input.readBytes(data, 0, dataLength);
}
MO.FE3sStream_dispose = function FE3sStream_dispose(){
   var o = this;
   o.data = null;
   o.__base.FObject.dispose.call(o);
}
MO.FE3sTechnique = function FE3sTechnique(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._techniqueCode = MO.Class.register(o, new MO.AGetter('_techniqueCode'));
   o._passes        = MO.Class.register(o, new MO.AGetter('_passes'));
   o.passes         = MO.FE3sTechnique_passes;
   o.unserialize    = MO.FE3sTechnique_unserialize;
   o.saveConfig     = MO.FE3sTechnique_saveConfig;
   return o;
}
MO.FE3sTechnique_unserialize = function FE3sTechnique_unserialize(input){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, input);
   var passCount = input.readInt16();
   if(passCount > 0){
      var passes = o._passes = new MO.TObjects();
      for(var i = 0; i < passCount; i++){
         var pass = MO.Class.create(MO.FE3sTechniquePass);
         pass.unserialize(input);
         passes.push(pass);
      }
   }
}
MO.FE3sTechnique_saveConfig = function FE3sTechnique_saveConfig(p){
   var o = this;
   o.__base.FE3sObject.saveConfig.call(o, p);
   p.set('technique_code', o._techniqueCode);
}
MO.FE3sTechniquePass = function FE3sTechniquePass(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._targetWidth  = MO.Class.register(o, new MO.AGetter('_targetWidth'));
   o._targetHeight = MO.Class.register(o, new MO.AGetter('_targetHeight'));
   o.unserialize   = MO.FE3sTechniquePass_unserialize;
   return o;
}
MO.FE3sTechniquePass_unserialize = function FE3sTechniquePass_unserialize(input){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, input);
   o._targetWidth = input.readUint16();
   o._targetHeight = input.readUint16();
}
MO.FE3sTemplate = function FE3sTemplate(o){
   o = MO.Class.inherits(this, o, MO.FE3sSpace);
   o._typeName     = 'Template';
   o._dataCompress = true;
   return o;
}
MO.FE3sTemplateConsole = function FE3sTemplateConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._templates  = null;
   o._serviceUrl = '/cloud.content.template.ws'
   o.construct   = MO.FE3sTemplateConsole_construct;
   o.unserialize = MO.FE3sTemplateConsole_unserialize;
   o.loadByGuid  = MO.FE3sTemplateConsole_loadByGuid;
   o.loadByCode  = MO.FE3sTemplateConsole_loadByCode;
   o.update      = MO.FE3sTemplateConsole_update;
   return o;
}
MO.FE3sTemplateConsole_construct = function FE3sTemplateConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._templates = new MO.TDictionary();
}
MO.FE3sTemplateConsole_unserialize = function FE3sTemplateConsole_unserialize(p){
   var o = this;
   var r = MO.Class.create(MO.FE3sTemplate);
   r._dataReady = true;
   r.unserialize(p);
   o._templates.set(r.guid(), r);
   return r;
}
MO.FE3sTemplateConsole_loadByGuid = function FE3sTemplateConsole_loadByGuid(guid){
   var o = this;
   var templates = o._templates;
   var template = templates.get(guid);
   if(template){
      return template;
   }
   var vendor = MO.Console.find(MO.FE3sVendorConsole).find('template');
   vendor.set('guid', guid);
   var url = vendor.makeUrl();
   template = MO.Class.create(MO.FE3sTemplate);
   template.setGuid(guid);
   template.setVendor(vendor);
   template.setSourceUrl(url);
   MO.Console.find(MO.FResourceConsole).load(template);
   templates.set(guid, template);
   return template;
}
MO.FE3sTemplateConsole_loadByCode = function FE3sTemplateConsole_loadByCode(code){
   var o = this;
   var templates = o._templates;
   var template = templates.get(code);
   if(template){
      return template;
   }
   var vendor = MO.Console.find(MO.FE3sVendorConsole).find('template');
   vendor.set('code', code);
   var url = vendor.makeUrl();
   template = MO.Class.create(MO.FE3sTemplate);
   template.setCode(code);
   template.setVendor(vendor);
   template.setSourceUrl(url);
   MO.Console.find(MO.FResourceConsole).load(template);
   templates.set(code, template);
   return template;
}
MO.FE3sTemplateConsole_update = function FE3sTemplateConsole_update(p){
   var o = this;
   var u = MO.RBrowser.hostPath(o._serviceUrl + '?action=update');
   MO.Console.find(MO.FXmlConsole).send(u, p);
}
MO.FE3sTemplateTheme = function FE3sTemplateTheme(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._materials   = MO.Class.register(o, new MO.AGetter('_materials'));
   o.findMaterial = MO.FE3sTemplateTheme_findMaterial;
   o.materials    = MO.FE3sTemplateTheme_materials;
   o.unserialize  = MO.FE3sTemplateTheme_unserialize;
   return o;
}
MO.FE3sTemplateTheme_findMaterial = function FE3sTemplateTheme_findMaterial(p){
   return this._materials.get(p);
}
MO.FE3sTemplateTheme_unserialize = function FE3sTemplateTheme_unserialize(p){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, p);
   var c = p.readUint16();
   if(c > 0){
      var mc = MO.Console.find(MO.FE3sMaterialConsole);
      var s = o._materials = new MO.TDictionary();
      for(var n = 0; n < c; n++){
         var m = mc.unserialize(p);
         s.set(m.groupGuid(), m);
      }
   }
}
MO.FE3sTexture = function FE3sTexture(o){
   o = MO.Class.inherits(this, o, MO.FE3sResource);
   o._dataCompress = true;
   o._bitmaps      = MO.Class.register(o, new MO.AGetter('_bitmaps'));
   o._bitmapPacks  = MO.Class.register(o, new MO.AGetter('_bitmapPacks'));
   o.construct     = MO.FE3sTexture_construct;
   o.unserialize   = MO.FE3sTexture_unserialize;
   o.dispose       = MO.FE3sTexture_dispose;
   return o;
}
MO.FE3sTexture_construct = function FE3sTexture_construct(){
   var o = this;
   o.__base.FE3sResource.construct.call(o);
}
MO.FE3sTexture_unserialize = function FE3sTexture_unserialize(p){
   var o = this;
   o.__base.FE3sResource.unserialize.call(o, p);
   var c = p.readInt16();
   if(c > 0){
      var s = o._bitmaps = new MO.TDictionary();
      for(var i = 0; i < c; i++){
         var b = MO.Class.create(FE3sTextureBitmap);
         b.unserialize(p);
         s.set(b.code(), b);
      }
   }
   var c = p.readInt16();
   if(c > 0){
      var s = o._bitmapPacks = new MO.TDictionary();
      for(var i = 0; i < c; i++){
         var b = MO.Class.create(FE3sTextureBitmapPack);
         b._texture = o;
         b.unserialize(p);
         s.set(b.code(), b);
      }
   }
}
MO.FE3sTexture_dispose = function FE3sTexture_dispose(){
   var o = this;
   o._bitmaps = MO.Lang.Object.free(o._bitmaps);
   o._bitmapPacks = MO.Lang.Object.free(o._bitmapPacks);
   o.__base.FE3sResource.dispose.call(o);
}
MO.FE3sTextureBitmap = function FE3sTextureBitmap(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._packCode   = MO.Class.register(o, new MO.AGetter('_packCode'));
   o.packCode    = MO.FE3sTextureBitmap_packCode;
   o.unserialize = MO.FE3sTextureBitmap_unserialize;
   return o;
}
MO.FE3sTextureBitmap_unserialize = function FE3sTextureBitmap_unserialize(p){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, p);
   o._packCode = p.readString();
}
MO.FE3sTextureBitmapPack = function FE3sTextureBitmapPack(o){
   o = MO.Class.inherits(this, o, MO.FE3sObject);
   o._optionCompress = MO.Class.register(o, new MO.AGetter('_optionCompress'));
   o._size           = MO.Class.register(o, new MO.AGetter('_size'));
   o._data           = MO.Class.register(o, new MO.AGetter('_data'));
   o._typeName       = null;
   o._formatName     = null;
   o.construct       = MO.FE3sTextureBitmapPack_construct;
   o.unserialize     = MO.FE3sTextureBitmapPack_unserialize;
   o.dispose         = MO.FE3sTextureBitmapPack_dispose;
   return o;
}
MO.FE3sTextureBitmapPack_construct = function FE3sTextureBitmapPack_construct(){
   var o = this;
   o.__base.FE3sObject.construct.call(o);
   o._size = new MO.SSize2();
}
MO.FE3sTextureBitmapPack_unserialize = function FE3sTextureBitmapPack_unserialize(p){
   var o = this;
   o.__base.FE3sObject.unserialize.call(o, p);
   o._typeName = p.readString();
   o._formatName = p.readString();
   o._size.width = p.readUint16();
   o._size.height = p.readUint16();
   if(o._typeName == 'flat'){
      var c = p.readInt32();
   }else if(o._typeName == 'cube'){
      o._data = new Array();
      for(var i = 0; i < 6; i++){
         var c = p.readInt32();
         var d = o._data[i] = new ArrayBuffer(c);
         p.readBytes(d, 0, c);
      }
   }else{
      throw new MO.TError(o, 'Unserial texture failure ');
   }
}
MO.FE3sTextureBitmapPack_dispose = function FE3sTextureBitmapPack_dispose(){
   var o = this;
   o._data = null;
   o.__base.FE3sObject.dispose.call(o);
}
MO.FE3sTextureConsole = function FE3sTextureConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._textures   = null;
   o.construct   = MO.FE3sTextureConsole_construct;
   o.unserialize = MO.FE3sTextureConsole_unserialize;
   o.load        = MO.FE3sTextureConsole_load;
   o.loadBitmap  = MO.FE3sTextureConsole_loadBitmap;
   o.dispose     = MO.FE3sModelConsole_dispose;
   return o;
}
MO.FE3sTextureConsole_construct = function FE3sTextureConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._textures = new MO.TDictionary();
}
MO.FE3sTextureConsole_unserialize = function FE3sTextureConsole_unserialize(p){
   var o = this;
   var r = MO.Class.create(MO.FE3sTexture);
   r._dataReady = true;
   r.unserialize(p);
   o._textures.set(r.guid(), r);
   return r;
}
MO.FE3sTextureConsole_load = function FE3sTextureConsole_load(p){
   var o = this;
   var s = o._textures;
   var r = s.get(p);
   if(r){
      return r;
   }
   var v = MO.Console.find(MO.FE3sVendorConsole).find('texture');
   var u = v.makeUrl(p);
   r = MO.Class.create(MO.FE3sTexture);
   r.setGuid(p);
   r.setVendor(v);
   r.setSourceUrl(u);
   MO.Console.find(MO.FResourceConsole).load(r);
   s.set(p, r);
   return r;
}
MO.FE3sTextureConsole_loadBitmap = function FE3sTextureConsole_loadBitmap(pg, pc, pf){
   var o = this;
   var v = MO.Console.find(MO.FE3sVendorConsole).find('texture.bitmap');
   v.set('guid', pg);
   v.set('code', pc);
   v.set('format', pf);
   var u = v.makeUrl();
   var g = o._image = MO.Class.create(MO.FImage);
   g.loadUrl(u);
   return g;
}
MO.FE3sTextureConsole_dispose = function FE3sTextureConsole_dispose(){
   var o = this;
   o._textures = MO.Lang.Object.free(o._textures);
   o.__base.FConsole.dispose.call(o);
}
MO.FE3sTheme = function FE3sTheme(o){
   o = MO.Class.inherits(this, o, MO.FE3sResource);
   o._materials  = MO.Class.register(o, new MO.AGetter('_materials'));
   o.find        = MO.FE3sTheme_find;
   o.unserialize = MO.FE3sTheme_unserialize;
   return o;
}
MO.FE3sTheme_find = function FE3sTheme_find(name){
   var materials = this._materials;
   return materials ? materials.get(name) : null;
}
MO.FE3sTheme_unserialize = function FE3sTheme_unserialize(input){
   var o = this;
   var count = input.readInt32();
   if(count > 0){
      var materials = o._materials = new MO.TDictionary();
      for(var n = 0; n < c; n++){
         var material = MO.Class.create(FE3sMaterial);
         material.unserialize(input);
         materials.set(material.code(), material);
      }
   }
}
MO.FE3sThemeConsole = function FE3sThemeConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._path        = '/assets/theme/'
   o._activeTheme = MO.Class.register(o, new MO.AGetter('_activeTheme'));
   o._themes      = null;
   o.construct    = MO.FE3sThemeConsole_construct;
   o.find         = MO.FE3sThemeConsole_find;
   o.select       = MO.FE3sThemeConsole_select;
   return o;
}
MO.FE3sThemeConsole_construct = function FE3sThemeConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._themes = new MO.TDictionary();
}
MO.FE3sThemeConsole_find = function FE3sThemeConsole_find(name){
   var theme = this._activeTheme;
   if(theme == null){
      throw new MO.TError('Active theme is empty.');
   }
   return theme.find(name);
}
MO.FE3sThemeConsole_select = function FE3sThemeConsole_select(name){
   var o = this;
   var theme = o._themes.get(name);
   if(theme == null){
      var url = MO.RBrowser.contentPath(o._path + name + '.ser');
      theme = MO.Class.create(MO.FE3sTheme);
      theme.load(url);
      o._themes.set(name, theme);
   }
   o._activeTheme = theme;
   return theme;
}
MO.FE3sTrack = function FE3sTrack(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._meshCode     = MO.Class.register(o, new MO.AGetter('_meshCode'));
   o._boneIndex    = MO.Class.register(o, new MO.AGetter('_boneIndex'), 0);
   o._frameTick    = MO.Class.register(o, new MO.AGetter('_frameTick'), 0);
   o._matrix       = MO.Class.register(o, new MO.AGetter('_matrix'));
   o._matrixInvert = MO.Class.register(o, new MO.AGetter('_matrixInvert'));
   o._frameCount   = MO.Class.register(o, new MO.AGetter('_frameCount'));
   o._frames       = MO.Class.register(o, new MO.AGetter('_frames'));
   o.construct     = MO.FE3sTrack_construct;
   o.calculate     = MO.FE3sTrack_calculate;
   o.unserialize   = MO.FE3sTrack_unserialize;
   return o;
}
MO.FE3sTrack_construct = function FE3sTrack_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._matrix = new MO.SMatrix3d();
   o._matrixInvert = new MO.SMatrix3d();
}
MO.FE3sTrack_calculate = function FE3sTrack_calculate(info, tick){
   var o = this;
   var frameCount = info.frameCount;
   if(frameCount == 0){
      throw new MO.TError('Frame count is invalid.');
   }
   var beginIndex = info.beginIndex;
   var frameTick = o._frameTick;
   var index = parseInt(tick / frameTick) % frameCount;
   var frames = o._frames;
   var currentFrame = frames.get(beginIndex + index);
   var nextFrame = null;
   if(index < frameCount - 1){
      nextFrame = frames.get(beginIndex + index + 1);
   }else{
      nextFrame = frames.get(beginIndex);
   }
   info.tick = tick;
   info.rate = (tick % frameTick) / frameTick;
   info.currentFrame = currentFrame;
   info.nextFrame = nextFrame;
   return true;
}
MO.FE3sTrack_unserialize = function FE3sTrack_unserialize(input){
   var o = this;
   o._meshCode = input.readString();
   o._boneIndex = input.readUint16();
   o._frameTick = input.readUint16();
   o._matrix.unserialize(input);
   o._matrixInvert.assign(o._matrix);
   o._matrixInvert.invert();
   o._frameCount = input.readInt16();
   o._frames = new MO.TObjects();
}
MO.FE3sVendor = function FE3sVendor(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._contentUrl   = MO.Class.register(o, new MO.AGetSet('_contentUrl'));
   o._parameters   = null;
   o.construct     = MO.FE3sVendor_construct;
   o.get           = MO.FE3sVendor_get;
   o.set           = MO.FE3sVendor_set;
   o.makeSource    = MO.Method.virtual(o, 'makeSource');
   o.makeUrl       = MO.FE3sVendor_makeUrl;
   o.reset         = MO.FE3sVendor_reset;
   o.dispose       = MO.FE3sVendor_dispose;
   return o;
}
MO.FE3sVendor_construct = function FE3sVendor_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._parameters = new MO.TAttributes();
}
MO.FE3sVendor_get = function FE3sVendor_get(n){
   return this._parameters.get(n);
}
MO.FE3sVendor_set = function FE3sVendor_set(n, v){
   this._parameters.set(n, v);
}
MO.FE3sVendor_makeUrl = function FE3sVendor_makeUrl(){
   var o = this;
   var r = o.makeSource();
   if(MO.Runtime.isDebug()){
      if(r.indexOf('?') == -1){
         r += '?';
      }else{
         r += '&';
      }
      r += 'date=' + MO.Lang.Date.format();
   }
   return r;
}
MO.FE3sVendor_reset = function FE3sVendor_reset(){
   this._parameters.clear();
}
MO.FE3sVendor_dispose = function FE3sVendor_dispose(){
   var o = this;
   o._parameters = MO.Lang.Object.dispose(o._parameters);
   o.__base.FObject.dispose.call(o);
}
MO.FE3sVendorConsole = function FE3sVendorConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._setuped     = false;
   o._vendors     = null;
   o.construct    = MO.FE3sVendorConsole_construct;
   o.createVendor = MO.FE3sVendorConsole_createVendor;
   o.register     = MO.FE3sVendorConsole_register;
   o.find         = MO.FE3sVendorConsole_find;
   o.setup        = MO.FE3sVendorConsole_setup;
   return o;
}
MO.FE3sVendorConsole_construct = function FE3sVendorConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._vendors = new MO.TDictionary();
}
MO.FE3sVendorConsole_createVendor = function FE3sVendorConsole_createVendor(c, u){
   var v = MO.Class.create(c);
   v.setContentUrl(u);
   return v;
}
MO.FE3sVendorConsole_register = function FE3sVendorConsole_register(n, p){
   this._vendors.set(n, p);
}
MO.FE3sVendorConsole_find = function FE3sVendorConsole_find(p){
   var o = this;
   if(!o._setuped){
      o.setup('net');
   }
   var v = o._vendors.get(p);
   v.reset();
   return v;
}
MO.FE3sVendorConsole_setup = function FE3sVendorConsole_setup(p){
   var o = this;
   if(p == 'net'){
      o._vendors.set('bitmap', o.createVendor(MO.FE3sVendorNet, MO.RBrowser.hostPath('/cloud.resource.bitmap.wv'), 'guid'));
      o._vendors.set('material', o.createVendor(MO.FE3sVendorNet, MO.RBrowser.hostPath('/cloud.resource.material.wv?do=data'), 'guid'));
      o._vendors.set('mesh', o.createVendor(MO.FE3sVendorNet, MO.RBrowser.hostPath('/cloud.resource.mesh.wv'), 'guid'));
      o._vendors.set('model', o.createVendor(MO.FE3sVendorNet, MO.RBrowser.hostPath('/cloud.resource.model.wv'), 'guid'));
      o._vendors.set('template', o.createVendor(MO.FE3sVendorNet, MO.RBrowser.hostPath('/cloud.resource.template.wv'), 'guid'));
      o._vendors.set('scene', o.createVendor(MO.FE3sVendorNet, MO.RBrowser.hostPath('/cloud.resource.scene.wv'), 'guid|code'));
   }else if(p == 'local'){
      o._vendors.set('bitmap', o.createVendor(MO.FE3sVendorLocal, MO.RBrowser.contentPath('/ar3/bitmap/{guid}.bin')));
      o._vendors.set('material', o.createVendor(MO.FE3sVendorLocal, MO.RBrowser.contentPath('/ar3/material/{guid}.bin')));
      o._vendors.set('mesh', o.createVendor(MO.FE3sVendorLocal, MO.RBrowser.contentPath('/ar3/mesh/{guid}.bin')));
      o._vendors.set('model', o.createVendor(MO.FE3sVendorLocal, MO.RBrowser.contentPath('/ar3/model/{guid}.bin')));
      o._vendors.set('template', o.createVendor(MO.FE3sVendorLocal, MO.RBrowser.contentPath('/ar3/template/{guid}.bin')));
      o._vendors.set('scene', o.createVendor(MO.FE3sVendorLocal, MO.RBrowser.contentPath('/ar3/scene/{guid}.bin')));
   }else{
      throw new MO.TError(o, 'Unknown setup code. (code={1})', p);
   }
   o._setuped = true;
}
MO.FE3sVendorLocal = function FE3sVendorLocal(o){
   o = MO.Class.inherits(this, o, MO.FE3sVendor);
   o.makeSource = MO.FE3sVendorLocal_makeSource;
   return o;
}
MO.FE3sVendorLocal_makeSource = function FE3sVendorLocal_makeSource(){
   var o = this;
   var u = o._contentUrl;
   var s = o._parameters;
   var c = s.count();
   for(var i = 0; i < c; i++){
      var n = s.name(i);
      var v = s.value(i);
      u = MO.Lang.String.replace(u, '{' + n + '}', v);
   }
   return u;
}
MO.FE3sVendorNet = function FE3sVendorNet(o){
   o = MO.Class.inherits(this, o, MO.FE3sVendor);
   o.makeSource = MO.FE3sVendorNet_makeSource;
   return o;
}
MO.FE3sVendorNet_makeSource = function FE3sVendorNet_makeSource(){
   var o = this;
   var url = o._contentUrl;
   if(url.indexOf('?') == -1){
      url += '?';
   }else{
      url += '&';
   }
   var parameters = o._parameters;
   var count = parameters.count();
   var first = false;
   for(var i = 0; i < count; i++){
      var name = parameters.name(i);
      var value = parameters.value(i);
      if(!MO.Lang.String.isEmpty(value)){
         if(first){
            url += '&';
         }else{
            first = true;
         }
         url += name + '=' + value;
      }
   }
   return url;
}
MO.SE3rPlayInfo = function SE3rPlayInfo(){
   var o = this;
   o.tick         = 0;
   o.playRate     = 1.0;
   o.beginIndex   = 0;
   o.endIndex     = 0;
   o.frameCount   = 0;
   o.currentFrame = null;
   o.nextFrame    = null;
   o.rate         = 1.0;
   o.alpha        = 1.0;
   o.translation  = new MO.SPoint3();
   o.quaternion   = new MO.SQuaternion();
   o.scale        = new MO.SVector3();
   o.matrix       = new MO.SMatrix3d();
   o.update       = MO.SE3rPlayInfo_update;
   return o;
}
MO.SE3rPlayInfo_update = function SE3rPlayInfo_update(){
   var o = this;
   var currentFrame = o.currentFrame;
   if(!currentFrame){
      return false;
   }
   var nextFrame = o.nextFrame;
   if(!nextFrame){
      return false;
   }
   var matrix = o.matrix;
   var currentTranslation = currentFrame.translation();
   var currentQuaternion = currentFrame.quaternion();
   var currentScale = currentFrame.scale();
   var rate = o.rate;
   if((rate > 0) && (rate < 1)){
      o.translation.slerp(currentTranslation, nextFrame.translation(), rate);
      o.quaternion.slerp(currentQuaternion, nextFrame.quaternion(), rate);
      o.scale.slerp(currentScale, nextFrame.scale(), rate);
      matrix.build(o.translation, o.quaternion, o.scale);
   }else{
      matrix.build(currentTranslation, currentQuaternion, currentScale);
   }
   return true;
}
MO.FE3rAnimation = function FE3rAnimation(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._valid       = false;
   o._baseTick    = 0;
   o._currentTick = 0;
   o._lastTick    = 0;
   o._playRate    = 1.0;
   o._tracks      = MO.Class.register(o, new AGetter('_tracks'));
   o._resource    = MO.Class.register(o, new AGetter('_resource'));
   o._playInfo    = null;
   o.construct    = MO.FE3rAnimation_construct;
   o.findTrack    = MO.FE3rAnimation_findTrack;
   o.loadResource = MO.FE3rAnimation_loadResource;
   o.record       = MO.FE3rAnimation_record;
   o.process      = MO.Method.virtual(o, 'process');
   o.dispose      = MO.FE3rAnimation_dispose;
   return o;
}
MO.FE3rAnimation_construct = function FE3rAnimation_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._playInfo = new MO.SE3rPlayInfo();
}
MO.FE3rAnimation_findTrack = function FE3rAnimation_findTrack(p){
   var o = this;
   var ts = o._tracks;
   var c = ts.count();
   for(var i = 0; i < c; i++){
      var t = ts.get(i);
      if(t.boneIndex() == p){
         return t;
      }
   }
   return null;
}
MO.FE3rAnimation_loadResource = function FE3rAnimation_loadResource(resource){
   var o = this;
   var frameCount = resource.frameCount();
   o._resource = resource;
   var trackResources = resource.tracks();
   if(trackResources){
      var tracks = o._tracks = new MO.TObjects();
      var count = trackResources.count();
      for(var i = 0; i < count; i++){
         var trackResource = trackResources.at(i);
         var track = MO.Class.create(MO.FE3rTrack);
         track._animation = o;
         track.loadResource(trackResource);
         tracks.push(track);
      }
   }
   if(frameCount > 0){
      var info = o._playInfo;
      info.beginIndex = 0;
      info.endIndex = (frameCount > 0) ? frameCount - 1 : 0;
      info.frameCount = frameCount;
      o._valid = true;
   }
}
MO.FE3rAnimation_record = function FE3rAnimation_record(){
   var o = this;
   var t = RTimer.current();
   if(o._lastTick == 0){
      o._lastTick = t;
   }
   o._currentTick = (t - o._lastTick + o._baseTick) * o._playRate;
}
MO.FE3rAnimation_dispose = function FE3rAnimation_dispose(){
   var o = this;
   o._tracks = null;
   o._resource = null;
   o.__base.FObject.dispose.call(o);
}
MO.FE3rBitmap = function FE3rBitmap(o){
   o = MO.Class.inherits(this, o, MO.FE3rObject);
   o._pack        = null;
   o.construct    = MO.FE3rBitmap_construct;
   o.testReady    = MO.FE3rBitmap_testReady;
   o.texture      = MO.FE3rBitmap_texture;
   o.loadResource = MO.FE3rBitmap_loadResource;
   o.dispose      = MO.FE3rBitmap_dispose;
   return o;
}
MO.FE3rBitmap_construct = function FE3rBitmap_construct(){
   var o = this;
   o.__base.FE3rObject.construct.call(o);
}
MO.FE3rBitmap_testReady = function FE3rBitmap_testReady(){
   return this._pack.testReady();
}
MO.FE3rBitmap_texture = function FE3rBitmap_texture(){
   return this._pack.texture();
}
MO.FE3rBitmap_loadResource = function FE3rBitmap_loadResource(resource){
   var o = this;
   o._resource = resource;
   o._guid = resource.guid();
   o._code = resource.code();
}
MO.FE3rBitmap_dispose = function FE3rBitmap_dispose(){
   var o = this;
   o.__base.FE3rObject.dispose.call(o);
}
MO.FE3rBitmapConsole = function FE3rBitmapConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd  = MO.EScope.Local;
   o._bitmaps  = MO.Class.register(o, new AGetter('_bitmaps'));
   o._dataUrl  = '/cloud.resource.material.wv'
   o.construct = MO.FE3rBitmapConsole_construct;
   o.load      = MO.FE3rBitmapConsole_load;
   o.loadUrl   = MO.FE3rBitmapConsole_loadUrl;
   return o;
}
MO.FE3rBitmapConsole_construct = function FE3rBitmapConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._bitmaps = new MO.TDictionary();
}
MO.FE3rBitmapConsole_load = function FE3rBitmapConsole_load(context, guid, code){
   var o = this;
   var flag = guid + '|' + code;
   var bitmap = o._bitmaps.get(flag);
   if(bitmap){
      return bitmap;
   }
   var url = MO.Window.Browser.hostPath(o._dataUrl + '?guid=' + guid + '&code=' + code);
   MO.Logger.info(o, 'Load bitmap. (url={1})', url);
   if(code == 'environment'){
      bitmap = context.createObject(MO.FE3rBitmapCubePack);
   }else{
      bitmap = context.createObject(MO.FE3rBitmapFlatPack);
   }
   o._bitmaps.set(flag, bitmap);
   return bitmap;
}
MO.FE3rBitmapConsole_loadUrl = function FE3rBitmapConsole_loadUrl(context, url){
   var o = this;
   var bitmap = o._bitmaps.get(url);
   if(bitmap){
      return bitmap;
   }
   var loadUrl = MO.Window.Browser.contentPath(url);
   MO.Logger.info(o, 'Load bitmap from url. (url={1})', loadUrl);
   var bitmap = context.createObject(MO.FE3rBitmap);
   bitmap.loadUrl(url);
   o._bitmaps.set(url, bitmap);
   return bitmap;
}
MO.FE3rBitmapCubePack = function FE3rBitmapCubePack(o){
   o = MO.Class.inherits(this, o, MO.FE3rBitmapPack);
   o._images   = MO.Class.register(o, new MO.AGetter('_images'));
   o.onLoad    = MO.FE3rBitmapCubePack_onLoad;
   o.construct = MO.FE3rBitmapCubePack_construct;
   o.loadUrl   = MO.FE3rBitmapCubePack_loadUrl;
   o.dispose   = MO.FE3rBitmapCubePack_dispose;
   return o;
}
MO.FE3rBitmapCubePack_onLoad = function FE3rBitmapCubePack_onLoad(p){
   var o = this;
   var context = o._graphicContext;
   var images = o._images;
   var capability = MO.Window.Browser.capability();
   for(var i = 0; i < 6; i++){
      if(!images.at(i).testReady()){
         return;
      }
   }
   var texture = o._texture = context.createCubeTexture();
   texture.upload(images.at(0), images.at(1), images.at(2), images.at(3), images.at(4), images.at(5));
   for(var i = 0; i < 6; i++){
      var image = images.at(i);
      image.dispose();
   }
   o._images = MO.Lang.Object.dispose(o._images);
   o._dataReady = true;
   o._ready = true;
}
MO.FE3rBitmapCubePack_construct = function FE3rBitmapCubePack_construct(){
   var o = this;
   o.__base.FE3rBitmapPack.construct.call(o);
}
MO.FE3rBitmapCubePack_loadUrl = function FE3rBitmapCubePack_loadUrl(url){
   var o = this;
   var images = o._images = new MO.TObjects();
   for(var i = 0; i < 6; i++){
      var image = MO.Class.create(MO.FImage);
      image._index = i;
      image.setOptionAlpha(false);
      image.addLoadListener(o, o.onLoad);
      image.loadUrl(url + "&index=" + i);
      images.push(image);
   }
}
MO.FE3rBitmapCubePack_dispose = function FE3rBitmapCubePack_dispose(){
   var o = this;
   o._images = MO.Lang.Object.dispose(o._images, true);
   o.__base.FE3rBitmapPack.dispose.call(o);
}
MO.FE3rBitmapFlatPack = function FE3rBitmapFlatPack(o){
   o = MO.Class.inherits(this, o, MO.FE3rBitmapPack);
   o._image    = MO.Class.register(o, new MO.AGetter('_image'));
   o.onLoad    = MO.FE3rBitmapFlatPack_onLoad;
   o.construct = MO.FE3rBitmapFlatPack_construct;
   o.loadUrl   = MO.FE3rBitmapFlatPack_loadUrl;
   o.dispose   = MO.FE3rBitmapFlatPack_dispose;
   return o;
}
MO.FE3rBitmapFlatPack_onLoad = function FE3rBitmapFlatPack_onLoad(event){
   var o = this;
   var texture = o._texture = o._graphicContext.createFlatTexture();
   texture.upload(o._image);
   texture.makeMipmap();
   o._image = MO.Lang.Object.dispose(o._image);
   o._dataReady = true;
}
MO.FE3rBitmapFlatPack_construct = function FE3rBitmapFlatPack_construct(){
   var o = this;
   o.__base.FE3rBitmapPack.construct.call(o);
}
MO.FE3rBitmapFlatPack_loadUrl = function FE3rBitmapFlatPack_loadUrl(url){
   var o = this;
   var image = o._image = MO.Class.create(MO.FImage);
   image.addLoadListener(o, o.onLoad);
   image.loadUrl(url);
}
MO.FE3rBitmapFlatPack_dispose = function FE3rBitmapFlatPack_dispose(){
   var o = this;
   o._image = MO.Lang.Object.dispose(o._image);
   o.__base.FE3rBitmapPack.dispose.call(o);
}
MO.FE3rBitmapPack = function FE3rBitmapPack(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject, MO.MLinkerResource);
   o._texture   = MO.Class.register(o, new MO.AGetter('_texture'));
   o._dataReady = false;
   o._ready     = false;
   o.onLoad     = MO.Method.virtual(o, 'onLoad');
   o.construct  = MO.FE3rBitmapPack_construct;
   o.testReady  = MO.FE3rBitmapPack_testReady;
   o.loadUrl    = MO.Method.virtual(o, 'loadUrl');
   o.dispose    = MO.FE3rBitmapPack_dispose;
   return o;
}
MO.FE3rBitmapPack_construct = function FE3rBitmapPack_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.FE3rBitmapPack_testReady = function FE3rBitmapPack_testReady(){
   var o = this;
   if(o._dataReady){
      o._ready = o._texture.isValid();
   }
   return o._ready;
}
MO.FE3rBitmapPack_dispose = function FE3rBitmapPack_dispose(){
   var o = this;
   o._ready = false;
   o._dataReady = false;
   o.__base.FObject.dispose.call(o);
}
MO.FE3rBone = function FE3rBone(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._matrix        = MO.Class.register(o, new AGetter('_matrix'));
   o._boneResource  = MO.Class.register(o, new AGetter('_boneResource'));
   o._trackResource = MO.Class.register(o, new AGetter('_trackResource'));
   o.construct      = MO.FE3rBone_construct;
   o.loadResource   = MO.FE3rBone_loadResource;
   o.update         = MO.FE3rBone_update;
   o.dispose        = MO.FE3rBone_dispose;
   return o;
}
MO.FE3rBone_construct = function FE3rBone_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._matrix = new MO.SMatrix3d();
}
MO.FE3rBone_loadResource = function FE3rBone_loadResource(p){
   var o = this;
   o._boneResource = p;
   o._trackResource = p.track();
}
MO.FE3rBone_update = function FE3rBone_update(info, tick){
   var o = this;
   var resource = o._trackResource;
   resource.calculate(info, tick);
   info.update();
   var matrix = o._matrix;
   matrix.assign(resource.matrixInvert());
   matrix.append(info.matrix);
}
MO.FE3rBone_dispose = function FE3rBone_dispose(){
   var o = this;
   o._boneResource = null;
   o._trackResource = null;
   o.__base.FG3dBone.dispose.call(o);
}
MO.FE3rDynamicMesh = function FE3rDynamicMesh(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o._model            = null;
   o._optionMerge      = true;
   o._vertexPosition   = 0;
   o._vertexTotal      = 0;
   o._indexPosition    = 0;
   o._indexTotal       = 0;
   o._mergeRenderables = null;
   o.construct         = MO.FE3rDynamicMesh_construct;
   o.mergeCount        = MO.FE3rDynamicMesh_mergeCount;
   o.mergeStride       = MO.FE3rDynamicMesh_mergeStride;
   o.mergeMaxCount     = MO.FE3rDynamicMesh_mergeMaxCount;
   o.mergeRenderables  = MO.FE3rDynamicMesh_mergeRenderables;
   o.syncVertexBuffer  = MO.FE3rDynamicMesh_syncVertexBuffer;
   o.mergeRenderable   = MO.FE3rDynamicMesh_mergeRenderable;
   o.mergeVertexBuffer = MO.FE3rDynamicMesh_mergeVertexBuffer;
   o.mergeIndexBuffer  = MO.FE3rDynamicMesh_mergeIndexBuffer;
   o.build             = MO.FE3rDynamicMesh_build;
   return o;
}
MO.FE3rDynamicMesh_construct = function FE3rDynamicMesh_construct(){
   var o = this;
   o.__base.FE3dRenderable.construct.call(o);
   o._mergeRenderables = new MO.TObjects();
}
MO.FE3rDynamicMesh_mergeCount = function FE3rDynamicMesh_mergeCount(){
   return this._mergeRenderables.count();
}
MO.FE3rDynamicMesh_mergeStride = function FE3rDynamicMesh_mergeStride(){
   return 4;
}
MO.FE3rDynamicMesh_mergeMaxCount = function FE3rDynamicMesh_mergeMaxCount(){
   return this._model._mergeMaxCount;
}
MO.FE3rDynamicMesh_mergeRenderables = function FE3rDynamicMesh_mergeRenderables(){
   return this._mergeRenderables;
}
MO.FE3rDynamicMesh_syncVertexBuffer = function FE3rDynamicMesh_syncVertexBuffer(renderableBuffer){
   var o = this;
   var resource = renderableBuffer._resource;
   var code = resource.code();
   var buffer = o._vertexBuffers.get(code);
   if(!buffer){
      var formatCd = renderableBuffer.formatCd();
      var vertexTotal = o._vertexTotal;
      buffer = o._graphicContext.createVertexBuffer();
      buffer.setCode(code);
      buffer.setFormatCd(formatCd);
      buffer.setStride(renderableBuffer.stride());
      switch(formatCd){
         case MO.EG3dAttributeFormat.Float1:
            buffer._data = new Float32Array(1 * vertexTotal);
            break;
         case MO.EG3dAttributeFormat.Float2:
            buffer._data = new Float32Array(2 * vertexTotal);
            break;
         case MO.EG3dAttributeFormat.Float3:
            buffer._data = new Float32Array(3 * vertexTotal);
            break;
         case MO.EG3dAttributeFormat.Float4:
            buffer._data = new Float32Array(4 * vertexTotal);
            break;
         case MO.EG3dAttributeFormat.Byte4:
         case MO.EG3dAttributeFormat.Byte4Normal:
            buffer._data = new Uint8Array(4 * vertexTotal);
            break;
         default:
            throw new MO.TError("Unknown code");
      }
      o._vertexBuffers.set(code, buffer);
   }
   return buffer;
}
MO.FE3rDynamicMesh_mergeRenderable = function FE3rDynamicMesh_mergeRenderable(renderable){
   var o = this;
   var context = o._graphicContext;
   var capability = context.capability();
   var vertexCount = renderable.vertexCount();
   var indexBuffer = renderable.indexBuffers().first();
   var indexCount = indexBuffer.count();
   var mergeCount = capability.mergeCount;
   if(o._mergeRenderables.count() >= mergeCount){
      return false;
   }
   var vertexTotal = o._vertexTotal + vertexCount;
   if(capability.optionIndex32){
      if(vertexTotal > MO.Lang.Integer.MAX_UINT32){
         return false;
      }
   }else{
      if(vertexTotal > MO.Lang.Integer.MAX_UINT16){
         return false;
      }
   }
   o._vertexTotal += vertexCount;
   o._indexTotal += indexCount;
   o._mergeRenderables.push(renderable);
   return true;
}
MO.FE3rDynamicMesh_mergeVertexBuffer = function FE3rDynamicMesh_mergeVertexBuffer(renderable, code, vertexBuffer, resource){
   var o = this;
   var position = o._vertexPosition;
   var data = vertexBuffer._data;
   var dataCount = resource._dataCount;
   switch(code){
      case 'position':
         var d = new Float32Array(resource._data);
         MO.Lang.Float.copy(data, 3 * position, d, 0, 3 * dataCount);
         break;
      case 'coord':
         var d = new Float32Array(resource._data);
         MO.Lang.Float.copy(data, 2 * position, d, 0, 2 * dataCount);
         break;
      case 'color':
      case "normal":
      case "binormal":
      case "tangent":
      case "bone_index":
      case "bone_weight":
         var d = new Uint8Array(resource._data);
         MO.Lang.Byte.copy(data, 4 * position, d, 0, 4 * dataCount);
         break;
      default:
         throw new MO.TError("Unknown code");
   }
}
MO.FE3rDynamicMesh_mergeIndexBuffer = function FE3rDynamicMesh_mergeIndexBuffer(resource){
   var o = this;
   var vp = o._vertexPosition;
   var ip = o._indexPosition;
   var id = o._indexBuffer._data;
   var rd = new Uint16Array(resource._data);
   var rc = 3 * resource._dataCount;
   for(var i = 0; i < rc; i++){
      id[ip++] = vp + rd[i]
   }
}
MO.FE3rDynamicMesh_build = function FE3rDynamicMesh_build(){
   var o = this;
   var context = o._graphicContext;
   var capability = context.capability();
   var vertexTotal = o._vertexTotal;
   var indexTotal = o._indexTotal;
   var rs = o._mergeRenderables;
   var rc = rs.count();
   var rf = rs.first();
   o._material = rf.material();
   o._textures = rf.textures();
   var instanceVertexBuffer = o._instanceVertexBuffer = o._graphicContext.createVertexBuffer();
   instanceVertexBuffer.setCode('instance');
   instanceVertexBuffer.setStride(4);
   instanceVertexBuffer.setFormatCd(MO.EG3dAttributeFormat.Float1);
   var vdi = instanceVertexBuffer._data = new Float32Array(vertexTotal);
   o._vertexBuffers.set(instanceVertexBuffer.code(), instanceVertexBuffer);
   var indexBuffer = o._indexBuffer = context.createIndexBuffer(MO.FE3rIndexBuffer);
   if(capability.optionIndex32){
      indexBuffer.setStrideCd(MO.EG3dIndexStride.Uint32);
      indexBuffer._data = new Uint32Array(indexTotal);
   }else{
      indexBuffer.setSstrideCd(MO.EG3dIndexStride.Uint16);
      indexBuffer._data = new Uint16Array(indexTotal);
   }
   indexBuffer._count = indexTotal;
   o.pushIndexBuffer(indexBuffer);
   for(var i = 0; i < rc; i++){
      var renderable = rs.getAt(i);
      var vc = renderable.vertexCount();
      var vertexBuffers = renderable.vertexBuffers();
      var vertexBufferCount = vertexBuffers.count();
      for(var vbi = 0; vbi < vertexBufferCount; vbi++){
         var vb = vertexBuffers.at(vbi);
         var vertexBufferResource = vb._resource;
         var vbrc = vertexBufferResource.code();
         var vertexBuffer = o.syncVertexBuffer(vb);
         o.mergeVertexBuffer(renderable, vbrc, vertexBuffer, vertexBufferResource);
      }
      MO.Lang.Float.fill(vdi, o._vertexPosition, vc, i);
      var indexBuffer = renderable.indexBuffers().first();
      var ic = indexBuffer.count();
      var indexBufferResource = indexBuffer._resource;
      o.mergeIndexBuffer(indexBufferResource);
      o._vertexPosition += vc;
      o._indexPosition += ic;
   }
   var vertexBuffers = o._vertexBuffers;
   var vertexBufferCount = vertexBuffers.count();
   for(var i = 0; i < vertexBufferCount; i++){
      var vertexBuffer = vertexBuffers.at(i);
      vertexBuffer.upload(vertexBuffer._data, vertexBuffer.stride(), vertexTotal);
      vertexBuffer._data = null;
   }
   o._indexBuffer.upload(o._indexBuffer._data, indexTotal);
   o._indexBuffer._data = null;
}
MO.FE3rDynamicModel = function FE3rDynamicModel(o){
   o = MO.Class.inherits(this, o, MO.FE3rObject);
   o._renderables   = MO.Class.register(o, new MO.AGetter('_renderables'));
   o._mergeMaxCount = MO.Class.register(o, new MO.AGetter('_mergeMaxCount'));
   o._mergeStride   = MO.Class.register(o, new MO.AGetter('_mergeStride'), 4);
   o._meshes        = MO.Class.register(o, new MO.AGetter('_meshes'));
   o._updateDate    = 0;
   o.construct      = MO.FE3rDynamicModel_construct;
   o.createMesh     = MO.FE3rDynamicModel_createMesh;
   o.pushRenderable = MO.FE3rDynamicModel_pushRenderable;
   o.build          = MO.FE3rDynamicModel_build;
   o.update         = MO.FE3rDynamicModel_update;
   return o;
}
MO.FE3rDynamicModel_construct = function FE3rDynamicModel_construct(){
   var o = this;
   o.__base.FE3rObject.construct.call(o);
   o._renderables = new MO.TObjects();
   o._meshes = new MO.TObjects();
}
MO.FE3rDynamicModel_createMesh = function FE3rDynamicModel_createMesh(){
   var o = this;
   var mesh = MO.Class.create(MO.FE3rDynamicMesh);
   mesh._model = o;
   mesh.linkGraphicContext(o);
   o._meshes.push(mesh);
   return mesh;
}
MO.FE3rDynamicModel_pushRenderable = function FE3rDynamicModel_pushRenderable(p){
   this._renderables.push(p);
}
MO.FE3rDynamicModel_build = function FE3rDynamicModel_build(){
   var o = this;
   var renderables = o._renderables;
   var meshes = o._meshes;
   var count = renderables.count();
   if(count > 0){
      var mesh = o.createMesh();
      for(var i = 0; i < count; i++){
         var renderable = renderables.at(i);
         if(!mesh.mergeRenderable(renderable)){
            mesh = o.createMesh();
            if(!mesh.mergeRenderable(renderable)){
               throw new MO.TError(o, 'Merge renderable failure.');
            }
         }
      }
   }
   var mergeMax = 0;
   var count = meshes.count();
   for(var i = 0; i < count; i++){
      var mesh = meshes.at(i);
      mesh.build();
      mergeMax = Math.max(mergeMax, mesh.mergeCount());
   }
   o._mergeMaxCount = mergeMax;
}
MO.FE3rDynamicModel_update = function FE3rDynamicModel_update(p){
   var o = this;
   o._updateDate = MO.Timer.current();
}
MO.FE3rGeometry = function FE3rGeometry(o){
   o = MO.Class.inherits(this, o, MO.FE3rObject);
   o._ready            = false;
   o._resource         = MO.Class.register(o, new AGetSet('_resource'));
   o._vertexCount      = MO.Class.register(o, new AGetter('_vertexCount'), 0);
   o._vertexBuffers    = MO.Class.register(o, new AGetter('_vertexBuffers'));
   o._indexBuffer      = MO.Class.register(o, new AGetter('_indexBuffer'));
   o._indexBuffers     = MO.Class.register(o, new AGetter('_indexBuffers'));
   o._resourceMaterial = MO.Class.register(o, new AGetter('_resourceMaterial'));
   o._material         = MO.Class.register(o, new AGetter('_material'));
   o._textures         = MO.Class.register(o, new AGetter('_textures'));
   o.construct         = MO.FE3rGeometry_construct;
   o.testReady         = MO.FE3rGeometry_testReady;
   o.findVertexBuffer  = MO.FE3rGeometry_findVertexBuffer;
   o.findTexture       = MO.FE3rGeometry_findTexture;
   o.loadResource      = MO.FE3rGeometry_loadResource;
   o.processLoad       = MO.FE3rGeometry_processLoad;
   return o;
}
MO.FE3rGeometry_construct = function FE3rGeometry_construct(){
   var o = this;
   o.__base.FE3rObject.construct.call(o);
   o._vertexBuffers = new MO.TDictionary();
   o._indexBuffers = new MO.TObjects();
}
MO.FE3rGeometry_testReady = function FE3rGeometry_testReady(){
   var o = this;
   if(!o._ready){
      if(!o._resource.testReady()){
         return false;
      }
      var ts = o._textures;
      if(ts != null){
         var c = ts.count();
         for(var i = 0; i < c; i++){
            var t = ts.value(i);
            if(!t.testReady()){
               return false;
            }
         }
      }
   }
   return o._ready;
}
MO.FE3rGeometry_guid = function FE3rGeometry_guid(){
   return this._resource.guid();
}
MO.FE3rGeometry_findVertexBuffer = function FE3rGeometry_findVertexBuffer(code){
   return this._vertexBuffers.get(code);
}
MO.FE3rGeometry_findTexture = function FE3rGeometry_findTexture(p){
   return this._textures.get(p);
}
MO.FE3rGeometry_loadResource = function FE3rGeometry_loadResource(resource){
   var o = this;
   var context = o._graphicContext;
   o._resource = resource;
   var streamResources = resource.streams();
   var streamCount = streamResources.count();
   for(var i = 0; i < streamCount; i++){
      var streamResource = streamResources.at(i);
      var code = streamResource.code();
      var dataCount = streamResource.dataCount();
      var data = streamResource.data();
      if((code == 'index16') || (code == 'index32')){
         var buffer = o._indexBuffer = context.createIndexBuffer(FE3rIndexBuffer);
         buffer._resource = streamResource;
         var dataCd = streamResource.elementDataCd();
         if(dataCd == MO.EDataType.Uint16){
            buffer.setStrideCd(MO.EG3dIndexStride.Uint16);
         }else if(dataCd == MO.EDataType.Uint32){
            buffer.setStrideCd(MO.EG3dIndexStride.Uint32);
         }else{
            throw new MO.TError(o, "Unknown data type.");
         }
         buffer.upload(data, 3 * dataCount);
         o._indexBuffers.push(buffer);
      }else{
         var buffer = context.createVertexBuffer(FE3rVertexBuffer);
         buffer.setCode(code);
         buffer._resource = streamResource;
         buffer._vertexCount = dataCount;
         var pixels = null;
         switch(code){
            case "position":
               pixels = new Float32Array(data);
               buffer.setFormatCd(EG3dAttributeFormat.Float3);
               o._vertexCount = dataCount;
               break;
            case "coord":
               pixels = new Float32Array(data);
               buffer.setFormatCd(EG3dAttributeFormat.Float2);
               break;
            case "color":
               pixels = new Uint8Array(data);
               buffer.setFormatCd(EG3dAttributeFormat.Byte4Normal);
               break;
            case "normal":
            case "binormal":
            case "tangent":
               pixels = new Uint8Array(data);
               buffer.setFormatCd(EG3dAttributeFormat.Byte4Normal);
               break;
            default:
               throw new TError(o, "Unknown code");
         }
         buffer.upload(pixels, streamResource._dataStride, dataCount);
         o._vertexBuffers.set(code, buffer);
      }
   }
   o._ready = true;
}
MO.FE3rGeometry_processLoad = function FE3rGeometry_processLoad(){
   var o = this;
   if(o._dataReady){
      return true;
   }
   if(!o._resource.testReady()){
      return false;
   }
   o.loadResource(o._resource);
   return true;
}
MO.FE3rIndexBuffer = function FE3rIndexBuffer(o){
   o = MO.Class.inherits(this, o, MO.FWglIndexBuffer, MO.MLinkerResource);
   o.dispose = MO.FE3rIndexBuffer_dispose;
   return o;
}
MO.FE3rIndexBuffer_dispose = function FE3rIndexBuffer_dispose(){
   var o = this;
   o.__base.MLinkerResource.dispose.call(o);
   o.__base.FWglIndexBuffer.dispose.call(o);
}
MO.FE3rInstanceMesh = function FE3rInstanceMesh(o){
   o = MO.Class.inherits(this, o, MO.FE3rMesh);
   o._merges         = null;
   o.construct       = MO.FE3rInstanceMesh_construct;
   o.mergeRenderable = MO.FE3rInstanceMesh_mergeRenderable;
   o.build           = MO.FE3rInstanceMesh_build;
   return o;
}
MO.FE3rInstanceMesh_construct = function FE3rInstanceMesh_construct(){
   var o = this;
   o.__base.FE3rMesh.construct.call(o);
   o._merges = new MO.TObjects();
}
MO.FE3rInstanceMesh_mergeRenderable = function FE3rInstanceMesh_mergeRenderable(p){
   this._merges.push(p);
}
MO.FE3rInstanceMesh_build = function FE3rInstanceMesh_build(){
}
MO.FE3rMaterial = function FE3rMaterial(o){
   o = MO.Class.inherits(this, o, MO.FG3dMaterial, MO.MGraphicObject, MO.MLinkerResource);
   o._ready         = false;
   o._visible       = MO.Class.register(o, new MO.AGetSet('_visible'), true);
   o._guid          = MO.Class.register(o, new MO.AGetSet('_guid'));
   o._bitmaps       = MO.Class.register(o, new MO.AGetter('_bitmaps'));
   o._reference     = MO.Class.register(o, new MO.AGetter('_reference'));
   o.findBitmap     = MO.FE3rMaterial_findBitmap;
   o.testReady      = MO.FE3rMaterial_testReady;
   o.testVisible    = MO.FE3rMaterial_testVisible;
   o.loadResource   = MO.FE3rMaterial_loadResource;
   o.reloadResource = MO.FE3rMaterial_reloadResource;
   o.load           = MO.FE3rMaterial_load;
   return o;
}
MO.FE3rMaterial_findBitmap = function FE3rMaterial_findBitmap(code){
   return this._bitmaps.get(code);
}
MO.FE3rMaterial_testReady = function FE3rMaterial_testReady(){
   var o = this;
   if(!o._ready){
      var bitmaps = o._bitmaps;
      if(bitmaps){
         var count = bitmaps.count();
         for(var i = 0; i < count; i++){
            var bitmap = bitmaps.at(i);
            if(!bitmap.testReady()){
               return false;
            }
         }
      }
      o._ready = true;
   }
   return o._ready;
}
MO.FE3rMaterial_testVisible = function FE3rMaterial_testVisible(){
   var o = this;
   var visible = o._visible;
   if(visible && o._reference){
      visible = o._reference.testVisible();
   }
   return visible;
}
MO.FE3rMaterial_loadResource = function FE3rMaterial_loadResource(resource){
   var o = this;
   o._guid = resource.guid();
   o._resource = resource;
   o._info.calculate(resource.info());
   o._dirty = true;
}
MO.FE3rMaterial_reloadResource = function FE3rMaterial_reloadResource(){
   var o = this;
   o._info.calculate(o._resource.info());
   o._dirty = true;
}
MO.FE3rMaterial_load= function FE3rMaterial_load(){
   var o = this;
   var resource = o._resource;
   var bitmapResources = resource.bitmaps();
   if(bitmapResources){
      var bitmapConsole = MO.Console.find(MO.FE3rBitmapConsole)
      var bitmaps = o._bitmaps = new MO.TDictionary();
      var count = bitmapResources.count();
      for(var i = 0; i < count; i++){
         var bitmapResource = bitmapResources.at(i);
         var bitmapCode = bitmapResource.code();
         var bitmapPackResource = bitmapResource.bitmapPack();
         var packCode = bitmapPackResource.code();
         var bitmapPack = bitmapConsole.load(o, o._guid, packCode);
         var bitmap = MO.Class.create(MO.FE3rBitmap);
         bitmap._pack  = bitmapPack;
         bitmap.loadResource(bitmapResource);
         bitmaps.set(bitmapCode, bitmap);
      }
   }
}
MO.FE3rMaterialConsole = function FE3rMaterialConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd   = MO.EScope.Local;
   o._materials = null;
   o.construct  = MO.FE3rMaterialConsole_construct;
   o.load       = MO.FE3rMaterialConsole_load;
   return o;
}
MO.FE3rMaterialConsole_construct = function FE3rMaterialConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._materials = new MO.TDictionary();
}
MO.FE3rMaterialConsole_load = function FE3rMaterialConsole_load(context, guid){
   var o = this;
   if(!context){
      throw new MO.TError('Graphics context is empty');
   }
   if(!guid){
      throw new MO.TError('Material guid is empty');
   }
   var material = o._materials.get(guid);
   if(material){
      return material;
   }
   var resource = MO.Console.find(MO.FE3sMaterialConsole).find(guid);
   material = MO.Class.create(MO.FE3rMaterial);
   material.linkGraphicContext(context);
   material.loadResource(resource);
   material.load();
   o._materials.set(guid, material);
   return material;
}
MO.FE3rMesh = function FE3rMesh(o){
   o = MO.Class.inherits(this, o, MO.FE3rObject);
   o._ready            = false;
   o._resource         = MO.Class.register(o, new AGetSet('_resource'));
   o._vertexCount      = MO.Class.register(o, new AGetter('_vertexCount'), 0);
   o._vertexBuffers    = MO.Class.register(o, new AGetter('_vertexBuffers'));
   o._indexBuffer      = MO.Class.register(o, new AGetter('_indexBuffer'));
   o._resourceMaterial = MO.Class.register(o, new AGetter('_resourceMaterial'));
   o._material         = MO.Class.register(o, new AGetter('_material'));
   o._textures         = MO.Class.register(o, new AGetter('_textures'));
   o.construct         = MO.FE3rMesh_construct;
   o.testReady         = MO.FE3rMesh_testReady;
   o.findVertexBuffer  = MO.FE3rMesh_findVertexBuffer;
   o.findTexture       = MO.FE3rMesh_findTexture;
   o.loadResource      = MO.FE3rMesh_loadResource;
   o.processLoad       = MO.FE3rMesh_processLoad;
   return o;
}
MO.FE3rMesh_construct = function FE3rMesh_construct(){
   var o = this;
   o.__base.FE3rObject.construct.call(o);
   o._vertexBuffers = new TObjects();
}
MO.FE3rMesh_testReady = function FE3rMesh_testReady(){
   var o = this;
   if(!o._ready){
      if(!o._resource.testReady()){
         return false;
      }
      var ts = o._textures;
      if(ts != null){
         var c = ts.count();
         for(var i = 0; i < c; i++){
            var t = ts.value(i);
            if(!t.testReady()){
               return false;
            }
         }
      }
   }
   return o._ready;
}
MO.FE3rMesh_guid = function FE3rMesh_guid(){
   return this._resource.guid();
}
MO.FE3rMesh_findVertexBuffer = function FE3rMesh_findVertexBuffer(p){
   var o = this;
   var vs = o._vertexBuffers;
   var c = vs.count();
   for(var n = 0; n < c; n++){
      var v = vs.get(n);
      if(v.name() == p){
         return v;
      }
   }
   return null;
}
MO.FE3rMesh_findTexture = function FE3rMesh_findTexture(p){
   return this._textures.get(p);
}
MO.FE3rMesh_loadResource = function FE3rMesh_loadResource(resource){
   var o = this;
   var context = o._graphicContext;
   o._resource = resource;
   var streamResources = resource.streams();
   var streamCount = streamResources.count();
   for(var i = 0; i < streamCount; i++){
      var streamResource = streamResources.get(i);
      var code = streamResource._code;
      var dataCount = streamResource._dataCount;
      var data = streamResource._data;
      if((code == 'index16') || (code == 'index32')){
         var buffer = o._indexBuffer = context.createIndexBuffer();
         buffer._resource = streamResource;
         var dataCd = streamResource.elementDataCd();
         if(dataCd == EDataType.Uint16){
            buffer._strideCd = EG3dIndexStride.Uint16;
         }else if(dataCd == EDataType.Uint32){
            buffer._strideCd = EG3dIndexStride.Uint32;
         }else{
            throw new TError(o, "Unknown data type.");
         }
         buffer.upload(data, 3 * dataCount);
      }else{
         var buffer = context.createVertexBuffer();
         buffer._name = code;
         buffer._resource = streamResource;
         buffer._vertexCount = dataCount;
         var pixels = null;
         switch(code){
            case "position":
               pixels = new Float32Array(data);
               buffer._formatCd = EG3dAttributeFormat.Float3;
               break;
            case "coord":
               pixels = new Float32Array(data);
               buffer._formatCd = EG3dAttributeFormat.Float2;
               break;
            case "color":
               pixels = new Uint8Array(data);
               buffer._formatCd = EG3dAttributeFormat.Byte4Normal;
               break;
            case "normal":
            case "binormal":
            case "tangent":
               pixels = new Uint8Array(data);
               buffer._formatCd = EG3dAttributeFormat.Byte4Normal;
               break;
            default:
               throw new TError(o, "Unknown code");
         }
         buffer.upload(pixels, streamResource._dataStride, dataCount);
         o._vertexBuffers.push(buffer);
      }
   }
   o._ready = true;
}
MO.FE3rMesh_processLoad = function FE3rMesh_processLoad(){
   var o = this;
   if(o._dataReady){
      return true;
   }
   if(!o._resource.testReady()){
      return false;
   }
   o.loadResource(o._resource);
   return true;
}
MO.FE3rMeshAnimation = function FE3rMeshAnimation(o){
   o = MO.Class.inherits(this, o, MO.FE3rAnimation);
   o.process = MO.FE3rMeshAnimation_process;
   return o;
}
MO.FE3rMeshAnimation_process = function FE3rMeshAnimation_process(track){
   var o = this;
   if(!o._valid){
      return;
   }
   var tick = Math.abs(o._currentTick);
   var resource = track._resource;
   var playInfo = o._playInfo;
   resource.calculate(playInfo, tick);
   playInfo.update();
   var matrix = track._matrix;
   matrix.assign(resource.matrixInvert());
   matrix.append(playInfo.matrix);
}
MO.FE3rMeshConsole = function FE3rMeshConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd   = MO.EScope.Local;
   o._loadMeshs = null;
   o._meshs     = MO.Class.register(o, new AGetter('_meshs'));
   o._thread    = null;
   o._interval  = 200;
   o.onProcess  = MO.FE3rMeshConsole_onProcess;
   o.construct  = MO.FE3rMeshConsole_construct;
   o.findMesh   = MO.FE3rMeshConsole_findMesh;
   o.loadByGuid = MO.FE3rMeshConsole_loadByGuid;
   o.loadByCode = MO.FE3rMeshConsole_loadByCode;
   return o;
}
MO.FE3rMeshConsole_onProcess = function FE3rMeshConsole_onProcess(){
   var o = this;
   var s = o._loadMeshs;
   s.record();
   while(s.next()){
      var m = s.current();
      if(m.processLoad()){
         s.removeCurrent();
      }
   }
}
MO.FE3rMeshConsole_construct = function FE3rMeshConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._loadMeshs = new MO.TLooper();
   o._meshs = new MO.TDictionary();
   var t = o._thread = MO.Class.create(MO.FThread);
   t.setInterval(o._interval);
   t.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(t);
}
MO.FE3rMeshConsole_findMesh = function FE3rMeshConsole_findMesh(p){
   return this._meshs.get(p);
}
MO.FE3rMeshConsole_loadByGuid = function FE3rMeshConsole_loadByGuid(pc, pg){
   var o = this;
   if(!MO.Class.isClass(pc, MO.MGraphicObject)){
      throw new MO.TError('Graphics context is empty');
   }
   if(MO.Lang.String.isEmpty(pg)){
      throw new MO.TError('Mesh guid is empty');
   }
   var m = o._meshs.get(pg);
   if(m){
      return m;
   }
   var rmc = MO.Console.find(MO.FE3sMeshConsole);
   var rm = rmc.loadByGuid(pg);
   m = MO.Class.create(MO.FE3rMesh);
   m.linkGraphicContext(pc);
   m.setCode(pg);
   m.setResource(rm);
   o._meshs.set(pg, m);
   if(rm.testReady()){
      m.loadResource(rm);
   }else{
      o._loadMeshs.push(m);
   }
   return m;
}
MO.FE3rMeshConsole_loadByCode = function FE3rMeshConsole_loadByCode(pc, pg){
   var o = this;
   if(!MO.Class.isClass(pc, MO.MGraphicObject)){
      throw new MO.TError('Graphics context is empty');
   }
   if(MO.Lang.String.isEmpty(pg)){
      throw new MO.TError('Mesh code is empty');
   }
   var m = o._meshs.get(pg);
   if(m){
      return m;
   }
   var rmc = MO.Console.find(MO.FE3sMeshConsole);
   var rm = rmc.loadByCode(pg);
   m = MO.Class.create(MO.FE3rMesh);
   m.linkGraphicContext(pc);
   m.setCode(pg);
   m.setResource(rm);
   o._meshs.set(pg, m);
   if(rm.testReady()){
      m.loadResource(rm);
   }else{
      o._loadMeshs.push(m);
   }
   return m;
}
MO.FE3rModel = function FE3rModel(o){
   o = MO.Class.inherits(this, o, MO.FE3rObject);
   o._resource            = MO.Class.register(o, new AGetSet('_resource'));
   o._meshes              = MO.Class.register(o, new AGetter('_meshes'));
   o._skeletons           = MO.Class.register(o, new AGetter('_skeletons'));
   o._dataReady           = false;
   o.findMeshByGuid       = MO.FE3rModel_findMeshByGuid;
   o.testReady            = MO.FE3rModel_testReady;
   o.loadResource         = MO.FE3rModel_loadResource;
   o.loadSkeletonResource = MO.FE3rModel_loadSkeletonResource;
   o.processLoad          = MO.FE3rModel_processLoad;
   o.dispose              = MO.FE3rModel_dispose;
   return o;
}
MO.FE3rModel_findMeshByGuid = function FE3rModel_findMeshByGuid(p){
   var o = this;
   var s = o._meshes;
   var c = s.count();
   for(var i = 0; i < c; i++){
      var m = s.get(i);
      if(m._guid == p){
         return m;
      }
   }
   return null;
}
MO.FE3rModel_testReady = function FE3rModel_testReady(){
   return this._dataReady;
}
MO.FE3rModel_loadSkeletonResource = function FE3rModel_loadSkeletonResource(resource){
   var o = this;
   var modelConsole = MO.Console.find(MO.FE3rModelConsole);
   var skinResources = resource.skins();
   if(skinResources){
      var skinCount = skinResources.count();
      for(var i = 0; i < skinCount; i++){
         var skinResource = skinResources.at(i);
         var skin = MO.Class.create(MO.FE3rSkin);
         skin.linkGraphicContext(o);
         skin.loadResource(skinResource)
         var meshGuid = skinResource.meshGuid();
         var mesh = modelConsole.findMesh(meshGuid);
         mesh.pushSkin(skin);
      }
   }
}
MO.FE3rModel_loadResource = function FE3rModel_loadResource(resource){
   var o = this;
   var modelConsole = MO.Console.find(MO.FE3rModelConsole);
   var meshResources = resource.meshes();
   if(meshResources){
      var meshes = o._meshes = new MO.TObjects();
      var meshCount = meshResources.count();
      for(var i = 0; i < meshCount; i++){
         var meshResource = meshResources.valueAt(i);
         var mesh = MO.Class.create(MO.FE3rModelMesh);
         mesh.linkGraphicContext(o);
         mesh.loadResource(meshResource);
         meshes.push(mesh);
         modelConsole.meshs().set(mesh.guid(), mesh);
      }
   }
   var skeletonResources = resource.skeletons();
   if(skeletonResources){
      var skeletonCount = skeletonResources.count();
      for(var i = 0; i < skeletonCount; i++){
         var skeletonResource = skeletonResources.get(i);
         o.loadSkeletonResource(skeletonResource);
      }
   }
   o._dataReady = true;
}
MO.FE3rModel_processLoad = function FE3rModel_processLoad(){
   var o = this;
   if(o._dataReady){
      return true;
   }
   if(!o._resource.testReady()){
      return false;
   }
   o.loadResource(o._resource);
   return true;
}
MO.FE3rModel_dispose = function FE3rModel_dispose(){
   var o = this;
   o._ready = false;
   o._resource = null;
   o._meshes = MO.Lang.Object.dispose(o._meshes);
   o._skeletons = MO.Lang.Object.dispose(o._skeletons);
   o.__base.FObject.dispose.call(o);
}
MO.FE3rModelConsole = function FE3rModelConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd       = MO.EScope.Local;
   o._loadModels    = null;
   o._models        = MO.Class.register(o, new MO.AGetter('_models'));
   o._meshs         = MO.Class.register(o, new MO.AGetter('_meshs'));
   o._dynamicMeshs  = null;
   o._thread        = null;
   o._interval      = 200;
   o.onProcess      = MO.FE3rModelConsole_onProcess;
   o.construct      = MO.FE3rModelConsole_construct;
   o.findModel      = MO.FE3rModelConsole_findModel;
   o.findMesh       = MO.FE3rModelConsole_findMesh;
   o.load           = MO.FE3rModelConsole_load;
   o.loadMeshByGuid = MO.FE3rModelConsole_loadMeshByGuid;
   o.loadMeshByCode = MO.FE3rModelConsole_loadMeshByCode;
   o.merge          = MO.FE3rModelConsole_merge;
   return o;
}
MO.FE3rModelConsole_onProcess = function FE3rModelConsole_onProcess(){
   var o = this;
   var s = o._loadModels;
   s.record();
   while(s.next()){
      var m = s.current();
      if(m.processLoad()){
         s.removeCurrent();
      }
   }
}
MO.FE3rModelConsole_construct = function FE3rModelConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._loadModels = new MO.TLooper();
   o._models = new MO.TDictionary();
   o._meshs = new MO.TDictionary();
   o._dynamicMeshs = new MO.TDictionary();
   var thread = o._thread = MO.Class.create(MO.FThread);
   thread.setInterval(o._interval);
   thread.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(thread);
}
MO.FE3rModelConsole_findModel = function FE3rModelConsole_findModel(guid){
   return this._models.get(guid);
}
MO.FE3rModelConsole_findMesh = function FE3rModelConsole_findMesh(guid){
   return this._meshs.get(guid);
}
MO.FE3rModelConsole_load = function FE3rModelConsole_load(context, guid){
   var o = this;
   if(!context){
      throw new MO.TError('Graphics context is empty');
   }
   if(!guid){
      throw new MO.TError('Model guid is empty');
   }
   var model = o._models.get(guid);
   if(model){
      return model;
   }
   var resource = MO.Console.find(MO.FE3sModelConsole).load(guid);
   model = MO.Class.create(MO.FE3rModel);
   model.linkGraphicContext(context);
   model.setCode(guid);
   model.setResource(resource);
   o._models.set(guid, model);
   o._loadModels.push(model);
   return model;
}
MO.FE3rModelConsole_loadMeshByGuid = function FE3rModelConsole_loadMeshByGuid(context, pg){
   var o = this;
   if(!context){
      throw new MO.TError('Graphics context is empty');
   }
   if(!guid){
      throw new MO.TError('Model guid is empty');
   }
   var m = o._models.get(pg);
   if(m){
      return m;
   }
   var resource = MO.Console.find(MO.FE3sModelConsole).load(guid);
   m = MO.Class.create(MO.FE3rModel);
   m.linkGraphicContext(pc);
   m.setCode(pg);
   m.setResource(rm);
   o._models.set(pg, m);
   if(rm.testReady()){
      m.loadResource(rm);
   }else{
      o._loadModels.push(m);
   }
   return m;
}
MO.FE3rModelConsole_loadMeshByCode = function FE3rModelConsole_loadMeshByCode(context, pg){
   var o = this;
   if(!MO.Class.isClass(context, MO.MGraphicObject)){
      throw new MO.TError('Graphics context is empty');
   }
   if(MO.Lang.String.isEmpty(pg)){
      throw new MO.TError('Model guid is empty');
   }
   var model = o._models.get(pg);
   if(model){
      return model;
   }
   var resource = MO.Console.find(MO.FE3sModelConsole).load(guid);
   model = MO.Class.create(MO.FE3rModel);
   model.linkGraphicContext(pc);
   model.setCode(pg);
   model.setResource(resource);
   o._models.set(pg, model);
   if(rm.testReady()){
      m.loadResource(rm);
   }else{
      o._loadModels.push(m);
   }
   return m;
}
MO.FE3rModelConsole_merge = function FE3rModelConsole_merge(effect, region, offset, count){
   var o = this;
   var flag = 'merge';
   var renderables = region.renderables();
   for(var i = 0; i < count; i++){
      var renderable = renderables.getAt(offset + i);
      flag += '|' + renderable.hashCode();
   }
   var model = o._dynamicMeshs.get(flag);
   if(!model){
      model = MO.Class.create(MO.FE3rDynamicModel);
      model.linkGraphicContext(region);
      for(var i = 0; i < count; i++){
         var renderable = renderables.getAt(offset + i);
         model.pushRenderable(renderable);
      }
      model.build();
      o._dynamicMeshs.set(flag, model);
      MO.Logger.info(o, 'Create merge model. (mesh={1}, renderables={2})', model.meshes().count(), model.renderables().count());
   }
   model.update();
   return model;
}
MO.FE3rModelMesh = function FE3rModelMesh(o){
   o = MO.Class.inherits(this, o, MO.FE3rGeometry);
   o._ready            = false;
   o._resourceMaterial = null;
   o._skins            = MO.Class.register(o, new AGetter('_skins'));
   o._boneIds          = MO.Class.register(o, new AGetter('_boneIds'));
   o.construct         = MO.FE3rModelMesh_construct;
   o.testReady         = MO.FE3rModelMesh_testReady;
   o.guid              = MO.FE3rModelMesh_guid;
   o.pushSkin          = MO.FE3rModelMesh_pushSkin;
   return o;
}
MO.FE3rModelMesh_construct = function FE3rModelMesh_construct(){
   var o = this;
   o.__base.FE3rGeometry.construct.call(o);
}
MO.FE3rModelMesh_testReady = function FE3rModelMesh_testReady(){
   var o = this;
   if(!o._ready){
      var textures = o._textures;
      if(textures){
         var count = textures.count();
         for(var i = 0; i < count; i++){
            var texture = textures.at(i);
            if(!texture.testReady()){
               return false;
            }
         }
      }
      o._ready = true;
   }
   return o._ready;
}
MO.FE3rModelMesh_guid = function FE3rModelMesh_guid(){
   return this._resource.guid();
}
MO.FE3rModelMesh_pushSkin = function FE3rModelMesh_pushSkin(skin){
   var o = this;
   var skins = o._skins;
   if(!skins){
      skins = o._skins = new MO.TObjects();
   }
   skins.push(skin);
}
MO.FE3rObject = function FE3rObject(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject);
   o._guid = MO.Class.register(o, new MO.AGetSet('_guid'));
   o._code = MO.Class.register(o, new MO.AGetSet('_code'));
   return o;
}
MO.FE3rPipeline = function FE3rPipeline(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._vertexBuffers   = null;
   o._indexBuffer     = null;
   o.construct        = MO.FE3rPipeline_construct;
   o.findVertexBuffer = MO.FE3rPipeline_findVertexBuffer;
   o.loadResource     = MO.FE3rPipeline_loadResource;
   return o;
}
MO.FE3rPipeline_construct = function FE3rPipeline_construct(){
   var o = this;
   o.__base.FRenderable.construct.call(o);
   o._vertexBuffers = new MO.TObjects();
}
MO.FE3rPipeline_findVertexBuffer = function FE3rPipeline_findVertexBuffer(p){
   var o = this;
   var vs = o._vertexBuffers;
   var c = vs.count();
   for(var n = 0; n < c; n++){
      var v = vs.get(n);
      if(v.name() == p){
         return v;
      }
   }
   return null;
}
MO.FE3rPipeline_loadResource = function FE3rPipeline_loadResource(p){
   var o = this;
   var c = o._context;
   var rvs = p.vertexBuffers();
   var rvc = rvs.count();
   for(var n = 0; n < rvc; n++){
      var rv = rvs.get(n);
      var vb = context.createVertexBuffer();
      vb._name = rv.name();
      vb.upload(new Float32Array(rv._data), rv._stride, rv._vertexCount);
      o._vertexBuffers.push(vb);
   }
   var rib = p.indexBuffer();
   var ib = o._indexBuffer = c.createIndexBuffer();
   ib.upload(rib.data(), rib.count());
}
MO.FE3rSkeleton = function FE3rSkeleton(o){
   o = MO.Class.inherits(this, o, MO.FE3rObject, MO.MLinkerResource);
   o._bones       = MO.Class.register(o, new AGetter('_bones'));
   o._skins       = MO.Class.register(o, new AGetter('_skins'));
   o.loadResource = MO.FE3rSkeleton_loadResource;
   return o;
}
MO.FE3rSkeleton_loadResource = function FE3rSkeleton_loadResource(resource){
   var o = this;
   o._resource = resource;
   var boneResources = resource._bones;
   var count = boneResources.count();
   if(count > 0){
      var bones = o._bones = new MO.TObjects();
      for(var i = 0; i < count; i++){
         var boneResource = boneResources.at(i);
         var bone = MO.Class.create(MO.FE3rBone);
         bone.loadResource(boneResource);
         bones.push(bone);
      }
   }
}
MO.FE3rSkeletonAnimation = function FE3rSkeletonAnimation(o){
   o = MO.Class.inherits(this, o, MO.FE3rAnimation);
   o.process = MO.FE3rSkeletonAnimation_process;
   return o;
}
MO.FE3rSkeletonAnimation_process = function FE3rSkeletonAnimation_process(skeleton){
   var o = this;
   if(!o._valid){
      return;
   }
   var tick = Math.abs(o._currentTick);
   var bones = skeleton.bones();
   var count = bones.count();
   for(var i = 0; i < count; i++){
      var bone = bones.at(i);
      bone.update(o._playInfo, tick);
   }
}
MO.FE3rSkin = function FE3rSkin(o){
   o = MO.Class.inherits(this, o, MO.FE3rObject);
   o._resource    = MO.Class.register(o, new AGetter('_resource'));
   o._streams     = MO.Class.register(o, new AGetter('_streams'));
   o.loadResource = MO.FE3rSkin_loadResource;
   return o;
}
MO.FE3rSkin_loadResource = function FE3rSkin_loadResource(resource){
   var o = this;
   o._resource = resource;
   var streamResources = resource.streams();
   if(streamResources){
      var count = streamResources.count();
      if(count > 0){
         var streams = o._streams = new MO.TObjects();
         for(var i = 0; i < count; i++){
            var streamResource = streamResources.at(i);
            var stream = MO.Class.create(MO.FE3rStream);
            stream.linkGraphicContext(o);
            stream.loadResource(streamResource);
            streams.push(stream);
         }
      }
   }
}
MO.FE3rStream = function FE3rStream(o){
   o = MO.Class.inherits(this, o, MO.FE3rObject);
   o._resource    = MO.Class.register(o, new MO.AGetter('_resource'));
   o._buffer      = MO.Class.register(o, new MO.AGetter('_buffer'));
   o.loadResource = MO.FE3rStream_loadResource;
   return o;
}
MO.FE3rStream_loadResource = function FE3rStream_loadResource(resource){
   var o = this;
   var code = resource.code();
   var dataCount = resource._dataCount;
   o._resource = resource;
   o._vertexCount = dataCount;
   var buffer = o._buffer = o._graphicContext.createVertexBuffer(FE3rVertexBuffer);
   buffer.setCode(code);
   buffer.setResource(resource);
   switch(code){
      case "bone_index":
         buffer.setFormatCd(EG3dAttributeFormat.Byte4);
         break;
      case "bone_weight":
         buffer.setFormatCd(EG3dAttributeFormat.Byte4Normal);
         break;
      default:
         throw new MO.TError("Unknown code");
   }
   buffer.upload(resource._data, resource._dataStride, dataCount);
}
MO.FE3rTexture = function FE3rTexture(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject);
   o._resource    = MO.Class.register(o, new MO.AGetSet('_resource'));
   o._bitmaps     = MO.Class.register(o, new MO.AGetter('_bitmaps'));
   o._bitmapPacks = MO.Class.register(o, new MO.AGetter('_bitmapPacks'));
   o._ready       = false;
   o._dataReady   = false;
   o.construct    = MO.FE3rTexture_construct;
   o.testReady    = MO.FE3rTexture_testReady;
   o.loadBitmap   = MO.FE3rTexture_loadBitmap;
   o.loadResource = MO.FE3rTexture_loadResource;
   o.load         = MO.FE3rTexture_load;
   o.processLoad  = MO.FE3rTexture_processLoad;
   o.dispose      = MO.FE3rTexture_dispose;
   return o;
}
MO.FE3rTexture_construct = function FE3rTexture_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._bitmaps = new MO.TDictionary();
}
MO.FE3rTexture_testReady = function FE3rTexture_testReady(){
   return this._ready;
}
MO.FE3rTexture_loadBitmap = function FE3rTexture_loadBitmap(p){
   var o = this;
   var s = o._bitmaps;
   var b = s.get(p);
   if(!b){
      b = MO.Class.create(MO.FE3rTextureBitmap);
      s.set(p, b);
   }
   return b;
}
MO.FE3rTexture_loadResource = function FE3rTexture_loadResource(p){
   var o = this;
   var rbps = p.bitmapPacks();
   if(rbps){
      var bps = o._bitmapPacks = new MO.TDictionary();
      var c = rbps.count();
      for(var i = 0; i < c; i++){
         var rbp = rbps.valueAt(i);
         var bp = null;
         if(rbp._typeName == 'flat'){
            bp = MO.Class.create(MO.FE3rTextureBitmapFlatPack);
         }else if(rbp._typeName == 'cube'){
            bp = MO.Class.create(MO.FE3rTextureBitmapCubePack);
         }else{
            throw new MO.TError(o, 'Load resource failure.');
         }
         bp.linkGraphicContext(o);
         bp.loadResource(rbp);
         o._bitmapPacks.set(rbp.code(), bp);
      }
   }
   o._dataReady = true;
}
MO.FE3rTexture_load = function FE3rTexture_load(){
   var o = this;
   var r = o._resource;
   var rbs = r.bitmaps();
   for(var i = rbs.count() - 1; i >= 0; i--){
      var rb = rbs.valueAt(i);
      var b = o.loadBitmap(rb.guid());
      var bp = o._bitmapPacks.get(rb.packCode());
      if(!bp){
         throw new MO.TError('Link pack is not eists.');
      }
      b.load(bp);
   }
   o._ready = true;
}
MO.FE3rTexture_processLoad = function FE3rTexture_processLoad(){
   var o = this;
   if(!o._dataReady){
      if(!o._resource.testReady()){
         return false;
      }
      o.loadResource(o._resource);
   }else{
      var s = o._bitmapPacks;
      for(var i = s.count() - 1; i >= 0; i--){
         var b = s.valueAt(i);
         if(!b.testReady()){
            return false;
         }
      }
      o.load();
   }
   return o._ready;
}
MO.FE3rTexture_dispose = function FE3rTexture_dispose(){
   var o = this;
   o._ready = false;
   o._resource = null;
   o._bitmaps = MO.Lang.Object.dispose(o._bitmaps);
   o.__base.FObject.dispose.call(o);
}
MO.FE3rTextureBitmap = function FE3rTextureBitmap(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject);
   o._ready      = false;
   o._bitmapPack = null;
   o.construct   = MO.FE3rTextureBitmap_construct;
   o.texture     = MO.FE3rTextureBitmap_texture;
   o.testReady   = MO.FE3rTextureBitmap_testReady;
   o.load        = MO.FE3rTextureBitmap_load;
   o.dispose     = MO.FE3rTextureBitmap_dispose;
   return o;
}
MO.FE3rTextureBitmap_construct = function FE3rTextureBitmap_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.FE3rTextureBitmap_texture = function FE3rTextureBitmap_texture(){
   return this._bitmapPack.texture();
}
MO.FE3rTextureBitmap_testReady = function FE3rTextureBitmap_testReady(){
   return this._ready;
}
MO.FE3rTextureBitmap_load = function FE3rTextureBitmap_load(name){
   var o = this;
   o._bitmapPack = name;
   o._ready = true;
}
MO.FE3rTextureBitmap_dispose = function FE3rTextureBitmap_dispose(){
   var o = this;
   o._context = null;
   o._ready = false;
   o._bitmapPack = null;
   o.__base.FObject.dispose.call(o);
}
MO.FE3rTextureBitmapCubePack = function FE3rTextureBitmapCubePack(o){
   o = MO.Class.inherits(this, o, MO.FE3rTextureBitmapPack);
   o._resource    = null;
   o._images      = null;
   o.onLoad       = MO.FE3rTextureBitmapCubePack_onLoad;
   o.construct    = MO.FE3rTextureBitmapCubePack_construct;
   o.loadResource = MO.FE3rTextureBitmapCubePack_loadResource;
   o.dispose      = MO.FE3rTextureBitmapCubePack_dispose;
   return o;
}
MO.FE3rTextureBitmapCubePack_onLoad = function FE3rTextureBitmapCubePack_onLoad(p){
   var o = this;
   var c = o._graphicContext;
   var is = o._images;
   var capability = MO.Window.Browser.capability();
   for(var i = 0; i < 6; i++){
      if(!is[i].testReady()){
         return;
      }
   }
   var t = o._texture = c.createCubeTexture();
   t.upload(is[0], is[1], is[2], is[3], is[4], is[5]);
   if(capability.blobCreate){
      for(var i = 0; i < 6; i++){
         var m = is[i];
         window.URL.revokeObjectURL(m.url());
         is[i] = MO.Lang.Object.dispose(m);
      }
   }
   o._images = MO.Lang.Object.dispose(o._images);
   o._dataReady = true;
}
MO.FE3rTextureBitmapCubePack_construct = function FE3rTextureBitmapCubePack_construct(){
   var o = this;
   o.__base.FE3rTextureBitmapPack.construct.call(o);
}
MO.FE3rTextureBitmapCubePack_loadResource = function FE3rTextureBitmapCubePack_loadResource(p){
   var o = this;
   o._resource = p;
   var texture = p._texture;
   var capability = MO.Window.Browser.capability();
   var d = p.data();
   var t = p._formatName;
   o._images = new MO.TObjects();
   for(var i = 0; i < 6; i++){
      var g = o._images[i] = MO.Class.create(FImage);
      g._index = i;
      g.setOptionAlpha(false);
      if(capability.blobCreate){
         var blob = new Blob([d[i]], {'type' : 'image/' + t});
         var url = window.URL.createObjectURL(blob);
         g.loadUrl(url);
      }else{
         var url = MO.Window.Browser.hostPath('/cloud.content.texture.bitmap.wv') + '?guid=' + texture._guid + '&code=' + p._code + "&index=" + i;
         g.loadUrl(url);
      }
      g.addLoadListener(o, o.onLoad);
   }
}
MO.FE3rTextureBitmapCubePack_dispose = function FE3rTextureBitmapCubePack_dispose(){
   var o = this;
   o._images = MO.Lang.Object.dispose(o._images);
   o.__base.FE3rTextureBitmapPack.dispose.call(o);
}
MO.FE3rTextureBitmapFlatPack = function FE3rTextureBitmapFlatPack(o){
   o = MO.Class.inherits(this, o, MO.FE3rTextureBitmapPack);
   o._resource    = null;
   o._image       = null;
   o.onLoad       = MO.FE3rTextureBitmapFlatPack_onLoad;
   o.construct    = MO.FE3rTextureBitmapFlatPack_construct;
   o.loadResource = MO.FE3rTextureBitmapFlatPack_loadResource;
   o.dispose      = MO.FE3rTextureBitmapFlatPack_dispose;
   return o;
}
MO.FE3rTextureBitmapFlatPack_onLoad = function FE3rTextureBitmapFlatPack_onLoad(p){
   var o = this;
   var c = o._graphicContext;
   var t = o._texture = c.createFlatTexture();
   t.upload(o._image);
   t.makeMipmap();
   o._image = MO.Lang.Object.dispose(o._image);
   o._dataReady = true;
}
MO.FE3rTextureBitmapFlatPack_construct = function FE3rTextureBitmapFlatPack_construct(){
   var o = this;
   o.__base.FE3rTextureBitmapPack.construct.call(o);
}
MO.FE3rTextureBitmapFlatPack_loadResource = function FE3rTextureBitmapFlatPack_loadResource(p){
   var o = this;
   o._resource = p;
   var rt = p._texture;
   var c = p.code();
   var g = o._image = MO.Console.find(MO.FE3sTextureConsole).loadBitmap(rt._guid, c, p._formatName);
   g.addLoadListener(o, o.onLoad);
}
MO.FE3rTextureBitmapFlatPack_dispose = function FE3rTextureBitmapFlatPack_dispose(){
   var o = this;
   o._image = MO.Lang.Object.dispose(o._image);
   o.__base.FE3rTextureBitmapPack.dispose.call(o);
}
MO.FE3rTextureBitmapPack = function FE3rTextureBitmapPack(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject);
   o._resource    = null;
   o._image       = null;
   o._texture     = MO.Class.register(o, new AGetter('_texture'));
   o._ready       = false;
   o._dataReady   = false;
   o.onLoad       = MO.Method.virtual(o, 'onLoad');
   o.construct    = MO.FE3rTextureBitmapPack_construct;
   o.testReady    = MO.FE3rTextureBitmapPack_testReady;
   o.loadResource = MO.Method.virtual(o, 'loadResource');
   o.dispose      = MO.FE3rTextureBitmapPack_dispose;
   return o;
}
MO.FE3rTextureBitmapPack_construct = function FE3rTextureBitmapPack_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.FE3rTextureBitmapPack_testReady = function FE3rTextureBitmapPack_testReady(){
   var o = this;
   if(o._dataReady){
      o._ready = o._texture.isValid();
   }
   return o._ready;
}
MO.FE3rTextureBitmapPack_dispose = function FE3rTextureBitmapPack_dispose(){
   var o = this;
   o._ready = false;
   o._dataReady = false;
   o.__base.FObject.dispose.call(o);
}
MO.FE3rTextureConsole = function FE3rTextureConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd      = MO.EScope.Local;
   o._loadTextures = null;
   o._bitmaps      = MO.Class.register(o, new AGetter('_bitmaps'));
   o._textures     = MO.Class.register(o, new AGetter('_textures'));
   o._thread       = null;
   o._interval     = 200;
   o.onProcess     = MO.FE3rTextureConsole_onProcess;
   o.construct     = MO.FE3rTextureConsole_construct;
   o.load          = MO.FE3rTextureConsole_load;
   o.loadBitmap    = MO.FE3rTextureConsole_loadBitmap;
   return o;
}
MO.FE3rTextureConsole_onProcess = function FE3rTextureConsole_onProcess(){
   var o = this;
   var s = o._loadTextures;
   s.record();
   while(s.next()){
      var m = s.current();
      if(m.processLoad()){
         s.removeCurrent();
      }
   }
}
MO.FE3rTextureConsole_construct = function FE3rTextureConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._loadTextures = new MO.TLooper();
   o._bitmaps = new MO.TDictionary();
   o._textures = new MO.TDictionary();
   var t = o._thread = MO.Class.create(MO.FThread);
   t.setInterval(o._interval);
   t.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(t);
}
MO.FE3rTextureConsole_load = function FE3rTextureConsole_load(context, guid, code){
   var o = this;
   var flag = guid + '|' + code;
   var texture = o._textures.get(flag);
   if(texture){
      return texture;
   }
   var url = MO.Window.Browser.hostPath(o._dataUrl + '?guid=' + guid + '&code=' + code);
   MO.Logger.info(o, 'Load bitmap. (url={1})', url);
   if(code == 'environment'){
      bitmap = MO.Window.Class.create(MO.FE3rTextureCube);
   }else{
      bitmap = MO.Window.Class.create(MO.FE3rTexture);
   }
   t._name = pg;
   t.linkGraphicContext(pc);
   t.load(u);
   o._bitmaps.set(pg, t);
   return t;
}
MO.FE3rTextureConsole_load2 = function FE3rTextureConsole_load2(pc, pt){
   var o = this;
   var s = o._textures;
   var t = s.get(pt);
   if(t){
      return t;
   }
   var rc = MO.Console.find(MO.FE3sTextureConsole);
   var r = rc.load(pt);
   t = MO.Class.create(MO.FE3rTexture);
   t.linkGraphicContext(pc);
   t.setResource(r);
   s.set(pt, t);
   o._loadTextures.push(t);
   return t;
}
MO.FE3rTextureConsole_loadBitmap = function FE3rTextureConsole_loadBitmap(pc, pt, pb){
   var o = this;
   var b = o._bitmaps.get(pb);
   if(b){
      return b;
   }
   var t = o.load(pc, pt);
   return t.loadBitmap(pb);
}
MO.FE3rTrack = function FE3rTrack(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._matrix      = MO.Class.register(o, new AGetter('_matrix'));
   o._resource    = MO.Class.register(o, new AGetter('_resource'));
   o.construct    = MO.FE3rTrack_construct;
   o.loadResource = MO.FE3rTrack_loadResource;
   o.dispose      = MO.FE3rTrack_dispose;
   return o;
}
MO.FE3rTrack_construct = function FE3rTrack_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._matrix = new MO.SMatrix3d();
}
MO.FE3rTrack_loadResource = function FE3rTrack_loadResource(p){
   var o = this;
   o._resource = p;
   var fs = p.frames();
   if(fs != null){
      o._frameCount = fs.count();
   }
   o._frameTick = p.frameTick();
}
MO.FE3rTrack_dispose = function FE3rTrack_dispose(){
   var o = this;
   o._resource = null;
   o.__base.FG3dTrack.dispose.call(o);
}
MO.FE3rVertexBuffer = function FE3rVertexBuffer(o){
   o = MO.Class.inherits(this, o, MO.FWglVertexBuffer, MO.MLinkerResource);
   o.dispose = MO.FE3rVertexBuffer_dispose;
   return o;
}
MO.FE3rVertexBuffer_dispose = function FE3rVertexBuffer_dispose(){
   var o = this;
   o.__base.MLinkerResource.dispose.call(o);
   o.__base.FWglVertexBuffer.dispose.call(o);
}
MO.FE3dAutomaticEffect = function FE3dAutomaticEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dAutomaticEffect);
   o.drawGroup = MO.FE3dAutomaticEffect_drawGroup;
   return o;
}
MO.FE3dAutomaticEffect_drawGroup = function FE3dAutomaticEffect_drawGroup(region, renderables, offset, count){
   var o = this;
   if(count > 1){
      var modelConsole = MO.Console.find(MO.FE3rModelConsole);
      var model = modelConsole.merge(o, region, offset, count);
      if(model){
         var context = o._graphicContext;
         var meshes = model.meshes();
         var meshCount = meshes.count();
         var spaceName = region.spaceName();
         var mesh = meshes.first();
         var info = mesh.selectInfo(spaceName);
         var effect = info.effect;
         if(!effect){
            effect = info.effect = MO.Console.find(MO.FG3dEffectConsole).find(context, region, mesh);
         }
         for(var i = 1; i < meshCount; i++){
            var mesh = meshes.getAt(i);
            var info = mesh.selectInfo(spaceName);
            info.effect = effect;
         }
         return effect.drawRenderables(region, meshes, 0, meshCount);
      }
   }
   o.drawRenderables(region, renderables, offset, count);
}
MO.FE3dControlAutomaticEffect = function FE3dControlAutomaticEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dAutomaticEffect);
   o._code          = 'control.automatic';
   o.drawRenderable = MO.FE3dControlAutomaticEffect_drawRenderable;
   return o;
}
MO.FE3dControlAutomaticEffect_drawRenderable = function FE3dControlAutomaticEffect_drawRenderable(region, renderable){
   var o = this;
   var context = o._graphicContext;
   var program = o._program;
   var matrix = renderable.currentMatrix();
   var cameraVpMatrix = region.calculate(MO.EG3dRegionParameter.CameraViewProjectionMatrix);
   var material = renderable.material();
   var info = material.info();
   o.bindMaterial(material);
   program.setParameter('vc_model_matrix', matrix);
   program.setParameter('vc_vp_matrix', cameraVpMatrix);
   program.setParameter4('fc_alpha', info.alphaBase, info.alphaRate, info.alphaLevel, info.alphaMerge);
   program.setParameter('fc_ambient_color', info.ambientColor);
   o.bindAttributes(renderable);
   o.bindSamplers(renderable);
   var indexBuffer = renderable.indexBuffers().first();
   context.drawTriangles(indexBuffer);
}
MO.FE3dControlFrameEffect = function FE3dControlFrameEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dAutomaticEffect);
   o._code          = 'control.frame';
   o.drawRenderable = MO.FE3dControlFrameEffect_drawRenderable;
   return o;
}
MO.FE3dControlFrameEffect_drawRenderable = function FE3dControlFrameEffect_drawRenderable(pg, pr){
   var o = this;
   var c = o._graphicContext;
   var p = o._program;
   var vcp = pg.calculate(MO.EG3dRegionParameter.CameraPosition);
   var vld = pg.calculate(MO.EG3dRegionParameter.LightDirection);
   var m = pr.material();
   var mi = m.info();
   o.bindMaterial(m);
   p.setParameter('vc_model_matrix', pr.currentMatrix());
   p.setParameter('vc_vp_matrix', pg.calculate(MO.EG3dRegionParameter.CameraViewProjectionMatrix));
   p.setParameter('vc_camera_position', vcp);
   p.setParameter('vc_light_direction', vld);
   p.setParameter('fc_camera_position', vcp);
   p.setParameter('fc_light_direction', vld);
   p.setParameter('fc_color', mi.ambientColor);
   p.setParameter4('fc_vertex_color', mi.colorMin, mi.colorMax, mi.colorRate, mi.colorMerge);
   p.setParameter4('fc_alpha', mi.alphaBase, mi.alphaRate, mi.alphaLevel, mi.alphaMerge);
   p.setParameter('fc_ambient_color', mi.ambientColor);
   p.setParameter('fc_diffuse_color', mi.diffuseColor);
   p.setParameter('fc_specular_color', mi.specularColor);
   p.setParameter4('fc_specular', mi.specularBase, mi.specularLevel, mi.specularAverage, mi.specularShadow);
   p.setParameter('fc_specular_view_color', mi.specularViewColor);
   p.setParameter4('fc_specular_view', mi.specularViewBase, mi.specularViewRate, mi.specularViewAverage, mi.specularViewShadow);
   p.setParameter('fc_reflect_color', mi.reflectColor);
   p.setParameter4('fc_reflect', 0, 0, 1.0 - mi.reflectMerge, mi.reflectMerge);
   p.setParameter('fc_emissive_color', mi.emissiveColor);
   o.bindAttributes(pr);
   o.bindSamplers(pr);
   c.drawTriangles(pr.indexBuffer());
}
MO.FE3dControlPass = function FE3dControlPass(o){
   o = MO.Class.inherits(this, o, MO.FG3dTechniquePass);
   o._code = 'control';
   return o;
}
MO.FE3dControlTechnique = function FE3dControlTechnique(o){
   o = MO.Class.inherits(this, o, MO.FG3dTechnique);
   o._code        = 'control';
   o._passControl = MO.Class.register(o, new MO.AGetter('_passControl'));
   o.setup        = MO.FE3dControlTechnique_setup;
   o.drawRegion   = MO.FE3dControlTechnique_drawRegion;
   return o;
}
MO.FE3dControlTechnique_setup = function FE3dControlTechnique_setup(){
   var o = this;
   o.__base.FG3dTechnique.setup.call(o);
   o.registerMode(MO.EG3dTechniqueMode.Result);
   var pass = o._passControl = MO.Class.create(MO.FE3dControlPass);
   pass.linkGraphicContext(o);
   pass.setup();
   o.pushPass(pass);
}
MO.FE3dControlTechnique_drawRegion = function FE3dControlTechnique_drawRegion(p){
   var o = this;
   if(p.renderables().isEmpty()){
      return;
   }
   o._graphicContext.clearDepth(1);
   o.__base.FG3dTechnique.drawRegion.call(o, p);
}
MO.FE3dGeneralColorAutomaticEffect = function FE3dGeneralColorAutomaticEffect(o){
   o = MO.Class.inherits(this, o, MO.FE3dAutomaticEffect);
   o._code          = 'general.color.automatic';
   o.buildMaterial  = MO.FE3dGeneralColorAutomaticEffect_buildMaterial;
   o.drawRenderable = MO.FE3dGeneralColorAutomaticEffect_drawRenderable;
   return o;
}
MO.FE3dGeneralColorAutomaticEffect_buildMaterial = function FE3dGeneralColorAutomaticEffect_buildMaterial(effectInfo, renderable){
   var o = this;
   var material = renderable.material();
   var data = effectInfo.material;
   if(!data){
      data = effectInfo.material = MO.Class.create(MO.FFloatStream);
      data.setLength(40);
      material._dirty = true;
   }
   if(material._dirty){
      var info = material.info();
      data.reset();
      if(info.optionAlpha){
         data.writeFloat4(info.alphaBase, info.alphaRate, 0, 0);
      }else{
         data.writeFloat4(info.alphaBase, 1, 0, 0);
      }
      data.writeFloat4(info.colorMin, info.colorMax, info.colorBalance, info.colorRate);
      data.writeColor4(info.vertexColor);
      data.writeColor4(info.ambientColor);
      data.writeColor4(info.diffuseColor);
      data.writeColor4(info.specularColor);
      data.writeFloat4(info.specularBase, info.specularLevel, info.specularAverage, info.specularShadow);
      data.writeColor4(info.reflectColor);
      data.writeFloat4(0, 0, 1 - info.reflectMerge, info.reflectMerge);
      data.writeColor4(info.emissiveColor);
      material._dirty = false;
   }
}
MO.FE3dGeneralColorAutomaticEffect_drawRenderable = function FE3dGeneralColorAutomaticEffect_drawRenderable(region, renderable){
   var o = this;
   var program = o._program;
   var cameraPosition = region.calculate(MO.EG3dRegionParameter.CameraPosition);
   var lightDirection = region.calculate(MO.EG3dRegionParameter.LightDirection);
   var vpMatrix = region.calculate(MO.EG3dRegionParameter.CameraViewProjectionMatrix)
   var material = renderable.material();
   o.bindMaterial(material);
   if(renderable._optionMerge){
      var mergeRenderables = renderable.mergeRenderables();
      var mergeCount = mergeRenderables.count();
      var data = MO.Lang.TypeArray.findTemp(MO.EDataType.Float32, 16 * mergeCount);
      for(var i = 0; i < mergeCount; i++){
         var mergeRenderable = mergeRenderables.at(i);
         var matrix = mergeRenderable.currentMatrix();
         matrix.writeData(data, 16 * i);
      }
      program.setParameter('vc_model_matrix', data);
   }else{
      var matrix = renderable.currentMatrix();
      program.setParameter('vc_model_matrix', matrix);
   }
   program.setParameter('vc_vp_matrix', vpMatrix);
   program.setParameter('vc_camera_position', cameraPosition);
   program.setParameter('vc_light_direction', lightDirection);
   program.setParameter('fc_camera_position', cameraPosition);
   program.setParameter('fc_light_direction', lightDirection);
   if(o._supportMaterialMap){
      var materialId = renderable._materialId;
      program.setParameter4('fc_material', 1 / 32, materialId / 512, 0, 0);
   }else{
      var info = renderable.activeInfo();
      o.buildMaterial(info, renderable);
      program.setParameter('fc_materials', info.material.memory());
   }
   o.__base.FE3dAutomaticEffect.drawRenderable.call(o, region, renderable);
}
MO.FE3dGeneralColorFillEffect = function FE3dGeneralColorFillEffect(o){
   o = MO.Class.inherits(this, o, MO.FE3dAutomaticEffect);
   o._code          = 'general.color.flat';
   o.drawRenderable = MO.FE3dGeneralColorFillEffect_drawRenderable;
   return o;
}
MO.FE3dGeneralColorFillEffect_drawRenderable = function FE3dGeneralColorFillEffect_drawRenderable(region, renderable){
   var o = this;
   var context = o._graphicContext;
   var contextSize = context.size();
   var program = o._program;
   var material = renderable.material();
   o.bindMaterial(material);
   program.setParameter4('vc_position', 2, 2, -1, 1);
   o.__base.FE3dAutomaticEffect.drawRenderable.call(o, region, renderable);
}
MO.FE3dGeneralColorFlatEffect = function FE3dGeneralColorFlatEffect(o){
   o = MO.Class.inherits(this, o, MO.FE3dAutomaticEffect);
   o._code          = 'general.color.flat';
   o.drawRenderable = MO.FE3dGeneralColorFlatEffect_drawRenderable;
   return o;
}
MO.FE3dGeneralColorFlatEffect_drawRenderable = function FE3dGeneralColorFlatEffect_drawRenderable(region, renderable){
   var o = this;
   var context = o._graphicContext;
   var contextSize = context.size();
   var sizeWidth = contextSize.width;
   var sizeHeight = contextSize.height;
   var material = renderable.material();
   o.bindMaterial(material);
   var program = o._program;
   var optionMerge = renderable.optionMerge();
   if(optionMerge){
      var meshs = renderable.mergeRenderables();
      var meshCount = meshs.count();
      var data = MO.Lang.TypeArray.findTemp(MO.EDataType.Float32, 4 * meshCount);
      var index = 0;
      for(var i = 0; i < meshCount; i++){
         var mesh = meshs.at(i);
         var matrix = mesh.matrix();
         data[index++] = matrix.sx / contextWidth * 2;
         data[index++] = matrix.sy / contextHeight * 2;
         data[index++] = matrix.tx / contextWidth * 2 - 1;
         data[index++] = 1 - matrix.ty / contextHeight * 2;
         mesh.currentMatrix().writeData(data, 4 * i);
      }
      program.setParameter('vc_position', data);
      o.__base.FE3dAutomaticEffect.drawRenderable.call(o, region, renderable);
   }else{
      var matrix = renderable.matrix();
      var optionFull = renderable.optionFull();
      if(optionFull){
         program.setParameter4('vc_position', 2, 2, -1, 1);
      }else{
         var cx = matrix.sx / sizeWidth * 2;
         var cy = matrix.sy / sizeHeight * 2;
         var tx = matrix.tx / sizeWidth * 2 - 1;
         var ty = 1 - matrix.ty / sizeHeight * 2;
         program.setParameter4('vc_position', cx, cy, tx, ty);
      }
      o.__base.FE3dAutomaticEffect.drawRenderable.call(o, region, renderable);
   }
}
MO.FE3dGeneralColorPass = function FE3dGeneralColorPass(o){
   o = MO.Class.inherits(this, o, MO.FG3dTechniquePass);
   o._code = 'color';
   return o;
}
MO.FE3dGeneralColorSkeletonEffect = function FE3dGeneralColorSkeletonEffect(o){
   o = MO.Class.inherits(this, o, MO.FE3dAutomaticEffect);
   o._code            = 'general.color.skeleton';
   o._supportSkeleton = true;
   o.drawRenderable   = MO.FE3dGeneralColorSkeletonEffect_drawRenderable;
   return o;
}
MO.FE3dGeneralColorSkeletonEffect_drawRenderable = function FE3dGeneralColorSkeletonEffect_drawRenderable(region, renderable){
   var o = this;
   var c = o._graphicContext;
   var program = o._program;
   var vcp = region.calculate(MO.EG3dRegionParameter.CameraPosition);
   var vld = region.calculate(MO.EG3dRegionParameter.LightDirection);
   var m = renderable.material();
   var mi = m.info();
   o.bindMaterial(m);
   program.setParameter('vc_model_matrix', renderable.currentMatrix());
   program.setParameter('vc_vp_matrix', region.calculate(MO.EG3dRegionParameter.CameraViewProjectionMatrix));
   program.setParameter('vc_camera_position', vcp);
   program.setParameter('vc_light_direction', vld);
   program.setParameter('fc_camera_position', vcp);
   program.setParameter('fc_light_direction', vld);
   program.setParameter('fc_color', mi.ambientColor);
   program.setParameter4('fc_vertex_color', mi.colorMin, mi.colorMax, mi.colorRate, mi.colorMerge);
   program.setParameter4('fc_alpha', mi.alphaBase, mi.alphaRate, mi.alphaLevel, mi.alphaMerge);
   program.setParameter('fc_ambient_color', mi.ambientColor);
   program.setParameter('fc_diffuse_color', mi.diffuseColor);
   program.setParameter('fc_specular_color', mi.specularColor);
   program.setParameter4('fc_specular', mi.specularBase, mi.specularLevel, mi.specularAverage, mi.specularShadow);
   program.setParameter('fc_specular_view_color', mi.specularViewColor);
   program.setParameter4('fc_specular_view', mi.specularViewBase, mi.specularViewRate, mi.specularViewAverage, mi.specularViewShadow);
   program.setParameter('fc_reflect_color', mi.reflectColor);
   var bones = renderable.bones();
   if(bones){
      var boneCount = renderable._boneLimit;
      var data = MO.Lang.TypeArray.findTemp(MO.EDataType.Float32, 12 * boneCount);
      for(var i = 0; i < boneCount; i++){
         var bone = bones.at(i);
         var boneMatrix = bone.matrix();
         boneMatrix.writeData4x3(data, 12 * i);
      }
      program.setParameter('vc_bone_matrix', data);
   }
   o.__base.FE3dAutomaticEffect.drawRenderable.call(o, region, renderable);
}
MO.FE3dGeneralColorVideoEffect = function FE3dGeneralColorVideoEffect(o){
   o = MO.Class.inherits(this, o, MO.FE3dAutomaticEffect);
   o._code          = 'general.color.video';
   o.buildMaterial  = MO.FE3dGeneralColorVideoEffect_buildMaterial;
   o.drawRenderable = MO.FE3dGeneralColorVideoEffect_drawRenderable;
   return o;
}
MO.FE3dGeneralColorVideoEffect_drawRenderable = function FE3dGeneralColorVideoEffect_drawRenderable(region, renderable){
   var o = this;
   var program = o._program;
   var cameraPosition = region.calculate(MO.EG3dRegionParameter.CameraPosition);
   var lightDirection = region.calculate(MO.EG3dRegionParameter.LightDirection);
   var vpMatrix = region.calculate(MO.EG3dRegionParameter.CameraViewProjectionMatrix)
   var material = renderable.material();
   o.bindMaterial(material);
   var matrix = renderable.currentMatrix();
   program.setParameter('vc_model_matrix', matrix);
   program.setParameter('vc_vp_matrix', vpMatrix);
   o.bindAttributes(renderable);
   o.bindSamplers(renderable);
   o.__base.FE3dAutomaticEffect.drawRenderable.call(o, region, renderable);
}
MO.FE3dGeneralColorVideoMaskEffect = function FE3dGeneralColorVideoMaskEffect(o){
   o = MO.Class.inherits(this, o, MO.FE3dAutomaticEffect);
   o._code          = 'general.color.video.mask';
   o.buildMaterial  = MO.FE3dGeneralColorVideoMaskEffect_buildMaterial;
   o.drawRenderable = MO.FE3dGeneralColorVideoMaskEffect_drawRenderable;
   return o;
}
MO.FE3dGeneralColorVideoMaskEffect_drawRenderable = function FE3dGeneralColorVideoMaskEffect_drawRenderable(region, renderable){
   var o = this;
   var textureMask = renderable._textureMask;
   if(!textureMask){
      return true;
   }
   var program = o._program;
   var cameraPosition = region.calculate(MO.EG3dRegionParameter.CameraPosition);
   var lightDirection = region.calculate(MO.EG3dRegionParameter.LightDirection);
   var vpMatrix = region.calculate(MO.EG3dRegionParameter.CameraViewProjectionMatrix)
   var material = renderable.material();
   o.bindMaterial(material);
   var matrix = renderable.currentMatrix();
   program.setParameter('vc_model_matrix', matrix);
   program.setParameter('vc_vp_matrix', vpMatrix);
   o.bindAttributes(renderable);
   o.bindSamplers(renderable);
   o.__base.FE3dAutomaticEffect.drawRenderable.call(o, region, renderable);
}
MO.FE3dGeneralTechnique = function FE3dGeneralTechnique(o){
   o = MO.Class.inherits(this, o, MO.FE3dTechnique);
   o._code      = 'general';
   o._passColor = MO.Class.register(o, new MO.AGetter('_passColor'));
   o.setup      = MO.FE3dGeneralTechnique_setup;
   return o;
}
MO.FE3dGeneralTechnique_setup = function FE3dGeneralTechnique_setup(){
   var o = this;
   o.__base.FE3dTechnique.setup.call(o);
   o.registerMode(MO.EG3dTechniqueMode.Ambient);
   o.registerMode(MO.EG3dTechniqueMode.DiffuseLevel);
   o.registerMode(MO.EG3dTechniqueMode.DiffuseColor);
   o.registerMode(MO.EG3dTechniqueMode.SpecularLevel);
   o.registerMode(MO.EG3dTechniqueMode.SpecularColor);
   o.registerMode(MO.EG3dTechniqueMode.Result);
   var pass = o._passColor = MO.Class.create(MO.FE3dGeneralColorPass);
   pass.linkGraphicContext(o);
   pass.setup();
   o.pushPass(pass);
}
MO.FE3dShadowColorAutomaticEffect = function FE3dShadowColorAutomaticEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dAutomaticEffect);
   o._code          = 'shadow.color.automatic';
   o.drawRenderable = MO.FE3dShadowColorAutomaticEffect_drawRenderable;
   return o;
}
MO.FE3dShadowColorAutomaticEffect_drawRenderable = function FE3dShadowColorAutomaticEffect_drawRenderable(pg, pr){
   var o = this;
   var c = o._graphicContext;
   var p = o._program;
   var vcp = pg.calculate(MO.EG3dRegionParameter.CameraPosition);
   var vcvpm = pg.calculate(MO.EG3dRegionParameter.CameraViewProjectionMatrix);
   var vld = pg.calculate(MO.EG3dRegionParameter.LightDirection);
   var vlvm = pg.calculate(MO.EG3dRegionParameter.LightViewMatrix);
   var vlvpm = pg.calculate(MO.EG3dRegionParameter.LightViewProjectionMatrix);
   var vlci = pg.calculate(MO.EG3dRegionParameter.LightInfo);
   var tp = pg.techniquePass();
   var m = pr.material();
   o.bindMaterial(m);
   p.setParameter('vc_light_depth', vlci);
   p.setParameter('vc_model_matrix', pr.currentMatrix());
   p.setParameter('vc_vp_matrix', vcvpm);
   p.setParameter('vc_camera_position', vcp);
   p.setParameter('vc_light_direction', vld);
   p.setParameter('vc_light_view_matrix', vlvm);
   p.setParameter('vc_light_vp_matrix', vlvpm);
   p.setParameter('fc_camera_position', vcp);
   p.setParameter('fc_light_direction', vld);
   p.setParameter4('fc_light_depth', 1.0 / 4096.0, 0.0, -1.0 / 4096.0, vlci.w);
   var mi = m.info();
   p.setParameter('fc_color', mi.ambientColor);
   p.setParameter4('fc_vertex_color', mi.colorMin, mi.colorMax, mi.colorRate, mi.colorMerge);
   p.setParameter4('fc_alpha', mi.alphaBase, mi.alphaRate, mi.alphaLevel, mi.alphaMerge);
   p.setParameter('fc_ambient_color', mi.ambientColor);
   p.setParameter('fc_diffuse_color', mi.diffuseColor);
   p.setParameter('fc_specular_color', mi.specularColor);
   p.setParameter4('fc_specular', mi.specularBase, mi.specularLevel, mi.specularAverage, mi.specularShadow);
   p.setParameter('fc_specular_view_color', mi.specularViewColor);
   p.setParameter4('fc_specular_view', mi.specularViewBase, mi.specularViewRate, mi.specularViewAverage, mi.specularViewShadow);
   p.setParameter('fc_reflect_color', mi.reflectColor);
   o.bindAttributes(pr);
   p.setSampler('fs_light_depth', tp.textureDepth());
   o.bindSamplers(pr);
   c.drawTriangles(pr.indexBuffer());
}
MO.FE3dShadowColorPass = function FE3dShadowColorPass(o){
   o = MO.Class.inherits(this, o, MO.FG3dTechniquePass);
   o._code           = 'color';
   o._textureDepth   = MO.Class.register(o, new MO.AGetSet('_textureDepth'));
   o.drawRegion      = MO.FE3dShadowColorPass_drawRegion;
   return o;
}
MO.FE3dShadowColorPass_drawRegion = function FE3dShadowColorPass_drawRegion(p){
   var o = this;
   var c = o._graphicContext;
   c.setRenderTarget(null);
   var bc = p._backgroundColor;
   c.clear(bc.red, bc.green, bc.blue, bc.alpha, 1);
   o.__base.FG3dTechniquePass.drawRegion.call(o, p)
}
MO.FE3dShadowColorSkeletonEffect = function FE3dShadowColorSkeletonEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dAutomaticEffect);
   o._code            = 'shadow.color.skeleton';
   o._supportSkeleton = true;
   o.drawRenderable   = MO.FE3dShadowColorSkeletonEffect_drawRenderable;
   return o;
}
MO.FE3dShadowColorSkeletonEffect_drawRenderable = function FE3dShadowColorSkeletonEffect_drawRenderable(pr, r){
   var o = this;
   var c = o._graphicContext;
   var p = o._program;
   var prvp = pr.matrixViewProjection();
   var prcp = pr.cameraPosition();
   var prld = pr.lightDirection();
   if(p.hasAttribute()){
      var as = p.attributes();
      var ac = as.count();
      for(var n = 0; n < ac; n++){
         var a = as.value(n);
         if(a._statusUsed){
            var vb = r.findVertexBuffer(a._linker);
            if(vb == null){
               throw new MO.TError("Can't find renderable vertex buffer. (linker={1})", a._linker);
            }
            p.setAttribute(a._name, vb, vb._formatCd);
         }
      }
   }
   if(p.hasSampler()){
      var ss = p.samplers();
      var sc = ss.count();
      for(var n = 0; n < sc; n++){
         var s = ss.value(n);
         if(s._statusUsed){
            var ln = s.linker();
            var sp = r.findTexture(ln);
            if(sp != null){
               p.setSampler(s.name(), sp.texture());
            }else{
               throw new MO.TError("Can't find sampler. (linker={1})", ln);
            }
         }
      }
   }
   p.setParameter('vc_model_matrix', r.currentMatrix());
   p.setParameter('vc_vp_matrix', prvp);
   p.setParameter('vc_camera_position', prcp);
   p.setParameter('vc_light_direction', prld);
   p.setParameter('fc_camera_position', prcp);
   p.setParameter('fc_light_direction', prld);
   var m = r.material();
   var mi = m.info();
   p.setParameter('fc_color', mi.ambientColor);
   p.setParameter4('fc_vertex_color', mi.colorMin, mi.colorMax, mi.colorRate, mi.colorMerge);
   p.setParameter4('fc_alpha', mi.alphaBase, mi.alphaRate, mi.alphaLevel, mi.alphaMerge);
   p.setParameter('fc_ambient_color', mi.ambientColor);
   p.setParameter('fc_diffuse_color', mi.diffuseColor);
   p.setParameter('fc_specular_color', mi.specularColor);
   p.setParameter4('fc_specular', mi.specularBase, mi.specularLevel, mi.specularAverage, mi.specularShadow);
   p.setParameter('fc_specular_view_color', mi.specularViewColor);
   p.setParameter4('fc_specular_view', mi.specularViewBase, mi.specularViewRate, mi.specularViewAverage, mi.specularViewShadow);
   p.setParameter('fc_reflect_color', mi.reflectColor);
   var bs = r.bones();
   if(bs){
      var bc = bs.count();
      if(bc > 32){
         bc = 32;
      }
      var d = MO.Lang.TypeArray.findTemp(MO.EDataType.Float32, 16 * bc);
      for(var i = 0; i < bc; i++){
         var b = bs.get(i);
         var m = b.matrix();
         m.writeData(d, 16 * i);
      }
      p.setParameter('vc_bone_matrix', d);
   }
   var ib = r.indexBuffer();
   c.drawTriangles(ib, 0, ib._count);
}
MO.FE3dShadowDepthAutomaticEffect = function FE3dShadowDepthAutomaticEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dAutomaticEffect);
   o._code          = 'shadow.depth.automatic';
   o.drawRenderable = MO.FE3dShadowDepthAutomaticEffect_drawRenderable;
   return o;
}
MO.FE3dShadowDepthAutomaticEffect_drawRenderable = function FE3dShadowDepthAutomaticEffect_drawRenderable(pg, pr){
   var o = this;
   var c = o._graphicContext;
   var p = o._program;
   var lvm = pg.calculate(MO.EG3dRegionParameter.LightViewMatrix);
   var lvpm = pg.calculate(MO.EG3dRegionParameter.LightViewProjectionMatrix);
   var lci = pg.calculate(MO.EG3dRegionParameter.LightInfo);
   c.setBlendFactors(false);
   p.setParameter('vc_camera', lci);
   p.setParameter('vc_model_matrix', pr.currentMatrix());
   p.setParameter('vc_view_matrix', lvm);
   p.setParameter('vc_vp_matrix', lvpm);
   p.setParameter('fc_camera', lci);
   p.setParameter4('fc_alpha', 0, 0, 0, 0.1);
   o.bindAttributes(pr);
   o.bindSamplers(pr);
   c.drawTriangles(pr.indexBuffer());
}
MO.FE3dShadowDepthPass = function FE3dShadowDepthPass(o){
   o = MO.Class.inherits(this, o, MO.FG3dTechniquePass);
   o._code         = 'depth';
   o._renderTarget = null;
   o._textureDepth = MO.Class.register(o, new MO.AGetter('_textureDepth'));
   o._renderTarget = null;
   o.setup         = MO.FE3dShadowDepthPass_setup;
   o.drawRegion    = MO.FE3dShadowDepthPass_drawRegion;
   return o;
}
MO.FE3dShadowDepthPass_setup = function FE3dShadowDepthPass_setup(){
   var o = this;
   o.__base.FG3dTechniquePass.setup.call(o);
   var c = o._graphicContext;
   var d = o._textureDepth = c.createFlatTexture();
   d.setFilter(EG3dSamplerFilter.Linear, EG3dSamplerFilter.Linear);
   d.setWrap(EG3dSamplerFilter.ClampToEdge, EG3dSamplerFilter.ClampToEdge);
   var t = o._renderTarget = c.createRenderTarget();
   t.size().set(2048, 2048);
   t.textures().push(d);
   t.build();
}
MO.FE3dShadowDepthPass_drawRegion = function FE3dShadowDepthPass_drawRegion(p){
   var o = this;
   var c = o._graphicContext;
   if(o._finish){
      c.setRenderTarget(null);
      var bc = p._backgroundColor;
      o._context.clear(bc.red, bc.green, bc.blue, bc.alpha, 1);
   }else{
      c.setRenderTarget(o._renderTarget);
      c.clear(0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
   }
   p._textureDepth = o._textureDepth;
   o.__base.FG3dTechniquePass.drawRegion.call(o, p)
}
MO.FE3dShadowDepthSkeletonEffect = function FE3dShadowDepthSkeletonEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dAutomaticEffect);
   o._code            = 'shadow.depth.skeleton';
   o._supportSkeleton = true;
   o.drawRenderable   = MO.FE3dShadowDepthSkeletonEffect_drawRenderable;
   return o;
}
MO.FE3dShadowDepthSkeletonEffect_drawRenderable = function FE3dShadowDepthSkeletonEffect_drawRenderable(pg, pr){
   var o = this;
   var c = o._graphicContext;
   var p = o._program;
   p.setParameter('vc_model_matrix', r.currentMatrix());
   p.setParameter('vc_vp_matrix', prvp);
   p.setParameter('vc_camera_position', prcp);
   p.setParameter('vc_light_direction', prld);
   p.setParameter('fc_camera_position', prcp);
   p.setParameter('fc_light_direction', prld);
   var m = r.material();
   var mi = m.info();
   p.setParameter('fc_color', mi.ambientColor);
   p.setParameter4('fc_vertex_color', mi.colorMin, mi.colorMax, mi.colorRate, mi.colorMerge);
   p.setParameter4('fc_alpha', mi.alphaBase, mi.alphaRate, mi.alphaLevel, mi.alphaMerge);
   p.setParameter('fc_ambient_color', mi.ambientColor);
   p.setParameter('fc_diffuse_color', mi.diffuseColor);
   p.setParameter('fc_specular_color', mi.specularColor);
   p.setParameter4('fc_specular', mi.specularBase, mi.specularRate, mi.specularAverage, mi.specularShadow);
   p.setParameter('fc_specular_view_color', mi.specularViewColor);
   p.setParameter4('fc_specular_view', mi.specularViewBase, mi.specularViewRate, mi.specularViewAverage, mi.specularViewShadow);
   p.setParameter('fc_reflect_color', mi.reflectColor);
   var bs = pr.bones();
   if(bs){
      var bc = bs.count();
      if(bc > 32){
         bc = 32;
      }
      var d = MO.Lang.TypeArray.findTemp(MO.EDataType.Float32, 16 * bc);
      for(var i = 0; i < bc; i++){
         var b = bs.get(i);
         var m = b.matrix();
         m.writeData(d, 16 * i);
      }
      p.setParameter('vc_bone_matrix', d);
   }
   o.bindAttributes(pr);
   o.bindSamplers(pr);
   c.drawTriangles(pr.indexBuffer());
}
MO.FE3dShadowTechnique = function FE3dShadowTechnique(o){
   o = MO.Class.inherits(this, o, MO.FE3dTechnique);
   o._code        = 'shadow';
   o._passDepth   = MO.Class.register(o, new MO.AGetter('_passDepth'));
   o._passColor   = MO.Class.register(o, new MO.AGetter('_passColor'));
   o.setup        = MO.FE3dShadowTechnique_setup;
   o.updateRegion = MO.FE3dShadowTechnique_updateRegion;
   return o;
}
MO.FE3dShadowTechnique_setup = function FE3dShadowTechnique_setup(){
   var o = this;
   o.__base.FE3dTechnique.setup.call(o);
   o.registerMode(MO.EG3dTechniqueMode.Ambient);
   o.registerMode(MO.EG3dTechniqueMode.DiffuseLevel);
   o.registerMode(MO.EG3dTechniqueMode.DiffuseColor);
   o.registerMode(MO.EG3dTechniqueMode.SpecularLevel);
   o.registerMode(MO.EG3dTechniqueMode.SpecularColor);
   o.registerMode(MO.EG3dTechniqueMode.Result);
   var ps = o._passes;
   var passDepth = o._passDepth = MO.Class.create(MO.FE3dShadowDepthPass);
   passDepth.linkGraphicContext(o);
   passDepth.setup();
   o.pushPass(passDepth);
   var passColor = o._passColor = MO.Class.create(MO.FE3dShadowColorPass);
   passColor.linkGraphicContext(o);
   passColor.setup();
   o.pushPass(passColor);
   passColor.setTextureDepth(passDepth.textureDepth());
}
MO.FE3dShadowTechnique_updateRegion = function FE3dShadowTechnique_updateRegion(p){
   var o = this;
   o.__base.FE3dTechnique.updateRegion.call(o, p);
   var g = o._graphicContext;
   var gs = g.size();
   var c = p.camera();
   var l = p.directionalLight();
   var lc = l.camera();
}
MO.FE3dSphereColorPass = function FE3dSphereColorPass(o){
   o = MO.Class.inherits(this, o, MO.FG3dTechniquePass);
   o._code         = 'color';
   o._textureColor = MO.Class.register(o, new MO.AGetter('_textureColor'));
   o.setup         = MO.FE3dSphereColorPass_setup;
   o.drawBegin     = MO.FE3dSphereColorPass_drawBegin;
   return o;
}
MO.FE3dSphereColorPass_setup = function FE3dSphereColorPass_setup(){
   var o = this;
   o.__base.FG3dTechniquePass.setup.call(o);
   var context = o._graphicContext;
   var texture = o._textureColor = context.createFlatTexture();
   texture.setFilterCd(MO.EG3dSamplerFilter.Nearest, MO.EG3dSamplerFilter.Nearest);
   texture.setWrapCd(MO.EG3dSamplerFilter.ClampToBorder, MO.EG3dSamplerFilter.ClampToBorder);
   texture.update();
   var target = o._renderTarget = context.createRenderTarget();
   target.setQualityCd(MO.Desktop.qualityCd())
   target.textures().push(texture);
   target.build();
}
MO.FE3dSphereColorPass_drawBegin = function FE3dSphereColorPass_drawBegin(region){
   var o = this;
   var context = o._graphicContext;
   var backgroundColor = region.backgroundColor();
   context.setRenderTarget(o._renderTarget);
   context.clear(backgroundColor.red, backgroundColor.green, backgroundColor.blue, backgroundColor.alpha, 1);
}
MO.FE3dSphereViewResultEffect = function FE3dSphereViewResultEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dAutomaticEffect);
   o._code          = 'sphere.view.result';
   o.drawRenderable = MO.FE3dSphereViewResultEffect_drawRenderable;
   return o;
}
MO.FE3dSphereViewResultEffect_drawRenderable = function FE3dSphereViewResultEffect_drawRenderable(region, renderable){
   var o = this;
   var context = o._graphicContext;
   var program = o._program;
   var matrix = renderable.matrix();
   var size = context.size();
   var rateX = 1;
   var rateY = 1;
   if(size.width > size.height){
      rateX = size.height / size.width;
   }else if(size.width < size.height){
      rateY = size.width / size.height;
   }
   matrix.sx = rateX;
   matrix.sy = rateY;
   matrix.updateForce();
   program.setParameter('vc_matrix', matrix);
   program.setParameter4('vc_const', rateX, rateY, 0, 0);
   var material = renderable.material();
   o.bindMaterial(material);
   o.bindAttributes(renderable);
   o.bindSamplers(renderable);
   context.drawTriangles(renderable.indexBuffer());
}
MO.FE3dSphereTechnique = function FE3dSphereTechnique(o){
   o = MO.Class.inherits(this, o, MO.FE3dTechnique);
   o._code      = 'general';
   o._passColor = MO.Class.register(o, new MO.AGetter('_passColor'));
   o._passView  = MO.Class.register(o, new MO.AGetter('_passView'));
   o.setup      = MO.FE3dSphereTechnique_setup;
   return o;
}
MO.FE3dSphereTechnique_setup = function FE3dSphereTechnique_setup(){
   var o = this;
   o.__base.FE3dTechnique.setup.call(o);
   o.registerMode(MO.EG3dTechniqueMode.Ambient);
   o.registerMode(MO.EG3dTechniqueMode.DiffuseLevel);
   o.registerMode(MO.EG3dTechniqueMode.DiffuseColor);
   o.registerMode(MO.EG3dTechniqueMode.SpecularLevel);
   o.registerMode(MO.EG3dTechniqueMode.SpecularColor);
   o.registerMode(MO.EG3dTechniqueMode.Result);
   var passes = o._passes;
   var passColor = o._passColor = MO.Class.create(MO.FE3dSphereColorPass);
   passColor.linkGraphicContext(o);
   passColor.setup();
   o.pushPass(passColor);
   var passView = o._passView = MO.Class.create(MO.FE3dSphereViewPass);
   passView.linkGraphicContext(o);
   passView.setup();
   o.pushPass(passView);
   passView.setTextureColor(passColor.textureColor());
}
MO.FE3dSphereViewAutomaticEffect = function FE3dSphereViewAutomaticEffect(o){
   o = MO.Class.inherits(this, o, MO.FG3dAutomaticEffect);
   o._code          = 'sphere.view.automatic';
   o._modelMatrix   = null;
   o._vpMatrix      = null;
   o._pointOrigin   = null;
   o._pointCenter   = null;
   o.construct      = MO.FE3dSphereViewAutomaticEffect_construct;
   o.drawRenderable = MO.FE3dSphereViewAutomaticEffect_drawRenderable;
   return o;
}
MO.FE3dSphereViewAutomaticEffect_construct = function FE3dSphereViewAutomaticEffect_construct(){
   var o = this;
   o.__base.FG3dAutomaticEffect.construct.call(o);
   o._modelMatrix = new MO.SMatrix3d();
   o._vpMatrix = new MO.SMatrix3d();
   o._pointOrigin = new MO.SPoint3(0, 0, 0);
   o._pointCenter = new MO.SPoint3(0, 0, 0);
   o._scale = new MO.SVector4();
}
MO.FE3dSphereViewAutomaticEffect_drawRenderable = function FE3dSphereViewAutomaticEffect_drawRenderable(region, renderable){
   var o = this;
   var context = o._graphicContext;
   var program = o._program;
   var size = context.size();
   var rate = Math.min(size.width, size.height);
   var camera = region.camera();
   var projection = camera.projection();
   var matrix = renderable.matrix();
   var modelMatrix = o._modelMatrix;
   modelMatrix.assign(matrix);
   var vpMatrix = o._vpMatrix;
   vpMatrix.assign(camera.matrix());
   vpMatrix.append(projection.matrix());
   program.setParameter('vc_model_matrix', modelMatrix);
   program.setParameter('vc_vp_matrix', vpMatrix);
   program.setParameter4('vc_const', rate / size.width, rate / size.height, 0, 2 / Math.PI);
   var material = renderable.material();
   o.bindMaterial(material);
   o.bindAttributes(renderable);
   o.bindSamplers(renderable);
   context.drawTriangles(renderable.indexBuffer());
}
MO.FE3dSphereViewPass = function FE3dSphereViewPass(o){
   o = MO.Class.inherits(this, o, MO.FG3dTechniquePass);
   o._code          = 'view';
   o._sphere        = MO.Class.register(o, new MO.AGetter('_sphere'));
   o._rectangle     = null;
   o._textureSize   = null;
   o._textureView   = MO.Class.register(o, new MO.AGetter('_textureViewr'));
   o._textureColor  = MO.Class.register(o, new MO.AGetSet('_textureColor'));
   o._effectView    = null;
   o._effectResult  = null;
   o.construct      = MO.FE3dSphereViewPass_construct;
   o.setup          = MO.FE3dSphereViewPass_setup;
   o.setSphere      = MO.FE3dSphereViewPass_setSphere;
   o.drawBegin      = MO.FE3dSphereViewPass_drawBegin
   o.drawRegion     = MO.FE3dSphereViewPass_drawRegion;
   return o;
}
MO.FE3dSphereViewPass_construct = function FE3dSphereViewPass_construct(){
   var o = this;
   o.__base.FG3dTechniquePass.construct.call(o);
}
MO.FE3dSphereViewPass_setup = function FE3dSphereViewPass_setup(){
   var o = this;
   o.__base.FG3dTechniquePass.setup.call(o);
   var context = o._graphicContext;
   var textureColor = o._textureView = context.createFlatTexture();
   textureColor.setFilterCd(MO.EG3dSamplerFilter.Nearest, MO.EG3dSamplerFilter.Nearest);
   textureColor.setWrapCd(MO.EG3dSamplerFilter.ClampToBorder, MO.EG3dSamplerFilter.ClampToBorder);
   textureColor.update();
   var target = o._renderTarget = context.createRenderTarget();
   target.setQualityCd(MO.Desktop.qualityCd())
   target.textures().push(textureColor);
   target.build();
   var rectangle = o._rectangle = MO.Class.create(MO.FE3dRectangleArea);
   rectangle.linkGraphicContext(o);
   rectangle.setup();
   rectangle.pushTexture(textureColor, 'diffuse');
}
MO.FE3dSphereViewPass_setSphere = function FE3dSphereViewPass_setSphere(sphere){
   var o = this;
   sphere.pushTexture(o._textureColor, 'diffuse');
   o._sphere = sphere;
}
MO.FE3dSphereViewPass_drawBegin = function FE3dSphereViewPass_drawBegin(region){
   var o = this;
   var context = o._graphicContext;
   var rectangle = o._rectangle;
   var effectView = o._effectView;
   if(!effectView){
      region._spaceName = 'general.view'
      effectView = o._effectView = MO.Console.find(MO.FG3dEffectConsole).find(o, region, rectangle);
   }
   var effectResult = o._effectResult;
   if(!effectResult){
      region._spaceName = 'general.view.result'
      effectResult = o._effectResult = MO.Console.find(MO.FG3dEffectConsole).find(o, region, rectangle);
   }
}
MO.FE3dSphereViewPass_drawRegion = function FE3dSphereViewPass_drawRegion(region){
   var o = this;
   var context = o._graphicContext;
   var rectangle = o._rectangle;
   var effectView = o._effectView;
   context.setRenderTarget(null);
   context.setProgram(effectView.program());
   context.clear(0, 0, 0, 0, 1);
   effectView.drawRenderable(region, o._sphere);
}
MO.EE3dInstance = new function EE3dInstance(){
   var o = this;
   o.ModelRenderable    = 'model.renderable';
   o.TemplateRenderable = 'template.renderable';
   o.Scene              = 'scene';
   o.SceneLayer         = 'scene.layer';
   o.SceneDisplay       = 'scene.display';
   o.SceneMaterial      = 'scene.material';
   o.SceneMovie         = 'scene.movie';
   o.SceneRenderable    = 'scene.renderable';
   return o;
}
MO.FE3dAnimation = function FE3dAnimation(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.ME3dObject, MO.MLinkerResource);
   return o;
}
MO.FE3dCamera = function FE3dCamera(o){
   o = MO.Class.inherits(this, o, MO.FG3dCamera, MO.MLinkerResource);
   o._projection     = MO.Class.register(o, new MO.AGetter('_projection'));
   o._rotation       = MO.Class.register(o, new MO.AGetter('_rotation'));
   o._rotationMatrix = null;
   o._quaternion     = null;
   o._quaternionX    = null;
   o._quaternionY    = null;
   o._quaternionZ    = null;
   o.construct       = MO.FE3dCamera_construct;
   o.doMoveX         = MO.FE3dCamera_doMoveX;
   o.doMoveY         = MO.FE3dCamera_doMoveY;
   o.doMoveZ         = MO.FE3dCamera_doMoveZ;
   o.doForward       = MO.FE3dCamera_doForward;
   o.doPitch         = MO.FE3dCamera_doPitch;
   o.doYaw           = MO.FE3dCamera_doYaw;
   o.doRoll          = MO.FE3dCamera_doRoll;
   o.loadResource    = MO.FE3dCamera_loadResource;
   o.commitResource  = MO.FE3dCamera_commitResource;
   o.update          = MO.FE3dCamera_update;
   return o;
}
MO.FE3dCamera_construct = function FE3dCamera_construct(){
   var o = this;
   o.__base.FG3dCamera.construct.call(o);
   o._rotation = new MO.SVector3();
   o._rotationMatrix = new MO.SMatrix3x3();
   o._quaternion = new MO.SQuaternion();
   o._quaternionX = new MO.SQuaternion();
   o._quaternionY = new MO.SQuaternion();
   o._quaternionZ = new MO.SQuaternion();
}
MO.FE3dCamera_doMoveX = function FE3dCamera_doMoveX(value){
   this._position.x += value;
}
MO.FE3dCamera_doMoveY = function FE3dCamera_doMoveY(value){
   this._position.y += value;
}
MO.FE3dCamera_doMoveZ = function FE3dCamera_doMoveZ(value){
   this._position.z += value;
}
MO.FE3dCamera_doForward = function FE3dCamera_doForward(value){
   var o = this;
   o._position.x += o._direction.x * value;
   o._position.y += o._direction.y * value;
   o._position.z += o._direction.z * value;
}
MO.FE3dCamera_doPitch = function FE3dCamera_doPitch(p){
   this._rotation.x += p;
}
MO.FE3dCamera_doYaw = function FE3dCamera_doYaw(p){
   this._rotation.y += p;
}
MO.FE3dCamera_doRoll = function FE3dCamera_doRoll(p){
   this._rotation.z += p;
}
MO.FE3dCamera_loadResource = function FE3dCamera_loadResource(resource){
   var o = this;
   var resourceProjection = resource.projection();
   o._resource = resource;
   o.position().assign(resource.position());
   o.setDirection(resource.direction().x, resource.direction().y, resource.direction().z);
   o.update();
   var projection = o.projection();
   projection._angle = resourceProjection.angle();
   projection._znear = resourceProjection.znear();
   projection._zfar = resourceProjection.zfar();
   projection.update();
}
MO.FE3dCamera_commitResource = function FE3dCamera_commitResource(){
   var o = this;
   var resource = o._resource;
   resource._position.assign(o._position);
   resource._direction.assign(o._direction);
}
MO.FE3dCamera_update = function FE3dCamera_update(){
   var o = this;
   var rotation = o._rotation;
   o._quaternionX.fromAxisAngle(MO.Lang.Math.vectorAxisX, rotation.x);
   o._quaternionY.fromAxisAngle(MO.Lang.Math.vectorAxisY, rotation.y);
   o._quaternionZ.fromAxisAngle(MO.Lang.Math.vectorAxisZ, rotation.z);
   var quaternion = o._quaternion.identity();
   quaternion.mul(o._quaternionX);
   quaternion.mul(o._quaternionY);
   quaternion.mul(o._quaternionZ);
   var matrix = o._rotationMatrix;
   matrix.build(quaternion);
   var direction = o._direction;
   matrix.transformPoint3(o._directionTarget, direction);
   direction.normalize();
   o.__base.FG3dCamera.update.call(o);
}
MO.FG3dCamera_dispose = function FG3dCamera_dispose(){
   var o = this;
   o._projection = MO.Lang.Obejct.dispose(o._projection);
   o.__base.FObject.dispose.call(o);
}
MO.FE3dDirectionalLight = function FE3dDirectionalLight(o){
   o = MO.Class.inherits(this, o, MO.FG3dDirectionalLight, MO.MLinkerResource);
   o._material    = MO.Class.register(o, new MO.AGetter('_material'));
   o.construct    = MO.FE3dDirectionalLight_construct;
   o.loadResource = MO.FE3dDirectionalLight_loadResource;
   o.dispose      = MO.FE3dDirectionalLight_dispose;
   return o;
}
MO.FE3dDirectionalLight_construct = function FE3dDirectionalLight_construct(){
   var o = this;
   o.__base.FG3dDirectionalLight.construct.call(o);
   o._material = MO.Class.create(MO.FE3dMaterial);
}
MO.FE3dDirectionalLight_loadResource = function FE3dDirectionalLight_loadResource(resource){
   var o = this;
   o.__base.MLinkerResource.loadResource.call(o, resource);
   o._material.loadResource(resource.material());
}
MO.FE3dDirectionalLight_dispose = function FE3dDirectionalLight_dispose(){
   var o = this;
   o._material = MO.Lang.Object.dispose(o._material);
   o.__base.FG3dDirectionalLight.dispose.call(o);
}
MO.FE3dFlatStage = function FE3dFlatStage(o){
   o = MO.Class.inherits(this, o, MO.FE3dStage);
   o._layer    = MO.Class.register(o, new MO.AGetter('_layer'));
   o.construct = MO.FE3dFlatStage_construct;
   return o;
}
MO.FE3dFlatStage_construct = function FE3dFlatStage_construct(){
   var o = this;
   o.__base.FE3dStage.construct.call(o);
   var layer = o._layer = MO.Class.create(MO.FDisplayLayer);
   o.registerLayer('Layer', layer);
}
MO.FE3dInstanceConsole = function FE3dInstanceConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd   = MO.EScope.Local;
   o._factory   = MO.Class.register(o, new MO.AGetter('_factory'));
   o.construct  = MO.FE3dInstanceConsole_construct;
   o.register   = MO.FE3dInstanceConsole_register;
   o.unregister = MO.FE3dInstanceConsole_unregister;
   o.create     = MO.FE3dInstanceConsole_create;
   return o;
}
MO.FE3dInstanceConsole_construct = function FE3dInstanceConsole_construct(){
   var o = this;
   var factory = o._factory = MO.Class.create(MO.FClassFactory);
   factory.register(MO.EE3dInstance.ModelRenderable, MO.FE3dModelRenderable);
   factory.register(MO.EE3dInstance.TemplateRenderable, MO.FE3dTemplateRenderable);
   factory.register(MO.EE3dInstance.Scene, MO.FE3dScene);
   factory.register(MO.EE3dInstance.SceneLayer, MO.FE3dSceneLayer);
   factory.register(MO.EE3dInstance.SceneDisplay, MO.FE3dSceneDisplay);
   factory.register(MO.EE3dInstance.SceneMaterial, MO.FE3dSceneMaterial);
   factory.register(MO.EE3dInstance.SceneMovie, MO.FE3dMovie);
   factory.register(MO.EE3dInstance.SceneRenderable, MO.FE3dSceneDisplayRenderable);
}
MO.FE3dInstanceConsole_register = function FE3dInstanceConsole_register(code, clazz){
   this._factory.register(code, clazz);
}
MO.FE3dInstanceConsole_unregister = function FE3dInstanceConsole_unregister(code){
   this._factory.unregister(code, clazz);
}
MO.FE3dInstanceConsole_create = function FE3dInstanceConsole_create(code){
   return this._factory.create(code);
}
MO.FE3dMaterial = function FE3dMaterial(o){
   o = MO.Class.inherits(this, o, MO.FE3rMaterial);
   o._parent    = null;
   o.loadParent = MO.FE3dRenderable_loadParent;
   return o;
}
MO.FE3dRenderable_loadParent = function FE3dRenderable_loadParent(material){
   var o = this;
   o._parent = material;
}
MO.FE3dMesh = function FE3dMesh(o){
   o = MO.Class.inherits(this, o, MO.FE3dSpace, MO.MLinkerResource, MO.MListenerLoad);
   o._ready         = false;
   o._display       = null;
   o._renderable    = null;
   o._layer         = null;
   o.construct      = MO.FE3dMesh_construct;
   o.testReady      = MO.FE3dMesh_testReady;
   o.loadRenderable = MO.FE3dMesh_loadRenderable;
   o.processLoad    = MO.FE3dMesh_processLoad;
   o.process        = MO.FE3dMesh_process;
   return o;
}
MO.FE3dMesh_construct = function FE3dMesh_construct(){
   var o = this;
   o.__base.FE3dSpace.construct.call(o);
   var l = o._layer = MO.Class.create(MO.FDisplayLayer);
   o.registerLayer('Layer', l);
}
MO.FE3dMesh_testReady = function FE3dMesh_testReady(){
   return this._ready;
}
MO.FE3dMesh_loadRenderable = function FE3dMesh_loadRenderable(p){
   var o = this;
   var resource = p.resource();
   var technique = o.selectTechnique(o, FE3dGeneralTechnique);
   technique.setResource(resource.technique());
   o.loadResource(resource);
   var m = MO.Class.create(MO.FE3dMeshRenderable);
   m.setResource(resource._renderable);
   m._material.loadResource(resource._display._material);
   m._renderable = p;
   var vbs = p._vertexBuffers;
   var vbc = vbs.count();
   for(var i = 0; i < vbc; i++){
      var vb = vbs.getAt(i);
      m._vertexBuffers.set(vb._name, vb);
   }
   m._indexBuffer = p._indexBuffer;
   m.matrix().assign(m.resource().matrix());
   var display = o._display = MO.Class.create(MO.FE3dMeshDisplay);
   display._renderable = m;
   display.load(resource._display);
   display.pushRenderable(m);
   o._layer.pushDisplay(display);
   o._ready = true;
   o.processLoadListener(o);
}
MO.FE3dMesh_processLoad = function FE3dMesh_processLoad(){
   var o = this;
   if(!o._renderable.testReady()){
      return false;
   }
   o.loadRenderable(o._renderable);
   return true;
}
MO.FE3dMesh_process = function FE3dMesh_process(){
   var o = this;
   o.__base.FE3dSpace.process.call(o);
}
MO.FE3dMeshConsole = function FE3dMeshConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd    = MO.EScope.Local;
   o._loadMeshs  = null;
   o._meshs      = MO.Class.register(o, new MO.AGetter('_meshs'));
   o._thread     = null;
   o._interval   = 100;
   o.onProcess   = MO.FE3dMeshConsole_onProcess;
   o.construct   = MO.FE3dMeshConsole_construct;
   o.meshs       = MO.FE3dMeshConsole_meshs;
   o.allocByGuid = MO.FE3dMeshConsole_allocByGuid;
   o.allocByCode = MO.FE3dMeshConsole_allocByCode;
   o.free        = MO.FE3dMeshConsole_free;
   return o;
}
MO.FE3dMeshConsole_onProcess = function FE3dMeshConsole_onProcess(){
   var o = this;
   var ms = o._loadMeshs;
   ms.record();
   while(ms.next()){
      var m = ms.current();
      if(m.processLoad()){
         ms.removeCurrent();
      }
   }
}
MO.FE3dMeshConsole_construct = function FE3dMeshConsole_construct(){
   var o = this;
   o._loadMeshs = new MO.TLooper();
   o._meshs = new MO.TDictionary();
   var t = o._thread = MO.Class.create(MO.FThread);
   t.setInterval(o._interval);
   t.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(t);
}
MO.FE3dMeshConsole_meshs = function FE3dMeshConsole_meshs(){
   return this._meshs;
}
MO.FE3dMeshConsole_allocByGuid = function FE3dMeshConsole_allocByGuid(pc, pn){
   var o = this;
   var ms = o._meshs.get(pn);
   if(ms){
      if(!ms.isEmpty()){
         return ms.pop();
      }
   }
   var rmc = MO.Console.find(MO.FE3rMeshConsole);
   var rm = rmc.loadByGuid(pc, pn);
   var m = MO.Class.create(MO.FE3dMesh);
   m.linkGraphicContext(pc);
   m._name = pn;
   m._renderable = rm;
   o._loadMeshs.push(m);
   return m;
}
MO.FE3dMeshConsole_allocByCode = function FE3dMeshConsole_allocByCode(pc, pn){
   var o = this;
   var ms = o._meshs.get(pn);
   if(ms){
      if(!ms.isEmpty()){
         return ms.pop();
      }
   }
   var rmc = MO.Console.find(MO.FE3rMeshConsole);
   var rm = rmc.loadByCode(pc, pn);
   var m = MO.Class.create(MO.FE3dMesh);
   m.linkGraphicContext(pc);
   m._name = pn;
   m._renderable = rm;
   o._loadMeshs.push(m);
   return m;
}
MO.FE3dMeshConsole_free = function FE3dMeshConsole_free(p){
   var o = this;
   p._display.remove();
}
MO.FE3dMeshDisplay = function FE3dMeshDisplay(o){
   o = MO.Class.inherits(this, o, MO.FE3dDisplay, MO.MLinkerResource);
   o._material      = MO.Class.register(o, new MO.AGetter('_material'));
   o._renderable    = MO.Class.register(o, new MO.AGetter('_renderable'));
   o.load           = MO.FE3dMeshDisplay_load;
   o.reloadResource = MO.FE3dMeshDisplay_reloadResource;
   return o;
}
MO.FE3dMeshDisplay_load = function FE3dMeshDisplay_load(resource){
   var o = this;
   o._resource = resource;
   o._matrix.assign(resource.matrix());
}
MO.FE3dMeshDisplay_reloadResource = function FE3dMeshDisplay_reloadResource(){
   var o = this;
   o._matrix.assign(o._resource.matrix());
}
MO.FE3dMeshRenderable = function FE3dMeshRenderable(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o._renderable      = MO.Class.register(o, MO.AGetSet('_renderable'));
   o._activeTrack     = null;
   o.vertexCount      = MO.FE3dMeshRenderable_vertexCount;
   o.findVertexBuffer = MO.FE3dMeshRenderable_findVertexBuffer;
   o.vertexBuffers    = MO.FE3dMeshRenderable_vertexBuffers;
   o.indexBuffers     = MO.FE3dMeshRenderable_indexBuffers;
   o.findTexture      = MO.FE3dMeshRenderable_findTexture;
   o.textures         = MO.FE3dMeshRenderable_textures;
   o.reloadResource   = MO.FE3dMeshRenderable_reloadResource;
   o.process          = MO.FE3dMeshRenderable_process;
   o.processDelay     = MO.FE3dMeshRenderable_processDelay;
   o.update           = MO.FE3dMeshRenderable_update;
   o.dispose          = MO.FE3dMeshRenderable_dispose;
   return o;
}
MO.FE3dMeshRenderable_vertexCount = function FE3dMeshRenderable_vertexCount(){
   return this._renderable.vertexCount();
}
MO.FE3dMeshRenderable_findVertexBuffer = function FE3dMeshRenderable_findVertexBuffer(code){
   var o = this;
   var buffer = o._vertexBuffers.get(code);
   if(buffer){
      return buffer;
   }
   return o._renderable.findVertexBuffer(code);
}
MO.FE3dMeshRenderable_vertexBuffers = function FE3dMeshRenderable_vertexBuffers(){
   return this._renderable.vertexBuffers();
}
MO.FE3dMeshRenderable_indexBuffers = function FE3dMeshRenderable_indexBuffers(){
   return this._renderable.indexBuffers();
}
MO.FE3dMeshRenderable_findTexture = function FE3dMeshRenderable_findTexture(code){
   var o = this;
   var textures = o._textures.get(code);
   if(textures){
      return textures;
   }
   return o._renderable.findTexture(p);
}
MO.FE3dMeshRenderable_textures = function FE3dMeshRenderable_textures(){
   var o = this;
   var textures = o._textures;
   if(textures){
      return textures;
   }
   return o._renderable.textures();
}
MO.FE3dMeshRenderable_reloadResource = function FE3dMeshRenderable_reloadResource(){
   var o = this;
   o._matrix.assign(o._resource.matrix());
}
MO.FE3dMeshRenderable_process = function FE3dMeshRenderable_process(region){
   var o = this;
   o.__base.FE3dRenderable.process.call(o, region);
   var track = o._activeTrack;
   if(track){
      if(o._display._optionPlay){
         var animation = track._animation;
         if(animation){
            animation.process(track);
         }
      }
   }
}
MO.FE3dMeshRenderable_processDelay = function FE3dMeshRenderable_processDelay(p){
   var o = this;
   o.__base.FE3dRenderable.processDelay.call(o, p);
}
MO.FE3dMeshRenderable_update = function FE3dMeshRenderable_update(region){
   var o = this;
   var display = o._display;
   var matrix = o._matrix;
   var track = o._activeTrack;
   var calculateMatrix = o._calculateMatrix;
   if(track){
      calculateMatrix.assign(track.matrix());
      calculateMatrix.append(matrix);
   }else{
      calculateMatrix.assign(matrix);
   }
   if(display){
      var displayMatrix = o._display.currentMatrix();
      calculateMatrix.append(displayMatrix);
   }
   var changed = o._currentMatrix.attachData(calculateMatrix.data());
   if(changed){
      region.change();
   }
}
MO.FE3dMeshRenderable_dispose = function FE3dMeshRenderable_dispose(){
   var o = this;
   o._modelMatrix = MO.Lang.Object.dispose(o._modelMatrix);
   o._vertexBuffers = MO.Lang.Object.dispose(o._vertexBuffers);
   o.__base.FE3dRenderable.dispose.call(o);
}
MO.FE3dModel = function FE3dModel(o){
   o = MO.Class.inherits(this, o, MO.FE3dSpace, MO.MPoolAble, MO.MLinkerResource, MO.MListenerLoad);
   o._dataReady     = false;
   o._display       = MO.Class.register(o, new MO.AGetter('_display'));
   o._renderable    = MO.Class.register(o, new MO.AGetSet('_renderable'));
   o.construct      = MO.FE3dModel_construct;
   o.testReady      = MO.FE3dModel_testReady;
   o.loadRenderable = MO.FE3dModel_loadRenderable;
   o.processLoad    = MO.FE3dModel_processLoad;
   return o;
}
MO.FE3dModel_construct = function FE3dModel_construct(){
   var o = this;
   o.__base.FE3dSpace.construct.call(o);
   var layer = o._layer = MO.Class.create(MO.FDisplayLayer);
   o.registerLayer('sprite', layer);
   var display = o._display = MO.Class.create(MO.FE3dModelDisplay);
   layer.pushDisplay(display);
}
MO.FE3dModel_testReady = function FE3dModel_testReady(){
   return this._dataReady;
}
MO.FE3dModel_loadRenderable = function FE3dModel_loadRenderable(renderable){
   var o = this;
   o._renderable = renderable;
   var resource = renderable.resource();
   o.selectTechnique(o, FE3dGeneralTechnique);
   o.loadResource(resource);
   o._display.load(renderable);
   o._dataReady = true;
}
MO.FE3dModel_processLoad = function FE3dModel_processLoad(){
   var o = this;
   if(o._dataReady){
      return true;
   }
   var renderable = o._renderable;
   if(!renderable.testReady()){
      return false;
   }
   o.loadRenderable(renderable);
   o.processLoadListener(o);
   return true;
}
MO.FE3dModelConsole = function FE3dModelConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd    = MO.EScope.Local;
   o._looper     = null;
   o._pools      = MO.Class.register(o, new MO.AGetter('_pools'));
   o._thread     = null;
   o._interval   = 100;
   o.onProcess   = MO.FE3dModelConsole_onProcess;
   o.construct   = MO.FE3dModelConsole_construct;
   o.pools       = MO.FE3dModelConsole_pools;
   o.allocByGuid = MO.FE3dModelConsole_allocByGuid;
   o.allocByCode = MO.FE3dModelConsole_allocByCode;
   o.free        = MO.FE3dModelConsole_free;
   return o;
}
MO.FE3dModelConsole_onProcess = function FE3dModelConsole_onProcess(){
   var o = this;
   var looper = o._looper;
   looper.record();
   while(looper.next()){
      var item = looper.current();
      if(item.processLoad()){
         looper.removeCurrent();
      }
   }
}
MO.FE3dModelConsole_construct = function FE3dModelConsole_construct(){
   var o = this;
   o._looper = new MO.TLooper();
   o._pools = MO.Class.create(MO.FObjectPools);
   var thread = o._thread = MO.Class.create(MO.FThread);
   thread.setInterval(o._interval);
   thread.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(thread);
}
MO.FE3dModelConsole_allocByGuid = function FE3dModelConsole_allocByGuid(context, guid){
   var o = this;
   var model = o._pools.alloc(guid);
   if(model){
      return model;
   }
   var renderable = MO.Console.find(MO.FE3rModelConsole).load(context, guid);
   var model = MO.Class.create(MO.FE3dModel);
   model.linkGraphicContext(context);
   model.setPoolCode(guid);
   model.setRenderable(renderable);
   o._looper.push(model);
   return model;
}
MO.FE3dModelConsole_allocByCode = function FE3dModelConsole_allocByCode(context, code){
   var o = this;
   var model = o._pools.alloc(code);
   if(model){
      return model;
   }
   return model;
}
MO.FE3dModelConsole_free = function FE3dModelConsole_free(model){
   var o = this;
   var code = model.poolCode();
   o._pools.free(code, model);
}
MO.FE3dModelDisplay = function FE3dModelDisplay(o){
   o = MO.Class.inherits(this, o, MO.FE3dDisplay, MO.MLinkerResource);
   o._material      = MO.Class.register(o, new MO.AGetter('_material'));
   o._shapes        = MO.Class.register(o, new MO.AGetter('_shapes'));
   o.construct      = MO.FE3dModelDisplay_construct;
   o.load           = MO.FE3dModelDisplay_load;
   o.reloadResource = MO.FE3dModelDisplay_reloadResource;
   o.dispose        = MO.FE3dModelDisplay_dispose;
   return o;
}
MO.FE3dModelDisplay_construct = function FE3dModelDisplay_construct(){
   var o = this;
   o.__base.FE3dDisplay.construct.call(o);
   o._material = MO.Class.create(FE3dMaterial);
}
MO.FE3dModelDisplay_load = function FE3dModelDisplay_load(renderable){
   var o = this;
   var material = o._material;
   var instanceConsole = RConsole.find(FE3dInstanceConsole);
   var modelResource = renderable.resource();
   var resource = o._resource = modelResource.display();
   o._matrix.assign(resource.matrix());
   material.loadResource(resource.material());
   var geometryRenderables = renderable.geometrys();
   if(geometryRenderables){
      var geometryCount = geometryRenderables.count();
      var shapes = o._shapes = new MO.TObjects();
      for(var i = 0; i < geometryCount; i++){
         var geometryRenderable = geometryRenderables.get(i);
         var shape = instanceConsole.create(MO.EE3dInstance.ModelRenderable);
         shape.setDisplay(o);
         shape.setMaterial(material);
         shape.load(geometryRenderable);
         shapes.push(shape);
         o.pushRenderable(shape);
      }
   }
}
MO.FE3dModelDisplay_reloadResource = function FE3dModelDisplay_reloadResource(){
   var o = this;
   var resource = o._resource;
   o._matrix.assign(resource.matrix());
   o._material.loadResource(resource.material());
}
MO.FE3dModelDisplay_dispose = function FE3dModelDisplay_dispose(){
   var o = this;
   o._material = MO.Lang.Object.dispose(o._material);
   o.__base.FE3dDisplay.dispose.call(o);
}
MO.FE3dModelRenderable = function FE3dModelRenderable(o){
   o = MO.Class.inherits(this, o, MO.FE3dMeshRenderable);
   o._ready            = false;
   o._materialResource = null;
   o.testVisible       = MO.FE3dModelRenderable_testVisible;
   o.load              = MO.FE3dModelRenderable_load;
   return o;
}
MO.FE3dModelRenderable_testVisible = function FE3dModelRenderable_testVisible(p){
   var o = this;
   if(!o._ready){
      var renderable = o._renderable;
      if(renderable){
         o._ready = renderable.testReady();
      }
   }
   return o._ready;
}
MO.FE3dModelRenderable_load = function FE3dModelRenderable_load(renderable){
   var o = this;
   var material = o._material;
   var materialResource = o._materialResource = renderable.material();
   if(materialResource){
      material.assignInfo(materialResource.info());
   }
   o._effectCode = material.info().effectCode;
   o._renderable = renderable;
}
MO.FE3dMovie = function FE3dMovie(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MLinkerResource);
   o._interval      = null;
   o._firstTick     = 0;
   o._lastTick      = 0;
   o._matrix        = null;
   o.construct      = MO.FE3dMovie_construct;
   o.loadResource   = MO.FE3dMovie_loadResource;
   o.reloadResource = MO.FE3dMovie_reloadResource;
   o.process        = MO.FE3dMovie_process;
   return o;
}
MO.FE3dMovie_construct = function FE3dMovie_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._matrix = new MO.SMatrix3d();
}
MO.FE3dMovie_loadResource = function FE3dMovie_loadResource(resource){
   var o = this;
   o._resource = resource;
   o._interval = resource._interval;
   o._matrix.setRotation(resource._rotation.x, resource._rotation.y * Math.PI / 180, resource._rotation.z);
   o._matrix.update();
}
MO.FE3dMovie_reloadResource = function FE3dMovie_reloadResource(){
   var o = this;
   var resource = o._resource;
   o.loadResource(resource);
}
MO.FE3dMovie_process = function FE3dMovie_process(matrix){
   var o = this;
   if(o._firstTick == 0){
      o._firstTick = MO.Timer.current();
   }
   if(o._lastTick == 0){
      o._lastTick = MO.Timer.current();
   }
   var tick = RTimer.current();
   var span = tick - o._lastTick;
   if(span > o._interval){
      var resource = o._resource;
      var speed = span / 1000;
      var code = o._resource.code();
      if(code == 'rotation'){
         matrix.ry += resource._rotation.y * speed;
         matrix.updateForce();
      }
      o._lastTick = tick;
   }
}
MO.FE3dOrthoCamera = function FE3dOrthoCamera(o){
   o = MO.Class.inherits(this, o, MO.FE3dCamera);
   o.construct        = MO.FE3dOrthoCamera_construct;
   o.updateFrustum    = MO.FE3dOrthoCamera_updateFrustum;
   o.updateFromCamera = MO.FE3dOrthoCamera_updateFromCamera;
   o.updateFlatCamera = MO.FE3dOrthoCamera_updateFlatCamera;
   return o;
}
MO.FE3dOrthoCamera_construct = function FE3dOrthoCamera_construct(){
   var o = this;
   o.__base.FE3dCamera.construct.call(o);
   o._projection = MO.Class.create(MO.FG3dOrthoProjection);
}
MO.FE3dOrthoCamera_updateFrustum = function FE3dOrthoCamera_updateFrustum(){
   var o = this;
   o.__base.FE3dCamera.updateFrustum.call(o);
   var p = o._projection;
   var s = p._size;
   var f = o._frustum;
   f.update(p._angle, s.width, s.height, p._znear, p._zfar, o._centerFront, o._centerBack, o._matrix);
   return f;
}
MO.FE3dOrthoCamera_updateFromCamera = function FE3dOrthoCamera_updateFromCamera(p){
   var o = this;
   var pf = p.updateFrustum();
   var d = o._direction;
   d.normalize();
   var vx = pf.center.x - d.x * pf.radius;
   var vy = pf.center.y - d.y * pf.radius;
   var vz = pf.center.z - d.z * pf.radius;
   o._position.set(vx, vy, vz);
   o.lookAt(pf.center.x, pf.center.y, pf.center.z);
   o.update();
   var f = o._frustum;
   o._matrix.transform(f.coners, pf.coners, 8);
   f.updateCenter();
   o._projection.updateFrustum(f);
}
MO.FE3dOrthoCamera_updateFlatCamera = function FE3dOrthoCamera_updateFlatCamera(p){
   var o = this;
   var f = o._frustum
   var pf = p.updateFlatFrustum();
   var angle = MO.RConst.DEGREE_RATE * o._projection.angle();
   var distance = pf.radius / Math.sin(angle * 0.5);
   distance = Math.max(distance, p._projection._zfar);
   var d = o._direction;
   d.normalize();
   var vx = pf.center.x - d.x * distance;
   var vy = pf.center.y - d.y * distance;
   var vz = pf.center.z - d.z * distance;
   o._position.set(vx, vy, vz);
   o.lookAt(pf.center.x, pf.center.y, pf.center.z);
   o.update();
   o._projection._znear = 0.3;
   o._projection._zfar = distance * 1.5;
   o._projection.update();
}
MO.FE3dPerspectiveCamera = function FE3dPerspectiveCamera(o){
   o = MO.Class.inherits(this, o, MO.FE3dCamera, MO.MLinkerResource);
   o._centerFront      = 0.4;
   o.construct         = MO.FE3dPerspectiveCamera_construct;
   o.updateFrustum     = MO.FE3dPerspectiveCamera_updateFrustum;
   o.updateFlatFrustum = MO.FE3dPerspectiveCamera_updateFlatFrustum;
   o.updateFromCamera  = MO.FE3dPerspectiveCamera_updateFromCamera;
   o.updateFlatCamera  = MO.FE3dPerspectiveCamera_updateFlatCamera;
   return o;
}
MO.FE3dPerspectiveCamera_construct = function FE3dPerspectiveCamera_construct(){
   var o = this;
   o.__base.FE3dCamera.construct.call(o);
   o._projection = MO.Class.create(MO.FG3dPerspectiveProjection);
}
MO.FE3dPerspectiveCamera_updateFrustum = function FE3dPerspectiveCamera_updateFrustum(){
   var o = this;
   o.__base.FE3dCamera.updateFrustum.call(o);
   var p = o._projection;
   var s = p._size;
   var f = o._frustum;
   f.update(p._angle, s.width, s.height, p._znear, p._zfar, o._centerFront, o._centerBack, o._matrix);
   return f;
}
MO.FE3dPerspectiveCamera_updateFlatFrustum = function FE3dPerspectiveCamera_updateFlatFrustum(){
   var o = this;
   var p = o._projection;
   var s = p._size;
   var f = o._frustum;
   f.updateFlat(p._angle, s.width, s.height, p._znear, p._zfar, o._centerFront, o._centerBack, o._matrix);
   return f;
}
MO.FE3dPerspectiveCamera_updateFromCamera = function FE3dPerspectiveCamera_updateFromCamera(p){
   var o = this;
   var f = o._frustum;
   var pf = p.updateFrustum();
   var angle = MO.RConst.DEGREE_RATE * o._projection.angle();
   var distance = pf.radius / Math.sin(angle * 0.5);
   distance = Math.max(distance, p._projection._zfar);
   var d = o._direction;
   d.normalize();
   var vx = pf.center.x - d.x * distance;
   var vy = pf.center.y - d.y * distance;
   var vz = pf.center.z - d.z * distance;
   o._position.set(vx, vy, vz);
   o.lookAt(pf.center.x, pf.center.y, pf.center.z);
   o.update();
   o._matrix.transform(f.coners, 0, pf.coners, 0, 8);
   f.updateCenter();
   o._projection.updateFrustum(f);
}
MO.FE3dPerspectiveCamera_updateFlatCamera = function FE3dPerspectiveCamera_updateFlatCamera(p){
   var o = this;
   var f = o._frustum;
   var pf = p.updateFlatFrustum();
   var angle = MO.RConst.DEGREE_RATE * o._projection.angle();
   var distance = pf.radius / Math.sin(angle * 0.5);
   distance = Math.max(distance, p._projection._zfar);
   var d = o._direction;
   d.normalize();
   var vx = pf.center.x - d.x * distance * o._centerFront;
   var vy = pf.center.y - d.y * distance * o._centerFront;
   var vz = pf.center.z - d.z * distance * o._centerFront;
   o._position.set(vx, vy, vz);
   o.lookAt(pf.center.x, pf.center.y, pf.center.z);
   o.update();
   o._projection._znear = 0.1;
   o._projection._zfar = distance;
   o._projection.update();
}
MO.FE3dRegion = function FE3dRegion(o){
   o = MO.Class.inherits(this, o, MO.FRegion, MO.MGraphicObject, MO.MG3dRegion, MO.MLinkerResource);
   o._backgroundColor = MO.Class.register(o, new MO.AGetter('_backgroundColor'));
   o.construct        = MO.FE3dRegion_construct;
   o.selectCamera     = MO.FE3dRegion_selectCamera;
   o.loadResource     = MO.FE3dRegion_loadResource;
   o.reloadResource   = MO.FE3dRegion_reloadResource;
   o.prepare          = MO.FE3dRegion_prepare;
   o.dispose          = MO.FE3dRegion_dispose;
   return o;
}
MO.FE3dRegion_construct = function FE3dRegion_construct(){
   var o = this;
   o.__base.FRegion.construct.call(o);
   o.__base.MG3dRegion.construct.call(o);
   var camera = o._camera = MO.Class.create(MO.FE3dPerspectiveCamera);
   camera.position().set(0, 0, -100);
   camera.lookAt(0, 0, 0);
   camera.update();
   camera.projection().update();
   var light = o._directionalLight = MO.Class.create(MO.FE3dDirectionalLight);
   light.direction().set(0, -1, 0);
   var lightCamera = light.camera();
   lightCamera.position().set(10, 10, -10);
   lightCamera.lookAt(0, 0, 0);
   var backgroundColor = o._backgroundColor = new MO.SColor4();
   backgroundColor.set(0, 0, 0, 1);
   o._calculateCameraMatrix = new MO.SMatrix3d();
}
MO.FE3dRegion_selectCamera = function FE3dRegion_selectCamera(camera){
   this._camera = camera;
}
MO.FE3dRegion_loadResource = function FE3dRegion_loadResource(resource){
   var o = this;
   o._resource = resource;
   o._camera.loadResource(resource.camera());
   o._directionalLight.loadResource(resource.light());
   o.reloadResource();
}
MO.FE3dRegion_reloadResource = function FE3dRegion_reloadResource(){
   var o = this;
   var resource = o._resource;
   var optionBackground = resource.optionBackground();
   if(optionBackground){
      o._backgroundColor.assignPower(resource.backgroundColor());
      o._backgroundColor.alpha = 1;
   }else{
      o._backgroundColor.set(0, 0, 0, 0);
   }
}
MO.FE3dRegion_prepare = function FE3dRegion_prepare(){
   var o = this;
   o.__base.MG3dRegion.prepare.call(o);
   var changed = o._calculateCameraMatrix.attach(o._camera.matrix());
   if(changed){
      o._changed = true;
   }
}
MO.FE3dRegion_dispose = function FE3dRegion_dispose(){
   var o = this;
   o.__base.FRegion.dispose.call(o);
   o.__base.MG3dRegion.dispose.call(o);
}
MO.FE3dScene = function FE3dScene(o){
   o = MO.Class.inherits(this, o, MO.FE3dSpace, MO.MLinkerResource, MO.MListenerLoad);
   o._ready                = false;
   o._dataReady            = false;
   o._resource             = MO.Class.register(o, new MO.AGetter('_resource'));
   o._dirty                = false;
   o.onProcess             = MO.FE3dScene_onProcess;
   o.construct             = MO.FE3dScene_construct;
   o.createRegion          = MO.FE3dScene_createRegion;
   o.loadTechniqueResource = MO.FE3dScene_loadTechniqueResource;
   o.loadRegionResource    = MO.FE3dScene_loadRegionResource;
   o.loadDisplayResource   = MO.FE3dScene_loadDisplayResource;
   o.loadLayerResource     = MO.FE3dScene_loadLayerResource;
   o.loadResource          = MO.FE3dScene_loadResource;
   o.testReady             = MO.FE3dScene_testReady;
   o.dirty                 = MO.FE3dScene_dirty;
   o.processLoad           = MO.FE3dScene_processLoad;
   o.active                = MO.FE3dScene_active;
   o.deactive              = MO.FE3dScene_deactive;
   return o;
}
MO.FE3dScene_onProcess = function FE3dScene_onProcess(){
   var o = this;
   o.__base.FE3dSpace.onProcess.call(o);
   if(o._dirty){
      var s = o._region.allRenderables();
      for(var i = s.count() - 1; i >= 0; i--){
         var r = s.getAt(i);
         r.resetInfos();
      }
      o._dirty = false;
   }
}
MO.FE3dScene_construct = function FE3dScene_construct(){
   var o = this;
   o.__base.FE3dSpace.construct.call(o);
}
MO.FE3dScene_createRegion = function FE3dScene_createRegion(){
   return MO.Class.create(MO.FE3dSceneRegion);
}
MO.FE3dScene_loadTechniqueResource = function FE3dScene_loadTechniqueResource(p){
   var o = this;
   o._technique._resource = p;
}
MO.FE3dScene_loadRegionResource = function FE3dScene_loadRegionResource(p){
   var o = this;
   o._region.loadResource(p);
   var rc = p.camera();
   var rcv = rc.projection();
   var c = o.camera();
   c._resource = rc;
   var cp = c.projection();
   c.position().assign(rc.position());
   c.setDirection(rc.direction().x, rc.direction().y, rc.direction().z);
   c.update();
   cp.size().assign(o._graphicContext.size());
   cp._angle = rcv.angle();
   cp._znear = rcv.znear();
   cp._zfar = rcv.zfar();
   cp.update();
   var rl = p.light();
   var rlc = rl.camera();
   var rlv = rlc.projection();
   var l = o.directionalLight();
   l._resource = rl;
   var lc = l._camera;
   var lp = lc._projection;
   lc.position().set(1, 1, -1);
   lc.lookAt(0, 0, 0);
   lc.position().assign(rlc.position());
   lc.update();
   lp.size().set(1024, 1024);
   lp._angle = 60;
   lp._znear = rlv.znear();
   lp._zfar = rlv.zfar();
   lp.update();
}
MO.FE3dScene_loadDisplayResource = function FE3dScene_loadDisplayResource(layer, resource){
   var o = this;
   var display = MO.Console.find(MO.FE3dInstanceConsole).create(MO.EE3dInstance.SceneDisplay);
   display.linkGraphicContext(o);
   display.loadResource(resource);
   MO.Console.find(MO.FE3dSceneConsole).loadDisplay(display);
   layer.pushDisplay(display);
}
MO.FE3dScene_loadLayerResource = function FE3dScene_loadLayerResource(resource){
   var o = this;
   var layer = MO.Console.find(MO.FE3dInstanceConsole).create(MO.EE3dInstance.SceneLayer);
   layer.loadResource(resource);
   var displays = resource.displays();
   if(displays){
      var count = displays.count();
      for(var i = 0; i < count; i++){
         var display = displays.at(i);
         o.loadDisplayResource(layer, display);
      }
   }
   o.registerLayer(resource.code(), layer)
}
MO.FE3dScene_loadResource = function FE3dScene_loadResource(p){
   var o = this;
   o.selectTechnique(o, MO.FE3dGeneralTechnique);
   o.loadTechniqueResource(p.technique());
   o.loadRegionResource(p.region());
   var layers = p.layers();
   if(layers){
      var layerCount = layers.count();
      for(var i = 0; i < layerCount; i++){
         var layer = layers.at(i);
         o.loadLayerResource(layer);
      }
   }
}
MO.FE3dScene_testReady = function FE3dScene_testReady(){
   return this._ready;
}
MO.FE3dScene_dirty = function FE3dScene_dirty(){
   this._dirty = true;
}
MO.FE3dScene_processLoad = function FE3dScene_processLoad(){
   var o = this;
   if(o._dataReady){
      return true;
   }
   if(!o._resource.testReady()){
      return false;
   }
   o.loadResource(o._resource);
   o._ready = true;
   o.processLoadListener(o);
   return true;
}
MO.FE3dScene_active = function FE3dScene_active(){
   var o = this;
   o.__base.FE3dSpace.active.call(o);
}
MO.FE3dScene_deactive = function FE3dScene_deactive(){
   var o = this;
   o.__base.FE3dSpace.deactive.call(o);
}
MO.FE3dSceneAnimation = function FE3dSceneAnimation(o){
   o = MO.Class.inherits(this, o, MO.FE3dAnimation);
   o._animation        = null;
   o._activeClip       = null;
   o._clips            = null;
   o.clips             = MO.FE3dSceneAnimation_clips;
   o.pushClip          = MO.FE3dSceneAnimation_pushClip;
   o.record            = MO.Method.empty;
   o.process           = MO.Method.empty;
   o.selectClip        = MO.FE3dSceneAnimation_selectClip;
   o.loadAnimation     = MO.FE3dSceneAnimation_loadAnimation;
   o.loadSceneResource = MO.FE3dSceneAnimation_loadSceneResource;
   o.reloadResource    = MO.FE3dSceneAnimation_reloadResource;
   return o;
}
MO.FE3dSceneAnimation_clips = function FE3dSceneAnimation_clips(){
   return this._clips;
}
MO.FE3dSceneAnimation_pushClip = function FE3dSceneAnimation_pushClip(clip){
   var o = this;
   var clips = o._clips;
   if(!clips){
      clips = o._clips = new MO.TDictionary();
   }
   clips.set(clip.code(), clip);
}
MO.FE3dSceneAnimation_selectClip = function FE3dSceneAnimation_selectClip(code){
   var o = this;
   var clip = o._clips.get(code);
   if(o._activeClip == clip){
      return;
   }
   var info = o._animation._playInfo;
   info.beginIndex = clip.beginIndex();
   info.endIndex = clip.endIndex();
   info.frameCount = info.endIndex - info.beginIndex + 1;
   o._animation._playRate = clip.playRate();
   o._activeClip = clip;
}
MO.FE3dSceneAnimation_loadAnimation = function FE3dSceneAnimation_loadAnimation(animation){
   var o = this;
   o._animation = animation;
}
MO.FE3dSceneAnimation_loadSceneResource = function FE3dSceneAnimation_loadSceneResource(resource){
   var o = this;
   o._resource = resource;
}
MO.FE3dSceneAnimation_reloadResource = function FE3dSceneAnimation_reloadResource(){
   var o = this;
   var resource = o._resource;
   var animation = o._animation;
   animation._playRate = resource._playRate;
}
MO.FE3dSceneAnimationClip = function FE3dSceneAnimationClip(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MAttributeCode);
   o._animation  = null;
   o._beginIndex = MO.Class.register(o, new MO.AGetSet('_beginIndex'), 0);
   o._endIndex   = MO.Class.register(o, new MO.AGetSet('_endIndex'), 0);
   o._playRate   = MO.Class.register(o, new MO.AGetSet('_playRate'), 1);
   o.setRange    = MO.FE3dSceneAnimationClip_setRange;
   return o;
}
MO.FE3dSceneAnimationClip_setRange = function FE3dSceneAnimationClip_setRange(beginIndex, endIndex){
   var o = this;
   o._beginIndex = beginIndex;
   o._endIndex = endIndex;
}
MO.FE3dSceneCanvas = function FE3dSceneCanvas(o){
   o = MO.Class.inherits(this, o, MO.FE3dCanvas);
   o._activeSpace           = null;
   o._captureStatus         = false;
   o._capturePosition       = null;
   o._captureCameraPosition = null;
   o._captureCameraRotation = null;
   o._actionFullScreen      = false;
   o._actionPlay            = false;
   o._actionMovie           = false;
   o._actionUp              = false;
   o._actionDown            = false;
   o._actionForward         = false;
   o._actionBack            = false;
   o._cameraMoveRate        = 0.4;
   o._cameraKeyRotation     = 0.03;
   o._cameraMouseRotation   = 0.005;
   o._touchTracker          = null;
   o.onEnterFrame           = MO.FE3dSceneCanvas_onEnterFrame;
   o.onMouseCaptureStart    = MO.FE3dSceneCanvas_onMouseCaptureStart;
   o.onMouseCapture         = MO.FE3dSceneCanvas_onMouseCapture;
   o.onMouseCaptureStop     = MO.FE3dSceneCanvas_onMouseCaptureStop;
   o.onTouchStart           = MO.FE3dSceneCanvas_onTouchStart;
   o.onTouchMove            = MO.FE3dSceneCanvas_onTouchMove;
   o.onTouchStop            = MO.FE3dSceneCanvas_onTouchStop;
   o.onTouchZoom            = MO.FE3dSceneCanvas_onTouchZoom;
   o.onDataLoaded           = MO.FE3dSceneCanvas_onDataLoaded;
   o.onResize               = MO.FE3dSceneCanvas_onResize;
   o.construct              = MO.FE3dSceneCanvas_construct;
   o.testPlay               = MO.FE3dSceneCanvas_testPlay;
   o.switchPlay             = MO.FE3dSceneCanvas_switchPlay;
   o.testMovie              = MO.FE3dSceneCanvas_testMovie;
   o.switchMovie            = MO.FE3dSceneCanvas_switchMovie;
   o.doAction               = MO.FE3dSceneCanvas_doAction;
   o.loadByGuid             = MO.FE3dSceneCanvas_loadByGuid;
   o.loadByCode             = MO.FE3dSceneCanvas_loadByCode;
   o.dispose                = MO.FE3dSceneCanvas_dispose;
   return o;
}
MO.FE3dSceneCanvas_onEnterFrame = function FE3dSceneCanvas_onEnterFrame(){
   var o = this;
   var space = o._activeSpace;
   if(!space){
      return;
   }
   var timer = space.timer();
   var span = timer.spanSecond();
   var camera = space.camera();
   var distance = o._cameraMoveRate * span;
   var rotation = o._cameraKeyRotation * span;
   var keyForward = RKeyboard.isPress(MO.EStageKey.Forward);
   var keyBack = RKeyboard.isPress(MO.EStageKey.Back);
   if((keyForward && !keyBack) || o._actionForward){
      camera.doWalk(distance);
   }
   if((!keyForward && keyBack) || o._actionBack){
      camera.doWalk(-distance);
   }
   var keyUp = RKeyboard.isPress(MO.EStageKey.Up);
   var keyDown = RKeyboard.isPress(MO.EStageKey.Down);
   if((keyUp && !keyDown) || o._actionUp){
      camera.doFly(distance);
   }
   if((!keyUp && keyDown) || o._actionDown){
      camera.doFly(-distance);
   }
   var keyLeft = RKeyboard.isPress(MO.EStageKey.RotationLeft);
   var keyRight = RKeyboard.isPress(MO.EStageKey.RotationRight);
   if(keyLeft && !keyRight){
      camera.doYaw(rotation);
   }
   if(!keyLeft && keyRight){
      camera.doYaw(-rotation);
   }
   var keyRotationUp = RKeyboard.isPress(MO.EStageKey.RotationUp);
   var keyRotationDown = RKeyboard.isPress(MO.EStageKey.RotationDown);
   if(keyRotationUp && !keyRotationDown){
      camera.doPitch(rotation);
   }
   if(!keyRotationUp && keyRotationDown){
      camera.doPitch(-rotation);
   }
   camera.update();
   if(o._optionRotation){
      var rotation = o._rotation;
      var layers = space.layers();
      var count = layers.count();
      for(var i = 0; i < count; i++){
         var layer = layers.at(i);
         var matrix = layer.matrix();
         matrix.setRotation(0, rotation.y, 0);
         matrix.update();
      }
      rotation.y += 0.01;
   }
}
MO.FE3dSceneCanvas_onMouseCaptureStart = function FE3dSceneCanvas_onMouseCaptureStart(p){
   var o = this;
   var s = o._activeSpace;
   if(!s){
      return;
   }
   var r = o._activeSpace.region();
   var st = RConsole.find(FG3dTechniqueConsole).find(o._graphicContext, FG3dSelectTechnique);
   var r = st.test(r, p.offsetX, p.offsetY);
   o._capturePosition.set(p.clientX, p.clientY);
   o._captureCameraRotation.assign(s.camera()._rotation);
}
MO.FE3dSceneCanvas_onMouseCapture = function FE3dSceneCanvas_onMouseCapture(p){
   var o = this;
   var s = o._activeSpace;
   if(!s){
      return;
   }
   var cx = p.clientX - o._capturePosition.x;
   var cy = p.clientY - o._capturePosition.y;
   var c = o._activeSpace.camera();
   var r = c.rotation();
   var cr = o._captureCameraRotation;
   r.x = cr.x + cy * o._cameraMouseRotation;
   r.y = cr.y + cx * o._cameraMouseRotation;
}
MO.FE3dSceneCanvas_onMouseCaptureStop = function FE3dSceneCanvas_onMouseCaptureStop(p){
}
MO.FE3dSceneCanvas_onTouchStart = function FE3dSceneCanvas_onTouchStart(event){
   var o = this;
   var s = o._activeSpace;
   if(!s){
      return;
   }
   var r = o._activeSpace.region();
   var ts = event.touches;
   var c = ts.length;
   if(c == 1){
      event.preventDefault();
      var t = ts[0];
      o._captureStatus = true;
      o._capturePosition.set(t.clientX, t.clientY);
      o._captureCameraPosition.assign(s.camera().position());
      o._captureCameraRotation.assign(s.camera().rotation());
   }else{
      o._touchTracker.eventStart(event);
   }
}
MO.FE3dSceneCanvas_onTouchMove = function FE3dSceneCanvas_onTouchMove(event){
   var o = this;
   if(!o._captureStatus){
      return;
   }
   var touchs = event.touches;
   var touchCount = touchs.length;
   if(touchCount == 1){
      event.preventDefault();
      var t = touchs[0];
      var cm = o._activeSpace.camera();
      var cr = cm.rotation();
      var cx = t.clientX - o._capturePosition.x;
      var cy = t.clientY - o._capturePosition.y;
      cr.x = o._captureCameraRotation.x + (-cy * o._cameraMouseRotation);
      cr.y = o._captureCameraRotation.y + (-cx * o._cameraMouseRotation);
   }else if(touchCount > 1){
      o._touchTracker.eventMove(event);
   }
}
MO.FE3dSceneCanvas_onTouchStop = function FE3dSceneCanvas_onTouchStop(event){
   var o = this;
   o._touchTracker.eventStop(event);
   o._captureStatus = false;
}
MO.FE3dSceneCanvas_onTouchZoom = function FE3dSceneCanvas_onTouchZoom(event){
   var o = this;
   var delta = event.delta;
   var space = o._activeSpace;
   if(!space){
      return;
   }
   var camera = space.camera();
   camera.doForward(delta * 0.006);
}
MO.FE3dSceneCanvas_onDataLoaded = function FE3dSceneCanvas_onDataLoaded(event){
   var o = this;
   var c = o._graphicContext;
   var s = o._activeSpace;
   var cs = c.size();
   var rp = s.camera().projection();
   rp.size().set(cs.width, cs.height);
   rp.update();
   var gr = s._region._resource;
   o._cameraMoveRate = gr.moveSpeed();
   o._cameraKeyRotation = gr.rotationKeySpeed();
   o._cameraMouseRotation = gr.rotationMouseSpeed();
   var event = new MO.SEvent(o);
   event.space = s;
   o.processLoadListener(event);
   event.dispose();
}
MO.FE3dSceneCanvas_onResize = function FE3dSceneCanvas_onResize(event){
   var o = this;
   o.__base.FE3dCanvas.onResize.call(o, event);
   var c = o._graphicContext;
   var cs = c.size();
   var s = o._activeSpace;
   if(s){
      var rp = s.camera().projection();
      rp.size().set(cs.width, cs.height);
      rp.update();
   }
}
MO.FE3dSceneCanvas_construct = function FE3dSceneCanvas_construct(){
   var o = this;
   o.__base.FE3dCanvas.construct.call(o);
   o._rotation = new MO.SVector3();
   o._capturePosition = new MO.SPoint2();
   o._captureCameraPosition = new MO.SPoint3();
   o._captureCameraRotation = new MO.SVector3();
   o._touchTracker = MO.Class.create(MO.FTouchTracker);
   o._touchTracker.addTouchZoomListener(o, o.onTouchZoom);
}
MO.FE3dSceneCanvas_testPlay = function FE3dSceneCanvas_testPlay(){
   return this._actionPlay;
}
MO.FE3dSceneCanvas_switchPlay = function FE3dSceneCanvas_switchPlay(flag){
   var o = this;
   var space = o._activeSpace;
   var displays = space.allDisplays();
   var count = displays.count();
   for(var i = 0; i < count; i++){
      var display = displays.at(i);
      if(MO.Class.isClass(display, FE3dSceneDisplay)){
         var sprite = display._sprite;
         if(sprite){
            sprite._optionPlay = flag;
         }
         display._optionPlay = flag;
      }
   }
   o._actionPlay = flag;
}
MO.FE3dSceneCanvas_testMovie = function FE3dSceneCanvas_testMovie(){
   return this._actionMovie;
}
MO.FE3dSceneCanvas_switchMovie = function FE3dSceneCanvas_switchMovie(p){
   var o = this;
   var s = o._activeSpace;
   var ds = s.allDisplays();
   var c = ds.count();
   for(var i = 0; i < c; i++){
      var d = ds.get(i);
      if(d._movies){
         d._optionMovie = p;
      }
   }
   o._actionMovie = p;
}
MO.FE3dSceneCanvas_doAction = function FE3dSceneCanvas_doAction(e, p, f){
   var o = this;
   var s = o._activeSpace;
   if(!s){
      return;
   }
   e.preventDefault();
   o._actionUp = false;
   o._actionDown = false;
   o._actionForward = false;
   o._actionBack = false;
   switch(p){
      case 'fullscreen':
         var v = o._actionFullScreen = !o._actionFullScreen;
         MO.RHtml.fullscreen(o._hPanel, v);
         break;
      case 'play':
         o.switchMovie(!o._actionMovie);
         o.switchPlay(o._actionMovie);
         break;
      case 'up':
         o._actionUp = f;
         break;
      case 'down':
         o._actionDown = f;
         break;
      case 'forward':
         o._actionForward = f;
         break;
      case 'back':
         o._actionBack = f;
         break;
   }
}
MO.FE3dSceneCanvas_loadByGuid = function FE3dSceneCanvas_loadByGuid(guid){
   var o = this;
   var sceneConsole = MO.Console.find(MO.FE3dSceneConsole);
   if(o._activeSpace){
      sceneConsole.free(o._activeSpace);
   }
   var scene = o._activeSpace = sceneConsole.allocByGuid(o._graphicContext, guid);
   scene.addLoadListener(o, o.onDataLoaded);
   RStage.register('canvas.space', scene);
}
MO.FE3dSceneCanvas_loadByCode = function FE3dSceneCanvas_loadByCode(code){
   var o = this;
   var sceneConsole = MO.Console.find(MO.FE3dSceneConsole);
   if(o._activeSpace){
      sceneConsole.free(o._activeSpace);
   }
   var scene = o._activeSpace = sceneConsole.allocByCode(o._graphicContext, code);
   scene.addLoadListener(o, o.onDataLoaded);
   RStage.register('canvas.space', scene);
}
MO.FE3dSceneCanvas_dispose = function FE3dSceneCanvas_dispose(){
   var o = this;
   var v = o._rotation;
   if(v){
      v.dispose();
      o._rotation = null;
   }
   o.__base.FE3dCanvas.dispose.call(o);
}
MO.FE3dSceneConsole = function FE3dSceneConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd      = MO.EScope.Local;
   o._loadDisplays = null;
   o._loadScenes   = null;
   o._pools        = null;
   o._thread       = null;
   o._interval     = 100;
   o.onProcess     = MO.FE3dSceneConsole_onProcess;
   o.construct     = MO.FE3dSceneConsole_construct;
   o.scenes        = MO.FE3dSceneConsole_scenes;
   o.loadDisplay   = MO.FE3dSceneConsole_loadDisplay;
   o.allocByGuid   = MO.FE3dSceneConsole_allocByGuid;
   o.allocByCode   = MO.FE3dSceneConsole_allocByCode;
   o.free          = MO.FE3dSceneConsole_free;
   return o;
}
MO.FE3dSceneConsole_onProcess = function FE3dSceneConsole_onProcess(){
   var o = this;
   var displays = o._loadDisplays;
   displays.record();
   while(displays.next()){
      var display = displays.current();
      if(display.processLoad()){
         displays.removeCurrent();
      }
   }
   var scenes = o._loadScenes;
   scenes.record();
   while(scenes.next()){
      var scene = scenes.current();
      if(scene.processLoad()){
         scenes.removeCurrent();
      }
   }
}
MO.FE3dSceneConsole_construct = function FE3dSceneConsole_construct(){
   var o = this;
   o._loadDisplays = new MO.TLooper();
   o._loadScenes = new MO.TLooper();
   o._pools = MO.Class.create(MO.FObjectPools);
   var thread = o._thread = MO.Class.create(MO.FThread);
   thread.setInterval(o._interval);
   thread.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(thread);
}
MO.FE3dSceneConsole_scenes = function FE3dSceneConsole_scenes(){
   return this._scenes;
}
MO.FE3dSceneConsole_loadDisplay = function FE3dSceneConsole_loadDisplay(display){
   this._loadDisplays.push(display);
}
MO.FE3dSceneConsole_allocByGuid = function FE3dSceneConsole_allocByGuid(context, guid){
   var o = this;
   var scene = o._pools.alloc(guid);
   if(scene){
      return scene;
   }
   var resource = MO.Console.find(MO.FE3sSceneConsole).loadByGuid(guid);
   scene = MO.Class.create(MO.FE3dScene);
   scene.linkGraphicContext(context);
   scene.setResource(resource);
   scene._poolCode = guid;
   scene.setup();
   o._loadScenes.push(scene);
   return scene;
}
MO.FE3dSceneConsole_allocByCode = function FE3dSceneConsole_allocByCode(context, code){
   var o = this;
   var scene = o._pools.alloc(code);
   if(scene){
      return scene;
   }
   var resource = MO.Console.find(MO.FE3sSceneConsole).loadByCode(code);
   scene = MO.Class.create(MO.FE3dScene);
   scene.linkGraphicContext(context);
   scene.setResource(resource);
   scene._poolCode = code;
   scene.setup();
   o._loadScenes.push(scene);
   return scene;
}
MO.FE3dSceneConsole_free = function FE3dSceneConsole_free(scene){
   var o = this;
   var code = scene._poolCode;
   o._pools.free(code, scene);
}
MO.FE3dSceneDisplay = function FE3dSceneDisplay(o){
   o = MO.Class.inherits(this, o, MO.FE3dSprite, MO.MListenerLoad);
   o._dataReady        = false;
   o._optionPlay       = false;
   o._optionMovie      = false;
   o._movieMatrix      = null;
   o._resource         = null;
   o._materials        = null;
   o._parentMaterials  = null;
   o._template         = null;
   o._sprite           = null;
   o.construct         = MO.FE3dSceneDisplay_construct;
   o.calculateOutline  = MO.FE3dSceneDisplay_calculateOutline;
   o.meshRenderables   = MO.FE3dSceneDisplay_meshRenderables;
   o.loadResource      = MO.FE3dSceneDisplay_loadResource;
   o.loadTemplate      = MO.FE3dSceneDisplay_loadTemplate;
   o.processLoad       = MO.FE3dSceneDisplay_processLoad;
   o.clone             = MO.FE3dSceneDisplay_clone;
   return o;
}
MO.FE3dSceneDisplay_construct = function FE3dSceneDisplay_construct(){
   var o = this;
   o.__base.FE3dSprite.construct.call(o);
   o._movieMatrix = new MO.SMatrix3d();
}
MO.FE3dSceneDisplay_calculateOutline = function FE3dSceneDisplay_calculateOutline(){
   return this._sprite.calculateOutline();
}
MO.FE3dSceneDisplay_meshRenderables = function FE3dSceneDisplay_meshRenderables(){
   var o = this;
   var sprite = o._template.sprite();
   return sprite.meshRenderables();
}
MO.FE3dSceneDisplay_loadResource = function FE3dSceneDisplay_loadResource(resource){
   var o = this;
   var instanceConsole = MO.Console.find(MO.FE3dInstanceConsole);
   o._resource = resource;
   o._code = resource.code();
   o._matrix.assign(resource.matrix());
   var movieResources = resource.movies();
   if(movieResources){
      var movieCount = movieResources.count();
      for(var i = 0; i < movieCount; i++){
         var movieResource = movieResources.at(i);
         var movie = instanceConsole.create(MO.EE3dInstance.SceneMovie);
         movie.loadResource(movieResource);
         o.pushMovie(movie);
      }
   }
   var materialResources = resource.materials();
   if(materialResources){
      var materialCount = materialResources.count();
      var materials = o._materials = new MO.TDictionary();
      var parentMaterials = o._parentMaterials = new MO.TDictionary();
      for(var i = 0; i < materialCount; i++){
         var materialResource = materialResources.at(i);
         var material = instanceConsole.create(MO.EE3dInstance.SceneMaterial);
         material._display = o;
         material.loadSceneResource(materialResource);
         materials.set(materialResource.guid(), material);
         parentMaterials.set(materialResource.parentGuid(), material);
      }
   }
   var templateGuid = resource.templateGuid();
   o._template = MO.Console.find(MO.FE3dTemplateConsole).allocByGuid(o, templateGuid);
}
MO.FE3dSceneDisplay_loadTemplate = function FE3dSceneDisplay_loadTemplate(template){
   var o = this;
   var resource = o._resource;
   var sprites = template._sprites;
   if(sprites){
      var optionPlay = o._optionPlay;
      var count = sprites.count();
      for(var i = 0; i < count; i++){
         var sprite = sprites.at(i);
         sprite._optionPlay = optionPlay;
         sprite.matrix().identity();
      }
   }
   var materials = o._materials;
   var parentMaterials = o._parentMaterials;
   var sprite = o._sprite = template.sprite();
   var renderables = sprite.renderables();
   var count = renderables.count();
   for(var n = 0; n < count; n++){
      var renderable = renderables.at(n);
      var material = renderable.material();
      var materialGuid = material.guid();
      if(parentMaterials){
         var displayMaterial = parentMaterials.get(materialGuid);
         if(displayMaterial){
            displayMaterial.loadParent(material);
            displayMaterial.reloadResource();
            renderable.setMaterial(displayMaterial);
         }
      }
   }
   o.pushDisplay(sprite);
   var animations = sprite.animations();
   if(animations){
      var animationCount = animations.count();
      for(var n = 0; n < animationCount; n++){
         var animation = animations.at(n);
         var animationResource = animation.resource();
         var animationGuid = animationResource.guid();
         var sceneAnimationResource = resource.findAnimation(animationGuid);
         if(!sceneAnimationResource){
            sceneAnimationResource = resource.syncAnimation(animationGuid);
            sceneAnimationResource._guid = animationResource._guid;
            sceneAnimationResource._code = animationResource._code;
            sceneAnimationResource._label = animationResource._label;
         }
         var sceneAnimation = MO.Class.create(MO.FE3dSceneAnimation);
         sceneAnimation.loadAnimation(animation);
         sceneAnimation.loadSceneResource(sceneAnimationResource);
         sceneAnimation.reloadResource();
         o.pushAnimation(sceneAnimation);
      }
   }
}
MO.FE3dSceneDisplay_processLoad = function FE3dSceneDisplay_processLoad(){
   var o = this;
   if(o._ready){
      return true;
   }
   var template = o._template;
   if(!template.testReady()){
      return false;
   }
   o.loadTemplate(template);
   o._ready = true;
   o.processLoadListener(o);
   return true;
}
MO.FE3dSceneDisplay_clone = function FE3dSceneDisplay_clone(){
}
MO.FE3dSceneDisplayRenderable = function FE3dSceneDisplayRenderable(o){
   o = MO.Class.inherits(this, o, MO.FE3dTemplateRenderable);
   o.loadMaterial   = MO.FE3dSceneDisplayRenderable_loadMaterial;
   o.reloadResource = MO.FE3dSceneDisplayRenderable_reloadResource;
   return o;
}
MO.FE3dSceneDisplayRenderable_loadMaterial = function FE3dSceneDisplayRenderable_loadMaterial(material){
   var o = this;
   o._materialReference = material;
   o._material.calculate(material);
}
MO.FE3dSceneDisplayRenderable_reloadResource = function FE3dSceneDisplayRenderable_reloadResource(){
   var o = this;
   var material = o._material;
   material.calculate(o._materialReference);
   material.update();
}
MO.FE3dSceneLayer = function FE3dSceneLayer(o){
   o = MO.Class.inherits(this, o, MO.FDisplayLayer, MO.MLinkerResource);
   o.makeLabel    = MO.FE3dSceneLayer_makeLabel;
   o.loadResource = MO.FE3dSceneLayer_loadResource;
   o.process      = MO.FE3dSceneLayer_process;
   return o;
}
MO.FE3dSceneLayer_makeLabel = function FE3dSceneLayer_makeLabel(){
   var o = this;
   var resource = o.resource();
   var code = resource.code();
   var label = resource.label();
   if(label){
      return code + '[' + label + ']';
   }
   return code;
}
MO.FE3dSceneLayer_loadResource = function FE3dSceneLayer_loadResource(p){
   var o = this;
   o._resource = p;
}
MO.FE3dSceneLayer_process = function FE3dSceneLayer_process(p){
   var o = this;
   o.__base.FDisplayLayer.process.call(o, p)
   var c = o._resource.transformCd();
   if(c){
      if(c == MO.EDisplayTransform.CameraPosition){
         var cp = p.camera().position();
         o._matrix.setTranslate(cp.x, cp.y, cp.z);
         o._matrix.update();
      }
   }
}
MO.FE3dSceneMaterial = function FE3dSceneMaterial(o){
   o = MO.Class.inherits(this, o, MO.FE3dMaterial);
   o._display          = null;
   o._parentMaterial   = null;
   o.loadSceneResource = MO.FE3dSceneMaterial_loadSceneResource;
   o.reloadResource    = MO.FE3dSceneMaterial_reloadResource;
   return o;
}
MO.FE3dSceneMaterial_loadSceneResource = function FE3dSceneMaterial_loadSceneResource(resource){
   var o = this;
   o._resource = resource;
   o.reloadResource();
}
MO.FE3dSceneMaterial_reloadResource = function FE3dSceneMaterial_reloadResource(){
   var o = this;
   o.calculate(o._resource);
   o.update();
}
MO.FE3dSceneRegion = function FE3dSceneRegion(o){
   o = MO.Class.inherits(this, o, MO.FE3dRegion);
   o._resource      = MO.Class.register(o, new MO.AGetter('_resource'));
   o.construct      = MO.FE3dSceneRegion_construct;
   o.loadResource   = MO.FE3dSceneRegion_loadResource;
   o.reloadResource = MO.FE3dSceneRegion_reloadResource;
   o.dispose        = MO.FE3dSceneRegion_dispose;
   return o;
}
MO.FE3dSceneRegion_construct = function FE3dSceneRegion_construct(){
   var o = this;
   o.__base.FE3dRegion.construct.call(o);
}
MO.FE3dSceneRegion_loadResource = function FE3dSceneRegion_loadResource(p){
   var o = this;
   o._resource = p;
   o.reloadResource();
}
MO.FE3dSceneRegion_reloadResource = function FE3dSceneRegion_reloadResource(){
   var o = this;
   var r = o._resource;
   var f = r.optionBackground();
   if(f){
      o._backgroundColor.assignPower(r.backgroundColor());
      o._backgroundColor.alpha = 1;
   }else{
      o._backgroundColor.set(0, 0, 0, 0);
   }
}
MO.FE3dSceneRegion_dispose = function FE3dSceneRegion_dispose(){
   var o = this;
   o._resource = null;
   o.__base.FE3dRegion.dispose.call(o);
}
MO.FE3dSimpleCanvas = function FE3dSimpleCanvas(o){
   o = MO.Class.inherits(this, o, MO.FE3dCanvas);
   o._activeSpace           = null;
   o._captureStatus         = false;
   o._capturePosition       = null;
   o._captureCameraPosition = null;
   o._captureCameraRotation = null;
   o._actionFullScreen      = false;
   o._actionPlay            = false;
   o._actionMovie           = false;
   o._actionUp              = false;
   o._actionDown            = false;
   o._actionForward         = false;
   o._actionBack            = false;
   o._cameraMoveRate        = 0.4;
   o._cameraKeyRotation     = 0.03;
   o._cameraMouseRotation   = 0.005;
   o._stage                 = MO.Class.register(o, new MO.AGetter('_stage'));
   o.onEnterFrame           = MO.FE3dSimpleCanvas_onEnterFrame;
   o.onMouseCaptureStart    = MO.FE3dSimpleCanvas_onMouseCaptureStart;
   o.onMouseCapture         = MO.FE3dSimpleCanvas_onMouseCapture;
   o.onMouseCaptureStop     = MO.FE3dSimpleCanvas_onMouseCaptureStop;
   o.onTouchStart           = MO.FE3dSimpleCanvas_onTouchStart;
   o.onTouchMove            = MO.FE3dSimpleCanvas_onTouchMove;
   o.onTouchStop            = MO.FE3dSimpleCanvas_onTouchStop;
   o.onSceneLoad            = MO.FE3dSimpleCanvas_onSceneLoad;
   o.onResize               = MO.FE3dSimpleCanvas_onResize;
   o.construct              = MO.FE3dSimpleCanvas_construct;
   o.build                  = MO.FE3dSimpleCanvas_build;
   o.setPanel               = MO.FE3dSimpleCanvas_setPanel;
   o.switchPlay             = MO.FE3dSimpleCanvas_switchPlay;
   o.switchMovie            = MO.FE3dSimpleCanvas_switchMovie;
   o.doAction               = MO.FE3dSimpleCanvas_doAction;
   o.dispose                = MO.FE3dSimpleCanvas_dispose;
   return o;
}
MO.FE3dSimpleCanvas_onEnterFrame = function FE3dSimpleCanvas_onEnterFrame(){
   var o = this;
   var s = o._activeSpace;
   if(!s){
      return;
   }
   var c = s.camera();
   var d = o._cameraMoveRate;
   var r = o._cameraKeyRotation;
   var kw = MO.Window.Keyboard.isPress(MO.EKeyCode.W);
   var ks = MO.Window.Keyboard.isPress(MO.EKeyCode.S);
   if((kw && !ks) || o._actionForward){
      c.doWalk(d);
   }
   if((!kw && ks) || o._actionBack){
      c.doWalk(-d);
   }
   var ka = MO.Window.Keyboard.isPress(MO.EKeyCode.A);
   var kd = MO.Window.Keyboard.isPress(MO.EKeyCode.D);
   if(ka && !kd){
      c.doYaw(r);
   }
   if(!ka && kd){
      c.doYaw(-r);
   }
   var kq = MO.Window.Keyboard.isPress(MO.EKeyCode.Q);
   var ke = MO.Window.Keyboard.isPress(MO.EKeyCode.E);
   if((kq && !ke) || o._actionUp){
      c.doFly(d);
   }
   if((!kq && ke) || o._actionDown){
      c.doFly(-d);
   }
   var kz = MO.Window.Keyboard.isPress(MO.EKeyCode.Z);
   var kw = MO.Window.Keyboard.isPress(MO.EKeyCode.X);
   if(kz && !kw){
      c.doPitch(r);
   }
   if(!kz && kw){
      c.doPitch(-r);
   }
   c.update();
   if(o._optionRotation){
      var r = o._rotation;
      var ls = s.layers();
      var c = ls.count();
      for(var i = 0; i < c; i++){
         var l = ls.value(i);
         var m = l.matrix();
         m.setRotation(0, r.y, 0);
         m.update();
      }
      r.y += 0.01;
   }
}
MO.FE3dSimpleCanvas_onMouseCaptureStart = function FE3dSimpleCanvas_onMouseCaptureStart(p){
   var o = this;
   var s = o._activeSpace;
   if(!s){
      return;
   }
   o._capturePosition.set(p.clientX, p.clientY);
   o._captureCameraRotation.assign(s.camera()._rotation);
}
MO.FE3dSimpleCanvas_onMouseCapture = function FE3dSimpleCanvas_onMouseCapture(p){
   var o = this;
   var s = o._activeSpace;
   if(!s){
      return;
   }
   var cx = p.clientX - o._capturePosition.x;
   var cy = p.clientY - o._capturePosition.y;
   var c = o._activeSpace.camera();
   var r = c.rotation();
   var cr = o._captureCameraRotation;
   r.x = cr.x + cy * o._cameraMouseRotation;
   r.y = cr.y + cx * o._cameraMouseRotation;
}
MO.FE3dSimpleCanvas_onMouseCaptureStop = function FE3dSimpleCanvas_onMouseCaptureStop(p){
}
MO.FE3dSimpleCanvas_onTouchStart = function FE3dSimpleCanvas_onTouchStart(p){
   var o = this;
   var s = o._activeSpace;
   if(!s){
      return;
   }
   var r = o._activeSpace.region();
   var ts = p.touches;
   var c = ts.length;
   if(c == 1){
      p.preventDefault();
      var t = ts[0];
      o._captureStatus = true;
      o._capturePosition.set(t.clientX, t.clientY);
      o._captureCameraPosition.assign(s.camera().position());
      o._captureCameraRotation.assign(s.camera().rotation());
   }
}
MO.FE3dSimpleCanvas_onTouchMove = function FE3dSimpleCanvas_onTouchMove(p){
   var o = this;
   if(!o._captureStatus){
      return;
   }
   var ts = p.touches;
   var c = ts.length;
   if(c == 1){
      p.preventDefault();
      var t = ts[0];
      var cm = o._activeSpace.camera();
      var cr = cm.rotation();
      var cx = t.clientX - o._capturePosition.x;
      var cy = t.clientY - o._capturePosition.y;
      cr.x = o._captureCameraRotation.x + (-cy * o._cameraMouseRotation);
      cr.y = o._captureCameraRotation.y + (-cx * o._cameraMouseRotation);
   }
}
MO.FE3dSimpleCanvas_onTouchStop = function FE3dSimpleCanvas_onTouchStop(p){
   var o = this;
   o._captureStatus = false;
}
MO.FE3dSimpleCanvas_onSceneLoad = function FE3dSimpleCanvas_onSceneLoad(p){
   var o = this;
   var c = o._graphicContext;
   var s = o._activeSpace;
   var cs = c.size();
   var rp = s.camera().projection();
   rp.size().set(cs.width, cs.height);
   rp.update();
   var gr = s._region._resource;
   o._cameraMoveRate = gr.moveSpeed();
   o._cameraKeyRotation = gr.rotationKeySpeed();
   o._cameraMouseRotation = gr.rotationMouseSpeed();
   o.processLoadListener(o, s);
}
MO.FE3dSimpleCanvas_onResize = function FE3dSimpleCanvas_onResize(p){
   var o = this;
   o.__base.FE3dCanvas.onResize.call(o, p);
   var c = o._graphicContext;
   var cs = c.size();
   var s = o._activeSpace;
   if(s){
      var rp = s.camera().projection();
      rp.size().set(cs.width, cs.height);
      rp.update();
   }
}
MO.FE3dSimpleCanvas_construct = function FE3dSimpleCanvas_construct(){
   var o = this;
   o.__base.FE3dCanvas.construct.call(o);
   o._rotation = new MO.SVector3();
   o._capturePosition = new MO.SPoint2();
   o._captureCameraPosition = new MO.SPoint3();
   o._captureCameraRotation = new MO.SVector3();
}
MO.FE3dSimpleCanvas_build = function FE3dSimpleCanvas_build(hPanel){
   var o = this;
   o.__base.FE3dCanvas.build.call(o, hPanel);
   var stage = o._stage = o._activeSpace = MO.Class.create(MO.FE3dSimpleStage);
   stage.linkGraphicContext(o);
   stage.region().linkGraphicContext(o);
   stage.selectTechnique(o, FE3dGeneralTechnique);
   MO.RStage.register('simple.stage', stage);
}
MO.FE3dSimpleCanvas_setPanel = function FE3dSimpleCanvas_setPanel(hPanel){
   var o = this;
   o.__base.FE3dCanvas.setPanel.call(o, hPanel);
   var stage = o._stage;
   var camera = stage.region().camera();
   var projection = camera.projection();
   projection.size().set(o._hCanvas.offsetWidth, o._hCanvas.offsetHeight);
   projection.update();
   camera.position().set(0, 0, -10);
   camera.lookAt(0, 0, 0);
   camera.update();
}
MO.FE3dSimpleCanvas_switchPlay = function FE3dSimpleCanvas_switchPlay(p){
   var o = this;
   var s = o._activeSpace;
   var ds = s.allDisplays();
   var c = ds.count();
   for(var i = 0; i < c; i++){
      var d = ds.get(i);
      if(d._movies){
         d._optionPlay = p;
      }
   }
   o._actionPlay = p;
}
MO.FE3dSimpleCanvas_switchMovie = function FE3dSimpleCanvas_switchMovie(p){
   var o = this;
   var s = o._activeSpace;
   var ds = s.allDisplays();
   var c = ds.count();
   for(var i = 0; i < c; i++){
      var d = ds.get(i);
      if(d._movies){
         d._optionMovie = p;
      }
   }
   o._actionMovie = p;
}
MO.FE3dSimpleCanvas_doAction = function FE3dSimpleCanvas_doAction(e, p, f){
   var o = this;
   var s = o._activeSpace;
   if(!s){
      return;
   }
   e.preventDefault();
   o._actionUp = false;
   o._actionDown = false;
   o._actionForward = false;
   o._actionBack = false;
   switch(p){
      case 'fullscreen':
         var v = o._actionFullScreen = !o._actionFullScreen;
         RHtml.fullscreen(o._hPanel, v);
         break;
      case 'play':
         o.switchMovie(!o._actionMovie);
         o.switchPlay(o._actionMovie);
         break;
      case 'up':
         o._actionUp = f;
         break;
      case 'down':
         o._actionDown = f;
         break;
      case 'forward':
         o._actionForward = f;
         break;
      case 'back':
         o._actionBack = f;
         break;
   }
}
MO.FE3dSimpleCanvas_dispose = function FE3dSimpleCanvas_dispose(){
   var o = this;
   var v = o._rotation;
   if(v){
      v.dispose();
      o._rotation = null;
   }
   o.__base.FE3dCanvas.dispose.call(o);
}
MO.FE3dSimpleDesktop = function FE3dSimpleDesktop(o){
   o = MO.Class.inherits(this, o, MO.FDesktop);
   o._canvas3d = MO.Class.register(o, new MO.AGetter('_canvas3d'));
   o._canvas2d = MO.Class.register(o, new MO.AGetter('_canvas2d'));
   o.onResize  = MO.FE3dSimpleDesktop_onResize;
   o.construct = MO.FE3dSimpleDesktop_construct;
   o.build     = MO.FE3dSimpleDesktop_build;
   o.dispose   = MO.FE3dSimpleDesktop_dispose;
   return o;
}
MO.FE3dSimpleDesktop_onResize = function FE3dSimpleDesktop_onResize(p){
   var o = this;
}
MO.FE3dSimpleDesktop_construct = function FE3dSimpleDesktop_construct(){
   var o = this;
   o.__base.FDesktop.construct.call(o);
}
MO.FE3dSimpleDesktop_build = function FE3dSimpleDesktop_build(hPanel){
   var o = this;
   o.__base.FDesktop.build.call(o, hPanel);
   MO.RWindow.lsnsResize.register(o, o.onResize);
   var canvas = o._canvas3d = MO.Class.create(MO.FE3dSimpleCanvas);
   canvas.build(hPanel);
   canvas.setPanel(hPanel);
   var size = canvas.size();
   var hCanvas3d = canvas._hCanvas;
   var canvas = o._canvas2d = MO.Class.create(MO.FE2dCanvas);
   canvas.size().assign(size);
   canvas.build(hPanel);
   canvas.setPanel(hPanel);
   var hCanvas2d = canvas._hCanvas;
   hCanvas2d.style.position = 'absolute';
   hCanvas2d.style.left = hCanvas3d.offsetLeft + 'px';
   hCanvas2d.style.top = hCanvas3d.offsetTop + 'px';
}
MO.FE3dSimpleDesktop_dispose = function FE3dSimpleDesktop_dispose(){
   var o = this;
   o.__base.FDesktop.dispose.call(o);
}
MO.FE3dSimpleStage = function FE3dSimpleStage(o){
   o = MO.RClass.inherits(this, o, MO.FE3dStage);
   o._optionKeyboard = true;
   o._skyLayer       = MO.RClass.register(o, new MO.AGetter('_skyLayer'));
   o._mapLayer       = MO.RClass.register(o, new MO.AGetter('_mapLayer'));
   o._spriteLayer    = MO.RClass.register(o, new MO.AGetter('_spriteLayer'));
   o._faceLayer      = MO.RClass.register(o, new MO.AGetter('_faceLayer'));
   o.construct       = MO.FE3dSimpleStage_construct;
   o.active          = MO.FE3dSimpleStage_active;
   o.deactive        = MO.FE3dSimpleStage_deactive;
   return o;
}
MO.FE3dSimpleStage_construct = function FE3dSimpleStage_construct(){
   var o = this;
   o.__base.FE3dStage.construct.call(o);
   var layer = o._skyLayer = MO.Class.create(MO.FDisplayLayer);
   o.registerLayer('SkyLayer', layer);
   var layer = o._mapLayer = MO.Class.create(MO.FDisplayLayer);
   o.registerLayer('MapLayer', layer);
   var layer = o._spriteLayer = MO.Class.create(MO.FDisplayLayer);
   o.registerLayer('SpriteLayer', layer);
   var layer = o._faceLayer = MO.Class.create(MO.FDisplayLayer);
   o.registerLayer('FaceLayer', layer);
}
MO.FE3dSimpleStage_active = function FE3dSimpleStage_active(){
   var o = this;
   o.__base.FE3dStage.active.call(o);
}
MO.FE3dSimpleStage_deactive = function FE3dSimpleStage_deactive(){
   var o = this;
   o.__base.FE3dStage.deactive.call(o);
}
MO.FE3dSpace = function FE3dSpace(o){
   o = MO.Class.inherits(this, o, MO.FE3dStage, MO.MListener);
   o._dataReady            = false;
   o._resource             = MO.Class.register(o, new MO.AGetSet('_resource'));
   o._materials            = MO.Class.register(o, new MO.AGetter('_materials'));
   o._dirty                = false;
   o._loadListeners        = MO.Class.register(o, new MO.AListener('_loadListeners', MO.EEvent.Load));
   o.onProcess             = MO.FE3dSpace_onProcess;
   o.construct             = MO.FE3dSpace_construct;
   o.linkGraphicContext    = MO.FE3dSpace_linkGraphicContext;
   o.createRegion          = MO.FE3dSpace_createRegion;
   o.findMaterial          = MO.FE3dSpace_findMaterial;
   o.loadTechniqueResource = MO.FE3dSpace_loadTechniqueResource;
   o.loadRegionResource    = MO.FE3dSpace_loadRegionResource;
   o.loadDisplayResource   = MO.FE3dSpace_loadDisplayResource;
   o.loadLayerResource     = MO.FE3dSpace_loadLayerResource;
   o.loadResource          = MO.FE3dSpace_loadResource;
   o.commitResource        = MO.FE3dSpace_commitResource;
   o.dirty                 = MO.FE3dSpace_dirty;
   o.processLoad           = MO.FE3dSpace_processLoad;
   o.active                = MO.FE3dSpace_active;
   o.deactive              = MO.FE3dSpace_deactive;
   return o;
}
MO.FE3dSpace_onProcess = function FE3dSpace_onProcess(){
   var o = this;
   o.__base.FE3dStage.onProcess.call(o);
   if(o._dirty){
      var renderables = o._region.allRenderables();
      var count = renderables.count();
      for(var i = 0; i < count; i++){
         var renderable = renderables.at(i);
         renderable.resetInfos();
      }
      o._dirty = false;
   }
}
MO.FE3dSpace_construct = function FE3dSpace_construct(){
   var o = this;
   o.__base.FE3dStage.construct.call(o);
   o._materials = new MO.TDictionary();
}
MO.FE3dSpace_linkGraphicContext = function FE3dSpace_linkGraphicContext(context){
   var o = this;
   o.__base.FE3dStage.linkGraphicContext.call(o, context);
   o._region.linkGraphicContext(context);
}
MO.FE3dSpace_createRegion = function FE3dSpace_createRegion(){
   return MO.Class.create(MO.FE3dRegion);
}
MO.FE3dSpace_findMaterial = function FE3dSpace_findMaterial(guid){
   return this._materials.get(guid);
}
MO.FE3dSpace_loadTechniqueResource = function FE3dSpace_loadTechniqueResource(resource){
   var o = this;
   o._technique._resource = resource;
}
MO.FE3dSpace_loadRegionResource = function FE3dSpace_loadRegionResource(p){
   var o = this;
   o._region.loadResource(p);
   var rc = p.camera();
   var rcv = rc.projection();
   var camera = o.camera();
   camera.projection().size().assign(o._graphicContext.size());
   camera.loadResource(rc);
   var rl = p.light();
   var rlc = rl.camera();
   var rlv = rlc.projection();
   var l = o.directionalLight();
   l._resource = rl;
   var lc = l._camera;
   var lp = lc._projection;
   lc.position().set(1, 1, -1);
   lc.lookAt(0, 0, 0);
   lc.position().assign(rlc.position());
   lc.update();
   lp.size().set(1024, 1024);
   lp._angle = 60;
   lp._znear = rlv.znear();
   lp._zfar = rlv.zfar();
   lp.update();
}
MO.FE3dSpace_loadDisplayResource = function FE3dSpace_loadDisplayResource(pl, pd){
   var o = this;
   var d3 = MO.Console.find(MO.FE3dSpaceConsole).factory().create(EE3dScene.Display);
   d3.linkGraphicContext(o);
   d3.loadSceneResource(pd);
   MO.Console.find(MO.FE3dTemplateConsole).loadByGuid(d3, pd.templateGuid());
   pl.pushDisplay(d3);
}
MO.FE3dSpace_loadLayerResource = function FE3dSpace_loadLayerResource(p){
   var o = this;
   var l = MO.Console.find(MO.FE3dSpaceConsole).factory().create(EE3dScene.Layer);
   l.loadResource(p);
   var s = p.displays();
   if(s){
      var c = s.count();
      for(var i = 0; i < c; i++){
         var d = s.get(i);
         o.loadDisplayResource(l, d);
      }
   }
   o.registerLayer(p.code(), l)
}
MO.FE3dSpace_loadResource = function FE3dSpace_loadResource(resource){
   var o = this;
   o._resource = resource;
   o.loadTechniqueResource(resource.technique());
   o.loadRegionResource(resource.region());
   var materialResources = resource.materials();
   if(materialResources){
      var materialCount = materialResources.count();
      var materialConsole = MO.Console.find(MO.FE3rMaterialConsole);
      for(var i = 0; i < materialCount; i++){
         var materialResource = materialResources.at(i);
         var materialGuid = materialResource.guid();
         var material = materialConsole.load(o, materialGuid);
         o._materials.set(materialGuid, material);
      }
   }
   var layers = resource.layers();
   if(layers){
      var layerCount = layers.count();
      for(var i = 0; i < layerCount; i++){
         var layer = layers.at(i);
         o.loadLayerResource(layer);
      }
   }
}
MO.FE3dSpace_commitResource = function FE3dSpace_commitResource(){
   var o = this;
   var camera = o._region.camera();
   camera.commitResource();
}
MO.FE3dSpace_dirty = function FE3dSpace_dirty(){
   this._dirty = true;
}
MO.FE3dSpace_processLoad = function FE3dSpace_processLoad(){
   var o = this;
   if(o._dataReady){
      return true;
   }
   if(!o._resource.testReady()){
      return false;
   }
   o.loadResource(o._resource);
   o.processLoadListener(o);
   return true;
}
MO.FE3dSpace_active = function FE3dSpace_active(){
   var o = this;
   o.__base.FE3dStage.active.call(o);
}
MO.FE3dSpace_deactive = function FE3dSpace_deactive(){
   var o = this;
   o.__base.FE3dStage.deactive.call(o);
}
MO.FE3dSprite = function FE3dSprite(o){
   o = MO.Class.inherits(this, o, MO.FE3dDisplayContainer, MO.MGraphicObject, MO.MLinkerResource);
   o._dataReady       = false;
   o._ready           = false;
   o._shapes          = null;
   o._skeletons       = null;
   o._animations      = null;
   o._movies          = null;
   o._resource        = null;
   o.construct        = MO.FE3dSprite_construct;
   o.testReady        = MO.FE3dSprite_testReady;
   o.makeLabel        = MO.FE3dSprite_makeLabel;
   o.findMeshByCode   = MO.FE3dSprite_findMeshByCode;
   o.meshRenderables  = MO.FE3dSprite_shapes;
   o.skeletons        = MO.FE3dSprite_skeletons;
   o.pushSkeleton     = MO.FE3dSprite_pushSkeleton;
   o.findAnimation    = MO.FE3dSprite_findAnimation;
   o.animations       = MO.FE3dSprite_animations;
   o.pushAnimation    = MO.FE3dSprite_pushAnimation;
   o.movies           = MO.FE3dSprite_movies;
   o.pushMovie        = MO.FE3dSprite_pushMovie;
   o.loadSkeletons    = MO.FE3dSprite_loadSkeletons;
   o.linkAnimation    = MO.FE3dSprite_linkAnimation;
   o.loadAnimations   = MO.FE3dSprite_loadAnimations;
   o.loadResource     = MO.FE3dSprite_loadResource;
   o.reloadResource   = MO.FE3dSprite_reloadResource;
   o.load             = MO.FE3dSprite_load;
   o.updateMatrix     = MO.FE3dSprite_updateMatrix;
   o.selectClip       = MO.FE3dSprite_selectClip;
   o.process          = MO.FE3dSprite_process;
   o.dispose          = MO.FE3dSprite_dispose;
   return o;
}
MO.FE3dSprite_construct = function FE3dSprite_construct(){
   var o = this;
   o.__base.FE3dDisplayContainer.construct.call(o);
   o._shapes = new TObjects();
}
MO.FE3dSprite_testReady = function FE3dSprite_testReady(){
   var o = this;
   var shapes = o._shapes;
   if(shapes){
      var shapeCount = shapes.count();
      for(var i = 0; i < shapeCount; i++){
         var shape = shapes.at(i);
         if(!shape.testReady()){
            return false;
         }
      }
   }
   return true;
}
MO.FE3dSprite_makeLabel = function FE3dSprite_makeLabel(){
   var o = this;
   var resource = o.resource();
   var code = resource.code();
   var label = resource.label();
   if(label){
      return code + '[' + label + ']';
   }
   return code;
}
MO.FE3dSprite_findMeshByCode = function FE3dSprite_findMeshByCode(p){
   var s = this._shapes;
   for(var i = s.count() - 1; i >= 0; i--){
      var m = s.getAt(i);
      if(m._renderable._resource._code == p){
         return m;
      }
   }
   return null;
}
MO.FE3dSprite_shapes = function FE3dSprite_shapes(){
   return this._shapes;
}
MO.FE3dSprite_skeletons = function FE3dSprite_skeletons(){
   return this._skeletons;
}
MO.FE3dSprite_pushSkeleton = function FE3dSprite_pushSkeleton(p){
   var o = this;
   var r = o._skeletons;
   if(!r){
      r = o._skeletons = new MO.TDictionary();
   }
   if(!o._activeSkeleton){
      o._activeSkeleton = p;
   }
   r.set(p._resource.guid(), p);
}
MO.FE3dSprite_findAnimation = function FE3dSprite_findAnimation(guid){
   var animations = this._animations;
   return animations ? animations.get(guid) : null;
}
MO.FE3dSprite_animations = function FE3dSprite_animations(){
   return this._animations;
}
MO.FE3dSprite_pushAnimation = function FE3dSprite_pushAnimation(animation){
   var o = this;
   var animations = o._animations;
   if(!animations){
      animations = o._animations = new MO.TDictionary();
   }
   var animationResource = animation.resource();
   animations.set(animationResource.guid(), animation);
}
MO.FE3dSprite_movies = function FE3dSprite_movies(){
   return this._movies;
}
MO.FE3dSprite_pushMovie = function FE3dSprite_pushMovie(movie){
   var o = this;
   var movies = o._movies;
   if(!movies){
      movies = o._movies = new MO.TObjects();
   }
   movies.push(movie);
}
MO.FE3dSprite_loadSkeletons = function FE3dSprite_loadSkeletons(p){
   var o = this;
   var c = p.count();
   if(c > 0){
      var ks = o.skeletons();
      for(var i = 0; i < c; i++){
         var r = p.getAt(i);
         var s = MO.Class.create(MO.FE3rSkeleton);
         s.loadResource(r);
         o.pushSkeleton(s);
      }
   }
}
MO.FE3dSprite_linkAnimation = function FE3dSprite_linkAnimation(p){
   var o = this;
   var ts = p.tracks();
   var c = ts.count();
   for(var i = 0; i < c; i++){
      var t = ts.getAt(i);
      var mc = t._resource._meshCode;
      if(mc){
         var m = o.findMeshByCode(mc);
         m._activeTrack = t;
      }
   }
}
MO.FE3dSprite_loadAnimations = function FE3dSprite_loadAnimations(p){
   var o = this;
   var c = p.count();
   if(c > 0){
      for(var i = 0; i < c; i++){
         var r = p.getAt(i);
         var a = o.findAnimation(r.guid());
         if(a){
            continue;
         }
         var a = null;
         if(r.skeleton()){
            a = MO.Class.create(MO.FE3rSkeletonAnimation);
         }else{
            a = MO.Class.create(MO.FE3rMeshAnimation);
         }
         a._display = o;
         a.loadResource(r);
         o.pushAnimation(a);
      }
   }
}
MO.FE3dSprite_loadResource = function FE3dSprite_loadResource(resource){
   var o = this;
   o._resource = resource;
   o._matrix.assign(resource.matrix());
   var renderableResources = resource.renderables();
   var renderableCount = renderableResources.count();
   if(renderableCount > 0){
      var shapes = o._shapes;
      for(var i = 0; i < renderableCount; i++){
         var renderableResource = renderableResources.at(i);
         var renderable = MO.Class.create(MO.FE3dTemplateRenderable);
         renderable._display = o;
         renderable.linkGraphicContext(o);
         renderable.loadResource(renderableResource);
         shapes.push(renderable);
         o.pushRenderable(renderable);
      }
   }
}
MO.FE3dSprite_reloadResource = function FE3dSprite_reloadResource(){
   var o = this;
   var s = o._shapes;
   if(s){
      var c = s.count();
      for(var i = 0; i < c; i++){
         s.getAt(i).reloadResource();
      }
   }
}
MO.FE3dSprite_load = function FE3dSprite_load(){
   var o = this;
   var shapes = o._shapes;
   if(shapes){
      var shapeCount = shapes.count();
      for(var i = 0; i < shapeCount; i++){
         shapes.at(i).load();
      }
   }
}
MO.FE3dSprite_updateMatrix = function FE3dSprite_updateMatrix(region){
   var o = this;
   var matrix = o._currentMatrix.identity();
   var movies = o._movies;
   if(movies){
      if(o._optionMovie){
         var c = movies.count();
         for(var i = 0; i < c; i++){
            var movie = movies.at(i);
            movie.process(o._movieMatrix);
         }
      }
      matrix.append(o._movieMatrix);
   }
   matrix.append(o._matrix);
   var parent = o._parent;
   if(parent){
      o._currentMatrix.append(parent._currentMatrix);
   }
}
MO.FE3dSprite_selectClip = function FE3dSprite_selectClip(code){
   var o = this;
   var animations = o._animations;
   if(animations){
      var count = animations.count();
      for(var i = 0; i < count; i++){
         var animation = animations.at(i);
         animation.selectClip(code);
      }
   }
}
MO.FE3dSprite_process = function FE3dSprite_process(region){
   var o = this;
   var animations = o._animations;
   if(animations){
      var count = animations.count();
      for(var i = 0; i < count; i++){
         var animation = animations.at(i);
         animation.record();
      }
   }
   o.__base.FE3dDisplayContainer.process.call(o, region);
   var skeleton = o._activeSkeleton;
   if(skeleton && animations){
      var count = animations.count();
      for(var i = 0; i < count; i++){
         var animation = animations.at(i);
         animation.process(skeleton);
      }
   }
}
MO.FE3dSprite_dispose = function FE3dSprite_dispose(){
   var o = this;
   o._shapes = MO.Lang.Object.dispose(o._shapes);
   o.__base.FE3dDisplayContainer.dispose.call(o);
}
MO.FE3dTemplate = function FE3dTemplate(o){
   o = MO.Class.inherits(this, o, MO.FE3dSpace, MO.MGraphicObject, MO.MListenerLoad);
   o._dataReady       = false;
   o._ready           = false;
   o._sprites         = MO.Class.register(o, new MO.AGetter('_sprites'));
   o._skeletons       = MO.Class.register(o, new MO.AGetter('_skeletons'));
   o._animations      = MO.Class.register(o, new MO.AGetter('_animations'));
   o.construct        = MO.FE3dTemplate_construct;
   o.testReady        = MO.FE3dTemplate_testReady;
   o.sprite           = MO.FE3dTemplate_sprite;
   o.findMeshByCode   = MO.FE3dTemplate_findMeshByCode;
   o.meshRenderables  = MO.FE3dTemplate_sprites;
   o.pushSkeleton     = MO.FE3dTemplate_pushSkeleton;
   o.findAnimation    = MO.FE3dTemplate_findAnimation;
   o.pushAnimation    = MO.FE3dTemplate_pushAnimation;
   o.visible          = MO.FE3dTemplate_visible;
   o.setVisible       = MO.FE3dTemplate_setVisible;
   o.loadSkeletons    = MO.FE3dTemplate_loadSkeletons;
   o.linkAnimation    = MO.FE3dTemplate_linkAnimation;
   o.loadAnimations   = MO.FE3dTemplate_loadAnimations;
   o.loadResource     = MO.FE3dTemplate_loadResource;
   o.reloadResource   = MO.FE3dTemplate_reloadResource;
   o.processLoad      = MO.FE3dTemplate_processLoad;
   o.process          = MO.FE3dTemplate_process;
   o.dispose          = MO.FE3dTemplate_dispose;
   return o;
}
MO.FE3dTemplate_construct = function FE3dTemplate_construct(){
   var o = this;
   o.__base.FE3dSpace.construct.call(o);
   var layer = o._layer = MO.Class.create(MO.FDisplayLayer);
   o.registerLayer('Layer', layer);
   o._sprites = new MO.TObjects();
}
MO.FE3dTemplate_testReady = function FE3dTemplate_testReady(){
   return this._ready;
}
MO.FE3dTemplate_sprite = function FE3dTemplate_sprite(){
   return this._sprites.first();
}
MO.FE3dTemplate_findMeshByCode = function FE3dTemplate_findMeshByCode(p){
   var s = this._sprites;
   for(var i = s.count() - 1; i >= 0; i--){
      var m = s.getAt(i);
      if(m._renderable._resource._code == p){
         return m;
      }
   }
   return null;
}
MO.FE3dTemplate_pushSkeleton = function FE3dTemplate_pushSkeleton(p){
   var o = this;
   var r = o._skeletons;
   if(!r){
      r = o._skeletons = new MO.TDictionary();
   }
   if(!o._activeSkeleton){
      o._activeSkeleton = p;
   }
   r.set(p._resource.guid(), p);
}
MO.FE3dTemplate_sprites = function FE3dTemplate_sprites(){
   return this._sprites;
}
MO.FE3dTemplate_findAnimation = function FE3dTemplate_findAnimation(p){
   var s = this._animations;
   return s ? s.get(p) : null;
}
MO.FE3dTemplate_pushAnimation = function FE3dTemplate_pushAnimation(p){
   var o = this;
   var r = o._animations;
   if(!r){
      r = o._animations = new MO.TDictionary();
   }
   var pr = p.resource();
   r.set(pr.guid(), p);
}
MO.FE3dTemplate_visible = function FE3dTemplate_visible(){
   return this.sprite().visible();
}
MO.FE3dTemplate_setVisible = function FE3dTemplate_setVisible(visible){
   this.sprite().setVisible(visible);
}
MO.FE3dTemplate_loadSkeletons = function FE3dTemplate_loadSkeletons(p){
   var o = this;
   var c = p.count();
   if(c > 0){
      var ks = o.skeletons();
      for(var i = 0; i < c; i++){
         var r = p.at(i);
         var s = MO.Class.create(MO.FE3rSkeleton);
         s.loadResource(r);
         o.pushSkeleton(s);
      }
   }
}
MO.FE3dTemplate_linkAnimation = function FE3dTemplate_linkAnimation(p){
   var o = this;
   var ts = p.tracks();
   var c = ts.count();
   for(var i = 0; i < c; i++){
      var t = ts.getAt(i);
      var mc = t._resource._meshCode;
      if(mc){
         var m = o.findMeshByCode(mc);
         m._activeTrack = t;
      }
   }
}
MO.FE3dTemplate_loadAnimations = function FE3dTemplate_loadAnimations(p){
   var o = this;
   var c = p.count();
   if(c > 0){
      for(var i = 0; i < c; i++){
         var r = p.getAt(i);
         var a = o.findAnimation(r.guid());
         if(a){
            continue;
         }
         var a = null;
         if(r.skeleton()){
            a = MO.Class.create(MO.FE3rSkeletonAnimation);
         }else{
            a = MO.Class.create(MO.FE3rMeshAnimation);
         }
         a._display = o;
         a.loadResource(r);
         o.pushAnimation(a);
      }
   }
}
MO.FE3dTemplate_loadResource = function FE3dTemplate_loadResource(resource){
   var o = this;
   var technique = o.selectTechnique(o, FE3dGeneralTechnique);
   technique.setResource(resource.technique());
   o.__base.FE3dSpace.loadResource.call(o, resource);
   var displayResources = resource.displays();
   if(displayResources){
      var displayCount = displayResources.count();
      if(displayCount > 0){
         for(var i = 0; i < displayCount; i++){
            var displayResource = displayResources.at(i);
            var display = MO.Class.create(MO.FE3dTemplateDisplay);
            display._parent = o;
            display.linkGraphicContext(o);
            display.loadResource(displayResource);
            o._sprites.push(display);
         }
      }
   }
}
MO.FE3dTemplate_reloadResource = function FE3dTemplate_reloadResource(){
   var o = this;
   var sprites = o._sprites;
   if(sprites){
      var count = sprites.count();
      for(var i = 0; i < count; i++){
         var sprite = sprites.at(i);
         sprite.reloadResource();
      }
   }
}
MO.FE3dTemplate_processLoad = function FE3dTemplate_processLoad(){
   var o = this;
   if(o._ready){
      return true;
   }
   if(!o._dataReady){
      var resource = o._resource;
      if(!resource.testReady()){
         return false;
      }
      o.loadResource(resource);
      o._dataReady = true;
   }
   var sprites = o._sprites;
   if(sprites){
      var spriteCount = sprites.count();
      for(var i = 0; i < spriteCount; i++){
         var sprite = sprites.at(i);
         if(!sprite.testReady()){
            return false;
         }
      }
      for(var i = 0; i < spriteCount; i++){
         var sprite = sprites.at(i);
         sprite.load();
         o._layer.pushDisplay(sprite);
      }
   }
   var animations = o._animations;
   if(animations){
      var animationCount = animations.count();
      for(var i = 0; i < animationCount; i++){
         var animation = animations.at(i);
         if(animation.resource().skeleton() == null){
            o.linkAnimation(animation);
         }
      }
   }
   o._ready = true;
   var event = MO.Memory.alloc(SEvent);
   event.sender = o;
   event.template = o;
   o.processLoadListener(event);
   MO.Memory.free(event);
   return o._ready;
}
MO.FE3dTemplate_process = function FE3dTemplate_process(event){
   var o = this;
   o.__base.FE3dSpace.process.call(o);
}
MO.FE3dTemplate_dispose = function FE3dTemplate_dispose(){
   var o = this;
   o._sprites = MO.Lang.Object.dispose(o._sprites);
   o.__base.FE3dSpace.dispose.call(o);
}
MO.FE3dTemplateCanvas = function FE3dTemplateCanvas(o){
   o = MO.Class.inherits(this, o, MO.FE3dCanvas);
   o._activeTemplate     = null;
   o._capturePosition    = null;
   o._captureRotation    = null;
   o.onEnterFrame        = MO.FE3dTemplateCanvas_onEnterFrame;
   o.onMouseCaptureStart = MO.FE3dTemplateCanvas_onMouseCaptureStart;
   o.onMouseCapture      = MO.FE3dTemplateCanvas_onMouseCapture;
   o.onMouseCaptureStop  = MO.FE3dTemplateCanvas_onMouseCaptureStop;
   o.onResize            = MO.FE3dTemplateCanvas_onResize;
   o.onTemplateLoad      = MO.FE3dTemplateCanvas_onTemplateLoad;
   o.construct           = MO.FE3dTemplateCanvas_construct;
   o.loadByGuid          = MO.FE3dTemplateCanvas_loadByGuid;
   o.loadByCode          = MO.FE3dTemplateCanvas_loadByCode;
   o.dispose             = MO.FE3dTemplateCanvas_dispose;
   return o;
}
MO.FE3dTemplateCanvas_onEnterFrame = function FE3dTemplateCanvas_onEnterFrame(){
   var o = this;
   var s = o._activeTemplate;
   if(!s){
      return;
   }
   var c = s.camera();
   var d = 0.5;
   var r = 0.05;
   var kw = RKeyboard.isPress(EKeyCode.W);
   var ks = RKeyboard.isPress(EKeyCode.S);
   if(kw && !ks){
      c.doWalk(d);
   }
   if(!kw && ks){
      c.doWalk(-d);
   }
   var ka = RKeyboard.isPress(EKeyCode.A);
   var kd = RKeyboard.isPress(EKeyCode.D);
   if(ka && !kd){
      c.doYaw(r);
   }
   if(!ka && kd){
      c.doYaw(-r);
   }
   var kq = RKeyboard.isPress(EKeyCode.Q);
   var ke = RKeyboard.isPress(EKeyCode.E);
   if(kq && !ke){
      c.doFly(d);
   }
   if(!kq && ke){
      c.doFly(-d);
   }
   var kz = RKeyboard.isPress(EKeyCode.Z);
   var kw = RKeyboard.isPress(EKeyCode.X);
   if(kz && !kw){
      c.doPitch(r);
   }
   if(!kz && kw){
      c.doPitch(-r);
   }
   c.update();
   if(o._optionRotation){
      var r = o._rotation;
      var ls = s.layers();
      var c = ls.count();
      for(var i = 0; i < c; i++){
         var l = ls.value(i);
         var m = l.matrix();
         m.setRotation(0, r.y, 0);
         m.update();
      }
      r.y += 0.01;
   }
}
MO.FE3dTemplateCanvas_onMouseCaptureStart = function FE3dTemplateCanvas_onMouseCaptureStart(p){
   var o = this;
   var s = o._activeTemplate;
   if(!s){
      return;
   }
   var r = o._activeTemplate.region();
   var st = MO.Console.find(MO.FG3dTechniqueConsole).find(o._graphicContext, FG3dSelectTechnique);
   var r = st.test(r, p.offsetX, p.offsetY);
   o._capturePosition.set(p.clientX, p.clientY);
   o._captureRotation.assign(s.camera()._rotation);
}
MO.FE3dTemplateCanvas_onMouseCapture = function FE3dTemplateCanvas_onMouseCapture(p){
   var o = this;
   var s = o._activeTemplate;
   if(!s){
      return;
   }
   var cx = p.clientX - o._capturePosition.x;
   var cy = p.clientY - o._capturePosition.y;
   var c = o._activeTemplate.camera();
   var r = c.rotation();
   var cr = o._captureRotation;
   r.x = cr.x + cy * 0.003;
   r.y = cr.y + cx * 0.003;
}
MO.FE3dTemplateCanvas_onMouseCaptureStop = function FE3dTemplateCanvas_onMouseCaptureStop(p){
}
MO.FE3dTemplateCanvas_onResize = function FE3dTemplateCanvas_onResize(){
   var o = this;
   o.__base.FE3dCanvas.onResize.call(o, event);
   var c = o._graphicContext;
   var cs = c.size();
   var s = o._activeSpace;
   if(s){
      var rp = s.camera().projection();
      rp.size().set(cs.width, cs.height);
      rp.update();
   }
}
MO.FE3dTemplateCanvas_onTemplateLoad = function FE3dTemplateCanvas_onTemplateLoad(p){
   var o = this;
   var c = o._graphicContext;
   var s = o._activeTemplate;
   var cs = c.size();
   var rp = s.camera().projection();
   rp.size().set(cs.width, cs.height);
   rp.update();
   o.processLoadListener(o, s);
}
MO.FE3dTemplateCanvas_construct = function FE3dTemplateCanvas_construct(){
   var o = this;
   o.__base.FE3dCanvas.construct.call(o);
   o._rotation = new MO.SVector3();
   o._capturePosition = new MO.SPoint2();
   o._captureRotation = new MO.SVector3();
}
MO.FE3dTemplateCanvas_loadByGuid = function FE3dTemplateCanvas_loadByGuid(p){
   var o = this;
   var c = o._graphicContext;
   var sc = MO.Console.find(MO.FE3dSceneConsole);
   if(o._activeTemplate != null){
      sc.free(o._activeTemplate);
   }
   var s = sc.alloc(o, p);
   s.addLoadListener(o, o.onTemplateLoad);
   s.selectTechnique(c, FG3dGeneralTechnique);
   o._stage = o._activeTemplate = s;
   RStage.register('stage3d', s);
}
MO.FE3dTemplateCanvas_loadByCode = function FE3dTemplateCanvas_loadByCode(code){
   var o = this;
   var context = o._graphicContext;
   var templateConsole = MO.Console.find(MO.FE3dTemplateConsole);
   if(o._activeTemplate != null){
      templateConsole.free(o._activeTemplate);
   }
   var template = templateConsole.allocByCode(context, code);
   template.addLoadListener(o, o.onTemplateLoad);
   template.selectTechnique(context, FE3dGeneralTechnique);
   o._stage = o._activeTemplate = template;
   MO.RStage.register('stage.template', template);
}
MO.FE3dTemplateCanvas_dispose = function FE3dTemplateCanvas_dispose(){
   var o = this;
   var v = o._rotation;
   if(v){
      v.dispose();
      o._rotation = null;
   }
   o.__base.FE3dCanvas.dispose.call(o);
}
MO.FE3dTemplateConsole = function FE3dTemplateConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd    = MO.EScope.Local;
   o._loadQueue  = null;
   o._pools      = null;
   o._thread     = null;
   o._interval   = 200;
   o.onProcess   = MO.FE3dTemplateConsole_onProcess;
   o.construct   = MO.FE3dTemplateConsole_construct;
   o.allocByGuid = MO.FE3dTemplateConsole_allocByGuid;
   o.allocByCode = MO.FE3dTemplateConsole_allocByCode;
   o.free        = MO.FE3dTemplateConsole_free;
   return o;
}
MO.FE3dTemplateConsole_onProcess = function FE3dTemplateConsole_onProcess(){
   var o = this;
   var looper = o._loadQueue;
   looper.record();
   while(looper.next()){
      var template = looper.current();
      if(template.processLoad()){
         looper.removeCurrent();
      }
   }
}
MO.FE3dTemplateConsole_construct = function FE3dTemplateConsole_construct(){
   var o = this;
   o._loadQueue = new MO.TLooper();
   o._pools = MO.Class.create(MO.FObjectPools);
   var t = o._thread = MO.Class.create(MO.FThread);
   t.setInterval(o._interval);
   t.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(t);
}
MO.FE3dTemplateConsole_allocByGuid = function FE3dTemplateConsole_allocByGuid(context, guid){
   var o = this;
   var template = o._pools.alloc(guid);
   if(template){
      return template;
   }
   var resource = MO.Console.find(MO.FE3sTemplateConsole).loadByGuid(guid);
   template = MO.Class.create(MO.FE3dTemplate);
   template.linkGraphicContext(context);
   template.setResource(resource);
   template._poolCode = guid;
   o._loadQueue.push(template);
   return template;
}
MO.FE3dTemplateConsole_allocByCode = function FE3dTemplateConsole_allocByCode(context, code){
   var o = this;
   var template = o._pools.alloc(code);
   if(template){
      return template;
   }
   var resource = MO.Console.find(MO.FE3sTemplateConsole).loadByCode(code);
   template = MO.Class.create(MO.FE3dTemplate);
   template.linkGraphicContext(context);
   template.setResource(resource);
   template._poolCode = code;
   o._loadQueue.push(template);
   return template;
}
MO.FE3dTemplateConsole_free = function FE3dTemplateConsole_free(template){
   var o = this;
   var code = template._poolCode;
   o._pools.free(code, template);
}
MO.FE3dTemplateDisplay = function FE3dTemplateDisplay(o){
   o = MO.Class.inherits(this, o, MO.FE3dSprite, MO.MListenerLoad);
   o._dataReady       = false;
   o._ready           = false;
   o._shapes          = MO.Class.register(o, new MO.AGetter('_shapes'));
   o._skeletons       = MO.Class.register(o, new MO.AGetter('_skeletons'));
   o.construct        = MO.FE3dTemplateDisplay_construct;
   o.testReady        = MO.FE3dTemplateDisplay_testReady;
   o.findMeshByCode   = MO.FE3dTemplateDisplay_findMeshByCode;
   o.pushSkeleton     = MO.FE3dTemplateDisplay_pushSkeleton;
   o.loadSkeletons    = MO.FE3dTemplateDisplay_loadSkeletons;
   o.linkAnimation    = MO.FE3dTemplateDisplay_linkAnimation;
   o.loadAnimations   = MO.FE3dTemplateDisplay_loadAnimations;
   o.loadResource     = MO.FE3dTemplateDisplay_loadResource;
   o.reloadResource   = MO.FE3dTemplateDisplay_reloadResource;
   o.load             = MO.FE3dTemplateDisplay_load;
   o.dispose          = MO.FE3dTemplateDisplay_dispose;
   return o;
}
MO.FE3dTemplateDisplay_construct = function FE3dTemplateDisplay_construct(){
   var o = this;
   o.__base.FE3dSprite.construct.call(o);
   o._shapes = new MO.TObjects();
}
MO.FE3dTemplateDisplay_testReady = function FE3dTemplateDisplay_testReady(){
   var o = this;
   var shapes = o._shapes;
   if(shapes){
      var shapeCount = shapes.count();
      for(var i = 0; i < shapeCount; i++){
         var shape = shapes.at(i);
         if(!shape.testReady()){
            return false;
         }
      }
   }
   return true;
}
MO.FE3dTemplateDisplay_findMeshByCode = function FE3dTemplateDisplay_findMeshByCode(p){
   var s = this._shapes;
   for(var i = s.count() - 1; i >= 0; i--){
      var m = s.at(i);
      if(m._renderable._resource._code == p){
         return m;
      }
   }
   return null;
}
MO.FE3dTemplateDisplay_pushSkeleton = function FE3dTemplateDisplay_pushSkeleton(skeleton){
   var o = this;
   var resource = skeleton.resource();
   var skeletonGuid = resource.guid();
   var skeletons = o._skeletons;
   if(!skeletons){
      skeletons = o._skeletons = new MO.TDictionary();
   }
   if(!o._activeSkeleton){
      o._activeSkeleton = skeleton;
   }
   skeletons.set(skeletonGuid, skeleton);
}
MO.FE3dTemplateDisplay_loadSkeletons = function FE3dTemplateDisplay_loadSkeletons(skeletonResources){
   var o = this;
   var count = skeletonResources.count();
   if(count > 0){
      for(var i = 0; i < count; i++){
         var skeletonResource = skeletonResources.at(i);
         var skeleton = MO.Class.create(MO.FE3rSkeleton);
         skeleton.loadResource(skeletonResource);
         o.pushSkeleton(skeleton);
      }
   }
}
MO.FE3dTemplateDisplay_linkAnimation = function FE3dTemplateDisplay_linkAnimation(animation){
   var o = this;
   var tracks = animation.tracks();
   var count = tracks.count();
   for(var i = 0; i < count; i++){
      var track = tracks.at(i);
      var meshCode = track._resource._meshCode;
      if(meshCode){
         var mesh = o.findMeshByCode(meshCode);
         mesh._activeTrack = track;
      }
   }
}
MO.FE3dTemplateDisplay_loadAnimations = function FE3dTemplateDisplay_loadAnimations(animationResources){
   var o = this;
   var animationCount = animationResources.count();
   for(var i = 0; i < animationCount; i++){
      var animationResource = animationResources.at(i);
      var guid = animationResource.guid();
      var animation = o.findAnimation(guid);
      if(animation){
         continue;
      }
      if(animationResource.skeleton()){
         animation = MO.Class.create(MO.FE3rSkeletonAnimation);
      }else{
         animation = MO.Class.create(MO.FE3rMeshAnimation);
      }
      animation._display = o;
      animation.loadResource(animationResource);
      o.pushAnimation(animation);
   }
}
MO.FE3dTemplateDisplay_loadResource = function FE3dTemplateDisplay_loadResource(resource){
   var o = this;
   o._resource = resource;
   var instanceConsole = MO.Console.find(MO.FE3dInstanceConsole);
   o._matrix.assign(resource.matrix());
   var renderableResources = resource.renderables();
   if(renderableResources){
      var shapes = o._shapes;
      var renderableCount = renderableResources.count();
      for(var i = 0; i < renderableCount; i++){
         var renderableResource = renderableResources.at(i);
         var renderable = instanceConsole.create(MO.EE3dInstance.TemplateRenderable);
         renderable._display = o;
         renderable.linkGraphicContext(o);
         renderable.loadResource(renderableResource);
         shapes.push(renderable);
         o.pushRenderable(renderable);
      }
   }
}
MO.FE3dTemplateDisplay_reloadResource = function FE3dTemplateDisplay_reloadResource(){
   var o = this;
   var shapes = o._shapes;
   if(shapes){
      var count = shapes.count();
      for(var i = 0; i < count; i++){
         var shape = shapes.at(i);
         shape.reloadResource();
      }
   }
}
MO.FE3dTemplateDisplay_load = function FE3dTemplateDisplay_load(){
   var o = this;
   var shapes = o._shapes;
   if(shapes){
      var shapeCount = shapes.count();
      for(var i = 0; i < shapeCount; i++){
         var shape = shapes.at(i);
         shape.load();
      }
   }
   var animations = o._animations;
   if(animations){
      var animationCount = animations.count();
      for(var i = 0; i < animationCount; i++){
         var animation = animations.at(i);
         if(animation.resource().skeleton() == null){
            o.linkAnimation(animation);
         }
      }
   }
}
MO.FE3dTemplateDisplay_dispose = function FE3dTemplateDisplay_dispose(){
   var o = this;
   o._shapes = MO.Lang.Object.dispose(o._shapes);
   o.__base.FE3dSprite.dispose.call(o);
}
MO.FE3dTemplateRenderable = function FE3dTemplateRenderable(o){
   o = MO.Class.inherits(this, o, MO.FE3dMeshRenderable, MO.MLinkerResource);
   o._ready            = false;
   o._model            = null;
   o._materialCode     = null;
   o._materialResource = null;
   o.construct         = MO.FE3dTemplateRenderable_construct;
   o.testReady         = MO.FE3dTemplateRenderable_testReady;
   o.testVisible       = MO.FE3dTemplateRenderable_testVisible;
   o.calculateOutline  = MO.FE3dTemplateRenderable_calculateOutline;
   o.loadResource      = MO.FE3dTemplateRenderable_loadResource;
   o.reloadResource    = MO.FE3dTemplateRenderable_reloadResource;
   o.load              = MO.FE3dTemplateRenderable_load;
   o.dispose           = MO.FE3dTemplateRenderable_dispose;
   return o;
}
MO.FE3dTemplateRenderable_construct = function FE3dTemplateRenderable_construct(){
   var o = this;
   o.__base.FE3dMeshRenderable.construct.call(o);
}
MO.FE3dTemplateRenderable_testReady = function FE3dTemplateRenderable_testReady(){
   var o = this;
   if(!o._ready){
      if(!o._model.testReady()){
         return false;
      }
      var materials = o._materials;
      if(materials){
         var count = materials.count();
         for(var i = 0; i < count; i++){
            var material = materials.at(i);
            if(material){
               if(!material.testReady()){
                  return false;
               }
            }
         }
      }
      o._ready = true;
   }
   return o._ready;
}
MO.FE3dTemplateRenderable_testVisible = function FE3dTemplateRenderable_testVisible(p){
   var o = this;
   var result = false;
   if(o._ready){
      result = o.__base.FE3dMeshRenderable.testVisible.call(o);
   }
   return result;
}
MO.FE3dTemplateRenderable_calculateOutline = function FE3dTemplateRenderable_calculateOutline(flag){
   var o = this;
   var outline = o._outline;
   if(outline.isEmpty() || flag){
      var resource = o._resource
      var meshResource = resource.mesh();
      var meshOutline = meshResource.outline();
      outline.calculateFrom(meshOutline, o._currentMatrix);
   }
   return outline;
}
MO.FE3dTemplateRenderable_loadResource = function FE3dTemplateRenderable_loadResource(resource){
   var o = this;
   o._resource = resource;
   o._matrix.assign(resource.matrix());
   var modelGuid = resource.modelGuid();
   o._model = MO.Console.find(MO.FE3rModelConsole).load(o, modelGuid);
   var materialGuid = resource.materialGuid();
   if(!MO.Lang.String.isEmpty(materialGuid)){
      var material = o._material = o._materialReference = MO.Console.find(MO.FE3rMaterialConsole).load(o, materialGuid);
      o._materialResource = material.resource();
      o.pushMaterial(material);
   }
   var template = o._display._parent;
   var materialRefers = resource.materialRefers();
   if(materialRefers){
      var count = materialRefers.count();
      for(var i = 0; i < count; i++){
         var materialRefer = materialRefers.at(i);
         var materialGuid = materialRefer.guid();
         var material = template.findMaterial(materialGuid);
         o.pushMaterial(material);
         o._material = material;
      }
   }
   if(!o._material){
      o._material = o._materialReference = MO.Class.create(MO.FE3dMaterial);
   }
}
MO.FE3dTemplateRenderable_reloadResource = function FE3dTemplateRenderable_reloadResource(){
   var o = this;
   var material = o._material;
   material.calculate(o._materialResource);
   material.update();
}
MO.FE3dTemplateRenderable_load = function FE3dTemplateRenderable_load(){
   var o = this;
   var display = o._display;
   var resource = o._resource;
   var modelResource = resource.model();
   var bitmaps = o._material.bitmaps();
   if(bitmaps){
      var count = bitmaps.count();
      for(var i = 0; i < count; i++){
         var bitmap = bitmaps.at(i);
         o.pushTexture(bitmap);
      }
   }
   var skeletonResources = modelResource.skeletons();
   if(skeletonResources){
      display.loadSkeletons(skeletonResources);
   }
   var animationResources = modelResource.animations();
   if(animationResources){
      display.loadAnimations(animationResources);
   }
   var meshResource = resource.mesh();
   var meshGuid = resource.meshGuid();
   var renderable = o._renderable = MO.Console.find(MO.FE3rModelConsole).findMesh(meshGuid);
   var vertexBuffers = renderable.vertexBuffers();
   var vertexBufferCount = vertexBuffers.count();
   for(var i = 0; i < vertexBufferCount; i++){
      var vertexBuffer = vertexBuffers.at(i);
      o._vertexBuffers.set(vertexBuffer.code(), vertexBuffer);
   }
   var skins = renderable.skins();
   if(skins){
      var displaySkeleton = display._activeSkeleton;
      var skin = o._activeSkin = skins.first();
      var streams = skin.streams();
      var streamCount = streams.count();
      for(var i = 0; i < streamCount; i++){
         var stream = streams.at(i);
         var buffer = stream.buffer();
         o._vertexBuffers.set(buffer.code(), buffer);
      }
      var skinResource = skin.resource();
      var boneReferResources = skinResource.boneRefers();
      var c = boneReferResources.count();
      if(c > 0){
         var bones = o._bones = new MO.TObjects();
         for(var i = 0; i < c; i++){
            var boneReferResource = boneReferResources.at(i);
            var boneReferIndex = boneReferResource.index();
            var bone = displaySkeleton.bones().get(boneReferIndex);
            if(!bone){
               throw new MO.TError(o, 'Bone is not exist.');
            }
            bones.push(bone);
         }
      }
   }
   o._ready = true;
}
MO.FE3dTemplateRenderable_dispose = function FE3dTemplateRenderable_dispose(){
   var o = this;
   o.__base.FE3dMeshRenderable.dispose.call(o);
}
MO.FE3dTextureLoader = function FE3dTextureLoader(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject);
   o._image      = MO.Class.register(o, new MO.AGetter('_image'));
   o._texture    = MO.Class.register(o, new MO.AGetter('_texture'));
   o._ready      = false;
   o.onLoaded    = MO.FE3dTextureLoader_onLoaded;
   o.construct   = MO.FE3dTextureLoader_construct;
   o.setup       = MO.FE3dTextureLoader_setup;
   o.testReady   = MO.FE3dTextureLoader_testReady;
   o.pickImage   = MO.FE3dTextureLoader_pickImage;
   o.pickTexture = MO.FE3dTextureLoader_pickTexture;
   o.loadUrl     = MO.FE3dTextureLoader_loadUrl;
   o.dispose     = MO.FE3dTextureLoader_dispose;
   return o;
}
MO.FE3dTextureLoader_onLoaded = function FE3dTextureLoader_onLoaded(event){
   var o = this;
   var image = o._image;
   o._texture.upload(image);
   image.dispose();
   o._image = null;
   o._ready = true;
}
MO.FE3dTextureLoader_construct = function FE3dTextureLoader_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.FE3dTextureLoader_setup = function FE3dTextureLoader_setup(textureCd, code){
   var o = this;
   var context = o._graphicContext;
   var texture = null;
   if(textureCd == MO.EG3dTexture.Flat2d){
      texture = o._texture = context.createFlatTexture();
   }else if(textureCd == MO.EG3dTexture.Cube){
      texture = o._texture = context.createCubeTexture();
   }else{
      throw new TError(o, 'Unknown texture type.');
   }
   texture.setCode(code);
}
MO.FE3dTextureLoader_testReady = function FE3dTextureLoader_testReady(){
   return this._ready;
}
MO.FE3dTextureLoader_pickImage = function FE3dTextureLoader_pickImage(){
   var o = this;
   var image = o._image;
   o._image = null;
   return image;
}
MO.FE3dTextureLoader_pickTexture = function FE3dTextureLoader_pickTexture(){
   var o = this;
   var texture = o._texture;
   o._texture = null;
   return texture;
}
MO.FE3dTextureLoader_loadUrl = function FE3dTextureLoader_loadUrl(url){
   var o = this;
   var image = o._image = MO.Class.create(MO.FImage);
   image.addLoadListener(o, o.onLoaded);
   image.loadUrl(url);
}
MO.FE3dTextureLoader_dispose = function FE3dTextureLoader_dispose(){
   var o = this;
   o._image = MO.Lang.Object.dispose(o._image);
   o._texture = MO.Lang.Object.dispose(o._texture);
   o.__base.MGraphicObject.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.ME3dBoundaryPolygon = function ME3dBoundaryPolygon(o){
   o = MO.Class.inherits(this, o);
   o._positionCount = MO.Class.register(o, new MO.AGetter('_positionCount'));
   o._positions     = MO.Class.register(o, new MO.AGetter('_positions'));
   o._indexCount    = MO.Class.register(o, new MO.AGetter('_indexCount'));
   o._indexes       = MO.Class.register(o, new MO.AGetter('_indexes'));
   o.construct      = MO.ME3dBoundaryPolygon_construct;
   o.dispose        = MO.ME3dBoundaryPolygon_dispose;
   return o;
}
MO.ME3dBoundaryPolygon_construct = function ME3dBoundaryPolygon_construct(){
   var o = this;
}
MO.ME3dBoundaryPolygon_dispose = function ME3dBoundaryPolygon_dispose(){
   var o = this;
   o._positions = null;
   o._indexes = null;
}
MO.ME3dDynamicRenderable = function ME3dDynamicRenderable(o){
   o = MO.Class.inherits(this, o);
   o._color    = MO.Class.register(o, new MO.AGetter('_color'));
   o.construct = MO.ME3dDynamicRenderable_construct;
   o.dispose   = MO.ME3dDynamicRenderable_dispose;
   return o;
}
MO.ME3dDynamicRenderable_construct = function ME3dDynamicRenderable_construct(){
   var o = this;
   o._color = new MO.SColor4(1, 1, 1, 1);
}
MO.ME3dDynamicRenderable_dispose = function ME3dDynamicRenderable_dispose(){
   var o = this;
   o._color = MO.Lang.Object.dispose(o._color);
}
MO.SE3dRulerPrecision = function SE3dRulerPrecision(o){
   var o = this;
   o.interval = 1;
   o.length   = 0.5;
   o.color    = new MO.SColor4(255, 255, 255, 255);
   return o;
}
MO.SE3dRulerPrecision_assign = function SE3dRulerPrecision_assign(info){
   var o = this;
   o.interval.assign(info.interval);
   o.color.assign(info.color);
}
MO.SE3dRulerStyle = function SE3dRulerStyle(o){
   var o = this;
   o.lineColor    = new MO.SColor4(255, 255, 255, 255);
   o.bothLength   = 0.5;
   o.bothColor    = new MO.SColor4(255, 255, 255, 255);
   o.tickInterval = 1;
   o.tickLength   = 0.3;
   o.tickColor    = new MO.SColor4(255, 255, 255, 255);
   o.precisions   = new MO.TObjects();
   o.assign       = MO.SE3dRulerStyle_assign;
   return o;
}
MO.SE3dRulerStyle = function SE3dRulerStyle_assign(info){
   var o = this;
   o.lineColor.assign(info.lineColor);
   o.bothLength = info.bothLength;
   o.bothColor.assign(info.lineColor);
   o.tickInterval = info.tickInterval;
   o.tickLength = info.tickLength;
   o.tickColor.assign(info.lineColor);
   o.precisions.assign(info.precisions);
}
MO.FE3dBitmap = function FE3dBitmap(o){
   o = MO.Class.inherits(this, o, MO.FE3dFace);
   o.construct = MO.FE3dBitmap_construct;
   o.testReady = MO.FE3dBitmap_testReady;
   o.loadUrl   = MO.FE3dBitmap_loadUrl;
   o.dispose   = MO.FE3dBitmap_dispose;
   return o;
}
MO.FE3dBitmap_construct = function FE3dBitmap_construct(){
   var o = this;
   o.__base.FE3dFace.construct.call(o);
}
MO.FE3dBitmap_testReady = function FE3dBitmap_testReady(){
   var o = this;
   if(!o._ready){
      var renderable = o._renderable;
      if(renderable){
         o._ready = renderable.testReady();
         if(o._ready){
            var size = renderable.size();
            var adjustSize = renderable.adjustSize();
            var matrix = o.matrix();
            matrix.sz = adjustSize.height / size.height;
            matrix.updateForce();
            var event = new MO.SEvent(o);
            o.processLoadListener(event);
            event.dispose();
         }
         o._materialReference = renderable;
      }
   }
   return o._ready;
}
MO.FE3dBitmap_loadUrl = function FE3dBitmap_loadUrl(url){
   var o = this;
   o._renderable = MO.Console.find(MO.FE3dBitmapConsole).loadDataByUrl(o, url);
   o._ready = false;
}
MO.FE3dBitmap_dispose = function FE3dBitmap_dispose(){
   var o = this;
   o.__base.FE3dFace.dispose.call(o);
}
MO.FE3dBitmapConsole = function FE3dBitmapConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd       = MO.EScope.Local;
   o._bitmaps       = MO.Class.register(o, new MO.AGetter('_bitmaps'));
   o._bitmapDatas   = MO.Class.register(o, new MO.AGetter('_bitmapDatas'));
   o._dataUrl       = '/cloud.resource.bitmap.wv'
   o.construct      = MO.FE3dBitmapConsole_construct;
   o.loadByUrl      = MO.FE3dBitmapConsole_loadByUrl;
   o.loadByGuid     = MO.FE3dBitmapConsole_loadByGuid;
   o.loadDataByUrl  = MO.FE3dBitmapConsole_loadDataByUrl;
   o.loadDataByGuid = MO.FE3dBitmapConsole_loadDataByGuid;
   o.dispose        = MO.FE3dBitmapConsole_dispose;
   return o;
}
MO.FE3dBitmapConsole_construct = function FE3dBitmapConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._bitmaps = new MO.TDictionary();
   o._bitmapDatas = new MO.TDictionary();
}
MO.FE3dBitmapConsole_loadByUrl = function FE3dBitmapConsole_loadByUrl(context, url){
   var o = this;
   var bitmap = o._bitmaps.get(url);
   if(bitmap){
      return bitmap;
   }
   var loadUrl = MO.Window.Browser.contentPath(url);
   MO.Logger.info(o, 'Load bitmap from url. (url={1})', loadUrl);
   var bitmap = MO.Class.create(MO.FE3dBitmap);
   bitmap.linkGraphicContext(context);
   bitmap.setup();
   bitmap.loadUrl(url);
   o._bitmaps.set(url, bitmap);
   return bitmap;
}
MO.FE3dBitmapConsole_loadByGuid = function FE3dBitmapConsole_loadByGuid(context, guid){
   var o = this;
   var url = MO.Window.Browser.hostPath(o._dataUrl + '?do=view&guid=' + guid);
   return o.loadByUrl(context, url);
}
MO.FE3dBitmapConsole_loadDataByUrl = function FE3dBitmapConsole_loadDataByUrl(context, url){
   var o = this;
   var dataUrl = MO.Window.Browser.contentPath(url);
   MO.Logger.info(o, 'Load bitmap data from url. (url={1})', dataUrl);
   var data = o._bitmapDatas.get(url);
   if(!data){
      data = MO.Class.create(MO.FE3dBitmapData);
      data.linkGraphicContext(context);
      data.setup();
      data.loadUrl(url);
      o._bitmapDatas.set(url, data);
   }
   return data;
}
MO.FE3dBitmapConsole_loadDataByGuid = function FE3dBitmapConsole_loadDataByGuid(context, guid){
   var o = this;
   var url = MO.Window.Browser.hostPath(o._dataUrl + '?do=view&guid=' + guid);
   return o.loadDataByUrl(context, url);
}
MO.FE3dBitmapConsole_dispose = function FE3dBitmapConsole_dispose(){
   var o = this;
   o._bitmaps = MO.Lang.Object.dispose(o._bitmaps);
   o._bitmapDatas = MO.Lang.Object.dispose(o._bitmapDatas);
   o.__base.FConsole.dispose.call(o);
}
MO.FE3dBitmapData = function FE3dBitmapData(o){
   o = MO.Class.inherits(this, o, MO.FE3dFaceData, MO.MListener);
   o._image      = null;
   o._listenersImageLoad = MO.Class.register(o, new MO.AListener('_listenersImageLoad'));
   o.onImageLoad = MO.FE3dBitmapData_onImageLoad;
   o.construct   = MO.FE3dBitmapData_construct;
   o.loadUrl     = MO.FE3dBitmapData_loadUrl;
   o.dispose     = MO.FE3dBitmapData_dispose;
   return o;
}
MO.FE3dBitmapData_onImageLoad = function FE3dBitmapData_onImageLoad(event){
   var o = this;
   var context = o._graphicContext;
   var image = event.sender;
   var size = image.size();
   var width = size.width;
   var height = size.height;
   o._size.set(width, height);
   var adjustWidth = MO.Lang.Integer.pow2(width);
   var adjustHeight = MO.Lang.Integer.pow2(height);
   o._adjustSize.set(adjustWidth, adjustHeight);
   var texture = o._texture;
   if((adjustWidth == width) && (adjustHeight == height)){
      texture.upload(image);
   }else{
      var canvasConsole = MO.Console.find(MO.FE2dCanvasConsole);
      var canvas = canvasConsole.allocBySize(adjustWidth, adjustHeight);
      var context2d = canvas.graphicContext();
      context2d.drawImage(image, 0, 0, width, height);
      texture.upload(canvas);
      canvasConsole.free(canvas);
   }
   image.dispose();
   o._ready = true;
   o.processImageLoadListener(o);
}
MO.FE3dBitmapData_construct = function FE3dBitmapData_construct(){
   var o = this;
   o.__base.FE3dFaceData.construct.call(o);
}
MO.FE3dBitmapData_loadUrl = function FE3dBitmapData_loadUrl(url){
   var o = this;
   var image = MO.Class.create(MO.FImage);
   image.addLoadListener(o, o.onImageLoad);
   image.loadUrl(url);
   o._ready = false;
}
MO.FE3dBitmapData_dispose = function FE3dBitmapData_dispose(){
   var o = this;
   o.__base.FE3dFaceData.dispose.call(o);
}
MO.EE3dBoundaryShape = function EE3dBoundaryShape(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject);
   o._optionSphere     = false;
   o._scale            = MO.Class.register(o, new MO.AGetter('_scale'), 1);
   o._color            = MO.Class.register(o, new MO.AGetter('_color'));
   o._polygons         = MO.Class.register(o, new MO.AGetter('_polygons'));
   o._faceEffectCode   = MO.Class.register(o, new MO.AGetSet('_faceEffectCode'));
   o._faceRenderable   = MO.Class.register(o, new MO.AGetter('_faceRenderable'));
   o._borderEffectCode = MO.Class.register(o, new MO.AGetSet('_borderEffectCode'));
   o._borderRenderable = MO.Class.register(o, new MO.AGetter('_borderRenderable'));
   o.construct         = MO.EE3dBoundaryShape_construct;
   o.pushPolygon       = MO.EE3dBoundaryShape_pushPolygon;
   o.buildFace         = MO.EE3dBoundaryShape_buildFace;
   o.buildBorder       = MO.EE3dBoundaryShape_buildBorder;
   o.build             = MO.EE3dBoundaryShape_build;
   o.buildFlat         = MO.EE3dBoundaryShape_buildFlat;
   o.buildSphere       = MO.EE3dBoundaryShape_buildSphere;
   o.dispose           = MO.EE3dBoundaryShape_dispose;
   return o;
}
MO.EE3dBoundaryShape_construct = function EE3dBoundaryShape_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._color = new MO.SColor4(0.3, 0.3, 0.3);
   o._polygons = new MO.TObjects();
}
MO.EE3dBoundaryShape_pushPolygon = function EE3dBoundaryShape_pushPolygon(polygon){
   this._polygons.push(polygon);
}
MO.EE3dBoundaryShape_buildFace = function EE3dBoundaryShape_buildFace(){
   var o = this;
   var context = o._graphicContext;
   var boundaries = o._polygons;
   var count = boundaries.count();
   var vertexTotal = o._vertexTotal;
   var indexTotal = o._indexTotal;
   var color = o._color;
   var vertexStart = 0;
   var vertexIndex = 0;
   var vertexData = new Float32Array(3 * vertexTotal * 2);
   var coordIndex = 0;
   var coordData = new Float32Array(2 * vertexTotal * 2);
   var faceIndex = 0;
   var faceData = new Uint32Array(indexTotal + 3 * 2 * vertexTotal);
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      var positions = boundary.positions();
      var positionIndex = 0;
      for(var i = 0; i < positionCount; i++){
         var cx = positions[positionIndex++];
         var cy = positions[positionIndex++];
         var x = cx * MO.Lang.Const.DEGREE_RATE;
         var y = cy * MO.Lang.Const.DEGREE_RATE;
         vertexData[vertexIndex++] = Math.sin(x) * Math.cos(y) * o._scale;
         vertexData[vertexIndex++] = Math.sin(y) * o._scale;
         vertexData[vertexIndex++] = -Math.cos(x) * Math.cos(y) * o._scale;
         coordData[coordIndex++] = cx / 360 + 0.5;
         coordData[coordIndex++] = 0.5 - cy / 180;
      }
      var indexes = boundary.indexes();
      var indexCount = indexes.length;
      var faceCount = indexCount / 3;
      for(var i = 0; i < faceCount; i++){
         var facePosition = 3 * i;
         faceData[faceIndex++] = vertexStart + indexes[facePosition + 2];
         faceData[faceIndex++] = vertexStart + indexes[facePosition + 1];
         faceData[faceIndex++] = vertexStart + indexes[facePosition    ];
      }
      vertexStart += positionCount;
   }
   var layerStart = vertexStart;
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      var positions = boundary.positions();
      var positionIndex = 0;
      for(var i = 0; i < positionCount; i++){
         var x = positions[positionIndex++] * MO.Lang.Const.DEGREE_RATE;
         var y = positions[positionIndex++] * MO.Lang.Const.DEGREE_RATE;
         vertexData[vertexIndex++] = (Math.sin(x) * Math.cos(y)) * 0.9;
         vertexData[vertexIndex++] = (Math.sin(y)) * 0.9;
         vertexData[vertexIndex++] = (-Math.cos(x) * Math.cos(y)) * 0.9;
         coordData[coordIndex++] = x;
         coordData[coordIndex++] = y;
      }
   }
   var vertexStart = 0;
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      for(var i = 0; i < positionCount; i++){
         if(i == positionCount - 1){
            faceData[faceIndex++] = vertexStart + i;
            faceData[faceIndex++] = vertexStart + 0;
            faceData[faceIndex++] = vertexStart + i + layerStart;
            faceData[faceIndex++] = vertexStart + 0;
            faceData[faceIndex++] = vertexStart + layerStart;
            faceData[faceIndex++] = vertexStart + i + layerStart;
         }else{
            faceData[faceIndex++] = vertexStart + i;
            faceData[faceIndex++] = vertexStart + i + 1;
            faceData[faceIndex++] = vertexStart + i + layerStart;
            faceData[faceIndex++] = vertexStart + i + 1;
            faceData[faceIndex++] = vertexStart + i + layerStart + 1;
            faceData[faceIndex++] = vertexStart + i + layerStart;
         }
      }
      vertexStart += positionCount;
   }
   var colorIndex = 0;
   var colors = o.colorsData = new Uint8Array(4 * vertexTotal * 2);
   var positionTotal = vertexTotal * 2;
   for(var i = 0; i < positionTotal; i++){
      colors[colorIndex++] = 0xFF;
      colors[colorIndex++] = 0xFF;
      colors[colorIndex++] = 0xFF;
      colors[colorIndex++] = 0xFF;
   }
   var renderable = o._faceRenderable = MO.Class.create(MO.FE3dDataBox);
   renderable._shape = o;
   renderable.linkGraphicContext(context);
   renderable.setOptionColor(true);
   renderable.setOptionCoord(true);
   renderable.setVertexCount(vertexTotal * 2);
   renderable.setup();
   renderable.color().setHex('#0a5294');
   renderable.vertexPositionBuffer().upload(vertexData, 4 * 3, vertexTotal * 2, true);
   renderable.vertexColorBuffer().upload(colors, 1 * 4, vertexTotal * 2, true);
   renderable.vertexCoordBuffer().upload(coordData, 4 * 2, vertexTotal * 2, true);
   renderable.indexBuffer().setStrideCd(MO.EG3dIndexStride.Uint32);
   renderable.indexBuffer().upload(faceData, faceIndex, true);
}
MO.EE3dBoundaryShape_buildBorder = function EE3dBoundaryShape_buildBorder(){
   var o = this;
   var context = o._graphicContext;
   var boundaries = o._polygons;
   var count = boundaries.count();
   var vertexTotal = o._vertexTotal;
   var indexTotal = o._indexTotal;
   var color = o._color;
   var vertexStart = 0;
   var vertexIndex = 0;
   var faceIndex = 0;
   var vertexData = new Float32Array(3 * vertexTotal * 2);
   var borderIndex = 0;
   var borderData = new Uint32Array(2 * vertexTotal + 2 * vertexTotal);
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      var positions = boundary.positions();
      var positionIndex = 0;
      for(var i = 0; i < positionCount; i++){
         var x = positions[positionIndex++] / 180 * Math.PI;
         var y = positions[positionIndex++] / 180 * Math.PI;
         vertexData[vertexIndex++] = (Math.sin(x) * Math.cos(y)) * 1.001;
         vertexData[vertexIndex++] = (Math.sin(y)) * 1.001;
         vertexData[vertexIndex++] = (-Math.cos(x) * Math.cos(y)) * 1.001;
      }
      for(var i = 0; i < positionCount; i++){
         borderData[borderIndex++] = vertexStart + i;
         if(i == positionCount - 1){
            borderData[borderIndex++] = vertexStart;
         }else{
            borderData[borderIndex++] = vertexStart + i + 1;
         }
      }
      vertexStart += positionCount;
   }
   var layerStart = vertexStart;
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      var positions = boundary.positions();
      var positionIndex = 0;
      for(var i = 0; i < positionCount; i++){
         var x = positions[positionIndex++] / 180 * Math.PI;
         var y = positions[positionIndex++] / 180 * Math.PI;
         vertexData[vertexIndex++] = (Math.sin(x) * Math.cos(y)) * 0.98;
         vertexData[vertexIndex++] = (Math.sin(y)) * 0.98;
         vertexData[vertexIndex++] = (-Math.cos(x) * Math.cos(y)) * 0.98;
      }
      vertexStart += positionCount;
   }
   var vertexStart = 0;
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      for(var i = 0; i < positionCount; i++){
         borderData[borderIndex++] = vertexStart + i;
         borderData[borderIndex++] = vertexStart + i + layerStart;
      }
      vertexStart += positionCount;
   }
   var colorIndex = 0;
   var colors = o.colorsData = new Uint8Array(4 * vertexTotal * 2);
   for(var i = 0; i < vertexTotal; i++){
      colors[colorIndex++] = 0x22;
      colors[colorIndex++] = 0xA9;
      colors[colorIndex++] = 0xFF;
      colors[colorIndex++] = 0xFF;
   }
   for(var i = 0; i < vertexTotal; i++){
      colors[colorIndex++] = 0x96;
      colors[colorIndex++] = 0xB0;
      colors[colorIndex++] = 0xD6;
      colors[colorIndex++] = 0xFF;
   }
   var renderable = o._borderRenderable = MO.Class.create(MO.FE3dDataBox);
   renderable._shape = o;
   renderable.linkGraphicContext(context);
   renderable.setup();
   renderable.setVertexCount(vertexTotal * 2);
   renderable.vertexPositionBuffer().upload(vertexData, 4 * 3, vertexTotal * 2, true);
   renderable.vertexColorBuffer().upload(colors, 1 * 4, vertexTotal * 2, true);
   renderable.indexBuffer().setDrawModeCd(MO.EG3dDrawMode.Lines);
   renderable.indexBuffer().setStrideCd(MO.EG3dIndexStride.Uint32);
   renderable.indexBuffer().setLineWidth(1);
   renderable.indexBuffer().upload(borderData, borderIndex, true);
   renderable.material().info().effectCode = 'eai.map.face';
}
MO.EE3dBoundaryShape_build = function EE3dBoundaryShape_build(context){
   var o = this;
   var vertexTotal = 0;
   var indexTotal = 0;
   var boundaries = o._polygons;
   var count = boundaries.count();
   for(var i = 0; i < count; i++){
      var boundary = boundaries.at(i);
      vertexTotal += boundary.positionCount();
      indexTotal += boundary.indexes().length;
   }
   o._vertexTotal = vertexTotal;
   o._indexTotal = indexTotal;
   o.buildFace(context);
   o.buildBorder(context);
}
MO.EE3dBoundaryShape_buildFlat = function EE3dBoundaryShape_buildFlat(context){
   var o = this;
   o._optionSphere = false;
   o.build(context)
}
MO.EE3dBoundaryShape_buildSphere = function EE3dBoundaryShape_buildSphere(context){
   var o = this;
   o._optionSphere = true;
   o.build(context)
}
MO.EE3dBoundaryShape_dispose = function EE3dBoundaryShape_dispose(){
   var o = this;
   o._polygons = MO.Lang.Obejct.dispose(o._polygons);
   o.__base.FObject.dispose.call(o);
}
MO.FE3dBoundaryShape3d = function FE3dBoundaryShape3d(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject);
   o._scaleTop          = MO.Class.register(o, new MO.AGetSet('_scaleTop'), 1);
   o._scaleBottom       = MO.Class.register(o, new MO.AGetSet('_scaleBottom'), 0.9);
   o._color             = MO.Class.register(o, new MO.AGetter('_color'));
   o._faceColor         = MO.Class.register(o, new MO.AGetter('_faceColor'));
   o._faceBottomColor   = MO.Class.register(o, new MO.AGetter('_faceBottomColor'));
   o._borderColor       = MO.Class.register(o, new MO.AGetter('_borderColor'));
   o._borderBottomColor = MO.Class.register(o, new MO.AGetter('_borderBottomColor'));
   o._polygons          = MO.Class.register(o, new MO.AGetter('_polygons'));
   o._faceEffectCode    = MO.Class.register(o, new MO.AGetSet('_faceEffectCode'));
   o._faceRenderable    = MO.Class.register(o, new MO.AGetter('_faceRenderable'));
   o._borderEffectCode  = MO.Class.register(o, new MO.AGetSet('_borderEffectCode'));
   o._borderRenderable  = MO.Class.register(o, new MO.AGetter('_borderRenderable'));
   o.construct          = MO.FE3dBoundaryShape3d_construct;
   o.pushPolygon        = MO.FE3dBoundaryShape3d_pushPolygon;
   o.buildFace          = MO.FE3dBoundaryShape3d_buildFace;
   o.buildBorder        = MO.FE3dBoundaryShape3d_buildBorder;
   o.build              = MO.FE3dBoundaryShape3d_build;
   o.dispose            = MO.FE3dBoundaryShape3d_dispose;
   return o;
}
MO.FE3dBoundaryShape3d_construct = function FE3dBoundaryShape3d_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._faceColor = new MO.SColor4(1, 1, 1, 1);
   o._color = new MO.SColor4(0.3, 0.3, 0.3);
   o._polygons = new MO.TObjects();
}
MO.FE3dBoundaryShape3d_pushPolygon = function FE3dBoundaryShape3d_pushPolygon(polygon){
   this._polygons.push(polygon);
}
MO.FE3dBoundaryShape3d_buildFace = function FE3dBoundaryShape3d_buildFace(){
   var o = this;
   var context = o._graphicContext;
   var faceColor = o._faceColor;
   var scaleTop = o._scaleTop;
   var scaleBottom = o._scaleBottom;
   var boundaries = o._polygons;
   var count = boundaries.count();
   var vertexTotal = o._vertexTotal;
   var indexTotal = o._indexTotal;
   var vertexSum = vertexTotal * 3;
   var vertexIndex = 0;
   var vertexData = new Float32Array(3 * vertexSum);
   var colorIndex = 0;
   var colors = new Uint8Array(4 * vertexSum);
   var coordIndex = 0;
   var coordData = new Float32Array(2 * vertexSum);
   var faceIndex = 0;
   var faceData = new Uint32Array(indexTotal + 3 * 2 * vertexTotal);
   var vertexStart = 0;
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      var positions = boundary.positions();
      var positionIndex = 0;
      for(var i = 0; i < positionCount; i++){
         var cx = positions[positionIndex++];
         var cy = positions[positionIndex++];
         var x = cx * MO.Lang.Const.DEGREE_RATE;
         var y = cy * MO.Lang.Const.DEGREE_RATE;
         vertexData[vertexIndex++] = Math.sin(x) * Math.cos(y) * scaleTop;
         vertexData[vertexIndex++] = Math.sin(y) * scaleTop;
         vertexData[vertexIndex++] = -Math.cos(x) * Math.cos(y) * scaleTop;
         colors[colorIndex++] = 0xFF;
         colors[colorIndex++] = 0xFF;
         colors[colorIndex++] = 0xFF;
         colors[colorIndex++] = 0xFF;
         coordData[coordIndex++] = cx / 360 + 0.5;
         coordData[coordIndex++] = cy / 180 - 0.5;
      }
      var indexes = boundary.indexes();
      var indexCount = indexes.length;
      var faceCount = indexCount / 3;
      for(var i = 0; i < faceCount; i++){
         var facePosition = 3 * i;
         faceData[faceIndex++] = vertexStart + indexes[facePosition + 2];
         faceData[faceIndex++] = vertexStart + indexes[facePosition + 1];
         faceData[faceIndex++] = vertexStart + indexes[facePosition    ];
      }
      vertexStart += positionCount;
   }
   var layerUpStart = vertexStart;
   scaleTop *= 0.999;
   var vertexStart = 0;
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      var positions = boundary.positions();
      var positionIndex = 0;
      for(var i = 0; i < positionCount; i++){
         var x = positions[positionIndex++] * MO.Lang.Const.DEGREE_RATE;
         var y = positions[positionIndex++] * MO.Lang.Const.DEGREE_RATE;
         vertexData[vertexIndex++] = Math.sin(x) * Math.cos(y) * scaleTop;
         vertexData[vertexIndex++] = Math.sin(y) * scaleTop;
         vertexData[vertexIndex++] = -Math.cos(x) * Math.cos(y) * scaleTop;
         colors[colorIndex++] = 0x22;
         colors[colorIndex++] = 0x66;
         colors[colorIndex++] = 0xFF;
         colors[colorIndex++] = 0xFF;
         coordData[coordIndex++] = 0;
         coordData[coordIndex++] = 0;
      }
      vertexStart += positionCount;
   }
   var layerDownStart = layerUpStart + vertexStart;
   var vertexStart = 0;
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      var positions = boundary.positions();
      var positionIndex = 0;
      for(var i = 0; i < positionCount; i++){
         var x = positions[positionIndex++] * MO.Lang.Const.DEGREE_RATE;
         var y = positions[positionIndex++] * MO.Lang.Const.DEGREE_RATE;
         vertexData[vertexIndex++] = Math.sin(x) * Math.cos(y) * scaleBottom;
         vertexData[vertexIndex++] = Math.sin(y) * scaleBottom;
         vertexData[vertexIndex++] = -Math.cos(x) * Math.cos(y) * scaleBottom;
         colors[colorIndex++] = 0x00;
         colors[colorIndex++] = 0x00;
         colors[colorIndex++] = 0x00;
         colors[colorIndex++] = 0xFF;
         coordData[coordIndex++] = 0;
         coordData[coordIndex++] = 0;
      }
      vertexStart += positionCount;
   }
   var vertexStart = 0;
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      for(var i = 0; i < positionCount; i++){
         if(i == positionCount - 1){
            faceData[faceIndex++] = layerUpStart   + vertexStart + i;
            faceData[faceIndex++] = layerUpStart   + vertexStart;
            faceData[faceIndex++] = layerDownStart + vertexStart + i;
            faceData[faceIndex++] = layerUpStart   + vertexStart;
            faceData[faceIndex++] = layerDownStart + vertexStart;
            faceData[faceIndex++] = layerDownStart + vertexStart + i;
         }else{
            faceData[faceIndex++] = layerUpStart   + vertexStart + i;
            faceData[faceIndex++] = layerUpStart   + vertexStart + i + 1;
            faceData[faceIndex++] = layerDownStart + vertexStart + i;
            faceData[faceIndex++] = layerUpStart   + vertexStart + i + 1;
            faceData[faceIndex++] = layerDownStart + vertexStart + i + 1;
            faceData[faceIndex++] = layerDownStart + vertexStart + i;
         }
      }
      vertexStart += positionCount;
   }
   var renderable = o._faceRenderable = MO.Class.create(MO.FE3dDataBox);
   renderable._name = 'face';
   renderable._shape = o;
   renderable.linkGraphicContext(context);
   renderable.setOptionColor(true);
   renderable.setOptionCoord(true);
   renderable.setVertexCount(vertexTotal * 3);
   renderable.setup();
   renderable.vertexPositionBuffer().upload(vertexData, 4 * 3, vertexSum, true);
   renderable.vertexColorBuffer().upload(colors, 1 * 4, vertexSum, true);
   renderable.vertexCoordBuffer().upload(coordData, 4 * 2, vertexSum, true);
   var indexBuffer = renderable.indexBuffer();
   indexBuffer.setStrideCd(MO.EG3dIndexStride.Uint32);
   indexBuffer.upload(faceData, faceIndex, true);
}
MO.FE3dBoundaryShape3d_buildBorder = function FE3dBoundaryShape3d_buildBorder(){
   var o = this;
   var context = o._graphicContext;
   var scaleTop = o._scaleTop * 1.0008;
   var scaleBottom = o._scaleBottom;
   var boundaries = o._polygons;
   var count = boundaries.count();
   var vertexTotal = o._vertexTotal;
   var indexTotal = o._indexTotal;
   var vertexStart = 0;
   var vertexIndex = 0;
   var faceIndex = 0;
   var vertexData = new Float32Array(3 * vertexTotal * 2);
   var colorIndex = 0;
   var colors = new Uint8Array(4 * vertexTotal * 2);
   var borderIndex = 0;
   var borderData = new Uint32Array(2 * vertexTotal + 2 * vertexTotal);
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      var positions = boundary.positions();
      var positionIndex = 0;
      for(var i = 0; i < positionCount; i++){
         var x = positions[positionIndex++] / 180 * Math.PI;
         var y = positions[positionIndex++] / 180 * Math.PI;
         vertexData[vertexIndex++] = (Math.sin(x) * Math.cos(y)) * scaleTop;
         vertexData[vertexIndex++] = (Math.sin(y)) * scaleTop;
         vertexData[vertexIndex++] = (-Math.cos(x) * Math.cos(y)) * scaleTop;
      }
      for(var i = 0; i < positionCount; i++){
         borderData[borderIndex++] = vertexStart + i;
         if(i == positionCount - 1){
            borderData[borderIndex++] = vertexStart;
         }else{
            borderData[borderIndex++] = vertexStart + i + 1;
         }
      }
      vertexStart += positionCount;
   }
   var layerStart = vertexStart;
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      var positions = boundary.positions();
      var positionIndex = 0;
      for(var i = 0; i < positionCount; i++){
         var x = positions[positionIndex++] / 180 * Math.PI;
         var y = positions[positionIndex++] / 180 * Math.PI;
         vertexData[vertexIndex++] = (Math.sin(x) * Math.cos(y)) * scaleBottom;
         vertexData[vertexIndex++] = (Math.sin(y)) * scaleBottom;
         vertexData[vertexIndex++] = (-Math.cos(x) * Math.cos(y)) * scaleBottom;
      }
      vertexStart += positionCount;
   }
   var vertexStart = 0;
   for(var n = 0; n < count; n++){
      var boundary = boundaries.at(n);
      var positionCount = boundary.positionCount();
      for(var i = 0; i < positionCount; i++){
         borderData[borderIndex++] = vertexStart + i;
         borderData[borderIndex++] = vertexStart + i + layerStart;
      }
      vertexStart += positionCount;
   }
   for(var i = 0; i < vertexTotal; i++){
      colors[colorIndex++] = 0x42;
      colors[colorIndex++] = 0x9A;
      colors[colorIndex++] = 0xF9;
      colors[colorIndex++] = 0xFF;
   }
   for(var i = 0; i < vertexTotal; i++){
      colors[colorIndex++] = 0x00;
      colors[colorIndex++] = 0x00;
      colors[colorIndex++] = 0x00;
      colors[colorIndex++] = 0xFF;
   }
   var renderable = o._borderRenderable = MO.Class.create(MO.FE3dDataBox);
   renderable._name = 'border';
   renderable._shape = o;
   renderable.linkGraphicContext(context);
   renderable.setup();
   renderable.setVertexCount(vertexTotal * 2);
   renderable.vertexPositionBuffer().upload(vertexData, 4 * 3, vertexTotal * 2, true);
   renderable.vertexColorBuffer().upload(colors, 1 * 4, vertexTotal * 2, true);
   var indexBuffer = renderable.indexBuffer();
   indexBuffer.setDrawModeCd(MO.EG3dDrawMode.Lines);
   indexBuffer.setStrideCd(MO.EG3dIndexStride.Uint32);
   indexBuffer.setLineWidth(1);
   indexBuffer.upload(borderData, borderIndex, true);
   renderable.material().info().effectCode = 'eai.map.face';
}
MO.FE3dBoundaryShape3d_build = function FE3dBoundaryShape3d_build(context){
   var o = this;
   var vertexTotal = 0;
   var indexTotal = 0;
   var boundaries = o._polygons;
   var count = boundaries.count();
   for(var i = 0; i < count; i++){
      var boundary = boundaries.at(i);
      vertexTotal += boundary.positionCount();
      indexTotal += boundary.indexes().length;
   }
   o._vertexTotal = vertexTotal;
   o._indexTotal = indexTotal;
   o.buildFace(context);
   o.buildBorder(context);
}
MO.FE3dBoundaryShape3d_dispose = function FE3dBoundaryShape3d_dispose(){
   var o = this;
   o._polygons = MO.Lang.Obejct.dispose(o._polygons);
   o.__base.FObject.dispose.call(o);
}
MO.FE3dBoundBox = function FE3dBoundBox(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o._outline              = MO.Class.create(o, new MO.AGetter('_outline'));
   o._rate                 = 0.2;
   o._vertexPositionBuffer = null;
   o._vertexColorBuffer    = null;
   o.construct             = MO.FE3dBoundBox_construct;
   o.setup                 = MO.FE3dBoundBox_setup;
   o.upload                = MO.FE3dBoundBox_upload;
   return o;
}
MO.FE3dBoundBox_construct = function FE3dBoundBox_construct(){
   var o = this;
   o.__base.FE3dRenderable.construct.call(o);
   o._material = MO.Class.create(MO.FE3dMaterial);
   o._outline = new MO.SOutline3();
}
MO.FE3dBoundBox_setup = function FE3dBoundBox_setup(){
   var o = this;
   var c = o._graphicContext;
   var buffer = o._vertexPositionBuffer = c.createVertexBuffer();
   buffer.setCode('position');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float3);
   o.pushVertexBuffer(buffer);
   var vertexData = new Uint8Array(4 * 32);
   for(var n = 4 * 32 - 1; n >= 0; n--){
      vertexData[n] = 0xFF;
   }
   var buffer = o._vertexColorBuffer = c.createVertexBuffer();
   buffer.setCode('color');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Byte4Normal);
   buffer.upload(vertexData, 1 * 4, 32);
   o.pushVertexBuffer(buffer);
   o._vertexCount = 32;
   var indexData = [
       0,  1,  0,  4,  0, 12,
       3,  2,  3,  5,  3, 13,
       8,  6,  8,  9,  8, 14,
      11,  7, 11, 10, 11, 15,
      20, 16, 20, 21, 20, 24,
      23, 17, 23, 22, 23, 25,
      28, 18, 28, 26, 28, 29,
      31, 19, 31, 27, 31, 30 ];
   var buffer = o._indexBuffer = c.createIndexBuffer();
   buffer.setDrawModeCd(MO.EG3dDrawMode.Lines);
   buffer.setLineWidth(1);
   buffer.upload(indexData, 48);
   o.pushIndexBuffer(buffer);
   o.update();
   var info = o.material().info();
   info.effectCode = 'control';
   info.ambientColor.set(1, 1, 1, 1);
}
MO.FE3dBoundBox_upload = function FE3dBoundBox_upload(){
   var o = this;
   var l = o._outline;
   var a = l.max;
   var ax = a.x;
   var ay = a.y;
   var az = a.z;
   var i = l.min;
   var ix = i.x;
   var iy = i.y;
   var iz = i.z;
   var r = o._rate;
   var cx = (ax - ix) * r;
   var cy = (ay - iy) * r;
   var cz = (az - iz) * r;
   var data = [
      ix,       ay,      iz,
      ix + cx,  ay,      iz,
      ax - cx,  ay,      iz,
      ax,       ay,      iz,
      ix,       ay - cy, iz,
      ax,       ay - cy, iz,
      ix,       iy + cy, iz,
      ax,       iy + cy, iz,
      ix,       iy,      iz,
      ix + cx,  iy,      iz,
      ax - cx,  iy,      iz,
      ax,       iy,      iz,
      ix,       ay,      iz + cz,
      ax,       ay,      iz + cz,
      ix,       iy,      iz + cz,
      ax,       iy,      iz + cz,
      ix,       ay,      az - cz,
      ax,       ay,      az - cz,
      ix,       iy,      az - cz,
      ax,       iy,      az - cz,
      ix,       ay,      az,
      ix + cx,  ay,      az,
      ax - cx,  ay,      az,
      ax,       ay,      az,
      ix,       ay - cy, az,
      ax,       ay - cy, az,
      ix,       iy + cy, az,
      ax,       iy + cy, az,
      ix,       iy,      az,
      ix + cx,  iy,      az,
      ax - cx,  iy,      az,
      ax,       iy,      az];
   o._vertexPositionBuffer.upload(data, 4 * 3, 32);
}
MO.FE3dCube = function FE3dCube(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o.vertexPositionBuffer = null;
   o.vertexColorBuffer    = null;
   o.indexBuffer          = null;
   o.setup                = MO.FE3dCube_setup;
   return o;
}
MO.FE3dCube_setup = function FE3dCube_setup(p){
   var o = this;
   var vp = [
      -1.0,  1.0, -1.0,
       1.0,  1.0, -1.0,
       1.0, -1.0, -1.0,
      -1.0, -1.0, -1.0,
      -1.0,  1.0,  1.0,
       1.0,  1.0,  1.0,
       1.0, -1.0,  1.0,
      -1.0, -1.0,  1.0 ];
   var buffer = o.vertexPositionBuffer = p.createVertexBuffer();
   buffer.upload(vp, 4 * 3, 8);
   o.pushVertexBuffer(buffer);
   var vc = [
      0.0, 1.0, 0.0, 1.0,
      1.0, 0.0, 0.0, 1.0,
      1.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 1.0,
      0.0, 1.0, 0.0, 1.0,
      1.0, 0.0, 1.0, 1.0,
      1.0, 0.0, 1.0, 1.0,
      0.0, 0.0, 1.0, 1.0 ];
   var buffer = o.vertexColorBuffer = p.createVertexBuffer();
   buffer.upload(vc, 4 * 4, 8);
   o.pushVertexBuffer(buffer);
   var id = [
      0, 1, 2, 0, 2, 3,
      1, 5, 6, 1, 6, 2,
      5, 4, 7, 5, 7, 6,
      4, 0, 3, 4, 3, 7,
      0, 4, 5, 0, 5, 1,
      3, 2, 6, 3, 6, 7  ];
   var buffer = context.createIndexBuffer();
   buffer.upload(id, 36);
   o.pushIndexBuffer(buffer);
   var mi = o.material().info();
   mi.effectCode = 'control';
   mi.ambientColor.set(1, 1, 1, 1);
}
MO.FE3dDataBox = function FE3dDataBox(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable, MO.ME3dDynamicRenderable);
   o._optionColor          = MO.Class.register(o, new MO.AGetSet('_optionColor'), true);
   o._optionCoord          = MO.Class.register(o, new MO.AGetSet('_optionCoord'), false);
   o._optionNormal         = MO.Class.register(o, new MO.AGetSet('_optionNormal'), false);
   o._vertexPositionBuffer = MO.Class.register(o, new MO.AGetter('_vertexPositionBuffer'));
   o._vertexColorBuffer    = MO.Class.register(o, new MO.AGetter('_vertexColorBuffer'));
   o._vertexCoordBuffer    = MO.Class.register(o, new MO.AGetter('_vertexCoordBuffer'));
   o._vertexNormalBuffer   = MO.Class.register(o, new MO.AGetter('_vertexNormalBuffer'));
   o._indexBuffer          = MO.Class.register(o, new MO.AGetter('_indexBuffer'));
   o.construct             = MO.FE3dDataBox_construct;
   o.setup                 = MO.FE3dDataBox_setup;
   o.calculateOutline      = MO.FE3dDataBox_calculateOutline;
   o.dispose               = MO.FE3dDataBox_dispose;
   return o;
}
MO.FE3dDataBox_construct = function FE3dDataBox_construct(){
   var o = this;
   o.__base.FE3dRenderable.construct.call(o);
   o.__base.ME3dDynamicRenderable.construct.call(o);
   o._material = MO.Class.create(MO.FE3dMaterial);
}
MO.FE3dDataBox_setup = function FE3dDataBox_setup(vd, vc, id){
   var o = this;
   var c = o._graphicContext;
   var buffer = o._vertexPositionBuffer = c.createVertexBuffer();
   buffer.setCode('position');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float3);
   o.pushVertexBuffer(buffer);
   if(o._optionColor){
      var buffer = o._vertexColorBuffer = c.createVertexBuffer();
      buffer.setCode('color');
      buffer.setFormatCd(MO.EG3dAttributeFormat.Byte4Normal);
      o.pushVertexBuffer(buffer);
   }
   if(o._optionCoord){
      var buffer = o._vertexCoordBuffer = c.createVertexBuffer();
      buffer.setCode('coord');
      buffer.setFormatCd(MO.EG3dAttributeFormat.Float2);
      o.pushVertexBuffer(buffer);
   }
   if(o._optionNormal){
      var buffer = o._vertexNormalBuffer = c.createVertexBuffer();
      buffer.setCode('normal');
      buffer.setFormatCd(MO.EG3dAttributeFormat.Byte4Normal);
      o.pushVertexBuffer(buffer);
   }
   var buffer = o._indexBuffer = c.createIndexBuffer();
   o.pushIndexBuffer(buffer);
   var info = o.material().info();
   info.effectCode = 'control';
   info.ambientColor.set(1, 1, 1, 1);
}
MO.FE3dDataBox_calculateOutline = function FE3dDataBox_calculateOutline(){
   var o = this;
   var outline = o._outline;
   if(outline.isEmpty()){
      outline.setMin();
      var vertexCount = o._vertexCount;
      var data = o._vertexPositionBuffer._data;
      var index = 0;
      for(var i = 0; i < vertexCount; i++){
         var x = data[index++];
         var y = data[index++];
         var z = data[index++];
         outline.mergePoint(x, y, z);
      }
      outline.update();
   }
   return outline;
}
MO.FE3dDataBox_dispose = function FE3dDataBox_dispose(){
   var o = this;
   o._material = MO.Class.create(MO.FE3dMaterial);
   o.__base.ME3dDynamicRenderable.dispose.call(o);
   o.__base.FE3dRenderable.dispose.call(o);
}
MO.FE3dDimensional = function FE3dDimensional(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o._cellSize             = null;
   o._size                 = null;
   o._lineColor            = null;
   o._lineCenterColor      = null;
   o._vertexPositionBuffer = null;
   o._vertexColorBuffer    = null;
   o.construct             = MO.FE3dDimensional_construct;
   o.setup                 = MO.FE3dDimensional_setup;
   return o;
}
MO.FE3dDimensional_construct = function FE3dDimensional_construct(){
   var o = this;
   o.__base.FE3dRenderable.construct.call(o);
   o._material = MO.Class.create(MO.FE3dMaterial);
   o._cellSize = new MO.SSize2();
   o._cellSize.set(1, 1);
   o._size = new MO.SSize2();
   o._size.set(16, 16);
}
MO.FE3dDimensional_setup = function FE3dDimensional_setup(){
   var o = this;
   var context = o._graphicContext;
   var cw = o._cellSize.width;
   var ch = o._cellSize.height;
   var sw = o._size.width;
   var sw2 = sw / 2;
   var sh = o._size.height;
   var sh2 = sh / 2;
   var vc = 2 * ((sw + 2) + (sh + 2));
   var v = 0;
   var vi = 0;
   var vd = new Float32Array(3 * vc);
   var vci = 0;
   var vcd = new Uint8Array(4 * vc);
   var i = 0;
   var it = vc;
   var id = new Uint16Array(it);
   for(var y = 0; y <= sh; y++){
      var r = 1;
      if(y - sh2 == 0){
         r = 0
      }
      vd[v++] = cw * -sw2 * r;
      vd[v++] = 0;
      vd[v++] = ch * (y - sh2);
      vd[v++] = cw * sw2 * r;
      vd[v++] = 0;
      vd[v++] = ch * (y - sh2);
      for(var ci = 0; ci < 8; ci++){
         vcd[vci++] = 255;
      }
      id[i++] = vi++;
      id[i++] = vi++;
   }
   vd[v++] = cw * -sw2;
   vd[v++] = 0;
   vd[v++] = 0;
   vd[v++] = cw * sw2;
   vd[v++] = 0;
   vd[v++] = 0;
   for(var ci = 0; ci < 2; ci++){
      vcd[vci++] = 255;
      vcd[vci++] = 0;
      vcd[vci++] = 0;
      vcd[vci++] = 255;
   }
   id[i++] = vi++;
   id[i++] = vi++;
   for(var x = 0; x <= sw; x++){
      var r = 1;
      if(x - sw2 == 0){
         r = 0
      }
      vd[v++] = cw * (x - sw2);
      vd[v++] = 0;
      vd[v++] = ch * - sh2 * r;
      vd[v++] = cw * (x - sw2);
      vd[v++] = 0;
      vd[v++] = ch * sh2 * r;
      for(var ci = 0; ci < 8; ci++){
         vcd[vci++] = 255;
      }
      id[i++] = vi++;
      id[i++] = vi++;
   }
   vd[v++] = 0;
   vd[v++] = 0;
   vd[v++] = ch * -sh2;
   vd[v++] = 0;
   vd[v++] = 0;
   vd[v++] = ch * sh2;
   for(var ci = 0; ci < 2; ci++){
      vcd[vci++] = 255;
      vcd[vci++] = 0;
      vcd[vci++] = 0;
      vcd[vci++] = 255;
   }
   id[i++] = vi++;
   id[i++] = vi++;
   o._vertexCount = vc;
   var buffer = o._vertexPositionBuffer = context.createVertexBuffer();
   buffer.setCode('position');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float3);
   buffer.upload(vd, 4 * 3, vc);
   o.pushVertexBuffer(buffer);
   var buffer = o._vertexColorBuffer = context.createVertexBuffer();
   buffer.setCode('color');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Byte4Normal);
   buffer.upload(vcd, 4, vc);
   o.pushVertexBuffer(buffer);
   var buffer = context.createIndexBuffer();
   buffer.setDrawModeCd(MO.EG3dDrawMode.Lines);
   buffer.upload(id, it);
   o.pushIndexBuffer(buffer);
   var materialInfo = o.material().info();
   materialInfo.effectCode = 'control';
   materialInfo.ambientColor.set(1, 1, 1, 1);
}
MO.FE3dDynamicMesh = function FE3dDynamicMesh(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o._shape              = MO.Class.register(o, new MO.AGetSet('_shape'));
   o._optionMerge        = true;
   o._vertexPosition     = 0;
   o._vertexTotal        = 0;
   o._indexPosition      = 0;
   o._indexTotal         = 0;
   o._mergeRenderables   = MO.Class.register(o, new MO.AGetter('_mergeRenderables'));
   o.construct           = MO.FE3dDynamicMesh_construct;
   o.mergeCount          = MO.FE3dDynamicMesh_mergeCount;
   o.mergeMaxCount       = MO.FE3dDynamicMesh_mergeMaxCount;
   o.mergeStride         = MO.FE3dDynamicMesh_mergeStride;
   o.findMergeRenderable = MO.FE3dDynamicMesh_findMergeRenderable;
   o.calculateOutline    = MO.FE3dDynamicMesh_calculateOutline;
   o.syncVertexBuffer    = MO.FE3dDynamicMesh_syncVertexBuffer;
   o.mergeRenderable     = MO.FE3dDynamicMesh_mergeRenderable;
   o.mergeVertexBuffer   = MO.FE3dDynamicMesh_mergeVertexBuffer;
   o.mergeIndexBuffer    = MO.FE3dDynamicMesh_mergeIndexBuffer;
   o.build               = MO.FE3dDynamicMesh_build;
   o.dispose             = MO.FE3dDynamicMesh_dispose;
   return o;
}
MO.FE3dDynamicMesh_construct = function FE3dDynamicMesh_construct(){
   var o = this;
   o.__base.FE3dRenderable.construct.call(o);
   o._mergeRenderables = new MO.TObjects();
}
MO.FE3dDynamicMesh_mergeCount = function FE3dDynamicMesh_mergeCount(){
   return this._mergeRenderables.count();
}
MO.FE3dDynamicMesh_mergeMaxCount = function FE3dDynamicMesh_mergeMaxCount(){
   return this._shape.mergeMaxCount();
}
MO.FE3dDynamicMesh_mergeStride = function FE3dDynamicMesh_mergeStride(){
   return this._shape.mergeStride();
}
MO.FE3dDynamicMesh_findMergeRenderable = function FE3dDynamicMesh_findMergeRenderable(index){
   return this._mergeRenderables.get(index);
}
MO.FE3dDynamicMesh_syncVertexBuffer = function FE3dDynamicMesh_syncVertexBuffer(vertexBuffer){
   var o = this;
   var code = vertexBuffer.code();
   var buffer = o._vertexBuffers.get(code);
   if(!buffer){
      var formatCd = vertexBuffer.formatCd();
      var vertexTotal = o._vertexTotal;
      buffer = o._graphicContext.createVertexBuffer();
      buffer.setCode(code);
      buffer.setFormatCd(formatCd);
      buffer.setStride(vertexBuffer.stride());
      var bufferData = null;
      switch(formatCd){
         case MO.EG3dAttributeFormat.Float1:
            bufferData = new Float32Array(1 * vertexTotal);
            break;
         case MO.EG3dAttributeFormat.Float2:
            bufferData = new Float32Array(2 * vertexTotal);
            break;
         case MO.EG3dAttributeFormat.Float3:
            bufferData = new Float32Array(3 * vertexTotal);
            break;
         case MO.EG3dAttributeFormat.Float4:
            bufferData = new Float32Array(4 * vertexTotal);
            break;
         case MO.EG3dAttributeFormat.Byte4:
         case MO.EG3dAttributeFormat.Byte4Normal:
            bufferData = new Uint8Array(4 * vertexTotal);
            break;
         default:
            throw new MO.TError("Unknown code");
      }
      buffer.setData(bufferData);
      o.pushVertexBuffer(buffer);
   }
   return buffer;
}
MO.FE3dDynamicMesh_mergeRenderable = function FE3dDynamicMesh_mergeRenderable(renderable){
   var o = this;
   var context = o._graphicContext;
   var capability = context.capability();
   var vertexCount = renderable.vertexCount();
   var indexBuffer = renderable.indexBuffers().first();
   var indexCount = indexBuffer.count();
   var mergeCount = capability.mergeCount;
   if(o._mergeRenderables.count() >= mergeCount){
      return false;
   }
   var vertexLimit = o._vertexTotal + vertexCount;
   if(capability.optionIndex32){
      if(vertexLimit > MO.Lang.Integer.MAX_UINT32){
         return false;
      }
   }else{
      if(vertexLimit > MO.Lang.Integer.MAX_UINT16){
         return false;
      }
   }
   o._vertexTotal += vertexCount;
   o._indexTotal += indexCount;
   o._mergeRenderables.push(renderable);
   return true;
}
MO.FE3dDynamicMesh_mergeVertexBuffer = function FE3dDynamicMesh_mergeVertexBuffer(vertexBuffer){
   var o = this;
   var position = o._vertexPosition;
   var count = vertexBuffer.count();
   var formatCd = vertexBuffer.formatCd();
   var stride = vertexBuffer.stride();
   var data = vertexBuffer.data();
   var mergeVertexBuffer = o.syncVertexBuffer(vertexBuffer);
   var mergeData = mergeVertexBuffer.data();
   switch(formatCd){
      case MO.EG3dAttributeFormat.Float1:
      case MO.EG3dAttributeFormat.Float2:
      case MO.EG3dAttributeFormat.Float3:
      case MO.EG3dAttributeFormat.Float4:
         MO.Lang.Float.copy(mergeData, (stride / 4) * position, data, 0, (stride / 4) * count);
         break;
      case MO.EG3dAttributeFormat.Byte4:
      case MO.EG3dAttributeFormat.Byte4Normal:
         MO.Lang.Byte.copy(mergeData, stride * position, data, 0, stride * count);
         break;
      default:
         throw new MO.TError("Unknown code");
   }
}
MO.FE3dDynamicMesh_mergeIndexBuffer = function FE3dDynamicMesh_mergeIndexBuffer(indexBuffer){
   var o = this;
   var vertexPosition = o._vertexPosition;
   var indexPosition = o._indexPosition;
   var drawModeCd = indexBuffer.drawModeCd();
   var data = indexBuffer.data();
   var mergeData = o._indexBuffer.data();
   var renderableCount = indexBuffer.count();
   for(var i = 0; i < renderableCount; i++){
      mergeData[indexPosition++] = vertexPosition + data[i]
   }
   o._indexBuffer.setDrawModeCd(drawModeCd);
}
MO.FE3dDynamicMesh_build = function FE3dDynamicMesh_build(){
   var o = this;
   var context = o._graphicContext;
   var capability = context.capability();
   var vertexTotal = o._vertexTotal;
   var indexTotal = o._indexTotal;
   var renderables = o._mergeRenderables;
   var renderableCount = renderables.count();
   var renderable = renderables.first();
   o._material = renderable.material();
   o._textures = renderable.textures();
   var instanceVertexData = new Float32Array(vertexTotal);
   var instanceVertexBuffer = o._instanceVertexBuffer = context.createVertexBuffer();
   instanceVertexBuffer.setCode('instance');
   instanceVertexBuffer.setStride(4);
   instanceVertexBuffer.setFormatCd(MO.EG3dAttributeFormat.Float1);
   instanceVertexBuffer.setData(instanceVertexData);
   o.pushVertexBuffer(instanceVertexBuffer);
   var indexVertexData = new Float32Array(4 * vertexTotal);
   var indexVertexBuffer = o._indexVertexBuffer = context.createVertexBuffer();
   indexVertexBuffer.setCode('index');
   indexVertexBuffer.setStride(16);
   indexVertexBuffer.setFormatCd(MO.EG3dAttributeFormat.Float4);
   indexVertexBuffer.setData(indexVertexData);
   o.pushVertexBuffer(indexVertexBuffer);
   var indexBuffer = o._indexBuffer = context.createIndexBuffer(MO.FE3rIndexBuffer);
   if(capability.optionIndex32){
      indexBuffer.setStrideCd(MO.EG3dIndexStride.Uint32);
      indexBuffer.setData(new Uint32Array(indexTotal));
   }else{
      indexBuffer.setStrideCd(MO.EG3dIndexStride.Uint16);
      indexBuffer.setData(new Uint16Array(indexTotal));
   }
   indexBuffer.setCount(indexTotal);
   o.pushIndexBuffer(indexBuffer);
   var indexVertexPosition = 0;
   for(var n = 0; n < renderableCount; n++){
      var renderable = renderables.at(n);
      var renderableVertexCount = renderable.vertexCount();
      MO.Lang.Float.fill(instanceVertexData, o._vertexPosition, renderableVertexCount, n);
      var index = n + 1;
      var index1 = (index  & 0xFF) / 255;
      var index2 = ((index >> 8) & 0xFF) / 255;
      var index3 = ((index >> 16) & 0xFF) / 255;
      for(var i = 0; i < renderableVertexCount; i++){
         indexVertexData[indexVertexPosition++] = index1;
         indexVertexData[indexVertexPosition++] = index2;
         indexVertexData[indexVertexPosition++] = index3;
         indexVertexData[indexVertexPosition++] = 1;
      }
      var vertexBuffers = renderable.vertexBuffers();
      var vertexBufferCount = vertexBuffers.count();
      for(var i = 0; i < vertexBufferCount; i++){
         var vertexBuffer = vertexBuffers.at(i);
         o.mergeVertexBuffer(vertexBuffer);
      }
      var renderableIndexBuffer = renderable.indexBuffers().first();
      var renderableIndexCount = renderableIndexBuffer.count();
      o.mergeIndexBuffer(renderableIndexBuffer);
      o._vertexPosition += renderableVertexCount;
      o._indexPosition += renderableIndexCount;
   }
   var vertexBuffers = o._vertexBuffers;
   var vertexBufferCount = vertexBuffers.count();
   for(var i = 0; i < vertexBufferCount; i++){
      var vertexBuffer = vertexBuffers.at(i);
      var vertexData = vertexBuffer.data();
      var vertexStride = vertexBuffer.stride();
      vertexBuffer.upload(vertexData, vertexStride, vertexTotal);
      vertexBuffer.setData(null);
   }
   var indexData = indexBuffer.data();
   indexBuffer.upload(indexData, indexTotal);
   indexBuffer.setData(null);
}
MO.FE3dDynamicMesh_calculateOutline = function FE3dDynamicMesh_calculateOutline(){
   var o = this;
   var outline = o._outline;
   if(outline.isEmpty()){
      outline.setMin();
      var renderables = o._mergeRenderables;
      if(renderables){
         var count = renderables.count();
         for(var i = 0; i < count; i++){
            var renderable = renderables.at(i);
            var renderableOutline = renderable.calculateOutline()
            outline.mergeMax(renderableOutline);
         }
      }
   }
   return outline;
}
MO.FE3dDynamicMesh_dispose = function FE3dDynamicMesh_dispose(){
   var o = this;
   o._mergeRenderables = MO.Lang.Object.dispose(o._mergeRenderables);
   o.__base.FE3dRenderable.dispose.call(o);
}
MO.FE3dDynamicShape = function FE3dDynamicShape(o){
   o = MO.Class.inherits(this, o, MO.FE3dDisplay);
   o._mergeMaxCount      = MO.Class.register(o, new MO.AGetter('_mergeMaxCount'));
   o._mergeStride        = MO.Class.register(o, new MO.AGetter('_mergeStride'), 4);
   o._sourceRenderables  = MO.Class.register(o, new MO.AGetter('_sourceRenderables'));
   o._meshes             = MO.Class.register(o, new MO.AGetter('_meshes'));
   o.construct           = MO.FE3dDynamicShape_construct;
   o.createMesh          = MO.FE3dDynamicShape_createMesh;
   o.pushMergeRenderable = MO.FE3dDynamicShape_pushMergeRenderable;
   o.build               = MO.FE3dDynamicShape_build;
   o.dispose             = MO.FE3dDynamicShape_dispose;
   return o;
}
MO.FE3dDynamicShape_construct = function FE3dDynamicShape_construct(){
   var o = this;
   o.__base.FE3dDisplay.construct.call(o);
   o._sourceRenderables = new MO.TObjects();
   o._meshes = new MO.TObjects();
   o._material = MO.Class.create(MO.FE3dMaterial);
}
MO.FE3dDynamicShape_createMesh = function FE3dDynamicShape_createMesh(){
   var o = this;
   var mesh = MO.Class.create(MO.FE3dDynamicMesh);
   mesh._shape = o;
   mesh.linkGraphicContext(o);
   mesh.setShape(o);
   o._meshes.push(mesh);
   o.pushRenderable(mesh);
   return mesh;
}
MO.FE3dDynamicShape_pushMergeRenderable = function FE3dDynamicShape_pushMergeRenderable(renderable){
   this._sourceRenderables.push(renderable);
}
MO.FE3dDynamicShape_build = function FE3dDynamicShape_build(){
   var o = this;
   var renderables = o._sourceRenderables;
   var meshes = o.renderables();
   var count = renderables.count();
   if(count > 0){
      var mesh = o.createMesh();
      for(var i = 0; i < count; i++){
         var renderable = renderables.at(i);
         if(!mesh.mergeRenderable(renderable)){
            mesh = o.createMesh();
            if(!mesh.mergeRenderable(renderable)){
               throw new MO.TError(o, 'Merge renderable failure.');
            }
         }
      }
   }
   var mergeMax = 0;
   var count = meshes.count();
   for(var i = 0; i < count; i++){
      var mesh = meshes.at(i);
      mesh.build();
      mergeMax = Math.max(mergeMax, mesh.mergeCount());
   }
   o._mergeMaxCount = mergeMax;
}
MO.FE3dDynamicShape_dispose = function FE3dDynamicShape_dispose(){
   var o = this;
   o._sourceRenderables = MO.Lang.Object.dispose(o._sourceRenderables);
   o._meshes = MO.Lang.Object.dispose(o._meshes);
   o.__base.FE3dDisplay.dispose.call(o);
}
MO.FE3dFace = function FE3dFace(o){
   o = MO.Class.inherits(this, o, MO.FE3dMeshRenderable, MO.MListener);
   o._ready           = false;
   o._size            = MO.Class.register(o, new MO.AGetter('_size'));
   o._loadListeners   = MO.Class.register(o, new MO.AListener('_loadListeners', MO.EEvent.Load));
   o._statusDirty     = true;
   o.construct        = MO.FE3dFace_construct;
   o.setSize          = MO.FE3dFace_setSize;
   o.setData          = MO.FE3dFace_setData;
   o.findVertexBuffer = MO.FE3dFace_findVertexBuffer;
   o.vertexBuffers    = MO.FE3dFace_vertexBuffers;
   o.findTexture      = MO.FE3dFace_findTexture;
   o.textures         = MO.FE3dFace_textures;
   o.material         = MO.FE3dFace_material;
   o.dirty            = MO.FE3dFace_dirty;
   o.processLoad      = MO.FE3dFace_processLoad;
   o.process          = MO.FE3dFace_process;
   o.dispose          = MO.FE3dFace_dispose;
   return o;
}
MO.FE3dFace_construct = function FE3dFace_construct(){
   var o = this;
   o.__base.FE3dMeshRenderable.construct.call(o);
   o._size = new MO.SSize2();
}
MO.FE3dFace_setSize = function FE3dFace_setSize(width, height){
   var o = this;
   o._size.set(width, height);
   o._matrix.setScale(width, height, 1);
}
MO.FE3dFace_setData = function FE3dFace_setData(data){
   var o = this;
   o._renderable = data;
}
MO.FE3dFace_findVertexBuffer = function FE3dFace_findVertexBuffer(p){
   return this._renderable.findVertexBuffer(p);
}
MO.FE3dFace_vertexBuffers = function FE3dFace_vertexBuffers(){
   return this._renderable.vertexBuffers();
}
MO.FE3dFace_findTexture = function FE3dFace_findTexture(p){
   return this._renderable.findTexture(p);
}
MO.FE3dFace_textures = function FE3dFace_textures(){
   return this._renderable.textures();
}
MO.FE3dFace_material = function FE3dFace_material(){
   return this._renderable.material();
}
MO.FE3dFace_dirty = function FE3dFace_dirty(){
   this._statusDirty = true;
}
MO.FE3dFace_processLoad = function FE3dFace_processLoad(){
   var o = this;
   return true;
}
MO.FE3dFace_process = function FE3dFace_process(){
   var o = this;
   o.__base.FE3dMeshRenderable.process.call(o);
}
MO.FE3dFace_dispose = function FE3dFace_dispose(){
   var o = this;
   o._material = RObject.dispoe(o._material);
   o.__base.FE3dMeshRenderable.dispose.call(o);
}
MO.FE3dFaceData = function FE3dFaceData(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o._ready                = false;
   o._optionCenter         = MO.Class.register(o, new MO.AGetSet('_optionCenter'), false);
   o._size                 = MO.Class.register(o, new MO.AGetter('_size'));
   o._adjustSize           = MO.Class.register(o, new MO.AGetter('_adjustSize'));
   o._vertexPositionBuffer = null;
   o._vertexCoordBuffer    = null;
   o._indexBuffer          = null;
   o._texture              = null;
   o.construct             = MO.FE3dFaceData_construct;
   o.testReady             = MO.FE3dFaceData_testReady;
   o.setup                 = MO.FE3dFaceData_setup;
   o.dispose               = MO.FE3dFaceData_dispose;
   return o;
}
MO.FE3dFaceData_construct = function FE3dFaceData_construct(){
   var o = this;
   o.__base.FE3dRenderable.construct.call(o);
   o._size = new MO.SSize2();
   o._adjustSize = new MO.SSize2();
   o._material = MO.Class.create(MO.FE3dMaterial);
}
MO.FE3dFaceData_testReady = function FE3dFaceData_testReady(){
   return this._ready;
}
MO.FE3dFaceData_setup = function FE3dFaceData_setup(){
   var o = this;
   var context = o._graphicContext;
   o._vertexCount = 4;
   var data = null;
   if(o._optionCenter){
      data = [-1, 1, 0, 1, 1, 0, 1, -1, 0, -1, -1, 0];
   }else{
      data = [0, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0];
   }
   var buffer = o._vertexPositionBuffer = context.createVertexBuffer();
   buffer.setCode('position');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float3);
   buffer.upload(data, 4 * 3, 4);
   var stream = MO.Class.create(MO.FE3sStream);
   stream.setCode('position');
   stream.setDataCount(4);
   stream.setData(data);
   buffer._resource = stream;
   o.pushVertexBuffer(buffer);
   var data = [0, 1, 1, 1, 1, 0, 0, 0];
   var buffer = o._vertexCoordBuffer = context.createVertexBuffer();
   buffer.setCode('coord');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float2);
   buffer.upload(data, 4 * 2, 4);
   var stream = MO.Class.create(MO.FE3sStream);
   stream.setCode('coord');
   stream.setDataCount(4);
   stream.setData(data);
   buffer._resource = stream;
   o.pushVertexBuffer(buffer);
   var data = [0, 1, 2, 0, 2, 3];
   var buffer = o._indexBuffer = context.createIndexBuffer();
   buffer.upload(data, 6);
   var stream = MO.Class.create(MO.FE3sStream);
   stream.setCode('index16');
   stream.setDataCount(2);
   stream.setData(data);
   buffer._resource = stream;
   o.pushIndexBuffer(buffer);
   var texture = o._texture = context.createFlatTexture();
   texture.setOptionFlipY(true);
   texture.setWrapCd(MO.EG3dSamplerFilter.ClampToEdge, MO.EG3dSamplerFilter.ClampToEdge);
   o.pushTexture(texture, 'diffuse');
   o._material.info().optionDouble = true;
   o._material._textures = o._textures;
}
MO.FE3dFaceData_dispose = function FE3dFaceData_dispose(){
   var o = this;
   o._size = MO.Lang.Object.dispose(o._size);
   o._adjustSize = MO.Lang.Object.dispose(o._adjustSize);
   o._texture = MO.Lang.Object.dispose(o._texture);
   o._vertexPositionBuffer = MO.Lang.Object.dispose(o._vertexPositionBuffer);
   o._vertexCoordBuffer = MO.Lang.Object.dispose(o._vertexCoordBuffer);
   o._indexBuffer = MO.Lang.Object.dispose(o._indexBuffer);
   o.__base.FE3dRenderable.dispose.call(o);
}
MO.FE3dLines = function FE3dLines(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o._count                = MO.Class.register(o, new MO.AGetter('_count'));
   o._positionsData        = MO.Class.register(o, new MO.AGetter('_positionsData'));
   o._colorsData           = MO.Class.register(o, new MO.AGetter('_colorsData'));
   o._vertexPositionBuffer = MO.Class.register(o, new MO.AGetter('_vertexPositionBuffer'));
   o._vertexColorBuffer    = MO.Class.register(o, new MO.AGetter('_vertexColorBuffer'));
   o._indexBuffer          = MO.Class.register(o, new MO.AGetter('_indexBuffer'));
   o.construct             = MO.FE3dLines_construct;
   o.setCount              = MO.FE3dLines_setCount;
   o.setup                 = MO.FE3dLines_setup;
   o.upload                = MO.FE3dLines_upload;
   o.dispose               = MO.FE3dLines_dispose;
   return o;
}
MO.FE3dLines_construct = function FE3dLines_construct(){
   var o = this;
   o.__base.FE3dRenderable.construct.call(o);
   o._material = MO.Class.create(MO.FE3dMaterial);
}
MO.FE3dLines_setCount = function FE3dLines_setCount(count){
   var o = this;
   var count = o._count;
   o._positionsData = new Float32Array(3 * 2 * count);
   o._colorsData = new Uint8Array(4 * 2 * count);
}
MO.FE3dLines_setup = function FE3dLines_setup(){
   var o = this;
   var context = o._graphicContext;
   var count = o._count;
   var vertexCount = o._vertexCount = 2 * count;
   var buffer = o._vertexPositionBuffer = context.createVertexBuffer();
   buffer.setCode('position');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float2);
   o.pushVertexBuffer(buffer);
   var buffer = o._vertexColorBuffer = context.createVertexBuffer();
   buffer.setCode('color');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Byte4Normal);
   o.pushVertexBuffer(buffer);
   var indexData = new Uint16Array(vertexCount);
   for(var i = 0; i < vertexCount; i++){
      indexData[vertexCount] = vertexCount;
   }
   var buffer = o._indexBuffer = context.createIndexBuffer();
   buffer.setDrawModeCd(MO.EG3dDrawMode.Lines);
   buffer.upload(indexData, vertexCount);
   o.pushIndexBuffer(buffer);
}
MO.FE3dLines_upload = function FE3dLines_upload(){
   var o = this;
   var vertexCount = o._vertexCount;
   o._vertexPositionBuffer.upload(o._positionsData, 4 * 3, vertexCount);
   o._vertexColorBuffer.upload(o._colorsData, 4 * 1, vertexCount);
}
MO.FE3dLines_dispose = function FE3dLines_dispose(){
   var o = this;
   o._positionsData = null;
   o._colorsData = null;
   o._material = MO.Lang.Object.dispose(o._material);
   o.__base.FE3dRenderable.dispose.call(o);
}
MO.FE3dPolygon = function FE3dPolygon(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   return o;
}
MO.FE3dRectangle = function FE3dRectangle(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o._vertexPositionBuffer = null;
   o._vertexColorBuffer    = null;
   o._indexBuffer          = MO.Class.register(o, new MO.AGetter('_indexBuffer'));
   o.construct             = MO.FE3dRectangle_construct;
   o.setup                 = MO.FE3dRectangle_setup;
   return o;
}
MO.FE3dRectangle_construct = function FE3dRectangle_construct(){
   var o = this;
   o.__base.FE3dRenderable.construct.call(o);
   o._material = MO.Class.create(MO.FE3dMaterial);
}
MO.FE3dRectangle_setup = function FE3dRectangle_setup(){
   var o = this;
   var context = o._graphicContext;
   var vertexPositionData = [-1, 1, 0, 0.5, 0.5, 0, 0.5, -0.5, 0, -0.5, -0.5, 0];
   var buffer = o._vertexPositionBuffer = context.createVertexBuffer();
   buffer.setCode('position');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float3);
   buffer.upload(vertexPositionData, 4 * 2, 4);
   o.pushVertexBuffer(buffer);
   var vertexCoordData = [0, 1, 1, 1, 1, 0, 0, 0];
   var buffer = o._vertexCoordBuffer = context.createVertexBuffer();
   buffer.setCode('coord');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float2);
   buffer.upload(vertexCoordData, 4 * 2, 4);
   o.pushVertexBuffer(buffer);
   var indexData = [0, 1, 2, 0, 2, 3];
   var buffer = o._indexBuffer = context.createIndexBuffer();
   buffer.upload(indexData, 6);
   o.pushIndexBuffer(buffer);
   o._textures = new MO.TDictionary();
   o._material.info().optionDouble = true;
}
MO.FE3dRectangleArea = function FE3dRectangleArea(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o._coordFlip            = MO.Class.register(o, new MO.AGetSet('_coordFlip'), false);
   o._vertexPositionBuffer = null;
   o._vertexColorBuffer    = null;
   o._indexBuffer          = MO.Class.register(o, new MO.AGetter('_indexBuffer'));
   o.construct             = MO.FE3dRectangleArea_construct;
   o.setup                 = MO.FE3dRectangleArea_setup;
   return o;
}
MO.FE3dRectangleArea_construct = function FE3dRectangleArea_construct(){
   var o = this;
   o.__base.FE3dRenderable.construct.call(o);
   o._material = MO.Class.create(MO.FE3dMaterial);
}
MO.FE3dRectangleArea_setup = function FE3dRectangleArea_setup(){
   var o = this;
   var context = o._graphicContext;
   var vertexPositionData = [-1, 1, 1, 1, 1, -1, -1, -1];
   var buffer = o._vertexPositionBuffer = context.createVertexBuffer();
   buffer.setCode('position');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float2);
   buffer.upload(vertexPositionData, 4 * 2, 4);
   o.pushVertexBuffer(buffer);
   var vertexCoordData = null;
   if(o._coordFlip){
      vertexCoordData = [0, 1, 1, 1, 1, 0, 0, 0];
   }else{
      vertexCoordData = [0, 1, 1, 1, 1, 0, 0, 0];
   }
   var buffer = o._vertexCoordBuffer = context.createVertexBuffer();
   buffer.setCode('coord');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float2);
   buffer.upload(vertexCoordData, 4 * 2, 4);
   o.pushVertexBuffer(buffer);
   var indexData = [0, 1, 2, 0, 2, 3];
   var buffer = o._indexBuffer = context.createIndexBuffer();
   buffer.upload(indexData, 6);
   o.pushIndexBuffer(buffer);
   o._material.info().optionDouble = true;
}
MO.FE3dRuler = function FE3dRuler(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o._style                = MO.Class.register(o, new MO.AGetter('_style'));
   o._beginPoint           = MO.Class.register(o, new MO.AGetter('_beginPoint'));
   o._endPoint             = MO.Class.register(o, new MO.AGetter('_endPoint'));
   o._direction            = MO.Class.register(o, new MO.AGetter('_direction'));
   o._directionLine        = null;
   o._vertexPositionBuffer = null;
   o._vertexColorBuffer    = null;
   o._vertexPositionData   = null;
   o._vertexColorData      = null;
   o._indexData            = null;
   o.construct             = MO.FE3dRuler_construct;
   o.setup                 = MO.FE3dRuler_setup;
   o.upload                = MO.FE3dRuler_upload;
   return o;
}
MO.FE3dRuler_construct = function FE3dRuler_construct(){
   var o = this;
   o.__base.FE3dRenderable.construct.call(o);
   o._material = MO.Class.create(MO.FE3dMaterial);
   o._style = new MO.SE3dRulerStyle();
   o._beginPoint = new MO.SPoint3(0, 0, 0);
   o._endPoint = new MO.SPoint3(0, 10, 0);
   o._direction = new MO.SVector3(1, 0, 0);
   o._directionLine = new MO.SVector3();
   o._vertexPositionData = new MO.TArray();
   o._vertexColorData = new MO.TArray();
   o._indexData = new MO.TArray();
}
MO.FE3dRuler_setup = function FE3dRuler_setup(){
   var o = this;
   var context = o._graphicContext;
   var buffer = o._vertexPositionBuffer = context.createVertexBuffer();
   buffer.setCode('position');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float3);
   o.pushVertexBuffer(buffer);
   var buffer = o._vertexColorBuffer = context.createVertexBuffer();
   buffer.setCode('color');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Byte4Normal);
   o.pushVertexBuffer(buffer);
   var indexBuffer = o._indexBuffer = context.createIndexBuffer();
   indexBuffer.setFillModeCd(MO.EG3dFillMode.Line);
   indexBuffer.setLineWidth(1);
   o.pushIndexBuffer(indexBuffer);
   o.upload();
   o.update();
   var info = o.material().info();
   info.effectCode = 'control';
   info.ambientColor.set(1, 1, 1, 1);
}
MO.FE3dRuler_upload = function FE3dRuler_upload(){
   var o = this;
   var vertexCount = 0;
   var style = o._style;
   var positions = o._vertexPositionData;
   positions.clear();
   var colors = o._vertexColorData;
   colors.clear();
   var indexs = o._indexData;
   indexs.clear();
   var beginPoint = o._beginPoint;
   var endPoint = o._endPoint;
   positions.push(beginPoint.x, beginPoint.y, beginPoint.z);
   colors.push(255, 255, 255, 255);
   vertexCount++;
   positions.push(endPoint.x, endPoint.y, endPoint.z);
   colors.push(255, 255, 255, 255);
   vertexCount++;
   indexs.push(0, 1);
   var bothLength = style.bothLength;
   var bothColor = style.bothColor;
   var direction = o._direction;
   var tickBeginPoint = new SPoint3();
   var tickEndPoint = new SPoint3();
   positions.push(beginPoint.x, beginPoint.y, beginPoint.z);
   colors.push(bothColor.red, bothColor.green, bothColor.blue, bothColor.alpha);
   tickEndPoint.x = direction.x * bothLength + beginPoint.x;
   tickEndPoint.y = direction.y * bothLength + beginPoint.y;
   tickEndPoint.z = direction.z * bothLength + beginPoint.z;
   positions.push(tickEndPoint.x, tickEndPoint.y, tickEndPoint.z);
   colors.push(bothColor.red, bothColor.green, bothColor.blue, bothColor.alpha);
   indexs.push(vertexCount, vertexCount + 1);
   vertexCount += 2;
   positions.push(endPoint.x, endPoint.y, endPoint.z);
   colors.push(bothColor.red, bothColor.green, bothColor.blue, bothColor.alpha);
   tickEndPoint.x = direction.x * bothLength + endPoint.x;
   tickEndPoint.y = direction.y * bothLength + endPoint.y;
   tickEndPoint.z = direction.z * bothLength + endPoint.z;
   positions.push(tickEndPoint.x, tickEndPoint.y, tickEndPoint.z);
   colors.push(bothColor.red, bothColor.green, bothColor.blue, bothColor.alpha);
   indexs.push(vertexCount, vertexCount + 1);
   vertexCount += 2;
   var lineDirection = o._directionLine.direction(beginPoint, o._endPoint);
   var length = lineDirection.length();
   lineDirection.normalize();
   var precisions = style.precisions;
   var count = precisions.count();
   for(var n = 0; n < count; n++){
      var precision = precisions.at(n);
      var tickInterval = precision.interval;
      var tickLength = precision.length;
      var tickColor = precision.color;
      for(var i = tickInterval; i < length; i += tickInterval){
         tickBeginPoint.x = lineDirection.x * i + beginPoint.x;
         tickBeginPoint.y = lineDirection.y * i + beginPoint.y;
         tickBeginPoint.z = lineDirection.z * i + beginPoint.z;
         positions.push(tickBeginPoint.x, tickBeginPoint.y, tickBeginPoint.z);
         colors.push(tickColor.red, tickColor.green, tickColor.blue, tickColor.alpha);
         tickEndPoint.x = direction.x * tickLength + tickBeginPoint.x;
         tickEndPoint.y = direction.y * tickLength + tickBeginPoint.y;
         tickEndPoint.z = direction.z * tickLength + tickBeginPoint.z;
         positions.push(tickEndPoint.x, tickEndPoint.y, tickEndPoint.z);
         colors.push(tickColor.red, tickColor.green, tickColor.blue, tickColor.alpha);
         indexs.push(vertexCount, vertexCount + 1);
         vertexCount += 2;
      }
   }
   o._vertexPositionBuffer.upload(positions.memory(), 4 * 3, vertexCount);
   o._vertexColorBuffer.upload(colors.memory(), 1 * 4, vertexCount);
   indexBuffer.upload(indexs.memory(), indexs.length());
}
MO.FE3dRulerBox = function FE3dRulerBox(o){
   o = MO.Class.inherits(this, o, MO.FE3dSprite);
   o._outline  = MO.Class.register(o, new MO.AGetter('_outline'));
   o._style    = MO.Class.register(o, new MO.AGetter('_style'));
   o._rulerX   = null;
   o._rulerY   = null;
   o._rulerZ   = null;
   o.construct = MO.FE3dRulerBox_construct;
   o.setup     = MO.FE3dRulerBox_setup;
   o.upload    = MO.FE3dRulerBox_upload;
   return o;
}
MO.FE3dRulerBox_construct = function FE3dRulerBox_construct(){
   var o = this;
   o.__base.FE3dSprite.construct.call(o);
   o._material = MO.Class.create(MO.FE3dMaterial);
   o._style = new SE3dRulerStyle();
   o._outline = new MO.SOutline3();
   var ruler = o._rulerX = MO.Class.create(MO.FE3dRuler);
   o.pushRenderable(ruler);
   var ruler = o._rulerY = MO.Class.create(MO.FE3dRuler);
   o.pushRenderable(ruler);
   var ruler = o._rulerZ = MO.Class.create(MO.FE3dRuler);
   o.pushRenderable(ruler);
}
MO.FE3dRulerBox_setup = function FE3dRulerBox_setup(){
   var o = this;
   var context = o._graphicContext;
   var style = o._style;
   o.matrix().setScaleAll(0.1);
   o.matrix().update();
   var outline = o._outline;
   var min = outline.min;
   var max = outline.max;
   var ruler = o._rulerX;
   ruler.linkGraphicContext(context);
   ruler.style().assign(style);
   ruler.beginPoint().assign(min);
   ruler.endPoint().set(max.x, min.y, min.z);
   ruler.direction().set(0, 0, -1);
   ruler.setup();
   var ruler = o._rulerY;
   ruler.linkGraphicContext(context);
   ruler.style().assign(style);
   ruler.beginPoint().assign(min);
   ruler.endPoint().set(min.x, max.y, min.z);
   ruler.direction().set(-1, 0, 0);
   ruler.setup();
   var ruler = o._rulerZ;
   ruler.linkGraphicContext(context);
   ruler.style().assign(style);
   ruler.beginPoint().assign(min);
   ruler.endPoint().set(min.x, min.y, max.z);
   ruler.direction().set(-1, 0, 0);
   ruler.setup();
}
MO.FE3dRulerBox_upload = function FE3dRulerBox_upload(){
   var o = this;
   o._rulerX.upload();
   o._rulerY.upload();
   o._rulerZ.upload();
}
MO.FE3dShape = function FE3dShape(o){
   o = MO.Class.inherits(this, o, MO.FE3dFace);
   o._ready    = true;
   o.construct = MO.FE3dShape_construct;
   o.dispose   = MO.FE3dShape_dispose;
   return o;
}
MO.FE3dShape_construct = function FE3dShape_construct(){
   var o = this;
   o.__base.FE3dFace.construct.call(o);
}
MO.FE3dShape_dispose = function FE3dShape_dispose(){
   var o = this;
   o.__base.FE3dFace.dispose.call(o);
}
MO.FE3dShapeConsole = function FE3dShapeConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd  = MO.EScope.Local;
   o._bitmaps  = MO.Class.register(o, new MO.AGetter('_bitmaps'));
   o.construct = MO.FE3dShapeConsole_construct;
   o.load      = MO.FE3dShapeConsole_load;
   o.loadUrl   = MO.FE3dShapeConsole_loadUrl;
   return o;
}
MO.FE3dShapeConsole_construct = function FE3dShapeConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._bitmaps = new MO.TDictionary();
}
MO.FE3dShapeConsole_load = function FE3dShapeConsole_load(context, guid, code){
   var o = this;
   var flag = guid + '|' + code;
   var bitmap = o._bitmaps.get(flag);
   if(bitmap){
      return bitmap;
   }
   var url = MO.Window.Browser.hostPath(o._dataUrl + '?guid=' + guid + '&code=' + code);
   MO.Logger.info(o, 'Load bitmap. (url={1})', url);
   if(code == 'environment'){
      bitmap = MO.Class.create(MO.FE3rBitmapCubePack);
   }else{
      bitmap = MO.Class.create(MO.FE3rBitmapFlatPack);
   }
   bitmap.linkGraphicContext(context);
   bitmap.loadUrl(url);
   o._bitmaps.set(flag, bitmap);
   return bitmap;
}
MO.FE3dShapeConsole_loadUrl = function FE3dShapeConsole_loadUrl(context, url){
   var o = this;
   var bitmap = o._bitmaps.get(url);
   if(bitmap){
      return bitmap;
   }
   var loadUrl = MO.Window.Browser.contentPath(url);
   MO.Logger.info(o, 'Load bitmap from url. (url={1})', loadUrl);
   var bitmap = MO.Class.create(MO.FE3dBitmapData);
   bitmap.linkGraphicContext(context);
   bitmap.setup();
   bitmap.loadUrl(url);
   o._bitmaps.set(url, bitmap);
   return bitmap;
}
MO.FE3dShapeData = function FE3dShapeData(o){
   o = MO.Class.inherits(this, o, MO.FE3dFaceData);
   o._graphic  = null;
   o._texture  = null;
   o.construct = MO.FE3dShapeData_construct;
   o.beginDraw = MO.FE3dShapeData_beginDraw;
   o.endDraw   = MO.FE3dShapeData_endDraw;
   o.dispose   = MO.FE3dShapeData_dispose;
   return o;
}
MO.FE3dShapeData_construct = function FE3dShapeData_construct(){
   var o = this;
   o.__base.FE3dFaceData.construct.call(o);
}
MO.FE3dShapeData_beginDraw = function FE3dShapeData_beginDraw(){
   var o = this;
   var size = o._size;
   var adjustWidth = MO.Lang.Integer.pow2(size.width);
   var adjustHeight = MO.Lang.Integer.pow2(size.height);
   o._adjustSize.set(adjustWidth, adjustHeight);
   var canvasConsole = MO.Console.find(MO.FE2dCanvasConsole);
   var canvas = o._canvas = canvasConsole.allocBySize(adjustWidth, adjustHeight);
   var graphic = o._graphic = canvas.graphicContext();
   return graphic;
}
MO.FE3dShapeData_endDraw = function FE3dShapeData_endDraw(){
   var o = this;
   var graphic = o._graphic;
   o._texture.upload(o._canvas);
   var canvasConsole = MO.Console.find(MO.FE2dCanvasConsole);
   canvasConsole.free(o._canvas);
   o._canvas = null;
   o._graphic = null;
   o._ready = true;
}
MO.FE3dShapeData_dispose = function FE3dShapeData_dispose(){
   var o = this;
   o.__base.FE3dFaceData.dispose.call(o);
}
MO.FE3dSphere = function FE3dSphere(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o._outline              = null;
   o._drawModeCd           = MO.Class.register(o, new MO.AGetSet('_drawModeCd'), MO.EG3dDrawMode.Triangles);
   o._splitCount           = MO.Class.register(o, new MO.AGetSet('_splitCount'), 8);
   o._vertexPositionBuffer = null;
   o._vertexNormalBuffer   = null;
   o._vertexCoordBuffer    = null;
   o._indexBuffer          = MO.Class.register(o, new MO.AGetter('_indexBuffer'));
   o.construct             = MO.FE3dSphere_construct;
   o.setup                 = MO.FE3dSphere_setup;
   return o;
}
MO.FE3dSphere_construct = function FE3dSphere_construct(){
   var o = this;
   o.__base.FE3dRenderable.construct.call(o);
   o._material = MO.Class.create(MO.FE3dMaterial);
   o._outline = new MO.SOutline3();
}
MO.FE3dSphere_setup = function FE3dSphere_setup(){
   var o = this;
   var context = o._graphicContext;
   var countAngle = o._splitCount * 2;
   var countZ = o._splitCount;
   var vertexCount = o._vertexCount = (countZ + 1) * (countAngle + 1);
   var positionIndex = 0;;
   var positionData = new Float32Array(3 * vertexCount);
   var normalIndex = 0;;
   var normalData = new Float32Array(3 * vertexCount);
   var coordIndex = 0;;
   var coordData = new Float32Array(2 * vertexCount);
   var stepAngle = Math.PI * 2 / countAngle;
   var stepZ = Math.PI / countZ;
   for(var rz = 0; rz <= countZ; rz++){
      for(var r = 0; r <= countAngle; r++){
         var radius = stepAngle * r - Math.PI;
         var radiusZ = stepZ * rz - MO.Const.PI_2;
         var x = Math.sin(radius) * Math.cos(radiusZ);
         var y = Math.sin(radiusZ);
         var z = -Math.cos(radius) * Math.cos(radiusZ);
         positionData[positionIndex++] = x;
         positionData[positionIndex++] = y;
         positionData[positionIndex++] = z;
         normalData[normalIndex++] = x;
         normalData[normalIndex++] = y;
         normalData[normalIndex++] = z;
         coordData[coordIndex++] = radius / Math.PI / 2 + 0.5;
         coordData[coordIndex++] = radiusZ / Math.PI - 0.5;
      }
   }
   var buffer = o._vertexPositionBuffer = context.createVertexBuffer();
   buffer.setCode('position');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float3);
   buffer.upload(positionData, 4 * 3, vertexCount);
   o.pushVertexBuffer(buffer);
   var buffer = o._vertexNormalBuffer = context.createVertexBuffer();
   buffer.setCode('normal');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float3);
   buffer.upload(normalData, 4 * 3, vertexCount);
   o.pushVertexBuffer(buffer);
   var buffer = o._vertexCoordBuffer = context.createVertexBuffer();
   buffer.setCode('coord');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float2);
   buffer.upload(coordData, 4 * 2, vertexCount);
   o.pushVertexBuffer(buffer);
   var drawModeCd = o._drawModeCd;
   var indexes = new MO.TArray();
   for(var rz = 0; rz < countZ; rz++){
      for(var r = 0; r < countAngle; r++){
         var i = (countAngle + 1) * rz;
         var ci = i + r;
         var ni = i + r + (countAngle + 1);
         if(drawModeCd == MO.EG3dDrawMode.Lines){
            indexes.push(ci, ni, ni, ci + 1, ci + 1, ci);
            indexes.push(ni, ni + 1, ni + 1, ci + 1, ci + 1, ni);
         }else{
            indexes.push(ci, ni, ci + 1);
            indexes.push(ni, ni + 1, ci + 1);
         }
      }
   }
   var buffer = o._indexBuffer = context.createIndexBuffer();
   buffer.setDrawModeCd(drawModeCd);
   var indexLength = indexes.length();
   var indexMemory = indexes.memory();
   if(indexLength > 65535){
      buffer.setStrideCd(MO.EG3dIndexStride.Uint32);
      buffer.upload(new Uint32Array(indexMemory), indexLength);
   }else{
      buffer.upload(new Uint16Array(indexMemory), indexLength);
   }
   o.pushIndexBuffer(buffer);
   o.update();
   var info = o.material().info();
   info.ambientColor.set(0.2, 0.2, 0.2, 1);
   info.diffuseColor.set(0.8, 0.8, 0.8, 1);
   info.specularColor.set(0.8, 0.8, 0.8, 1);
   info.specularLevel = 64;
}
MO.FE3dVideo = function FE3dVideo(o){
   o = MO.Class.inherits(this, o, MO.FE3dFace);
   o.construct = MO.FE3dVideo_construct;
   o.testReady = MO.FE3dVideo_testReady;
   o.loadUrl   = MO.FE3dVideo_loadUrl;
   o.dispose   = MO.FE3dVideo_dispose;
   return o;
}
MO.FE3dVideo_construct = function FE3dVideo_construct(){
   var o = this;
   o.__base.FE3dFace.construct.call(o);
}
MO.FE3dVideo_testReady = function FE3dVideo_testReady(){
   var o = this;
   if(!o._ready){
      var renderable = o._renderable;
      if(renderable){
         o._ready = renderable.testReady();
         if(o._ready){
            var event = new MO.SEvent(o);
            o.processLoadListener(event);
            event.dispose();
         }
         o._materialReference = renderable;
      }
   }
   return o._ready;
}
MO.FE3dVideo_loadUrl = function FE3dVideo_loadUrl(url){
   var o = this;
   var context = o._graphicContext;
   o._renderable = MO.Console.find(MO.FE3dVideoConsole).loadUrl(context, url);
   o._ready = false;
}
MO.FE3dVideo_dispose = function FE3dVideo_dispose(){
   var o = this;
   o.__base.FE3dFace.dispose.call(o);
}
MO.FE3dVideoConsole = function FE3dVideoConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd  = MO.EScope.Local;
   o._videos   = null;
   o._dataUrl  = '/cloud.resource.bitmap.wv'
   o.construct = MO.FE3dVideoConsole_construct;
   o.videos    = MO.FE3dVideoConsole_videos;
   o.load      = MO.FE3dVideoConsole_load;
   o.loadUrl   = MO.FE3dVideoConsole_loadUrl;
   return o;
}
MO.FE3dVideoConsole_construct = function FE3dVideoConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._videos = new MO.TDictionary();
}
MO.FE3dVideoConsole_videos = function FE3dVideoConsole_videos(){
   return this._videos;
}
MO.FE3dVideoConsole_load = function FE3dVideoConsole_load(context, guid, code){
   var o = this;
   var flag = guid + '|' + code;
   var bitmap = o._videos.get(flag);
   if(bitmap){
      return bitmap;
   }
   var url = MO.Window.Browser.hostPath(o._dataUrl + '?guid=' + guid + '&code=' + code);
   MO.Logger.info(o, 'Load bitmap. (url={1})', url);
   if(code == 'environment'){
      bitmap = MO.Class.create(MO.FE3rBitmapCubePack);
   }else{
      bitmap = MO.Class.create(MO.FE3rBitmapFlatPack);
   }
   bitmap.linkGraphicContext(context);
   bitmap.loadUrl(url);
   o._videos.set(flag, bitmap);
   return bitmap;
}
MO.FE3dVideoConsole_loadUrl = function FE3dVideoConsole_loadUrl(context, url){
   var o = this;
   var bitmap = o._videos.get(url);
   if(bitmap){
      return bitmap;
   }
   var loadUrl = MO.Window.Browser.contentPath(url);
   MO.Logger.info(o, 'Load bitmap from url. (url={1})', loadUrl);
   var bitmap = MO.Class.create(MO.FE3dVideoData);
   bitmap.linkGraphicContext(context);
   bitmap.setup();
   bitmap.loadUrl(url);
   o._videos.set(url, bitmap);
   return bitmap;
}
MO.FE3dVideoData = function FE3dVideoData(o){
   o = MO.Class.inherits(this, o, MO.FE3dFaceData);
   o._loaded       = false;
   o._ready        = false;
   o._hVideo       = MO.Class.register(o, new MO.AGetSet('_hVideo'));
   o.ohVideoLoad   = MO.FE3dVideoData_ohVideoLoad;
   o.ohVideoLoaded = MO.FE3dVideoData_ohVideoLoaded;
   o.ohVideoEnded  = MO.FE3dVideoData_ohVideoEnded;
   o.construct     = MO.FE3dVideoData_construct;
   o.loadUrl       = MO.FE3dVideoData_loadUrl;
   o.setLoop       = MO.FE3dVideoData_setLoop;
   o.testReady     = MO.FE3dVideoData_testReady;
   o.play          = MO.FE3dVideoData_play;
   o.process       = MO.FE3dVideoData_process;
   o.dispose       = MO.FE3dVideoData_dispose;
   return o;
}
MO.FE3dVideoData_ohVideoLoad = function FE3dVideoData_ohVideoLoad(event){
   var o = this.__linker;
   var hVideo = o._hVideo;
   o._loaded  = true;
}
MO.FE3dVideoData_ohVideoLoaded = function FE3dVideoData_ohVideoLoaded(event){
   var o = this.__linker;
   var hVideo = o._hVideo;
   o._ready = true;
}
MO.FE3dVideoData_ohVideoEnded = function FE3dVideoData_ohVideoEnded(){
   var o = this.__linker;
   var hVideo = o._hVideo;
}
MO.FE3dVideoData_construct = function FE3dVideoData_construct(){
   var o = this;
   o.__base.FE3dFaceData.construct.call(o);
   o._material.info().effectCode = 'video';
}
MO.FE3dVideoData_loadUrl = function FE3dVideoData_loadUrl(uri, auto){
   var o = this;
   var url = MO.Console.find(MO.FEnvironmentConsole).parse(uri);
   var video = o._hVideo = document.createElement('VIDEO');
   video.__linker = o;
   video.autoplay = auto;
   video.src = url;
   video.addEventListener('canplay', o.ohVideoLoad);
   video.addEventListener('canplaythrough', o.ohVideoLoaded);
   video.load();
   o._ready = false;
}
MO.FE3dVideoData_setLoop = function FE3dVideoData_setLoop(flag){
   this._hVideo.loop = flag;
}
MO.FE3dVideoData_play = function FE3dVideoData_play(flag){
   var o = this;
   var video = o._hVideo;
   if(flag){
      video.play();
   }else{
      video.pause();
   }
}
MO.FE3dVideoData_process = function FE3dVideoData_process(){
   var o = this;
   if(o._loaded){
      o._texture.uploadElement(o._hVideo);
      o._ready = true;
   }
}
MO.FE3dVideoData_dispose = function FE3dVideoData_dispose(){
   var o = this;
   o._hVideo = null;
   o.__base.FE3dFaceData.dispose.call(o);
}
MO.FE3dFireworksParticle = function FE3dFireworksParticle(o){
   o = MO.Class.inherits(this, o, MO.FE3dParticle);
   o._angle                = MO.Class.register(o, new MO.AGetSet('_angle'), 0);
   o._itemCount            = MO.Class.register(o, new MO.AGetSet('_itemCount'), 0);
   o._itemDelay            = MO.Class.register(o, new MO.AGetSet('_itemDelay'), 0);
   o._itemColor            = MO.Class.register(o, new MO.AGetter('_itemColor'));
   o._itemPosition         = MO.Class.register(o, new MO.AGetter('_itemPosition'));
   o._itemRotation         = MO.Class.register(o, new MO.AGetter('_itemRotation'));
   o._itemScale            = MO.Class.register(o, new MO.AGetter('_itemScale'));
   o._itemSpeed            = MO.Class.register(o, new MO.AGetSet('_itemSpeed'), 0);
   o._itemAcceleration     = MO.Class.register(o, new MO.AGetSet('_itemAcceleration'));
   o._itemAttenuation      = MO.Class.register(o, new MO.AGetSet('_itemAttenuation'), 0);
   o._itemSplittingNumber  = MO.Class.register(o, new MO.AGetSet('_itemSplittingNumber'), 0);
   o._vertexPositionBuffer = null;
   o._vertexCoordBuffer    = null;
   o._indexBuffer          = null;
   o.construct             = MO.FE3dFireworksParticle_construct;
   o.setup                 = MO.FE3dFireworksParticle_setup;
   o.testInRange           = MO.FE3dFireworksParticle_testInRange;
   o.start                 = MO.FE3dFireworksParticle_start;
   o.dispose               = MO.FE3dFireworksParticle_dispose;
   return o;
}
MO.FE3dFireworksParticle_construct = function FE3dFireworksParticle_construct(){
   var o = this;
   o.__base.FE3dParticle.construct.call(o);
   o._itemColor = new MO.SColor4(1, 1, 1, 1);
   o._itemPosition = new MO.SPoint3(0, 0, 0);
   o._itemRotation = new MO.SVector3(0, 0, 0);
   o._itemScale = new MO.SVector3(1, 1, 1);
   o._itemAcceleration = new MO.SVector3(0, 0, 0);
}
MO.FE3dFireworksParticle_setup = function FE3dFireworksParticle_setup(){
   var o = this;
   o.__base.FE3dParticle.setup.call(o);
}
MO.FE3dFireworksParticle_testInRange = function FE3dFireworksParticle_testInRange(x, y){
   var o = this;
   var position = o._position;
   var idx = parseInt((x + 17) / 20 * 220);
   var idy = parseInt((y + 3) * 6);
   var index = (360 * (60 - idy) + idx) * 4;
   var data = o._data.data;
   if(index >= 0 && index < data.length){
      var r = data[index    ];
      var g = data[index + 1];
      var b = data[index + 2];
      var a = data[index + 3];
   }
   return r > 0;
}
MO.FE3dFireworksParticle_start = function FE3dFireworksParticle_start(){
   var o = this;
   var particleConsole = MO.Console.find(MO.FE3dParticleConsole);
   var count = o._itemCount;
   var angleSingle = Math.PI * 2 / count;
   for(var i = 0; i < count; i++){
      var angle = o._angle + angleSingle * i;
      var item = particleConsole.itemAlloc(MO.FE3dFireworksParticleItem);
      item.setParticle(o);
      item.setDelay(o._itemDelay);
      item.position().assign(o._itemPosition);
      item.direction().set(Math.sin(angle), Math.cos(angle), 0);
      item.scale().assign(o._itemScale);
      item.color().assign(o._itemColor);
      item.setSpeed(o._itemSpeed);
      item.acceleration().assign(o._itemAcceleration);
      item.setAttenuation(o._itemAttenuation);
      item.setSplittingDistance(3 + Math.random());
      item.setSplittingNumber(o._itemSplittingNumber);
      item.start();
      o.pushItem(item);
   }
}
MO.FE3dFireworksParticle_dispose = function FE3dFireworksParticle_dispose(){
   var o = this;
   o._itemColor = MO.Lang.Object.dispose(o._itemColor);
   o._itemPosition = MO.Lang.Object.dispose(o._itemPosition);
   o._itemRotation = MO.Lang.Object.dispose(o._itemRotation);
   o._itemScale = MO.Lang.Object.dispose(o._itemScale);
   o._itemAcceleration = MO.Lang.Object.dispose(o._itemAcceleration);
   o.__base.FE3dParticle.dispose.call(o);
}
MO.FE3dFireworksParticleItem = function FE3dFireworksParticleItem(o){
   o = MO.Class.inherits(this, o, MO.FE3dParticleItem);
   o._priorPosition     = MO.Class.register(o, new MO.AGetter('_priorPosition'));
   o._direction         = MO.Class.register(o, new MO.AGetter('_direction'));
   o._speed             = MO.Class.register(o, new MO.AGetSet('_speed'), 0);
   o._acceleration      = MO.Class.register(o, new MO.AGetter('_acceleration'));
   o._attenuation       = MO.Class.register(o, new MO.AGetSet('_attenuation'), 0);
   o._splittingDistance = MO.Class.register(o, new MO.AGetSet('_splittingDistance'), 1);
   o._splittingNumber   = MO.Class.register(o, new MO.AGetSet('_splittingNumber'), 0);
   o._currentDistance   = null;
   o._currentSpeed      = null;
   o._currentDirection  = null;
   o._statusInRange = false;
   o._storeSpeed      = null;
   o.construct          = MO.FE3dFireworksParticleItem_construct;
   o.start              = MO.FE3dFireworksParticleItem_start;
   o.processSplit       = MO.FE3dFireworksParticleItem_processSplit;
   o.processFrame       = MO.FE3dFireworksParticleItem_processFrame;
   o.dispose            = MO.FE3dFireworksParticleItem_dispose;
   return o;
}
MO.FE3dFireworksParticleItem_construct = function FE3dFireworksParticleItem_construct(){
   var o = this;
   o.__base.FE3dParticleItem.construct.call(o);
   o._priorPosition = new MO.SPoint3();
   o._direction = new MO.SVector3();
   o._acceleration = new MO.SVector3();
   o._currentSpeed = new MO.SVector3();
   o._currentDirection = new MO.SVector3();
   o._storeSpeed = new MO.SVector3();
}
MO.FE3dFireworksParticleItem_start = function FE3dFireworksParticleItem_start(){
   var o = this;
   o.__base.FE3dParticleItem.start.call(o);
   o._priorPosition.assign(o._position);
   o._currentDistance = 0;
   o._currentAlpha = 1;
   var direction = o._direction;
   var speed = o._speed;
   o._currentSpeed.x = direction.x * speed;
   o._currentSpeed.y = direction.y * speed;
   o._currentSpeed.z = direction.z * speed;
}
MO.FE3dFireworksParticleItem_processSplit = function FE3dFireworksParticleItem_processSplit(){
   var o = this;
   var particle = o._particle;
   var particleConsole = MO.Console.find(MO.FE3dParticleConsole);
   for(var j = 0; j < 4; j++){
      var count = 16;
      var angleSingle = Math.PI * 2 / count;
      for(var i = 0; i < count; i++){
         var angle = angleSingle * i;
         var item = particleConsole.itemAlloc(MO.FE3dFireworksParticleItem);
         item.setSplittingNumber(0);
         item.setParticle(particle);
         item.direction().set(Math.sin(angle), Math.cos(angle), 0);
         item.position().assign(position);
         item.color().assign(o._color);
         item.scale().setAll(0.2);
         item.setDelay(0.02 * j);
         item.setSpeed(o._speed);
         item.acceleration().assign(o._acceleration);
         item.setAttenuation(1);
         item.start();
         particle.pushItem(item);
      }
   }
}
MO.FE3dFireworksParticleItem_processFrame = function FE3dFireworksParticleItem_processFrame(second){
   var o = this;
   var priorPosition = o._priorPosition;
   priorPosition.assign(o._position);
   var position = o._position;
   var inRange = o._particle.testInRange(position.x, position.y);
   if(o._statusInRange != inRange){
      if(inRange){
         o._storeSpeed.assign(o._currentSpeed);
         o._currentSpeed.setAll(0.01);
         o._color.set(1, 0, 0, 1);
      }else{
         o._color.set(1, 1, 1, 1);
         o._currentSpeed.assign(o._storeSpeed);
      }
      o._statusInRange = inRange;
   }
   var speed = o._currentSpeed;
   var distanceX = speed.x * second;
   var distanceY = speed.y * second;
   var distanceZ = speed.z * second;
   var position = o._position;
   position.x += distanceX;
   position.y += distanceY;
   position.z += distanceZ;
   var direction = o._direction;
   direction.x = position.x - priorPosition.x;
   direction.y = position.y - priorPosition.y;
   direction.z = position.z - priorPosition.z;
   o._currentDistance += direction.length();
   direction.normalize();
   var angle = Math.acos(direction.x);
   if(direction.y > 0){
      o._rotation.z = angle;
   }else{
      o._rotation.z = Math.PI * 2 - angle;
   }
   var acceleration = o._acceleration;
   speed.x += acceleration.x * second;
   speed.y += acceleration.y * second;
   speed.z += acceleration.z * second;
   var attenuation = o._attenuation * second;
   if(attenuation > o._currentAlpha){
      o._currentAlpha = 0;
      o._currentFinish = true;
   }else{
      o._currentAlpha -= attenuation;
   }
   if((o._splittingNumber > 0) && (o._currentDistance > o._splittingDistance)){
      o.processSplit();
      o._splittingNumber--;
      if(o._splittingNumber == 0){
         o._currentFinish = true;
      }
   }
   o.dirty();
}
MO.FE3dFireworksParticleItem_dispose = function FE3dFireworksParticleItem_dispose(){
   var o = this;
   o._priorPosition = MO.Lang.Object.dispose(o._priorPosition);
   o._direction = MO.Lang.Object.dispose(o._direction);
   o.__base.FE3dParticleItem.dispose.call(o);
}
MO.FE3dParticle = function FE3dParticle(o){
   o = MO.Class.inherits(this, o, MO.FE3dRenderable);
   o._items                = MO.Class.register(o, new MO.AGetter('_items'));
   o._vertexPositionBuffer = null;
   o._vertexCoordBuffer    = null;
   o._vertexColorBuffer    = null;
   o._indexBuffer          = null;
   o.construct             = MO.FE3dParticle_construct;
   o.setup                 = MO.FE3dParticle_setup;
   o.testReady             = MO.FE3dParticle_testReady;
   o.findTexture           = MO.FE3dParticle_findTexture;
   o.textures              = MO.FE3dParticle_textures;
   o.material              = MO.FE3dParticle_material;
   o.setSize               = MO.FE3dParticle_setSize;
   o.setData               = MO.FE3dParticle_setData;
   o.loadUrl               = MO.FE3dParticle_loadUrl;
   o.createItem            = MO.FE3dParticle_createItem;
   o.pushItem              = MO.FE3dParticle_pushItem;
   o.process               = MO.FE3dParticle_process;
   o.upload                = MO.FE3dParticle_upload;
   o.dispose               = MO.FE3dParticle_dispose;
   return o;
}
MO.FE3dParticle_construct = function FE3dParticle_construct(){
   var o = this;
   o.__base.FE3dRenderable.construct.call(o);
   o._items = new MO.TLooper();
}
MO.FE3dParticle_setup = function FE3dParticle_setup(){
   var o = this;
   var context = o._graphicContext;
   o._vertexCount = 0;
   var buffer = o._vertexPositionBuffer = context.createVertexBuffer();
   buffer.setCode('position');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float3);
   o.pushVertexBuffer(buffer);
   var buffer = o._vertexCoordBuffer = context.createVertexBuffer();
   buffer.setCode('coord');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Float2);
   o.pushVertexBuffer(buffer);
   var buffer = o._vertexColorBuffer = context.createVertexBuffer();
   buffer.setCode('color');
   buffer.setFormatCd(MO.EG3dAttributeFormat.Byte4Normal);
   o.pushVertexBuffer(buffer);
   var buffer = o._indexBuffer = context.createIndexBuffer();
   o.pushIndexBuffer(buffer);
}
MO.FE3dParticle_testReady = function FE3dParticle_testReady(){
   var o = this;
   if(!o._ready){
      o._ready = o._renderable.testReady();
   }
   return o._ready;
}
MO.FE3dParticle_findTexture = function FE3dParticle_findTexture(p){
   return this._renderable.findTexture(p);
}
MO.FE3dParticle_textures = function FE3dParticle_textures(){
   return this._renderable.textures();
}
MO.FE3dParticle_material = function FE3dParticle_material(){
   return this._renderable.material();
}
MO.FE3dParticle_setSize = function FE3dParticle_setSize(width, height){
   var o = this;
}
MO.FE3dParticle_setData = function FE3dParticle_setData(data){
   this._renderable = data;
}
MO.FE3dParticle_loadUrl = function FE3dParticle_loadUrl(url){
   var o = this;
   var context = o._graphicContext;
   o._renderable = RConsole.find(FE3dParticleConsole).loadUrl(context, url);
   o._ready = false;
}
MO.FE3dParticle_createItem = function FE3dParticle_createItem(){
   var o = this;
   var item = MO.Class.create(MO.FE3dParticleItem);
   o.pushItem(item);
   return o;
}
MO.FE3dParticle_pushItem = function FE3dParticle_pushItem(item){
   this._items.push(item);
}
MO.FE3dParticle_process = function FE3dParticle_process(){
   var o = this;
   o.__base.FE3dRenderable.process.call(o);
   var particleConsole = MO.Console.find(MO.FE3dParticleConsole);
   var items = o._items;
   items.record();
   while(items.next()){
      var item = items.current();
      if(item.currentFinish()){
         items.removeCurrent();
         particleConsole.itemFree(item);
      }
      item.process();
   }
   if(!items.isEmpty()){
      o.upload();
   }
}
MO.FE3dParticle_upload = function FE3dParticle_upload(){
   var o = this;
   var context = o._graphicContext;
   var items = o._items;
   var count = items.count();
   var vertexCount = o._vertexCount = 4 * count;
   var vertexPositionIndex = 0;
   var vertexPositionData = new Float32Array(3 * vertexCount);
   var vertexCoordIndex = 0;
   var vertexCoordData = new Float32Array(2 * vertexCount);
   var vertexColorIndex = 0;
   var vertexColorData = new Uint8Array(4 * vertexCount);
   var indexIndex = 0;
   var indexData = new Uint16Array(2 * 6 * count);
   var visibleCount = 0;
   items.record();
   var index = 0;
   while(items.next()){
      var item = items.current();
      if(!item.visible()){
         continue;
      }
      var matrix = item.currentMatrix();
      var color = item.color();
      var red = parseInt(255 * MO.Lang.Float.toRange(color.red, 0, 1));
      var green = parseInt(255 * color.green);
      var blue = parseInt(255 * color.blue);
      var alpha = parseInt(255 * item.currentAlpha());
      matrix.transform(vertexPositionData, 12 * index, MO.Lang.Math.faceCenterPositions, 0, 4);
      vertexCoordData[vertexCoordIndex++] = 0;
      vertexCoordData[vertexCoordIndex++] = 1;
      vertexCoordData[vertexCoordIndex++] = 1;
      vertexCoordData[vertexCoordIndex++] = 1;
      vertexCoordData[vertexCoordIndex++] = 1;
      vertexCoordData[vertexCoordIndex++] = 0;
      vertexCoordData[vertexCoordIndex++] = 0;
      vertexCoordData[vertexCoordIndex++] = 0;
      for(var i = 0; i < 4; i++){
         vertexColorData[vertexColorIndex++] = red;
         vertexColorData[vertexColorIndex++] = green;
         vertexColorData[vertexColorIndex++] = blue;
         vertexColorData[vertexColorIndex++] = alpha;
      }
      var positionIndex = 4 * index;
      indexData[indexIndex++] = positionIndex + 0;
      indexData[indexIndex++] = positionIndex + 1;
      indexData[indexIndex++] = positionIndex + 2;
      indexData[indexIndex++] = positionIndex + 0;
      indexData[indexIndex++] = positionIndex + 2;
      indexData[indexIndex++] = positionIndex + 3;
      index++;
   }
   o._vertexPositionBuffer.upload(vertexPositionData, 4 * 3, index);
   o._vertexCoordBuffer.upload(vertexCoordData, 4 * 2, index);
   o._vertexColorBuffer.upload(vertexColorData, 4 * 1, index);
   o._indexBuffer.upload(indexData, 6 * index);
}
MO.FE3dParticle_dispose = function FE3dParticle_dispose(){
   var o = this;
   o._items = MO.Lang.Object.dispose(o._items);
   o.__base.FE3dRenderable.dispose.call(o);
}
MO.FE3dParticleConsole = function FE3dParticleConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd  = MO.EScope.Local;
   o._pools    = MO.Class.register(o, new MO.AGetter('_pools'))
   o.onLoad    = MO.FE3dParticleConsole_onLoad;
   o.construct = MO.FE3dParticleConsole_construct;
   o.itemAlloc = MO.FE3dParticleConsole_itemAlloc;
   o.itemFree  = MO.FE3dParticleConsole_itemFree;
   o.dispose   = MO.FE3dParticleConsole_dispose;
   return o;
}
MO.FE3dParticleConsole_construct = function FE3dParticleConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o)
   o._pools = MO.Class.create(MO.FObjectPools);
}
MO.FE3dParticleConsole_itemAlloc = function FE3dParticleConsole_itemAlloc(clazz){
   var o = this;
   var code = MO.Class.name(clazz);
   var instance = o._pools.alloc(code);
   if(!instance){
      instance = MO.Class.create(clazz);
   }
   return instance;
}
MO.FE3dParticleConsole_itemFree = function FE3dParticleConsole_itemFree(item){
   var o = this;
   var code = MO.Class.name(item);
   o._pools.free(code, item);
}
MO.FE3dParticleConsole_dispose = function FE3dParticleConsole_dispose(){
   var o = this;
   o._pools = MO.Lang.Object.dispose(o._pools);
   o.__base.FConsole.dispose.call(o)
}
MO.FE3dParticleData = function FE3dParticleData(o){
   o = MO.Class.inherits(this, o, MO.FE3dFaceData);
   o.onImageLoad = MO.FE3dParticleData_onImageLoad;
   o.construct   = MO.FE3dParticleData_construct;
   o.loadUrl     = MO.FE3dParticleData_loadUrl;
   o.dispose     = MO.FE3dParticleData_dispose;
   return o;
}
MO.FE3dParticleData_onImageLoad = function FE3dParticleData_onImageLoad(event){
   var o = this;
   var image = event.sender;
   o._size.assign(image.size());
   o._texture.upload(image);
   image.dispose();
   o._ready = true;
}
MO.FE3dParticleData_construct = function FE3dParticleData_construct(){
   var o = this;
   o.__base.FE3dFaceData.construct.call(o);
   var material = o._material;
   var info = material.info();
   info.effectCode = 'control';
   info.optionAlpha = true;
   info.ambientColor.set(1, 1, 1, 1);
}
MO.FE3dParticleData_loadUrl = function FE3dParticleData_loadUrl(url){
   var o = this;
   var image = MO.Class.create(MO.FImage);
   image.addLoadListener(o, o.onImageLoad);
   image.loadUrl(url);
   o._ready = false;
}
MO.FE3dParticleData_dispose = function FE3dParticleData_dispose(){
   var o = this;
   o._hVideo = null;
   o.__base.FE3dFaceData.dispose.call(o);
}
MO.FE3dParticleItem = function FE3dParticleItem(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._particle      = MO.Class.register(o, new MO.AGetSet('_particle'));
   o._visible       = MO.Class.register(o, new MO.AGetSet('_visible'), false);
   o._delay         = MO.Class.register(o, new MO.AGetSet('_delay'), 0);
   o._interval      = MO.Class.register(o, new MO.AGetter('_interval'), 1);
   o._position      = MO.Class.register(o, new MO.AGetter('_position'));
   o._rotation      = MO.Class.register(o, new MO.AGetter('_rotation'));
   o._scale         = MO.Class.register(o, new MO.AGetter('_scale'));
   o._color         = MO.Class.register(o, new MO.AGetter('_color'));
   o._currentMatrix = MO.Class.register(o, new MO.AGetter('_currentMatrix'));
   o._currentAlpha  = MO.Class.register(o, new MO.AGetSet('_currentAlpha'), 0);
   o._currentFinish = MO.Class.register(o, new MO.AGetSet('_currentFinish'), false);
   o._startTick     = 0;
   o._lastTick      = 0;
   o._statusDirty   = false;
   o.construct      = MO.FE3dParticleItem_construct;
   o.start          = MO.FE3dParticleItem_start;
   o.processFrame   = MO.FE3dParticleItem_processFrame;
   o.process        = MO.FE3dParticleItem_process;
   o.dirty          = MO.FE3dParticleItem_dirty;
   o.dispose        = MO.FE3dParticleItem_dispose;
   return o;
}
MO.FE3dParticleItem_construct = function FE3dParticleItem_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._currentMatrix = new MO.SMatrix3d();
   o._position = new MO.SPoint3(0, 0, 0);
   o._rotation = new MO.SVector3(0, 0, 0);
   o._scale = new MO.SVector3(1, 1, 1);
   o._color = new MO.SColor4(1, 1, 1, 1);
}
MO.FE3dParticleItem_start = function FE3dParticleItem_start(){
   var o = this;
   o._visible = false;
   o._currentAlpha = 1;
   o._currentFinish = false;
   o._startTick = MO.Timer.current();
   o._lastTick = 0;
}
MO.FE3dParticleItem_processFrame = function FE3dParticleItem_processFrame(second){
   var o = this;
}
MO.FE3dParticleItem_process = function FE3dParticleItem_process(){
   var o = this;
   var tick = MO.Timer.current();
   if(!o._visible){
      if(tick - o._startTick < o._delay){
         return;
      }
   }
   if(o._lastTick == 0){
      o._lastTick = tick;
      return false;
   }
   var span = tick - o._lastTick;
   if(span <= o._interval){
      return false;
   }
   var second = span / 1000;
   o.processFrame(second);
   o._lastTick = tick;
   if(o._statusDirty){
      var matrix = o._currentMatrix;
      matrix.tx = o._position.x;
      matrix.ty = o._position.y;
      matrix.tz = o._position.z;
      matrix.rx = o._rotation.x;
      matrix.ry = o._rotation.y;
      matrix.rz = o._rotation.z;
      matrix.sx = o._scale.x;
      matrix.sy = o._scale.y;
      matrix.sz = o._scale.z;
      matrix.updateForce();
      o._visible = true;
      o._statusDirty = false;
   }
}
MO.FE3dParticleItem_dirty = function FE3dParticleItem_dirty(){
   this._statusDirty = true;
}
MO.FE3dParticleItem_dispose = function FE3dParticleItem_dispose(){
   var o = this;
   o._currentMatrix = MO.Lang.Object.dispose(o._currentMatrix);
   o._position = MO.Lang.Object.dispose(o._position);
   o._rotation = MO.Lang.Object.dispose(o._rotation);
   o._scale = MO.Lang.Object.dispose(o._scale);
   o.__base.FObject.dispose.call(o);
}
MO.FE3dRainFontParticle = function FE3dRainFontParticle(o){
   o = MO.Class.inherits(this, o, MO.FE3dParticle);
   o._itemCount            = MO.Class.register(o, new MO.AGetSet('_itemCount'), 0);
   o._delay                = MO.Class.register(o, new MO.AGetSet('_delay'), 0);
   o._speed                = MO.Class.register(o, new MO.AGetSet('_speed'), 1);
   o._angle                = MO.Class.register(o, new MO.AGetSet('_angle'), 0);
   o._acceleration         = MO.Class.register(o, new MO.AGetSet('_acceleration'), 0);
   o._attenuation          = MO.Class.register(o, new MO.AGetSet('_attenuation'), 0);
   o._vertexPositionBuffer = null;
   o._vertexCoordBuffer    = null;
   o._indexBuffer          = null;
   o.construct             = MO.FE3dRainFontParticle_construct;
   o.setup                 = MO.FE3dRainFontParticle_setup;
   o.testInRange           = MO.FE3dRainFontParticle_testInRange;
   o.start                 = MO.FE3dRainFontParticle_start;
   o.dispose               = MO.FE3dRainFontParticle_dispose;
   return o;
}
MO.FE3dRainFontParticle_construct = function FE3dRainFontParticle_construct(){
   var o = this;
   o.__base.FE3dParticle.construct.call(o);
}
MO.FE3dRainFontParticle_setup = function FE3dRainFontParticle_setup(){
   var o = this;
   o.__base.FE3dParticle.setup.call(o);
}
MO.FE3dRainFontParticle_testInRange = function FE3dRainFontParticle_testInRange(x, y){
   var o = this;
   var position = o._position;
   var idx = parseInt((x + 17) / 20 * 220);
   var idy = parseInt((y + 3) * 6);
   var index = (360 * (60 - idy) + idx) * 4;
   var data = o._data.data;
   if(index >= 0 && index < data.length){
      var r = data[index    ];
      var g = data[index + 1];
      var b = data[index + 2];
      var a = data[index + 3];
   }
   return r > 0;
}
MO.FE3dRainFontParticle_start = function FE3dRainFontParticle_start(){
   var o = this;
   var particleConsole = MO.Console.find(MO.FE3dParticleConsole);
   var count = o._itemCount;
   var angleSingle = Math.PI * 2 / count;
   for(var i = 0; i < count; i++){
      var value = parseInt(MO.Random.get() * 360) % 360;
      var item = particleConsole.itemAlloc(MO.FE3dRainFontParticleItem);
      item.setParticle(o);
      item.direction().set(0, -1, 0);
      item.position().set(0.1 * value - 12, 5, 0);
      item.rotation().set(0, 0, -Math.PI / 2);
      item.scale().set(0.1, 0.1, 0.1);
      item.setDelay(o._delay);
      item.setSpeed(o._speed);
      item.setAcceleration(o._acceleration);
      item.setAttenuation(o._attenuation);
      item.start();
      o.pushItem(item);
   }
}
MO.FE3dRainFontParticle_dispose = function FE3dRainFontParticle_dispose(){
   var o = this;
   o.__base.FE3dParticle.dispose.call(o);
}
MO.FE3dRainFontParticleItem = function FE3dRainFontParticleItem(o){
   o = MO.Class.inherits(this, o, MO.FE3dParticleItem);
   o._direction    = MO.Class.register(o, new MO.AGetter('_direction'));
   o._speed        = MO.Class.register(o, new MO.AGetSet('_speed'));
   o._acceleration = MO.Class.register(o, new MO.AGetSet('_acceleration'), 1);
   o._attenuation  = MO.Class.register(o, new MO.AGetSet('_attenuation'), 0);
   o._statusInRange = false;
   o._currentSpeed = 0;
   o._storeSpeed   = 0;
   o.construct    = MO.FE3dRainFontParticleItem_construct;
   o.start        = MO.FE3dRainFontParticleItem_start;
   o.processFrame = MO.FE3dRainFontParticleItem_processFrame;
   o.dispose      = MO.FE3dRainFontParticleItem_dispose;
   return o;
}
MO.FE3dRainFontParticleItem_construct = function FE3dRainFontParticleItem_construct(){
   var o = this;
   o.__base.FE3dParticleItem.construct.call(o);
   o._direction = new MO.SVector3();
}
MO.FE3dRainFontParticleItem_start = function FE3dRainFontParticleItem_start(){
   var o = this;
   o.__base.FE3dParticleItem.start.call(o);
   o._statusInRange = false;
   o._currentSpeed = o._speed;
   o._storeSpeed = 0;
   o._currentAlpha = 0.2;
   o._color.set(0.5, 0.5, 0.5, 1);
}
MO.FE3dRainFontParticleItem_processFrame = function FE3dRainFontParticleItem_processFrame(second){
   var o = this;
   var size = o._particle._graphicContext.size();
   var position = o._position;
   var inRange = o._particle.testInRange(position.x, position.y);
   var attenuation = o._attenuation * second;
   if(o._statusInRange != inRange){
      if(inRange){
         o._storeSpeed = o._currentSpeed;
         o._currentSpeed = 0.2;
         o._color.set(1, 0, 0, 1);
         o._currentAlpha = 1;
      }else{
         o._color.set(1, 1, 1, 1);
         o._currentAlpha = 0.2;
         o._currentSpeed = o._storeSpeed;
      }
      o._statusInRange = inRange;
   }
   var distance = o._currentSpeed * second;
   var direction = o._direction;
   position.x += direction.x * distance;
   position.y += direction.y * distance;
   position.z += direction.z * distance;
   o.dirty();
}
MO.FE3dRainFontParticleItem_dispose = function FE3dRainFontParticleItem_dispose(){
   var o = this;
   o._direction = MO.Lang.Object.dispose(o._direction);
   o.__base.FE3dParticleItem.dispose.call(o);
}
MO.MFrameProcessor = function MFrameProcessor(o){
   o = MO.Class.inherits(this, o);
   o._readyLoader         = MO.Class.register(o, new MO.AGetter('_readyLoader'));
   o._eventEnterFrame     = null;
   o._enterFrameListeners = MO.Class.register(o, new MO.AListener('_enterFrameListeners', MO.EEvent.EnterFrame));
   o._eventLeaveFrame     = null;
   o._leaveFrameListeners = MO.Class.register(o, new MO.AListener('_leaveFrameListeners', MO.EEvent.LeaveFrame));
   o.onProcessReady       = MO.Method.empty;
   o.construct            = MO.MFrameProcessor_construct;
   o.dispose              = MO.MFrameProcessor_dispose;
   return o;
}
MO.MFrameProcessor_construct = function MFrameProcessor_construct(){
   var o = this;
   var loader = o._readyLoader = MO.Class.create(MO.FReadyLoader);
   loader.addChangeListener(o, o.onProcessReady);
   o._eventEnterFrame = new MO.SEvent();
   o._eventLeaveFrame = new MO.SEvent();
}
MO.MFrameProcessor_dispose = function MFrameProcessor_dispose(){
   var o = this;
   o._readyLoader = MO.Lang.Object.dispose(o._readyLoader);
   o._eventEnterFrame = MO.Lang.Object.dispose(o._eventEnterFrame);
   o._eventLeaveFrame = MO.Lang.Object.dispose(o._eventLeaveFrame);
}
MO.FApplication = function FApplication(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListener, MO.MGraphicObject, MO.MEventDispatcher, MO.MFrameProcessor);
   o._sessionId           = MO.Class.register(o, new MO.AGetSet('_sessionId'));
   o._activeChapter       = MO.Class.register(o, new MO.AGetter('_activeChapter'));
   o._chapters            = MO.Class.register(o, new MO.AGetter('_chapters'));
   o.onProcessReady       = MO.FApplication_onProcessReady;
   o.onProcess            = MO.FApplication_onProcess;
   o.construct            = MO.FApplication_construct;
   o.setup                = MO.Method.emptyTrue;
   o.findSessionId        = MO.FApplication_findSessionId;
   o.createChapter        = MO.Method.empty;
   o.registerChapter      = MO.FApplication_registerChapter;
   o.unregisterChapter    = MO.FApplication_unregisterChapter;
   o.selectChapter        = MO.FApplication_selectChapter;
   o.selectChapterByCode  = MO.FApplication_selectChapterByCode;
   o.processResize        = MO.FApplication_processResize;
   o.processEvent         = MO.FApplication_processEvent;
   o.process              = MO.FApplication_process;
   o.dispose              = MO.FApplication_dispose;
   return o;
}
MO.FApplication_onProcessReady = function FApplication_onProcessReady(event){
}
MO.FApplication_onProcess = function FApplication_onProcess(event){
   var o = this;
   var chapter = o._activeChapter;
   if(chapter){
      chapter.process();
   }
}
MO.FApplication_construct = function FApplication_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o.__base.MFrameProcessor.construct.call(o);
   o._sessionId = MO.Window.cookie(MO.EApplicationConstant.SessionCode);
   o._chapters = new MO.TDictionary();
}
MO.FApplication_findSessionId = function FApplication_findSessionId(){
   var o = this;
   return o._sessionId;
}
MO.FApplication_registerChapter = function FApplication_registerChapter(chapter){
   var o = this;
   var code = chapter.code();
   chapter.setApplication(o);
   o._chapters.set(code, chapter);
}
MO.FApplication_unregisterChapter = function FApplication_unregisterChapter(chapter){
   var o = this;
   var code = chapter.code();
   o._chapters.set(code, null);
}
MO.FApplication_selectChapter = function FApplication_selectChapter(chapter){
   var o = this;
   if(o._activeChapter != chapter){
      var activeChapter = o._activeChapter;
      if(activeChapter){
         activeChapter.deactive();
         o._activeChapter = null;
      }
      if(chapter){
         chapter.active();
         o._activeChapter = chapter;
      }
   }
}
MO.FApplication_selectChapterByCode = function FApplication_selectChapterByCode(code){
   var o = this;
   var chapter = o._chapters.get(code);
   if(!chapter){
      chapter = o.createChapter(code);
      o.registerChapter(chapter);
   }
   o.selectChapter(chapter);
   return chapter;
}
MO.FApplication_processResize = function FApplication_processResize(){
   var o = this;
}
MO.FApplication_processEvent = function FApplication_processEvent(event){
   var o = this;
   o.dispatcherEvent(event);
   var chapter = o._activeChapter;
   if(chapter){
      chapter.processEvent(event);
   }
}
MO.FApplication_process = function FApplication_process(){
   var o = this;
   var loader = o._readyLoader;
   if(!loader.testReady()){
      return;
   }
   o.processEnterFrameListener(o._eventEnterFrame);
   o.onProcess();
   o.processLeaveFrameListener(o._eventLeaveFrame);
}
MO.FApplication_dispose = function FApplication_dispose(){
   var o = this;
   o._activeChapter = null;
   o._chapters = MO.Lang.Object.dispose(o._chapters, true);
   o.__base.MFrameProcessor.dispose.call(o);
   o.__base.MListener.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FChapter = function FChapter(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListener, MO.MGraphicObject, MO.MEventDispatcher, MO.MFrameProcessor);
   o._code                = MO.Class.register(o, new MO.AGetSet('_code'));
   o._application         = MO.Class.register(o, new MO.AGetSet('_application'));
   o._scenes              = MO.Class.register(o, new MO.AGetter('_scenes'));
   o._activeScene         = MO.Class.register(o, new MO.AGetter('_activeScene'));
   o._statusSetup         = false;
   o._statusActive        = false;
   o.onProcessReady       = MO.FChapter_onProcessReady;
   o.construct            = MO.FChapter_construct;
   o.createScene          = MO.Method.empty;
   o.registerScene        = MO.FChapter_registerScene;
   o.unregisterScene      = MO.FChapter_unregisterScene;
   o.selectScene          = MO.FChapter_selectScene;
   o.selectSceneByCode    = MO.FChapter_selectSceneByCode;
   o.setup                = MO.Method.empty;
   o.active               = MO.FChapter_active;
   o.deactive             = MO.FChapter_deactive;
   o.processEvent         = MO.FChapter_processEvent;
   o.process              = MO.FChapter_process;
   o.dispose              = MO.FChapter_dispose;
   return o;
}
MO.FChapter_onProcessReady = function FChapter_onProcessReady(event){
}
MO.FChapter_construct = function FChapter_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o.__base.MFrameProcessor.construct.call(o);
   o._scenes = new MO.TDictionary();
}
MO.FChapter_registerScene = function FChapter_registerScene(scene){
   var o = this;
   var code = scene.code();
   scene.setApplication(o._application);
   scene.setChapter(o);
   o._scenes.set(code, scene);
}
MO.FChapter_unregisterScene = function FChapter_unregisterScene(scene){
   var code = scene.code();
   this._scenes.set(code, null);
}
MO.FChapter_selectScene = function FChapter_selectScene(scene){
   var o = this;
   if(o._activeScene != scene){
      var activeScene = o._activeScene;
      if(activeScene){
         activeScene.deactive();
         o._activeScene = null;
      }
      if(scene){
         scene.active();
         o._activeScene = scene;
      }
   }
}
MO.FChapter_selectSceneByCode = function FChapter_selectSceneByCode(code){
   var o = this;
   var scene = o._scenes.get(code);
   if(!scene){
      scene = o.createScene(code);
      o.registerScene(scene);
   }
   o.selectScene(scene);
   return scene;
}
MO.FChapter_active = function FChapter_active(){
   var o = this;
   if(!o._statusSetup){
      o.setup();
      o._statusSetup = true;
   }
   o._statusActive = true;
}
MO.FChapter_deactive = function FChapter_deactive(){
   var o = this;
   o._statusActive = false;
}
MO.FChapter_processEvent = function FChapter_processEvent(event){
   var o = this;
   o.dispatcherEvent(event);
   var scene = o._activeScene;
   if(scene){
      scene.processEvent(event);
   }
}
MO.FChapter_process = function FChapter_process(){
   var o = this;
   var loader = o._readyLoader;
   if(!loader.testReady()){
      return;
   }
   if(o._statusActive){
      o.processEnterFrameListener(o._eventEnterFrame);
      var scene = o._activeScene;
      if(scene){
         if(scene.visible()){
            scene.process();
         }
      }
      o.processLeaveFrameListener(o._eventLeaveFrame);
   }
}
MO.FChapter_dispose = function FChapter_dispose(){
   var o = this;
   o._scenes = MO.Lang.Object.dispose(o._scenes);
   o.__base.MFrameProcessor.dispose.call(o);
   o.__base.MListener.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FScene = function FScene(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListener, MO.MGraphicObject, MO.MEventDispatcher, MO.MFrameProcessor);
   o._visible              = MO.Class.register(o, new MO.AGetSet('_visible'), true);
   o._code                 = MO.Class.register(o, new MO.AGetSet('_code'));
   o._application          = MO.Class.register(o, new MO.AGetSet('_application'));
   o._chapter              = MO.Class.register(o, new MO.AGetSet('_chapter'));
   o._activeStage          = MO.Class.register(o, new MO.AGetSet('_activeStage'));
   o._statusSetup          = false;
   o._statusActive         = false;
   o.onOperationVisibility = MO.FScene_onOperationVisibility;
   o.onProcessReady        = MO.FScene_onProcessReady;
   o.onProcessBefore       = MO.Method.empty;
   o.onProcess             = MO.Method.empty;
   o.onProcessAfter        = MO.Method.empty;
   o.construct             = MO.FScene_construct;
   o.setup                 = MO.Method.empty;
   o.active                = MO.FScene_active;
   o.deactive              = MO.FScene_deactive;
   o.processEvent          = MO.FScene_processEvent;
   o.process               = MO.FScene_process;
   o.dispose               = MO.FScene_dispose;
   return o;
}
MO.FScene_onOperationVisibility = function FScene_onOperationVisibility(event){
   var o = this;
   o.__base.MEventDispatcher.onOperationVisibility.call(o, event);
   o._visible = event.visibility;
}
MO.FScene_onProcessReady = function FScene_onProcessReady(event){
}
MO.FScene_construct = function FScene_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o.__base.MFrameProcessor.construct.call(o);
}
MO.FScene_active = function FScene_active(){
   var o = this;
   if(!o._statusSetup){
      o.setup();
      o._statusSetup = true;
   }
   o._statusActive = true;
   o.processResize();
}
MO.FScene_deactive = function FScene_deactive(){
   var o = this;
   o._statusActive = false;
}
MO.FScene_process = function FScene_process(){
   var o = this;
   var loader = o._readyLoader;
   if(!loader.testReady()){
      return;
   }
   if(o._statusActive){
      o.processEnterFrameListener(o._eventEnterFrame);
      o.onProcessBefore();
      o.onProcess();
      if(o._activeStage){
         o._activeStage.process();
      }
      o.onProcessAfter();
      o.processLeaveFrameListener(o._eventLeaveFrame);
   }
}
MO.FScene_processEvent = function FScene_processEvent(event){
   var o = this;
   o.dispatcherEvent(event);
}
MO.FScene_dispose = function FScene_dispose(){
   var o = this;
   o.__base.MFrameProcessor.dispose.call(o);
   o.__base.MListener.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.RDesktop = function RDesktop(){
   var o = this;
   o._qualityCd   = MO.EGraphicQuality.Middle;
   o._application = null;
   o._workspaces  = new MO.TDictionary();
   o._thread      = null;
   o._interval    = 15;
   return o;
}
MO.RDesktop.prototype.qualityCd = function RDesktop_qualityCd(){
   return this._qualityCd;
}
MO.RDesktop.prototype.setQualityCd = function RDesktop_setQualityCd(qualityCd){
   this._qualityCd = qualityCd;
}
MO.RDesktop.prototype.onProcessEvent = function RDesktop_onProcessEvent(event){
   var o = this;
   var application = o._application;
   if(application){
      application.processEvent(event);
   }
}
MO.RDesktop.prototype.onProcess = function RDesktop_onProcess(event){
   var o = this;
   var application = o._application;
   if(application){
      application.process();
   }
}
MO.RDesktop.prototype.application = function RDesktop_application(){
   return this._application;
}
MO.RDesktop.prototype.initialize = function RDesktop_initialize(clazz){
   var o = this;
   MO.Window.Browser.construct();
   MO.Window.connect(window);
   MO.Window.Keyboard.construct();
   MO.Window.lsnsMouseDown.register(o, o.onProcessEvent);
   MO.Window.lsnsMouseMove.register(o, o.onProcessEvent);
   MO.Window.lsnsMouseUp.register(o, o.onProcessEvent);
   MO.Window.lsnsMouseWheel.register(o, o.onProcessEvent);
   MO.Window.lsnsKeyDown.register(o, o.onProcessEvent);
   MO.Window.lsnsKeyPress.register(o, o.onProcessEvent);
   MO.Window.lsnsKeyUp.register(o, o.onProcessEvent);
   MO.Window.lsnsResize.register(o, o.onProcessEvent);
   MO.Window.lsnsVisibility.register(o, o.onProcessEvent);
   MO.Window.lsnsOrientation.register(o, o.onProcessEvent);
   var thread = o._thread = MO.Class.create(MO.FThread);
   thread.setInterval(o._interval);
   thread.addProcessListener(o, o.process);
   MO.Console.find(MO.FThreadConsole).start(thread);
   MO.Timer.setup();
   var application = MO.Application = o._application = MO.Class.create(clazz);
   return application;
}
MO.RDesktop.prototype.findWorkspace = function RDesktop_findWorkspace(clazz){
   var o = this;
   var name = MO.Class.name(clazz);
   var workspaces = o._workspaces;
   var workspace = workspaces.get(name);
   if(workspace == null){
      workspace = MO.Class.create(clazz);
      workspaces.set(name, workspace);
   }
   return workspace;
}
MO.RDesktop.prototype.process = function RDesktop_process(){
   var o = this;
   o.onProcess();
   MO.Timer.update();
}
MO.RDesktop.prototype.release = function RDesktop_release(){
   try{
      CollectGarbage();
   }catch(e){
     MO.Logger.error(e);
   }
}
MO.Desktop = new MO.RDesktop();
MO.EDataStatus = new function EDataStatus(){
   var o = this;
   o.Unknown = '';
   o.Insert = 'I';
   o.Update = 'U';
   o.Delete = 'D';
   return o;
}
MO.FDataRow = function FDataRow(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._dataset    = MO.Class.register(o, new MO.AGetSet('_dataset'));
   o._index      = MO.Class.register(o, new MO.AGetSet('_index'), 0);
   o._statusCd   = MO.Class.register(o, new MO.AGetSet('_statusCd'), MO.EDataStatus.Unknown);
   o._dataValues = null;
   o.construct   = MO.FDataRow_construct;
   o.isEmpty     = MO.FDataRow_isEmpty;
   o.count       = MO.FDataRow_count;
   o.get         = MO.FDataRow_get;
   o.set         = MO.FDataRow_set;
   o.clear       = MO.FDataRow_clear;
   o.loadConfig  = MO.FDataRow_loadConfig;
   o.saveConfig  = MO.FDataRow_saveConfig;
   o.dispose     = MO.FDataRow_dispose;
   return o;
}
MO.FDataRow_construct = function FDataRow_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._dataValues = new MO.TDictionary();
}
MO.FDataRow_isEmpty = function FDataRow_isEmpty(){
   return this._dataValues.isEmpty();
}
MO.FDataRow_count = function FDataRow_count(){
   return this._dataValues.count();
}
MO.FDataRow_get = function FDataRow_get(name, defaultValue){
   var o = this;
   var dataValue = o._dataValues.get(name);
   if(dataValue){
      return dataValue.get();
   }
   return defaultValue;
}
MO.FDataRow_set = function FDataRow_set(name, value, typeCd){
   var o = this;
   var dataValues = o._dataValues;
   var dataValue = dataValues.get(name);
   if(!dataValue){
      dataValue = MO.Class.create(MO.FDataValue);
      dataValues.set(name, dataValue);
   }
   dataValue.set(value, typeCd);
}
MO.FDataRow_clear = function FDataRow_clear(){
   var o = this;
   var dataValues = o._dataValues;
   var count = dataValues.count();
   for(var i = 0; i < count; i++){
      var dataValue = dataValues.at(i);
      dataValue.clear();
   }
}
MO.FDataRow_loadConfig = function FDataRow_loadConfig(xconfig){
   var o = this;
   o._statusCd = MO.EDataStatus.View;
   var attributes = xconfig.attributes();
   if(attributes){
      var count = attributes.count();
      for(var i = 0; i < count; i++){
         var name = attributes.name(i);
         var value = attributes.value(i);
         o.set(name, value);
      }
   }
}
MO.FDataRow_saveConfig = function FDataRow_saveConfig(xconfig){
   var o = this;
   xconfig.set('_status_cd', o._statusCd);
   var dataValues = o._dataValues;
   var count = dataValues.count();
   for(var i = 0; i < count; i++){
      var name = dataValues.name(i);
      var dataValue = dataValues.value(i);
      var value = dataValue.get();
      xconfig.set(name, value);
   }
}
MO.FDataRow_dispose = function FDataRow_dispose(){
   var o = this;
   o._dataValues = MO.Lang.Object.dispose(o._dataValues);
   o.__base.FObject.dispose.call(o);
}
MO.FDataset = function FDataset(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._name        = MO.Class.register(o, new MO.AGetSet('_name'));
   o._total       = MO.Class.register(o, new MO.AGetter('_total'));
   o._pageSize    = MO.Class.register(o, new MO.AGetSet('_pageSize'), 20);
   o._pageCount   = MO.Class.register(o, new MO.AGetter('_pageCount'));
   o._page        = MO.Class.register(o, new MO.AGetSet('_page'));
   o._rows        = MO.Class.register(o, new MO.AGetter('_rows'));
   o._viewers     = MO.Class.register(o, new MO.AGetter('_viewers'));
   o.construct    = MO.FDataset_construct;
   o.isEmpty      = MO.FDataset_isEmpty;
   o.count        = MO.FDataset_count;
   o.createRow    = MO.FDataset_createRow;
   o.row          = MO.FDataset_row;
   o.rows         = MO.FDataset_rows;
   o.find         = MO.FDataset_find;
   o.findIndex    = MO.FDataset_findIndex;
   o.push         = MO.FDataset_push;
   o.erase        = MO.FDataset_erase;
   o.remove       = MO.FDataset_remove;
   o.createViewer = MO.FDataset_createViewer;
   o.loadConfig   = MO.FDataset_loadConfig;
   o.saveConfig   = MO.FDataset_saveConfig;
   o.clear        = MO.FDataset_clear;
   o.dispose      = MO.FDataset_dispose;
   return o;
}
MO.FDataset_construct = function FDataset_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._rows = new MO.TObjects();
   o._viewers = new MO.TObjects();
}
MO.FDataset_isEmpty = function FDataset_isEmpty(){
   return this._rows.isEmpty();
}
MO.FDataset_count = function FDataset_count(){
   return this._rows.count();
}
MO.FDataset_createRow = function FDataset_createRow(){
   var o = this;
   var row = MO.Class.create(MO.FDataRow);
   row.setDataset(o);
   o._rows.push(row);
   return row;
}
MO.FDataset_row = function FDataset_row(index){
   return this._rows.get(index);
}
MO.FDataset_rows = function FDataset_rows(){
   return this._rows;
}
MO.FDataset_find = function FDataset_find(){
   var o = this;
   var length = arguments.length;
   if((length % 2) != 0){
      throw new MO.TError(o, 'Parameters must is pairs (length={1})', length);
   }
   var rows = o._rows;
   var count = rows.count();
   for(var n = 0; n < count; n++){
      var row = rows.at(n);
      var find = true;
      for(var i = 0; i < length; i += 2){
         var parameterName = arguments[n];
         var parameterValue = arguments[n + 1];
         var findValue = row.get(parameterName)
         if(findValue != parameterValue){
            find = false;
            break;
         }
      }
      if(find){
         return row;
      }
   }
   return null;
}
MO.FDataset_findIndex = function FDataset_findIndex(index){
   var o = this;
   var rows = o._rows;
   var count = rows.count();
   for(var n = 0; n < count; n++){
      var row = rows.at(n);
      var rowIndex = row.index();
      if(rowIndex = index){
         return row;
      }
   }
   return null;
}
MO.FDataset_push = function FDataset_push(row){
   this._rows.push(row);
}
MO.FDataset_erase = function FDataset_erase(index){
   return this._rows.remove(index);
}
MO.FDataset_remove = function FDataset_remove(row){
   this._rows.remove(row);
}
MO.FDataset_createViewer = function FDataset_createViewer(offset, count){
   var o = this;
   var viewer = MO.Class.create(MO.FDatasetViewer);
   viewer.setDataset(o);
   viewer.setOffset(MO.Runtime.nvl(offset, 0));
   viewer.setCount(MO.Runtime.nvl(count, o._rows.count()));
   o._viewers.push(viewer);
   return row;
}
MO.FDataset_loadConfig = function FDataset_loadConfig(xconfig){
   var o = this;
   o._code = xconfig.get('name');
   o._total = MO.Lang.Integer.parse(xconfig.get('total'));
   o._pageSize = MO.Lang.Integer.parse(xconfig.get('page_size', 100));
   o._pageCount = MO.Lang.Integer.parse(xconfig.get('page_count', 1));
   o._page = MO.Lang.Integer.parse(xconfig.get('page', 0));
   var xnodes = xconfig.nodes();
   if(xnodes){
      var count = xnodes.count();
      for(var i = 0; i < count; i++){
         var xnode = xnodes.at(i);
         if(xnode.isName('Row')){
            var row = o.createRow();
            row.loadConfig(xnode);
         }
      }
   }
}
MO.FDataset_saveConfig = function FDataset_saveConfig(xconfig){
   var o = this;
   xconfig.set('name', o._name);
   var rows = o._rows;
   var count = rows.count();
   for(var i = 0; i < count; i++){
      var row = rows.at(i);
      row.saveConfig(xconfig.create('Row'));
   }
}
MO.FDataset_clear = function FDataset_clear(){
   var o = this;
   o._pageSize = 20;
   o._page = 0;
   o._pageCount = 0;
   o._total = 0;
   o._rows.clear();
}
MO.FDataset_dispose = function FDataset_dispose(){
   var o = this;
   o._values = MO.Lang.Object.dispose(o._values);
   o.__base.FObject.dispose.call(o);
}
MO.FDatasetViewer = function FDatasetViewer(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._dataset  = MO.Class.register(o, new MO.AGetSet('_dataset'));
   o._position = MO.Class.register(o, new MO.AGetter('_position'), 0);
   o._offset   = MO.Class.register(o, new MO.AGetSet('_offset'), 0);
   o._count    = MO.Class.register(o, new MO.AGetSet('_count'), 0);
   o.construct = MO.FDatasetViewer_construct;
   o.isEmpty   = MO.FDatasetViewer_isEmpty;
   o.current   = MO.FDatasetViewer_current;
   o.first     = MO.FDatasetViewer_first;
   o.prior     = MO.FDatasetViewer_prior;
   o.next      = MO.FDatasetViewer_next;
   o.last      = MO.FDatasetViewer_last;
   o.move      = MO.FDatasetViewer_move;
   o.moveToRow = MO.FDatasetViewer_moveToRow;
   o.reset     = MO.FDatasetViewer_reset;
   o.dispose   = MO.FDatasetViewer_dispose;
   return o;
}
MO.FDatasetViewer_construct = function FDatasetViewer_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.FDatasetViewer_isEmpty = function FDatasetViewer_isEmpty(){
   return (this._count == 0);
}
MO.FDatasetViewer_current = function FDatasetViewer_current(){
   var o = this;
   var position = o._position;
   if(position != -1){
      var index = position + o._offset;
      var rows = o._dataset.rows();
      var row = rows.get(index);
      return row;
   }
   return null;
}
MO.FDatasetViewer_move = function FDatasetViewer_move(position){
   var o = this;
   var count = o._count;
   if(count > 0){
      if((position >= 0) && (position < count)){
         o._position = position;
         return true;
      }
   }
   return false;
}
MO.FDatasetViewer_moveToRow = function FDatasetViewer_moveToRow(row){
   var o = this;
   var index = o._rows.indexOf(row);
   if(index != -1){
      o._position = index - o._offset;
   }
}
MO.FDatasetViewer_first = function FDatasetViewer_first(){
   var o = this;
   var count = o._count;
   if(count > 0){
      o._position = 0;
      return true;
   }else{
      o._position = -1;
      return false;
   }
}
MO.FDatasetViewer_prior = function FDatasetViewer_prior(){
   var o = this;
   if(o._position > 0){
      o._position--;
      return true;
   }
   return false;
}
MO.FDatasetViewer_next = function FDatasetViewer_next(){
   var o = this;
   if(o._position < o._count - 1){
      o._position++;
      return true;
   }
   return false;
}
MO.FDatasetViewer_last = function FDatasetViewer_last(){
   var o = this;
   var count = o._count;
   if(count > 0){
      o._position = count - 1;
      return true;
   }else{
      o._position = -1;
      return false;
   }
}
MO.FDatasetViewer_reset = function FDatasetViewer_reset(){
   this._position = -1;
}
MO.FDatasetViewer_dispose = function FDatasetViewer_dispose(){
   var o = this;
   o._dataset = null;
   o.__base.FObject.dispose.call(o);
}
MO.FDataSource = function FDataSource(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._currentRow     = MO.Class.register(o, new MO.AGetter('_currentRow'));
   o._currentDataset = MO.Class.register(o, new MO.AGetter('_currentDataset'));
   o._datasets       = null;
   o.construct       = MO.FDataSource_construct;
   o.selectDataset   = MO.FDataSource_selectDataset;
   o.selectRow       = MO.FDataSource_selectRow;
   o.loadConfig      = MO.FDataSource_loadConfig;
   o.saveConfig      = MO.FDataSource_saveConfig;
   o.dispose         = MO.FDataSource_dispose;
   return o;
}
MO.FDataSource_construct = function FDataSource_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._datasets = new MO.TDictionary();
}
MO.FDataSource_selectDataset = function FDataSource_selectDataset(name){
   var o = this;
   var datasets = o._datasets;
   var name = MO.Lang.String.nvl(name, 'default');
   var dataset = datasets.get(name);
   if(!dataset){
      dataset = MO.Class.create(MO.FDataset);
      dataset.setName(name);
      datasets.set(name, dataset);
   }
   o._currentDataset = dataset;
   return dataset;
}
MO.FDataSource_selectRow = function FDataSource_selectRow(row){
   var o = this;
   if(row){
      o._currentRow = row;
      return;
   }
   var row = null;
   var dataset = o._currentDataset;
   if(dataset.isEmpty()){
      row = dataset.createRow();
   }else{
      row = dataset.rows.first();
   }
   o._currentRow = row;
   return row;
}
MO.FDataSource_loadConfig = function FDataSource_loadConfig(xconfig){
   var o = this;
   var xnodes = xconfig.nodes();
   if(xnodes){
      var datasets = o._datasets;
      var count = xnodes.count();
      for(var i = 0; i < count; i++){
         var xnode = xnodes.at(i);
         if(xnode.isName('Dataset')){
            var datasetName = xnode.get('name');
            var dataset = o.selectDataset(datasetName);
            dataset.loadConfig(xnode);
         }
      }
   }
}
MO.FDataSource_saveConfig = function FDataSource_saveConfig(xconfig){
   var o = this;
   var datasets = o._datasets;
   var count = datasets.count();
   for(var i = 0; i < count; i++){
      var dataset = datasets.at(i);
      dataset.saveConfig(xconfig.create('Dataset'));
   }
}
MO.FDataSource_dispose = function FDataSource_dispose(){
   var o = this;
   o._datasets = MO.Lang.Object.dispose(o._datasets);
   o.__base.FObject.dispose.call(o);
}
MO.FDataSource_create = function FDataSource_create(c){
   return this.dataset.create(c);
}
MO.FDataSource_count = function FDataSource_count(){
   return this.dataset.count;
}
MO.FDataSource_row = function FDataSource_row(n){
   return this.dataset.get(n);
}
MO.FDataSource_current = function FDataSource_current(){
   return this.row(this._position);
}
MO.FDataSource_isChanged = function FDataSource_isChanged(){
   var o = this;
   var d = o.dataset;
   for(var n=0; n<d.count; n++){
      var r = d.get(n);
      if(r && r.isSave()){
         return true;
      }
   }
   return false;
}
MO.FDataSource_get = function FDataSource_get(n){
   var r = this.current();
   return r ? r.get(n) : '';
}
MO.FDataSource_set = function FDataSource_set(n, v){
   var r = this.current();
   if(r){
      r.set(n, v);
   }
}
MO.FDataSource_move = function FDataSource_move(p){
   this._position = p;
}
MO.FDataSource_moveToRow = function FDataSource_moveToRow(row){
   var p = this.dataset.indexOf(row);
   if(-1 != p){
      this._position = p;
   }
}
MO.FDataSource_find = function FDataSource_find(){
   return this.dataset.findByArgs(arguments);
}
MO.FDataSource_loadNode = function FDataSource_loadNode(config){
   if(config && config.nodes){
      var nodes = config.nodes;
      for(var n=0; n<nodes.count; n++){
         var node = nodes.get(n);
         if(node && node.isName('Row')){
            var row = this.dataset.create();
            row.loadNode(node);
            row.store();
         }
      }
   }
}
MO.FDataSource_dump = function FDataSource_dump(s){
   var o = this;
   s = RString.nvlStr(s);
   s.appendLine(RClass.dump(o));
   o.dataset.dump(s);
   return s;
}
MO.FDataValue = function FDataValue(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._typeCd           = MO.Class.register(o, new MO.AGetter('_typeCd'), MO.EDataType.Unknown);
   o._origin           = MO.Class.register(o, new MO.AGetSet('_origin'));
   o._value            = MO.Class.register(o, new MO.AGetSet('_value'));
   o._listenersChanged = null;
   o.isSet             = MO.FDataValue_isSet;
   o.listenersChanged  = MO.FDataValue_listenersChanged;
   o.get               = MO.FDataValue_get;
   o.set               = MO.FDataValue_set;
   o.clear             = MO.FDataValue_clear;
   o.dispose           = MO.FDataValue_dispose;
   return o;
}
MO.FDataValue_isSet = function FDataValue_isSet(){
   return this._typeCd != MO.EDataType.Unknown;
}
MO.FDataValue_listenersChanged = function FDataValue_listenersChanged(){
   var o = this;
   var listeners = o._listenersChanged;
   if(!listeners){
      listeners = o._listenersChanged = new MO.TListeners();
   }
   return listeners;
}
MO.FDataValue_get = function FDataValue_get(){
   var o = this;
   if(o._typeCd != MO.EDataType.Unknown){
      return o._value;
   }
   return null;
}
MO.FDataValue_set = function FDataValue_set(value, typeCd){
   var o = this;
   o._typeCd = MO.Runtime.nvl(typeCd, MO.EDataType.String);
   o._origin = value;
   o._value = value;
}
MO.FDataValue_clear = function FDataValue_clear(){
   var o = this;
   o._typeCd = MO.EDataType.Unknown;
   o._origin = null;
   o._value = null;
}
MO.FDataValue_dispose = function FDataValue_dispose(){
   var o = this;
   o.clear();
   o._listenersChanged = MO.Lang.Object.dispose(o._listenersChanged);
   o.__base.FObject.dispose.call(o);
}
MO.AEvent = function AEvent(n, l, h){
   var o = this;
   MO.AAnnotation.call(o, n);
   o._annotationCd = MO.EAnnotation.Event;
   o._inherit      = true;
   o._logger       = true;
   o._linker       = l;
   o._handle       = h;
   o._process      = null;
   o.linker        = MO.AEvent_linker;
   o.handle        = MO.AEvent_handle;
   o.value         = MO.AEvent_value;
   o.create        = MO.AEvent_create;
   o.attach        = MO.Method.empty;
   o.bind          = MO.AEvent_bind;
   o.toString      = MO.AEvent_toString;
   return o;
}
MO.AEvent_linker = function AEvent_linker(){
   return this._linker;
}
MO.AEvent_handle = function AEvent_handle(){
   return this._handle;
}
MO.AEvent_value = function AEvent_value(){
   return this._process;
}
MO.AEvent_create = function AEvent_create(){
   return new MO.SEvent();
}
MO.AEvent_bind = function AEvent_bind(hTag, capture){
   var o = this;
   if(capture){
      hTag.addEventListener(o._linker, MO.Dui.Event.ohEvent, true);
   }else{
      hTag[o._handle] = MO.Dui.Event.ohEvent;
   }
}
MO.AEvent_toString = function AEvent_toString(){
   var o = this;
   return 'linker=' + o._linker + ',handle=' + o._handle;
}
MO.AEventBlur = function AEventBlur(n, m){
   var o = this;
   MO.AEvent.call(o, n, 'blur', 'onblur');
   o.attach = MO.AEventBlur_attach;
   return o;
}
MO.AEventBlur_attach = function AEventBlur_attach(e, h){
}
MO.AEventChange = function AEventChange(n){
   var o = this;
   MO.AEvent.call(o, n, 'change', 'onchange');
   o.attach = MO.AEventChange_attach;
   return o;
}
MO.AEventChange_attach = function AEventChange_attach(e, h){
}
MO.AEventClick = function AEventClick(n){
   var o = this;
   MO.AEvent.call(o, n, 'click', 'onclick');
   o.attach = MO.AEventClick_attach;
   return o;
}
MO.AEventClick_attach = function AEventClick_attach(e, h){
   e.altKey = h.altKey;
   e.ctrlKey = h.ctrlKey;
   e.shiftKey = h.shiftKey;
}
MO.AEventDoubleClick = function AEventDoubleClick(n){
   var o = this;
   MO.AEvent.call(o, n, 'dblclick', 'ondblclick');
   o.attach = MO.AEventDoubleClick_attach;
   return o;
}
MO.AEventDoubleClick_attach = function AEventDoubleClick_attach(e, h){
   e.altKey = h.altKey;
   e.ctrlKey = h.ctrlKey;
   e.shiftKey = h.shiftKey;
}
MO.AEventFocus = function AEventFocus(n){
   var o = this;
   MO.AEvent.call(o, n, 'focus', 'onfocus');
   o.attach = MO.AEventFocus_attach;
   return o;
}
MO.AEventFocus_attach = function AEventFocus_attach(e, h){
}
MO.AEventInputChanged = function AEventInputChanged(n){
   var o = this;
   MO.AEvent.call(o, n, 'input', 'oninput');
   o.attach = MO.AEventInputChanged_attach;
   o.bind   = MO.AEventInputChanged_bind;
   return o;
}
MO.AEventInputChanged_attach = function AEventInputChanged_attach(e, h){
}
MO.AEventInputChanged_bind = function AEventInputChanged_bind(h, u){
   var o = this;
   if(MO.Window.Browser.isBrowser(MO.EBrowser.Explorer)){
      h.onpropertychange = MO.Dui.Event.ohEvent;
   }else{
      h.addEventListener('input', MO.Dui.Event.ohEvent);
   }
}
MO.AEventKeyDown = function AEventKeyDown(n){
   var o = this;
   MO.AEvent.call(o, n, 'keydown', 'onkeydown');
   o.attach = MO.AEventKeyDown_attach;
   return o;
}
MO.AEventKeyDown_attach = function AEventKeyDown_attach(e, h){
   e.altKey = h.altKey;
   e.shiftKey = h.shiftKey;
   e.ctrlKey = h.ctrlKey;
   e.keyCode = h.keyCode;
}
MO.AEventKeyPress = function AEventKeyPress(n){
   var o = this;
   MO.AEvent.call(o, n, 'keypress', 'onkeypress');
   o.create = MO.AEventKeyPress_create;
   o.attach = MO.AEventKeyPress_attach;
   return o;
}
MO.AEventKeyPress_create = function AEventKeyPress_create(){
   return new MO.SKeyboardEvent();
}
MO.AEventKeyPress_attach = function AEventKeyPress_attach(e, h){
   e.hEvent = h;
   e.attachEvent(h);
}
MO.AEventKeyUp = function AEventKeyUp(n){
   var o = this;
   MO.AEvent.call(o, n, 'keyup', 'onkeyup');
   o.attach = MO.AEventKeyUp_attach;
   return o;
}
MO.AEventKeyUp_attach = function AEventKeyUp_attach(e, h){
   e.altKey = h.altKey;
   e.shiftKey = h.shiftKey;
   e.ctrlKey = h.ctrlKey;
   e.keyCode = h.keyCode;
}
MO.AEventLoad = function AEventLoad(n){
   var o = this;
   MO.AEvent.call(o, n, 'load', 'onload');
   o.attach = MO.AEventLoad_attach;
   return o;
}
MO.AEventLoad_attach = function AEventLoad_attach(e, h){
}
MO.AEventMouse = function AEventMouse(n, l, h){
   var o = this;
   MO.AEvent.call(o, n, l, h);
   o.attach = MO.AEventMouse_attach;
   return o;
}
MO.AEventMouse_attach = function AEventMouse_attach(e, h){
   e.button = h.button;
   e.mouseLeft = (h.button == MO.EMouseButton.Left);
   e.mouseMiddle = (h.button == MO.EMouseButton.Middle);
   e.mouseRight = (h.button == MO.EMouseButton.Right);
   e.altKey = h.altKey;
   e.ctrlKey = h.ctrlKey;
   if(MO.Window.Browser.isBrowser(MO.EBrowser.FireFox)){
      e.x = h.pageX;
      e.y = h.pageY;
      e.offsetX = h.layerX;
      e.offsetY = h.layerY;
   }else{
      e.x = h.x;
      e.y = h.y;
      e.offsetX = h.offsetX;
      e.offsetY = h.offsetY;
   }
   e.clientX = h.clientX;
   e.clientY = h.clientY;
}
MO.AEventMouseDown = function AEventMouseDown(n){
   var o = this;
   MO.AEventMouse.call(o, n, 'mousedown', 'onmousedown');
   return o;
}
MO.AEventMouseEnter = function AEventMouseEnter(n){
   var o = this;
   MO.AEvent.call(o, n, 'mouseenter', 'onmouseenter');
   o._logger = false;
   o.attach  = MO.AEventMouseEnter_attach;
   return o;
}
MO.AEventMouseEnter_attach = function AEventMouseEnter_attach(e, h){
}
MO.AEventMouseLeave = function AEventMouseLeave(n){
   var o = this;
   MO.AEvent.call(o, n, 'mouseleave', 'onmouseleave');
   o._logger = false;
   o.attach  = MO.AEventMouseLeave_attach;
   return o;
}
MO.AEventMouseLeave_attach = function AEventMouseLeave_attach(e, h){
}
MO.AEventMouseMove = function AEventMouseMove(n){
   var o = this;
   MO.AEventMouse.call(o, n, 'mousemove', 'onmousemove');
   o._logger = false;
   return o;
}
MO.AEventMouseOut = function AEventMouseOut(n){
   var o = this;
   MO.AEvent.call(o, n, 'mouseout', 'onmouseout');
   o._hSource = null;
   o._altKey  = null;
   o._ctrlKey = null;
   o._x       = null;
   o._y       = null;
   o.attach   = MO.AEventMouseOut_attach;
   return o;
}
MO.AEventMouseOut_attach = function AEventMouseOut_attach(p){
   var o = this;
   o._hSource = p.srcElement;
   o._altKey = p.altKey;
   o._ctrlKey = p.ctrlKey;
   if(MO.Window.Browser.isBrowser(MO.EBrowser.FireFox)){
      o._x = p.pageX;
      o._y = p.pageY;
   }else{
      o._x = p.x;
      o._y = p.y;
   }
}
MO.AEventMouseOver = function AEventMouseOver(n){
   var o = this;
   MO.AEvent.call(o, n, 'mouseover', 'onmouseover');
   o._hSource = null;
   o._altKey  = null;
   o._ctrlKey = null;
   o._x       = null;
   o._y       = null;
   o.attach   = MO.AEventMouseOver_attach;
   return o;
}
MO.AEventMouseOver_attach = function AEventMouseOver_attach(p){
   var o = this;
   o._hSource = p.srcElement;
   o._altKey = p.altKey;
   o._ctrlKey = p.ctrlKey;
   if(MO.Window.Browser.isBrowser(MO.EBrowser.FireFox)){
      o._x = p.pageX;
      o._y = p.pageY;
   }else{
      o._x = p.x;
      o._y = p.y;
   }
}
MO.AEventMouseUp = function AEventMouseUp(n){
   var o = this;
   MO.AEventMouse.call(o, n, 'mouseup', 'onmouseup');
   return o;
}
MO.AEventMouseWheel = function AEventMouseWheel(n){
   var o = this;
   MO.AEvent.call(o, n, 'mousewheel', 'onmousewheel');
   o.attach = MO.AEventMouseWheel_attach;
   return o;
}
MO.AEventMouseWheel_attach = function AEventMouseWheel_attach(e, h){
   e.altKey = h.altKey;
   e.ctrlKey = h.ctrlKey;
   e.delta = h.wheelDelta;
   if(MO.Window.Browser.isBrowser(MO.EBrowser.FireFox)){
      e.x = h.pageX;
      e.y = h.pageY;
   }else{
      e.x = h.x;
      e.y = h.y;
   }
}
MO.AEventReadyStateChange = function AEventReadyStateChange(n){
   var o = this;
   MO.AEvent.call(o, n, 'readystatechange', 'onreadystatechange');
   o.attach = MO.AEventReadyStateChange_attach;
   return o;
}
MO.AEventReadyStateChange_attach = function AEventReadyStateChange_attach(e, h){
}
MO.AEventResize = function AEventResize(n){
   var o = this;
   MO.AEvent.call(o, n, 'resize', 'onresize');
   o.attach = MO.AEventResize_attach;
   return o;
}
MO.AEventResize_attach = function AEventResize_attach(e, h){
   e.x = h.x;
   e.y = h.y;
}
MO.AEventScroll = function AEventScroll(n){
   var o = this;
   MO.AEvent.call(o, n, 'scroll', 'onscroll');
   o.attach = MO.AEventScroll_attach;
   return o;
}
MO.AEventScroll_attach = function AEventScroll_attach(e, h){
}
MO.AEventTouchEnd = function AEventTouchEnd(n){
   var o = this;
   MO.AEvent.call(o, n, 'touchstart', 'ontouchstart');
   o.attach = MO.AEventTouchEnd_attach;
   return o;
}
MO.AEventTouchEnd_attach = function AEventTouchEnd_attach(e, h){
}
MO.AEventTouchMove = function AEventTouchMove(n){
   var o = this;
   MO.AEvent.call(o, n, 'touchstart', 'ontouchstart');
   o.attach = MO.AEventTouchMove_attach;
   return o;
}
MO.AEventTouchMove_attach = function AEventTouchMove_attach(e, h){
}
MO.AEventTouchStart = function AEventTouchStart(n){
   var o = this;
   MO.AEvent.call(o, n, 'touchstart', 'ontouchstart');
   o.attach = MO.AEventTouchStart_attach;
   return o;
}
MO.AEventTouchStart_attach = function AEventTouchStart_attach(e, h){
}
MO.APtyAttributes = function APtyAttributes(name, linker, splitName, splitValue){
   var o = this;
   MO.AProperty.call(o, name, linker);
   o._splitName  = MO.Lang.String.nvl(splitName, '=');
   o._splitValue = MO.Lang.String.nvl(splitValue, '\n');
   o.load        = MO.APtyAttributes_load;
   o.save        = MO.APtyAttributes_save;
   o.toString    = MO.APtyAttributes_toString;
   return o;
}
MO.APtyAttributes_load = function APtyAttributes_load(instance, xconfig){
   var o = this;
   var name = o._name;
   var attributes = instance[name];
   if(!attributes){
      attributes = instance[name] = new MO.TAttributes();
   }
   var value = xconfig.get(o._linker);
   attributes.split(value, o._splitName, o._splitValue);
}
MO.APtyAttributes_save = function APtyAttributes_save(instance, xconfig){
   var o = this;
   var attributes = instance[o._name];
   if(attributes){
      xconfig.set(o._linker, attributes.join(o._splitName, o._splitValue));
   }
}
MO.APtyAttributes_toString = function APtyAttributes_toString(){
   var o = this;
   return 'linker=' + o._linker + ',split_name=' + o._splitName + ',split_value' + o._splitValue;
}
MO.APtyBoolean = function APtyBoolean(name, linker, value){
   var o = this;
   MO.AProperty.call(o, name, linker);
   o._value    = value ? value : false;
   o.build    = MO.APtyBoolean_build;
   o.load     = MO.APtyBoolean_load;
   o.save     = MO.APtyBoolean_save;
   o.toString = MO.APtyBoolean_toString;
   return o;
}
MO.APtyBoolean_build = function APtyBoolean_build(instance){
   var o = this;
   if(instance[o._name] == null){
      instance[o._name] = o._value;
   }
}
MO.APtyBoolean_load = function APtyBoolean_load(instance, xconfig){
   var o = this;
   var value = xconfig.get(o._linker);
   instance[o._name] = MO.Lang.Boolean.parse(value);
}
MO.APtyBoolean_save = function APtyBoolean_save(instance, xconfig){
   var o = this;
   var value = instance[o._name];
   if(value){
      xconfig.set(o._linker, MO.Lang.Boolean.toString(value));
   }
}
MO.APtyBoolean_toString = function APtyBoolean_toString(){
   var o = this;
   return 'linker=' + o._linker + ',value=' + o._value;
}
MO.APtyBorder = function APtyBorder(name, linker){
   var o = this;
   MO.AProperty.call(o, name, linker);
   o.load     = MO.APtyBorder_load;
   o.save     = MO.APtyBorder_save;
   o.toString = MO.APtyBorder_toString;
   return o;
}
MO.APtyBorder_load = function APtyBorder_load(instance, xconfig){
   var o = this;
   var value = xconfig.get(o._linker);
   instance[o._name].parse(value);
}
MO.APtyBorder_save = function APtyBorder_save(instance, xconfig){
   var o = this;
   var value = instance[o._name];
}
MO.APtyBorder_toString = function APtyBorder_toString(){
   var o = this;
   return 'linker=' + o._linker + ',value=' + o._x + ',' + o._y;
}
MO.APtyConfig = function APtyConfig(n, l){
   var o = this;
   MO.AProperty.call(o, n, l);
   o.force = true;
   o.load  = MO.APtyConfig_load;
   o.save  = MO.Method.empty;
   return o;
}
MO.APtyConfig_load = function APtyConfig_load(v, x){
   v[this.name] = x;
}
MO.APtyEnum = function APtyEnum(n, l, e, d){
   var o = this;
   MO.AProperty.call(o, n, l);
   o._enum    = e;
   o._default = d;
   o.build    = MO.APtyEnum_build;
   o.load     = MO.APtyEnum_load;
   o.save     = MO.APtyEnum_save;
   o.toString = MO.APtyEnum_toString;
   return o;
}
MO.APtyEnum_build = function APtyEnum_build(v){
   var o = this;
   if(v[o._name] == null){
      v[o._name] = o._default;
   }
}
MO.APtyEnum_load = function APtyEnum_load(v, x){
   var o = this;
   v[o._name] = x.get(o._linker);
}
MO.APtyEnum_save = function APtyEnum_save(v, x){
   var o = this;
   x.set(o._linker, v[o._name]);
}
MO.APtyEnum_toString = function APtyEnum_toString(){
   var o = this;
   return 'linker=' + o._linker + ',enum=' + o._enum + ',default=' + o._default;
}
MO.APtyFont = function APtyFont(name, linker, font, size, bold, color) {
   var o = this;
   MO.AProperty.call(o, name, linker);
   o._font  = MO.Lang.Integer.nvl(font);
   o._size  = MO.Lang.Integer.nvl(size);
   o._bold  = MO.Lang.Integer.nvl(bold);
   o._color = MO.Lang.Integer.nvl(color);
   o.load = MO.APtyFont_load;
   o.save = MO.APtyFont_save;
   o.toString = MO.APtyFont_toString;
   return o;
}
MO.APtyFont_load = function APtyFont_load(instance, xconfig) {
   var o = this;
   var value = xconfig.get(o._linker);
   instance[o._name].parse(value);
}
MO.APtyFont_save = function APtyFont_save(instance, xconfig) {
   var o = this;
   var value = instance[o._name];
   if (!value.isEmpty()) {
      xconfig.set(o._linker, value.toString());
   }
}
MO.APtyFont_toString = function APtyFont_toString() {
   var o = this;
   return 'linker=' + o._linker + ',value=' + o._font + ',' + o._size + o._bold + ',' + o._color;
}
MO.APtyInteger = function APtyInteger(name, linker, value){
   var o = this;
   MO.AProperty.call(o, name, linker);
   o._value   = MO.Lang.Integer.nvl(value);
   o.build    = MO.APtyInteger_build;
   o.load     = MO.APtyInteger_load;
   o.save     = MO.APtyInteger_save;
   o.toString = MO.APtyInteger_toString;
   return o;
}
MO.APtyInteger_build = function APtyInteger_build(instance){
   var o = this;
   var name = o._name;
   if(instance[name] == null){
      instance[name] = o._value;
   }
}
MO.APtyInteger_load = function APtyInteger_load(instance, xconfig){
   var o = this;
   var value = xconfig.get(o._linker);
   instance[o._name] = MO.Lang.Integer.parse(value);
}
MO.APtyInteger_save = function APtyInteger_save(instance, xconfig){
   var o = this;
   var value = instance[o._name];
   xconfig.set(o._linker, MO.Lang.Integer.toString(value));
}
MO.APtyInteger_toString = function APtyInteger_toString(){
   var o = this;
   return 'linker=' + o._linker + ',value=' + o._value;
}
MO.APtyNumber = function APtyNumber(n, l, v){
   var o = this;
   MO.AProperty.call(o, n, l);
   o._value   = MO.Lang.Integer.nvl(v);
   o.build    = MO.APtyNumber_build;
   o.toString = MO.APtyNumber_toString;
   return o;
}
MO.APtyNumber_build = function APtyNumber_build(v){
   var o = this;
   if(v[o._name] == null){
      v[o._name] = o._value;
   }
}
MO.APtyNumber_toString = function APtyNumber_toString(){
   var o = this;
   return 'linker=' + o._linker + ',value=' + o._value;
}
MO.APtyPadding = function APtyPadding(name, linker, left, top, right, bottom){
   var o = this;
   MO.AProperty.call(o, name, linker);
   o._left    = MO.Lang.Integer.nvl(left);
   o._top     = MO.Lang.Integer.nvl(top);
   o._right   = MO.Lang.Integer.nvl(right);
   o._bottom  = MO.Lang.Integer.nvl(bottom);
   o.load     = MO.APtyPadding_load;
   o.save     = MO.APtyPadding_save;
   o.toString = MO.APtyPadding_toString;
   return o;
}
MO.APtyPadding_load = function APtyPadding_load(instance, xconfig){
   var o = this;
   var name = o._name;
   var value = xconfig.get(o._linker);
   var padding = instance[name];
   if(!padding){
      padding = instance[name] = new MO.SPadding();
   }
   padding.parse(value);
}
MO.APtyPadding_save = function APtyPadding_save(instance, xconfig){
   var o = this;
   var name = o._name;
   var padding = instance[name];
   if(padding){
      var value = padding.toString()
      xconfig.set(o._linker, value);
   }
}
MO.APtyPadding_toString = function APtyPadding_toString(){
   var o = this;
   return 'linker=' + o._linker + ',value=' + o._left + ',' + o._top + ',' + o._right + ',' + o._bottom;
}
MO.APtyPoint2 = function APtyPoint2(name, linker, x, y){
   var o = this;
   MO.AProperty.call(o, name, linker);
   o._x       = MO.Lang.Integer.nvl(x);
   o._y       = MO.Lang.Integer.nvl(y);
   o.load     = MO.APtyPoint2_load;
   o.save     = MO.APtyPoint2_save;
   o.toString = MO.APtyPoint2_toString;
   return o;
}
MO.APtyPoint2_load = function APtyPoint2_load(instance, xconfig){
   var o = this;
   var value = xconfig.get(o._linker);
   instance[o._name].parse(value);
}
MO.APtyPoint2_save = function APtyPoint2_save(instance, xconfig){
   var o = this;
   var value = instance[o._name];
   if(!value.isEmpty()){
      xconfig.set(o._linker, value.toString());
   }
}
MO.APtyPoint2_toString = function APtyPoint2_toString(){
   var o = this;
   return 'linker=' + o._linker + ',value=' + o._x + ',' + o._y;
}
MO.APtySet = function APtySet(name, linker, search, value){
   var o = this;
   MO.AProperty.call(o, name, linker);
   var code = null;
   if(MO.Lang.String.startsWith(name, '_')){
      code = name.substring(1);
   }else{
      code = name;
   }
   o._code   = MO.Lang.String.toUnderline(code);
   o._search = search;
   o._value  = value;
   o.code     = MO.APtySet_code;
   o.build    = MO.APtySet_build;
   o.load     = MO.APtySet_load;
   o.save     = MO.APtySet_save;
   o.toString = MO.APtySet_toString;
   return o;
}
MO.APtySet_code = function APtySet_code(){
   return this._code;
}
MO.APtySet_build = function APtySet_build(instance){
   var o = this;
   var name = o._name;
   if(instance[name] == null){
      instance[name] = o._value;
   }
}
MO.APtySet_load = function APtySet_load(instance, xconfig){
   var o = this;
   var value = xconfig.get(o._linker)
   instance[o._name] = MO.Lang.Set.containsString(value, o._search);
}
MO.APtySet_save = function APtySet_save(instance, xconfig){
   var o = this;
   var name = o._name;
   var search = o._search;
   var value = instance[name];
   var values = xconfig.get(o._linker);
   var exists = MO.Lang.Set.containsString(xs, search);
   if(value && !exists){
      xconfig.set(name, values + search);
   }else if(!value && exists){
      xconfig.set(name, MO.Lang.String.remove(values, search));
   }
}
MO.APtySet_toString = function APtySet_toString(){
   var o = this;
   return 'linker=' + o._linker + ',value=' + o._value + ',search=' + o._search;
}
MO.APtySize2 = function APtySize2(name, linker, width, height){
   var o = this;
   MO.AProperty.call(o, name, linker);
   o._width   = MO.Lang.Integer.nvl(width);
   o._height  = MO.Lang.Integer.nvl(height);
   o.load     = MO.APtySize2_load;
   o.save     = MO.APtySize2_save;
   o.toString = MO.APtySize2_toString;
   return o;
}
MO.APtySize2_load = function APtySize2_load(instance, xconfig){
   var o = this;
   var name = o._name;
   var value = xconfig.get(o._linker);
   var size = instance[name];
   if(!size){
      size = instance[name] = new MO.SSize2();
   }
   size.parse(value);
}
MO.APtySize2_save = function APtySize2_save(instance, xconfig){
   var o = this;
   var name = o._name;
   var size = instance[name];
   if(size){
      var value = size.toString()
      xconfig.set(o._linker, value);
   }
}
MO.APtySize2_toString = function APtySize2_toString(){
   var o = this;
   return 'linker=' + o._linker + ',value=' + o._width + ',' + o._height;
}
MO.APtyString = function APtyString(n, l, v){
   var o = this;
   MO.AProperty.call(o, n, l);
   o._value    = v ? v : null;
   o.build    = MO.APtyString_build;
   o.toString = MO.APtyString_toString;
   return o;
}
MO.APtyString_build = function APtyString_build(v){
   var o = this;
   if(v[o._name] == null){
      v[o._name] = o._value;
   }
}
MO.APtyString_toString = function APtyString_toString(){
   var o = this;
   return 'linker=' + o._linker + ',value=' + o._value;
}
MO.EUiAlign = new function EUiAlign(){
   var o = this;
   o.Left        = 'left';
   o.Center      = 'center';
   o.Right       = 'right';
   o.Top         = 'up';
   o.Middle      = 'middle';
   o.Bottom      = 'down';
   o.BottomLeft  = 'bl';
   o.BottomRight = 'br';
   return o;
}
MO.EUiAnchor = new function EUiAnchor(){
   var o = this;
   o.None   = 0;
   o.Left   = 1;
   o.Top    = 2;
   o.Right  = 4;
   o.Bottom = 8;
   o.Width  = 5;
   o.Height = 10;
   o.All    = 15;
   return o;
}
MO.EUiBorder = new function EUiBorder(){
   var o = this;
   o.None          = 0;
   o.Square        = 1;
   o.Round         = 2;
   o.RoundIcon     = 3;
   o.RoundDrop     = 4;
   o.RoundTitle    = 5;
   o.RoundIconDrop = 6;
   return o;
}
MO.EUiBorderStyle = new function EUiBorderStyle(){
   var o = this;
   o.Readonly = 1;
   o.Edit     = 2;
   o.Hover    = 3;
   return o;
}
MO.EUiColor = new function EUiColor(){
   var o = this;
   o.Text         = '#0099FF';
   o.TextHover    = '#000000';
   o.TextReadonly = '#000000';
   o.Edit         = '#EBFFFF';
   o.EditHover    = '#EBFFFF';
   o.EditReadonly = '#FEFECB';
   return o;
}
MO.EUiCursor = new function EUiCursor(){
   var o = this;
   o.Default   = 'default';
   o.Auto      = 'auto';
   o.NorthWest = 'NW';
   o.SouthWest = 'SW';
   o.SouthEast = 'SE';
   o.NorthEast = 'NE';
   o.West      = 'W';
   o.South     = 'S';
   o.East      = 'E';
   o.North     = 'N';
   o.Pointer   = 'pointer';
   o.Cross     = 'crosshair';
   o.Move      = 'move';
   return o;
}
MO.EUiDataAction = new function EUiDataAction(){
   var o = this;
   MO.TEnum.call(o);
   o.First     = 'first';
   o.Prior     = 'prior';
   o.Next      = 'next';
   o.Last      = 'last';
   o.Prepare   = 'prepare';
   o.Insert    = 'insert';
   o.Update    = 'update';
   o.Delete    = 'delete';
   return o;
}
MO.EUiDialog = new function EUiDialog(){
   var o = this;
   o.Confirm = 1;
   o.Info    = 2
   o.Warn    = 3;
   o.Error   = 4;
   return o;
}
MO.EUiDirection = new function EUiDirection(){
   var o = this;
   o.Horizontal = 'H';
   o.Vertical   = 'V';
   return o;
}
MO.EUiDock = new function EUiDock(){
   var o = this;
   o.None        = 'None';
   o.LeftTop     = 'LeftTop';
   o.Left        = 'Left';
   o.LeftBottom  = 'LeftBottom';
   o.Top         = 'Top';
   o.RightTop    = 'RightTop';
   o.Right       = 'Right';
   o.RightBottom = 'RightBottom';
   o.Bottom      = 'Bottom';
   o.Center      = 'Center';
   o.Fill        = 'Fill';
   return o;
}
MO.EUiLabelMode = new function EUiLabelMode(){
   var o = this;
   o.All    = 'A';
   o.Label  = 'L';
   o.Hidden = 'H';
   return o;
}
MO.EUiLabelPosition = new function EUiLabelPosition(){
   var o = this;
   o.Left   = 'left';
   o.Right  = 'right';
   o.Top    = 'top';
   o.Bottom = 'bottom';
   return o;
}
MO.EUiLayer = new function EUiLayer(){
   var o = this;
   o.Default = 20000;
   o.Shadow  =  6000;
   o.Disable =  5000;
   o.Drap    = 10000;
   o.Window  = 20000;
   o.Drop    = 40000;
   o.Editor  = 10000;
   o.Border  = 20000;
   o.Move    = 25000;
   o.Search  = 45000;
   o.Message = 45000;
   return o;
}
MO.EUiLayout = new function EUiLayout(){
   var o = this;
   o.Display = 'P';
   o.Search  = 'S';
   o.Design  = 'G';
   o.Insert  = 'I';
   o.Update  = 'U';
   o.Delete  = 'D';
   o.Zoom    = 'Z';
   return o;
}
MO.EUiMerge = new function EUiMerge(){
   var o = this;
   o.Append   = 'append';
   o.Override = 'override';
   o.Disable  = 'disable';
   return o;
}
MO.EUiMode = new function EUiMode(){
   var o = this;
   MO.TEnum.call(o);
   o.View   = 'V';
   o.Insert = 'I';
   o.Update = 'U';
   o.Delete = 'D';
   o.Search = 'S';
   o.Picker = 'P';
   o.Zoom   = 'Z';
   o.Design = 'G';
   o.Print  = 'R';
   return o;
}
MO.EPanel = new function EPanel(){
   var o = this;
   o.Container = 0;
   o.Parent    = 1;
   o.Size      = 8;
   o.Border    = 2;
   o.Edit      = 3;
   o.Focus     = 4;
   o.Design    = 5;
   o.Scroll    = 6;
   o.Shadow    = 7;
   o.Move      = 9;
   o.Disable   = 10;
   o.Drop      = 11;
   return o;
}
MO.EUiPosition = new function EUiPosition(){
   var o = this;
   o.Left   = 'left';
   o.Right  = 'right';
   o.Top    = 'top';
   o.Bottom = 'bottom';
   o.Center = 'center';
   o.Before     = 1;
   o.After      = 2;
   o.LineBefore = 3;
   o.LineAfter  = 4;
   return o;
}
MO.EUiScroll = new function EUiScroll(){
   var o = this;
   o.None           = 'N';
   o.Horizontal     = 'H';
   o.HorizontalAuto = 'HA';
   o.Vertical       = 'V';
   o.VerticalAuto   = 'VA';
   o.Both           = 'B';
   o.BothAuto       = 'BA';
   return o;
}
MO.EUiSize = new function EUiSize(){
   var o = this;
   o.Normal     = 0
   o.Horizontal = 1
   o.Vertical   = 2
   o.Fill       = 3;
   o.Both       = 4;
   return o;
}
MO.EUiTimeUnit = new function EUiTimeUnit() {
   var o = this;
   o.Second = 'second';
   o.Minute = 'minute';
   o.Hour   = 'hour';
   o.Day    = 'day';
   o.Week   = 'week';
   o.Month  = 'month';
   o.Year   = 'year';
   return o;
}
MO.EUiWrap = new function EUiWrap(){
   var o = this;
   o.NextLine = 0;
   o.SameLine = 1;
   return o;
}
MO.MUiBorder = function MUiBorder(o){
   o = MO.Class.inherits(this, o);
   o._borderInner = MO.Class.register(o, [new MO.APtyBorder('_borderInner'), new MO.AGetter('_borderInner')]);
   o._borderOuter = MO.Class.register(o, [new MO.APtyBorder('_borderOuter'), new MO.AGetter('_borderOuter')]);
   o.construct    = MO.MUiBorder_construct;
   o.dispose      = MO.MUiBorder_dispose;
   return o;
}
MO.MUiBorder_construct = function MUiBorder_construct(){
   var o = this;
   o._borderInner = new MO.SBorder();
   o._borderOuter = new MO.SBorder();
}
MO.MUiBorder_dispose = function MUiBorder_dispose(){
   var o = this;
   o._borderInner = MO.Lang.Object.dispose(o._borderInner);
   o._borderOuter = MO.Lang.Object.dispose(o._borderOuter);
}
MO.MUiComponent = function MUiComponent(o){
   o = MO.Class.inherits(this, o);
   o._valid           = MO.Class.register(o, [new MO.APtyBoolean('_valid'), new MO.AGetSet('_valid')]);
   o._guid            = MO.Class.register(o, [new MO.APtyString('_guid'), new MO.AGetSet('_guid')]);
   o._code            = MO.Class.register(o, [new MO.APtyString('_code'), new MO.AGetSet('_code')]);
   o._name            = MO.Class.register(o, [new MO.APtyString('_name'), new MO.AGetSet('_name')]);
   o._label           = MO.Class.register(o, [new MO.APtyString('_label'), new MO.AGetSet('_label')]);
   o._attributes      = MO.Class.register(o, [new MO.APtyAttributes('_attributes'), new MO.AGetter('_attributes')]);
   o._components      = null;
   o._tag             = MO.Class.register(o, new MO.AGetSet('_tag'));
   o.oeInitialize     = MO.MUiComponent_oeInitialize;
   o.oeRelease        = MO.MUiComponent_oeRelease;
   o.attributeGet     = MO.MUiComponent_attributeGet;
   o.attributeSet     = MO.MUiComponent_attributeSet;
   o.topComponent     = MO.MUiComponent_topComponent;
   o.hasComponent     = MO.MUiComponent_hasComponent;
   o.findComponent    = MO.MUiComponent_findComponent;
   o.searchComponent  = MO.MUiComponent_searchComponent;
   o.searchComponents = MO.MUiComponent_searchComponents;
   o.components       = MO.MUiComponent_components;
   o.push             = MO.MUiComponent_push;
   o.remove           = MO.MUiComponent_remove;
   o.clear            = MO.MUiComponent_clear;
   o.process          = MO.MUiComponent_process;
   o.psInitialize     = MO.MUiComponent_psInitialize;
   o.psRelease        = MO.MUiComponent_psRelease;
   o.toString         = MO.MUiComponent_toString;
   o.dispose          = MO.MUiComponent_dispose;
   o.innerDumpInfo    = MO.MUiComponent_innerDumpInfo;
   o.innerDump        = MO.MUiComponent_innerDump;
   return o;
}
MO.MUiComponent_oeInitialize = function MUiComponent_oeInitialize(e){
   return MO.EEventStatus.Continue;
}
MO.MUiComponent_oeRelease = function MUiComponent_oeRelease(e){
   return MO.EEventStatus.Continue;
}
MO.MUiComponent_attributeGet = function MUiComponent_attributeGet(name){
   var value = null;
   var attributes = this._attributes;
   if(attributes){
      value = attributes.get(name);
   }
   return value;
}
MO.MUiComponent_attributeSet = function MUiComponent_attributeSet(name, value){
   var o = this;
   var attributes = o._attributes;
   if(!attributes){
      attributes = o._attributes = new MO.TAttributes();
   }
   attributes.set(name, value);
}
MO.MUiComponent_topComponent = function MUiComponent_topComponent(clazz){
   var component = this;
   if(clazz){
      while(MO.Class.isClass(component._parent, clazz)){
         component = component._parent;
      }
   }else{
      while(component._parent){
         component = component._parent;
      }
   }
   return component;
}
MO.MUiComponent_hasComponent = function MUiComponent_hasComponent(){
   var components = this._components;
   return components ? !components.isEmpty() : false;
}
MO.MUiComponent_findComponent = function MUiComponent_findComponent(name){
   var components = this._components;
   return components ? components.get(name) : null;
}
MO.MUiComponent_searchComponent = function MUiComponent_searchComponent(name){
   var findComponent = null;
   var components = this._components;
   if(components){
      findComponent = components.get(name);
   }
   if(!findComponent){
      var count = components.count();
      for(var i = 0; i < count; i++){
         var component = components.at(i);
         findComponent = component.findComponent(name);
         if(findComponent){
            return findComponent;
         }
      }
   }
   return findComponent;
}
MO.MUiComponent_searchComponents = function MUiComponent_searchComponents(findComponents, clazz){
   var o = this;
   var components = o._components;
   if(components){
      var count = components.count();
      for(var i = 0; i < count; i++){
         var component = components.at(i);
         if(MO.Class.isClass(component, clazz)){
            findComponents.pushUnique(component);
         }
         component.searchComponents(findComponents, clazz);
      }
   }
}
MO.MUiComponent_components = function MUiComponent_components(){
   var o = this;
   var components = o._components;
   if(components == null){
      components = new MO.TDictionary();
      o._components = components;
   }
   return components;
}
MO.MUiComponent_push = function MUiComponent_push(component){
   var o = this;
   if(MO.Class.isClass(component, MO.MUiComponent)){
      var components = o.components();
      var name = component.name();
      component.setParent(o);
      if(name == null){
         name = components.count();
         component.setName(name);
      }
      components.set(name, component);
   }
}
MO.MUiComponent_remove = function MUiComponent_remove(component){
   var o = this;
   if(!MO.Class.isClass(component, MO.MUiComponent)){
      throw new MO.TError(o, 'Parameter is not componet. (component={1})', component);
   }
   var components = o._components;
   if(!components.contains(component.name())){
      throw new MO.TError(o, 'Parameter component is not in this component. (name={1})', component.name());
   }
   components.removeValue(component);
}
MO.MUiComponent_clear = function MUiComponent_clear(){
   var o = this;
   var components = o._components;
   if(components){
      components.clear();
   }
}
MO.MUiComponent_process = function MUiComponent_process(event){
   var o = this;
   var valid = o.__base[event.clazz];
   if(valid){
      event.invokeCd = MO.EEventInvoke.Before;
      var callback = o[event.invoke];
      if(callback){
         var result = callback.call(o, event);
         if((result == MO.EEventStatus.Stop) || (result == MO.EEventStatus.Cancel)){
            return result;
         }
      }
   }
   var components = o._components;
   if(components){
      var count = components.count();
      if(count){
         for(var i = 0; i < count; i++){
            var component = components.at(i);
            var result = component.process(event);
            if(result == MO.EEventStatus.Cancel){
               return result;
            }
         }
      }
   }
   if(valid){
      event.invokeCd = MO.EEventInvoke.After;
      var callback = o[event.invoke];
      if(callback){
         var result = callback.call(o, event);
         if((result == MO.EEventStatus.Stop) || (result == MO.EEventStatus.Cancel)){
            return result;
         }
      }
   }
   return MO.EEventStatus.Continue;
}
MO.MUiComponent_psInitialize = function MUiComponent_psInitialize(){
   var o = this;
   var event = new MO.SUiDispatchEvent(o, 'oeInitialize', MO.MUiComponent);
   o.process(event);
   event.dispose();
}
MO.MUiComponent_psRelease = function MUiComponent_psRelease(){
   var o = this;
   var event = new MO.SUiDispatchEvent(o, 'oeRelease', MO.MUiComponent);
   o.process(event);
   event.dispose();
}
MO.MUiComponent_toString = function MUiComponent_toString(){
   var o = this;
   return MO.Class.dump(o) + ':label=' + o._label;
}
MO.MUiComponent_dispose = function MUiComponent_dispose(){
   var o = this;
   o._attributes = MO.Lang.Object.dispose(o._attributes);
   o._components = MO.Lang.Object.dispose(o._components, true);
   o._tag = null;
}
MO.MUiComponent_innerDumpInfo = function MUiComponent_innerDumpInfo(info){
   var o = this;
   info.append(MO.Class.dump(o));
   info.append(',name=', o._name);
   info.append(',label=', o._label);
}
MO.MUiComponent_innerDump = function MUiComponent_innerDump(info, level){
   var o = this;
   o.innerdumpInfo(info);
   var components = o.components;
   if(components){
      info.appendLine();
      var count = components.count();
      for(var n = 0; n < count; n++){
         var component = components.at(n);
         if(component){
            component.innerDump(info, level + 1);
         }
      }
   }
   return info;
}
MO.MUiContainer = function MUiContainer(o){
   o = MO.Class.inherits(this, o);
   o._scrollCd   = MO.Class.register(o, new MO.APtyEnum('_scrollCd', null, MO.EUiScroll, MO.EUiScroll.None));
   o.createChild = MO.Method.empty;
   o.appendChild = MO.Method.empty;
   o.removeChild = MO.Method.empty;
   return o;
}
MO.MUiControl = function MUiControl(o){
   o = MO.Class.inherits(this, o);
   o._visible       = MO.Class.register(o, [new MO.APtyString('_visible'), new MO.AGetter('_visible')], true);
   o._disable       = MO.Class.register(o, [new MO.APtyString('_disable'), new MO.AGetter('_disable')], false);
   o._dockCd        = MO.Class.register(o, [new MO.APtyString('_dockCd'), new MO.AGetSet('_dockCd')], MO.EUiDock.LeftTop);
   o._anchorCd      = MO.Class.register(o, [new MO.APtyString('_anchorCd'), new MO.AGetSet('_anchorCd')], MO.EUiAnchor.None);
   o._hint          = MO.Class.register(o, [new MO.APtyString('_hint'), new MO.AGetSet('_hint')]);
   o._eventEnable   = null;
   o._eventVisible  = null;
   o._eventResize   = null;
   o._eventRefresh  = null;
   o._eventFrame    = null;
   o.oeEnable       = MO.MUiControl_oeEnable;
   o.oeVisible      = MO.MUiControl_oeVisible;
   o.oeResize       = MO.MUiControl_oeResize;
   o.oeRefresh      = MO.MUiControl_oeRefresh;
   o.oeFrame        = MO.MUiControl_oeFrame;
   o.psEnable       = MO.MUiControl_psEnable;
   o.psVisible      = MO.MUiControl_psVisible;
   o.psResize       = MO.MUiControl_psResize;
   o.psRefresh      = MO.MUiControl_psRefresh;
   o.psFrame        = MO.MUiControl_psFrame;
   o.dispose        = MO.MUiControl_dispose;
   return o;
}
MO.MUiControl_oeEnable = function MUiControl_oeEnable(event){
   var o = this;
   if(event.isBefore()){
      o.setEnable(event.enable);
   }
   return MO.EEventStatus.Continue;
}
MO.MUiControl_oeVisible = function MUiControl_oeVisible(event){
   var o = this;
   if(event.isBefore()){
      o.setVisible(event.visible);
   }
   return MO.EEventStatus.Continue;
}
MO.MUiControl_oeResize = function MUiControl_oeResize(event){
   return MO.EEventStatus.Continue;
}
MO.MUiControl_oeRefresh = function MUiControl_oeRefresh(event){
   return MO.EEventStatus.Continue;
}
MO.MUiControl_oeFrame = function MUiControl_oeFrame(event){
   return MO.EEventStatus.Continue;
}
MO.MUiControl_psEnable = function MUiControl_psEnable(enable){
   var o = this;
   var event = o._eventEnable;
   if(!event){
      event = o._eventEnable = new MO.SUiDispatchEvent(o, 'oeEnable', MO.MUiControl);
   }
   event.enable = enable;
   o.process(event);
}
MO.MUiControl_psVisible = function MUiControl_psVisible(visible){
   var o = this;
   var event = o._eventVisible;
   if(!event){
      event = o._eventVisible = new MO.SUiDispatchEvent(o, 'oeVisible', MO.MUiControl);
   }
   event.visible = visible;
   o.process(event);
}
MO.MUiControl_psResize = function MUiControl_psResize(){
   var o = this;
   var event = o._eventResize;
   if(!event){
      event = o._eventResize = new MO.SUiDispatchEvent(o, 'oeResize', MO.MUiControl);
   }
   o.process(event);
}
MO.MUiControl_psRefresh = function MUiControl_psRefresh(){
   var o = this;
   var event = o._eventRefresh;
   if(!event){
      event = o._eventRefresh = new MO.SUiDispatchEvent(o, 'oeRefresh', MO.MUiControl);
   }
   o.process(event);
}
MO.MUiControl_psFrame = function MUiControl_psFrame(){
   var o = this;
   var event = o._eventFrame;
   if(!event){
      event = o._eventFrame = new MO.SUiDispatchEvent(o, 'oeFrame', MO.MUiControl);
   }
   o.process(event);
}
MO.MUiControl_dispose = function MUiControl_dispose(){
   var o = this;
   o._eventEnable = MO.Lang.Object.dispose(o._eventEnable);
   o._eventVisible = MO.Lang.Object.dispose(o._eventVisible);
   o._eventResize = MO.Lang.Object.dispose(o._eventResize);
   o._eventRefresh = MO.Lang.Object.dispose(o._eventRefresh);
   o._eventFrame = MO.Lang.Object.dispose(o._eventFrame);
}
MO.MUiDataContainer = function MUiDataContainer(o){
   o = MO.Class.inherits(this, o);
   o._dataActionCd = MO.Class.register(o, new MO.AGetter('_dataActionCd'));
   o.loadUnit      = MO.MUiDataContainer_loadUnit;
   o.saveUnit      = MO.MUiDataContainer_saveUnit;
   o.dataView      = MO.MUiDataContainer_dataView;
   o.dataPrepare   = MO.MUiDataContainer_dataPrepare;
   o.dataModify    = MO.MUiDataContainer_dataModify;
   o.dataErase     = MO.MUiDataContainer_dataErase;
   o.dataSave      = MO.MUiDataContainer_dataSave;
   return o;
}
MO.MUiDataContainer_loadUnit = function MUiDataContainer_loadUnit(unit){
   var o = this;
   var event = new MO.SUiDispatchEvent(o, 'oeLoadUnit', MO.MUiDataField);
   event.unit = unit;
   o.process(event);
   event.dispose();
}
MO.MUiDataContainer_saveUnit = function MUiDataContainer_saveUnit(unit){
   var o = this;
   var event = new MO.SUiDispatchEvent(o, 'oeSaveUnit', MO.MUiDataField);
   event.unit = unit;
   o.process(event);
   event.dispose();
}
MO.MUiDataContainer_dataView = function MUiDataContainer_dataView(){
   var o = this;
   var event = new MO.SUiDispatchEvent(o, 'oeDataView', MO.MUiDataField);
   o.process(event);
   event.dispose();
}
MO.MUiDataContainer_dataPrepare = function MUiDataContainer_dataPrepare(){
   var o = this;
   o._dataActionCd = MO.EUiDataAction.Insert;
   var event = new MO.SUiDispatchEvent(o, 'oeDataPrepare', MO.MUiDataField);
   o.process(event);
   event.dispose();
}
MO.MUiDataContainer_dataModify = function MUiDataContainer_dataModify(){
   var o = this;
   o._dataActionCd = MO.EUiDataAction.Update;
   var event = new MO.SUiDispatchEvent(o, 'oeDataEdit', MO.MUiDataField);
   o.process(event);
   event.dispose();
}
MO.MUiDataContainer_dataErase = function MUiDataContainer_dataErase(){
   var o = this;
   o._dataActionCd = MO.EUiDataAction.Delete;
   var event = new MO.SUiDispatchEvent(o, 'oeDataDelete', MO.MUiDataField);
   o.process(event);
   event.dispose();
}
MO.MUiDataContainer_dataSave = function MUiDataContainer_dataSave(){
   var o = this;
   var event = new MO.SUiDispatchEvent(o, 'oeDataSave', MO.MUiDataField);
   o.process(event);
   event.dispose();
}
MO.MUiDataField = function MUiDataField(o){
   o = MO.Class.inherits(this, o);
   o._dataName     = MO.Class.register(o, [new MO.APtyString('_dataName'), new MO.AGetSet('_dataName')]);
   o._dataTypeCd   = MO.Class.register(o, [new MO.APtyString('_dataTypeCd'), new MO.AGetSet('_dataTypeCd')], MO.EDataType.String);
   o._dataRequire  = MO.Class.register(o, [new MO.APtyBoolean('_dataRequire'), new MO.AGetSet('_dataRequire')]);
   o._dataDefault  = MO.Class.register(o, [new MO.APtyString('_dataDefault'), new MO.AGetSet('_dataDefault')]);
   o.oeDataPrepare = MO.MUiDataField_oeDataPrepare;
   return o;
}
MO.MUiDataField_oeDataPrepare = function MUiDataField_oeDataPrepare(event){
   var o = this;
   if(event.isAfter()){
      o.set(o._dataDefault);
   }
   return MO.EEventStatus.Continue;
}
MO.MUiDataProperties = function MUiDataProperties(o){
   o = MO.Class.inherits(this, o);
   o._dataProperties = null;
   o.dataProperties  = MO.MUiDataProperties_dataProperties;
   o.dataPropertyGet = MO.MUiDataProperties_dataPropertyGet;
   o.dataPropertySet = MO.MUiDataProperties_dataPropertySet;
   return o;
}
MO.MUiDataProperties_dataProperties = function MUiDataProperties_dataProperties(n, c){
   var o = this;
   var properties = o._dataProperties;
   if(properties == null){
      properties = o._dataProperties = new MO.TDictionary();
   }
   return properties;
}
MO.MUiDataProperties_dataPropertyGet = function MUiDataProperties_dataPropertyGet(name){
   var o = this;
   var properties = o._dataProperties;
   return properties ? properties.get(n) : null;
}
MO.MUiDataProperties_dataPropertySet = function MUiDataProperties_dataPropertySet(name, value){
   this.dataProperties().set(name, value);
}
MO.MUiDataset = function MUiDataset(o){
   o = MO.Class.inherits(this, o);
   o._dsService       = MO.Class.register(o, [new MO.APtyString('_dsService', 'dataset_service'), new MO.AGetSet('_dsService')]);
   o._dsName          = MO.Class.register(o, [new MO.APtyString('_dsName', 'dataset_name'), new MO.AGetSet('_dsName')]);
   o._dsPageSize      = MO.Class.register(o, [new MO.APtyInteger('_dsPageSize', 'page_size'), new MO.AGetSet('_dsPageSize')], 20);
   o._dsPage          = 0;
   o._dsInsertAction  = MO.Class.register(o, [new MO.APtyString('_dsInsertAction', 'insert_action'), new MO.AGetSet('_dsInsertAction')]);
   o._dsUpdateAction  = MO.Class.register(o, [new MO.APtyString('_dsUpdateAction', 'update_action'), new MO.AGetSet('_dsUpdateAction')]);
   o._dsDeleteAction  = MO.Class.register(o, [new MO.APtyString('_dsDeleteAction', 'delete_action'), new MO.AGetSet('_dsDeleteAction')]);
   o._activeDataset   = null;
   o.oeLoadDataSource = MO.MUiDataContainer_oeLoadDataSource;
   o.oeSaveDataSource = MO.MUiDataContainer_oeSaveDataSource;
   o.dsLoadSource     = MO.MUiDataContainer_dsLoadSource;
   o.dsSaveSource     = MO.MUiDataContainer_dsSaveSource;
   return o;
}
MO.MUiDataContainer_oeLoadDataSource = function MUiDataContainer_oeLoadDataSource(event){
   var o = this;
   if(event.isBefore()){
      var source = event.source;
      o._activeDataset = source.selectDataset(o._dsName);
      var row = source.selectRow();
      o.loadUnit(row);
   }
   return MO.EEventStatus.Contine;
}
MO.MUiDataContainer_oeSaveDataSource = function MUiDataContainer_oeSaveDataSource(event){
   var o = this;
   if(event.isBefore()){
      var source = event.source;
      o._activeDataset = source.selectDataset(o._dsName);
      var row = source.selectRow();
      switch(o._dataActionCd){
         case MO.EUiDataAction.Insert:
            row._statusCd = MO.EDataStatus.Insert;
            break;
         case MO.EUiDataAction.Update:
            row._statusCd = MO.EDataStatus.Update;
            break;
         case MO.EUiDataAction.Delete:
            row._statusCd = MO.EDataStatus.Delete;
            break;
         default:
            throw new TError(o, 'Invalid data action.');
      }
      o.saveUnit(row);
   }
   return MO.EEventStatus.Contine;
}
MO.MUiDataContainer_dsLoadSource = function MUiDataContainer_dsLoadSource(source){
   var o = this;
   var event = new MO.SUiDispatchEvent(o, 'oeLoadDataSource', MO.MUiDataset);
   event.source = source;
   o.process(event);
   event.dispose();
}
MO.MUiDataContainer_dsSaveSource = function MUiDataContainer_dsSaveSource(source){
   var o = this;
   var event = new MO.SUiDispatchEvent(o, 'oeSaveDataSource', MO.MUiDataset);
   event.source = source;
   o.process(event);
   event.dispose();
}
MO.MUiDataset_onDsFetch = function MUiDataset_onDsFetch(g){
   var o = this;
   var ds = g.datasets;
   o.dsDatasetLoad(ds);
}
MO.MUiDataset_onDsCopy = function MUiDataset_onDsCopy(g){
   var o = this;
   o.loadDatasets(g.resultDatasets);
   o.onLoadDatasetEnd();
   o.focus();
}
MO.MUiDataset_onDsPrepare = function MUiDataset_onDsPrepare(g){
   var o = this;
   g.resultDatasets.set('/', null);
   o.loadDatasets(g.resultDatasets);
   o.doPrepare(g.resultRow);
   if(g.invokeSuccess()){
	   return;
   }
   o.onLoadDatasetEnd();
   o.focus();
}
MO.MUiDataset_onDsUpdate = function MUiDataset_onDsUpdate(g){
   var o = this;
   o.loadDatasets(g.resultDatasets);
   o.onLoadDatasetEnd();
   o.focus();
}
MO.MUiDataset_onDsDoUpdate = function MUiDataset_onDsDoUpdate(g){
   var o = this;
   if(!g.invokeSuccess()){
      o.psRefresh();
   }
   if(!g.processFinish){
      o.focus();
      o.lsnsUpdateEnd.process(g);
   }
   o.onLoadDatasetEnd();
}
MO.MUiDataset_onDsDelete = function MUiDataset_onDsDelete(g){
   var o = this;
   o.loadDatasets(g.resultDatasets);
   o.doDelete(g.resultRow);
   o.onLoadDatasetEnd();
   o.focus();
}
MO.MUiDataset_onDsProcess = function MUiDataset_onDsProcess(g){
   var o = this;
   var cb = g.resultCallback;
   if(cb){
      cb.invoke(o, g);
   }
}
MO.MUiDataset_oeDataLoad = function MUiDataset_oeDataLoad(p){
   var o = this;
   if(p.isBefore()){
      var ds = p.source;
      ds.selectDataset();
      ds.selectRow();
   }
   return EEventStatus.Contine;
}
MO.MUiDataset_oeDataSave = function MUiDataset_oeDataSave(p){
   var o = this;
   if(p.isBefore()){
      var ds = p.source;
      ds.selectDataset();
      ds.selectRow();
   }
   return EEventStatus.Contine;
}
MO.MUiDataset_oeDatasetLoad = function MUiDataset_oeDatasetLoad(p){
   var o = this;
   if(p.isBefore()){
      var ds = p.datasets;
      var d = ds.get(o._name);
      o._dataset = d;
      o.onDatasetLoad(d);
   }
   return EEventStatus.Contine;
}
MO.MUiDataset_construct = function MUiDataset_construct(){
   var o = this;
   o._dataViewer = new TDatasetViewer();
}
MO.MUiDataset_loadDataset = function MUiDataset_loadDataset(d){
   var o = this;
   o.dsStore = d;
   d.saveViewer(o._dataViewer);
   o.onLoadDataset(d);
}
MO.MUiDataset_loadDatasets = function MUiDataset_loadDatasets(p){
   var o = this;
   var c = p.count();
   for(var i = 0; i < c; i++){
      var d = p.value(n);
      var dc = o.findByPath(d.name)
      if(!dc){
         return RMessage.fatal(o, null, 'Load dataset failed. (dataset={1}', d.name);
      }
      dc.loadDataset(d);
   }
}
MO.MUiDataset_dsDatasetLoad = function MUiDataset_dsDatasetLoad(p){
   var o = this;
   var e = new TEventProcess(null, o, 'oeDatasetLoad', MUiDataset);
   e.datasets = p;
   o.process(e);
   e.dispose();
}
MO.MUiDataset_toDeepAttributes = function MUiDataset_toDeepAttributes(a, m){
   var o = this;
   if(!a){
      a = new TAttributes();
   }
   var ts = new TList();
   var p = o;
   while(p){
      if(MO.Class.isClass(p, MUiDataset)){
         ts.push(p);
      }
      if(!p.parent){
         break;
      }
      p = p.topControl(MUiDataset);
   }
   for(var n=ts.count; n>=0; n--){
      var p = ts.get(n);
      if(MO.Class.isClass(p, FForm)){
         p.toAttributes(a, m);
      }else if(MO.Class.isClass(m, FTable)){
         var r = p.getCurrentRow();
         if(r){
            r.toAttributes(a, m);
         }
      }
   }
   return a;
}
MO.MUiDataset_dsFetch = function MUiDataset_dsFetch(){
   var o = this;
   var g = new TDatasetFetchArg();
   g.owner = o;
   g.name = o._name;
   g.callback = o.onDsFetch;
   RConsole.find(FDatasetConsole).fetch(g);
}
MO.MUiDataset_dsInitialize = function MUiDataset_dsInitialize(){
   this.callEvent('onFormInitialize', this, this.__initializeEvent);
}
MO.MUiDataset_dsShow = function MUiDataset_dsShow(){
   this.callEvent('onFormShow', this, this.__showEvent);
}
MO.MUiDataset_dsLoaded = function MUiDataset_dsLoaded(){
   this.callEvent('onDatasetLoaded', this, this.__loadedEvent);
}
MO.MUiDataset_dsSearch = function MUiDataset_dsSearch(s){
   var o = this;
   o.psProgress(true);
   var tc = o.topControl();
   var pth = o.fullPath();
   if(s){
      pth = s.fullPath();
   }
   var g = new TDatasetFetchArg(tc.name, tc.formId, o.dsPageSize, 0, true, false, pth);
   g.mode = tc._emode;
   g.searchs.append(o._dataGlobalSearchs);
   g.searchs.append(o._dataSearchs);
   g.orders.append(o._dataGlobalOrders);
   g.orders.append(o._dataOrders);
   o.toDeepAttributes(g.values);
   g.values.append(o._dataValues);
   g.callback = new TInvoke(o, o.onDsFetch);
   RConsole.find(FDatasetConsole).fetch(g);
}
MO.MUiDataset_dsCopy = function MUiDataset_dsCopy(r){
   var o = this;
   o.psProgress(true);
   o.psMode(EMode.Insert);
   var g = new TDatasetFetchArg(o.name, o.formId, o.dsPageSize, 0, true);
   g.form = o;
   g.mode = EMode.Insert;
   o._dataSearchs.clear();
   o._dataSearchs.push(new TSearchItem('OUID', r.get("OUID")));
   g.searchs = o._dataSearchs;
   g.callback = new TInvoke(o, o.onDsCopy);
   if(o.onDsUpdateCheck(g)){
      RConsole.find(FDatasetConsole).fetch(g);
   }
   return;
}
MO.MUiDataset_dsPrepare = function MUiDataset_dsPrepare(cb){
   var o = this;
   o.psProgress(true);
   o.psMode(EMode.Insert);
   var g = new TDatasetPrepareArg(o.name, o.formId);
   g.form = o;
   g.values.append(o._dataValues);
   g.callbackSuccess = cb;
   if(o.onDsPrepareCheck(g)){
      g.callback = new TInvoke(o, o.onDsPrepare);
      RConsole.find(FDatasetConsole).prepare(g);
   }
}
MO.MUiDataset_dsUpdate = function MUiDataset_dsUpdate(u, v){
   var o = this;
   o.psProgress(true);
   o.psMode(EMode.Update);
   o.dsFetch(true);
}
MO.MUiDataset_dsDoUpdate = function MUiDataset_dsDoUpdate(cb, ck){
   var o = this;
   if(!o.psValid()){
      return;
   }
   var t = o.topControl();
   var g = new TDatasetUpdateArg(t.name, o.formId, o.dsName);
   g.form = o;
   g.path = o.fullPath();
   g.mode = o._emode;
   g.codes = o.getDataCodes();
   g.callback = new TInvoke(o, o.onDsDoUpdate);
   g.callbackSuccess = cb;
   if(EMode.Insert == o._emode || EMode.Delete == o._emode){
      g.dataset.rows.append(o.getCurrentRows());
   }else{
      g.dataset.rows.append(o.getChangedRows());
      if(!ck){
         if(!g.hasData()){
            return RMessage.warn(o, RContext.get('MUiDataset:nochange'));
         }
      }
   }
   o.psProgress(true);
   RConsole.find(FDatasetConsole).update(g);
}
MO.MUiDataset_dsDelete = function MUiDataset_dsDelete(u, v){
   var o = this;
   o.psProgress(true);
   o.psMode(EMode.Delete);
   var g = new TDatasetFetchArg(o.name, o.formId, o.dsPageSize, 0, true);
   g.callback = new TInvoke(o, o.onDsDelete);
   g.form = o;
   g.mode = EMode.Delete;
   if(u){
      g.searchs.push(new TSearchItem('OUID', u));
   }
   if(v){
       g.searchs.push(new TSearchItem('OVER', v));
   }
   g.values = o._dataValues;
   if(o.onDsDeleteCheck(g)){
      RConsole.find(FDatasetConsole).fetch(g);
   }
   return;
}
MO.MUiDataset_dsMode = function MUiDataset_dsMode(m){
   var o = this;
   switch(m){
      case EMode.Insert:
         o.dsPrepare();
         break;
      case EMode.Update:
         o.dsUpdate();
         break;
      case EMode.Delete:
         o.dsDelete();
         break;
   }
}
MO.MUiDataset_dsProcess = function MUiDataset_dsProcess(da, cb){
   var o = this;
   if(!o.psValid()){
      return;
   }
   var g = new TDatasetServiceArg(o.topControl().name, da);
   g.form = o;
   g.controlName = o.name;
   o.toDeepAttributes(g.attributes);
   g.codes = o.getDataCodes();
   g.push(o.getCurrentRow());
   g.resultCallback = cb;
   o.psProgress(true);
   g.callback = new TInvoke(o, o.onDsProcess);
   RConsole.find(FFormConsole).process(g);
}
MO.MUiDataset_dsProcessCustom = function MUiDataset_dsProcessCustom(pm, da, cb, cc){
	var o = this;
	if(!cc){
	if(!o.psValid()){
	   return;
	}
	}
	var g = new TDatasetServiceArg(o.topControl().name, da);
	g.form = o;
	g.controlName = o.name;
	g.attributes = pm;
	g.codes = o.getDataCodes();
	g.push(o.getCurrentRow());
	g.resultCallback = cb;
	if(!cc){
	   if(!g.hasData()){
	      return RMessage.warn(o, RContext.get('MUiDataset:nodata'));
	   }
	}
	o.psProgress(true);
	g.callback = new TInvoke(o, o.onDsProcess);
	RConsole.find(FFormConsole).process(g);
}
MO.MUiDataset_dsProcessSelected = function MUiDataset_dsProcessSelected(da, cb){
	var o = this;
	if(!o.psValid()){
	   return;
	}
	   var g = new TDatasetServiceArg(o.topControl().name, da);
	   g.form = o;
	   g.controlName = o.name;
	   o.toDeepAttributes(g.attributes);
	   g.codes = o.getDataCodes();
	   g.rows = o.getSelectedRows();
	   if(g.rows.count > 0){
		  g.resultCallback = cb;
		  o.psProgress(true);
		  g.callback = new TInvoke(o, o.onDsProcess);
		  RConsole.find(FFormConsole).process(g);
		  o.clearSelectRows();
	   }else{
	      return RMessage.warn(o, RContext.get('MUiDataset:norows'));
	   }
}
MO.MUiDataset_dsProcessChanged = function MUiDataset_dsProcessChanged(da, cb){
   var o = this;
   if(!o.psValid()){
      return;
   }
   var g = new TDatasetServiceArg(o.topControl().name, da);
   g.form = o;
   g.controlName = o.name;
   o.toDeepAttributes(g.attributes);
   g.codes = o.getDataCodes();
   g.rows = o.getChangedRows();
   g.resultCallback = cb;
   if(!g.hasData()){
      return RMessage.warn(o, RContext.get('MUiDataset:nochange'));
   }
   o.psProgress(true);
   g.callback = new TInvoke(o, o.onDsProcess);
   RConsole.find(FFormConsole).process(g);
}
MO.MUiDataset_dsProcessAll = function MUiDataset_dsProcessAll(da, cb){
   var o = this;
   if(!o.psValid()){
      return;
   }
   var g = new TDatasetServiceArg(o.topControl().name, da);
   g.form = o;
   g.controlName = o.name;
   o.toDeepAttributes(g.attributes);
   g.codes = o.getDataCodes();
   g.rows = o.getRows();
   g.resultCallback = cb;
   o.psProgress(true);
   g.callback = new TInvoke(o, o.onDsProcess);
   RConsole.find(FFormConsole).process(g);
}
MO.MUiDataset_psProgress = function MUiDataset_psProgress(v){
   var o = this;
   if(o.__progress == v){
      return;
   }
   o.__progress = v;
   var e = o.__progressProcess;
   e.enable = v;
   o.process(e);
}
MO.MUiDataset_psValid = function MUiDataset_psValid(){
   var o = this;
   var e = o.__validProcess;
   var cs = e.controls;
   cs.clear();
   o.process(e);
   if(!cs.isEmpty()){
      var cw = RConsole.find(FCheckWindowConsole).find();
      cw.set(cs);
      cw.show();
      return false;
   }
   return true;
}
MO.MUiDataset_dsIsChanged = function MUiDataset_dsIsChanged(){
   var ds = this.dsStore;
   return ds ? ds.isChanged() : false;
}
MO.MUiDataset_dsCount = function MUiDataset_dsCount(){
   return this.dsStore ? this.dsStore.count : 0;
}
MO.MUiDataset_dsCurrent = function MUiDataset_dsCurrent(){
   var o = this;
   var ds = o.dsStore;
}
MO.MUiDataset_dsMove = function MUiDataset_dsMove(p){
   var o = this;
   var ds = o.dsStore;
   if(null == p && !ds){
      return;
   }
   if(!RInt.isInt(p)){
      if(EDataAction.First == p){
         ds.moveFirst();
      }else if(EDataAction.Prior == p){
         ds.movePrior();
      }else if(EDataAction.Next == p){
         ds.moveNext();
      }else if(EDataAction.Last == p){
         ds.moveLast();
      }else{
         RMessage.fatal(o, null, 'Unknown position (postion={0})', p);
      }
   }else{
      ds.move(p);
   }
   if(MO.Class.isClass(o, MValue)){
      o.loadValue(ds.current());
   }
}
MO.MUiDataset_dsMovePage = function MUiDataset_dsMovePage(p){
   var o = this;
   var ds = o.dsStore;
   if(!RInt.isInt(p)){
      if(EDataAction.First == p){
         p = 0;
      }else if(EDataAction.Prior == p){
         p = ds.pageIndex;
         if(p > 0){
            p--;
         }
      }else if(EDataAction.Next == p){
         p = ds.pageIndex;
         if(p < ds.pageCount - 1){
            p++;
         }
      }else if(EDataAction.Last == p){
         p = ds.pageCount - 1;
      }else{
         RMessage.fatal(o, null, 'Unknown page (page={0})', p);
      }
   }
   if(p != ds.pageIndex){
      o.psProgress(true);
      var t = o.topControl(MUiDataset);
      var g = new TDatasetFetchArg(t.name, t.formId, o.dsPageSize, p, true);
      g.path =  o.fullPath();
      g.mode = t._emode;
      g.searchs.append(o._dataGlobalSearchs);
      g.searchs.append(o._dataSearchs);
      g.orders.append(o._dataGlobalOrders);
      g.orders.append(o._dataOrders);
      g.values = o.toDeepAttributes();
      g.values.append(o._dataValues);
      g.callback = new TInvoke(o, o.onDsFetch);
      RConsole.find(FDatasetConsole).fetch(g);
   }
}
MO.MUiDataset_dsGet = function MUiDataset_dsGet(n){
   return this.dsStore ? this.dsStore.get(n) : '';
}
MO.MUiDataset_dsSet = function MUiDataset_dsSet(n, v){
   if(this.dsStore){
      this.dsStore.set(n, v);
   }
}
MO.MUiDataset_dsRefresh = function MUiDataset_dsRefresh(){
   if(this._dsService){
      this.dsMove(this.dsPage, true);
   }
}
MO.MUiDataset_doSearch = function MUiDataset_doSearch(){
   var o = this;
   var sw = o.dsSearchWindow;
   if(!sw){
      sw = o.dsSearchWindow = top.RControl.create(top.FSearchWindow);
      sw.linkDsControl(o);
   }
   sw.show();
}
MO.MUiDataValue = function MUiDataValue(o){
   o = MO.Class.inherits(this, o, MO.MUiValue);
   o._dataValue = MO.Class.register(o, [new MO.APtyString('_dataValue'), new MO.AGetSet('_dataValue')]);
   o.oeLoadDataRow = MO.Method.empty;
   o.oeSaveDataRow = MO.Method.empty;
   return o;
}
MO.MUiDescriptorPicker = function MUiDescriptorPicker(o){
   o = MO.Class.inherits(this, o);
   o._pickerService = MO.Class.register(o, new MO.APtyString('_pickerService'));
   o._pickerFrame   = MO.Class.register(o, new MO.APtyString('_pickerFrame'));
   o._pickerFields  = MO.Class.register(o, new MO.APtyAttributes('_pickerFields', null, '=', ';'));
   o._pickerWhere   = MO.Class.register(o, new MO.APtyString('_pickerWhere'));
   o._pickerOrder   = MO.Class.register(o, new MO.APtyString('_pickerOrder'));
   o._picker        = null;
   o.onPickerClick  = MO.MUiDescriptorPicker_onPickerClick;
   o.onPickerSelect = MO.MUiDescriptorPicker_onPickerSelect;
   o.testPicker     = MO.MUiDescriptorPicker_testPicker;
   o.doPicker       = MO.Method.empty;
   return o;
}
MO.MUiDescriptorPicker_onPickerClick = function MUiDescriptorPicker_onPickerClick(event){
   var o = this;
   if(o.testPicker()){
      o.doPicker();
   }
}
MO.MUiDescriptorPicker_onPickerSelect = function MUiDescriptorPicker_onPickerSelect(event){
   var o = this;
   var row = event.row;
   var fields = o._pickerFields;
   var dataset = o.findParent(MO.MUiDataset);
   var count = fields.count();
   for(var i = 0; i < count; i++){
      var fieldName = fields.name(i);
      var fieldValue = fields.value(i);
      var dataField = dataset.searchComponent(fieldName);
      var dataValue = row.get(fieldValue);
      dataField.set(dataValue);
   }
}
MO.MUiDescriptorPicker_testPicker = function MUiDescriptorPicker_testPicker(){
   var o = this;
   if(!o._statusEditable){
      return false;
   }
   return !MO.Lang.String.isEmpty(o._pickerFrame);
}
MO.MUiDescriptorZoom = function MUiDescriptorZoom(o){
   o = MO.Class.inherits(this, o);
   o._zoomFrame = MO.Class.register(o, new MO.APtyString('_zoomFrame'));
   o._zoomField = MO.Class.register(o, new MO.APtyString('_zoomField'));
   o.testZoom   = MO.MUiDescriptorZoom_testZoom;
   o.doZoom     = MO.MUiDescriptorZoom_doZoom;
   return o;
}
MO.MUiDescriptorZoom_testZoom = function MUiDescriptorZoom_testZoom(){
   return !MO.Lang.String.isEmpty(this._zoomFrame);
}
MO.MUiDescriptorZoom_doZoom = function MUiDescriptorZoom_doZoom(p){
   MO.RFormSpace.doZoom(this, p);
}
MO.MUiDisplay = function MUiDisplay(o){
   o = MO.Class.inherits(this, o);
   o._displayView   = MO.Class.register(o, new MO.APtySet('_displayView', 'display_mode', MO.EUiMode.View, true));
   o._displayInsert = MO.Class.register(o, new MO.APtySet('_displayInsert', 'display_mode', MO.EUiMode.Insert, false));
   o._displayUpdate = MO.Class.register(o, new MO.APtySet('_displayUpdate', 'display_mode', MO.EUiMode.Update, true));
   o._displayDelete = MO.Class.register(o, new MO.APtySet('_displayDelete', 'display_mode', MO.EUiMode.Delete, false));
   o._displaySearch = MO.Class.register(o, new MO.APtySet('_displaySearch', 'display_mode', MO.EUiMode.Search, false));
   o._displayPicker = MO.Class.register(o, new MO.APtySet('_displayPicker', 'display_mode', MO.EUiMode.Picker, false));
   o._displayZoom   = MO.Class.register(o, new MO.APtySet('_displayZoom', 'display_mode', MO.EUiMode.Zoom, false));
   o._statusDisplay = MO.Class.register(o, new MO.AGetter('_statusDisplay', 'isDisplay'), true);
   o.oeMode         = MO.MUiDisplay_oeMode;
   o.testVisible    = MO.MUiDisplay_testVisible;
   o.setVisible     = MO.Method.empty;
   return o;
}
MO.MUiDisplay_oeMode = function MUiDisplay_oeMode(event){
   var o = this;
   if(event.isBefore()){
      var modeCd = event.modeCd;
      var visible = o._statusDisplay = o.testVisible(modeCd);
      o.setVisible(visible);
   }
}
MO.MUiDisplay_testVisible = function MUiDisplay_testVisible(modeCd){
   var o = this;
   switch(modeCd){
      case MO.EUiMode.View:
         return o._displayView;
      case MO.EUiMode.Search:
         return o._displaySearch;
      case MO.EUiMode.Insert:
         return o._displayInsert;
      case MO.EUiMode.Update:
         return o._displayUpdate;
      case MO.EUiMode.Delete:
         return o._displayDelete;
      case MO.EUiMode.Zoom:
         return o._displayZoom;
   }
   return false;
}
MO.MUiDisplayContrainer = function MUiDisplayContrainer(o){
   o = MO.Class.inherits(this, o);
   o._modeCd    = MO.Class.register(o, new MO.AGetter('_modeCd'), MO.EUiMode.View);
   o._eventMode = null;
   o.construct  = MO.MUiDisplayContrainer_construct;
   o.psMode     = MO.MUiDisplayContrainer_psMode;
   o.psDesign   = MO.MUiDisplayContrainer_psDesign;
   o.dispose    = MO.MUiDisplayContrainer_dispose;
   return o;
}
MO.MUiDisplayContrainer_construct = function MUiDisplayContrainer_construct(){
   var o = this;
   o._eventMode = new MO.SUiDispatchEvent(o, 'oeMode', MO.MUiDisplay);
}
MO.MUiDisplayContrainer_psMode = function MUiDisplayContrainer_psMode(modeCd){
   var o = this;
   o._modeCd = modeCd;
   var event = o._eventMode;
   event.modeCd = modeCd;
   o.process(event);
}
MO.MUiDisplayContrainer_psDesign = function MUiDisplayContrainer_psDesign(m, f){
   var o = this;
   MO.Console.find(FDesignConsole).setFlag(m, f, o);
   var event = new MO.SUiDispatchEvent(o, 'oeDesign', MO.MUiDesign)
   event.mode = m;
   event.flag = f;
   o.process(event);
   event.dispose();
}
MO.MUiDisplayContrainer_dispose = function MUiDisplayContrainer_dispose(){
   var o = this;
   o._eventMode = MO.Lang.Object.Dispose(o._eventMode);
}
MO.MUiDragable = function MUiDragable(o){
   o = MO.Class.inherits(this, o);
   o.onDragStart = MO.Method.virtual(o, 'onDragStart');
   o.onDragMove  = MO.Method.virtual(o, 'onDragMove');
   o.onDragStop  = MO.Method.virtual(o, 'onDragStop');
   return o;
}
MO.MUiEditable = function MUiEditable(o){
   o = MO.Class.inherits(this, o);
   o._editView       = MO.Class.register(o, new MO.APtySet('_editView', 'edit_mode', MO.EUiMode.View, false));
   o._editInsert     = MO.Class.register(o, new MO.APtySet('_editInsert', 'edit_mode', MO.EUiMode.Insert, false));
   o._editUpdate     = MO.Class.register(o, new MO.APtySet('_editUpdate', 'edit_mode', MO.EUiMode.Update, false));
   o._editDelete     = MO.Class.register(o, new MO.APtySet('_editDelete', 'edit_mode', MO.EUiMode.Delete, false));
   o._statusEditable = MO.Class.register(o, new MO.AGetter('_statusEditable', 'isEditable'), true);
   o.oeMode          = MO.MUiEditable_oeMode;
   o.testEditable    = MO.MUiEditable_testEditable;
   o.setEditable     = MO.Class.register(o, new MO.AVirtual('setEditable'));
   return o;
}
MO.MUiEditable_oeMode = function MUiEditable_oeMode(event){
   var o = this;
   if(event.isBefore()){
      var modeCd = event.modeCd;
      var editable = o._statusEditable = o.testEditable(modeCd);
      o.setEditable(editable);
   }
}
MO.MUiEditable_testEditable = function MUiEditable_testEditable(modeCd){
   var o = this;
   switch(modeCd){
      case MO.EUiMode.View:
         return o._editView;
      case MO.EUiMode.Insert:
         return o._editInsert;
      case MO.EUiMode.Update:
         return o._editUpdate;
      case MO.EUiMode.Delete:
         return o._editDelete;
   }
   return false;
}
MO.MUiEditValue = function MUiEditValue(o){
   o = MO.Class.inherits(this, o, MO.MUiTextFormator);
   o._statusEditable = true;
   o._statusEditing  = false;
   o._statusInvalid  = true;
   o._recordText     = null;
   o._recordValue    = null;
   o._currentValue   = null;
   o.isTextChanged   = MO.MUiEditValue_isTextChanged;
   o.isValueChanged  = MO.MUiEditValue_isValueChanged;
   o.formator        = MO.MUiEditValue_formator;
   o.get             = MO.MUiEditValue_get;
   o.set             = MO.MUiEditValue_set;
   o.text            = MO.MUiEditValue_text;
   o.clearValue      = MO.MUiEditValue_clearValue;
   o.resetValue      = MO.MUiEditValue_resetValue;
   o.loadValue       = MO.MUiEditValue_loadValue;
   o.saveValue       = MO.MUiEditValue_saveValue;
   o.recordValue     = MO.MUiEditValue_recordValue;
   o.validValue      = MO.Method.empty;
   o.setEditAble     = MO.MUiEditValue_setEditAble;
   o.doFocus         = MO.MUiEditValue_doFocus;
   o.doBlur          = MO.MUiEditValue_doBlur;
   return o;
}
MO.MUiEditValue_isTextChanged = function MUiEditValue_isTextChanged(){
   var o = this;
   var text = o.text();
   return MO.Lang.String.equals(o._recordText, text);
}
MO.MUiEditValue_isValueChanged = function MUiEditValue_isValueChanged(){
   var o = this;
   var value = o.get();
   return MO.Lang.String.equals(o._recordValue, value);
}
MO.MUiEditValue_formator = function MUiEditValue_formator(){
   return this;
}
MO.MUiEditValue_get = function MUiEditValue_get(){
   throw new MO.TError('Unsupport method.');
}
MO.MUiEditValue_set = function MUiEditValue_set(value){
   throw new MO.TError('Unsupport method.');
}
MO.MUiEditValue_text = function MUiEditValue_text(){
   return this.get();
}
MO.MUiEditValue_clearValue = function MUiEditValue_clearValue(){
   var o = this;
   o._dataValue = MO.Lang.String.EMPTY;
   o.set(MO.Lang.String.EMPTY);
}
MO.MUiEditValue_resetValue = function MUiEditValue_resetValue(){
   var o = this;
   o._dataValue = value;
   o.set(value);
}
MO.MUiEditValue_loadValue = function MUiEditValue_loadValue(c, t){
   var o = this;
}
MO.MUiEditValue_saveValue = function MUiEditValue_saveValue(c, t){
   var o = this;
}
MO.MUiEditValue_recordValue = function MUiEditValue_recordValue(){
   var o = this;
   o._recordText = o.text();
   o._recordValue = o.get();
}
MO.MUiEditValue_setEditAble = function MUiEditValue_setEditAble(flag){
   var o = this;
   o._statusEditable = flag;
}
MO.MUiEditValue_doFocus = function MUiEditValue_doFocus(){
   var o = this;
   if(o._statusEditable){
      o._statusEditing = true;
   }
}
MO.MUiEditValue_doBlur = function MUiEditValue_doBlur(){
   var o = this;
   if(o._statusEditable && o._statusEditing){
      o._statusEditing = false;
   }
}
MO.MUiEditValue_oeClearValue = function MUiEditValue_oeClearValue(e){
   var o = this;
   var d = o.descriptor();
   if(!MO.Lang.String.isEmpty(d.dataName)){
      o.clearValue();
      o.dataValue = o.reget();
   }
   return EEventStatus.Stop;
}
MO.MUiEditValue_oeResetValue = function MUiEditValue_oeResetValue(e){
   var o = this;
   var d = o.descriptor();
   if(!MO.Lang.String.isEmpty(d.dataName)){
      o.resetValue();
      o.dataValue = o.reget();
   }
   return EEventStatus.Stop;
}
MO.MUiEditValue_oeLoadValue = function MUiEditValue_oeLoadValue(e){
   var o = this;
   var d = o.descriptor();
   var vs = e.values;
   var dn = d.dataName;
   if(!MO.Lang.String.isEmpty(dn)){
      if(vs.contains(dn)){
         var v = vs.nvl(dn);
         if(RControl.isInfo(v)){
            o.setInfoPack(v);
         }else{
        	 if(RControl.isGroup(v)){
        		 o.setGroupPack(v);
        	 }else{
                 o.loadValue(vs);
        	 }
         }
         o.recordValue();
         o.dataValue = o.reget();
      }
   }
   return EEventStatus.Stop;
}
MO.MUiEditValue_oeSaveValue = function MUiEditValue_oeSaveValue(e){
   var o = this;
   var d = o.descriptor();
   if(!MO.Lang.String.isEmpty(d.dataName)){
      o.saveValue(e.values);
   }
   return EEventStatus.Stop;
}
MO.MUiEditValue_oeRecordValue = function MUiEditValue_oeRecordValue(){
   var o = this;
   var d = o.descriptor();
   if(!MO.Lang.String.isEmpty(d.dataName)){
      o.recordValue();
   }
   return EEventStatus.Stop;
}
MO.MUiEditValue_commitValue = function MUiEditValue_commitValue(){
   this.__commitValue = MO.Lang.String.nvl(this.reget());
}
MO.MUiEditValue_reget = function MUiEditValue_reget(){
   return this.descriptor().formatValue(this.text());
}
MO.MUiEditValue_setInfoPack = function MUiEditValue_setInfoPack(v){
   var o = this;
   var f = o._info;
   if(!f){
      f = o._info = new MO.TControlInfo();
   }
   f.unpack(v);
   var d = o.descriptor();
   d.setInfo(f);
   if(d != o){
      o.setInfo(f);
   }
}
MO.MUiEditValue_setInfo = function MUiEditValue_setInfo(f){
   this.set(f.value);
}
MO.MUiMargin = function MUiMargin(o){
   o = MO.RClass.inherits(this, o);
   o._margin   = MO.RClass.register(o, [new MO.APtyPadding('_margin'), new MO.AGetter('_margin')]);
   o.construct = MO.MUiMargin_construct;
   o.setMargin = MO.MUiMargin_setMargin;
   o.dispose   = MO.MUiMargin_dispose;
   return o;
}
MO.MUiMargin_construct = function MUiMargin_construct(){
   var o = this;
   o._margin = new MO.SPadding();
}
MO.MUiMargin_setMargin = function MUiMargin_setMargin(left, top, right, bottom){
   this._margin.set(left, top, right, bottom);
}
MO.MUiMargin_dispose = function MUiMargin_dispose(){
   var o = this;
   o._margin = MO.Lang.Object.dispose(o._margin);
}
MO.MUiPadding = function MUiPadding(o){
   o = MO.RClass.inherits(this, o);
   o._padding   = MO.RClass.register(o, [new MO.APtyPadding('_padding'), new MO.AGetter('_padding')]);
   o.construct  = MO.MUiPadding_construct;
   o.setPadding = MO.MUiPadding_setPadding;
   o.dispose    = MO.MUiPadding_dispose;
   return o;
}
MO.MUiPadding_construct = function MUiPadding_construct(){
   var o = this;
   o._padding = new MO.SPadding();
}
MO.MUiPadding_setPadding = function MUiPadding_setPadding(left, top, right, bottom){
   this._padding.set(left, top, right, bottom);
}
MO.MUiPadding_dispose = function MUiPadding_dispose(){
   var o = this;
   o._padding = MO.Lang.Object.dispose(o._padding);
}
MO.MUiProgress = function MUiProgress(o){
   o = MO.Class.inherits(this, o);
   o.oeProgress = MO.Method.virtual(o, 'oeProgress');
   return o;
}
MO.MUiPropertyCheck = function MUiPropertyCheck(o){
   o = MO.Class.inherits(this, o);
   o._valueTrue  = MO.Class.register(o, new MO.APtyString('_valueTrue'), MO.EBoolean.True);
   o._valueFalse = MO.Class.register(o, new MO.APtyString('_valueFalse'), MO.EBoolean.False);
   return o;
}
MO.MUiPropertyEdit = function MUiPropertyEdit(o){
   o = MO.Class.inherits(this, o);
   o._editCaseCd     = MO.Class.register(o, new MO.APtyString('_editCaseCd'));
   o._editPattern    = MO.Class.register(o, new MO.APtyString('_editPattern'));
   o._editLength     = MO.Class.register(o, new MO.APtyInteger('_editLength'));
   o._editComplete   = MO.Class.register(o, new MO.APtyBoolean('_editComplete'));
   o._validLengthMin = MO.Class.register(o, new MO.APtyInteger('_validLengthMin'));
   o._validLengthMax = MO.Class.register(o, new MO.APtyInteger('_validLengthMax'));
   o.oeValid         = MO.MUiPropertyEdit_oeValid;
   return o;
}
MO.MUiPropertyEdit_oeValid = function MUiPropertyEdit_oeValid(e){
   var o = this;
   var r = MO.EEventStatus.Stop;
   if(o._visible && o._validable){
      var t = o.text();
      if(o.validRequire && !MO.RValidator.validRequire(o, t)){
         e.controls.push(o);
         return r;
      }
      if(o.editLength && !MO.RValidator.validTextLength(o, t, o.editLength)){
         e.controls.push(o);
         return r;
      }
   }
   return r;
}
MO.MUiPropertyNumber = function MUiPropertyNumber(o){
   o = MO.Class.inherits(this, o);
   o._valueMin       = MO.Class.register(o, new MO.APtyNumber('_valueMin'));
   o._valueMax       = MO.Class.register(o, new MO.APtyNumber('_valueMax'));
   o._valuePrecision = MO.Class.register(o, new MO.APtyInteger('_valuePrecision'), 3);
   return o;
}
MO.MUiPropertySelect = function MUiPropertySelect(o){
   o = MO.Class.inherits(this, o);
   o._editCaseCd     = MO.Class.register(o, new MO.APtyString('_editCaseCd'));
   o._editPattern    = MO.Class.register(o, new MO.APtyString('_editPattern'));
   o._editLength     = MO.Class.register(o, new MO.APtyInteger('_editLength'));
   o._editComplete   = MO.Class.register(o, new MO.APtyBoolean('_editComplete'));
   o._validLengthMin = MO.Class.register(o, new MO.APtyInteger('_validLengthMin'));
   o._validLengthMax = MO.Class.register(o, new MO.APtyInteger('_validLengthMax'));
   o.oeValid         = MO.MUiPropertySelect_oeValid;
   return o;
}
MO.MUiPropertySelect_oeValid = function MUiPropertySelect_oeValid(e){
   var o = this;
   var r = MO.EEventStatus.Stop;
   if(o._visible && o._validable){
      var t = o.text();
      if(o.validRequire && !MO.RValidator.validRequire(o, t)){
         e.controls.push(o);
         return r;
      }
      if(o.editLength && !MO.RValidator.validTextLength(o, t, o.editLength)){
         e.controls.push(o);
         return r;
      }
   }
   return r;
}
MO.MUiStorage = function MUiStorage(o){
   o = MO.Class.inherits(this, o);
   o._storageCode      = null;
   o._storageObject    = null;
   o.storageGet        = MO.MUiStorage_storageGet;
   o.storageGetBoolean = MO.MUiStorage_storageGetBoolean;
   o.storageSet        = MO.MUiStorage_storageSet;
   o.storageUpdate     = MO.MUiStorage_storageUpdate;
   o.dispose           = MO.MUiStorage_dispose;
   return o;
}
MO.MUiStorage_storageGet = function MUiStorage_storageGet(name, defaultValue){
   var o = this;
   if(name == null){
      throw new MO.TError(o, 'Name is empty.');
   }
   var object = o._storageObject;
   if(!object){
      var storge = MO.Window.storage(MO.EScope.Local);
      var value = storge.get(o._storageCode);
      object = o._storageObject = MO.Json.parse(value, Object);
   }
   if(object){
      var value = object[name];
      if(value != null){
         return value;
      }
   }
   return defaultValue;
}
MO.MUiStorage_storageGetBoolean = function MUiStorage_storageGetBoolean(name, defaultValue){
   var o = this;
   var value = o.storageGet(name, defaultValue);
   return MO.Lang.Boolean.parse(value);
}
MO.MUiStorage_storageSet = function MUiStorage_storageSet(name, value){
   var o = this;
   if(name == null){
      throw new TError(o, 'Name is empty.');
   }
   var object = o._storageObject;
   if(!object){
      object = o._storageObject = new Object();
   }
   object[name] = value;
}
MO.MUiStorage_storageUpdate = function MUiStorage_storageUpdate(){
   var o = this;
   var object = o._storageObject;
   if(object){
      var storge = MO.Window.storage(MO.EScope.Local);
      var value = MO.Json.toString(object);
      storge.set(o._storageCode, value);
   }
}
MO.MUiStorage_dispose = function MUiStorage_dispose(){
   var o = this;
   o._storageCode = null;
   o._storageObject = null;
}
MO.MUiTextFormator = function MUiTextFormator(o){
   o = MO.Class.inherits(this, o);
   o.formatText  = MO.MUiTextFormator_formatText;
   o.formatValue = MO.MUiTextFormator_formatValue;
   return o;
}
MO.MUiTextFormator_formatText = function MUiTextFormator_formatText(value){
   return value;
}
MO.MUiTextFormator_formatValue = function MUiTextFormator_formatValue(text){
   return text;
}
MO.MUiValue = function MUiValue(o){
   o = MO.Class.inherits(this, o);
   o.get = MO.Method.empty;
   o.set = MO.Method.empty;
   return o;
}
MO.Ui = new function MoUiSpace(){return this;}
MO.Gui = new function MoGuiSpace(){return this;}
MO.Dui = new function MoDuiSpace(){return this;}
MO.SUiDispatchEvent = function SUiDispatchEvent(owner, invokeName, clazz){
   var o = this;
   MO.SEvent.call(o);
   o.owner    = owner;
   o.invoke   = invokeName;
   o.clazz    = MO.Class.name(clazz);
   o.invokeCd = MO.EEventInvoke.Unknown;
   o.isBefore = MO.SUiDispatchEvent_isBefore;
   o.isAfter  = MO.SUiDispatchEvent_isAfter;
   o.dispose  = MO.SUiDispatchEvent_dispose;
   o.dump     = MO.SUiDispatchEvent_dump;
   return o;
}
MO.SUiDispatchEvent_isBefore = function SUiDispatchEvent_isBefore(){
   return this.invokeCd == MO.EEventInvoke.Before;
}
MO.SUiDispatchEvent_isAfter = function SUiDispatchEvent_isAfter(){
   return this.invokeCd == MO.EEventInvoke.After;
}
MO.SUiDispatchEvent_dispose = function SUiDispatchEvent_dispose(){
   var o = this;
   o.owner = null;
   o.invoke = null;
   o.clazz = null;
   o.invokeCd = null;
}
MO.SUiDispatchEvent_dump = function SUiDispatchEvent_dump(){
   var o = this;
   return MO.Class.dump(o) + ':owner=' + o.owner + ',type=' + o.type + '.invoke=' + MO.Method.name(o.invoke);
}
MO.SUiFont = function SUiFont(){
   var o = this;
   o.font     = 'Microsoft YaHei';
   o.size     = 16;
   o.bold     = false;
   o.color    = '#FFFFFF';
   o.assign   = MO.SUiFont_assign;
   o.parse    = MO.SUiFont_parse;
   o.toString = MO.SUiFont_toString;
   o.dispose  = MO.SUiFont_dispose;
   return o;
}
MO.SUiFont_assign = function SUiFont_assign(value){
   var o = this;
   o.font = value.font;
   o.size = value.size;
   o.bold = value.bold;
   o.color = value.color;
}
MO.SUiFont_parse = function SUiFont_parse(source){
   var o = this;
   var boldIndex = source.toLowerCase().indexOf('bold');
   if (boldIndex != -1) {
      o.bold = true;
      source = source.replace(source.substring(boldIndex, boldIndex + 4), '');
   }
   var sharpIndex = source.indexOf('#');
   if (sharpIndex != -1) {
      o.color = source.substring(sharpIndex, sharpIndex + 7);
      source = source.replace(o.color, '');
   }
   var sizeIndex = source.toLowerCase().indexOf('px');
   if (sizeIndex != -1) {
      var sizeString = source.substring(sizeIndex - 2, sizeIndex + 2);
      o.size = parseInt(sizeString);
      source = source.replace(sizeString, '');
   }
   o.font = MO.RString.trim(source);
}
MO.SUiFont_toString = function SUiFont_toString(){
   var o = this;
   var result = '';
   if(o.bold){
      result += 'bold';
   }
   if(o.size){
      if(result != ''){
         result += ' ';
      }
      result += o.size + 'px';
   }
   if(o.font){
      if(result != ''){
         result += ' ';
      }
      result += o.font;
   }
   return result;
}
MO.SUiFont_dispose = function SUiFont_dispose(){
   var o = this;
   o.font = null;
   o.size = null;
   o.bold = null;
}
MO.FUiFrameDefineConsole = function FUiFrameDefineConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd       = MO.EScope.Global;
   o._service       = 'content.define.frame';
   o._defines       = null;
   o.lsnsLoaded     = null;
   o.construct      = MO.FUiFrameDefineConsole_construct;
   o.load           = MO.FUiFrameDefineConsole_load;
   return o;
}
MO.FUiFrameDefineConsole_construct = function FUiFrameDefineConsole_construct(){
   var o = this;
   o._defines = new MO.TDictionary();
   o.lsnsLoaded = new MO.TListeners();
}
MO.FUiFrameDefineConsole_load = function FUiFrameDefineConsole_load(name){
   var o = this;
   var defines = o._defines;
   var xconfig = defines.get(name);
   if(xconfig){
      return xconfig;
   }
   var xdocument = new MO.TXmlDocument();
   var xroot = xdocument.root();
   xroot.set('action', 'query');
   var xframe = xroot.create('Frame');
   xframe.set('name', name);
   var url = MO.RDuiService.url(o._service);
   var xresult = MO.Console.find(MO.FXmlConsole).sendSync(url, xdocument);
   var xframes = xresult.nodes();
   var count = xframes.count();
   for(var i = 0; i < count; i++){
      var xframe = xframes.at(i);
      var frameName = xframe.get('name');
      defines.set(frameName, xframe);
   }
   var xframe = defines.get(name);
   if(!xframe){
      throw new MO.TError(o, 'Unknown frame. (name={1])', name);
   }
   return xframe;
}
MO.MUiMenuButton = function MUiMenuButton(o){
   o = MO.Class.inherits(this, o);
   return o;
}
MO.MUiToolButton = function MUiToolButton(o){
   o = MO.Class.inherits(this, o);
   return o;
}
MO.MUiGridCell = function MUiGridCell(o){
   o = MO.Class.inherits(this, o);
   o._grid          = MO.Class.register(o, new MO.AGetSet('_grid'));
   o._column        = MO.Class.register(o, new MO.AGetSet('_column'));
   o._row           = MO.Class.register(o, new MO.AGetSet('_row'));
   o._alignCd       = MO.Class.register(o, new MO.AGetSet('_alignCd'), MO.EUiAlign.Left);
   o._font          = MO.Class.register(o, new MO.AGetSet('_font'));
   o._value         = MO.Class.register(o, new MO.AGetSet('_value'));
   o.construct      = MO.Method.empty;
   o.calculateStyle = MO.MUiGridCell_calculateStyle;
   o.text           = MO.MUiGridCell_text;
   o.setText        = MO.MUiGridCell_setText;
   o.dispose        = MO.MUiGridCell_dispose;
   return o;
}
MO.MUiGridCell_calculateStyle = function MUiGridCell_calculateStyle(style){
   var o = this;
   var row = o._row;
   var column = o._column;
   var grid = o._grid;
   var font = o._font;
   if(font){
      font = row.font();
   }
   if(!font){
      font = column.font();
   }
   if(!font){
      font = grid.rowFont();
   }
   style.font = font;
   var alignCd = o._alignCd;
   if(!alignCd){
      alignCd = column.alignCd();
   }
   style.alignCd = alignCd;
}
MO.MUiGridCell_text = function MUiGridCell_text(){
   var o = this;
   var text = o._column.formatText(o._value);
   return text;
}
MO.MUiGridCell_setText = function MUiGridCell_setText(text){
   var o = this;
   var value = o._column.formatValue(text);
   o.setValue(value);
}
MO.MUiGridCell_dispose = function MUiGridCell_dispose(){
   var o = this;
   o._grid = null;
   o._column = null;
   o._row = null;
   o.__base.FObject.dispose.call(o);
}
MO.MUiGridCellCurrency = function MUiGridCellCurrency(o){
   o = MO.Class.inherits(this, o);
   o.construct = MO.MUiGridCellCurrency_construct;
   o.dispose   = MO.MUiGridCellCurrency_dispose;
   return o;
}
MO.MUiGridCellCurrency_construct = function MUiGridCellCurrency_construct(){
   var o = this;
}
MO.MUiGridCellCurrency_dispose = function MUiGridCellCurrency_dispose(){
   var o = this;
}
MO.MUiGridCellDate = function MUiGridCellDate(o){
   o = MO.Class.inherits(this, o);
   o.construct = MO.MUiGridCellDate_construct;
   o.dispose   = MO.MUiGridCellDate_dispose;
   return o;
}
MO.MUiGridCellDate_construct = function MUiGridCellDate_construct(){
   var o = this;
}
MO.MUiGridCellDate_dispose = function MUiGridCellDate_dispose(){
   var o = this;
}
MO.MUiGridCellPicture = function MUiGridCellPicture(o){
   o = MO.Class.inherits(this, o);
   o.construct = MO.MUiGridCellPicture_construct;
   o.dispose   = MO.MUiGridCellPicture_dispose;
   return o;
}
MO.MUiGridCellPicture_construct = function MUiGridCellPicture_construct(){
   var o = this;
}
MO.MUiGridCellPicture_dispose = function MUiGridCellPicture_dispose(){
   var o = this;
}
MO.MUiGridCellText = function MUiGridCellText(o){
   o = MO.Class.inherits(this, o);
   o.construct = MO.MUiGridCellText_construct;
   o.dispose   = MO.MUiGridCellText_dispose;
   return o;
}
MO.MUiGridCellText_construct = function MUiGridCellText_construct(){
   var o = this;
}
MO.MUiGridCellText_dispose = function MUiGridCellText_dispose(){
   var o = this;
}
MO.MUiGridColumn = function MUiGridColumn(o){
   o = MO.Class.inherits(this, o, MO.MUiPadding, MO.MUiMargin, MO.MUiTextFormator);
   o._grid        = MO.Class.register(o, new MO.AGetSet('_grid'));
   o._index       = MO.Class.register(o, new MO.AGetSet('_index'), -1);
   o._name        = MO.Class.register(o, new MO.AGetSet('_name'));
   o._label       = MO.Class.register(o, new MO.AGetSet('_label'));
   o._dataName    = MO.Class.register(o, new MO.AGetSet('_dataName'));
   o._backColor   = MO.Class.register(o, new MO.AGetSet('_backColor'));
   o._font        = MO.Class.register(o, new MO.AGetter('_font'));
   o._width       = MO.Class.register(o, new MO.AGetSet('_width'), 100);
   o._realWidth   = MO.Class.register(o, new MO.AGetSet('_realWidth'), 100);
   o._alignCd     = MO.Class.register(o, new MO.AGetSet('_alignCd'), MO.EUiAlign.Left);
   o._cellPadding = MO.Class.register(o, new MO.AGetter('_cellPadding'));
   o._cellClass   = null;
   o.construct    = MO.MUiGridColumn_construct;
   o.createCell   = MO.MUiGridColumn_createCell;
   o.findFont     = MO.MUiGridColumn_findFont;
   o.dispose      = MO.MUiGridColumn_dispose;
   return o;
}
MO.MUiGridColumn_construct = function MUiGridColumn_construct(){
   var o = this;
   o.__base.MUiPadding.construct.call(o);
   o.__base.MUiMargin.construct.call(o);
   o._cellPadding = new MO.SPadding();
}
MO.MUiGridColumn_createCell = function MUiGridColumn_createCell(clazz){
   var o = this;
   var cell = MO.Class.create(MO.Runtime.nvl(clazz, o._cellClass));
   cell.setGrid(o._grid);
   cell.setColumn(o);
   return cell;
}
MO.MUiGridColumn_findFont = function MUiGridColumn_findFont(){
   var o = this;
   var font = o._font;
   if(!font){
      font = o._grid.headFont();
   }
   return font;
}
MO.MUiGridColumn_dispose = function MUiGridColumn_dispose(){
   var o = this;
   o._grid = null;
   o._cellPadding = MO.Lang.Object.dispose(o._cellPadding);
   o.__base.MUiMargin.dispose.call(o);
   o.__base.MUiPadding.dispose.call(o);
}
MO.MUiGridColumnCurrency = function MUiGridColumnCurrency(o){
   o = MO.Class.inherits(this, o);
   o._currencyPercent = MO.Class.register(o, new MO.AGetSet('_currencyPercent'), 2);
   o._normalColor     = MO.Class.register(o, new MO.AGetSet('_normalColor'), '#000000');
   o._lowerestColor   = MO.Class.register(o, new MO.AGetSet('_lowerestColor'), '#000000');
   o._lowerColor      = MO.Class.register(o, new MO.AGetSet('_lowerColor'), '#000000');
   o._highColor       = MO.Class.register(o, new MO.AGetSet('_highColor'), '#000000');
   o._highestColor    = MO.Class.register(o, new MO.AGetSet('_highestColor'), '#000000');
   o._negativeColor   = MO.Class.register(o, new MO.AGetSet('_negativeColor'), '#000000');
   o.construct        = MO.MUiGridColumnCurrency_construct;
   o.formatText       = MO.MUiGridColumnCurrency_formatText;
   o.dispose          = MO.MUiGridColumnCurrency_dispose;
   return o;
}
MO.MUiGridColumnCurrency_construct = function MUiGridColumnCurrency_construct(){
   var o = this;
}
MO.MUiGridColumnCurrency_formatText = function MUiGridColumnCurrency_formatText(value){
   var o = this;
   var text = MO.Lang.Float.format(MO.Runtime.nvl(value, 0), null, null, o._currencyPercent, '0');
   return text;
}
MO.MUiGridColumnCurrency_dispose = function MUiGridColumnCurrency_dispose(){
   var o = this;
}
MO.MUiGridColumnDate = function MUiGridColumnDate(o){
   o = MO.Class.inherits(this, o);
   o._dateFormat = MO.Class.register(o, new MO.AGetSet('_dateFormat'), 'YYYY/MM/DD HH24:MI:SS');
   o._dateValue  = null;
   o.construct   = MO.MUiGridColumnDate_construct;
   o.formatText  = MO.MUiGridColumnDate_formatText;
   o.dispose     = MO.MUiGridColumnDate_dispose;
   return o;
}
MO.MUiGridColumnDate_construct = function MUiGridColumnDate_construct(){
   var o = this;
   o._dateValue = new MO.TDate();
}
MO.MUiGridColumnDate_formatText = function MUiGridColumnDate_formatText(value){
   var o = this;
   var date = o._dateValue;
   date.parse(value);
   return date.format(o._dateFormat);
}
MO.MUiGridColumnDate_dispose = function MUiGridColumnDate_dispose(){
   var o = this;
   o._dateValue = MO.Lang.Object.dispose(o._dateValue);
}
MO.MUiGridColumnText = function MUiGridColumnText(o){
   o = MO.Class.inherits(this, o);
   o._textAlign = MO.Class.register(o, new MO.AGetSet('_textAlign'), MO.EUiAlign.Center);
   o.construct = MO.MUiGridColumnText_construct;
   o.dispose   = MO.MUiGridColumnText_dispose;
   return o;
}
MO.MUiGridColumnText_construct = function MUiGridColumnText_construct(){
   var o = this;
}
MO.MUiGridColumnText_dispose = function MUiGridColumnText_dispose(){
   var o = this;
}
MO.MUiGridControl = function MUiGridControl(o){
   o = MO.Class.inherits(this, o);
   o._displayHead   = MO.Class.register(o, new MO.AGetSet('_displayHead'), true);
   o._displayFooter = MO.Class.register(o, new MO.AGetSet('_displayFooter'), true);
   o._displayCount  = MO.Class.register(o, new MO.AGetSet('_displayCount'), 20);
   o._columns       = MO.Class.register(o, new MO.AGetter('_columns'));
   o._headFont      = MO.Class.register(o, new MO.AGetter('_headFont'));
   o._headBackColor = MO.Class.register(o, new MO.AGetSet('_headBackColor'), '#000000');
   o._headHeight    = MO.Class.register(o, new MO.AGetSet('_headHeight'), 32);
   o._rowClass      = MO.FUiGridRow;
   o._rowFont       = MO.Class.register(o, new MO.AGetter('_rowFont'));
   o._rowHeight     = MO.Class.register(o, new MO.AGetSet('_rowHeight'), 28);
   o._rowLimitCount = MO.Class.register(o, new MO.AGetter('_rowLimitCount'), 0);
   o._rows          = MO.Class.register(o, new MO.AGetter('_rows'));
   o._rowPool       = null;
   o._focusRow      = null;
   o._focusCell     = null;
   o.construct      = MO.MUiGridControl_construct;
   o.createRow      = MO.MUiGridControl_createRow;
   o.allocRow       = MO.MUiGridControl_allocRow;
   o.freeRow        = MO.MUiGridControl_freeRow;
   o.pushColumn     = MO.MUiGridControl_pushColumn;
   o.pushRow        = MO.MUiGridControl_pushRow;
   o.clearRows      = MO.MUiGridControl_clearRows;
   o.dispose        = MO.MUiGridControl_dispose;
   return o;
}
MO.MUiGridControl_construct = function MUiGridControl_construct(){
   var o = this;
   o._columns = new MO.TDictionary();
   o._headFont = new MO.SUiFont();
   o._rows = new MO.TObjects();
   o._rowFont = new MO.SUiFont();
   o._rowPool = MO.Class.create(MO.FObjectPool);
}
MO.MUiGridControl_createRow = function MUiGridControl_createRow(clazz){
   var o = this;
   var row = MO.Class.create(MO.Runtime.nvl(clazz, o._rowClass));
   row.setGrid(o);
   var columns = o._columns;
   var count = columns.count();
   for(var i = 0; i < count; i++){
      var column = columns.at(i);
      var cell = column.createCell();
      row.pushCell(cell);
   }
   return row;
}
MO.MUiGridControl_allocRow = function MUiGridControl_allocRow(clazz){
   var o = this;
   var row = null;
   var pool = o._rowPool;
   if(pool.hasFree()){
      row = pool.alloc();
   }else{
      row = o.createRow(clazz);
   }
   return row;
}
MO.MUiGridControl_freeRow = function MUiGridControl_freeRow(row){
   this._rowPool.free(row);
}
MO.MUiGridControl_pushColumn = function MUiGridControl_pushColumn(column){
   var o = this;
   var columns = o._columns;
   var name = column.name();
   column.setGrid(o);
   column.setIndex(columns.count());
   columns.set(name, column);
}
MO.MUiGridControl_pushRow = function MUiGridControl_pushRow(row){
   var o = this;
   row.setGrid(o);
   o._rows.push(row);
}
MO.MUiGridControl_clearRows = function MUiGridControl_clearRows(){
   var o = this;
   var rows = o._rows;
   var count = rows.count();
   for(var i = 0; i < count; i++){
      var row = rows.at(i);
      o.freeRow(row);
   }
   rows.clear();
}
MO.MUiGridControl_dispose = function MUiGridControl_dispose(){
   var o = this;
   o._columns = MO.Lang.Object.dispose(o._columns);
   o._rowClass = null;
   o._rowPool = MO.Lang.Object.dispose(o._rowPool);
   o._rows = MO.Lang.Object.dispose(o._rows);
   o._focusRow = null;
   o._focusCell = null;
   o._rowFont = null;
}
MO.MUiGridRow = function MUiGridRow(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._grid     = MO.Class.register(o, new MO.AGetSet('_grid'));
   o._cells    = MO.Class.register(o, new MO.AGetter('_cells'));
   o._font     = MO.Class.register(o, new MO.AGetSet('_font'));
   o._height   = MO.Class.register(o, new MO.AGetSet('_height'), 28);
   o.construct = MO.MUiGridRow_construct;
   o.findCell  = MO.MUiGridRow_findCell;
   o.pushCell  = MO.MUiGridRow_pushCell;
   o.get       = MO.MUiGridRow_get;
   o.set       = MO.MUiGridRow_set;
   o.dispose   = MO.MUiGridRow_dispose;
}
MO.MUiGridRow_construct = function MUiGridRow_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._cells = new MO.TDictionary();
}
MO.MUiGridRow_findCell = function MUiGridRow_findCell(name){
   var o = this;
   var cell = o._cells.get(name);
   return cell;
}
MO.MUiGridRow_pushCell = function MUiGridRow_pushCell(cell){
   var o = this;
   cell.setRow(o)
   var column = cell.column();
   var dataName = column.dataName();
   o._cells.set(dataName, cell);
}
MO.MUiGridRow_get = function MUiGridRow_get(name, value){
   var o = this;
   var cell = o._cells.get(name);
   return cell.value(value);
}
MO.MUiGridRow_set = function MUiGridRow_set(name, value){
   var o = this;
   var cell = o._cells.get(name);
   return cell.setValue(value);
}
MO.MUiGridRow_dispose = function MUiGridRow_dispose(){
   var o = this;
   o._grid = null;
   o._cells = MO.Lang.Object.dispose(o._cells);
   o.__base.FObject.dispose.call(o);
}
MO.SUiGridCellStyle = function SUiGridCellStyle(){
   var o = this;
   o.alignCd = null;
   o.font    = null;
   o.dispose = MO.SUiGridCellStyle_dispose;
   return o;
}
MO.SUiGridCellStyle_dispose = function SUiGridCellStyle_dispose(){
   var o = this;
   o.alignCd = null;
   o.font = null;
}
MO.EApplicationConstant = new function EApplicationConstant(){
   var o = this;
   o.SessionCode = "mo-session-id";
   o.Resource    = "resource";
   return o;
}
MO.ECanvasChapter = new function ECanvasChapter(){
   var o = this;
   o.Simple = 'simple';
   return o;
}
MO.ECanvasScene = new function ECanvasScene(){
   var o = this;
   o.Simple = 'simple';
   return o;
}
MO.FCanvas3d = function FCanvas3d(o){
   o = MO.Class.inherits(this, o, MO.FE3dCanvas);
   o._scaleRate          = 1;
   o._optionStageProcess = false;
   o._optionResize       = false;
   o._optionMouseCapture = false;
   o._optionAlpha        = false;
   o._optionAntialias    = false;
   o._activeStage        = MO.Class.register(o, new MO.AGetter('_activeStage'));
   o._capturePosition    = null;
   o._captureRotation    = null;
   o._cameraPosition     = null;
   o.construct           = MO.FCanvas3d_construct;
   o.resize              = MO.FCanvas3d_resize;
   o.selectStage         = MO.FCanvas3d_selectStage;
   o.setPanel            = MO.FCanvas3d_setPanel;
   o.dispose             = MO.FCanvas3d_dispose;
   return o;
}
MO.FCanvas3d_construct = function FCanvas3d_construct(){
   var o = this;
   o.__base.FE3dCanvas.construct.call(o);
   o._rotation = new MO.SVector3();
   o._capturePosition = new MO.SPoint2();
   o._captureRotation = new MO.SVector3();
   o._logicSize.set(1920, 1080);
   o._cameraPosition = new MO.SPoint3();
}
MO.FCanvas3d_resize = function FCanvas3d_resize(width, height){
   var o = this;
   o.__base.FE3dCanvas.resize.call(o, width, height);
   var context = o._graphicContext;
   var size = context.size();
   var stage = o._activeStage;
   if(stage){
      var projection = stage.camera().projection();
      projection.size().set(size.width, size.height);
      projection.update();
   }
}
MO.FCanvas3d_selectStage = function FCanvas3d_selectStage(stage){
   var o = this;
   if(stage){
      stage.linkGraphicContext(o);
      stage.region().linkGraphicContext(o);
      if(!stage.technique()){
         stage.selectTechnique(o, MO.FE3dGeneralTechnique);
      }
   }
   o._activeStage = stage;
}
MO.FCanvas3d_setPanel = function FCanvas3d_setPanel(hPanel){
   var o = this;
   hPanel.appendChild(o._hCanvas);
}
MO.FCanvas3d_dispose = function FCanvas3d_dispose(){
   var o = this;
   o._rotation = MO.Lang.Object.dispose(o._rotation);
   o._capturePosition = MO.Lang.Object.dispose(o._capturePosition);
   o._captureRotation = MO.Lang.Object.dispose(o._captureRotation);
   o._cameraPosition = MO.Lang.Object.dispose(o._cameraPosition);
   o.__base.FE3dCanvas.dispose.call(o);
}
MO.FCanvasApplication = function FCanvasApplication(o){
   o = MO.Class.inherits(this, o, MO.FApplication);
   o._desktop      = MO.Class.register(o, new MO.AGetter('_desktop'));
   o._dynamicInfo  = MO.Class.register(o, new MO.AGetter('_dynamicInfo'));
   o.construct     = MO.FCanvasApplication_construct;
   o.createChapter = MO.FCanvasApplication_createChapter;
   o.setup         = MO.FCanvasApplication_setup;
   o.processResize = MO.FCanvasApplication_processResize;
   o.processEvent  = MO.FCanvasApplication_processEvent;
   o.process       = MO.FCanvasApplication_process;
   o.dispose       = MO.FCanvasApplication_dispose;
   return o;
}
MO.FCanvasApplication_construct = function FCanvasApplication_construct(){
   var o = this;
   o.__base.FApplication.construct.call(o);
}
MO.FCanvasApplication_createChapter = function FCanvasApplication_createChapter(code){
   var o = this;
   var chapter = null;
   switch(code){
      case MO.ECanvasChapter.Simple:
         chapter = MO.Class.create(MO.FCanvasSimpleChapter);
         break;
   }
   chapter.linkGraphicContext(o);
   return chapter;
}
MO.FCanvasApplication_setup = function FCanvasApplication_setup(hPanel){
   var o = this;
   var result = o.__base.FApplication.setup.call(o, hPanel);
   if(!result){
      return result;
   }
   o._hPanel = hPanel;
   var desktop = o._desktop = MO.Class.create(MO.FCanvasDesktop);
   desktop.build(hPanel);
   var canvas = desktop.canvas3d();
   var context = canvas.graphicContext();
   if(!context.isValid()){
      return;
   }
   o.linkGraphicContext(canvas);
   var control = o._dynamicInfo = MO.Class.create(MO.FCanvasDynamicInfo);
   control.linkGraphicContext(canvas);
   control.setContext(canvas.graphicContext());
   control.location().set(10, 300);
   control.build();
   return true;
}
MO.FCanvasApplication_processResize = function FCanvasApplication_processResize(event){
   var o = this;
   o.__base.FApplication.processResize.call(o, event);
   var desktop = o._desktop;
   if(desktop){
      desktop.resize();
   }
}
MO.FCanvasApplication_processEvent = function FCanvasApplication_processEvent(event){
   var o = this;
   o.__base.FApplication.processEvent.call(o, event);
   var desktop = o._desktop;
   if(desktop){
      desktop.processEvent(event);
   }
}
MO.FCanvasApplication_process = function FCanvasApplication_process(){
   var o = this;
   o.__base.FApplication.process.call(o);
   o._desktop.process();
}
MO.FCanvasApplication_dispose = function FCanvasApplication_dispose(){
   var o = this;
   o.__base.FApplication.dispose.call(o);
}
MO.FCanvasDesktop = function FCanvasDesktop(o){
   o = MO.Class.inherits(this, o, MO.FDesktop);
   o._orientationCd         = null;
   o._visible               = MO.Class.register(o, new MO.AGetter('_visible'), true);
   o._canvas2d              = MO.Class.register(o, new MO.AGetter('_canvas2d'));
   o._canvas3d              = MO.Class.register(o, new MO.AGetter('_canvas3d'));
   o.onOperationResize      = MO.FCanvasDesktop_onOperationResize;
   o.onOperationOrientation = MO.FCanvasDesktop_onOperationOrientation;
   o.construct              = MO.FCanvasDesktop_construct;
   o.build                  = MO.FCanvasDesktop_build;
   o.resize                 = MO.FCanvasDesktop_resize;
   o.setVisible             = MO.FCanvasDesktop_setVisible;
   o.show                   = MO.FCanvasDesktop_show;
   o.hide                   = MO.FCanvasDesktop_hide;
   o.selectStage            = MO.FCanvasDesktop_selectStage;
   o.dispose                = MO.FCanvasDesktop_dispose;
   return o;
}
MO.FCanvasDesktop_onOperationResize = function FCanvasDesktop_onOperationResize(event){
   var o = this;
   o.__base.FDesktop.onOperationResize.call(o, event);
   o.resize();
}
MO.FCanvasDesktop_onOperationOrientation = function FCanvasDesktop_onOperationOrientation(){
   var o = this;
   o.__base.FDesktop.onOperationOrientation.call(o, event);
   o.resize();
}
MO.FCanvasDesktop_construct = function FCanvasDesktop_construct(){
   var o = this;
   o.__base.FDesktop.construct.call(o);
   o._size.set(1920, 1080);
   o._logicSize.set(1920, 1080);
}
MO.FCanvasDesktop_build = function FCanvasDesktop_build(hPanel){
   var o = this;
   o.__base.FDesktop.build.call(o, hPanel);
   var canvas3d = o._canvas3d = MO.Class.create(MO.FCanvas3d);
   canvas3d.setDesktop(o);
   canvas3d.build(hPanel);
   canvas3d.setPanel(hPanel);
   o.canvasRegister(canvas3d);
   var canvas2d = o._canvas2d = MO.Class.create(MO.FGuiCanvas);
   canvas2d.setDesktop(o);
   canvas2d.build(hPanel);
   canvas2d.setPanel(hPanel);
   canvas2d._hCanvas.style.position = 'absolute';
   o.canvasRegister(canvas2d);
   MO.RE3dEngine.setup();
}
MO.FCanvasDesktop_resize = function FCanvasDesktop_resize(targetWidth, targetHeight){
   var o = this;
   var browser = MO.Window.Browser;
   var sourceWidth = (targetWidth != null) ? targetWidth : window.innerWidth;
   var sourceHeight = (targetHeight != null) ? targetHeight : window.innerHeight;
   var orientationCd = browser.orientationCd();
   if(o._screenSize.equalsData(sourceWidth, sourceHeight) && (o._orientationCd == orientationCd)){
      return;
   }
   o._screenSize.set(sourceWidth, sourceHeight);
   o._orientationCd = orientationCd;
   var pixelRatio = browser.capability().pixelRatio;
   var width = parseInt(sourceWidth * pixelRatio);
   var height = parseInt(sourceHeight * pixelRatio);
   o._size.set(width, height);
   var widthRate = 1;
   var heightRate = 1;
   var logicSize = o._logicSize;
   var isVertical = browser.isOrientationVertical()
   if(isVertical){
      widthRate = width / logicSize.height;
      heightRate = height / logicSize.width;
      o._calculateSize.set(logicSize.height, logicSize.width);
   }else{
      widthRate = width / logicSize.width;
      heightRate = height / logicSize.height;
      o._calculateSize.set(logicSize.width, logicSize.height);
   }
   var sizeRate = o._sizeRate = Math.min(widthRate, heightRate);
   o._logicRate.set(widthRate, heightRate);
   var calculateRate = o._calculateRate;
   if(widthRate > heightRate){
      calculateRate.set(widthRate / sizeRate, 1);
   }else if(widthRate < heightRate){
      calculateRate.set(1, heightRate / sizeRate);
   }else{
      calculateRate.set(1, 1);
   }
   var canvas3d = o._canvas3d;
   var context3d = canvas3d.graphicContext();
   context3d.size().set(width, height);
   if(browser.capability().canvasScale){
      canvas3d.resize(width, height);
   }else{
      canvas3d.resize(sourceWidth, sourceHeight);
   }
   context3d.setViewport(0, 0, width, height)
   if(isVertical){
      o._virtualSize.set(logicSize.height * calculateRate.width, logicSize.width * calculateRate.height);
   }else{
      o._virtualSize.set(logicSize.width * calculateRate.width, logicSize.height * calculateRate.height);
   }
   var canvas2d = o._canvas2d;
   canvas2d.resize(width, height);
   canvas2d.graphicContext().setGlobalScale(sizeRate, sizeRate);
   var stage = o._canvas3d.activeStage();
   o.selectStage(stage);
}
MO.FCanvasDesktop_setVisible = function FCanvasDesktop_setVisible(visible){
   var o = this;
   o._visible = visible;
   o._canvas2d.setVisible(visible);
   o._canvas3d.setVisible(visible);
}
MO.FCanvasDesktop_show = function FCanvasDesktop_show(){
   this.setVisible(true);
}
MO.FCanvasDesktop_hide = function FCanvasDesktop_hide(){
   this.setVisible(false);
}
MO.FCanvasDesktop_selectStage = function FCanvasDesktop_selectStage(stage){
   var o = this;
   o._canvas3d.selectStage(stage);
   if(stage){
      var camera = stage.camera();
      var projection = camera.projection();
      projection.size().assign(o._size);
      projection.update();
   }
   o._activeStage = stage;
}
MO.FCanvasDesktop_dispose = function FCanvasDesktop_dispose(){
   var o = this;
   o._canvas2d = MO.Lang.Object.dispose(o._canvas2d);
   o._canvas3d = MO.Lang.Object.dispose(o._canvas3d);
   o.__base.FDesktop.dispose.call(o);
}
MO.FCanvasDynamicInfo = function FCanvasDynamicInfo(o){
   o = MO.Class.inherits(this, o, MO.FGuiControl);
   o._lastTick    = 0;
   o._name        = 'EngineInfo';
   o._stage       = MO.Class.register(o, new MO.AGetSet('_stage'));
   o._guiManager  = MO.Class.register(o, new MO.AGetSet('_guiManager'));
   o._context     = MO.Class.register(o, new MO.AGetSet('_context'));
   o._ticker      = null;
   o.onPaintBegin = MO.FCanvasDynamicInfo_onPaintBegin;
   o.oeUpdate     = MO.FCanvasDynamicInfo_oeUpdate;
   o.construct    = MO.FCanvasDynamicInfo_construct;
   return o;
}
MO.FCanvasDynamicInfo_onPaintBegin = function FCanvasDynamicInfo_onPaintBegin(event){
   var o = this;
   o.__base.FGuiControl.onPaintBegin.call(o, event);
   if(o._stage == null){
      return;
   }
   if(o._context == null){
      return;
   }
   var graphic = event.graphic;
   var rectangle = event.rectangle;
   var timer = o._stage.timer();
   var stageStatistics = o._stage.statistics();
   var statistics = o._context.statistics();
   var line = 20;
   var locationX = 10;
   var locationY = rectangle.top + line;
   graphic.setFont('16px sans-serif');
   var browser = MO.Window.Browser;
   var browserCapability = browser.capability();
   graphic.drawText(MO.Lang.String.format('Agent         : {1}', browser.code), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText(MO.Lang.String.format(' - Browser    : type={1}, orientation={2}, canvas_scale={3}', browser.typeCd(), browser.orientationCd(), browserCapability.canvasScale), locationX, locationY, '#FFFFFF');
   locationY += line;
   var desktop = o._guiManager.desktop();
   var canvas2d = desktop.canvas2d();
   var canvas3d = desktop.canvas3d();
   var pixelRatio = MO.Window.Browser.capability().pixelRatio;
   graphic.drawText(MO.Lang.String.format('Screen        : ratio={1}, screen_size={2}, size={3}', pixelRatio, desktop.screenSize().toDisplay(), desktop.size().toDisplay()), locationX, locationY, '#FFFFFF');
   locationY += line;
   var hCanvas2d = canvas2d._hCanvas;
   graphic.drawText(MO.Lang.String.format(' - Canvas2d   : size={1}x{2}, inner_size={3}x{4}', hCanvas2d.offsetWidth, hCanvas2d.offsetHeight, hCanvas2d.width, hCanvas2d.height), locationX, locationY, '#FFFFFF');
   locationY += line;
   var hCanvas3d = canvas3d._hCanvas;
   graphic.drawText(MO.Lang.String.format(' - Canvas3d   : size={1}x{2}, inner_size={3}x{4}', hCanvas3d.offsetWidth, hCanvas3d.offsetHeight, hCanvas3d.width, hCanvas3d.height), locationX, locationY, '#FFFFFF');
   locationY += line;
   var context3d = canvas3d.graphicContext();
   graphic.drawText(MO.Lang.String.format('   - Context  : {1}', context3d.size().toDisplay()), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText(MO.Lang.String.format('   - Viewport : {1}', context3d.viewportRectangle()), locationX, locationY, '#FFFFFF');
   locationY += line;
   var camera = o._stage.camera();
   var projection = camera.projection();
   graphic.drawText(MO.Lang.String.format('Stage         :'), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText(MO.Lang.String.format(' - Camera     : position={1}', camera.position()), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText(MO.Lang.String.format(' - Projection : size={1}, znear={2}, zfar={3}', projection.size(), projection.znear(), projection.zfar()), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText(MO.Lang.String.format('Frame         : rate={1}, span=[{2}]', MO.Timer.rate(), stageStatistics._frame), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText(MO.Lang.String.format(' - Process    : {1}', stageStatistics._frameProcess), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText(MO.Lang.String.format(' - Draw       : draw={1}, sort={2}', stageStatistics._frameDraw, stageStatistics._frameDrawSort), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText(MO.Lang.String.format('Draw          : count={1}, triangle={2}', statistics.frameDrawCount(), statistics.frameTriangleCount()), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText(MO.Lang.String.format(' - Const      : count={1}, length={2}', statistics.frameConstCount(), statistics.frameConstLength()), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText(MO.Lang.String.format(' - Alloc      : buffer={1}, texture={2}', statistics.frameBufferCount(), statistics.frameTextureCount()), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText(MO.Lang.String.format(' - Total      : program={1}, layout={2}, vertex={3}, index={4}', statistics.programTotal(), statistics.layoutTotal(), statistics.vertexBufferTotal(), statistics.indexBufferTotal()), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText(MO.Lang.String.format('Investment    : entity={1}, table={2}, pool_item={3}, pool_free={4}', o._investmentEntityCount, o._investmentTableEntityCount, o._investmentPoolItemCount, o._investmentPoolFreeCount), locationX, locationY, '#FFFFFF');
   desktop.resize();
}
MO.FCanvasDynamicInfo_oeUpdate = function FCanvasDynamicInfo_oeUpdate(event){
   var o = this;
   if(o._ticker.process()){
      o.dirty();
   }
   return MO.EEventStatus.Stop;
}
MO.FCanvasDynamicInfo_construct = function FCanvasDynamicInfo_construct(){
   var o = this;
   o.__base.FGuiControl.construct.call(o);
   o._size.set(1024, 512);
   o._ticker = new MO.TTicker(1000);
}
MO.FCanvasScene = function FCanvasScene(o){
   o = MO.Class.inherits(this, o, MO.FScene);
   o._guiManager            = MO.Class.register(o, new MO.AGetter('_guiManager'));
   o.onOperationKeyDown     = MO.FCanvasScene_onOperationKeyDown;
   o.onOperationResize      = MO.FCanvasScene_onOperationResize;
   o.onOperationOrientation = MO.FCanvasScene_onOperationOrientation;
   o.onProcessAfter         = MO.FCanvasScene_onProcessAfter;
   o.construct              = MO.FCanvasScene_construct;
   o.setup                  = MO.FCanvasScene_setup;
   o.active                 = MO.FCanvasScene_active;
   o.deactive               = MO.FCanvasScene_deactive;
   o.processLoaded          = MO.FCanvasScene_processLoaded;
   o.processResize          = MO.FCanvasScene_processResize;
   o.processEvent           = MO.FCanvasScene_processEvent;
   o.dispose                = MO.FCanvasScene_dispose;
   return o;
}
MO.FCanvasScene_onOperationKeyDown = function FCanvasScene_onOperationKeyDown(event){
   var o = this;
   o.__base.FScene.onOperationKeyDown.call(o, event);
   if(event.altKey && (event.keyCode == MO.EKeyCode.P)){
      var control = o._application.dynamicInfo();
      control.setVisible(!control.visible());
   }
}
MO.FCanvasScene_onOperationResize = function FCanvasScene_onOperationResize(event){
   var o = this;
   o.__base.FScene.onOperationResize.call(o, event);
   o.processResize();
}
MO.FCanvasScene_onOperationOrientation = function FCanvasScene_onOperationOrientation(event){
   var o = this;
   o.__base.FScene.onOperationOrientation.call(o, event);
   o.processResize();
}
MO.FCanvasScene_onProcessAfter = function FCanvasScene_onProcessAfter(){
   var o = this;
   o.__base.FScene.onProcessAfter.call(o);
   o._guiManager.process();
}
MO.FCanvasScene_construct = function FCanvasScene_construct(){
   var o = this;
   o.__base.FScene.construct.call(o);
}
MO.FCanvasScene_setup = function FCanvasScene_setup(){
   var o = this;
   o.__base.FScene.setup.call(o);
   var desktop = o._application.desktop();
   var canvas2d = desktop.canvas2d();
   var guiManager = o._guiManager = MO.Class.create(MO.FGuiCanvasManager);
   guiManager.linkGraphicContext(o);
   guiManager.setDesktop(desktop);
   guiManager.setCanvas(canvas2d);
   guiManager.setup();
   var control = o._application.dynamicInfo();
   guiManager.register(control);
}
MO.FCanvasScene_active = function FCanvasScene_active(){
   var o = this;
   o.__base.FScene.active.call(o);
   var stage = o._activeStage;
   var control = o._application.dynamicInfo();
   control.setVisible(false);
   control.setDisplayOrder(10000);
   control.setStage(stage);
   control.setGuiManager(o._guiManager);
   var application = o._application;
   var desktop = application.desktop();
   desktop.selectStage(stage);
}
MO.FCanvasScene_deactive = function FCanvasScene_deactive(){
   var o = this;
   o.__base.FScene.deactive.call(o);
   var application = o._application;
   var desktop = application.desktop();
   desktop.selectStage(null);
}
MO.FCanvasScene_processLoaded = function FCanvasScene_processLoaded(){
   var o = this;
   var event = new MO.SEvent(o);
   MO.Window.lsnsLoaded.process(event);
   event.dispose();
   var desktop = o._application.desktop();
   desktop.show();
}
MO.FCanvasScene_processResize = function FCanvasScene_processResize(event){
   var o = this;
   o._guiManager.dirty();
}
MO.FCanvasScene_processEvent = function FCanvasScene_processEvent(event){
   var o = this;
   o.__base.FScene.processEvent.call(o, event);
   o._guiManager.processEvent(event);
}
MO.FCanvasScene_dispose = function FCanvasScene_dispose(){
   var o = this;
   o._guiManager = MO.Lang.Object.dispose(o._guiManager);
   o.__base.FScene.dispose.call(o);
}
MO.FCanvasSimpleChapter = function FCanvasSimpleChapter(o){
   o = MO.Class.inherits(this, o, MO.FChapter);
   o._code       = MO.ECanvasChapter.Simple;
   o.createScene = MO.FCanvasSimpleChapter_createScene;
   return o;
}
MO.FCanvasSimpleChapter_createScene = function FCanvasSimpleChapter_createScene(code){
   var o = this;
   var scene = null;
   switch(code){
      case MO.ECanvasScene.Simple:
         scene = o._sceneSimple = MO.Class.create(MO.FCanvasSimpleScene);
         break;
   }
   scene.linkGraphicContext(o);
   return scene;
}
MO.FCanvasSimpleScene = function FCanvasSimpleScene(o){
   o = MO.Class.inherits(this, o, MO.FCanvasScene);
   o._code = MO.ECanvasScene.Simple;
   o.setup = MO.FCanvasSimpleScene_setup;
   return o;
}
MO.FCanvasSimpleScene_setup = function FCanvasSimpleScene_setup(){
   var o = this;
   o.__base.FCanvasScene.setup.call(o);
   var stage = o._activeStage = MO.Class.create(MO.FE3dSimpleStage);
   stage.linkGraphicContext(o);
   stage.region().linkGraphicContext(o);
   stage.region().backgroundColor().set(0, 0, 0, 0);
}
MO.FGuiApplication = function FGuiApplication(o){
   o = MO.Class.inherits(this, o, MO.FApplication);
   o._canvas   = MO.Class.register(o, new MO.AGetter('_canvas'));
   o._manager  = MO.Class.register(o, new MO.AGetter('_manager'));
   o._desktop  = MO.Class.register(o, new MO.AGetter('_desktop'));
   o.construct = MO.FGuiApplication_construct;
   o.setup     = MO.FGuiApplication_setup;
   o.process   = MO.FGuiApplication_process;
   o.dispose   = MO.FGuiApplication_dispose;
   return o;
}
MO.FGuiApplication_construct = function FGuiApplication_construct(){
   var o = this;
   o.__base.FApplication.construct.call(o);
   o._chapters = new MO.TDictionary();
   o._eventEnterFrame = new MO.SEvent();
   o._eventLeaveFrame = new MO.SEvent();
}
MO.FGuiApplication_setup = function FGuiApplication_setup(hPanel){
   var o = this;
   var desktop = o._desktop = MO.Class.create(MO.FGuiDesktop);
   desktop.build(hPanel);
   var canvas = o._canvas = desktop.canvas();
   var manager = o._manager = MO.Class.create(MO.FGuiCanvasManager);
   manager.setDesktop(desktop);
   manager.setCanvas(canvas);
}
MO.FGuiApplication_process = function FGuiApplication_process(){
   var o = this;
   o.__base.FApplication.process.call(o);
   o._manager.process();
}
MO.FGuiApplication_dispose = function FGuiApplication_dispose(){
   var o = this;
   o.__base.FApplication.dispose.call(o);
}
MO.FGuiDesktop = function FGuiDesktop(o){
   o = MO.Class.inherits(this, o, MO.FDesktop);
   o._canvas                = MO.Class.register(o, new MO.AGetter('_canvas'));
   o.onOperationResize      = MO.FGuiDesktop_onOperationResize;
   o.onOperationOrientation = MO.FGuiDesktop_onOperationOrientation;
   o.construct              = MO.FGuiDesktop_construct;
   o.build                  = MO.FGuiDesktop_build;
   o.resize                 = MO.FGuiDesktop_resize;
   o.dispose                = MO.FGuiDesktop_dispose;
   return o;
}
MO.FGuiDesktop_onOperationResize = function FGuiDesktop_onOperationResize(event){
   var o = this;
   o.__base.FDesktop.onOperationResize.call(o, event);
   o.resize();
}
MO.FGuiDesktop_onOperationOrientation = function FGuiDesktop_onOperationOrientation(){
   var o = this;
   o.__base.FDesktop.onOperationOrientation.call(o, event);
   o.resize();
}
MO.FGuiDesktop_construct = function FGuiDesktop_construct(){
   var o = this;
   o.__base.FDesktop.construct.call(o);
   o._size.set(1920, 1080);
   o._logicSize.set(1920, 1080);
   o._screenSize.set(0, 0);
}
MO.FGuiDesktop_build = function FGuiDesktop_build(hPanel){
   var o = this;
   o.__base.FDesktop.build.call(o, hPanel);
   var canvas = o._canvas = MO.Class.create(MO.FE2dCanvas);
   canvas.setDesktop(o);
   canvas.build(hPanel);
   canvas.setPanel(hPanel);
   canvas._hCanvas.style.position = 'absolute';
   o.canvasRegister(canvas);
   MO.RE3dEngine.setup();
}
MO.FGuiDesktop_resize = function FGuiDesktop_resize(targetWidth, targetHeight){
   var o = this;
   var width = (targetWidth != null) ? targetWidth : window.innerWidth;
   var height = (targetHeight != null) ? targetHeight : window.innerHeight;
   if(o._screenSize.equalsData(width, height)){
      return;
   }
   o._screenSize.set(width, height);
   var pixelRatio = MO.Browser.capability().pixelRatio;
   MO.Logger.info(o, 'Change screen size. (size={1}x{2}, pixel_ratio={3})', width, height, pixelRatio);
   width *= pixelRatio;
   height *= pixelRatio;
   var widthRate = 1;
   var heightRate = 1;
   var logicSize = o._logicSize;
   if(MO.Browser.isOrientationHorizontal()){
      widthRate = width / logicSize.width;
      heightRate = height / logicSize.height;
      o._calculateSize.set(logicSize.width, logicSize.height);
   }else{
      widthRate = width / logicSize.height;
      heightRate = height / logicSize.width;
      o._calculateSize.set(logicSize.height, logicSize.width);
   }
   var sizeRate = o._sizeRate = Math.min(widthRate, heightRate);
   o._logicRate.set(widthRate, heightRate);
   if(widthRate > heightRate){
      o._calculateRate.set(widthRate / sizeRate, 1);
   }else if(widthRate < heightRate){
      o._calculateRate.set(1, heightRate / sizeRate);
   }else{
      o._calculateRate.set(1, 1);
   }
   o._canvas3d.resize(width, height);
   var canvas = o._canvas;
   canvas.resize(width, height);
   canvas.context().setGlobalScale(sizeRate, sizeRate);
}
MO.FGuiDesktop_dispose = function FGuiDesktop_dispose(){
   var o = this;
   o._canvas3d = MO.Lang.Object.dispose(o._canvas3d);
   o._canvas = MO.Lang.Object.dispose(o._canvas);
   o.__base.FDesktop.dispose.call(o);
}
MO.FTestApplication = function FTestApplication(o){
   o = MO.Class.inherits(this, o, MO.FApplication);
   o.setup = MO.FTestApplication_setup;
   return o;
}
MO.FTestApplication_setup = function FTestApplication_setup(hPanel){
   var o = this;
   var xroot = new MO.TXmlNode('Configuration');
   var identityCode = MO.Window.Browser.agent();
   var xbrowser = xroot.create('Browser')
   MO.Window.Browser.saveConfig(xbrowser);
   var xdesktop = xbrowser.create('Desktop')
   var xcontext2d = xdesktop.create('Context2d');
   var xcontext3d = xdesktop.create('Context3d');
   var hCanvas = MO.Window.Builder.create(hPanel, 'CANVAS');
   var context3d = MO.Graphic.Context3d.createContext(MO.FWglContext, hCanvas);
   if(context3d){
      var parameter = context3d.parameter('VERSION');
      if(parameter){
         identityCode += '|' + parameter;
      }
      var parameter = context3d.parameter('SHADING_LANGUAGE_VERSION');
      if(parameter){
         identityCode += '|' + parameter;
      }
      var parameter = context3d.parameter('UNMASKED_RENDERER_WEBGL');
      if(parameter){
         identityCode += '|' + parameter;
      }
      context3d.saveConfig(xcontext3d);
   }
   xroot.set('identity_code', identityCode);
   MO.Console.find(MO.FServiceConsole).send('cloud.info.device', 'access', xroot);
}
MO.RApplication = function RApplication(){
   var o = this;
   o._workspaces = new MO.TDictionary();
   return o;
}
MO.RApplication.prototype.initialize = function RApplication_initialize(){
   var o = this;
   MO.Window.Browser.construct();
   MO.Window.connect(window);
   MO.Window.Keyboard.construct();
}
MO.RApplication.prototype.findWorkspace = function RApplication_findWorkspace(clazz){
   var o = this;
   var name = MO.Class.name(clazz);
   var workspaces = o._workspaces;
   var workspace = workspaces.get(name);
   if(workspace == null){
      workspace = MO.Class.create(clazz);
      workspaces.set(name, workspace);
   }
   return workspace;
}
MO.RApplication.prototype.release = function RApplication_release(){
   try{
      CollectGarbage();
   }catch(e){
     MO.Logger.error(e);
   }
}
MO.RApplication = new MO.RApplication();
MO.MGuiDispatcher = function MGuiDispatcher(o){
   o = MO.Class.inherits(this, o);
   o.onOperationDown   = MO.MGuiDispatcher_onOperationDown;
   o.onOperationMove   = MO.MGuiDispatcher_onOperationMove;
   o.onOperationUp     = MO.MGuiDispatcher_onOperationUp;
   o.onOperationResize = MO.MGuiDispatcher_onOperationResize;
   o.dispatcherEvent   = MO.MGuiDispatcher_dispatcherEvent;
   return o;
}
MO.MGuiDispatcher_onOperationDown = function MGuiDispatcher_onOperationDown(event){
   var o = this;
}
MO.MGuiDispatcher_onOperationMove = function MGuiDispatcher_onOperationMove(event){
   var o = this;
}
MO.MGuiDispatcher_onOperationUp = function MGuiDispatcher_onOperationUp(event){
   var o = this;
}
MO.MGuiDispatcher_onOperationResize = function MGuiDispatcher_onOperationResize(event){
   var o = this;
}
MO.MGuiDispatcher_dispatcherEvent = function MGuiDispatcher_dispatcherEvent(event){
   var o = this;
   switch(event.code){
      case MO.EEvent.MouseDown:
         o.onOperationDown(event);
         break;
      case MO.EEvent.MouseMove:
         o.onOperationMove(event);
         break;
      case MO.EEvent.MouseUp:
         o.onOperationUp(event);
         break;
      case MO.EEvent.Resize:
         o.onOperationResize(event);
         break;
      default:
         throw new MO.TError('Unknown event type.');
   }
}
MO.MGuiLocation = function MGuiLocation(o){
   o = MO.Class.inherits(this, o);
   o._left   = MO.Class.register(o, [new MO.APtyInteger('_left'), new MO.AGetSet('_left')]);
   o._right  = MO.Class.register(o, [new MO.APtyInteger('_right'), new MO.AGetSet('_right')]);
   o._top    = MO.Class.register(o, [new MO.APtyInteger('_top'), new MO.AGetSet('_top')]);
   o._bottom = MO.Class.register(o, [new MO.APtyInteger('_bottom'), new MO.AGetSet('_bottom')]);
   return o;
}
MO.MGuiSize = function MGuiSize(o){
   o = MO.Class.inherits(this, o);
   o._location   = MO.Class.register(o, [new MO.APtyPoint2('_location'), new MO.AGetter('_location')]);
   o._right      = MO.Class.register(o, [new MO.APtyInteger('_right'), new MO.AGetSet('_right')], 0);
   o._bottom     = MO.Class.register(o, [new MO.APtyInteger('_bottom'), new MO.AGetSet('_bottom')], 0);
   o._size       = MO.Class.register(o, [new MO.APtySize2('_size'), new MO.AGetter('_size')]);
   o._scale      = MO.Class.register(o, [new MO.APtySize2('_scale'), new MO.AGetter('_scale')]);
   o.construct   = MO.MGuiSize_construct;
   o.left        = MO.MGuiSize_left;
   o.setLeft     = MO.MGuiSize_setLeft;
   o.top         = MO.MGuiSize_top;
   o.setTop      = MO.MGuiSize_setTop;
   o.setLocation = MO.MGuiSize_setLocation;
   o.width       = MO.MGuiSize_width;
   o.setWidth    = MO.MGuiSize_setWidth;
   o.height      = MO.MGuiSize_height;
   o.setHeight   = MO.MGuiSize_setHeight;
   o.setSize     = MO.MGuiSize_setSize;
   o.setScale    = MO.MGuiSize_setScale;
   o.setBounds   = MO.MGuiSize_setBounds;
   o.dispose     = MO.MGuiSize_dispose;
   return o;
}
MO.MGuiSize_construct = function MGuiSize_construct(){
   var o = this;
   o._location = new MO.SPoint2(0, 0);
   o._size = new MO.SSize2(128, 128);
   o._scale = new MO.SSize2(1, 1);
}
MO.MGuiSize_left = function MGuiSize_left(){
   return this._location.x;
}
MO.MGuiSize_setLeft = function MGuiSize_setLeft(value){
   this.setLocation(value, this._location.y);
}
MO.MGuiSize_top = function MGuiSize_top(){
   return this._location.y;
}
MO.MGuiSize_setTop = function MGuiSize_setTop(value){
   this.setLocation(this._location.x, value);
}
MO.MGuiSize_setLocation = function MGuiSize_setLocation(x, y){
   this._location.set(x, y);
}
MO.MGuiSize_width = function MGuiSize_width(){
   return this._size.width;
}
MO.MGuiSize_setWidth = function MGuiSize_setWidth(value){
   this.setSize(value, this._size.height);
}
MO.MGuiSize_height = function MGuiSize_height(){
   return this._size.height;
}
MO.MGuiSize_setHeight = function MGuiSize_setHeight(value){
   this.setSize(this._size.width, value);
}
MO.MGuiSize_setSize = function MGuiSize_setSize(width, height){
   this._size.set(width, height);
}
MO.MGuiSize_setScale = function MGuiSize_setScale(width, height){
   this._scale.set(width, height);
}
MO.MGuiSize_setBounds = function MGuiSize_setBounds(left, top, width, height){
   var o = this;
   o.setLocation(left, top);
   o.setSize(width, height);
}
MO.MGuiSize_dispose = function MGuiSize_dispose(){
   var o = this;
   o._location = MO.Lang.Object.dispose(o._location);
   o._size = MO.Lang.Object.dispose(o._size);
   o._scale = MO.Lang.Object.dispose(o._scale);
}
MO.SGuiImage = function SGuiImage(){
   var o = this;
   o.ready       = false;
   o.bitmap      = null;
   o.resource    = null;
   o.onImageLoad = MO.SGuiImage_onImageLoad;
   o.testReady   = MO.SGuiImage_testReady;
   o.load        = MO.SGuiImage_load;
   o.dispose     = MO.SGuiImage_dispose;
   return o;
}
MO.SGuiImage_onImageLoad = function SGuiImage_onImageLoad(event){
   this.ready = true;
}
MO.SGuiImage_testReady = function SGuiImage_testReady(){
   return this.ready;
}
MO.SGuiImage_load = function SGuiImage_load(){
   var o = this;
   o.ready = false;
   var url = null;
   var resource = o.resource;
   if(MO.Lang.String.startsWith(resource, 'url:')){
      url = resource.substring(4);
   }else{
      throw new MO.TError('Invalid url.');
   }
   var bitmap = o.bitmap = MO.Class.create(MO.FImage);
   bitmap.addLoadListener(o, o.onImageLoad);
   bitmap.loadUrl(url);
}
MO.SGuiImage_dispose = function SGuiImage_dispose(){
   var o = this;
   o.bitmap = MO.Lang.Object.dispose(o.bitmap);
   return o;
}
MO.SGuiPaintEvent = function SGuiPaintEvent(){
   var o = this;
   o.graphic         = null;
   o.parentRectangle = new MO.SRectangle();
   o.rectangle       = new MO.SRectangle();
   o.free            = MO.SGuiPaintEvent_free;
   o.dispose         = MO.SGuiPaintEvent_dispose;
   return o;
}
MO.SGuiPaintEvent_free = function SGuiPaintEvent_free(){
   var o = this;
   o.graphic = null;
   return o;
}
MO.SGuiPaintEvent_dispose = function SGuiPaintEvent_dispose(){
   var o = this;
   o.parentRectangle = MO.Lang.Object.dispose(o.parentRectangle);
   o.rectangle = MO.Lang.Object.dispose(o.rectangle);
   return o;
}
MO.SGuiUpdateEvent = function SGuiUpdateEvent(){
   var o = this;
   o.flag      = false;
   o.rectangle = new MO.SRectangle();
   o.isBefore  = MO.SGuiUpdateEvent_isBefore;
   o.isAfter   = MO.SGuiUpdateEvent_isAfter;
   o.dispose   = MO.SGuiUpdateEvent_dispose;
   return o;
}
MO.SGuiUpdateEvent_isBefore = function SGuiUpdateEvent_isBefore(){
   return this.flag;
}
MO.SGuiUpdateEvent_isAfter = function SGuiUpdateEvent_isAfter(){
   return !this.flag;
}
MO.SGuiUpdateEvent_dispose = function SGuiUpdateEvent_dispose(){
   var o = this;
   o.rectangle = MO.Lang.Object.dispose(o.rectangle);
   return o;
}
MO.FGuiAction = function FGuiAction(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MListener, MO.MTimelineAction);
   o._controls          = MO.Class.register(o, [new MO.AGetter('_controls')]);
   o._listenersProcess  = MO.Class.register(o, new MO.AListener('_listenersProcess', MO.EEvent.Process));
   o._listenersComplete = MO.Class.register(o, new MO.AListener('_listenersComplete', MO.EEvent.Complete));
   o.construct          = MO.FGuiAction_construct;
   o.push               = MO.FGuiAction_push;
   o.startControl       = MO.FGuiAction_startControl;
   o.start              = MO.FGuiAction_start;
   o.processControl     = MO.FGuiAction_processControl;
   o.process            = MO.FGuiAction_process;
   o.dispose            = MO.FGuiAction_dispose;
   return o;
}
MO.FGuiAction_construct = function FGuiAction_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o.__base.MTimelineAction.construct.call(o);
   o._controls = new MO.TObjects();
}
MO.FGuiAction_push = function FGuiAction_push(control){
   this._controls.push(control);
}
MO.FGuiAction_startControl = function FGuiAction_startControl(context, control){
   var o = this;
}
MO.FGuiAction_start = function FGuiAction_start(context){
   var o = this;
   o.__base.MTimelineAction.start.call(o);
   var controls = o._controls;
   var count = controls.count();
   for(var i = 0; i < count; i++){
      var control = controls.at(i);
      o.startControl(context, control);
   }
}
MO.FGuiAction_processControl = function FGuiAction_processControl(context, control){
   var o = this;
}
MO.FGuiAction_process = function FGuiAction_process(context){
   var o = this;
   o.__base.MTimelineAction.process.call(o);
   var controls = o._controls;
   var count = controls.count();
   for(var i = 0; i < count; i++){
      var control = controls.at(i);
      o.processControl(context, control);
   }
}
MO.FGuiAction_dispose = function FGuiAction_dispose(){
   var o = this;
   o._controls = MO.Lang.Object.dispose(o._controls);
   o.__base.MTimelineAction.dispose.call(o);
   o.__base.MListener.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FGuiActionAlpha = function FGuiActionAlpha(o){
   o = MO.Class.inherits(this, o, MO.FGuiAction);
   o._alphaBegin    = MO.Class.register(o, [new MO.AGetSet('_alphaBegin')], 0);
   o._alphaEnd      = MO.Class.register(o, [new MO.AGetSet('_alphaEnd')], 1);
   o._alphaInterval = MO.Class.register(o, [new MO.AGetSet('_alphaInterval')], 0.1);
   o._alphaCurrent  = 0;
   o._eventProcess  = null;
   o._eventFinish   = null;
   o.construct      = MO.FGuiActionAlpha_construct;
   o.doComplete     = MO.FGuiActionAlpha_doComplete;
   o.startControl   = MO.FGuiActionAlpha_startControl;
   o.processControl = MO.FGuiActionAlpha_processControl;
   o.dispose        = MO.FGuiActionAlpha_dispose;
   return o;
}
MO.FGuiActionAlpha_construct = function FGuiActionAlpha_construct(){
   var o = this;
   o.__base.FGuiAction.construct.call(o);
   o._eventProcess = new MO.SEvent();
   o._eventFinish = new MO.SEvent();
}
MO.FGuiActionAlpha_doComplete = function FGuiActionAlpha_doComplete(){
   var o = this;
   var event = o._eventProcess;
   o.processCompleteListener(event);
   o._alphaCurrent = o._alphaEnd;
   o._statusStop = true;
}
MO.FGuiActionAlpha_startControl = function FGuiActionAlpha_startControl(context, control){
   var o = this;
   o.__base.FGuiAction.startControl.call(o);
   o._alphaCurrent = o._alphaBegin;
}
MO.FGuiActionAlpha_processControl = function FGuiActionAlpha_processControl(context, control){
   var o = this;
   o.__base.FGuiAction.processControl.call(o);
   o._alphaCurrent += o._alphaInterval;
   if(o._alphaInterval > 0){
      if(o._alphaCurrent >= o._alphaEnd){
         o.doComplete();
      }
   }else if(o._alphaInterval < 0){
      if(o._alphaCurrent <= o._alphaEnd){
         o.doComplete();
      }
   }else{
      o.doComplete();
   }
   if(!o._statusStop){
      var event = o._eventProcess;
      event.alpha = o._alphaCurrent;
      o.processProcessListener(event);
   }
   control.doActionAlpha(o._alphaCurrent);
}
MO.FGuiActionAlpha_dispose = function FGuiActionAlpha_dispose(){
   var o = this;
   o._eventProcess = MO.Lang.Object.dispose(o._eventProcess);
   o._eventFinish = MO.Lang.Object.dispose(o._eventFinish);
   o.__base.FGuiAction.dispose.call(o);
}
MO.FGuiComponent = function FGuiComponent(o){
   o = MO.Class.inherits(this, o, MO.FComponent, MO.MUiComponent, MO.MProperty);
   o.dispose = MO.FGuiComponent_dispose;
   return o;
}
MO.FGuiComponent_dispose = function FGuiComponent_dispose(){
   var o = this;
   o.__base.MUiComponent.dispose.call(o);
   o.__base.FComponent.dispose.call(o);
}
MO.FGuiContainer = function FGuiContainer(o){
   o = MO.Class.inherits(this, o, MO.FGuiControl, MO.MUiContainer);
   o.createChild = MO.FGuiContainer_createChild;
   return o;
}
MO.FGuiContainer_createChild = function FGuiContainer_createChild(xconfig){
   var o = this;
   var child = MO.RGuiControl.newInstance(xconfig);
   child._parent = o;
   return child;
}
MO.FGuiControl = function FGuiControl(o){
   o = MO.Class.inherits(this, o, MO.FGuiComponent, MO.MUiControl, MO.MGraphicObject, MO.MRenderableLinker, MO.MListener, MO.MUiMargin, MO.MUiPadding, MO.MUiBorder, MO.MGuiSize);
   o._optionScale            = MO.Class.register(o, [new MO.AGetter('_optionScale')], true);
   o._alpha                  = MO.Class.register(o, [new MO.APtyString('_alpha'), new MO.AGetSet('_alpha')], 1);
   o._displayOrder           = MO.Class.register(o, [new MO.APtyString('_displayOrder'), new MO.AGetSet('_displayOrder')], 0);
   o._foreColor              = MO.Class.register(o, [new MO.APtyString('_foreColor'), new MO.AGetSet('_foreColor')], '#FFFFFF');
   o._foreFont               = MO.Class.register(o, [new MO.APtyFont('_foreFont'), new MO.AGetSet('_foreFont')]);
   o._backColor              = MO.Class.register(o, [new MO.APtyString('_backColor'), new MO.AGetSet('_backColor')]);
   o._backFont               = MO.Class.register(o, [new MO.APtyFont('_backFont'), new MO.AGetSet('_backFont')]);
   o._backResource           = MO.Class.register(o, [new MO.APtyString('_backResource'), new MO.AGetSet('_backResource')]);
   o._backGrid               = MO.Class.register(o, [new MO.APtyPadding('_backGrid'), new MO.AGetter('_backGrid')]);
   o._backHoverColor         = MO.Class.register(o, [new MO.APtyString('_backHoverColor'), new MO.AGetSet('_backHoverColor')]);
   o._backHoverResource      = MO.Class.register(o, [new MO.APtyString('_backHoverResource'), new MO.AGetSet('_backHoverResource')]);
   o._backHoverGrid          = MO.Class.register(o, [new MO.APtyPadding('_backHoverGrid'), new MO.AGetter('_backHoverGrid')]);
   o._manager                = MO.Class.register(o, new MO.AGetSet('_manager'));
   o._statusReady            = false;
   o._statusDirty            = true;
   o._statusHover            = false;
   o._backImage              = null;
   o._backHoverResource      = null;
   o._clientRectangle        = MO.Class.register(o, new MO.AGetter('_clientRectangle'));
   o._parentRectangle        = MO.Class.register(o, new MO.AGetter('_parentRectangle'));
   o._eventRectangle         = null;
   o._operationDownListeners = MO.Class.register(o, new MO.AListener('_operationDownListeners', MO.EEvent.OperationDown));
   o._operationMoveListeners = MO.Class.register(o, new MO.AListener('_operationMoveListeners', MO.EEvent.OperationMove));
   o._operationUpListeners   = MO.Class.register(o, new MO.AListener('_operationUpListeners', MO.EEvent.OperationUp));
   o._paintEvent             = null;
   o.onUpdate                = MO.FGuiControl_onUpdate;
   o.onPaintBegin            = MO.FGuiControl_onPaintBegin;
   o.onPaintEnd              = MO.FGuiControl_onPaintEnd;
   o.onOperationDown         = MO.FGuiControl_onOperationDown;
   o.onOperationMove         = MO.FGuiControl_onOperationMove;
   o.onOperationUp           = MO.FGuiControl_onOperationUp;
   o.onEvent                 = MO.FGuiControl_onEvent;
   o.oeInitialize            = MO.FGuiControl_oeInitialize;
   o.oeResize                = MO.FGuiControl_oeResize;
   o.oeUpdate                = MO.FGuiControl_oeUpdate;
   o.construct               = MO.FGuiControl_construct;
   o.isReady                 = MO.FGuiControl_isReady;
   o.isDirty                 = MO.FGuiControl_isDirty;
   o.setVisible              = MO.FGuiControl_setVisible;
   o.setSize                 = MO.FGuiControl_setSize;
   o.testReady               = MO.FGuiControl_testReady;
   o.testDirty               = MO.FGuiControl_testDirty;
   o.testInRange             = MO.FGuiControl_testInRange;
   o.paint                   = MO.FGuiControl_paint;
   o.update                  = MO.FGuiControl_update;
   o.build                   = MO.Method.empty;
   o.makeRenderable          = MO.FGuiControl_makeRenderable;
   o.updateRenderable        = MO.FGuiControl_updateRenderable;
   o.processReady            = MO.FGuiControl_processReady;
   o.processEvent            = MO.FGuiControl_processEvent;
   o.dirty                   = MO.FGuiControl_dirty;
   o.psPaint                 = MO.FGuiControl_psPaint;
   o.psUpdate                = MO.FGuiControl_psUpdate;
   o.dispose                 = MO.FGuiControl_dispose;
   return o;
}
MO.FGuiControl_onUpdate = function FGuiControl_onUpdate(event){
   var o = this;
   var location = o._location;
   var size = o._size;
   var rectangle = event.rectangle;
   var components = o._components;
   if(components){
      var count = components.count();
      for(var i = 0; i < count; i++){
         var component = components.at(i);
         if(MO.Class.isClass(component, MO.FGuiControl)){
            component.onUpdate(event);
         }
      }
   }
}
MO.FGuiControl_onPaintBegin = function FGuiControl_onPaintBegin(event){
   var o = this;
   var graphic = event.graphic;
   var rectangle = event.rectangle;
   if(o._backColor){
      graphic.fillRectangle(rectangle.left, rectangle.top, rectangle.width, rectangle.height, o._styleBackcolor, 1);
   }
   var image = null;
   var imageGrid = null;
   if(o._statusHover){
      image = o._backHoverImage;
      imageGrid = o._backHoverGrid;
   }else{
      image = o._backImage;
      imageGrid = o._backGrid;
   }
   if(image){
      if(imageGrid && !imageGrid.isEmpty()){
         graphic.drawGridImage(image.bitmap, rectangle.left, rectangle.top, rectangle.width, rectangle.height, imageGrid);
      }else{
         graphic.drawImage(image.bitmap, rectangle.left, rectangle.top, rectangle.width, rectangle.height);
      }
   }
   if(o._borderOuter.valid){
      graphic.drawBorder(rectangle, o._borderOuter);
   }
   if(o._borderInner.valid){
      graphic.drawBorder(rectangle, o._borderInner);
   }
}
MO.FGuiControl_onPaintEnd = function FGuiControl_onPaintEnd(event){
   var o = this;
}
MO.FGuiControl_onOperationDown = function FGuiControl_onOperationDown(event){
   var o = this;
   if(event.flag){
      o.processOperationDownListener(event);
   }
}
MO.FGuiControl_onOperationMove = function FGuiControl_onOperationMove(event){
   var o = this;
   if(event.flag){
      o.processOperationMoveListener(event);
   }
}
MO.FGuiControl_onOperationUp = function FGuiControl_onOperationUp(event){
   var o = this;
   if(event.flag){
      o.processOperationUpListener(event);
   }
}
MO.FGuiControl_onEvent = function FGuiControl_onEvent(event, flag){
   var o = this;
   event.flag = flag;
   var code = event.code;
   switch(code){
      case MO.EEvent.MouseDown:
         o.onOperationDown(event);
         break;
      case MO.EEvent.MouseMove:
         o.onOperationMove(event);
         break;
      case MO.EEvent.MouseUp:
         o.onOperationUp(event);
         break;
      default:
         throw new TError('Unknown event type.');
   }
}
MO.FGuiControl_oeInitialize = function FGuiControl_oeInitialize(event){
   var o = this;
   var resultCd = o.__base.FGuiComponent.oeInitialize.call(o, event)
   if(event.isBefore()){
      if(o._backResource){
         var image = o._backImage = new MO.SGuiImage();
         image.resource = o._backResource;
         image.load();
      }
      if(o._backHoverResource){
         var image = o._backHoverImage = new MO.SGuiImage();
         image.resource = o._backHoverResource;
         image.load();
      }
   }
   return resultCd;
}
MO.FGuiControl_oeResize = function FGuiControl_oeResize(event){
   var o = this;
   return MO.EEventStatus.Continue;
}
MO.FGuiControl_oeUpdate = function FGuiControl_oeUpdate(event){
   return MO.EEventStatus.Continue;
}
MO.FGuiControl_construct = function FGuiControl_construct(){
   var o = this;
   o.__base.FGuiComponent.construct.call(o);
   o.__base.MGuiSize.construct.call(o);
   o.__base.MUiMargin.construct.call(o);
   o.__base.MUiPadding.construct.call(o);
   o.__base.MUiBorder.construct.call(o);
   o._parentRectangle = new MO.SRectangle();
   o._clientRectangle = new MO.SRectangle();
   o._eventRectangle = new MO.SRectangle();
   o._foreFont = new MO.SUiFont();
   o._backFont = new MO.SUiFont();
   o._paintEvent = new MO.SGuiPaintEvent();
}
MO.FGuiControl_isReady = function FGuiControl_isReady(){
   return this._statusReady;
}
MO.FGuiControl_isDirty = function FGuiControl_isDirty(){
   return this._statusDirty;
}
MO.FGuiControl_setVisible = function FGuiControl_setVisible(flag){
   var o = this;
   o._visible = flag;
   var manager = o._manager;
   if(manager){
      manager.dirty();
   }
}
MO.FGuiControl_setSize = function FGuiControl_setSize(width, height){
   var o = this;
   o.__base.MGuiSize.setSize.call(o, width, height);
   var renderable = o._renderable;
   if(renderable){
      renderable.setSize(width, height);
   }
}
MO.FGuiControl_testReady = function FGuiControl_testReady(){
   var o = this;
   var image = o._backImage;
   if(image){
      if(!image.testReady()){
         return false;
      }
   }
   var image = o._backHoverImage;
   if(image){
      if(!image.testReady()){
         return false;
      }
   }
   return true;
}
MO.FGuiControl_testDirty = function FGuiControl_testDirty(){
   var o = this;
   var components = o._components;
   if(components){
      var count = components.count();
      for(var i = 0; i < count; i++){
         var component = components.at(i);
         if(MO.Class.isClass(component, MO.FGuiControl)){
            var dirty = component.testDirty();
            if(dirty){
               o._statusDirty = true;
               break;
            }
         }
      }
   }
   return o._statusDirty;
}
MO.FGuiControl_testInRange = function FGuiControl_testInRange(x, y){
   var o = this;
}
MO.FGuiControl_paint = function FGuiControl_paint(event){
   var o = this;
   var location = o._location;
   var size = o._size;
   var dockCd = o._dockCd;
   var anchorCd = o._anchorCd;
   var graphic = event.graphic;
   var parentRectangle = event.parentRectangle;
   var rectangle = event.rectangle;
   var sizeRate = event.sizeRate;
   var calculateRate = event.calculateRate;
   var calculateWidth = calculateRate.width;
   var calculateHeight = calculateRate.height;
   o._parentRectangle.assign(parentRectangle);
   o._eventRectangle.assign(rectangle);
   var parentRight = parentRectangle.right();
   var parentBottom = parentRectangle.bottom();
   var left = 0;
   var top = 0;
   var right = 0;
   var bottom = 0;
   var width = 0;
   var height = 0;
   if(anchorCd & MO.EUiAnchor.Left){
      left = rectangle.left + location.x * calculateWidth;
   }else{
      left = rectangle.left + location.x;
   }
   if(anchorCd & MO.EUiAnchor.Top){
      top = rectangle.top + location.y * calculateHeight;
   }else{
      top = rectangle.top + location.y;
   }
   if(anchorCd & MO.EUiAnchor.Right){
      right = parentRight - o._right * calculateWidth;
   }else{
      right = parentRight - o._right;
   }
   if(anchorCd & MO.EUiAnchor.Bottom){
      bottom = parentBottom - o._bottom * calculateHeight;
   }else{
      bottom = parentBottom - o._bottom;
   }
   if((anchorCd & MO.EUiAnchor.Left) && (anchorCd & MO.EUiAnchor.Right)){
      width = size.width * calculateWidth;
   }else{
      width = size.width;
   }
   if((anchorCd & MO.EUiAnchor.Top) && (anchorCd & MO.EUiAnchor.Bottom)){
      height = size.height * calculateHeight;
   }else{
      height = size.height;
   }
   if((dockCd == MO.EUiDock.RightTop) || (dockCd == MO.EUiDock.Right) || (dockCd == MO.EUiDock.RightBottom)){
      right = parentRight - o._right * calculateWidth;
      left = right - width;
   }
   if((dockCd == MO.EUiDock.LeftBottom) || (dockCd == MO.EUiDock.Bottom) || (dockCd == MO.EUiDock.RightBottom)){
      bottom = parentBottom - o._bottom * calculateHeight;
      top = bottom - height;
   }
   if((anchorCd & MO.EUiAnchor.Left) && (anchorCd & MO.EUiAnchor.Right)){
      width = right - left;
   }else if(o._anchorCd & MO.EUiAnchor.Left){
      left = parentRight - width - o._right;
      width = right - left;
   }else if(o._anchorCd & MO.EUiAnchor.Right){
      width = parentRight - left - o._right;
   }
   if((anchorCd & MO.EUiAnchor.Top) && (o._anchorCd & MO.EUiAnchor.Bottom)){
      height = bottom - top;
   }else if(o._anchorCd & MO.EUiAnchor.Top){
      top = parentBottom - height - o._bottom;
      height = bottom - top;
   }else if(o._anchorCd & MO.EUiAnchor.Bottom){
      height = parentBottom - top - o._bottom;
   }
   rectangle.set(left, top, Math.max(width, 0), Math.max(height, 0));
   parentRectangle.assign(rectangle);
   o._clientRectangle.assign(rectangle);
   graphic.store();
   graphic.setScale(o._scale.width, o._scale.height);
   o.onPaintBegin(event);
   var components = o._components;
   if(components){
      var count = components.count();
      for(var i = 0; i < count; i++){
         var component = components.at(i);
         if(MO.Class.isClass(component, MO.FGuiControl)){
            component.paint(event);
         }
      }
   }
   o.onPaintEnd(event);
   graphic.restore();
   rectangle.assign(o._eventRectangle);
   parentRectangle.assign(o._parentRectangle);
   o._statusDirty = false;
}
MO.FGuiControl_update = function FGuiControl_update(){
   var o = this;
   var size = o._size;
   var event = MO.Memory.alloc(SGuiUpdateEvent)
   event.rectangle.set(0, 0, size.width, size.height)
   o.onUpdate(event);
   MO.Memory.free(event);
}
MO.FGuiControl_dirty = function FGuiControl_dirty(){
   this._statusDirty = true;
}
MO.FGuiControl_makeRenderable = function FGuiControl_makeRenderable(){
   var o = this;
   var renderable = o._renderable;
   if(!renderable){
      renderable = o._renderable = o._graphicContext.createObject(MO.FGuiControlRenderable);
      renderable.setControl(o);
   }
   return renderable;
}
MO.FGuiControl_updateRenderable = function FGuiControl_updateRenderable(){
   var o = this;
   var renderable = o._renderable;
   var graphic = renderable.beginDraw();
   var size = o._size;
   var event = o._paintEvent;
   event.optionScale = false;
   event.graphic = graphic;
   event.virtualSize = size;
   event.parentRectangle.set(0, 0, size.width, size.height);
   event.rectangle.set(0, 0, size.width, size.height);
   event.calculateRate = 1;
   o.paint(event);
   renderable.endDraw();
}
MO.FGuiControl_processReady = function FGuiControl_processReady(){
   var o = this;
   if(!o._statusReady){
      o._statusReady = o.testReady();
   }
   return o._statusReady;
}
MO.FGuiControl_processEvent = function FGuiControl_processEvent(event){
   var o = this;
   var range = o.testInRange(event.locationX, event.locationY)
   if(range){
      o.onEvent(event, true);
      var components = o._components;
      if(components){
         var count = components.count();
         for(var i = 0; i < count; i++){
            var component = components.at(i);
            var result = component.processEvent(event);
            if(result){
               break;
            }
         }
      }
      o.onEvent(event, false);
      return true;
   }
   return false;
}
MO.FGuiControl_psPaint = function FGuiControl_psPaint(event){
   var o = this;
   var event = new MO.SUiDispatchEvent(o, 'oePaint', MO.FGuiControl);
   o.process(event);
   event.dispose();
}
MO.FGuiControl_psUpdate = function FGuiControl_psUpdate(){
   var o = this;
   var event = new MO.SUiDispatchEvent(o, 'oeUpdate', MO.FGuiControl);
   o.process(event);
   event.dispose();
}
MO.FGuiControl_dispose = function FGuiControl_dispose(){
   var o = this;
   o._backImage = MO.Lang.Object.dispose(o._backImage);
   o._backHoverImage = MO.Lang.Object.dispose(o._backHoverImage);
   o._clientRectangle = MO.Lang.Object.dispose(o._clientRectangle);
   o._paintEvent = MO.Lang.Object.dispose(o._paintEvent);
   o.__base.MGuiSize.dispose.call(o);
   o.__base.MUiBorder.dispose.call(o);
   o.__base.MUiPadding.dispose.call(o);
   o.__base.MUiMargin.dispose.call(o);
   o.__base.MRenderableLinker.dispose.call(o);
   o.__base.MGraphicObject.dispose.call(o);
   o.__base.MUiControl.dispose.call(o);
   o.__base.FGuiComponent.dispose.call(o);
}
MO.FGuiControlRenderable = function FGuiControlRenderable(o){
   o = MO.Class.inherits(this, o, MO.FE3dFaceData);
   o._optionFull = MO.Class.register(o, new MO.AGetSet('_optionFull'));
   o._control    = MO.Class.register(o, new MO.AGetSet('_control'));
   o._graphic    = null;
   o.construct   = MO.FGuiControlRenderable_construct;
   o.setup       = MO.FGuiControlRenderable_setup;
   o.setLocation = MO.FGuiControlRenderable_setLocation;
   o.setSize     = MO.FGuiControlRenderable_setSize;
   o.beginDraw   = MO.FGuiControlRenderable_beginDraw;
   o.endDraw     = MO.FGuiControlRenderable_endDraw;
   o.dispose     = MO.FGuiControlRenderable_dispose;
   return o;
}
MO.FGuiControlRenderable_construct = function FGuiControlRenderable_construct(){
   var o = this;
   o.__base.FE3dFaceData.construct.call(o);
}
MO.FGuiControlRenderable_setup = function FGuiControlRenderable_setup(){
   var o = this;
   o.__base.FE3dFaceData.setup.call(o);
   var materialInfo = o._material.info();
   materialInfo.effectCode = 'gui';
   materialInfo.optionDouble = true;
}
MO.FGuiControlRenderable_setLocation = function FGuiControlRenderable_setLocation(x, y){
   var o = this;
   o._matrix.setTranslate(x, y, 0);
}
MO.FGuiControlRenderable_setSize = function FGuiControlRenderable_setSize(width, height){
   var o = this;
   o._size.set(width, height);
}
MO.FGuiControlRenderable_beginDraw = function FGuiControlRenderable_beginDraw(){
   var o = this;
   var size = o._control.size();
   var adjustWidth = MO.Lang.Integer.pow2(size.width);
   var adjustHeight = MO.Lang.Integer.pow2(size.height);
   o._adjustSize.set(adjustWidth, adjustHeight);
   o._matrix.setScale(adjustWidth, adjustHeight, 1);
   var canvasConsole = MO.Console.find(MO.FE2dCanvasConsole);
   var canvas = o._canvas = canvasConsole.allocBySize(adjustWidth, adjustHeight, MO.FGuiCanvas);
   var graphic = o._graphic = canvas.graphicContext();
   return graphic;
}
MO.FGuiControlRenderable_endDraw = function FGuiControlRenderable_endDraw(){
   var o = this;
   var graphic = o._graphic;
   o._texture.upload(o._canvas);
   var canvasConsole = MO.Console.find(MO.FE2dCanvasConsole);
   canvasConsole.free(o._canvas);
   o._canvas = null;
   o._graphic = null;
   o._ready = true;
}
MO.FGuiControlRenderable_dispose = function FGuiControlRenderable_dispose(){
   var o = this;
   o.__base.FE3dFaceData.dispose.call(o);
}
MO.FGuiFrame = function FGuiFrame(o){
   o = MO.Class.inherits(this, o, MO.FGuiContainer);
   return o;
}
MO.FGuiSpriteMultimage = function FGuiSpriteMultimage(o) {
   o = MO.Class.inherits(this, o, MO.FGuiControl);
   o._sequenceImages = null;
   o._frameTime      = MO.Class.register(o, new MO.AGetSet('_frameTime'));
   o._ready          = MO.Class.register(o, new MO.AGetSet('_ready'), false);
   o._imageCount     = 0;
   o._imageToLoad    = 0;
   o._lastTick       = 0;
   o._currentFrame   = 0;
   o.setup           = MO.FGuiSpriteMultimage_setup;
   o.onPaintBegin    = MO.FGuiSpriteMultimage_onPaintBegin;
   o.onImageLoad     = MO.FGuiSpriteMultimage_onImageLoad;
   return o;
}
MO.FGuiSpriteMultimage_setup = function FGuiSpriteMultimage_setup(sequenceImageUrl, imageCount, ext) {
   var o = this;
   o._imageCount = imageCount;
   o._imageToLoad = imageCount;
   var images = o._sequenceImages = new Array(imageCount);
   for (var i = 0; i < imageCount; i++) {
      images[i] = MO.Class.create(MO.FImage);
      images[i].addLoadListener(o, o.onImageLoad);
      images[i].loadUrl(sequenceImageUrl + i + ext);
   }
}
MO.FGuiSpriteMultimage_onImageLoad = function FGuiSpriteMultimage_onImageLoad() {
   var o = this;
   if (--o._imageToLoad == 0) {
      o._ready = true;
      o._lastTick = MO.Timer.current();
      o.dirty();
   }
}
MO.FGuiSpriteMultimage_onPaintBegin = function FGuiSpriteMultimage_onPaintBegin(event) {
   var o = this;
   if (!o._ready) {
      return;
   }
   o.__base.FGuiControl.onPaintBegin.call(o, event);
   var graphic = event.graphic;
   var rectangle = event.rectangle;
   var passedTick = MO.Timer.current() - o._lastTick;
   if (passedTick > o._frameTime) {
      if (++o._currentFrame > o._imageCount - 1) {
         o._currentFrame = 0;
      }
      o._lastTick = MO.Timer.current();
   }
   graphic._handle.drawImage(o._sequenceImages[o._currentFrame].image(), rectangle.left, rectangle.top, rectangle.width, rectangle.height);
}
MO.RGuiColor = function RGuiColor(){
   var o = this;
   return o;
}
MO.RGuiColor.prototype.makeRgbString = function RGuiColor_makeRgbString(color, alpha){
   var red = color.substring(2, 4);
   var green = color.substring(4, 6);
   var blue = color.substring(6, 8);
   var result = 'rgba(' + MO.Lang.Hex.parse(red) + ',' + MO.Lang.Hex.parse(green) + ',' + MO.Lang.Hex.parse(blue) + ',' + alpha + ')';
   return result;
}
MO.GuiColor = new MO.RGuiColor();
MO.RGuiControl = function RGuiControl(){
   var o = this;
   o.PREFIX    = 'FGui';
   return o;
}
MO.RGuiControl.prototype.newInstance = function RGuiControl_newInstance(type){
   var o = this;
   var result = null;
   if(type){
      var name = null
      var tn = null;
      if(type.constructor == String){
         if(!MO.Lang.String.startsWith(type, o.PREFIX)){
            name = o.PREFIX + type;
         }
      }else if(type.constructor == MO.TXmlNode){
         name = type.get('type');
         if(MO.Lang.String.isEmpty(name)){
            name = type.name();
            if(!MO.Lang.String.startsWith(name, o.PREFIX)){
               name = o.PREFIX + name;
            }
         }else{
            tn = name;
         }
      }else{
         throw new MO.TError(o, 'Unknown parameter. (type={1})', type);
      }
      result = MO.Class.create(name);
      if(tn){
         result.__typed = true;
      }
   }
   if(result == null){
      throw new MO.TError(o, 'Create instance failure. (type={1})', type);
   }
   return result;
}
MO.RGuiControl.prototype.attachEvent = function RGuiControl_attachEvent(control, name, h, m, u){
   var o = this;
   var e = null;
   var p = control[name];
   if(!MO.Method.isEmpty(p) || m){
      var cz = MO.Class.find(control.constructor);
      var a = cz.annotation(EAnnotation.Event, n);
      e = a.create();
      e.annotation = a;
      e.source = control;
      e.hSource = h;
      e.ohProcess = m;
      e.onProcess = p;
      e.process = MO.Dui.Event.onProcess;
      MO.Dui.Event.find(h).push(a.linker(), e);
      MO.RHtml.linkSet(h, '_plink', c);
      a.bind(h, u);
   }
   return e;
}
MO.RGuiControl.prototype.innerbuild = function RGuiControl_innerbuild(parentControl, control, xconfig, attributes){
   var o = this;
   if((control == null) || (xconfig == null)){
      return;
   }
   if(MO.Class.isClass(control, MO.MProperty)){
      control.propertyLoad(xconfig);
   }
   var linker = xconfig.get('linker');
   if(linker && parentControl){
      parentControl[linker] = control;
   }
   if(MO.Class.isClass(control, MO.FGuiControl)){
   }
   if(control.__typed){
      parentControl = control;
   }
   if(MO.Class.isClass(control, MO.MUiContainer) && xconfig.hasNode()){
      var nodes = xconfig.nodes();
      var nodeCount = nodes.count();
      for(var i = 0; i < nodeCount; i++){
         var xnode = nodes.at(i);
         var child = control.createChild(xnode);
         if(!child){
            throw new MO.TError('Invalid create child.');
         }
         o.innerbuild(parentControl, child, xnode, attributes);
         control.push(child);
      }
   }
   if(MO.Class.isClass(control, MO.FGuiControl)){
   }
}
MO.RGuiControl.prototype.build = function RGuiControl_build(control, xconfig, attributes){
   var o = this;
   if(!control){
      control = o.newInstance(xconfig);
   }
   o.innerbuild(control, control, xconfig, attributes);
   return control;
}
MO.RGuiControl.prototype.saveConfig = function RGuiControl_saveConfig(control, xconfig){
   var o = this;
   control.propertySave(xconfig);
   if(control.hasComponent()){
      var components = control.components();
      var count = components.count();
      for(var i = 0; i < count; i++){
         var component = components.at(i);
         var className = MO.Class.name(component);
         if(MO.Lang.String.startsWith(className, 'FGui')){
            className = className.substring(4);
         }
         var xchild = xconfig.create(className);
         o.saveConfig(component, xchild);
      }
   }
   return xconfig;
}
MO.RGuiControl = new MO.RGuiControl();
MO.FGuiCanvas = function FGuiCanvas(o){
   o = MO.Class.inherits(this, o, MO.FE2dCanvas);
   o.createContext = MO.FGuiCanvas_createContext;
   return o;
}
MO.FGuiCanvas_createContext = function FGuiCanvas_createContext(){
   return MO.Class.create(MO.FGuiCanvasContext);
}
MO.FGuiCanvasContext = function FGuiCanvasContext(o) {
   o = MO.Class.inherits(this, o, MO.FG2dCanvasContext);
   o.construct    = MO.FGuiCanvasContext_construct;
   o.drawFontText = MO.FGuiCanvasContext_drawFontText;
   o.dispose      = MO.FGuiCanvasContext_dispose;
   return o;
}
MO.FGuiCanvasContext_construct = function FGuiCanvasContext_construct() {
   var o = this;
   o.__base.FG2dCanvasContext.construct.call(o);
}
MO.FGuiCanvasContext_drawFontText = function FGuiCanvasContext_drawFontText(text, font, x, y, width, height, alignCd){
   var o = this;
   if(MO.Lang.String.isEmpty(text)){
      return;
   }
   var handle = o._handle;
   handle.font = font.toString();
   handle.fillStyle = font.color;
   var textWidth = o.textWidth(text);
   var cx = x + (width - textWidth) * 0.5;
   var cy = y + (height - font.size) * 0.5 + font.size;
   if(alignCd == MO.EUiAlign.Left){
      handle.fillText(text, x, cy);
   }else if(alignCd == MO.EUiAlign.Right){
      handle.fillText(text, x + (width - textWidth), cy);
   }else if(alignCd == MO.EUiAlign.Center){
      handle.fillText(text, cx, cy);
   }else{
      throw new MO.TError('Invalid align type.');
   }
}
MO.FGuiCanvasContext_dispose = function FGuiCanvasContext_dispose() {
   var o = this;
   o.__base.FG2dCanvasContext.dispose.call(o);
}
MO.FGuiCanvasManager = function FGuiCanvasManager(o){
   o = MO.Class.inherits(this, o, MO.FGuiManager);
   o._desktop          = MO.Class.register(o, new MO.AGetSet('_desktop'));
   o._canvas           = MO.Class.register(o, new MO.AGetSet('_canvas'));
   o._readyControls    = null;
   o._dirtyControls    = null;
   o._paintEvent       = null;
   o.onSortControl     = MO.FGuiCanvasManager_onSortControl;
   o.construct         = MO.FGuiCanvasManager_construct;
   o.filterByRectangle = MO.FGuiCanvasManager_filterByRectangle;
   o.doActionAlpha     = MO.FGuiCanvasManager_doActionAlpha;
   o.processResize     = MO.FGuiCanvasManager_processResize;
   o.processControl    = MO.FGuiCanvasManager_processControl;
   o.process           = MO.FGuiCanvasManager_process;
   o.dispose           = MO.FGuiCanvasManager_dispose;
   return o;
}
MO.FGuiCanvasManager_onSortControl = function FGuiCanvasManager_onSortControl(source, target){
   var o = this;
   var sourceOrder = source.displayOrder();
   var targetOrder = target.displayOrder();
   return sourceOrder - targetOrder;
}
MO.FGuiCanvasManager_construct = function FGuiCanvasManager_construct(){
   var o = this;
   o.__base.FGuiManager.construct.call(o);
   o._readyControls = new MO.TObjects();
   o._dirtyControls = new MO.TObjects();
   o._paintEvent = new MO.SGuiPaintEvent();
}
MO.FGuiCanvasManager_filterByRectangle = function FGuiCanvasManager_filterByRectangle(dirtyControls, rectangle){
   var o = this;
   var controls = o._readyControls;
   var count = controls.count();
   for(var i = 0; i < count; i++){
      var control = controls.at(i);
      var clientRectangle = control.clientRectangle();
      if(rectangle.testRectangle(clientRectangle)){
         if(!control._flagDirty){
            control._flagDirty = true;
            o.filterByRectangle(dirtyControls, clientRectangle);
         }
         control.dirty();
         dirtyControls.pushUnique(control);
      }
   }
}
MO.FGuiCanvasManager_doActionAlpha = function FGuiCanvasManager_doActionAlpha(alpha){
   var o = this;
   var context = o._canvas.graphicContext();
   context.setAlpha(alpha);
   o.dirty();
}
MO.FGuiCanvasManager_processResize = function FGuiCanvasManager_processResize(control){
}
MO.FGuiCanvasManager_processControl = function FGuiCanvasManager_processControl(control){
   var o = this;
   o.__base.FGuiManager.process.call(o);
   var graphic = o._canvas.graphicContext();
   var desktop = o._desktop;
   var calculateSize = desktop.calculateSize();
   var calculateRate = desktop.calculateRate();
   var virtualSize = desktop.virtualSize();
   var event = o._paintEvent;
   event.optionScale = false;
   event.graphic = graphic;
   event.virtualSize = virtualSize;
   event.parentRectangle.set(0, 0, virtualSize.width, virtualSize.height);
   event.rectangle.set(0, 0, virtualSize.width, virtualSize.height);
   event.calculateRate = calculateRate;
   control.paint(event);
}
MO.FGuiCanvasManager_process = function FGuiCanvasManager_process(){
   var o = this;
   o.__base.FGuiManager.process.call(o);
   var canvas = o._canvas;
   var graphic = canvas.graphicContext();
   if(!o._valid){
      return;
   }
   var desktop = o._desktop;
   var sizeRate = desktop.sizeRate();
   graphic.setGlobalScale(sizeRate, sizeRate);
   var readyControls = o._readyControls;
   readyControls.clear();
   var controls = o._controls;
   var count = controls.count();
   if(o._visible){
      for(var i = 0; i < count; i++){
         var control = controls.at(i);
         if(control.processReady()){
            if(control.visible()){
               control._flagDirty = false;
               readyControls.push(control)
            }
         }
      }
   }
   if(o._statusDirty){
      graphic.prepare(true);
      readyControls.sort(o.onSortControl);
      var readyCount = readyControls.count();
      for(var i = 0; i < readyCount; i++){
         var control = readyControls.at(i);
         o.processControl(control);
      }
      o._statusDirty = false;
   }else{
      var dirtyControls = o._dirtyControls;
      dirtyControls.clear();
      var readCount = readyControls.count();
      for(var i = 0; i < readCount; i++){
         var control = readyControls.at(i);
         if(control.testDirty()){
            var controlRectangle = control.clientRectangle();
            dirtyControls.push(control);
            control._flagDirty = true;
            o.filterByRectangle(dirtyControls, controlRectangle)
         }
      }
      dirtyControls.sort(o.onSortControl);
      var dirtyCount = dirtyControls.count();
      if(dirtyCount){
         graphic.prepare(false);
         for(var i = 0; i < dirtyCount; i++){
            var control = dirtyControls.at(i);
            var clientRectangle = control.clientRectangle();
            if(!clientRectangle.isEmpty()){
               graphic.clearRectangle(clientRectangle);
            }
         }
         for(var i = 0; i < dirtyCount; i++){
            var control = dirtyControls.at(i);
            o.processControl(control);
         }
      }
   }
}
MO.FGuiCanvasManager_dispose = function FGuiCanvasManager_dispose(){
   var o = this;
   o._readyControls = MO.Lang.Object.dispose(o._readyControls);
   o._dirtyControls = MO.Lang.Object.dispose(o._dirtyControls);
   o._paintEvent = MO.Lang.Object.dispose(o._paintEvent);
   o.__base.FGuiManager.dispose.call(o);
}
MO.FGuiChangeTransform = function FGuiChangeTransform(o){
   o = MO.Class.inherits(this, o, MO.FGuiTransform);
   o._changeCd      = MO.Class.register(o, new MO.AGetSet('_changeCd'));
   o._interval      = MO.Class.register(o, new MO.AGetSet('_interval'));
   o._scale         = MO.Class.register(o, new MO.AGetSet('_scale'));
   o._sourceControl = MO.Class.register(o, new MO.AGetSet('_sourceControl'));
   o._targetControl = MO.Class.register(o, new MO.AGetSet('_targetControl'));
   o._sourceRectangle = null;
   o._targetRectangle = null;
   o._current         = 0;
   o._middleCount     = 100;
   o._endCount        = 200;
   o.construct      = MO.FGuiChangeTransform_construct;
   o.start          = MO.FGuiChangeTransform_start;
   o.process        = MO.FGuiChangeTransform_process;
   o.dispose        = MO.FGuiChangeTransform_dispose;
   return o;
}
MO.FGuiChangeTransform_construct = function FGuiChangeTransform_construct(){
   var o = this;
   o.__base.FGuiTransform.construct.call(o);
   o._sourceRectangle = new MO.SRectangle();
   o._targetRectangle = new MO.SRectangle();
}
MO.FGuiChangeTransform_start = function FGuiChangeTransform_start(){
   var o = this;
   o.__base.FGuiTransform.start.call(o);
   o._current = 0;
   var control = o._sourceControl;
   o._sourceRectangle.set(control.location().x, control.location().y, control.size().width, control.size().height);
   var control = o._targetControl;
   o._targetRectangle.set(control.location().x, control.location().y, control.size().width, control.size().height);
}
MO.FGuiChangeTransform_process = function FGuiChangeTransform_process(){
   var o = this;
   var sourceControl = o._sourceControl;
   var targetControl = o._targetControl;
   if(o._current < o._middleCount){
      var index = o._middleCount - o._current;
      var rate = index / o._middleCount;
      sourceControl.size().set(o._sourceRectangle.width * rate, o._sourceRectangle.height * rate);
   }else if(o._current == o._middleCount){
      sourceControl.setVisible(false);
      targetControl.setVisible(true);
   }else if(o._current > o._middleCount){
      var index = o._endCount - o._current;
      var rate = index / o._middleCount;
      targetControl.size().set(o._sourceRectangle.width * rate, o._sourceRectangle.height * rate);
   }else if(o._current == o._endCount){
      sourceControl.setLocation(o._targetRectangle.left, o._targetRectangle.top);
      sourceControl.setSize(o._targetRectangle.width, o._targetRectangle.height);
      targetControl.setLocation(o._sourceRectangle.left, o._sourceRectangle.top);
      targetControl.setSize(o._sourceRectangle.width, o._sourceRectangle.height);
      o._finish = true;
   }
   o._current++;
}
MO.FGuiChangeTransform_dispose = function FGuiChangeTransform_dispose(){
   var o = this;
   o.__base.FGuiTransform.dispose.call(o);
}
MO.FGuiFrameConsole = function FGuiFrameConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd    = MO.EScope.Local;
   o._frames     = null;
   o.construct   = MO.FGuiFrameConsole_construct;
   o.createFrame = MO.FGuiFrameConsole_createFrame;
   o.create      = MO.FGuiFrameConsole_create;
   o.find        = MO.FGuiFrameConsole_find;
   o.get         = MO.FGuiFrameConsole_get;
   o.alloc       = MO.FGuiFrameConsole_alloc;
   o.free        = MO.FGuiFrameConsole_free;
   o.dispose     = MO.FGuiFrameConsole_dispose;
   return o;
}
MO.FGuiFrameConsole_construct = function FGuiFrameConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._frames = new MO.TDictionary();
}
MO.FGuiFrameConsole_createFrame = function FGuiFrameConsole_createFrame(context, control, name){
   var o = this;
   var describeConsole = MO.Console.find(MO.FGuiFrameDescribeConsole);
   var xframe = describeConsole.load(name);
   var frame = MO.RGuiControl.build(null, xframe, null, null);
   frame.linkGraphicContext(context);
   frame.psInitialize();
   frame.build();
   return frame;
}
MO.FGuiFrameConsole_create = function FGuiFrameConsole_create(context, name){
   var o = this;
   var frame = o.createFrame(context, null, name);
   return frame;
}
MO.FGuiFrameConsole_find = function FGuiFrameConsole_find(name){
   return this._frames.get(name);
}
MO.FGuiFrameConsole_get = function FGuiFrameConsole_get(context, name){
   var o = this;
   var frames = o._frames;
   var frame = frames.get(name);
   if(!frame){
      frame = o.createFrame(context, null, name);
      frames.set(name, frame);
   }
   return frame;
}
MO.FGuiFrameConsole_alloc = function FGuiFrameConsole_alloc(f){
}
MO.FGuiFrameConsole_free = function FGuiFrameConsole_free(f){
   f.setVisible(false);
   this._freeFrames.push(f);
}
MO.FGuiFrameConsole_dispose = function FGuiFrameConsole_dispose(){
   var o = this;
   o._frames = MO.Lang.Object.dispose(o._frames, true);
   o.__base.FConsole.construct.call(o);
}
MO.FGuiFrameDescribeConsole = function FGuiFrameDescribeConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd     = MO.EScope.Global;
   o._serviceCode = 'cloud.describe.frame';
   o._defines     = MO.Class.register(o, new MO.AGetter('_defines'));
   o.construct    = MO.FGuiFrameDescribeConsole_construct;
   o.load         = MO.FGuiFrameDescribeConsole_load;
   o.dispose      = MO.FGuiFrameDescribeConsole_dispose;
   return o;
}
MO.FGuiFrameDescribeConsole_construct = function FGuiFrameDescribeConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._defines = new MO.TDictionary();
}
MO.FGuiFrameDescribeConsole_load = function FGuiFrameDescribeConsole_load(name){
   var o = this;
   var defines = o._defines;
   var xconfig = defines.get(name);
   if(xconfig){
      return xconfig;
   }
   var xdocument = new MO.TXmlDocument();
   var xroot = xdocument.root();
   xroot.set('action', 'query');
   var xframe = xroot.create('Frame');
   xframe.set('name', name);
   var url = MO.Window.Browser.hostPath('/' + o._serviceCode + '.ws');
   var xresult = MO.Console.find(MO.FXmlConsole).sendSync(url, xdocument);
   var xframes = xresult.nodes();
   var count = xframes.count();
   for(var i = 0; i < count; i++){
      var xframe = xframes.at(i);
      var frameName = xframe.get('name');
      defines.set(frameName, xframe);
   }
   var xframe = defines.get(name);
   if(!xframe){
      throw new MO.TError(o, 'Unknown frame. (name={1})', name);
   }
   return xframe;
}
MO.FGuiFrameDescribeConsole_dispose = function FGuiFrameDescribeConsole_dispose(){
   var o = this;
   o._defines = MO.Lang.Object.dispose(o._defines, true);
   o.__base.FConsole.dispose.call(o);
}
MO.FGuiGeneralColorEffect = function FGuiGeneralColorEffect(o){
   o = MO.Class.inherits(this, o, MO.FE3dAutomaticEffect);
   o._code          = 'general.color.gui';
   o.drawRenderable = MO.FGuiGeneralColorEffect_drawRenderable;
   return o;
}
MO.FGuiGeneralColorEffect_drawRenderable = function FGuiGeneralColorEffect_drawRenderable(region, renderable){
   var o = this;
   var program = o._program;
   var modelMatrix = renderable.currentMatrix();
   var vpMatrix = region.calculate(MO.EG3dRegionParameter.CameraViewProjectionMatrix)
   var material = renderable.material();
   o.bindMaterial(material);
   program.setParameter('vc_model_matrix', modelMatrix);
   program.setParameter('vc_vp_matrix', vpMatrix);
   o.__base.FE3dAutomaticEffect.drawRenderable.call(o, region, renderable);
}
MO.FGuiGeneralControlEffect = function FGuiGeneralControlEffect(o){
   o = MO.Class.inherits(this, o, MO.FE3dAutomaticEffect);
   o._code          = 'general.color.gui';
   o.drawRenderable = MO.FGuiGeneralControlEffect_drawRenderable;
   return o;
}
MO.FGuiGeneralControlEffect_drawRenderable = function FGuiGeneralControlEffect_drawRenderable(region, renderable){
   var o = this;
   if(!MO.Class.isClass(renderable, MO.FGuiControlRenderable)){
      throw new MO.TError('Invalid renderable.');
   }
   var control = renderable.control();
   var adjustSize = renderable.adjustSize();
   var controlLocation = control.location();
   var controlSize = control.size();
   var dockCd = control.dockCd();
   var context = o._graphicContext;
   var contextSize = context.size();
   var contextSizeRatio = context.sizeRatio();
   var radioWidth = contextSize.width * contextRatio;
   var radioHeight = contextSize.height * contextRatio;
   var sizeWidth = contextSize.width * contextSizeRatio.width;
   var sizeHeight = contextSize.height * contextSizeRatio.height;
   var material = renderable.material();
   o.bindMaterial(material);
   var x = y = width = height = 0;
   if(renderable._optionFull){
      x = controlLocation.x / sizeWidth * 2 - 1;
      y = 1 - controlLocation.y / sizeHeight * 2;
      width = adjustSize.width / sizeWidth * 2;
      height = adjustSize.height / sizeHeight * 2;
   }else{
      var contextRatioX = (contextSizeRatio.width > contextSizeRatio.height) ? 1 : contextSizeRatio.height / contextSizeRatio.width;
      if((dockCd == MO.EGuiDock.LeftTop) || (dockCd == MO.EGuiDock.Left) || (dockCd == MO.EGuiDock.LeftBottom) || (dockCd == MO.EGuiDock.Fill)){
         x = controlLocation.x / sizeWidth * 2 - 1;
      }else if((dockCd == MO.EGuiDock.RightTop) || (dockCd == MO.EGuiDock.Right) || (dockCd == MO.EGuiDock.RightBottom)){
      }else{
         throw new MO.TError(o, 'Invalid dock.');
      }
      var y = 0;
      var contextRatioY = (contextSizeRatio.width > contextSizeRatio.height) ? 1 : contextSizeRatio.height / contextSizeRatio.width;
      if((dockCd == MO.EGuiDock.LeftTop) || (dockCd == MO.EGuiDock.Top) || (dockCd == MO.EGuiDock.RightTop) || (dockCd == MO.EGuiDock.Fill)){
         y = 1 - controlLocation.y / sizeHeight * 2;
      }else if((dockCd == MO.EGuiDock.LeftBottom) || (dockCd == MO.EGuiDock.Bottom) || (dockCd == MO.EGuiDock.RightBottom)){
      }else{
         throw new MO.TError(o, 'Invalid dock.');
      }
      if((dockCd == MO.EGuiDock.Fill)){
      }else{
         width = adjustSize.width / radioWidth * 2;
         height = adjustSize.height / radioHeight * 2;
      }
   }
   o._program.setParameter4('vc_position', x, y, width, height);
   o.__base.FE3dAutomaticEffect.drawRenderable.call(o, region, renderable);
}
MO.FGuiManager = function FGuiManager(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MGraphicObject, MO.MEventDispatcher);
   o._valid            = MO.Class.register(o, new MO.AGetSet('_valid'), true);
   o._visible          = MO.Class.register(o, new MO.AGetter('_visible'), true);
   o._controls         = MO.Class.register(o, new MO.AGetter('_controls'));
   o._mainTimeline     = MO.Class.register(o, new MO.AGetter('_mainTimeline'));
   o._transforms       = MO.Class.register(o, new MO.AGetter('_transforms'));
   o._statusDirty      = false;
   o._visibleControls  = null;
   o.construct         = MO.FGuiManager_construct;
   o.register          = MO.FGuiManager_register;
   o.unregister        = MO.FGuiManager_unregister;
   o.transformStart    = MO.FGuiManager_transformStart;
   o.setup             = MO.FGuiManager_setup;
   o.isDirty           = MO.FGuiManager_isDirty;
   o.setVisible        = MO.FGuiManager_setVisible;
   o.show              = MO.FGuiManager_show;
   o.hide              = MO.FGuiManager_hide;
   o.processResize     = MO.FGuiManager_processResize;
   o.processEvent      = MO.FGuiManager_processEvent;
   o.processTransforms = MO.FGuiManager_processTransforms;
   o.process           = MO.FGuiManager_process;
   o.dirty             = MO.FGuiManager_dirty;
   o.dispose           = MO.FGuiManager_dispose;
   return o;
}
MO.FGuiManager_construct = function FGuiManager_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o._controls = new MO.TObjects();
   o._mainTimeline = MO.Class.create(MO.FMainTimeline);
   o._transforms = new MO.TLooper();
   o._visibleControls = new MO.TObjects();
}
MO.FGuiManager_register = function FGuiManager_register(control){
   var o = this;
   control.setManager(o);
   o._controls.push(control);
   o._statusDirty = true;
}
MO.FGuiManager_unregister = function FGuiManager_unregister(control){
   var o = this;
   control.setManager(null);
   o._controls.remove(control);
   o._statusDirty = true;
}
MO.FGuiManager_transformStart = function FGuiManager_transformStart(transform){
   var o = this;
   transform.start();
   o._transforms.pushUnique(transform);
}
MO.FGuiManager_setup = function FGuiManager_setup(){
   var o = this;
   var effectConsole = MO.Console.find(MO.FG3dEffectConsole);
   effectConsole.register('general.color.gui', MO.FGuiGeneralColorEffect);
}
MO.FGuiManager_isDirty = function FGuiManager_isDirty(){
   return this._statusDirty;
}
MO.FGuiManager_setVisible = function FGuiManager_setVisible(value){
   var o = this;
   o._visible = value;
   o._statusDirty = true;
}
MO.FGuiManager_show = function FGuiManager_show(){
   this.setVisible(true);
}
MO.FGuiManager_hide = function FGuiManager_hide(){
   this.setVisible(false);
}
MO.FGuiManager_processResize = function FGuiManager_processResize(event){
   var o = this;
   var controls = o._controls;
   var count = controls.count();
   for(var i = 0; i < count; i++){
      var control = controls.at(i);
      control.psResize();
   }
}
MO.FGuiManager_processEvent = function FGuiManager_processEvent(event){
   var o = this;
   o.dispatcherEvent(event);
}
MO.FGuiManager_processTransforms = function FGuiManager_processTransforms(){
   var o = this;
   var transforms = o._transforms;
   transforms.record();
   while(transforms.next()){
      var transform = transforms.current();
      transform.process();
      if(transform.isFinish()){
         transforms.removeCurrent();
      }
   }
}
MO.FGuiManager_process = function FGuiManager_process(){
   var o = this;
   var controls = o._controls;
   var count = controls.count();
   for(var i = 0; i < count; i++){
      var control = controls.at(i);
      control.psUpdate();
   }
   o._mainTimeline.process();
   o.processTransforms();
}
MO.FGuiManager_dirty = function FGuiManager_dirty(){
   this._statusDirty = true;
}
MO.FGuiManager_dispose = function FGuiManager_dispose(){
   var o = this;
   o._controls = MO.Lang.Object.dispose(o._controls);
   o._mainTimeline = MO.Lang.Object.dispose(o._mainTimeline);
   o._transforms = MO.Lang.Object.dispose(o._transforms);
   o._visibleControls = MO.Lang.Object.dispose(o._visibleControls);
   o.__base.FObject.dispose.call(o);
}
MO.FGuiTransform = function FGuiTransform(o){
   o = MO.Class.inherits(this, o, MO.FObject);
   o._finish   = false;
   o.construct = MO.FGuiTransform_construct;
   o.isFinish  = MO.FGuiTransform_isFinish;
   o.start     = MO.FGuiTransform_start;
   o.process   = MO.FGuiTransform_process;
   o.dispose   = MO.FGuiTransform_dispose;
   return o;
}
MO.FGuiTransform_construct = function FGuiTransform_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
}
MO.FGuiTransform_isFinish = function FGuiTransform_isFinish(){
   return this._finish;
}
MO.FGuiTransform_start = function FGuiTransform_start(){
   var o = this;
   o._finish = false;
}
MO.FGuiTransform_process = function FGuiTransform_process(){
   var o = this;
}
MO.FGuiTransform_dispose = function FGuiTransform_dispose(){
   var o = this;
   o.__base.FObject.dispose.call(o);
}
MO.FGuiButton = function FGuiButton(o){
   o = MO.Class.inherits(this, o, MO.FGuiControl);
   o.onPaintBegin = MO.FGuiButton_onPaintBegin;
   return o;
}
MO.FGuiButton_onPaintBegin = function FGuiButton_onPaintBegin(event){
   var o = this;
   o.__base.FGuiControl.onPaintBegin.call(o, event);
   var graphic = event.graphic;
   var rectangle = event.rectangle;
   if(o._label){
      if(o._foreFont){
         graphic.setFont(o._foreFont);
      }
      var width = graphic.textWidth(o._label);
      var x = rectangle.left + rectangle.width * 0.5 - width * 0.5;
      var y = rectangle.top + rectangle.height * 0.5 + 3;
      graphic.drawText(o._label, x, y, o._foreColor);
   }
}
MO.FGuiLabel = function FGuiLabel(o){
   o = MO.Class.inherits(this, o, MO.FGuiControl);
   o._alignCd     = MO.Class.register(o, [new MO.APtyString('_alignCd'), new MO.AGetter('_alignCd')], MO.EUiAlign.Left);
   o.onPaintLabel = MO.FGuiLabel_onPaintLabel;
   o.onPaintBegin = MO.FGuiLabel_onPaintBegin;
   o.setLabel     = MO.FGuiLabel_setLabel;
   return o;
}
MO.FGuiLabel_onPaintLabel = function FGuiLabel_onPaintLabel(event){
   var o = this;
   o.__base.FGuiControl.onPaintBegin.call(o, event);
   var graphic = event.graphic;
   var rectangle = event.rectangle;
   if(o._foreFont){
      graphic.setFont(o._foreFont);
   }
   var width = graphic.textWidth(o._label);
   var x = rectangle.left + rectangle.width * 0.5 - width * 0.5;
   var y = rectangle.top + rectangle.height * 0.5 + 3;
   graphic.drawText(o._label, x, y, o._foreColor);
}
MO.FGuiLabel_onPaintBegin = function FGuiLabel_onPaintBegin(event){
   var o = this;
   o.__base.FGuiControl.onPaintBegin.call(o, event);
   if(o._label){
      o.onPaintLabel(event);
   }
}
MO.FGuiLabel_setLabel = function FGuiLabel_setLabel(label){
   var o = this;
   if(o._label != label){
      o.dirty();
   }
   o.__base.FGuiControl.setLabel.call(o, label);
}
MO.FGuiPanel = function FGuiPanel(o){
   o = MO.Class.inherits(this, o, MO.FGuiControl);
   return o;
}
MO.FGuiPicture = function FGuiPicture(o){
   o = MO.Class.inherits(this, o, MO.FGuiControl);
   return o;
}
MO.FGuiTimeline = function FGuiTimeline(o) {
   o = MO.Class.inherits(this, o, MO.FGuiControl);
   o._timeUnit             = MO.Class.register(o, new MO.AGetSet('_timeUnit'));
   o._startTime            = MO.Class.register(o, new MO.AGetSet('_startTime'));
   o._endTime              = MO.Class.register(o, new MO.AGetSet('_endTime'));
   o._degreeTime           = MO.Class.register(o, new MO.AGetSet('_degreeTime'));
   o._progress             = MO.Class.register(o, new MO.AGetSet('_progress'));
   o._unitms               = MO.Class.register(o, new MO.AGetSet('_unitms'), 1000 * 60 * 60 * 24);
   o._degreeLineHeight     = MO.Class.register(o, new MO.AGetSet('_degreeLineHeight'), 15);
   o._degreeLineWidth      = MO.Class.register(o, new MO.AGetSet('_degreeLineWidth'), 3);
   o._mainLineWidth        = MO.Class.register(o, new MO.AGetSet('_mainLineWidth'), 5);
   o._triangleWidth        = MO.Class.register(o, new MO.AGetSet('_triangleWidth'), 10);
   o._triangleHeight       = MO.Class.register(o, new MO.AGetSet('_triangleHeight'), 12);
   o._decoLineGap          = MO.Class.register(o, new MO.AGetSet('_decoLineGap'), 10);
   o._decoLineWidth        = MO.Class.register(o, new MO.AGetSet('_decoLineWidth'), 40);
   o._timeFontColor        = '#FFFFFF';
   o._cursorFontColor      = '#FFFFFF';
   o._listenersDataChanged = MO.Class.register(o, new MO.AListener('_listenersDataChanged', MO.EEvent.DataChanged));
   o.onPaintBegin          = MO.FGuiTimeline_onPaintBegin;
   o.onOperationDown       = MO.FGuiTimeline_onOperationDown;
   return o;
}
MO.FGuiTimeline_onPaintBegin = function FGuiTimeline_onPaintBegin(event) {
   var o = this;
   o.__base.FGuiControl.onPaintBegin.call(o, event);
   var graphic = event.graphic;
   var rectangle = event.rectangle;
   var top = rectangle.top;
   var bottom = rectangle.top + rectangle.height;
   var middle = bottom - 50;
   var decoLeft = rectangle.left + 5;
   var decoRight = rectangle.left + rectangle.width - 5;
   var decoLineMargin = o.triangleWidth() + o.decoLineGap();
   graphic.drawTriangle(decoLeft, middle, decoLeft + o.triangleWidth(), middle + o.triangleHeight() / 2, decoLeft + o.triangleWidth(), middle - o.triangleHeight() / 2, 1, '#FFFFFF', '#FFFFFF');
   graphic.drawTriangle(decoRight, middle, decoRight - o.triangleWidth(), middle + o.triangleHeight() / 2, decoRight - o.triangleWidth(), middle - o.triangleHeight() / 2, 1, '#FFFFFF', '#FFFFFF');
   graphic.drawLine(decoLeft + decoLineMargin, middle, decoLeft + decoLineMargin + o.decoLineWidth(), middle, '#25E8FF', o._mainLineWidth);
   graphic.drawLine(decoRight - decoLineMargin, middle, decoRight - decoLineMargin - o.decoLineWidth(), middle, '#25E8FF', o._mainLineWidth);
   var dataLeft = decoLeft + decoLineMargin + o.decoLineWidth();
   var dataRight = decoRight - decoLineMargin - o.decoLineWidth();
   graphic.drawLine(dataLeft, middle, dataRight, middle, '#25E8FF', o._mainLineWidth);
   var startTime = o.startTime();
   var endTime = o.endTime();
   var degreeTime = o.degreeTime();
   var degreeText;
   var startText;
   switch (o.timeUnit()) {
      case MO.EUiTimeUnit.Second:
         startText = startTime.format('MI:SS.MISS');
         degreeText = degreeTime.format('MI:SS.MISS');
         break;
      case MO.EUiTimeUnit.Minute:
         startText = startTime.format('HH24:MI:SS');
         degreeText = degreeTime.format('HH24:MI:SS');
         break;
      case MO.EUiTimeUnit.Hour:
         startText = startTime.format('HH24:MI');
         degreeText = degreeTime.format('HH24:MI');
         break;
      case MO.EUiTimeUnit.Day:
         startText = startTime.format('MM-DD:HH24');
         degreeText = degreeTime.format('MM-DD:HH24');
         break;
      case MO.EUiTimeUnit.Week:
         startText = startTime.format('MM-DD');
         degreeText = degreeTime.format('MM-DD');
         break;
      case MO.EUiTimeUnit.Month:
         startText = startTime.format('YYYY-MM-DD');
         degreeText = degreeTime.format('YYYY-MM-DD');
         break;
      case MO.EUiTimeUnit.Year:
         startText = startTime.format('YYYY-MM');
         degreeText = degreeTime.format('YYYY-MM');
         break;
      default:
         return;
   }
   var timeSpan = endTime.date.getTime() - startTime.date.getTime();
   var degreeSpan = degreeTime.date.getTime() - startTime.date.getTime() + o.unitms() * o.progress();
   var degreeX = dataLeft + (dataRight - dataLeft) * (degreeSpan / timeSpan);
   graphic.drawTriangle(degreeX, middle + 2, degreeX - o.triangleWidth() / 2, middle + 2 + o.triangleHeight(), degreeX + o.triangleWidth() / 2, middle + 2 + o.triangleHeight(), 1, '#FFFFFF', '#FFFFFF');
   graphic.setFont('bold 22px Microsoft YaHei');
   var degreeTextWidth = graphic.textWidth(degreeText);
   graphic.drawText(degreeText, degreeX - degreeTextWidth / 2, middle + 50, o._cursorFontColor);
   var text;
   var bakTime = startTime.date.getTime();
   graphic.drawLine(dataLeft, middle - o.degreeLineHeight(), dataLeft, middle, '#FFFFFF', o._degreeLineWidth);
   var startTextWidth = graphic.textWidth(startText);
   graphic.drawText(startText, dataLeft - startTextWidth / 2, middle + 50, o._cursorFontColor);
   switch (o.timeUnit()) {
      case MO.EUiTimeUnit.Second:
         startTime.addMseconds(1000);
         startTime.parseAuto(startTime.format('YYYYMMDDHH24MISS'));
         break;
      case MO.EUiTimeUnit.Minute:
         startTime.addMseconds(1000 * 60);
         startTime.parseAuto(startTime.format('YYYYMMDDHH24MISS'));
         break;
      case MO.EUiTimeUnit.Hour:
         startTime.addMseconds(1000 * 60 * 60);
         startTime.parseAuto(startTime.format('YYYYMMDDHH24MISS'));
         break;
      case MO.EUiTimeUnit.Day:
         startTime.addDay(1);
         startTime.parseAuto(startTime.format('YYYYMMDD'));
         break;
      case MO.EUiTimeUnit.Week:
         startTime.addDay(7);
         startTime.parseAuto(startTime.format('YYYYMMDD'));
         break;
      case MO.EUiTimeUnit.Month:
         startTime.addMonth(1);
         startTime.parseAuto(startTime.format('YYYYMM'));
         break;
      case MO.EUiTimeUnit.Year:
         startTime.addYear(1);
         startTime.parseAuto(startTime.format('YYYY'));
         break;
      default:
         return;
   }
   var alternate = true;
   var textBottom = 0;
   while (!startTime.isAfter(degreeTime)) {
      var span = startTime.date.getTime() - bakTime;
      var x = dataLeft + (dataRight - dataLeft) * (span / timeSpan);
      graphic.drawLine(x, middle - o.degreeLineHeight(), x, middle, '#FFFFFF', o._degreeLineWidth);
      switch (o.timeUnit()) {
         case MO.EUiTimeUnit.Second:
            text = startTime.format('MI:SS');
            startTime.addMseconds(1000);
            break;
         case MO.EUiTimeUnit.Minute:
            text = startTime.format('HH24:MI');
            startTime.addMseconds(1000 * 60);
            break;
         case MO.EUiTimeUnit.Hour:
            text = startTime.format('HH24:00');
            startTime.addMseconds(1000 * 60 * 60);
            break;
         case MO.EUiTimeUnit.Day:
            text = startTime.format('MM-DD');
            startTime.addDay(1);
            break;
         case MO.EUiTimeUnit.Week:
            text = startTime.format('MM-DD');
            startTime.addDay(7);
            break;
         case MO.EUiTimeUnit.Month:
            text = startTime.format('YYYY-MM');
            startTime.addMonth(1);
            break;
         case MO.EUiTimeUnit.Year:
            text = startTime.format('YYYY');
            startTime.addYear(1);
            break;
         default:
            return;
      }
      graphic.setFont('bold 22px Microsoft YaHei');
      var textWidth = graphic.textWidth(text);
      textBottom = alternate ? middle + 26 : middle + 52;
      graphic.drawText(text, x - textWidth / 2, textBottom, o._timeFontColor);
   }
   var span = endTime.date.getTime() - bakTime;
   var x = dataLeft + (dataRight - dataLeft) * (span / timeSpan);
   graphic.drawLine(x, middle - o.degreeLineHeight(), x, middle, o._cursorFontColor, o._degreeLineWidth);
   startTime.date.setTime(bakTime);
   startTime.refresh();
}
MO.FGuiTimeline_onOperationDown = function FGuiTimeline_onOperationDown(event) {
   if (!event.flag) {
      return;
   }
   var o = this;
   o.__base.FGuiControl.onOperationDown.call(o, event);
   var rectangle = event.rectangle;
   var bottom = rectangle.top + rectangle.height;
   var decoLeft = rectangle.left + 5;
   var decoRight = rectangle.left + rectangle.width - 5;
   var decoLineMargin = o.triangleWidth() + o.decoLineGap();
   var dataLeft = decoLeft + decoLineMargin + o.decoLineWidth();
   var dataRight = decoRight - decoLineMargin - o.decoLineWidth();
   var x = event.locationX;
   if (event.locationY > bottom - 30) {
      if (x > dataLeft && x < dataRight) {
         var rate = (x - dataLeft) / (dataRight - dataLeft);
         var msDate = o.startTime().date.getTime() + (o.endTime().date.getTime() - o.startTime().date.getTime()) * rate;
         var dsEvent = MO.Memory.alloc(SEvent);
         dsEvent.sender = o;
         var selectedDate = MO.Memory.alloc(TDate);
         selectedDate.date.setTime(msDate);
         selectedDate.refresh();
         dsEvent.date = selectedDate.parseAuto(selectedDate.format('YYYYMMDD'));
         o.processDataChangedListener(dsEvent);
         MO.Memory.free(dsEvent);
      }
   }
}
MO.SGuiGridPaintContext = function SGuiGridPaintContext(){
   var o = this;
   o.graphic   = null;
   o.rectangle = new MO.SRectangle();
   o.style     = new MO.SUiGridCellStyle();
   o.dispose   = MO.SGuiGridPaintContext_dispose;
   return o;
}
MO.SGuiGridPaintContext_dispose = function SGuiGridPaintContext_dispose(){
   var o = this;
   o.graphic = null;
   o.rectangle = MO.Lang.Object.dispose(o.rectangle);
   o.style = MO.Lang.Object.dispose(o.style);
}
MO.FGuiGridCell = function FGuiGridCell(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MUiGridCell);
   o.onPaint   = MO.FGuiGridCell_onPaint;
   o.construct = MO.FGuiGridCell_construct;
   o.testReady = MO.Method.emptyTrue;
   o.draw      = MO.Method.empty;
   o.dispose   = MO.FGuiGridCell_dispose;
   return o;
}
MO.FGuiGridCell_construct = function FGuiGridCell_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o.__base.MUiGridCell.construct.call(o);
}
MO.FGuiGridCell_dispose = function FGuiGridCell_dispose(){
   var o = this;
   o.__base.MUiGridCell.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FGuiGridCellBigNumber = function FGuiGridCellBigNumber(o){
   o = MO.Class.inherits(this, o, MO.FGuiGridCell, MO.MUiGridCellCurrency);
   o._fontColor  = null;
   o._numberFont = null;
   o.construct   = MO.FGuiGridCellBigNumber_construct;
   o.formatText  = MO.FGuiGridCellBigNumber_formatText;
   o.draw        = MO.FGuiGridCellBigNumber_draw;
   o.dispose     = MO.FGuiGridCellBigNumber_dispose;
   return o;
}
MO.FGuiGridCellBigNumber_construct = function FGuiGridCellBigNumber_construct(){
   var o = this;
   o.__base.FGuiGridCell.construct.call(o);
   o.__base.MUiGridCellCurrency.construct.call(o);
   o._numberFont = new MO.SUiFont();
}
MO.FGuiGridCellBigNumber_formatText = function FGuiGridCellBigNumber_formatText(value){
   return this.__base.MUiGridColumnDate.formatText.call(this, value)
}
MO.FGuiGridCellBigNumber_draw = function FGuiGridCellBigNumber_draw(context){
   var o = this;
   var graphic = context.graphic;
   var rectangle = context.rectangle;
   var font = context.style.font;
   var x = rectangle.left;
   var y = rectangle.top;
   var width = rectangle.width;
   var height = rectangle.height;
   var column = o._column;
   var cellPadding = column.cellPadding();
   var value = o.value();
   var text = o.text();
   var textLength = text.length;
   var numberFont = o._numberFont;
   numberFont.assign(font);
   var contentWidth = width - cellPadding.right;
   if(value >= 0){
      if(textLength > 7){
         var fontColor = null;
         fontColor = column.highColor();
         var high = text.substring(0, text.length - 11);
         var low = text.substring(text.length - 11, text.length - 7) + '.' +text.substring(text.length - 7, text.length - 5);
         var highWidth = graphic.textWidth(high);
         var lowWidth = graphic.textWidth(low);
         numberFont.color = column.highColor();
         graphic.drawFontText(high, numberFont, x, y, contentWidth - lowWidth, height, MO.EUiAlign.Right);
         numberFont.color = column.normalColor();
         graphic.drawFontText(low, numberFont, x, y, contentWidth, height, MO.EUiAlign.Right);
      }
      else if(textLength > 5){
         var low = '0.' + text.substring(text.length - 7, text.length - 5);
         numberFont.color = column.normalColor();
         graphic.drawFontText(low, numberFont, x, y, contentWidth, height, MO.EUiAlign.Right);
      }
      else {
         numberFont.color = column.normalColor();
         graphic.drawFontText('0.00', numberFont, x, y, contentWidth, height, MO.EUiAlign.Right);
      }
   }else if(value < 0){
      numberFont.color = column.negativeColor();
      graphic.drawFontText(text, numberFont, x, y, contentWidth, height, MO.EUiAlign.Right);
   }
}
MO.FGuiGridCellBigNumber_dispose = function FGuiGridCellBigNumber_dispose(){
   var o = this;
   o._numberFont = MO.Lang.Object.dispose(o._numberFont);
   o.__base.MUiGridCellCurrency.dispose.call(o);
   o.__base.FGuiGridCell.dispose.call(o);
}
MO.FGuiGridCellCurrency = function FGuiGridCellCurrency(o){
   o = MO.Class.inherits(this, o, MO.FGuiGridCell, MO.MUiGridCellCurrency);
   o._fontColor  = null;
   o._numberFont = null;
   o.construct   = MO.FGuiGridCellCurrency_construct;
   o.formatText  = MO.FGuiGridCellCurrency_formatText;
   o.draw        = MO.FGuiGridCellCurrency_draw;
   o.dispose     = MO.FGuiGridCellCurrency_dispose;
   return o;
}
MO.FGuiGridCellCurrency_construct = function FGuiGridCellCurrency_construct(){
   var o = this;
   o.__base.FGuiGridCell.construct.call(o);
   o.__base.MUiGridCellCurrency.construct.call(o);
   o._numberFont = new MO.SUiFont();
}
MO.FGuiGridCellCurrency_formatText = function FGuiGridCellCurrency_formatText(value){
   return this.__base.MUiGridColumnDate.formatText.call(this, value)
}
MO.FGuiGridCellCurrency_draw = function FGuiGridCellCurrency_draw(context){
   var o = this;
   var graphic = context.graphic;
   var rectangle = context.rectangle;
   var font = context.style.font;
   var x = rectangle.left;
   var y = rectangle.top;
   var width = rectangle.width;
   var height = rectangle.height;
   var column = o._column;
   var cellPadding = column.cellPadding();
   var value = o.value();
   var text = o.text();
   var textLength = text.length;
   var numberFont = o._numberFont;
   numberFont.assign(font);
   var contentWidth = width - cellPadding.right;
   if(value >= 0){
      if(textLength > 11){
         var fontColor = null;
         var highest = text.substring(0, text.length - 11);
         var high = text.substring(textLength - 11, textLength - 7);
         var low = text.substring(textLength - 7, textLength);
         var highestWidth = graphic.textWidth(highest);
         var highWidth = graphic.textWidth(high);
         var lowWidth = graphic.textWidth(low);
         numberFont.color = column.highestColor();
         graphic.drawFontText(highest, numberFont, x, y, contentWidth - highWidth - lowWidth, height, MO.EUiAlign.Right);
         numberFont.color = column.highColor();
         graphic.drawFontText(high, numberFont, x, y, contentWidth - lowWidth, height, MO.EUiAlign.Right);
         numberFont.color = column.normalColor();
         graphic.drawFontText(low, numberFont, x, y, contentWidth, height, MO.EUiAlign.Right);
      }else if(textLength > 7){
         var fontColor = null;
         if(textLength > 9){
            fontColor = column.highColor();
         }else{
            fontColor = column.lowerColor();
         }
         var high = text.substring(0, textLength - 7);
         var low = text.substring(textLength - 7, textLength);
         var highWidth = graphic.textWidth(high);
         var lowWidth = graphic.textWidth(low);
         numberFont.color = fontColor;
         graphic.drawFontText(high, numberFont, x, y, contentWidth - lowWidth, height, MO.EUiAlign.Right);
         numberFont.color = column.normalColor();
         graphic.drawFontText(low, numberFont, x, y, contentWidth, height, MO.EUiAlign.Right);
      }else{
         numberFont.color = column.normalColor();
         graphic.drawFontText(text, numberFont, x, y, contentWidth, height, MO.EUiAlign.Right);
      }
   }else if(value < 0){
      numberFont.color = column.negativeColor();
      graphic.drawFontText(text, numberFont, x, y, contentWidth, height, MO.EUiAlign.Right);
   }
}
MO.FGuiGridCellCurrency_dispose = function FGuiGridCellCurrency_dispose(){
   var o = this;
   o._numberFont = MO.Lang.Object.dispose(o._numberFont);
   o.__base.MUiGridCellCurrency.dispose.call(o);
   o.__base.FGuiGridCell.dispose.call(o);
}
MO.FGuiGridCellDate = function FGuiGridCellDate(o){
   o = MO.Class.inherits(this, o, MO.FGuiGridCell, MO.MUiGridCellDate);
   o.construct = MO.FGuiGridCellDate_construct;
   o.draw      = MO.FGuiGridCellDate_draw;
   o.dispose   = MO.FGuiGridCellDate_dispose;
   return o;
}
MO.FGuiGridCellDate_construct = function FGuiGridCellDate_construct(){
   var o = this;
   o.__base.FGuiGridCell.construct.call(o);
   o.__base.MUiGridCellDate.construct.call(o);
}
MO.FGuiGridCellDate_draw = function FGuiGridCellDate_draw(context){
   var o = this;
   var graphic = context.graphic;
   var rectangle = context.rectangle;
   var font = context.style.font;
   var text = o.text();
   graphic.drawFontText(text, font, rectangle.left, rectangle.top, rectangle.width, rectangle.height, MO.EUiAlign.Center);
}
MO.FGuiGridCellDate_dispose = function FGuiGridCellDate_dispose(){
   var o = this;
   o.__base.MUiGridCellDate.dispose.call(o);
   o.__base.FGuiGridCell.dispose.call(o);
}
MO.FGuiGridCellPicture = function FGuiGridCellPicture(o) {
   o = MO.Class.inherits(this, o, MO.FGuiGridCell, MO.MUiGridCellPicture);
   o._image = null;
   o.construct = MO.FGuiGridCellPicture_construct;
   o.testReady = MO.FGuiGridCellPicture_testReady;
   o.setValue = MO.FGuiGridCellPicture_setValue;
   o.draw = MO.FGuiGridCellPicture_draw;
   o.dispose = MO.FGuiGridCellPicture_dispose;
   return o;
}
MO.FGuiGridCellPicture_construct = function FGuiGridCellPicture_construct() {
   var o = this;
   o.__base.FGuiGridCell.construct.call(o);
   o.__base.MUiGridCellPicture.construct.call(o);
}
MO.FGuiGridCellPicture_testReady = function FGuiGridCellPicture_testReady() {
   var o = this;
   var image = o._image;
   if (image) {
      return image.testReady();
   }
   return true;
}
MO.FGuiGridCellPicture_draw = function FGuiGridCellPicture_draw(context) {
   var o = this;
   var graphic = context.graphic;
   var rectangle = context.rectangle;
   var imageurl = o.text();
   var image = o._image;
   if (!image) {
      return;
   }
   var imageSize = image.size();
   var imageWidth = imageSize.width;
   var imageHeight = imageSize.height;
   var rectangleHeight = rectangle.height;
   var align = o._column._align;
   var imageX = 0;
   var imageY = rectangle.top;
   if (rectangleHeight >= imageHeight) {
      imageY = (rectangleHeight / 2) - (imageHeight / 2) + imageY + 3;
   } else {
      imageY = imageY - (imageHeight - rectangleHeight);
   }
   if (align == MO.EUiAlign.Left) {
      imageX = rectangle.left;
   } else if (align == MO.EUiAlign.Center) {
      imageX = (rectangle.width / 2) - (imageWidth / 2) + rectangle.left;
   } else if (align == MO.EUiAlign.Right) {
      imageX = (rectangle.width / 2) + (imageWidth / 2) + rectangle.left;
   }
   var drawScale = o._column._drawScale;
   graphic.drawImage(image, imageX, imageY, imageWidth * drawScale, imageHeight * drawScale);
}
MO.FGuiGridCellPicture_setValue = function FGuiGridCellPicture_setValue(value) {
   var o = this;
   o.__base.FGuiGridCell.setValue.call(o, value);
   var url = o.text();
   if (MO.Lang.String.isEmpty(url)) {
      o._image = null;
   } else {
      o._image = MO.Console.find(MO.FImageConsole).load(url);
   }
}
MO.FGuiGridCellPicture_dispose = function FGuiGridCellPicture_dispose() {
   var o = this;
   o.__base.MUiGridCellPicture.dispose.call(o);
   o.__base.FGuiGridCell.dispose.call(o);
}
MO.FGuiGridCellText = function FGuiGridCellText(o){
   o = MO.Class.inherits(this, o, MO.FGuiGridCell, MO.MUiGridCellText);
   o.construct = MO.FGuiGridCellText_construct;
   o.draw      = MO.FGuiGridCellText_draw;
   o.dispose   = MO.FGuiGridCellText_dispose;
   return o;
}
MO.FGuiGridCellText_construct = function FGuiGridCellText_construct(){
   var o = this;
   o.__base.FGuiGridCell.construct.call(o);
   o.__base.MUiGridCellText.construct.call(o);
}
MO.FGuiGridCellText_draw = function FGuiGridCellText_draw(context){
   var o = this;
   var graphic = context.graphic;
   var rectangle = context.rectangle;
   var font = context.style.font;
   var column = o._column;
   var cellPadding = column.cellPadding();
   var text = o.text();
   var column = o._column;
   var contentWidth = rectangle.width - cellPadding.right;
   graphic.drawFontText(text, font, rectangle.left, rectangle.top, contentWidth, rectangle.height, column.textAlign());
}
MO.FGuiGridCellText_dispose = function FGuiGridCellText_dispose(){
   var o = this;
   o.__base.MUiGridCellText.dispose.call(o);
   o.__base.FGuiGridCell.dispose.call(o);
}
MO.FGuiGridColumn = function FGuiGridColumn(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MUiGridColumn);
   o.construct = MO.FGuiGridColumn_construct;
   o.testReady = MO.Method.emptyTrue;
   o.draw      = MO.FGuiGridColumn_draw;
   o.dispose   = MO.FGuiGridColumn_dispose;
   return o;
}
MO.FGuiGridColumn_construct = function FGuiGridColumn_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o.__base.MUiGridColumn.construct.call(o);
}
MO.FGuiGridColumn_draw = function FGuiGridColumn_draw(context){
   var o = this;
   var graphic = context.graphic;
   var rectangle = context.rectangle;
   var padding = o._padding;
   var contentX = rectangle.left + padding.left;
   var contentY = rectangle.top + padding.top;
   var contentWidth = rectangle.width - padding.left - padding.right;
   var contentHeight = rectangle.height - padding.top - padding.bottom;
   var backColor = o._backColor;
   if(!backColor){
      backColor = o._grid.headBackColor();
   }
   graphic.fillRectangle(contentX, contentY, contentWidth, contentHeight, backColor);
   var font = o.findFont();
   graphic.drawFontText(o._label, font, contentX, contentY - 3, contentWidth, contentHeight, MO.EUiAlign.Center);
}
MO.FGuiGridColumn_dispose = function FGuiGridColumn_dispose(){
   var o = this;
   o.__base.MUiGridColumn.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FGuiGridColumnBigNumber = function FGuiGridColumnBigNumber(o){
   o = MO.Class.inherits(this, o, MO.FGuiGridColumn, MO.MUiGridColumnCurrency);
   o.construct  = MO.FGuiGridColumnBigNumber_construct;
   o.formatText = MO.FGuiGridColumnBigNumber_formatText;
   o.dispose    = MO.FGuiGridColumnBigNumber_dispose;
   return o;
}
MO.FGuiGridColumnBigNumber_construct = function FGuiGridColumnBigNumber_construct(){
   var o = this;
   o.__base.FGuiGridColumn.construct.call(o);
   o.__base.MUiGridColumnCurrency.construct.call(o);
   o._cellClass = MO.FGuiGridCellBigNumber;
}
MO.FGuiGridColumnBigNumber_formatText = function FGuiGridColumnBigNumber_formatText(value){
   return this.__base.MUiGridColumnCurrency.formatText.call(this, value)
}
MO.FGuiGridColumnBigNumber_dispose = function FGuiGridColumnBigNumber_dispose(){
   var o = this;
   o.__base.MUiGridColumnCurrency.dispose.call(o);
   o.__base.FGuiGridColumn.dispose.call(o);
}
MO.FGuiGridColumnCurrency = function FGuiGridColumnCurrency(o){
   o = MO.Class.inherits(this, o, MO.FGuiGridColumn, MO.MUiGridColumnCurrency);
   o.construct    = MO.FGuiGridColumnCurrency_construct;
   o.formatText   = MO.FGuiGridColumnCurrency_formatText;
   o.dispose      = MO.FGuiGridColumnCurrency_dispose;
   return o;
}
MO.FGuiGridColumnCurrency_construct = function FGuiGridColumnCurrency_construct(){
   var o = this;
   o.__base.FGuiGridColumn.construct.call(o);
   o.__base.MUiGridColumnCurrency.construct.call(o);
   o._cellClass = MO.FGuiGridCellCurrency;
}
MO.FGuiGridColumnCurrency_formatText = function FGuiGridColumnCurrency_formatText(value){
   return this.__base.MUiGridColumnCurrency.formatText.call(this, value)
}
MO.FGuiGridColumnCurrency_dispose = function FGuiGridColumnCurrency_dispose(){
   var o = this;
   o.__base.MUiGridColumnCurrency.dispose.call(o);
   o.__base.FGuiGridColumn.dispose.call(o);
}
MO.FGuiGridColumnDate = function FGuiGridColumnDate(o){
   o = MO.Class.inherits(this, o, MO.FGuiGridColumn, MO.MUiGridColumnDate);
   o.construct  = MO.FGuiGridColumnDate_construct;
   o.formatText = MO.FGuiGridColumnDate_formatText;
   o.dispose    = MO.FGuiGridColumnDate_dispose;
   return o;
}
MO.FGuiGridColumnDate_construct = function FGuiGridColumnDate_construct(){
   var o = this;
   o.__base.FGuiGridColumn.construct.call(o);
   o.__base.MUiGridColumnDate.construct.call(o);
   o._cellClass = MO.FGuiGridCellDate;
}
MO.FGuiGridColumnDate_formatText = function FGuiGridColumnDate_formatText(value){
   return this.__base.MUiGridColumnDate.formatText.call(this, value)
}
MO.FGuiGridColumnDate_dispose = function FGuiGridColumnDate_dispose(){
   var o = this;
   o.__base.MUiGridColumnDate.dispose.call(o);
   o.__base.FGuiGridColumn.dispose.call(o);
}
MO.FGuiGridColumnPicture = function FGuiGridColumnPicture(o) {
   o = MO.Class.inherits(this, o, MO.FGuiGridColumn, MO.MUiGridColumnText);
   o._align   = MO.Class.register(o, new MO.AGetSet('_align'));
   o._drawScale = MO.Class.register(o, new MO.AGetSet('_drawScale'), 1.0);
   o.construct = MO.FGuiGridColumnPicture_construct;
   o.dispose   = MO.FGuiGridColumnPicture_dispose;
   return o;
}
MO.FGuiGridColumnPicture_construct = function FGuiGridColumnPicture_construct() {
   var o = this;
   o.__base.FGuiGridColumn.construct.call(o);
   o.__base.MUiGridColumnText.construct.call(o);
   o._cellClass = MO.FGuiGridCellPicture;
}
MO.FGuiGridColumnPicture_dispose = function FGuiGridColumnPicture_dispose() {
   var o = this;
   o.__base.MUiGridColumnText.dispose.call(o);
   o.__base.FGuiGridColumn.dispose.call(o);
}
MO.FGuiGridColumnText = function FGuiGridColumnText(o){
   o = MO.Class.inherits(this, o, MO.FGuiGridColumn, MO.MUiGridColumnText);
   o.construct = MO.FGuiGridColumnText_construct;
   o.dispose   = MO.FGuiGridColumnText_dispose;
   return o;
}
MO.FGuiGridColumnText_construct = function FGuiGridColumnText_construct(){
   var o = this;
   o.__base.FGuiGridColumn.construct.call(o);
   o.__base.MUiGridColumnText.construct.call(o);
   o._cellClass = MO.FGuiGridCellText;
}
MO.FGuiGridColumnText_dispose = function FGuiGridColumnText_dispose(){
   var o = this;
   o.__base.MUiGridColumnText.dispose.call(o);
   o.__base.FGuiGridColumn.dispose.call(o);
}
MO.FGuiGridControl = function FGuiGridControl(o) {
   o = MO.Class.inherits(this, o, MO.FGuiControl, MO.MUiGridControl);
   o._optionClip     = MO.Class.register(o, new MO.AGetSet('_optionClip'), true);
   o._headPadding    = MO.Class.register(o, new MO.AGetter('_headPadding'));
   o._rowScroll      = 0;
   o._rowScrollSpeed = 1;
   o._paintContext   = null;
   o.onPaintBegin    = MO.FGuiGridControl_onPaintBegin;
   o.construct       = MO.FGuiGridControl_construct;
   o.dispose         = MO.FGuiGridControl_dispose;
   return o;
}
MO.FGuiGridControl_onPaintBegin = function FGuiGridControl_onPaintBegin(event) {
   var o = this;
   var dirty = false;
   var padding = o._padding;
   var context = o._paintContext;
   var contextStyle = context.style;
   var contextRectangle = context.rectangle;
   var graphic = event.graphic;
   context.graphic = graphic;
   var rectangle = event.rectangle;
   var left = rectangle.left + padding.left;
   var top = rectangle.top + padding.top;
   var bottom = rectangle.bottom() - padding.bottom;
   var width = rectangle.width - padding.left - padding.right;
   var height = rectangle.height - padding.top - padding.bottom;
   var headPadding = o._headPadding;
   var drawX = left;
   var drawY = top + headPadding.top;;
   var gridWidth = width;
   var columnWidthTotal = 0;
   var columns = o._columns;
   var columnCount = columns.count();
   for (var i = 0; i < columnCount; i++) {
      var column = columns.at(i);
      columnWidthTotal += column.width();
   }
   if (o._displayHead) {
      var columnX = drawX;
      var columnY = drawY;
      var headTextTop = columnY + 0;
      var headHeight = o._headHeight;
      for (var i = 0; i < columnCount; i++) {
         var column = columns.at(i);
         if(!column.testReady()){
            dirty = true;
            continue;
         }
         var columnWidth = gridWidth * column.width() / columnWidthTotal;
         contextRectangle.set(columnX, columnY, columnWidth, headHeight);
         column.draw(context);
         columnX += columnWidth;
      }
      drawY += headHeight + headPadding.bottom;
   }
   var rowsHeight = bottom - drawY;
   var rowHeight = o._rowHeight;
   if (o._optionClip) {
      graphic.clip(drawX, drawY, gridWidth, rowsHeight);
   }
   var rows = o._rows;
   var rowCount = rows.count();
   drawY += o._rowScroll;
   for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
      var columnX = drawX;
      if (drawY > -rowHeight) {
         var row = rows.at(rowIndex);
         for (var i = 0; i < columnCount; i++) {
            var column = columns.at(i);
            var dataName = column.dataName();
            var columnWidth = gridWidth * column.width() / columnWidthTotal;
            var cell = row.cells().get(dataName);
            if(!cell.testReady()){
               dirty = true;
               continue;
            }
            cell.calculateStyle(contextStyle);
            contextRectangle.set(columnX, drawY, columnWidth, rowHeight);
            cell.draw(context);
            columnX += columnWidth;
         }
      }
      drawY += rowHeight;
      if (drawY > bottom) {
         break;
      }
   }
   if(dirty){
      o.dirty();
   }
}
MO.FGuiGridControl_construct = function FGuiGridControl_construct() {
   var o = this;
   o.__base.FGuiControl.construct.call(o);
   o.__base.MUiGridControl.construct.call(o);
   o._rowClass = MO.FGuiGridRow;
   o._paintContext = new MO.SGuiGridPaintContext();
   o._headPadding = new MO.SPadding();
}
MO.FGuiGridControl_dispose = function FGuiGridControl_dispose() {
   var o = this;
   o._rowClass = null;
   o._headPadding = null;
   o._paintContext = MO.Lang.Object.dispose(o._paintContext);
   o.__base.MUiGridControl.dispose.call(o);
   o.__base.FGuiControl.dispose.call(o);
}
MO.FGuiGridRow = function FGuiGridRow(o){
   o = MO.Class.inherits(this, o, MO.FObject, MO.MUiGridRow);
   o.construct = MO.FGuiGridRow_construct;
   o.dispose   = MO.FGuiGridRow_dispose;
   return o;
}
MO.FGuiGridRow_construct = function FGuiGridRow_construct(){
   var o = this;
   o.__base.FObject.construct.call(o);
   o.__base.MUiGridRow.construct.call(o);
}
MO.FGuiGridRow_dispose = function FGuiGridRow_dispose(){
   var o = this;
   o.__base.MUiGridRow.dispose.call(o);
   o.__base.FObject.dispose.call(o);
}
MO.FGuiTable = function FGuiTable(o){
   o = MO.Class.inherits(this, o, MO.FGuiGridControl);
   o.oeUpdate        = MO.FGuiTable_oeUpdate;
   o.construct       = MO.FGuiTable_construct;
   o.insertRow       = MO.FGuiTable_insertRow;
   o.loadDataset     = MO.FGuiTable_loadDataset;
   o.dispose         = MO.FGuiTable_dispose;
   return o;
}
MO.FGuiTable_oeUpdate = function FGuiTable_oeUpdate(event){
   var o = this;
   o.__base.FGuiGridControl.oeUpdate.call(o, event);
   if(event.isBefore()){
      if(o._rowScroll < 0){
         var rows = o._rows;
         var scrollSpeed = Math.max(parseInt(-o._rowScroll / o._rowHeight), o._rowScrollSpeed);
         o._rowScroll += scrollSpeed;
         if(o._rowScroll >= 0){
            var limitCount = o._rowLimitCount;
            if(limitCount != 0){
               if(rows.count() > limitCount){
                  var row = rows.pop();
                  o.freeRow(row);
               }
            }
            o._rowScroll = 0;
         }
         o.dirty();
      }
   }
}
MO.FGuiTable_construct = function FGuiTable_construct(){
   var o = this;
   o.__base.FGuiGridControl.construct.call(o);
   o.__base.MUiGridControl.construct.call(o);
   o._rowClass = MO.FGuiGridRow;
}
MO.FGuiTable_insertRow = function FGuiTable_insertRow(row){
   var o = this;
   o._rows.unshift(row);
   o._rowScroll -= o._rowHeight;
   o.dirty();
}
MO.FGuiTable_loadDataset = function FGuiTable_loadDataset(dataset){
}
MO.FGuiTable_dispose = function FGuiTable_dispose(){
   var o = this;
   o.__base.MUiGridControl.dispose.call(o);
   o.__base.FGuiGridControl.dispose.call(o);
}
MO.FGuiBar = function FGuiBar(o){
   o = MO.Class.inherits(this, o, MO.FGuiFrame);
   return o;
}
MO.FGuiChartTotal = function FGuiChartTotal(o) {
   o = MO.Class.inherits(this, o, MO.FGuiControl);
   o._ready                   = MO.Class.register(o, new MO.AGetSet('_ready'), false);
   o._numImages               = null;
   o._yuanImage               = null;
   o._wanImage                = null;
   o._yiImage                 = null;
   o._imageToLoad             = 0;
   o._value                   = MO.Class.register(o, new MO.AGetter('_value'));
   o._originValue             = '0';
   o._nextValue               = null;
   o._startTick               = 0;
   o._rolling                 = MO.Class.register(o, new MO.AGetSet('_rolling'), false);
   o._rollingDuration         = MO.Class.register(o, new MO.AGetSet('_rollingDuration'), 1000);
   o._rollingPages            = null;
   o._noRolling               = MO.Class.register(o, new MO.AGetSet('_noRolling'), false);
   o.construct                = MO.FGuiChartTotal_construct;
   o.setup                    = MO.FGuiChartTotal_setup;
   o.onImageLoad              = MO.FGuiChartTotal_onImageLoad;
   o.onPaintBegin             = MO.FGuiChartTotal_onPaintBegin;
   o.setValue                 = MO.FGuiChartTotal_setValue;
   o.dispose                  = MO.FGuiChartTotal_dispose;
   return o;
}
MO.FGuiChartTotal_construct = function FGuiChartTotal_construct() {
   var o = this;
   o.__base.FGuiControl.construct.call(o);
   o._rollingPages = new MO.TArray();
}
MO.FGuiChartTotal_setup = function FGuiChartTotal_setup() {
   var o = this;
   o._yuanImage = MO.Class.create(MO.FImage);
   o._yuanImage.addLoadListener(o, o.onImageLoad);
   o._yuanImage.loadUrl('{eai.resource}/number/yuan.png');
   o._imageToLoad++;
   o._wanImage = MO.Class.create(MO.FImage);
   o._wanImage.addLoadListener(o, o.onImageLoad);
   o._wanImage.loadUrl('{eai.resource}/number/wan.png');
   o._imageToLoad++;
   o._yiImage = MO.Class.create(MO.FImage);
   o._yiImage.addLoadListener(o, o.onImageLoad);
   o._yiImage.loadUrl('{eai.resource}/number/yi.png');
   o._imageToLoad++;
   o._numImages = new Array(10);
   o._imageToLoad += 10;
   for (var i = 0; i < 10; i++) {
      var img = MO.Class.create(MO.FImage);
      img.addLoadListener(o, o.onImageLoad);
      img.loadUrl('{eai.resource}/number/' + i + '.png');
      o._numImages[i] = img;
   }
}
MO.FGuiChartTotal_onImageLoad = function FGuiChartTotal_onImageLoad() {
   var o = this;
   if (--o._imageToLoad == 0) {
      var canvasSize = MO.Eai.Canvas.logicSize();
      var numImgSize = o._numImages[0]._size;
      var unitImgSize = o._yiImage._size;
      o.setLeft((canvasSize.width - numImgSize.width * 4 - unitImgSize.width) / 2);
      o.setTop((canvasSize.height - unitImgSize.height * 3) / 2);
      o.setWidth(numImgSize.width * 4 + unitImgSize.width);
      o.setHeight(unitImgSize.height * 3);
      o._ready = true;
   }
}
MO.FGuiChartTotal_setValue = function FGuiChartTotal_setValue(value) {
   var o = this;
   if (o._value == value) {
      return;
   }
   if (o._rolling) {
      o._nextValue = o._value;
   }
   o._value = value;
   var originValue = o._originValue;
   var lengthDiff = value.length - originValue.length;
   while (lengthDiff > 0) {
      originValue = '0' + originValue;
      lengthDiff--;
   }
   o._originValue = originValue;
   o._rollingPages.clear();
   o._rollingPages._length = value.length;
   for (var i = 0; i < value.length; i++) {
      var pages = parseInt(value.substring(i, i + 1)) - parseInt(originValue.substring(i, i + 1));
      pages = pages < 0 ? pages + 10 : pages;
      o._rollingPages.set(i, pages);
   }
   o._startTick = MO.Timer.current();
   o._rolling = true;
}
MO.FGuiChartTotal_onPaintBegin = function FGuiChartTotal_onPaintBegin(event) {
   var o = this;
   o.__base.FGuiControl.onPaintBegin.call(o, event);
   if (!o._value) {
      return;
   }
   var graphic = event.graphic;
   var rectangle = event.rectangle;
   var passedTick = MO.Timer.current() - o._startTick;
   if (passedTick > o._rollingDuration || o._noRolling) {
      passedTick = o._rollingDuration;
      o._rolling = false;
   }
   var numImgSize = o._numImages[0]._size;
   var unitImgSize = o._yiImage._size;
   var invesText = o._value;
   var numWidth = numImgSize.width * 4 + unitImgSize.width
   var numLeft = rectangle.left + (rectangle.width - numWidth) / 2;
   var numTop = rectangle.top;
   graphic.store();
   graphic.clip(numLeft, numTop, numWidth, unitImgSize.height);
   numLeft += numImgSize.width;
   for (var i = 0; i < o._value.length; i++) {
      var passedValue = o._rollingPages.get(i) * (passedTick / o._rollingDuration);
      var numString = (parseInt(o._originValue.charAt(i)) + parseInt(passedValue)).toString();
      var currentNum = parseInt(numString.charAt(numString.length - 1));
      var nextNum = currentNum == 9 ? 0 : currentNum + 1;
      var rate = passedValue - parseInt(passedValue);
      graphic.drawImage(o._numImages[currentNum], numLeft, numTop - numImgSize.height * rate, numImgSize.width, numImgSize.height);
      graphic.drawImage(o._numImages[nextNum], numLeft, numTop + numImgSize.height - numImgSize.height * rate, numImgSize.width, numImgSize.height);
      numLeft += numImgSize.width;
      if (i == o._originValue.length - 9) {
         graphic.drawImage(o._yiImage, numLeft, numTop, unitImgSize.width, unitImgSize.height);
         numLeft = rectangle.left + (rectangle.width - numWidth) / 2;
         numTop += unitImgSize.height;
         graphic.restore();
         graphic.store();
         graphic.clip(numLeft, numTop, numWidth, unitImgSize.height);
      }
      else if (i == o._originValue.length - 5) {
         graphic.drawImage(o._wanImage, numLeft, numTop, unitImgSize.width, unitImgSize.height);
         numLeft = rectangle.left + (rectangle.width - numWidth) / 2;
         numTop += unitImgSize.height;
         graphic.restore();
         graphic.store();
         graphic.clip(numLeft, numTop, numWidth, unitImgSize.height);
      }
      else if (i == o._originValue.length - 1) {
         graphic.drawImage(o._yuanImage, numLeft, numTop, unitImgSize.width, unitImgSize.height);
      }
   }
   if (o._rolling == false) {
      o._originValue = o._value;
      o._rollingPages.clear();
   }
}
MO.FGuiChartTotal_dispose = function FGuiChartTotal_dispose() {
   var o = this;
   o.__base.FGuiControl.dispose.call(o);
}
MO.FGuiWindow = function FGuiWindow(o){
   o = MO.Class.inherits(this, o, MO.FGuiFrame);
   return o;
}
MO.FGuiDesignAnchor = function FGuiDesignAnchor(o) {
    o = MO.Class.inherits(this, o, MO.FGuiControl);
    o.construct = MO.FGuiDesignAnchor_construct;
    o.onPaintBegin = FGuiDesignAnchor_onPaintBegin;
    o.dispose = MO.FGuiDesignAnchor_dispose;
    return o;
}
MO.FGuiDesignAnchor_construct = function FGuiDesignAnchor_construct() {
    var o = this;
    o.__base.FGuiControl.construct.call(o);
}
MO.FGuiDesignAnchor_onPaintBegin = function FGuiDesignAnchor_onPaintBegin(event){
    var o = this;
    o.__base.FGuiControl.onPaintBegin.call(o,event);
    var graphic = event.graphic;
    var rectangle = event.rectangle;
}
MO.FGuiDesignAnchor_dispose = function FGuiDesignAnchor_dispose() {
    var o = this;
    o.__base.FGuiControl.dispose.call(o);
}
MO.FGuiDesignRule = function FGuiDesignRule(o){
   o = MO.Class.inherits(this, o, MO.FGuiControl);
   o.construct = MO.FGuiDesignRule_construct;
   o.dispose   = MO.FGuiDesignRule_dispose;
   return o;
}
MO.FGuiDesignRule_construct = function FGuiDesignRule_construct(){
   var o = this;
   o.__base.FGuiControl.construct.call(o);
}
MO.FGuiDesignRule_dispose = function FGuiDesignRule_dispose(){
   var o = this;
   o.__base.FGuiControl.dispose.call(o);
}
MO.FGuiEngineInfo = function FGuiEngineInfo(o){
   o = MO.Class.inherits(this, o, MO.FGuiControl);
   o._lastTick    = 0;
   o._name        = 'EngineInfo';
   o._stage       = MO.Class.register(o, new MO.AGetSet('_stage'));
   o._context     = MO.Class.register(o, new MO.AGetSet('_context'));
   o._ticker      = null;
   o.onPaintBegin = MO.FGuiEngineInfo_onPaintBegin;
   o.oeUpdate     = MO.FGuiEngineInfo_oeUpdate;
   o.construct    = MO.FGuiEngineInfo_construct;
   return o;
}
MO.FGuiEngineInfo_onPaintBegin = function FGuiEngineInfo_onPaintBegin(event){
   var o = this;
   o.__base.FGuiControl.onPaintBegin.call(o, event);
   if(o._stage == null){
      return;
   }
   if(o._context == null){
      return;
   }
   var graphic = event.graphic;
   var rectangle = event.rectangle;
   var timer = o._stage.timer();
   var stageStatistics = o._stage.statistics();
   var statistics = o._context.statistics();
   var line = 20;
   var locationX = 10;
   var locationY = rectangle.top + line;
   graphic.setFont('16px sans-serif');
   graphic.drawText('Frame         : ' + MO.Timer.rate(), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText('Frame Span    : ' + stageStatistics._frame.toString(), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText('Frame Process : ' + stageStatistics._frameProcess.toString(), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText('Frame Draw    : ' + stageStatistics._frameDraw.toString() + ' | ' + stageStatistics._frameDrawSort.toString(), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText('Draw          : ' + statistics.frameDrawCount(), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText('Draw Const    : ' + statistics.frameConstCount() + ' Length=' + statistics.frameConstLength(), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText('Draw Buffer   : ' + statistics.frameBufferCount(), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText('Draw Texture  : ' + statistics.frameTextureCount(), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText('Draw Triangle : ' + statistics.frameTriangleCount(), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText('Total Program : ' + statistics.programTotal(), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText('Total Layout  : ' + statistics.layoutTotal(), locationX, locationY, '#FFFFFF');
   locationY += line;
   graphic.drawText('Total Buffer  : Vertex=' + statistics.vertexBufferTotal() + ' Index=' + statistics.indexBufferTotal(), locationX, locationY, '#FFFFFF');
   locationY += line;
}
MO.FGuiEngineInfo_oeUpdate = function FGuiEngineInfo_oeUpdate(event){
   var o = this;
   if(o._ticker.process()){
      o.dirty();
   }
   return MO.EEventStatus.Stop;
}
MO.FGuiEngineInfo_construct = function FGuiEngineInfo_construct(){
   var o = this;
   o.__base.FGuiControl.construct.call(o);
   o._size.set(512, 256);
   o._ticker = new MO.TTicker(1000);
}
MO.EEditConfig = new function EEditConfig(){
   var o = this;
   o.Search = 'S';
   o.Copy   = 'C';
   return o;
}
MO.EEditStatus = new function EEditStatus(){
   var o = this;
   o.Blur   = 0;
   o.Cancel = 1;
   o.Ok     = 2;
   return o;
}
MO.EEventType = new function EEventType(){
   var o = this;
   o.Unknown    = 0;
   o.Construct  = 1;
   o.Initialize = 2;
   o.Build      = 3;
   o.Refresh    = 4;
   o.Resize     = 5;
   o.Visible    = 6;
   o.Show       = 7;
   o.Hidden     = 8;
   o.Enable     = 9;
   o.Disable    = 10;
   o.Release    = 11;
   o.Design     = 12;
   o.Action     = 13;
   o.Valid      = 14;
   o.Mode       = 15;
   return o;
}
MO.ERowStatus = new function ERowStatusFace(){
   var o = this;
   o.Normal = 'N';
   o.Insert = 'I';
   o.Update = 'U';
   o.Delete  = 'D';
   return o;
}
MO.MDuiDescribeFrame = function MDuiDescribeFrame(o){
   o = MO.Class.inherits(this, o);
   o._frameName  = null;
   o.buildDefine = MO.MDuiDescribeFrame_buildDefine;
   return o;
}
MO.MDuiDescribeFrame_buildDefine = function MDuiDescribeFrame_buildDefine(hDocument, frameName){
   var o = this;
   if(MO.Lang.String.isEmpty(frameName)){
      frameName = o._frameName;
   }
   var frameConsole = MO.Console.find(MO.FUiFrameDefineConsole);
   var xconfig = frameConsole.load(frameName);
   MO.Dui.Control.build(o, xconfig, null, hDocument);
}
MO.MDuiDesign = function MDuiDesign(o){
   o = MO.Class.inherits(this, o);
   o._statusDesign      = false;
   o._storage       = null;
   o.oeDesign      = MO.MDuiDesign_oeDesign;
   o.onDesignEnter = MO.Class.register(o, new MO.AEventMouseEnter('onDesignEnter'), MO.MDuiDesign_onDesignEnter);
   o.onDesignLeave = MO.Class.register(o, new MO.AEventMouseEnter('onDesignLeave'), MO.MDuiDesign_onDesignLeave);
   o.onDesignBegin = MO.Class.register(o, new MO.AEventMouseEnter('onDesignBegin'), MO.MDuiDesign_onDesignBegin);
   o.onDesignEnd   = MO.Class.register(o, new MO.AEventMouseEnter('onDesignEnd'), MO.MDuiDesign_onDesignEnd);
   return o;
}
MO.MDuiDesign_oeDesign = function MDuiDesign_oeDesign(e){
   if(e.isBefore()){
      switch(e.mode){
         case MO.EDesign.Move:
            var o = this;
            var h = o._hPanel;
            if(e.flag){
               o.isDesign = true;
               MO.RHtml.link(h, 'className', h.className);
               MO.RHtml.link(h, 'onmousedown', h.onmousedown);
               h.onmousedown = null;
               o.onDesignEnter();
            }else{
               o.isDesign = false;
               h.className = MO.RHtml.findLink(h, 'className');
               var omd = MO.RHtml.findLink(h, 'onmousedown');
               if(omd){
                  h.onmousedown = omd;
               }
            }
            break;
         case MO.EDesign.Border:
            var o = this;
            var h = o._hPanel;
            if(e.flag){
               MO.RHtml.link(h, 'styleBorder', h.style.border);
               h.style.border = '1 solid red';
            }else{
               h.style.border = MO.RHtml.findLink(h, 'styleBorder');
            }
            break;
      }
   }
}
MO.MDuiDesign_onDesignEnter = function MDuiDesign_onDesignEnter(p){
   var o = this;
   o._hPanel.className = o.style('Design');
}
MO.MDuiDesign_onDesignLeave = function MDuiDesign_onDesignLeave(p){
}
MO.MDuiDesign_onDesignBegin = function MDuiDesign_onDesignBegin(p){
   var o = this;
   var g = o._storage = MO.Lang.Object.nvlObj(o._storage);
   g.designStyle = o._hPanel.className;
   g.designLayer = o._hPanel.zIndex;
   o._hPanel.className = o.style('DesignDrag');
   o._statusDesign = true;
}
MO.MDuiDesign_onDesignEnd = function MDuiDesign_onDesignEnd(p){
   var o = this;
   var g = o._storage = MO.Lang.Object.nvlObj(o._storage);
   o._hPanel.className = g.designStyle;
   o._hPanel.zIndex = g.designLayer;
   o._statusDesign = false;
}
MO.MDuiDropable = function MDuiDropable(o){
   o = MO.Class.inherits(this, o);
   o._styleDrop         = MO.Class.register(o, new MO.AStyle('_styleDrop'));
   o._styleIconDrop     = MO.Class.register(o, new MO.AStyleIcon('_styleIconDrop'));
   o._hDropPanel        = null;
   o._hDrop             = null;
   o.onBuildDrop       = MO.MDuiDropable_onBuildDrop;
   o.onDropEnter       = MO.Class.register(o, new MO.AEventMouseEnter('onDropEnter'));
   o.onDropLeave       = MO.Class.register(o, new MO.AEventMouseLeave('onDropLeave'));
   o.onDropClick       = MO.Class.register(o, new MO.AEventClick('onDropClick'), MO.MDuiDropable_onDropClick);
   o.onDropDoubleClick = MO.Class.register(o, new MO.AEventDoubleClick('onDropDoubleClick'), MO.MDuiDropable_onDropDoubleClick);
   o.canDrop           = MO.MDuiDropable_canDrop;
   return o;
}
MO.MDuiDropable_onBuildDrop = function MDuiDropable_onBuildDrop(hPanel){
   var o = this;
   o._hDropPanel = hPanel;
   hPanel.className = o.styleName('Drop', MO.MDuiDropable);
   var hDrop = o.hDrop = MO.RBuilder.appendIcon(hPanel, null, 'control.drop');
   hDrop.style.width =16;
   hDrop.style.borderLeft = '1 solid #CCCCCC';
   hDrop.style.cursor = 'hand';
}
MO.MDuiDropable_onDropClick = function MDuiDropable_onDropClick(){
   var o = this;
   if(o._editable){
      o.drop();
   }
}
MO.MDuiDropable_onDropDoubleClick = function MDuiDropable_onDropDoubleClick(){
   var o = this;
   if(o._editable){
      o.drop();
   }
}
MO.MDuiDropable_canDrop = function MDuiDropable_canDrop(){
   var o = this;
   if(MO.Class.isClass(o, MO.MDuiDesign)){
      return !MO.Console.find(MO.FUiDesignConsole).canDesignMove;
   }
   return true;
}
MO.MDuiEditChange = function MDuiEditChange(o){
   o = MO.Class.inherits(this, o);
   o._styleChangePanel = MO.Class.register(o, new MO.AStyle('_styleChangePanel'));
   o._styleChangeIcon  = MO.Class.register(o, new MO.AStyle('_styleChangeIcon'));
   o._hChangePanel     = null;
   o._hChangeIcon      = null;
   o.onBuildEditChange = MO.MDuiEditChange_onBuildEditChange;
   o.onChangeEnter     = MO.Class.register(o, new MO.AEventMouseEnter('onChangeEnter'), MO.MDuiEditChange_onChangeEnter);
   o.onChangeLeave     = MO.Class.register(o, new MO.AEventMouseLeave('onChangeLeave'), MO.MDuiEditChange_onChangeLeave);
   o.onChangeClick     = MO.Class.register(o, new MO.AEventClick('onChangeClick'), MO.MDuiEditChange_onChangeClick);
   o.construct         = MO.MDuiEditChange_construct;
   o.changeSet         = MO.MDuiEditChange_changeSet;
   o.dispose           = MO.MDuiEditChange_dispose;
   return o;
}
MO.MDuiEditChange_onBuildEditChange = function MDuiEditChange_onBuildEditChange(p){
   var o = this;
   var hPanel = o._hChangePanel;
   hPanel.className = o.styleName('ChangePanel', MO.MDuiEditChange);
   o.attachEvent('onChangeEnter', hPanel, o.onChangeEnter);
   o.attachEvent('onChangeLeave', hPanel, o.onChangeLeave);
   o.attachEvent('onChangeClick', hPanel, o.onChangeClick);
   var hIcon = o._hChangeIcon = MO.Window.Builder.appendIcon(hPanel, o.styleName('ChangeIcon', MO.MDuiEditChange), 'control.change');
   hIcon._pname = 'change.icon';
}
MO.MDuiEditChange_onChangeEnter = function MDuiEditChange_onChangeEnter(e){
   var o = this;
}
MO.MDuiEditChange_onChangeLeave = function MDuiEditChange_onChangeLeave(e){
   var o = this;
}
MO.MDuiEditChange_onChangeClick = function MDuiEditChange_onChangeClick(e){
}
MO.MDuiEditChange_construct = function MDuiEditChange_construct(){
}
MO.MDuiEditChange_changeSet = function MDuiEditChange_changeSet(p){
}
MO.MDuiEditChange_dispose = function MDuiEditChange_dispose(){
   var o = this;
   o._hChangeIcon = MO.Window.Html.free(o._hChangeIcon);
   o._hChangePanel = MO.Window.Html.free(o._hChangePanel);
}
MO.MDuiEditDescriptor = function MDuiEditDescriptor(o){
   o = MO.Class.inherits(this, o, MO.MEditable);
   o._dataName          = MO.Class.register(o, new MO.APtyString(null, '_dataName'));
   o._dataCode          = MO.Class.register(o, new MO.APtyString(null, '_dataCode'));
   o._dataDefault       = MO.Class.register(o, new MO.APtyString(null, '_dataDefault'));
   o._labelIcon         = MO.Class.register(o, new MO.APtyString(null, '_labelIcon'));
   o._labelIconDisable  = MO.Class.register(o, new MO.APtyString(null, '_labelIconDisable'));
   o._labelColor        = MO.Class.register(o, new MO.APtyString(null, '_labelColor'));
   o._labelAlign        = MO.Class.register(o, new MO.APtyString(null, '_labelAlign', null, MO.EAlign.Left));
   o._labelValign       = MO.Class.register(o, new MO.APtyString(null, '_labelValign', null, MO.EAlign.Middle));
   o._editSearch        = MO.Class.register(o, new MO.APtySet(null, '_editSearch', 'editAccess', MO.EEditConfig.Search, false));
   o._editCopy          = MO.Class.register(o, new MO.APtySet(null, '_editCopy', 'editAccess', MO.EEditConfig.Copy, false));
   o._editAlign         = MO.Class.register(o, new MO.APtyString(null, '_editAlign', null, MO.EAlign.Left));
   o._editValign        = MO.Class.register(o, new MO.APtyString(null, '_editValign', null, MO.EAlign.Middle));
   o._editFormat        = MO.Class.register(o, new MO.APtyString(null, '_editFormat'));
   o._editUnit          = MO.Class.register(o, new MO.APtyString(null, '_editUnit'));
   o._editTip           = MO.Class.register(o, new MO.APtyString(null, '_editTip'));
   o._validInsert       = MO.Class.register(o, new MO.APtySet(null, '_validInsert', 'validAccess', MO.EDisplayMode.Insert, false));
   o._validUpdate       = MO.Class.register(o, new MO.APtySet(null, '_validUpdate', 'validAccess', MO.EDisplayMode.Update, false));
   o._validDelete       = MO.Class.register(o, new MO.APtySet(null, '_validDelete', 'validAccess', MO.EDisplayMode.Delete, false));
   o._validRequire      = MO.Class.register(o, new MO.APtyBoolean(null, '_validRequire', null, false));
   return o;
}
MO.MDuiEditDescriptor_onDataEnter = function MDuiEditDescriptor_onDataEnter(s, e){
   var o = this;
   if(s.__progress){
      return;
   }
   if(s._editable){
      s._hover = true;
      s.refreshStyle();
   }
   if(o.editTip){
      o.__tip = window.status;
   }
}
MO.MDuiEditDescriptor_onDataLeave = function MDuiEditDescriptor_onDataLeave(s, e){
   var o = this;
   if(s.__progress){
      return;
   }
   if(s._editable){
      o._hover = false;
      o.refreshStyle();
   }
   if(o.editTip){
      window.status = o.__tip;
   }
}
MO.MDuiEditDescriptor_onDataKeyDown = function MDuiEditDescriptor_onDataKeyDown(s, e){
   var o = this;
   if(s._editable && !s._disabled){
      s._invalidText = o.validText(s.text());
      s.refreshStyle();
   }
}
MO.MDuiEditDescriptor_onDataChange = function MDuiEditDescriptor_onDataChange(s, e){
   var o = this;
   if(s._editable && !s._disabled){
      if(s.isTextChanged()){
         var t = s.text();
         var vt = s._invalidText = o.validText(t);
         if(vt){
            s.refreshStyle();
         }else{
         }
         o.callEvent('onDataChange', o, o.__changedEvent);
      }
   }
}
MO.MDuiEditDescriptor_onDataEditEnd = function MDuiEditDescriptor_onDataEditEnd(s, e){
   var o = this;
   var vt = s._invalidText = o.validText(s.text());
   if(vt){
   }else{
      s.commitValue();
   }
   if(s.isTextChanged()){
	   o.callEvent('onDataChange', o, o.__changedEvent);
   }
   s.refreshStyle();
}
MO.MDuiEditDescriptor_oeSaveCode = function MDuiEditDescriptor_oeSaveCode(e){
   var o = this;
   if(!MO.Lang.String.isEmpty(o.dataName) && !MO.Lang.String.isEmpty(o.dataCode)){
      e.values.set(o.dataName, o.dataCode);
   }
   return EEventStatus.Stop;
}
MO.MDuiEditDescriptor_canValid = function MDuiEditDescriptor_canValid(m){
   var o = this;
   switch(MO.Lang.String.nvl(m, o._emode)){
      case MO.EMode.Insert:
         return o.validInsert;
      case MO.EMode.Update:
         return o.validUpdate;
      case MO.EMode.Delete:
         return o.validDelete;
   }
}
MO.MDuiEditDescriptor_formatValue = function MDuiEditDescriptor_formatValue(v){
   return MO.Lang.String.nvl(v);
}
MO.MDuiEditDescriptor_formatText = function MDuiEditDescriptor_formatText(t){
   return MO.Lang.String.nvl(t);
}
MO.MDuiEditDescriptor_validText = function MDuiEditDescriptor_validText(t){
   var o = this;
}
MO.MDuiEditDrop = function MDuiEditDrop(o){
   o = MO.Class.inherits(this, o);
   o._styleDropPanel = MO.Class.register(o, new MO.AStyle('_styleDropPanel'));
   o._styleDropIcon  = MO.Class.register(o, new MO.AStyle('_styleDropIcon'));
   o._hDropPanel     = null;
   o._hDropIcon      = null;
   o.onBuildEditDrop = MO.MDuiEditDrop_onBuildEditDrop;
   o.onDropEnter     = MO.Class.register(o, new MO.AEventMouseEnter('onDropEnter'), MO.MDuiEditDrop_onDropEnter);
   o.onDropLeave     = MO.Class.register(o, new MO.AEventMouseLeave('onDropLeave'), MO.MDuiEditDrop_onDropLeave);
   o.onDropClick     = MO.Class.register(o, new MO.AEventClick('onDropClick'), MO.MDuiEditDrop_onDropClick);
   o.construct       = MO.MDuiEditDrop_construct;
   o.refreshStyle    = MO.MDuiEditDrop_refreshStyle;
   o.dispose         = MO.MDuiEditDrop_dispose;
   return o;
}
MO.MDuiEditDrop_onBuildEditDrop = function MDuiEditDrop_onBuildEditDrop(p){
   var o = this;
   var hDropPanel = o._hDropPanel;
   hDropPanel.align = 'center';
   hDropPanel.className = o.styleName('DropPanel', MO.MDuiEditDrop);
   o.attachEvent('onDropEnter', hDropPanel);
   o.attachEvent('onDropLeave', hDropPanel);
   o.attachEvent('onDropClick', hDropPanel);
   var hDropIcon = o._hDropIcon = MO.Window.Builder.appendIcon(hDropPanel, o.styleName('DropIcon', MO.MDuiEditDrop), 'control.drop');
   hDropIcon.align = 'absmiddle';
}
MO.MDuiEditDrop_onDropEnter = function MDuiEditDrop_onDropEnter(e){
   var o = this;
}
MO.MDuiEditDrop_onDropLeave = function MDuiEditDrop_onDropLeave(e){
   var o = this;
}
MO.MDuiEditDrop_onDropClick = function MDuiEditDrop_onDropClick(e){
}
MO.MDuiEditDrop_construct = function MDuiEditDrop_construct(){
}
MO.MDuiEditDrop_refreshStyle = function MDuiEditDrop_refreshStyle(){
   var o = this;
   var hDropIcon = o._hDropIcon;
   if(o._statusEditable){
      var icon = null;
      if(o._statusValueHover){
         icon = 'control.drop-hover';
      }else{
         icon = 'control.drop';
      }
      hDropIcon.src = MO.Window.Resource.iconPath(icon );
   }
   MO.Window.Html.visibleSet(o._hDropPanel, o._statusEditable);
}
MO.MDuiEditDrop_dispose = function MDuiEditDrop_dispose(){
   var o = this;
   o._hDropIcon = MO.Window.Html.free(o._hDropIcon);
   o._hDropPanel = MO.Window.Html.free(o._hDropPanel);
}
MO.MDuiEditValidator = function MDuiEditValidator(o){
   o = MO.Class.inherits(this, o);
   o._validable = false;
   o._valid     = true;
   o._validText = null;
   o.oeValid    = MO.Method.empty;
   return o;
}
MO.MDuiFocus = function MDuiFocus(o){
   o = MO.Class.inherits(this, o);
   o.onFocus   = MO.Class.register(o, new MO.AEventFocus('onFocus'), MO.MDuiFocus_onFocus);
   o.onBlur    = MO.Class.register(o, new MO.AEventBlur('onBlur'));
   o.testFocus = MO.Method.emptyTrue;
   o.testBlur  = MO.Method.emptyTrue;
   o.doFocus   = MO.Method.empty;
   o.doBlur    = MO.Method.empty;
   o.focus     = MO.MDuiFocus_focus;
   o.blur      = MO.MDuiFocus_blur;
   return o;
}
MO.MDuiFocus_onFocus = function MDuiFocus_onFocus(e){
   MO.Console.find(MO.FDuiFocusConsole).focus(this, e);
}
MO.MDuiFocus_focus = function MDuiFocus_focus(){
   MO.Console.find(MO.FDuiFocusConsole).focus(this);
}
MO.MDuiFocus_blur = function MDuiFocus_blur(){
   MO.Console.find(MO.FDuiFocusConsole).blur(this);
}
MO.MDuiHorizontal = function MDuiHorizontal(o){
   o = MO.Class.inherits(this, o);
   o.setVisible = MO.MDuiHorizontal_setVisible;
   return o;
}
MO.MDuiHorizontal_setVisible = function MDuiHorizontal_setVisible(p){
   var o = this;
   var h = o.hPanelLine;
   if(h){
      MO.RHtml.displaySet(h, p);
   }
}
MO.MDuiPopup = function MDuiPopup(o){
   o = MO.Class.inherits(this, o);
   o._opener = null;
   o.opener  = MO.MDuiPopup_opener;
}
MO.MDuiPopup_opener = function MDuiPopup_opener(){
   return this._opener;
}
MO.MDuiSize = function MDuiSize(o){
   o = MO.Class.inherits(this, o);
   o._location       = MO.Class.register(o, new MO.APtyPoint2('_location'));
   o._size           = MO.Class.register(o, new MO.APtySize2('_size'));
   o.construct       = MO.MDuiSize_construct;
   o.dockCd          = MO.MDuiSize_dockCd;
   o.setDockCd       = MO.MDuiSize_setDockCd;
   o.left            = MO.MDuiSize_left;
   o.setLeft         = MO.MDuiSize_setLeft;
   o.top             = MO.MDuiSize_top;
   o.setTop          = MO.MDuiSize_setTop;
   o.location        = MO.MDuiSize_location;
   o.setLocation     = MO.MDuiSize_setLocation;
   o.refreshLocation = MO.MDuiSize_refreshLocation;
   o.width           = MO.MDuiSize_width;
   o.setWidth        = MO.MDuiSize_setWidth;
   o.height          = MO.MDuiSize_height;
   o.setHeight       = MO.MDuiSize_setHeight;
   o.size            = MO.MDuiSize_size;
   o.setSize         = MO.MDuiSize_setSize;
   o.refreshSize     = MO.MDuiSize_refreshSize;
   o.setBounds       = MO.MDuiSize_setBounds;
   o.refreshBounds   = MO.MDuiSize_refreshBounds;
   o.dispose         = MO.MDuiSize_dispose;
   o.innerDump       = MO.MDuiSize_innerDump;
   return o;
}
MO.MDuiSize_construct = function MDuiSize_construct(){
   var o = this;
   o._location = new MO.SPoint2();
   o._size = new MO.SUiSize2();
}
MO.MDuiSize_dockCd = function MDuiSize_dockCd(){
   return this._dockCd;
}
MO.MDuiSize_setDockCd = function MDuiSize_setDockCd(dockCd){
   this._dockCd = dockCd;
}
MO.MDuiSize_left = function MDuiSize_left(){
   return this._location.x;
}
MO.MDuiSize_setLeft = function MDuiSize_setLeft(p){
   this.setLocation(p, null);
}
MO.MDuiSize_top = function MDuiSize_top(){
   return this._location.y;
}
MO.MDuiSize_setTop = function MDuiSize_setTop(p){
   this.setLocation(null, p);
}
MO.MDuiSize_location = function MDuiSize_location(){
   return this._location;
}
MO.MDuiSize_setLocation = function MDuiSize_setLocation(x, y){
   var o = this;
   var hPanel = o.panel(MO.EPanel.Size);
   if(x != null){
      o._location.x = x;
      if(hPanel && !hPanel.__fragment){
         hPanel.style.left = (x == 0) ? null : x + 'px';
      }
   }
   if(y != null){
      o._location.y = y;
      if(hPanel && !hPanel.__fragment){
         hPanel.style.top = (y == 0) ? null : y + 'px';
      }
   }
}
MO.MDuiSize_refreshLocation = function MDuiSize_refreshLocation(){
   var o = this;
   o.setLocation(o._location.x, o._location.y);
}
MO.MDuiSize_width = function MDuiSize_width(){
   return this._size.width;
}
MO.MDuiSize_setWidth = function MDuiSize_setWidth(p){
   this.setSize(p, null);
}
MO.MDuiSize_height = function MDuiSize_height(){
   return this._size.width;
}
MO.MDuiSize_setHeight = function MDuiSize_setHeight(p){
   this.setSize(null, p);
}
MO.MDuiSize_size = function MDuiSize_size(){
   return this._size;
}
MO.MDuiSize_setSize = function MDuiSize_setSize(width, height){
   var o = this;
   var hPanel = o.panel(MO.EPanel.Size);
   if(width != null){
      o._size.width = width;
      if(hPanel && !hPanel.__fragment){
         if(hPanel.tagName == 'TD'){
            if(width != 0){
               hPanel.width = width;
            }
         }else{
            if(MO.Lang.String.contains(width, '%')){
               hPanel.style.width = width;
            }else{
               hPanel.style.width = (width == 0) ? null : width + 'px';
            }
         }
      }
   }
   if(height != null){
      o._size.height = height;
      if(hPanel && !hPanel.__fragment){
         if(hPanel.tagName == 'TD'){
            if(height != 0){
               hPanel.height = height;
            }
         }else{
            if(MO.Lang.String.contains(height, '%')){
               hPanel.style.height = height;
            }else{
               hPanel.style.height = (height == 0) ? null : height + 'px';
            }
         }
      }
   }
}
MO.MDuiSize_refreshSize = function MDuiSize_refreshSize(){
   var o = this;
   o.setSize(o._size.width, o._size.height);
}
MO.MDuiSize_setBounds = function MDuiSize_setBounds(l, t, w, h){
   var o = this;
   o.setLocation(l, t);
   o.setSize(w, h);
}
MO.MDuiSize_refreshBounds = function MDuiSize_refreshBounds(){
   var o = this;
   o.refreshLocation();
   o.refreshSize();
}
MO.MDuiSize_dispose = function MDuiSize_dispose(){
   var o = this;
   var v = o._location;
   if(v){
      v.dispose();
      o._location = null;
   }
   var v = o._size;
   if(v){
      v.dispose();
      o._size = null;
   }
}
MO.MDuiSize_innerDump = function MDuiSize_innerDump(s, l){
   var o = this;
   s.append('MDuiSize:');
   s.append(o.left, ',', o.top, '-', o.width, ',', o.height, ']');
}
MO.MDuiSizeable = function MDuiSizeable(o){
   o = MO.Class.inherits(this, o);
   o.isSizeable  = true;
   o.onSize      = null;
   o.inSizeRange = MO.Method.virtual(o, 'inSizeRange');
   o.cursor      = MO.MDuiSizeable_cursor;
   o.setCursor   = MO.MDuiSizeable_setCursor;
   o.resize      = MO.MDuiSizeable_resize;
   o.setBounds   = MO.MDuiSizeable_setBounds;
   o.startDrag   = MO.MDuiSizeable_startDrag;
   o.stopDrag    = MO.MDuiSizeable_stopDrag;
   return o;
}
MO.MDuiSizeable_cursor = function MDuiSizeable_cursor(){
   var o = this;
   var src = MO.Window.source();
   if(!o.inSizeRange(src)){
      return MO.ECursor.Default;
   }
   var hObj = o.panel(MO.EPanel.Border);
   var r = MO.Window.Html.rect(hObj);
   var pos = MO.Window.offsetPos();
   var p = new MO.TPoint(pos.x-r.left, pos.y-r.top);
   while(src){
      p.x += src.offsetLeft + src.clientLeft;
      p.y += src.offsetTop + src.clientTop;
      if(src == hObj){
         break;
      }
      src = src.offsetParent;
   }
   var border = MO.EMoveSize.Border;
   var range = MO.EMoveSize.Range;
   x = p.x;
   y = p.y;
   var right = r.width();
   var bottom = r.height();
   if(x>=0 && x<=range && y>=0 && y<=range){
      return MO.ECursor.NorthWest;
   }else if(x>=0 && x<=range && y>=bottom-range && y<=bottom){
      return MO.ECursor.SouthWest;
   }else if(x>=right-range && x<=right && y>=bottom-range && y<=bottom){
      return MO.ECursor.SouthEast;
   }else if(x>=right-range && x<=right && y>=0 && y<=range){
      return MO.ECursor.NorthEast;
   }else if(x>=0 && x<border && y>range && y<bottom-range){
      return MO.ECursor.West;
   }else if(x>range && x<right-range && y>=bottom-border && y<=bottom){
      return MO.ECursor.South;
   }else if(x>=right-border && x<=right && y>range && y<bottom-range){
      return MO.ECursor.East;
   }else if(x>range && x<right-range && y>=0 && y<border){
      return MO.ECursor.North;
   }
   return ECursor.Default;
}
MO.MDuiSizeable_setCursor = function MDuiSizeable_setCursor(cursor){
   if(!cursor){
      cursor = this.cursor();
   }
   var h = this.panel(MO.EPanel.Size);
   if(h){
      h.style.cursor = (cursor == null || cursor == 'default') ? 'default' : cursor + '-resize';
   }
}
MO.MDuiSizeable_resize = function MDuiSizeable_resize(width, height){
   var sizeable = false;
   var hStyle = this.htmlPanel(EPanel.Border).style;
   if(width != null){
      width = Math.max(parseInt(width), EMoveSize.MinWidth);
      if(this.width != width){
         this.width = width;
         hStyle.pixelWidth = width;
         sizeable = true;
      }
   }
   if(height != null){
      height = Math.max(parseInt(height), EMoveSize.MinHeight);
      if(this.height != height){
         this.height = height;
         hStyle.pixelHeight = height;
         sizeable = true;
      }
   }
   if(sizeable && this.onSize){
      this.onSize();
   }
}
MO.MDuiSizeable_setBounds = function MDuiSizeable_setBounds(left, top, right, bottom, force){
   var sizeable = false;
   var st = this.htmlPanel(EPanel.Border).style;
   if(left != null){
      if(right == null || (right != null && right-left > EMoveSize.MinWidth)){
         left = Math.max(left, 0);
      }else{
         left = this.left;
      }
      if(force || this.left != left){
         this.left = left;
         st.pixelLeft = left;
         sizeable = true;
      }
   }
   if(top != null){
      if(bottom == null || (bottom != null && bottom-top > EMoveSize.MinHeight)){
         top = Math.max(top, 0);
      }else{
         top = this.top;
      }
      if(force || this.top != top){
         this.top = top;
         st.pixelTop = top;
         sizeable = true;
      }
   }
   if(right != null){
      var width = Math.max(right-this.left+1, EMoveSize.MinWidth);
      if(force || this.width != width){
         this.width = width;
         st.pixelWidth = this.width;
         sizeable = true;
      }
   }
   if(bottom != null){
      var height = Math.max(bottom-this.top+1, EMoveSize.MinHeight);
      if(force || this.height != height){
         this.height = height;
         st.pixelHeight = this.height;
         sizeable = true;
      }
   }
   if(sizeable && this.onSize){
      this.onSize();
   }
}
MO.MDuiSizeable_startDrag = function MDuiSizeable_startDrag(){
}
MO.MDuiSizeable_stopDrag = function MDuiSizeable_stopDrag(){
}
MO.MDuiStyle = function MDuiStyle(o){
   o = MO.Class.inherits(this, o);
   o.construct     = MO.Method.empty;
   o.styleName     = MO.MDuiStyle_styleName;
   o.styleIcon     = MO.MDuiStyle_styleIcon;
   o.styleIconPath = MO.MDuiStyle_styleIconPath;
   o.dispose       = MO.Method.empty;
   return o;
}
MO.MDuiStyle_styleName = function MDuiStyle_styleName(name, method){
   var o = this;
   var findMethod = method ? method : o;
   var className = MO.Class.name(findMethod);
   var clazz = MO.Class.forName(className);
   return clazz.style(name);
}
MO.MDuiStyle_styleIcon = function MDuiStyle_styleIcon(name, method){
   var className = MO.Class.name(method ? method : this, true);
   return className + '_' + name;
}
MO.MDuiStyle_styleIconPath = function MDuiStyle_styleIconPath(name, method){
   var className = MO.Class.name(method ? method : this, true);
   var iconName = className + '_' + name;
   return MO.RResource.iconPath(iconName);
}
MO.MDuiVertical = function MDuiVertical(o){
   o = MO.Class.inherits(this, o);
   o.setVisible = MO.MDuiVertical_setVisible;
   return o;
}
MO.MDuiVertical_setVisible = function MDuiVertical_setVisible(p){
   var o = this;
   var h = o.hPanelLine;
   if(h){
      MO.Window.Html.displaySet(h, p);
   }
}
MO.MListenerClick = function MListenerClick(o){
   o = MO.Class.inherits(this, o, MO.MListener);
   o.addClickListener     = MO.MListenerClick_addClickListener;
   o.setClickListener     = MO.MListenerClick_setClickListener;
   o.removeClickListener  = MO.MListenerClick_removeClickListener;
   o.processClickListener = MO.MListenerClick_processClickListener;
   return o;
}
MO.MListenerClick_addClickListener = function MListenerClick_addClickListener(owner, method){
   return this.addListener(MO.EEvent.Click, owner, method);
}
MO.MListenerClick_setClickListener = function MListenerClick_setClickListener(owner, method){
   return this.setListener(MO.EEvent.Click, owner, method);
}
MO.MListenerClick_removeClickListener = function MListenerClick_removeClickListener(owner, method){
   return this.removeListener(MO.EEvent.Click, owner, method);
}
MO.MListenerClick_processClickListener = function MListenerClick_processClickListener(p1, p2, p3, p4, p5){
   this.processListener(MO.EEvent.Click, p1, p2, p3, p4, p5);
}
MO.MListenerDataChanged = function MListenerDataChanged(o){
   o = MO.Class.inherits(this, o, MO.MListener);
   o.addDataChangedListener     = MO.MListenerDataChanged_addDataChangedListener;
   o.processDataChangedListener = MO.MListenerDataChanged_processDataChangedListener;
   return o;
}
MO.MListenerDataChanged_addDataChangedListener = function MListenerDataChanged_addDataChangedListener(w, m){
   return this.addListener(MO.EEvent.DataChanged, w, m);
}
MO.MListenerDataChanged_processDataChangedListener = function MListenerDataChanged_processDataChangedListener(p1, p2, p3, p4, p5){
   this.processListener(MO.EEvent.DataChanged, p1, p2, p3, p4, p5);
}
MO.MListenerResult = function MListenerResult(o){
   o = MO.Class.inherits(this, o, MO.MListener);
   o.addResultListener     = MO.MListenerResult_addResultListener;
   o.removeResultListener  = MO.MListenerResult_removeResultListener;
   o.processResultListener = MO.MListenerResult_processResultListener;
   o.clearResultListeners  = MO.MListenerResult_clearResultListeners;
   return o;
}
MO.MListenerResult_addResultListener = function MListenerResult_addResultListener(owner, method){
   return this.addListener(MO.EEvent.Result, owner, method);
}
MO.MListenerResult_removeResultListener = function MListenerResult_removeResultListener(owner, method){
   return this.removeListener(MO.EEvent.Result, owner, method);
}
MO.MListenerResult_processResultListener = function MListenerResult_processResultListener(p1, p2, p3, p4, p5){
   this.processListener(MO.EEvent.Result, p1, p2, p3, p4, p5);
}
MO.MListenerResult_clearResultListeners = function MListenerResult_clearResultListeners(){
   return this.clearListeners(MO.EEvent.Result);
}
MO.MListenerSelected = function MListenerSelected(o){
   o = MO.Class.inherits(this, o, MO.MListener);
   o.addSelectedListener     = MO.MListenerSelected_addSelectedListener;
   o.processSelectedListener = MO.MListenerSelected_processSelectedListener;
   return o;
}
MO.MListenerSelected_addSelectedListener = function MListenerSelected_addSelectedListener(w, m){
   return this.addListener(MO.EEvent.Selected, w, m);
}
MO.MListenerSelected_processSelectedListener = function MListenerSelected_processSelectedListener(p1, p2, p3, p4, p5){
   this.processListener(MO.EEvent.Selected, p1, p2, p3, p4, p5);
}
MO.SServiceInfo = function SServiceInfo(){
   var o = this;
   o.service = null;
   o.action  = null;
   o.url     = null;
   return o;
}
MO.SUiSize2 = function SUiSize2(width, height){
   var o = this;
   MO.SSize2.call(o, width, height);
   o.parse = MO.SUiSize2_parse;
   return o;
}
MO.SUiSize2_parse = function SUiSize2_parse(source){
   var o = this;
   var items = source.split(',')
   if(items.length == 2){
      var width = items[0];
      if(MO.Lang.String.contains(width, '%')){
         o.width = width;
      }else{
         o.width = parseInt(width);
      }
      var height = items[1];
      if(MO.Lang.String.contains(height, '%')){
         o.height = height;
      }else{
         o.height = parseInt(height);
      }
   }else{
      throw new MO.TError(o, "Parse value failure. (value={1})", items);
   }
}
MO.TDatasetFetchArg = function TDatasetFetchArg(o){
   if(!o){o = this;}
   o.datasets   = new MO.TDictionary();
   o.saveConfig = MO.TDatasetFetchArg_saveConfig;
   o.process    = MO.TDatasetFetchArg_process;
   return o;
}
MO.TDatasetFetchArg_saveConfig = function TDatasetFetchArg_saveConfig(p){
   var o = this;
   p.set('name', o.name);
}
MO.TDatasetFetchArg_process = function TDatasetFetchArg_process(){
   var o = this;
   if(o.owner){
      o.callback.call(o.owner, o);
   }else{
      o.callback(o);
   }
}
MO.TDatasetFetchArg_push = function TDatasetFetchArg_push(v){
   var o = this;
   if(MO.Class.isClass(v, TSearchItem)){
      o.searchs.push(v);
   }else if(MO.Class.isClass(v, TOrderItem)){
      o.orders.push(v);
   }
}
MO.TDatasetFetchArg_invoke = function TDatasetFetchArg_invoke(){
   var o = this;
   if(o.callback){
      o.callback.invoke(o);
   }
}
MO.TEvent = function TEvent(owner, code, proc){
   var o = this;
   o.owner     = owner;
   o.code      = code;
   o.type      = null;
   o.onProcess = proc;
   o.isBefore  = MO.TEvent_isBefore;
   o.isAfter   = MO.TEvent_isAfter;
   o.process   = MO.TEvent_process;
   o.dump      = MO.TEvent_dump;
   return o;
}
MO.TEvent_isBefore = function TEvent_isBefore(){
   return (EEventType.Before == this.type);
}
MO.TEvent_isAfter = function TEvent_isAfter(){
   return (EEventType.After == this.type);
}
MO.TEvent_process = function TEvent_process(){
   var o = this;
   if(!o.onProcess){
      return RMessage.fatal(o, null, 'Process event is null. (owner={1})', RClass.dump(o.owner));
   }
   var sp = new TSpeed(o, 'Process event (owner={0}, process={1})', o.owner, RMethod.name(o.onProcess));
   if(o.owner){
      o.onProcess.call(o.owner, o);
   }else{
      o.onProcess();
   }
   sp.record();
}
MO.TEvent_dump = function TEvent_dump(){
   return RClass.typeOf(this) + ' [' + this.owner + ',' + this.type + '-' + this.code + ']';
}
MO.TEventProcess = function TEventProcess(po, pm, pc){
   var o = this;
   o.owner    = po;
   o.invoke   = pm;
   o.clazz    = MO.Class.name(pc);
   o.invokeCd = MO.EEventInvoke.Unknown;
   o.isBefore = MO.TEventProcess_isBefore;
   o.isAfter  = MO.TEventProcess_isAfter;
   o.dispose  = MO.TEventProcess_dispose;
   o.dump     = MO.TEventProcess_dump;
   return o;
}
MO.TEventProcess_isBefore = function TEventProcess_isBefore(){
   return this.invokeCd == MO.EEventInvoke.Before;
}
MO.TEventProcess_isAfter = function TEventProcess_isAfter(){
   return this.invokeCd == MO.EEventInvoke.After;
}
MO.TEventProcess_dispose = function TEventProcess_dispose(){
   var o = this;
   o.owner = null;
   o.invoke = null;
   o.clazz = null;
   o.invokeCd = null;
}
MO.TEventProcess_dump = function TEventProcess_dump(){
   var o = this;
   return RClass.dump(o) + ':owner=' + o.owner + ',type=' + o.type + '.invoke=' + RMethod.name(o.invoke);
}
MO.THtmlEvent = function THtmlEvent(){
   var o = this;
   o.linker  = null;
   o.events  = new Object();
   o.push    = MO.THtmlEvent_push;
   o.dispose = MO.THtmlEvent_dispose;
   o.dump    = MO.THtmlEvent_dump;
   return o;
}
MO.THtmlEvent_push = function THtmlEvent_push(pn, pe){
   var o = this;
   var ess = o.events;
   var es = ess[pn];
   if(!es){
      es = new Array();
      es.handle = pe.handle;
      ess[pn] = es;
   }
   var c = es.length;
   if(c > 0){
      var fn = pe.annotation.name();
      for(var i = 0; i < c; i++){
         var e = es[i];
         var en = e.annotation.name();
         if(en == fn){
            throw new TError(o, 'Duplicate event for same control. (name={1}, source={2}, event={3})\n{4}\n{5}', en, RClass.dump(pe.source), RClass.dump(pe), RString.repeat('-', 60), o.dump());
         }
      }
   }
   es[es.length] = pe;
}
MO.THtmlEvent_dispose = function THtmlEvent_dispose(){
   var o = this;
   for(var n in o.events){
      var e = o.events[n];
      if(e.length){
         o.linker[e.handle] = null;
      }
   }
   if(o.linker.linker){
      o.linker.removeAttribute('link');
   }
}
MO.THtmlEvent_dump = function THtmlEvent_dump(){
   var o = this;
   var ess = o.events;
   var r = new TString();
   for(var en in ess){
      var es = ess[en];
      var ec = es.length;
      r.append('event=' + en + ' (count=' + ec + ')\n');
      for(var n = 0; n < ec; n++){
         var e = es[n];
         r.append('   ' + n + ' source=' + RClass.dump(e.source) + ', event=' + RClass.dump(e) + '\n');
      }
   }
   return r.flush();
}
MO.THtmlEvent_load = function THtmlEvent_load(e){
   var o = this;
   o.ctrlKey = e.ctrlKey;
   o.keyCode = e.keyCode;
}
MO.TOrderItem = function TOrderItem(o){
   var o = this;
   return o;
}
MO.TOrderItem_set = function TOrderItem_set(n, t){
   var o = this;
   o.name = n;
   o.type = t;
}
MO.TOrderItem_toNode = function TOrderItem_toNode(){
   var o = this;
   var n = new MO.TNode('OrderItem');
   n.set('name', o.name);
   n.set('type', o.type);
   return n;
}
MO.TOrderItem_pack = function TOrderItem_pack(){
   var o = this;
   var as = new MO.TAttributes();
   as.set("name", o.name);
   as.set("type", o.type);
   return as.pack();
}
MO.TOrderItem_unpack = function TOrderItem_unpack(s){
   var o = this;
   var as = new MO.TAttributes();
   as.unpack(s);
   o.name = as.get("name");
   o.type = as.get("type");
}
MO.TOrderItems = function TOrderItems(){
   var o = this;
   MO.TObjects.call(o);
}
MO.TOrderItems_pack = function TOrderItems_pack(){
   var o = this;
   var ts = new MO.TStrings();
   var len = o.count;
   for(var n = 0; n < len; n++){
      var s = o.get(n).pack();
      ts.push(s);
   }
   return ts.pack();
}
MO.TOrderItems_unpack = function TOrderItems_unpack(p){
   var o = this;
   o.clear();
   var ts = new MO.TStrings();
   ts.unpack(p);
   for(var n = 0; n < ts.count; n++){
      t = ts.get(n);
      var ti = new TOrderItem();
      ti.unpack(t);
      o.push(ti);
   }
}
MO.TSearchItem = function TSearchItem(){
   var o = this;
   return o;
}
MO.TSearchItem_set = function TSearchItem_set(n, v, t, f){
   var o = this;
   o.name  = n;
   o.type  = MO.Lang.String.nvl(t, MO.ESearch.Equals);
   o.value = v;
   o.format = f;
}
MO.TSearchItem_toNode = function TSearchItem_toNode(){
   var o = this;
   var n = new MO.TNode('SearchItem');
   n.set('name', o.name);
   n.set('type', o.type);
   n.set('value', o.value);
   n.set('format', o.format);
   return n;
}
MO.TSearchItem_equals = function TSearchItem_equals(s){
   var o = this;
   if(o.name == s.name && o.type == s.type && o.value == s.value){
	   return true;
   }
   return false;
}
MO.TSearchItem_pack = function TSearchItem_pack(){
   var o = this;
   var as = new MO.TAttributes();
   as.set("name", o.name);
   as.set("type", o.type);
   as.set("value", o.value);
   as.set("format", o.format);
   return as.pack();
}
MO.TSearchItem_unpack = function TSearchItem_unpack(s){
   var o = this;
   var as = new MO.TAttributes();
   as.unpack(s);
   o.name  = as.get("name");
   o.type  = as.get("type");
   o.value = as.get("value");
   o.format = as.get("format");
}
MO.TSearchItems = function TSearchItems(){
   var o = this;
   MO.TObjects.call(o);
}
MO.TSearchItems_pack = function TSearchItems_pack(){
   var o = this;
   var ts = new MO.TStrings();
   var len = o.count;
   for(var n = 0; n < len; n++){
      var s = o.get(n).pack();
      ts.push(s);
   }
   return ts.pack();
}
MO.TSearchItems_removeAll = function TSearchItems_removeAll(v){
   if(null != v){
      var o = this;
      var n = 0;
      var c = o.count;
      for(var i=n; i<c; i++){
         if(!o.memory[i].equals(v)){
            o.memory[n++] = o.memory[i];
         }
      }
      o.count = n;
   }
}
MO.TSearchItems_unpack = function TSearchItems_unpack(p){
   var o = this;
   o.clear();
   var ts = new MO.TStrings();
   ts.unpack(p);
   for(var n = 0; n < ts.count; n++){
      t = ts.get(n);
      var ti = new TSearchItem();
      ti.unpack(t);
      if(!MO.Lang.String.isEmpty(ti.name)){
         o.push(ti);
      }
      else{
         o.clear();
         MO.RMessage.fatal(this, 'unpack', 'Invalid value (value={1})', p);
      }
   }
}
MO.FDuiCanvas = function FDuiCanvas(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl);
   o._styleCanvas = MO.Class.register(o, new MO.AStyle('_styleCanvas'));
   o.onBuildPanel = MO.FDuiCanvas_onBuildPanel;
   o.construct    = MO.FDuiCanvas_construct;
   o.dispose      = MO.FDuiCanvas_dispose;
   return o;
}
MO.FDuiCanvas_onBuildPanel = function FDuiCanvas_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.Window.Builder.create(event, 'CANVAS', o.styleName('Canvas'));
}
MO.FDuiCanvas_construct = function FDuiCanvas_construct(){
   var o = this;
   o.__base.FDuiControl.construct.call(o);
}
MO.FDuiCanvas_dispose = function FDuiCanvas_dispose(){
   var o = this;
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiComponent = function FDuiComponent(o){
   o = MO.Class.inherits(this, o, MO.FComponent, MO.MUiComponent, MO.MProperty, MO.MClone);
   o.dispose = MO.FDuiComponent_dispose;
   return o;
}
MO.FDuiComponent_dispose = function FDuiComponent_dispose(){
   var o = this;
   o.__base.MUiComponent.dispose.call(o);
   o.__base.FComponent.dispose.call(o);
}
MO.FDuiContainer = function FDuiContainer(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MO.MUiContainer);
   o._controls           = null;
   o.oeDesign            = MO.Method.empty;
   o.construct           = MO.FDuiContainer_construct;
   o.hasControl          = MO.FDuiContainer_hasControl;
   o.findControl         = MO.FDuiContainer_findControl;
   o.searchControl       = MO.FDuiContainer_searchControl;
   o.controls            = MO.FDuiContainer_controls;
   o.panel               = MO.FDuiContainer_panel;
   o.focusFirstControl   = MO.FDuiContainer_focusFirstControl;
   o.setControlsProperty = MO.FDuiContainer_setControlsProperty;
   o.storeConfig         = MO.FDuiContainer_storeConfig;
   o.createChild         = MO.FDuiContainer_createChild;
   o.push                = MO.FDuiContainer_push;
   o.remove              = MO.FDuiContainer_remove;
   o.clear               = MO.FDuiContainer_clear;
   o.dispose             = MO.FDuiContainer_dispose;
   return o;
}
MO.FDuiContainer_construct = function FDuiContainer_construct(){
   var o = this;
   o.__base.FDuiControl.construct.call(o);
}
MO.FDuiContainer_hasControl = function FDuiContainer_hasControl(){
   var cs = this._controls;
   return cs ? !cs.isEmpty() : false;
}
MO.FDuiContainer_findControl = function FDuiContainer_findControl(p){
   var o = this;
   var cs = o._controls;
   if(cs){
      var cc = cs.count();
      for(var i = 0; i < cc; i++){
         var c = cs.value(i);
         if(c.name() == p){
            return c;
         }
      }
   }
   return null;
}
MO.FDuiContainer_searchControl = function FDuiContainer_searchControl(p){
   var o = this;
   var cs = o._controls;
   if(cs){
      var cc = cs.count();
      for(var i = 0; i < cc; i++){
         var c = cs.value(i);
         if(c.name() == p){
            return c;
         }
         if(MO.Class.isClass(c, MO.FDuiContainer)){
            var f = c.searchControl(p);
            if(f){
               return f;
            }
         }
      }
   }
   return null;
}
MO.FDuiContainer_controls = function FDuiContainer_controls(){
   var o = this;
   var r = o._controls;
   if(r == null){
      r = new MO.TDictionary();
      o._controls = r;
   }
   return r;
}
MO.FDuiContainer_panel = function FDuiContainer_panel(t){
   var o = this;
   if(t == MO.EPanel.Container){
      return o._hPanel;
   }
   return o.__base.FDuiControl.panel.call(o, t);
}
MO.FDuiContainer_focusFirstControl = function FDuiContainer_focusFirstControl(){
   var o = this;
   var cs = o._components;
   if(cs){
      var c = cs.count();
      for(var i = 0; i < c; i++){
         var p = cs.valueAt(i);
         if(MO.Class.isClass(c, MO.MDuiFocus) && c.testFocus()){
            if(!MO.Class.isClass(c, MO.FCalendar) && !MO.Class.isClass(c, MO.FSelect)  && !MO.Class.isClass(c, MO.FNumber)){
                return c.focus();
            }
         }
      }
      MO.Console.find(MO.FFocusConsole).focus(o);
   }
}
MO.FDuiContainer_setControlsProperty = function FDuiContainer_setControlsProperty(p, vs){
   var o = this;
   var cs = o._controls;
   if(cs){
      for(var i = cs.count() - 1; i >= 0; i--){
         var c = cs.value(i);
         c[p] = vs[n];
      }
   }
}
MO.FDuiContainer_storeConfig = function FDuiContainer_storeConfig(x){
   var o = this;
   x.name = MO.Class.name(o);
   o.saveConfig(x);
   var ps = o._components;
   if(ps){
      var c = ps.count();
      for(var i = 0; i < c; i++){
         var p = ps.value(i);
         var xp = x.create(MO.Class.name(p));
         if(MO.Class.isClass(p, MO.FDuiContainer)){
            p.storeConfig(xp);
         }else{
            p.saveConfig(xp);
         }
      }
   }
}
MO.FDuiContainer_createChild = function FDuiContainer_createChild(xconfig){
   var control = MO.Dui.Control.newInstance(xconfig);
   control._parent = this;
   return control;
}
MO.FDuiContainer_push = function FDuiContainer_push(p){
   var o = this;
   o.__base.FDuiControl.push.call(o, p);
   if(MO.Class.isClass(p, MO.FDuiControl)){
      o.controls().set(p._name, p);
      o.appendChild(p);
   }
}
MO.FDuiContainer_remove = function FDuiContainer_remove(component){
   var o = this;
   if(MO.Class.isClass(component, MO.FDuiControl)){
      var controls = o._controls;
      if(!controls.contains(component.name())){
         throw new MO.TError(o, 'Parameter component is not in this component. (name={1})', component.name());
      }
      controls.removeValue(component);
      o.removeChild(component);
   }
   o.__base.FDuiControl.remove.call(o, component);
}
MO.FDuiContainer_clear = function FDuiContainer_clear(){
   var o = this;
   var s = o._controls;
   if(s){
      for(var i = s.count() - 1; i >= 0; i--){
         o.removeChild(s.at(i));
      }
      s.clear();
   }
   o.__base.FDuiControl.clear.call(o);
}
MO.FDuiContainer_dispose = function FDuiContainer_dispose(){
   var o = this;
   var v = o._controls;
   if(v){
      v.dispose();
      o._controls = null;
   }
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiControl = function FDuiControl(o){
   o = MO.Class.inherits(this, o, MO.FDuiComponent, MO.MUiControl, MO.MListener, MO.MUiMargin, MO.MUiPadding, MO.MDuiSize, MO.MDuiStyle);
   o._nowrap        = MO.Class.register(o, [new MO.APtyBoolean('_nowrap'), new MO.AGetSet('_nowrap')]);
   o._foreColor     = MO.Class.register(o, [new MO.APtyString('_foreColor'), new MO.AGetSet('_foreColor')]);
   o._foreFont      = MO.Class.register(o, [new MO.APtyString('_foreFont'), new MO.AGetSet('_foreFont')]);
   o._backColor     = MO.Class.register(o, [new MO.APtyString('_backColor'), new MO.AGetSet('_backColor')]);
   o._backFont      = MO.Class.register(o, [new MO.APtyString('_backFont'), new MO.AGetSet('_backFont')]);
   o._stylePanel    = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._layoutCd      = MO.EUiLayout.Display;
   o._sizeCd        = MO.EUiSize.Normal;
   o._statusVisible = true;
   o._statusEnable  = true;
   o._statusBuild   = false;
   o._statusBuilded = false;
   o._storage       = null;
   o._hParent       = null;
   o._hPanel        = null;
   o.onEnter        = MO.Class.register(o, new MO.AEventMouseEnter('onEnter'), MO.FDuiControl_onEnter);
   o.onLeave        = MO.Class.register(o, new MO.AEventMouseLeave('onLeave'), MO.FDuiControl_onLeave);
   o.onBuildPanel   = MO.FDuiControl_onBuildPanel;
   o.onBuild        = MO.FDuiControl_onBuild;
   o.onBuilded      = MO.Method.empty;
   o.oeMode         = MO.FDuiControl_oeMode;
   o.construct      = MO.FDuiControl_construct;
   o.topControl     = MO.FDuiControl_topControl;
   o.panel          = MO.FDuiControl_panel;
   o.isVisible      = MO.FDuiControl_isVisible;
   o.setVisible     = MO.FDuiControl_setVisible;
   o.show           = MO.FDuiControl_show;
   o.hide           = MO.FDuiControl_hide;
   o.isEnable       = MO.FDuiControl_isEnable;
   o.setEnable      = MO.FDuiControl_setEnable;
   o.enable         = MO.FDuiControl_enable;
   o.disable        = MO.FDuiControl_disable;
   o.setMargin      = MO.FDuiControl_setMargin;
   o.refreshMargin  = MO.FDuiControl_refreshMargin;
   o.setPadding     = MO.FDuiControl_setPadding;
   o.refreshPadding = MO.FDuiControl_refreshPadding;
   o.attachEvent    = MO.FDuiControl_attachEvent;
   o.linkEvent      = MO.FDuiControl_linkEvent;
   o.callEvent      = MO.FDuiControl_callEvent;
   o.isBuild        = MO.FDuiControl_isBuild;
   o.build          = MO.FDuiControl_build;
   o.builded        = MO.FDuiControl_builded;
   o.refresh        = MO.FDuiControl_refresh;
   o.setPanel       = MO.FDuiControl_setPanel;
   o.dispose        = MO.FDuiControl_dispose;
   return o;
}
MO.FDuiControl_onEnter = function FDuiControl_onEnter(e){
   var o = this;
   MO.Console.find(MO.FDuiFocusConsole).enter(o);
   if(o._hint){
      MO.RWindow.setStatus(o._hint);
   }
}
MO.FDuiControl_onLeave = function FDuiControl_onLeave(e){
   var o = this;
   MO.Console.find(MO.FDuiFocusConsole).leave(o);
   if(o._hint){
      MO.RWindow.setStatus();
   }
}
MO.FDuiControl_onBuildPanel = function FDuiControl_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.RBuilder.createDiv(p, o.styleName('Panel'));
}
MO.FDuiControl_onBuild = function FDuiControl_onBuild(p){
   var o = this;
   o.onBuildPanel(p);
   if(o._statusVisible != o._visible){
      o.setVisible(o._visible);
   }
   var hPanel = o._hPanel;
   MO.Window.Html.linkSet(hPanel, 'control', o);
   o.attachEvent('onEnter', hPanel);
   o.attachEvent('onLeave', hPanel);
   o.refreshBounds();
   o.refreshPadding();
   o.refreshMargin();
}
MO.FDuiControl_oeMode = function FDuiControl_oeMode(event){
   var o = this;
   o._modeCd = event.modeCd;
   return MO.EEventStatus.Continue;
}
MO.FDuiControl_construct = function FDuiControl_construct(){
   var o = this;
   o.__base.FDuiComponent.construct.call(o);
   o.__base.MDuiSize.construct.call(o);
   o.__base.MUiMargin.construct.call(o);
   o.__base.MUiPadding.construct.call(o);
   o.__base.MDuiStyle.construct.call(o);
}
MO.FDuiControl_topControl = function FDuiControl_topControl(c){
   var r = this;
   if(c){
      while(r._parent){
         if(MO.Class.isClass(r._parent, c)){
            return r._parent;
         }
         r = r._parent;
      }
      if(!MO.Class.isClass(r, c)){
         return null;
      }
   }else{
      while(r._parent){
         if(!MO.Class.isClass(r._parent, FDuiControl)){
            break;
         }
         r = r._parent;
      }
   }
   return r;
}
MO.FDuiControl_panel = function FDuiControl_panel(p){
   var o = this;
   switch(p){
      case MO.EPanel.Parent:
         return o._hParent;
      case MO.EPanel.Container:
      case MO.EPanel.Size:
         return o._hPanel;
   }
   return null;
}
MO.FDuiControl_isVisible = function FDuiControl_isVisible(){
   return this._statusVisible;
}
MO.FDuiControl_setVisible = function FDuiControl_setVisible(p){
   var o = this;
   o._statusVisible = p;
   var h = o.panel(MO.EPanel.Container);
   if(h){
      MO.RHtml.visibleSet(h, p);
   }
}
MO.FDuiControl_show = function FDuiControl_show(){
   var o = this;
   if(!o._statusVisible){
      o.setVisible(true);
   }
}
MO.FDuiControl_hide = function FDuiControl_hide(){
   var o = this;
   if(o._statusVisible){
      o.setVisible(false);
   }
}
MO.FDuiControl_isEnable = function FDuiControl_isEnable(){
   return this._statusEnable;
}
MO.FDuiControl_setEnable = function FDuiControl_setEnable(p){
   var o = this;
   o._statusEnable = p;
   var h = o.panel(EPanel.Container);
   if(h){
      h.style.disabled = !p;
   }
}
MO.FDuiControl_enable = function FDuiControl_enable(){
   var o = this;
   if(!o._statusEnable){
      o.setEnable(true);
   }
}
MO.FDuiControl_disable = function FDuiControl_disable(){
   var o = this;
   if(o._statusEnable){
      o.setEnable(false);
   }
}
MO.FDuiControl_setMargin = function FDuiControl_setMargin(left, top, right, bottom){
   var o = this;
   var padding = o._padding;
   var hPanel = o.panel(MO.EPanel.Container);
   var hStyle = null;
   if(hPanel && !hPanel.__fragment){
      hStyle = hPanel.style;
   }
   if(left != null){
      padding.left = left;
      if(hStyle){
         hStyle.marginLeft = (left == 0) ? null : left + 'px';
      }
   }
   if(top != null){
      padding.top = top;
      if(hStyle){
         hStyle.marginTop = (top == 0) ? null : top + 'px';
      }
   }
   if(right != null){
      padding.right= right;
      if(hStyle){
         hStyle.marginRight = (right == 0) ? null : right + 'px';
      }
   }
   if(bottom != null){
      padding.bottom = bottom;
      if(hStyle){
         hStyle.marginBottom = (bottom == 0) ? null : bottom + 'px';
      }
   }
}
MO.FDuiControl_refreshMargin = function FDuiControl_refreshMargin(){
   var o = this;
   var p = o._margin;
   o.setMargin(p.left, p.top, p.right, p.bottom);
}
MO.FDuiControl_setPadding = function FDuiControl_setPadding(left, top, right, bottom){
   var o = this;
   var padding = o._padding;
   var hPanel = o.panel(MO.EPanel.Container);
   var hStyle = null;
   if(hPanel && !hPanel.__fragment){
      hStyle = hPanel.style;
   }
   if(left != null){
      padding.left = left;
      if(hStyle){
         hStyle.paddingLeft = (left == 0) ? null : left + 'px';
      }
   }
   if(top != null){
      padding.top = top;
      if(hStyle){
         hStyle.paddingTop = (top == 0) ? null : top + 'px';
      }
   }
   if(right != null){
      padding.right= right;
      if(hStyle){
         hStyle.paddingRight = (right == 0) ? null : right + 'px';
      }
   }
   if(bottom != null){
      padding.bottom = bottom;
      if(hStyle){
         hStyle.paddingBottom = (bottom == 0) ? null : bottom + 'px';
      }
   }
}
MO.FDuiControl_refreshPadding = function FDuiControl_refreshPadding(){
   var o = this;
   var p = o._padding;
   o.setPadding(p.left, p.top, p.right, p.bottom);
}
MO.FDuiControl_attachEvent = function FDuiControl_attachEvent(name, hTag, method, capture){
   return MO.Dui.Control.attachEvent(this, name, hTag, method, capture);
}
MO.FDuiControl_linkEvent = function FDuiControl_linkEvent(control, name, hTag, method, capture){
   return MO.Dui.Control.linkEvent(this, control, name, hTag, method, capture);
}
MO.FDuiControl_callEvent = function FDuiControl_callEvent(name, source, event){
   var o = this;
   var es = o._events;
   if(es){
      var ec = es.get(name);
      if(ec){
         ec.invoke(source, source, event);
      }
   }
}
MO.FDuiControl_isBuild = function FDuiControl_isBuild(){
   return this._statusBuild;
}
MO.FDuiControl_build = function FDuiControl_build(parent){
   var o = this;
   if(o._statusBuild){
      throw new MO.TError(o, 'Current control is already builded.');
   }
   var hDocument = null;
   if(MO.Class.isClass(parent, MO.FDuiControl)){
      hDocument = parent._hPanel.ownerDocument;
   }else if(parent.createElement){
      hDocument = parent;
   }else if(parent.ownerDocument && parent.ownerDocument.createElement){
      hDocument = parent.ownerDocument;
   }else if(parent.hDocument){
      hDocument = parent.hDocument;
   }else{
      throw new MO.TError("Parent is invalid. (parent={1})", parent);
   }
   var event = new MO.SEvent(o);
   event.hDocument = hDocument;
   o.onBuild(event);
   event.dispose();
   o._statusBuild = true;
}
MO.FDuiControl_builded = function FDuiControl_builded(p){
   var o = this;
   if(!o._statusBuild){
      throw new MO.TError(o, 'Current control is not build.');
   }
   if(o._statusBuilded){
      throw new MO.TError(o, 'Current control is already builded.');
   }
   o.onBuilded(p);
   o._statusBuilded = true;
}
MO.FDuiControl_refresh = function FDuiControl_refresh(){
   var o = this;
   if(!o._statusBuild){
      throw new MO.TError(o, 'Current control is not build.');
   }
}
MO.FDuiControl_setPanel = function FDuiControl_setPanel(h){
   var o = this;
   o._hParent = h;
   h.appendChild(o._hPanel);
}
MO.FDuiControl_dispose = function FDuiControl_dispose(){
   var o = this;
   o._disable = null;
   o._hint = null;
   o._styleContainer = null;
   o._statusVisible = null;
   o._statusEnable = null;
   o._statusBuild = null;
   o._hParent = null;
   o._hPanel = MO.Window.Html.free(o._hPanel);
   o.__base.MDuiStyle.dispose.call(o);
   o.__base.MUiPadding.dispose.call(o);
   o.__base.MUiMargin.dispose.call(o);
   o.__base.MDuiSize.dispose.call(o);
   o.__base.MUiControl.dispose.call(o);
   o.__base.FDuiComponent.dispose.call(o);
}
MO.FDuiWorkspace = function FDuiWorkspace(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MDuiDescribeFrame);
   o._stylePanel  = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._frames      = null;
   o._hContainer  = null;
   o.onBuildPanel = MO.FDuiWorkspace_onBuildPanel;
   o.appendChild  = MO.FDuiWorkspace_appendChild;
   return o;
}
MO.FDuiWorkspace_onBuildPanel = function FDuiWorkspace_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.RBuilder.createDiv(event, o.styleName('Panel'));
}
MO.FDuiWorkspace_appendChild = function FDuiWorkspace_appendChild(control){
   var o = this;
   if(MO.Class.isClass(control, MO.FDuiFrameSet)){
      o._hPanel.appendChild(control._hPanel);
   }else{
      throw new MO.TError(o, 'Unknown child type.');
   }
}
MO.RDuiControl = function RDuiControl(){
   var o = this;
   o.PREFIX    = 'FDui';
   o.inMoving  = false;
   o.inSizing  = false;
   o.inDesign  = false;
   o.instances = new MO.TObjects();
   o.events    = new MO.TMap();
   o.controls  = new MO.TMap();
   return o;
}
MO.RDuiControl.prototype.newInstance = function RDuiControl_newInstance(p){
   var o = this;
   var r = null;
   if(p){
      var n = null
      var tn = null;
      if(p.constructor == String){
         if(!RString.startsWith(p, o.PREFIX)){
            n = o.PREFIX + p;
         }
      }else if(p.constructor == MO.TXmlNode){
         n = p.get('type');
         if(MO.Lang.String.isEmpty(n)){
            n = p.name();
            if(!MO.Lang.String.startsWith(n, o.PREFIX)){
               n = o.PREFIX + n;
            }
         }else{
            tn = n;
         }
      }else{
         throw new TError(o, 'Unknown parameter. (name={p})', p);
      }
      r = MO.Class.create(n);
      if(tn){
         r.__typed = true;
      }
   }
   if(r == null){
      throw new MO.TError(o, 'Create instance failure. (name={p})', p);
   }
   return r;
}
MO.RDuiControl.prototype.attachEvent = function RDuiControl_attachEvent(control, name, hTag, method, capture){
   var o = this;
   var event = null;
   var callback = control[name];
   if(!MO.Method.isEmpty(callback) || method){
      var clazz = MO.Class.find(control.constructor);
      var annotation = clazz.annotation(MO.EAnnotation.Event, name);
      var linker = annotation.linker();
      event = annotation.create();
      event.annotation = annotation;
      event.source = control;
      event.hSource = hTag;
      event.ohProcess = method;
      event.onProcess = callback;
      event.process = MO.Dui.Event.onProcess;
      MO.Dui.Event.find(hTag).push(linker, event);
      MO.Window.Html.linkSet(hTag, '_plink', control);
      annotation.bind(hTag, capture);
   }
   return event;
}
MO.RDuiControl.prototype.linkEvent = function RDuiControl_linkEvent(targetControl, sourceControl, name, hTag, method, capture){
   var o = this;
   var event = null;
   var callback = targetControl[name];
   if(!MO.Method.isEmpty(callback) || method){
      var clazz = MO.Class.find(targetControl.constructor);
      var annotation = clazz.annotation(MO.EAnnotation.Event, name);
      var linker = annotation.linker();
      var event = new annotation.constructor();
      event.annotation = annotation;
      event.source = targetControl;
      event.sender = sourceControl;
      event.hSource = hTag;
      event.ohProcess = method;
      event.onProcess = callback;
      event.process = MO.Dui.Event.onProcess;
      MO.Dui.Event.find(hTag).push(linker, event);
      MO.Window.Html.linkSet(hTag, '_plink', targetControl);
      annotation.bind(hTag, capture);
   }
   return event;
}
MO.RDuiControl.prototype.innerCreate = function RDuiControl_innerCreate(pc, px, pa){
   var o = this;
   if((pc == null) || (px == null)){
      return;
   }
   if(MO.Class.isClass(pc, MO.MProperty)){
      pc.propertyLoad(px)
   }
   if(MO.Class.isClass(pc, MO.MUiContainer) && px.hasNode()){
      var ns = px.nodes();
      var nc = ns.count();
      for(var i = 0; i < nc; i++){
         var n = ns.get(i);
         var c = pc.createChild(n, pa);
         if(c){
            o.innerCreate(c, n, pa);
            pc.push(c);
         }
      }
   }
}
MO.RDuiControl.prototype.create = function RDuiControl_create(pc, px, pa){
   var o = this;
   var c = null;
   if(pc){
      c = pc;
   }else{
      c = MO.RDuiControl.newInstance(px.name());
   }
   o.innerCreate(c, px, pa);
   return c;
}
MO.RDuiControl.prototype.innerbuild = function RDuiControl_innerbuild(reference, control, xconfig, attributes, hTag){
   var o = this;
   if((control == null) || (xconfig == null)){
      return;
   }
   if(MO.Class.isClass(control, MO.MProperty)){
      control.propertyLoad(xconfig);
   }
   var linker = xconfig.get('linker');
   if(linker && reference){
      reference[linker] = control;
   }
   if(MO.Class.isClass(control, MO.FDuiControl)){
      if(!control.isBuild()){
         control.build(hTag);
      }else{
         control.refresh();
      }
   }
   if(control.__typed){
      reference = control;
   }
   if(MO.Class.isClass(control, MO.MUiContainer) && xconfig.hasNode()){
      var xnodes = xconfig.nodes();
      var nodeCount = xnodes.count();
      for(var i = 0; i < nodeCount; i++){
         var xnode = xnodes.at(i);
         var child = control.createChild(xnode);
         if(!child){
            throw new MO.TError('Invalid create child.');
         }
         o.innerbuild(reference, child, xnode, attributes, hTag);
         control.push(child);
      }
   }
   if(MO.Class.isClass(control, MO.FDuiControl)){
      control.builded(hTag);
   }
}
MO.RDuiControl.prototype.build = function RDuiControl_build(control, xconfig, attributes, hPanel){
   var o = this;
   if(!control){
      control = MO.Dui.Control.newInstance(xconfig);
   }
   o.innerbuild(control, control, xconfig, attributes, hPanel);
   return control;
}
MO.RDuiControl.prototype.setStyleScroll = function RDuiControl_setStyleScroll(hTag, scrollCd){
   var hStyle = hTag.style;
   switch(scrollCd){
      case MO.EUiScroll.None:
         hStyle.overflowX = '';
         hStyle.overflowY = '';
         break;
      case MO.EUiScroll.Horizontal:
         hStyle.overflowX = 'scroll';
         break;
      case MO.EUiScroll.HorizontalAuto:
         hStyle.overflowX = 'auto';
         break;
      case MO.EUiScroll.Vertical:
         hStyle.overflowY = 'scroll';
         break;
      case MO.EUiScroll.VerticalAuto:
         hStyle.overflowY = 'auto';
         break;
      case MO.EUiScroll.Both:
         hStyle.overflow = 'scroll';
         break;
      case MO.EUiScroll.BothAuto:
         hStyle.overflow = 'auto';
         break;
      default:
         throw new MO.TError(o, 'Unknown scroll type. (scroll_cd={1})', scrollCd);
   }
}
MO.RDuiControl.prototype.find = function RDuiControl_find(c){
   var o = this;
   var r = null;
   if(c){
      if(c.constructor == Function){
         c = RMethod.name(c);
      }else if(c.constructor != String){
         RMsg.fatal(o, null, 'Param invlid (class={0})', c);
      }
      var cs = o.controls;
      var r = cs.get(c);
      if(!r){
         r = new TControl(c);
         cs.set(c, r);
      }
   }
   return r;
}
MO.RDuiControl.prototype.fromNode = function RDuiControl_fromNode(x, h){
   if(x){
      return this.create(x, h);
   }
}
MO.RDuiControl.prototype.fromXml = function RDuiControl_fromXml(xml, hPanel, mode){
   var c = null;
   var x = RXml.makeNode(xml);
   if(x){
      c = this.create(x, hPanel, mode);
   }
   return c;
}
MO.RDuiControl.prototype.toNode = function RDuiControl_toNode(){
}
MO.RDuiControl.prototype.toXml = function RDuiControl_toXml(){
}
MO.RDuiControl.prototype.store = function RDuiControl_store(o, type){
   var x = new TNode();
   x.name = MO.Class.name(o).substr(1);
   if(MO.Class.isClass(o, FContainer)){
      o.storeConfig(x);
   }else{
      o.saveConfig(x);
   }
   return x;
}
MO.RDuiControl.prototype.htmlControl = function RDuiControl_htmlControl(e, c){
   if(c){
      while(e){
         var o = RHtml.linkGet(e, 'control');
         if(o && MO.Class.isClass(o, c)){
            return o;
         }
         e = e.parentElement;
      }
   }else{
      while(e){
         var o = RHtml.linkGet(e, 'control');
         if(o){
            return o;
         }
         e = e.parentElement;
      }
   }
   return null;
}
MO.RDuiControl.prototype.psDesign = function RDuiControl_psDesign(action, mode, flag, params){
   var cs = this.instances;
   if(cs && cs.count){
      var l = cs.count;
      for(var n=0; n<l; n++){
         cs.get(n).psDesign(action, mode, flag, params);
      }
   }
}
MO.RDuiControl.prototype.psMode = function RDuiControl_psMode(action, mode, flag, params){
   var cs = this.instances;
   if(cs && cs.count){
      var l = cs.count;
      for(var n=0; n<l; n++){
         cs.get(n).psMode(action, mode, flag, params);
      }
   }
}
MO.RDuiControl.prototype.isInfo = function RDuiControl_isInfo(v){
   return v ? (0 == v.indexOf('C#')) : false;
}
MO.RDuiControl.prototype.isGroup = function RDuiControl_isGroup(v){
   return v ? (0 == v.indexOf('G#')) : false;
}
MO.Dui.Control = new MO.RDuiControl();
MO.RDuiEvent = function RDuiEvent(){
   var o = this;
   o._objects  = new Array();
   o.current   = 0;
   o.events    = new Array();
   return o;
}
MO.RDuiEvent.prototype.ohEvent = function RDuiEvent_ohEvent(event){
   MO.Dui.Event.process(this, event ? event : window.event);
}
MO.RDuiEvent.prototype.onProcess = function RDuiEvent_onProcess(e){
   var e = this;
   if(e.sender){
      e.onProcess.call(e.source, e.sender, e);
   }else{
      e.onProcess.call(e.source, e);
   }
}
MO.RDuiEvent.prototype.find = function RDuiEvent_find(hTag){
   var o = this;
   var uid = MO.Window.Html.uid(hTag);
   var events = o._objects;
   var event = events[uid];
   if(event == null){
      event = events[uid] = new MO.THtmlEvent();
      event.linker = hTag;
   }
   return event;
}
MO.RDuiEvent.prototype.process = function RDuiEvent_process(hs, he){
   var o = this;
   if(!hs || !he){
      return;
   }
   var eo = o.find(hs);
   if(eo){
      var es = eo.events[he.type];
      if(es){
         var ec = es.length;
         for(var i = 0; i < ec; i++){
            var e = es[i];
            var ea = e.annotation;
            e.source = MO.RHtml.linkGet(hs, '_plink');
            e.hSender = MO.RHtml.eventSource(he);
            e.sender = e.hSender._plinker;
            e.hSource = hs;
            ea.attach(e, he);
            if(e.ohProcess){
               e.ohProcess.call(e.source, e);
            }else if(e.onProcess){
               MO.Console.find(MO.FDuiFrameEventConsole).push(e);
            }
         }
         return true;
      }
   }
   return false;
}
MO.RDuiEvent.prototype.release = function RDuiEvent_release(){
   var o = this;
   var v = o._objects;
   if(v){
      MO.RMemory.free(v);
      o._objects = null;
   }
}
MO.RDuiEvent.prototype.nvl = function RDuiEvent_nvl(event, sender, code){
   if(!event){
      event = new MO.TEvent();
   }
   event.sender = sender;
   event.code = code;
   return event;
}
MO.RDuiEvent.prototype.alloc = function RDuiEvent_alloc(s, c){
   var e = null;
   var es = this.events;
   for(var n=0; n<es.length; n++){
      if(!es[n].inUsing){
         e = es[n];
         break;
      }
   }
   if(!e){
      e = es[es.length] = new MO.TEvent();
   }
   e.inUsing = true;
   e.sender = s;
   e.code = c;
   return e;
}
MO.RDuiEvent.prototype.free = function RDuiEvent_free(e){
   e.inUsing = false;
}
MO.Dui.Event = new MO.RDuiEvent();
MO.RDuiLayer = function RDuiLayer(){
   var o = this;
   o._layers = new Array();
   return o;
}
MO.RDuiLayer.prototype.next = function RDuiLayer_next(p){
   var o = this;
   var n = MO.Lang.Integer.nvl(p, MO.EUiLayer.Default);
   var c = MO.Lang.Integer.nvl(o._layers[n], n);
   o._layers[n] = ++c;
   return c;
}
MO.RDuiLayer.prototype.free = function RDuiLayer_free(p, l){
   var o = this;
   var n = MO.Lang.Integer.nvl(p, MO.EUiLayer.Default);
   var c = MO.Lang.Integer.nvl(o._layers[n], n);
   --c;
   if(c > n){
      o._layers[n] = c;
   }
   return c;
}
MO.RDuiLayer = new MO.RDuiLayer();
MO.RDuiService = function RDuiService(){
   var o = this;
   o._services = new MO.TDictionary();
   return o;
}
MO.RDuiService.prototype.url = function RDuiService_url(p){
   if(MO.Lang.String.startsWith(p, 'http://')){
      return p;
   }
   if(MO.Lang.String.startsWith(p, '#')){
      return p.substr(1);
   }
   if(!MO.Lang.String.startsWith(p, '/')){
      p = '/' + p;
   }
   return p + '.ws';
}
MO.RDuiService.prototype.makeUrl = function RDuiService_makeUrl(s, a){
   return this.url(s) + '?action=' + a;
}
MO.RDuiService.prototype.parse = function RDuiService_parse(p){
   var o = this;
   var s = null;
   var ss = o._services;
   if(p){
      s = ss.get(p);
      if(s == null){
         var ps = p.split('@');
         if(ps.length == 1){
            if(ps[0]){
               s = new MO.SServiceInfo();
               s.service = ps[0];
               s.action = null;
               s.url = o.url(ps[0]);
            }
         }else if(ps.length == 2){
            if(ps[0] && ps[1]){
               s = new MO.SServiceInfo();
               s.service = ps[1];
               s.action = ps[0];
               s.url = o.url(ps[1]) + '?action=' + ps[0];
            }
         }
      }
      if(s == null){
         throw new MO.TError(o, 'Unknown service format. (source={1})', p);
      }
      ss.set(p, s);
   }
   return s;
}
MO.RDuiService = new MO.RDuiService();
MO.FDuiConfirmDialog = function FDuiConfirmDialog(o){
   o = MO.Class.inherits(this, o, MO.FDuiDialog, MO.MListenerResult);
   o._styleText            = MO.Class.register(o, new MO.AStyle('_styleText'));
   o._frameName            = 'system.dialog.ConfirmDialog';
   o._controlText          = null;
   o._controlConfirmButton = null;
   o._controlCancelButton  = null;
   o.onBuilded             = MO.FDuiConfirmDialog_onBuilded;
   o.onConfirmClick        = MO.FDuiConfirmDialog_onConfirmClick;
   o.onCancelClick         = MO.FDuiConfirmDialog_onCancelClick;
   o.construct             = MO.FDuiConfirmDialog_construct;
   o.setText               = MO.FDuiConfirmDialog_setText;
   o.dispose               = MO.FDuiConfirmDialog_dispose;
   return o;
}
MO.FDuiConfirmDialog_onBuilded = function FDuiConfirmDialog_onBuilded(p){
   var o = this;
   o.__base.FDuiDialog.onBuilded.call(o, p);
   o._controlText._hPanel.className = o.styleName('Text');
   o._controlConfirmButton.addClickListener(o, o.onConfirmClick);
   o._controlCancelButton.addClickListener(o, o.onCancelClick);
}
MO.FDuiConfirmDialog_onConfirmClick = function FDuiConfirmDialog_onConfirmClick(event){
   var o = this;
   var event = new MO.SEvent();
   event.sender = o;
   event.resultCd = MO.EResult.Success;
   o.processResultListener(event);
   event.dispose();
   o.hide();
}
MO.FDuiConfirmDialog_onCancelClick = function FDuiConfirmDialog_onCancelClick(event){
   var o = this;
   var event = new MO.SEvent();
   event.sender = o;
   event.resultCd = MO.EResult.Cancel;
   o.processResultListener(event);
   event.dispose();
   o.hide();
}
MO.FDuiConfirmDialog_construct = function FDuiConfirmDialog_construct(){
   var o = this;
   o.__base.FDuiDialog.construct.call(o);
}
MO.FDuiConfirmDialog_setText = function FDuiConfirmDialog_setText(value){
   this._controlText.set(value);
}
MO.FDuiConfirmDialog_dispose = function FDuiConfirmDialog_dispose(){
   var o = this;
   o.__base.FDuiDialog.dispose.call(o);
}
MO.FDuiDescribeFrameConsole = function FDuiDescribeFrameConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd       = MO.EScope.Global;
   o._service       = 'cloud.describe.frame';
   o._defines       = null;
   o.lsnsLoaded     = null;
   o.construct      = MO.FDuiDescribeFrameConsole_construct;
   o.load           = MO.FDuiDescribeFrameConsole_load;
   o.events         = null;
   o.formId         = 0;
   o.createFromName = MO.FDuiDescribeFrameConsole_createFromName;
   o.loadNode       = MO.FDuiDescribeFrameConsole_loadNode;
   o.loadService    = MO.FDuiDescribeFrameConsole_loadService;
   o.nextFormId     = MO.FDuiDescribeFrameConsole_nextFormId;
   o.get            = MO.FDuiDescribeFrameConsole_get;
   o.find           = MO.FDuiDescribeFrameConsole_find;
   o.getLov         = MO.FDuiDescribeFrameConsole_getLov;
   o.findLov        = MO.FDuiDescribeFrameConsole_findLov;
   o.getEvents      = MO.FDuiDescribeFrameConsole_getEvents;
   return o;
}
MO.FDuiDescribeFrameConsole_construct = function FDuiDescribeFrameConsole_construct(){
   var o = this;
   o._defines = new MO.TDictionary();
   o.lsnsLoaded = new MO.TListeners();
}
MO.FDuiDescribeFrameConsole_load = function FDuiDescribeFrameConsole_load(name){
   var o = this;
   var defines = o._defines;
   var xconfig = defines.get(name);
   if(xconfig){
      return xconfig;
   }
   var xdocument = new MO.TXmlDocument();
   var xroot = xdocument.root();
   xroot.set('action', 'query');
   var xframe = xroot.create('Frame');
   xframe.set('name', name);
   var url = MO.RDuiService.url(o._service);
   var xresult = MO.Console.find(MO.FXmlConsole).sendSync(url, xdocument);
   var xframes = xresult.nodes();
   var count = xframes.count();
   for(var i = 0; i < count; i++){
      var xframe = xframes.at(i);
      var frameName = xframe.get('name');
      defines.set(frameName, xframe);
   }
   var xframe = defines.get(name);
   if(!xframe){
      throw new MO.TError(o, 'Unknown frame. (name={1])', name);
   }
   return xframe;
}
MO.FDuiDescribeFrameConsole_createFromName = function FDuiDescribeFrameConsole_createFromName(name, type){
   var o = this;
   var doc = o.loadService(name, type);
   o.loadNode(doc);
   if(MO.EForm.Lov == type){
      return o.getLov(name);
   }else{
      return o.get(name);
   }
}
MO.FDuiDescribeFrameConsole_loadNode = function FDuiDescribeFrameConsole_loadNode(x){
   var o = this;
   var nns = x.root();
   if(nns.hasNode()){
      var nodes = nns.nodes;
      var ct = nodes.count;
      for(var n = 0; n < ct; n++){
         var node = nodes.get(n);
         var fn = node.get('name');
         var tp = node.get('type');
         if(node.hasNode()){
            var nfds = node.nodes;
            for(var k = 0; k < nfds.count; k++){
               var dd = nfds.get(k);
               if(dd.isName('Define')){
                  if(dd.hasNode()){
                     var fds = dd.nodes;
                     for(var m = 0; m < fds.count; m++){
                        var nd = fds.get(m);
                        var mp = o._defines.get(tp);
                        mp.set(fn, nd);
                     }
                  }
               }else if(dd.isName('Events')){
                  o.events.set(fn, dd);
               }
            }
         }
      }
   }
}
MO.FDuiDescribeFrameConsole_loadService = function FDuiDescribeFrameConsole_loadService(n, t){
   var o = this;
   if(!t){
      t = MO.EForm.Form;
   }
   var doc = new MO.TXmlDocument();
   var root = doc.root();
   root.set('action', 'loadDefine');
   var f = root.create('WebForm');
   f.set('name', n);
   f.set('type', t);
   var url = MO.RDuiService.url('logic.webform');
   var doc = MO.Console.find(MO.FXmlConsole).send(url, doc);
   var r = doc.root();
   if(!MO.Console.find(MO.FMessageConsole).checkResult(new TMessageArg(r))){
      return null;
   }
   return doc;
}
MO.FDuiDescribeFrameConsole_nextFormId = function FDuiDescribeFrameConsole_nextFormId(){
   return ++this.formId;
}
MO.FDuiDescribeFrameConsole_get = function FDuiDescribeFrameConsole_get(n){
   return this._defines.get(EForm.Form).get(n);
}
MO.FDuiDescribeFrameConsole_find = function FDuiDescribeFrameConsole_find(n, t){
   var o = this;
   if(EForm.Lov == t){
      return o.findLov(n);
   }
   var fc = o.get(n);
   if(MO.Class.isMode(MO.ERun.Debug)){
      MO.Memory.free(fc);
      fc = null;
      o._defines.get(EForm.Form).set(n, null);
   }
   if(!fc){
      fc = o.createFromName(n);
   }
   return fc;
}
MO.FDuiDescribeFrameConsole_getLov = function FDuiDescribeFrameConsole_getLov(n){
   return this._defines.get(EForm.Lov).get(n);
}
MO.FDuiDescribeFrameConsole_findLov = function FDuiDescribeFrameConsole_findLov(n){
   var o = this;
   var fc = o.getLov(n);
   if(!fc){
      fc = o.createFromName(n, EForm.Lov);
   }
   return fc;
}
MO.FDuiDescribeFrameConsole_getEvents = function FDuiDescribeFrameConsole_getEvents(n){
   return this.events.get(n);
}
MO.FDuiDesktopConsole = function FDuiDesktopConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd         = MO.EScope.Local;
   o._maskVisible     = false;
   o._statusEnable    = true;
   o._loadingVisible  = false;
   o._progressVisible = false;
   o._progressBar     = null;
   o._hMaskPanel      = null;
   o._hLoadingPanel   = null;
   o._hLoadingLabel   = null;
   o.construct        = MO.FDuiDesktopConsole_construct;
   o.getMaskPanel     = MO.FDuiDesktopConsole_getMaskPanel;
   o.getProgressBar   = MO.FDuiDesktopConsole_getProgressBar;
   o.getLoadingPanel  = MO.FDuiDesktopConsole_getLoadingPanel;
   o.setMaskVisible   = MO.FDuiDesktopConsole_setMaskVisible;
   o.isEnable         = MO.FDuiDesktopConsole_isEnable;
   o.enable           = MO.FDuiDesktopConsole_enable;
   o.disable          = MO.FDuiDesktopConsole_disable;
   o.showLoading      = MO.FDuiDesktopConsole_showLoading;
   o.showUploading    = MO.FDuiDesktopConsole_showUploading;
   o.showProgress     = MO.FDuiDesktopConsole_showProgress;
   o.hide             = MO.FDuiDesktopConsole_hide;
   return o;
}
MO.FDuiDesktopConsole_construct = function FDuiDesktopConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
}
MO.FDuiDesktopConsole_getMaskPanel = function FDuiDesktopConsole_getMaskPanel(){
   var o = this;
   var hDocument = top.MO.RWindow._hDocument;
   var hPanel = o._hMaskPanel;
   if(!hPanel){
      hPanel = o._hMaskPanel = MO.Window.Builder.createTable(hDocument, 'FDuiDesktopConsole_MaskPanel');
      hPanel.style.zIndex = 5000;
      var hInnerPanel = o._hMaskInnerPanel = MO.Window.Builder.appendTableRowCell(hPanel);
      hInnerPanel.align = 'center';
      hInnerPanel.vAlign = 'middle';
   }
   return hPanel;
}
MO.FDuiDesktopConsole_getLoadingPanel = function FDuiDesktopConsole_getLoadingPanel(){
   var o = this;
   var hDocument = top.MO.RWindow._hDocument;
   var hPanel = o._hLoadingPanel;
   if(!hPanel){
      hPanel = o._hLoadingPanel = MO.Window.Builder.createTable(hDocument);
      var hCell = MO.Window.Builder.appendTableRowCell(hPanel);
      var hIcon = o._hLoadingIcon = MO.Window.Builder.appendIcon(hCell);
      hIcon.src = MO.RResource.iconPath('control.RWindow_Loading');
      var hCell = o._hLoadingLabel = MO.Window.Builder.appendTableRowCell(hPanel);
      hCell.align = 'center';
      hCell.style.color = '#FFFFFF';
   }
   return hPanel;
}
MO.FDuiDesktopConsole_getProgressBar = function FDuiDesktopConsole_getProgressBar(){
   var o = this;
   var progressBar = o._progressBar;
   if(!progressBar){
      progressBar = o._progressBar = MO.Class.create(MO.FDuiProgressBar);
      progressBar.build(top.MO.Window._hDocument);
   }
   return progressBar;
}
MO.FDuiDesktopConsole_setMaskVisible = function FDuiDesktopConsole_setMaskVisible(visible){
   var o = this;
   if(o._maskVisible != visible){
      var hDocument = top.MO.Window._hDocument;
      var hBody = hDocument.body;
      var hMaskPanel = o.getMaskPanel();
      if(visible){
         var hStyle = hMaskPanel.style;
         hStyle.left = '0px';
         hStyle.top = '0px';
         hBody.appendChild(hMaskPanel);
      }else{
         hBody.removeChild(hMaskPanel);
      }
   }
   o._maskVisible = visible;
}
MO.FDuiDesktopConsole_isEnable = function FDuiDesktopConsole_isEnable(){
   return this._statusEnable;
}
MO.FDuiDesktopConsole_enable = function FDuiDesktopConsole_enable(){
   var o = this;
   o._disableDeep--;
   if(o._disableDeep == 0){
      o.setEnable(true);
   }
}
MO.FDuiDesktopConsole_disable = function FDuiDesktopConsole_disable(){
   var o = this;
   if(o._disableDeep == 0){
      o.setEnable(false);
   }
   o._disableDeep++;
}
MO.FDuiDesktopConsole_showLoading = function FDuiDesktopConsole_showLoading(){
   var o = this;
   o.setMaskVisible(true);
   if(!o._loadingVisible){
      var hLoadingPanel = o.getLoadingPanel();
      MO.Window.Html.textSet(o._hLoadingLabel, '正在努力加载中，请稍等 ...');
      o._hMaskInnerPanel.appendChild(hLoadingPanel);
      o._loadingVisible = true;
   }
}
MO.FDuiDesktopConsole_showUploading = function FDuiDesktopConsole_showUploading(){
   var o = this;
   o.setMaskVisible(true);
   if(!o._loadingVisible){
      var hLoadingPanel = o.getLoadingPanel();
      MO.Window.Html.textSet(o._hLoadingLabel, '正在努力上传中，请稍等 ...');
      o._hMaskInnerPanel.appendChild(hLoadingPanel);
      o._loadingVisible = true;
   }
}
MO.FDuiDesktopConsole_showProgress = function FDuiDesktopConsole_showProgress(rate){
   var o = this;
   o.setMaskVisible(true);
   if(!o._progressVisible){
      var hMaskPanel = o.getMaskPanel();
      var progressBar = o.getProgressBar();
      hMaskPanel.appendChild(progressBar._hPanel);
      o._progressVisible = true;
   }
}
MO.FDuiDesktopConsole_hide = function FDuiDesktopConsole_hide(){
   var o = this;
   if(o._loadingVisible){
      var hLoadingPanel = o.getLoadingPanel();
      o._hMaskInnerPanel.removeChild(hLoadingPanel);
      o._loadingVisible  = false;
   }
   o.setMaskVisible(false);
}
MO.FDuiEditorConsole = function FDuiEditorConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd     = MO.EScope.Local;
   o._hoverEditor = null;
   o._focusEditor = null;
   o._editors     = null;
   o.construct    = MO.FDuiEditorConsole_construct;
   o.makeName     = MO.FDuiEditorConsole_makeName;
   o.enter        = MO.FDuiEditorConsole_enter;
   o.leave        = MO.FDuiEditorConsole_leave;
   o.focus        = MO.FDuiEditorConsole_focus;
   o.blur         = MO.FDuiEditorConsole_blur;
   o.lost         = MO.FDuiEditorConsole_lost;
   return o;
}
MO.FDuiEditorConsole_construct = function FDuiEditorConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._editors = new MO.TDictionary();
}
MO.FDuiEditorConsole_makeName = function FDuiEditorConsole_makeName(cls, name){
   return name ? name + '@' + MO.Class.name(cls) : MO.Class.name(cls);
}
MO.FDuiEditorConsole_enter = function FDuiEditorConsole_enter(editable, cls){
   var name = MO.Class.name(cls);
   var editor = this._hoverEditors.get(name);
   if(!editor){
      editor = MO.Class.create(cls);
      editor.psBuild();
      this._hoverEditors.set(name, editor);
   }
   this._hoverEditor = editor;
   editor.editable = editable;
   editor.show();
   return editor;
}
MO.FDuiEditorConsole_leave = function FDuiEditorConsole_leave(editor){
   var o = this;
   if(o._hoverEditor != o._focusEditor){
      editor = MO.Lang.Object.nvl(editor, o._hoverEditor);
      o._hoverEditor = null;
      RLog.debug(o, 'Leave {1}', MO.Class.dump(editor));
   }
}
MO.FDuiEditorConsole_focus = function FDuiEditorConsole_focus(c, n, l){
   var o = this;
   var name = o.makeName(n, l);
   var e = o._editors.get(l);
   if(!e){
      e = MO.Class.create(n);
      e.build(c._hPanel);
      o._editors.set(l, e);
   }
   e.reset();
   if(MO.Class.isClass(e, MO.FDuiDropEditor)){
      e.linkControl(c);
      o._focusEditor = e;
   }
   return e;
}
MO.FDuiEditorConsole_blur = function FDuiEditorConsole_blur(editor){
   var o = this;
   if(o._focusEditor){
      editor = MO.Lang.Object.nvl(editor, o._focusEditor);
      if(editor){
         editor.onEditEnd();
      }
      o._focusEditor = null;
   }
}
MO.FDuiEditorConsole_lost = function FDuiEditorConsole_lost(e){
   var o = this;
   o.leave(e);
   o.blur(e);
}
MO.FDuiEnvironmentConsole = function FDuiEnvironmentConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o.scope       = MO.EScope.Local;
   o.environment = null;
   o.connect     = MO.FDuiEnvironmentConsole_connect;
   o.build       = MO.FDuiEnvironmentConsole_build;
   o.buildValue  = MO.FDuiEnvironmentConsole_buildValue;
   o.load        = MO.FDuiEnvironmentConsole_load;
   o.xml         = MO.FDuiEnvironmentConsole_xml;
   return o;
}
MO.FDuiEnvironmentConsole_connect = function FDuiEnvironmentConsole_connect(){
}
MO.FDuiEnvironmentConsole_build = function FDuiEnvironmentConsole_build(config){
   var o = this;
   if(!o.environment){
      o.connect()
   }
   if(o.environment){
      var node = config.create('Environment');
      node.attributes().append(this.environment.attributes());
   }
}
MO.FDuiEnvironmentConsole_buildValue = function FDuiEnvironmentConsole_buildValue(){
   if(!this.environment){
      this.connect()
   }
   if(this.environment){
      var env = RHtml.get('_environment');
      if(env){
         env.value = this.environment.xml();
      }
   }
}
MO.FDuiEnvironmentConsole_load = function FDuiEnvironmentConsole_load(p){
   this.environment = RXml.makeNode(p);
}
MO.FDuiEnvironmentConsole_xml = function FDuiEnvironmentConsole_xml(){
   if(!this.environment){
      this.connect()
   }
   if(this.environment){
      return this.environment.xml();
   }
   return null;
}
MO.FDuiErrorDialog = function FDuiErrorDialog(o){
   o = MO.Class.inherits(this, o, MO.FDuiDialog, MO.MListenerResult);
   o._styleText            = MO.Class.register(o, new MO.AStyle('_styleText'));
   o._frameName            = 'system.dialog.ErrorDialog';
   o._controlText          = null;
   o._controlConfirmButton = null;
   o._controlCancelButton  = null;
   o.onBuilded             = MO.FDuiErrorDialog_onBuilded;
   o.onConfirmClick        = MO.FDuiErrorDialog_onConfirmClick;
   o.construct             = MO.FDuiErrorDialog_construct;
   o.setCode               = MO.FDuiErrorDialog_setCode;
   o.setDescription        = MO.FDuiErrorDialog_setDescription;
   o.dispose               = MO.FDuiErrorDialog_dispose;
   return o;
}
MO.FDuiErrorDialog_onBuilded = function FDuiErrorDialog_onBuilded(p){
   var o = this;
   o.__base.FDuiDialog.onBuilded.call(o, p);
   o._controlConfirm.addClickListener(o, o.onConfirmClick);
}
MO.FDuiErrorDialog_onConfirmClick = function FDuiErrorDialog_onConfirmClick(event){
   var o = this;
   var event = new MO.SEvent();
   event.sender = o;
   event.resultCd = MO.EResult.Success;
   o.processResultListener(event);
   event.dispose();
   o.hide();
}
MO.FDuiErrorDialog_construct = function FDuiErrorDialog_construct(){
   var o = this;
   o.__base.FDuiDialog.construct.call(o);
}
MO.FDuiErrorDialog_setCode = function FDuiErrorDialog_setCode(value){
   this._controlCode.set(value);
}
MO.FDuiErrorDialog_setDescription = function FDuiErrorDialog_setDescription(value){
   this._controlDescription.set(value);
}
MO.FDuiErrorDialog_dispose = function FDuiErrorDialog_dispose(){
   var o = this;
   o.__base.FDuiDialog.dispose.call(o);
}
MO.FDuiFocusConsole = function FDuiFocusConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o.scope              = MO.EScope.Page;
   o._blurAble          = true;
   o._focusAble         = true;
   o._focusClasses      = null;
   o._storeControl      = null;
   o._hoverContainer    = null;
   o._hoverControl      = null;
   o._focusControl      = null;
   o._blurControl       = null;
   o._activeControl     = null;
   o.lsnsFocus          = null;
   o.lsnsBlur           = null;
   o.lsnsFocusClass     = null;
   o.onMouseDown        = MO.FDuiFocusConsole_onMouseDown;
   o.onMouseWheel       = MO.FDuiFocusConsole_onMouseWheel;
   o.construct          = MO.FDuiFocusConsole_construct;
   o.enter              = MO.FDuiFocusConsole_enter;
   o.leave              = MO.FDuiFocusConsole_leave;
   o.isFocus            = MO.FDuiFocusConsole_isFocus;
   o.focus              = MO.FDuiFocusConsole_focus;
   o.blur               = MO.FDuiFocusConsole_blur;
   o.findClass          = MO.FDuiFocusConsole_findClass;
   o.focusClass         = MO.FDuiFocusConsole_focusClass;
   o.focusHtml          = MO.FDuiFocusConsole_focusHtml;
   o.lockBlur           = MO.FDuiFocusConsole_lockBlur;
   o.unlockBlur         = MO.FDuiFocusConsole_unlockBlur;
   o.storeFocus         = MO.FDuiFocusConsole_storeFocus;
   o.restoreFocus       = MO.FDuiFocusConsole_restoreFocus;
   o.dispose            = MO.FDuiFocusConsole_dispose;
   return o;
}
MO.FDuiFocusConsole_onMouseDown = function FDuiFocusConsole_onMouseDown(p){
   this.focusHtml(p.hSource);
}
MO.FDuiFocusConsole_onMouseWheel = function FDuiFocusConsole_onMouseWheel(s, e){
   var o = this;
}
MO.FDuiFocusConsole_construct = function FDuiFocusConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._focusClasses = new Object();
   o.lsnsFocus = new MO.TListeners();
   o.lsnsBlur = new MO.TListeners();
   o.lsnsFocusClass = new MO.TListeners();
   MO.Logger.info(o, 'Add listener for window mouse down and wheel.');
   MO.Window.lsnsMouseDown.register(o, o.onMouseDown);
   MO.Window.lsnsMouseWheel.register(o, o.onMouseWheel);
}
MO.FDuiFocusConsole_enter = function FDuiFocusConsole_enter(c){
   var o = this;
   if(MO.Class.isClass(c, MO.MUiContainer)){
      o._hoverContainer = c;
   }else{
      o._hoverControl = c;
   }
}
MO.FDuiFocusConsole_leave = function FDuiFocusConsole_leave(c){
   var o = this;
   if(o._hoverContainer == c){
      o._hoverContainer = null;
   }
   if(o._hoverControl == c){
      o._hoverControl = null;
   }
}
MO.FDuiFocusConsole_isFocus = function FDuiFocusConsole_isFocus(c){
   return (this._focusControl == c);
}
MO.FDuiFocusConsole_focus = function FDuiFocusConsole_focus(c, e){
   var o = this;
   if(!MO.Class.isClass(c, MO.MDuiFocus)){
      return;
   }
   var f = o._focusControl;
   if(f == c){
      return;
   }
   var bc = o._blurControl;
   if(bc != f){
      if(o._blurAble && f && f.testBlur(c)){
         o._blurControl = f;
         f.doBlur(e);
         o.lsnsBlur.process(f);
      }
   }
   if(o._focusAble){
      c.doFocus(e);
      o._focusControl = o._activeControl = c;
      o.lsnsFocus.process(c);
   }
}
MO.FDuiFocusConsole_blur = function FDuiFocusConsole_blur(c, e){
   var o = this;
   var fc = o._focusControl;
   var bc = o._blurControl;
   if(fc && c && !fc.testBlur(c)){
      return;
   }
   if(bc != c && MO.Class.isClass(c, MO.MDuiFocus)){
      o._blurControl = c;
      c.doBlur(e);
   }
   if(fc){
      fc.doBlur(e);
      o._focusControl = null;
   }
}
MO.FDuiFocusConsole_findClass = function FDuiFocusConsole_findClass(c){
   var o = this;
   var n = MO.Class.name(c);
   if(o._focusClasses[n]){
      return o._focusClasses[n];
   }
   var p = o._activeControl;
   if(MO.Class.isClass(p, MO.FEditor)){
      p = p.source;
   }
   if(p){
      return p.topControl(c);
   }
}
MO.FDuiFocusConsole_focusClass = function FDuiFocusConsole_focusClass(c, p){
   var o = this;
   var n = MO.Class.name(c);
   if(o._focusClasses[n] != p){
      o._focusClasses[n] = p;
      o.lsnsFocusClass.process(p, c);
   }
}
MO.FDuiFocusConsole_focusHtml = function FDuiFocusConsole_focusHtml(p){
   var o = this;
   var c = MO.Window.Html.searchLinker(p, MO.FDuiControl);
   if(c){
      if(o._focusControl != c){
         o.blur(c, p);
      }
   }else{
      o.blur(null, p);
   }
}
MO.FDuiFocusConsole_lockBlur = function FDuiFocusConsole_lockBlur(){
   this._blurAble = false;
}
MO.FDuiFocusConsole_unlockBlur = function FDuiFocusConsole_unlockBlur(){
   this._blurAble = true;
}
MO.FDuiFocusConsole_storeFocus = function FDuiFocusConsole_storeFocus(){
   var o = this;
   o._storeControl = o._focusControl;
}
MO.FDuiFocusConsole_restoreFocus = function FDuiFocusConsole_restoreFocus(){
   var o = this;
   if(o._storeControl){
      o._storeControl.focus();
      o._storeControl = null;
   }
}
MO.FDuiFocusConsole_dispose = function FDuiFocusConsole_dispose(){
   var o = this;
   o.__base.FConsole.dispose.call(o);
   o._focusClasses = null;
}
MO.FDuiFrameConsole = function FDuiFrameConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd         = MO.EScope.Local;
   o._frames          = null;
   o.construct        = MO.FDuiFrameConsole_construct;
   o.create           = MO.FDuiFrameConsole_create;
   o.find             = MO.FDuiFrameConsole_find;
   o.findByClass      = MO.FDuiFrameConsole_findByClass;
   o.get              = MO.FDuiFrameConsole_get;
   return o;
}
MO.FDuiFrameConsole_construct = function FDuiFrameConsole_construct(){
   var o = this;
   o._frames = new MO.TMap();
}
MO.FDuiFrameConsole_create = function FDuiFrameConsole_create(control, name){
   var o = this;
   var defineConsole = MO.Console.find(MO.FUiFrameDefineConsole);
   var xframe = defineConsole.load(name);
   var frame = MO.Dui.Control.build(null, xframe, null, control._hPanel);
   return frame;
}
MO.FDuiFrameConsole_find = function FDuiFrameConsole_find(n){
   return this._frames.get(n);
}
MO.FDuiFrameConsole_findByClass = function FDuiFrameConsole_findByClass(control, clazz){
   var o = this;
   var className = MO.Class.name(clazz);
   var frames = o._frames;
   var instance = frames.get(className);
   if(!instance){
      instance = MO.Class.create(clazz);
      instance.buildDefine(control._hPanel);
      frames.set(className, instance);
   }
   return instance;
}
MO.FDuiFrameConsole_get = function FDuiFrameConsole_get(control, name, hPanel){
   var o = this;
   var frames = o._frames;
   var frame = frames.get(name);
   if(!frame){
      frame = o.create(control, name);
      if(hPanel){
         frame.setPanel(hPanel);
      }
      frames.set(name, frame);
   }
   return frame;
}
MO.FDuiFrameConsole_hiddenAll = function FDuiFrameConsole_hiddenAll(){
   var o = this;
   var fs = o._frames;
   var fc = fs.count;
   for(var n=0; n<fc; n++){
      fs.value(n).setVisible(false);
   }
}
MO.FDuiFrameConsole_onProcessLoaded = function FDuiFrameConsole_onProcessLoaded(e){
   var o = this;
   var r = e.document.root();
   var g = e.argument;
   if(!e.messageChecked){
      var m = new MO.TMessageArg();
      m.argument = g;
      m.form = g.form;
      m.config = r;
      m.invokeCaller = new MO.TInvoke(o, o.onLoaded);
      m.invokeParam = e;
      m.event = e;
      if(!MO.Console.find(MO.FMessageConsole).checkResult(m)){
         return;
      }
   }
   var g = e.argument;
   var fn = r.find('Form');
   if(fn){
      var ds = MO.RDataset.make(fn);
      g.resultDataset = ds;
      g.resultRow = ds.rows.get(0);
   }
   g.invoke();
}
MO.FDuiFrameConsole_process = function FDuiFrameConsole_process(g){
   var o = this;
   var doc = new MO.TXmlDocument();
   var root = doc.root();
   root.set('action', 'process');
   if(g.checked){
      root.set('checked', g.checked);
   }
   root.push(g.toNode());
   var e = new MO.TEvent(o, EXmlEvent.Send, o.onProcessLoaded);
   e.url = MO.RService.url(MO.Lang.String.nvl(g.url, 'logic.webform'));
   e.action = MO.EDataAction.Process;
   e.argument = g;
   e.document = doc;
   MO.Console.find(MO.FXmlConsole).process(e);
}
MO.FDuiFrameConsole_loadEvents = function FDuiFrameConsole_loadEvents(cfg){
}
MO.FDuiFrameConsole_processEvent = function FDuiFrameConsole_processEvent(e){
   var o = this;
   var es = o.events;
   if(es.isEmpty()){
      return;
   }
   var se = e.source;
   if(MO.Class.isClass(se, FControl)){
      var p = se.topControl();
      if(p){
         var s = MO.Lang.String.nvl(e.name, e.handle) + '@' + se.name + '@' + p.name;
         var c = es.get(s);
         var eo = e.caller ? e.caller : se;
         if(c && c.code){
            if(c.event){
               c.event.call(eo, eo, e);
            }else{
               c.event = new Function('o', 'e', c.code);
                  c.event.call(eo, eo, e);
            }
         }
      }
   }
}
MO.FDuiFrameConsole_free = function FDuiFrameConsole_free(f){
   f.setVisible(false);
   this._freeFrames.push(f);
}
MO.FDuiFrameConsole_dispose = function FDuiFrameConsole_dispose(){
   var o = this;
   MO.Memory.free(o._frames);
   MO.Memory.free(o._formIds);
   MO.Memory.free(o._framesLoaded);
   o._frames = null;
   o._formIds = null;
   o._framesLoaded = null;
}
MO.FDuiFrameEventConsole = function FDuiFrameEventConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd   = MO.EScope.Local;
   o._thread    = null;
   o._interval  = 20;
   o._allow     = true;
   o._allows    = new MO.TAttributes();
   o._events    = new MO.TObjects();
   o._listeners = new MO.TAttributes();
   o.onProcess  = MO.FDuiFrameEventConsole_onProcess;
   o.construct  = MO.FDuiFrameEventConsole_construct;
   o.register   = MO.FDuiFrameEventConsole_register;
   o.push       = MO.FDuiFrameEventConsole_push;
   o.clear      = MO.FDuiFrameEventConsole_clear;
   return o;
}
MO.FDuiFrameEventConsole_onProcess = function FDuiFrameEventConsole_onProcess(){
   var o = this;
   var events = o._events;
   if(events.isEmpty()){
      return;
   }
   while(true){
      var processed = false;
      var eventCount = events.count();
      for(var i = 0; i < eventCount; i++){
         var event = events.at(i);
         if(event){
            processed = true;
            event.process();
            var className = MO.Method.name(event);
            var listeners = o._listeners.get(className);
            if(listeners){
               listeners.process(event);
            }
            events.set(i, null)
         }
      }
      if(!processed){
         break;
      }
   }
   events.clear();
}
MO.FDuiFrameEventConsole_construct = function FDuiFrameEventConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   var t = o._thread = MO.Class.create(MO.FThread);
   t.setInterval(o._interval);
   t.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(t);
}
MO.FDuiFrameEventConsole_register = function FDuiFrameEventConsole_register(po, pc){
   this._events.push(new MO.TEvent(po, null, pc));
}
MO.FDuiFrameEventConsole_push = function FDuiFrameEventConsole_push(e){
   var o = this;
   var n = MO.Class.name(e)
   if(o._allow){
      var a = true;
      if(o._allows.contains(n)){
         a = MO.Lang.Boolean.isTrue(o._allows.get(n));
      }
      if(a){
         var es = o._events;
         var c = es.count();
         for(var i = 0; i < c; i++){
            if(es.get(n) == e){
               es.set(n, null);
            }
         }
         es.push(e);
      }
   }
}
MO.FDuiFrameEventConsole_clear = function FDuiFrameEventConsole_clear(){
   this._events.clear();
}
MO.FDuiFrameEventConsole_add = function FDuiFrameEventConsole_add(owner, proc){
   this._events.push(new MO.TEvent(owner, null, proc));
}
MO.FDuiFrameEventConsole_allowEvent = function FDuiFrameEventConsole_allowEvent(c){
   this._allows.set(MO.Method.name(c), EBool.True);
}
MO.FDuiFrameEventConsole_skipEvent = function FDuiFrameEventConsole_skipEvent(c){
   this._allows.set(MO.Method.name(c), EBool.False);
}
MO.FDuiFrameEventConsole_allowAll = function FDuiFrameEventConsole_allowAll(){
   this._allow = true;
}
MO.FDuiFrameEventConsole_skipAll = function FDuiFrameEventConsole_skipAll(){
   this._allow = false;
}
MO.FDuiFrameEventConsole_onlyCall = function FDuiFrameEventConsole_onlyCall(c, m){
   var o = this;
   o._allow = false;
   m.call(c);
   o._allow = true;
}
MO.FDuiInfoDialog = function FDuiInfoDialog(o){
   o = MO.Class.inherits(this, o, MO.FDuiDialog, MO.MListenerResult);
   o._styleText            = MO.Class.register(o, new MO.AStyle('_styleText'));
   o._frameName            = 'system.dialog.InfoDialog';
   o._controlText          = null;
   o._controlConfirmButton = null;
   o._controlCancelButton  = null;
   o.onBuilded             = MO.FDuiInfoDialog_onBuilded;
   o.onConfirmClick        = MO.FDuiInfoDialog_onConfirmClick;
   o.construct             = MO.FDuiInfoDialog_construct;
   o.setText               = MO.FDuiInfoDialog_setText;
   o.dispose               = MO.FDuiInfoDialog_dispose;
   return o;
}
MO.FDuiInfoDialog_onBuilded = function FDuiInfoDialog_onBuilded(p){
   var o = this;
   o.__base.FDuiDialog.onBuilded.call(o, p);
   o._controlText._hPanel.className = o.styleName('Text');
   o._controlConfirmButton.addClickListener(o, o.onConfirmClick);
}
MO.FDuiInfoDialog_onConfirmClick = function FDuiInfoDialog_onConfirmClick(event){
   var o = this;
   var event = new MO.SEvent();
   event.sender = o;
   event.resultCd = MO.EResult.Success;
   o.processResultListener(event);
   event.dispose();
   o.hide();
}
MO.FDuiInfoDialog_construct = function FDuiInfoDialog_construct(){
   var o = this;
   o.__base.FDuiDialog.construct.call(o);
}
MO.FDuiInfoDialog_setText = function FDuiInfoDialog_setText(value){
   this._controlText.set(value);
}
MO.FDuiInfoDialog_dispose = function FDuiInfoDialog_dispose(){
   var o = this;
   o.__base.FDuiDialog.dispose.call(o);
}
MO.FDuiKeyConsole = function FDuiKeyConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd        = EScope.Local;
   o._enable         = true;
   o._enableRegister = true;
   o._listeners      = new Object();
   o._disableKeys    = new Object();
   o.onKeyDown       = MO.FDuiKeyConsole_onKeyDown;
   o.construct       = MO.FDuiKeyConsole_construct;
   o.enable          = MO.FDuiKeyConsole_enable;
   o.disable         = MO.FDuiKeyConsole_disable;
   o.enableRegister  = MO.FDuiKeyConsole_enableRegister;
   o.disableRegister = MO.FDuiKeyConsole_disableRegister;
   o.register        = MO.FDuiKeyConsole_register;
   return o;
}
MO.FDuiKeyConsole_onKeyDown = function FDuiKeyConsole_onKeyDown(e){
   var o = this;
   var k = MO.REnum.tryDecode(MO.EKeyCode, e.keyCode);
   if(k && o._enable){
      var ls = o._listeners[k];
      if(ls){
         ls.process(o, e);
         e.keyCode = null;
         e.returnValue = false;
      }
   }
   if(k && o._disableKeys[k]){
      e.keyCode = null;
      e.returnValue = false;
   }
}
MO.FDuiKeyConsole_construct = function FDuiKeyConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   MO.Window.lsnsKeyDown.register(o, o.onKeyDown);
}
MO.FDuiKeyConsole_enable = function FDuiKeyConsole_enable(){
   this._enable = true;
}
MO.FDuiKeyConsole_disable = function FDuiKeyConsole_disable(){
   this._enable = false;
}
MO.FDuiKeyConsole_enableRegister = function FDuiKeyConsole_enableRegister(){
   this._enableRegister = true;
}
MO.FDuiKeyConsole_disableRegister = function FDuiKeyConsole_disableRegister(){
   this._enableRegister = false;
}
MO.FDuiKeyConsole_register = function FDuiKeyConsole_register(k, w, p){
   var o = this;
   if(o._enableRegister){
      if(MO.Lang.Integer.isInteger(k)){
         k = MO.REnum.decode(EKeyCode, k);
      }
      var ks = o._listeners;
      var s = ks[k];
      if(!s){
         s = ks[k] = new MO.TListeners();
      }
      s.clear();
      s.register(w, p);
   }
}
MO.FDuiMessageConsole = function FDuiMessageConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole, MO.MDuiStyle);
   o._scopeCd       = MO.EScope.Global;
   o._result        = new Array();
   o._attributes    = new Array();
   o._messageBox    = null;
   o._messageWindow = null;
   o.showInfo       = MO.FDuiMessageConsole_showInfo;
   o.showConfirm    = MO.FDuiMessageConsole_showConfirm;
   o.showError      = MO.FDuiMessageConsole_showError;
   o.popup          = MO.FDuiMessageConsole_popup;
   o.close          = MO.FDuiMessageConsole_close;
   o.parse          = MO.FDuiMessageConsole_parse;
   o.check          = MO.FDuiMessageConsole_check;
   return o;
}
MO.FDuiMessageConsole_showInfo = function FDuiMessageConsole_showInfo(text){
   var dialog = MO.Console.find(MO.FDuiWindowConsole).find(MO.FDuiInfoDialog);
   dialog.clearResultListeners();
   dialog.setText(text);
   dialog.showPosition(MO.EUiPosition.Center);
   return dialog;
}
MO.FDuiMessageConsole_showConfirm = function FDuiMessageConsole_showConfirm(text){
   var dialog = MO.Console.find(MO.FDuiWindowConsole).find(MO.FDuiConfirmDialog);
   dialog.clearResultListeners();
   dialog.setText(text);
   dialog.showPosition(MO.EUiPosition.Center);
   return dialog;
}
MO.FDuiMessageConsole_showError = function FDuiMessageConsole_showError(code, message, description){
   var dialog = MO.Console.find(MO.FDuiWindowConsole).find(MO.FDuiErrorDialog);
   dialog.clearResultListeners();
   dialog.setCode(message);
   dialog.setDescription(description);
   dialog.showPosition(MO.EUiPosition.Center);
   return dialog;
}
MO.FDuiMessageConsole_popup = function FDuiMessageConsole_popup(g){
   var o = this;
   var w = o._messageWindow;
   if(!w){
      w = o._messageWindow = RControl.create(FUiMessageWindow);
   }
   w.loadMessages(g);
   w.show();
}
MO.FDuiMessageConsole_close = function FDuiMessageConsole_close(){
   RWindow.setEnable(true);
}
MO.FDuiMessageConsole_parse = function FDuiMessageConsole_parse(config){
   var msgs = null;
   var msgsNode = config.find('Messages');
   if(msgsNode && msgsNode.nodes && msgsNode.nodes.count){
      msgs = new MO.TMessages();
      for(var n=0; n<msgsNode.nodes.count; n++){
         var node = msgsNode.node(n);
         var msg = new TMessage();
         msg.loadConfig(msgsNode.node(n));
         msgs.push(msg);
      }
   }
   return msgs;
}
MO.FDuiMessageConsole_check = function FDuiMessageConsole_check(g){
   var o = this;
   var ms = g.messages = o.parse(g.config);
   if(ms){
      var m = ms.message(MO.EMessage.Fatal);
      if(m && m.attrType == "session.timeout"){
         var ss = RString.splitTwo(m.redirect, '@');
         var s = RContext.context(ss[1] + '?do='+ss[0]);
         fmMain.action = s;
         fmMain.target = '_self';
         fmMain.submit();
      }else{
         o.popupMessage(g);
      }
      return false;
   }
   return true;
}
MO.FDuiMessageDialog = function FDuiMessageDialog(o){
   o = MO.Class.inherits(this, o, MO.FDuiWindow);
   o._styleMsgPanel     = MO.Class.register(o, new MO.AStyle('_styleMsgPanel'));
   o._styleButtonPanel  = MO.Class.register(o, new MO.AStyle('_styleButtonPanel'));
   o._styleItmeForm     = MO.Class.register(o, new MO.AStyle('_styleItmeForm'));
   o._styleItemTitle    = MO.Class.register(o, new MO.AStyle('_styleItemTitle'));
   o._styleItemBodyForm = MO.Class.register(o, new MO.AStyle('_styleItemBodyForm'));
   o._styleRowItem      = MO.Class.register(o, new MO.AStyle('_styleRowItem'));
   o._styleDescForm     = MO.Class.register(o, new MO.AStyle('_styleDescForm'));
   o._styleDescTitle    = MO.Class.register(o, new MO.AStyle('_styleDescTitle'));
   o._styleDescBody     = MO.Class.register(o, new MO.AStyle('_styleDescBody'));
   o._type              = null;
   o._isDialog          = false;
   o._titleBlur         = false;
   o._messageArg        = null;
   o._hMessagePanel     = null;
   o._hMessages         = null;
   o._hDescription      = null;
   o._hButtonPanel      = null;
   o._hBlank            = null;
   o.onBuild            = MO.FDuiMessageDialog_onBuild;
   o.onItemOver         = MO.Class.register(o, new MO.AEventMouseOver('onItemOver'), MO.FDuiMessageDialog_onItemOver);
   o.onItemClick        = MO.Class.register(o, new MO.AEventClick('onItemClick'), MO.FDuiMessageDialog_onItemClick);
   o.onDescClick        = MO.Class.register(o, new MO.AEventClick('onDescClick'), MO.FDuiMessageDialog_onDescClick);
   o.onBuildMessages    = MO.FDuiMessageDialog_onBuildMessages;
   o.onBuildButtons     = MO.FDuiMessageDialog_onBuildButtons;
   o.onOk               = MO.FDuiMessageDialog_onOk;
   o.onCancel           = MO.FDuiMessageDialog_onCancel;
   o.onClose            = MO.FDuiMessageDialog_onClose;
   o.loadMessages       = MO.FDuiMessageDialog_loadMessages;
   o.show               = MO.FDuiMessageDialog_show;
   o.hide               = MO.FDuiMessageDialog_hide;
   o.dispose            = MO.FDuiMessageDialog_dispose;
   return o;
}
MO.FDuiMessageDialog_onBuild = function FDuiMessageDialog_onBuild(event){
   var o = this;
   o.__base.FDuiWindow.oeBuild.call(o, e);
   o.setIcon('Icon');
   var hTab = MO.RBuilder.appendTable(o.hBodyPanel, 0, 0, 0);
   hTab.style.vAlign = "top";
   hTab.width = '100%';
   hTab.height = '100%';
   var h1 = o.hTitlePanel = hTab.insertRow().insertCell();
   h1.style.height = "100%";
   h1.style.vAlign = "top";
   var h2 = o.hMsgPanel = hTab.insertRow().insertCell();
   h2.style.height = "100%";
   o.onBuildMessages();
   var h0 = o._hButtonPanel = hTab.insertRow().insertCell();
   h0.style.align = 'right';
   o.onBuildButtons();
   h0.height = 20;
   MO.Console.find(FKeyConsole).register(MO.EKey.Esc, new MO.TListener(o, o.onClose));
   return r;
}
MO.FDuiMessageDialog_onItemOver = function FDuiMessageDialog_onItemOver(e){
   var o = this;
   var hf = o.hItemBodyForm;
   var h = e.hSource;
}
MO.FDuiMessageDialog_onItemClick = function FDuiMessageDialog_onItemClick(e){
   var o = this;
   var hf = o.hItemBodyForm;
   for(var n = 0; n < hf.rows.count; n++){
   }
   var h = e.hSource;
   var idx = h.rowIndex;
}
MO.FDuiMessageDialog_onDescClick = function FDuiMessageDialog_onDescClick(e){
   var o = this;
}
MO.FDuiMessageDialog_onBuildMessages = function FDuiMessageDialog_onBuildMessages(){
   var o = this;
   if(!o._type){
      var hTab1 = o.hItmeForm = MO.RBuilder.appendTable(o.hTitlePanel);
      hTab1.style.height = "100%";
      hTab1.style.width = "100%";
      hTab1.style.vAlign = "top";
      var hItemTitle = o.hItemTitle = hTab1.insertRow().insertCell();
      hItemTitle.height = 25;
      var h = MO.RBuilder.appendTable(hItemTitle);
      h.height = '100%';
      h.width = '100%';
      h.style.backgroundColor = "#F5F5F5";
      var hr = h.insertRow();
      var hc1 = hr.insertCell();
      hc1.width = '20';
      var hTitleIcon = MO.RBuilder.appendIcon(hc1, null, null, 16, 14);
      hTitleIcon.style.paddingLeft = 20;
      hTitleIcon.src = o.styleIconPath('TitleIcon');
      var hc2 = hr.insertCell();
      hc2.innerText = ' '+ MO.Context.get('FDuiMessageDialog:MessageContext');
      var hItemBody  = o.hItemBody = hTab1.insertRow().insertCell();
      hItemBody.height = 100;
      o.hItemBody.style.borderBottom = '2 solid #F5F5F5';
      hItemBody.style.padding = '5';
      hItemBody.vAlign = "top";
      var hDiv = MO.RBuilder.appendDiv(hItemBody);
      hDiv.style.height = '100px';
      hDiv.style.overflow = "auto";
      var hItemBodyForm = o.hItemBodyForm = MO.RBuilder.appendTable(hDiv);
      hItemBodyForm.style.border = '2px solid #FFFFFF';
      hItemBodyForm.width = "100%";
      hItemBodyForm.style.vAlign = "top";
      var hTab2 = o.hDescForm = MO.RBuilder.appendTable(o.hMsgPanel);
      hTab2.style.tableLayout = "fixed";
      hTab2.style.border='2px solid #EEEDED';
      hTab2.style.borderTopWidth = 0;
   }
   o.hItmeForm.style.display = 'none';
   o.hDescForm.style.display = 'none';
   o.hMsgPanel.style.height = '100%';
   if(EMessage.Fatal == o._type || EMessage.Error == o._type){
      o.hItmeForm.style.display = 'block';
      o.hDescForm.style.display = 'block';
   }else{
      o.hItmeForm.style.display = 'block';
   }
}
MO.FDuiMessageDialog_onBuildButtons = function FDuiMessageDialog_onBuildButtons(t){
   var o = this;
   if(!o._type){
      var hBtnTab = MO.Window.Builder.appendTable(o._hButtonPanel, null, 0, 0, 2);
      var hRow = hBtnTab.insertRow();
      var hc = o._hBlank = hRow.insertCell();
      hc.width='72%';
      var b = o.btnOk = MO.Class.create(MO.FButton);
      b.icon = 'tool.ok';
      b.label = RContext.get('FToolButton:ok');
      b.width = '100%';
      b.lsnsClick.register(o, o.onOk);
      var hoc = hRow.insertCell();
      hoc.style.align='right';
      hoc.width='15%';
      b.psBuild(hoc);
      var b = o.btnCancel = MO.Class.create(MO.FButton);
      b.icon = 'tool.cancel';
      b.label = MO.RContext.get('FToolButton:cancel');
      b.width = '100%';
      b.lsnsClick.register(o, o.onCancel);
      var hcc = hRow.insertCell();
      hcc.width='15%';
      b.psBuild(hcc);
   }
   o.btnOk.hPanel.style.display = "none";
   o.btnCancel.hPanel.style.display = "none";
   if(EMessage.Warn == o._type){
      o.btnOk.hPanel.style.display = "block";
      o.btnCancel.hPanel.style.display = "block";
      o._hBlank.width = '72%';
   }else{
      o.btnOk.hPanel.style.display = "block";
      o._hBlank.width = '87%';
   }
}
MO.FDuiMessageDialog_onOk = function FDuiMessageDialog_onOk(){
   var o = this;
   var g = o._messageArg;
   var cg = g.argument;
   var type = o.msgs.get(0)._type;
   if(EMessage.Warn == type){
      if(cg){
         cg.checked = EBoolean.True;
         if('process' == cg.actionType){
            RConsole.find(FFormConsole).process(cg);
         }else if('update' == cg.actionType){
            RConsole.find(FDatasetConsole).update(cg);
         }
      }
   }
   if(type == EMessage.Info){
      if(g.invokeCaller){
         g.invokeParam.messageChecked = true;
         g.invokeCaller.invoke(g.invokeParam);
      }
   }
   o.hide();
}
MO.FDuiMessageDialog_onCancel = function FDuiMessageDialog_onCancel(){
   this.hide();
}
MO.FDuiMessageDialog_onClose = function FDuiMessageDialog_onClose(){
   this.hide();
}
MO.FDuiMessageDialog_loadMessages = function FDuiMessageDialog_loadMessages(g){
   var o = this;
   o._messageArg = g;
   var ms = g.messages;
   o._type = ms._type();
   o.onBuildButtons();
   o.onBuildMessages();
   RHtml.clear(o.hItemBodyForm);
   RHtml.clear(o.hDescDiv);
   var first = true;
   var msgs = o.msgs = ms.items;
   var msgType = EMessage.Info;
   for(var n=0; n<msgs.count; n++){
      var msg = msgs.get(n);
      var m = msg.message;
      var d = msg.description;
      var t = msg._type;
      var hr = o.hItemBodyForm.insertRow();
      hr.height = 12;
      var hc1 = hr.insertCell();
      hc1.width = 20;
      var hIcon =  MO.Window.Builder.appendIcon(hc1, null, n, 16, 16);
      if(EMessage.Error == t){
    	 o.setIcon('TitleError');
         hIcon.src = o.styleIconPath('ItemError');
         msgType = EMessage.Error;
      }else if(EMessage.Warn == t){
    	 o.setIcon('TitleWarn');
         hIcon.src = o.styleIconPath('ItemWarn');
         msgType = EMessage.Warn;
      }else if(EMessage.Info == t){
    	 o.setIcon('TitleInfo');
         msgType = EMessage.Info;
         hIcon.src = o.styleIconPath('ItemInfo');
      }else if(EMessage.Fatal == t){
         msgType = EMessage.Fatal;
         hIcon.src = o.styleIconPath('ItemError');
      }
      var hc2 = hr.insertCell();
      hc2.style.textOverflow = 'ellipsis';
      hc2.style.overflow = 'hidden';
      hc2.innerText = ' ' + m;
      hc2.style.cursor = "hand";
      o.attachEvent('onItemClick', hr);
      o.attachEvent('onItemOver', hr);
      if(first){
         first = false;
      }
   }
   if(EMessage.Error == msgType){
      o.setCaption(' ' + RContext.get('FDuiMessageDialog:Error'));
   }else if(EMessage.Warn == msgType){
      o.setCaption(' ' + RContext.get('FDuiMessageDialog:Warn'));
   }else if(EMessage.Info == msgType){
      o.setCaption(' ' + RContext.get('FDuiMessageDialog:Info'));
   }else if(EMessage.Fatal == msgType){
      o.setCaption(' ' + RContext.get('FDuiMessageDialog:Fatal'));
   }
}
MO.FDuiMessageDialog_show = function FDuiMessageDialog_show(){
   var o = this;
   o.__base.FDuiWindow.show.call(o);
   o.panel().style.zIndex = RLayer.next(ELayer.Message);
   RWindow.moveCenter(o.panel());
   o.psMode(EMode.Update);
   RConsole.find(FFocusConsole).blur();
   RWindow.setEnable(false, true);
   o.focus();
}
MO.FDuiMessageDialog_hide = function FDuiMessageDialog_hide(){
   var o = this;
   o.__base.FDuiWindow.hide.call(o);
   var f = o._messageArg.argument.form;
   if(MO.Class.isClass(f, MDataset)){
      f.psProgress(false);
   }
   RWindow.setEnable(true);
}
MO.FDuiMessageDialog_dispose = function FDuiMessageDialog_dispose(){
   var o = this;
   o.__base.FDuiWindow.dispose.call(o);
   o.hItmeForm = null;
   o.hDescBody = null;
   o.hDescDiv = null;
   o.hDescTitle = null;
   o.hItemBodyForm = null;
   o._hButtonPanel = null;
}
MO.FDuiPopupConsole = function FDuiPopupConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd       = MO.EScope.Local;
   o._activeControl = null;
   o.onMouseDown    = MO.FDuiPopupConsole_onMouseDown;
   o.onMouseWheel   = MO.FDuiPopupConsole_onMouseWheel;
   o.construct      = MO.FDuiPopupConsole_construct;
   o.show           = MO.FDuiPopupConsole_show;
   o.hide           = MO.FDuiPopupConsole_hide;
   o.dispose        = MO.FDuiPopupConsole_dispose;
   return o;
}
MO.FDuiPopupConsole_onMouseDown = function FDuiPopupConsole_onMouseDown(p){
   this.hide();
}
MO.FDuiPopupConsole_onMouseWheel = function FDuiPopupConsole_onMouseWheel(s, e){
   this.hide();
}
MO.FDuiPopupConsole_construct = function FDuiPopupConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   MO.Logger.info(o, 'Add listener for control popup.');
   MO.Window.lsnsMouseDown.register(o, o.onMouseDown);
   MO.Window.lsnsMouseWheel.register(o, o.onMouseWheel);
}
MO.FDuiPopupConsole_show = function FDuiPopupConsole_show(control){
   var o = this;
   o.hide();
   if(MO.Class.isClass(control, MO.MDuiPopup)){
      o._activeControl = control;
   }
}
MO.FDuiPopupConsole_hide = function FDuiPopupConsole_hide(control){
   var o = this;
   if(o._activeControl){
      var opener = o._activeControl.opener();
      opener.drop(false);
   }
   o._activeControl = null;
}
MO.FDuiPopupConsole_dispose = function FDuiPopupConsole_dispose(){
   var o = this;
   o._activeControl = null;
   o.__base.FConsole.dispose.call(o);
}
MO.FDuiResultConsole = function FDuiResultConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o.scope          = MO.EScope.Page;
   o.executeCommand = MO.FDuiResultConsole_executeCommand;
   o.checkService   = MO.FDuiResultConsole_checkService;
   o.checkEvent     = MO.FDuiResultConsole_checkEvent;
   return o;
}
MO.FDuiResultConsole_executeCommand = function FDuiResultConsole_executeCommand(command){
   var name = command.get('name');
   if(EResultCommand.TreeReload == name){
      var tv = MO.RGlobal.get('catalog.tree');
      if(tv){
         tv.reload();
      }
   }else if(EResultCommand.TreeNodeRefresh == name){
      var tv = MO.RGlobal.get('catalog.tree');
      if(tv){
         var uuid = command.get('uuid');
         if(uuid){
            var fn = tv.findByUuid(uuid);
            if(fn){
               tv.reloadNode(fn);
            }else{
               return alert("Can't find tree node. (uuid="+uuid+")");
            }
         }else{
            tv.reloadNode();
         }
      }
   }else if(EResultCommand.TreeParentRefresh == name){
      var tv = MO.RGlobal.get('catalog.tree');
      if(tv){
         var fn = tv.focusNode;
         if(fn){
            tv.reloadNode(fn.parentNode);
         }
      }
   }else if(EResultCommand.PageRedirect == name){
      var action = command.get('action');
      var page = top.MO.RContext.context(command.get('page'));
      if(action){
         page += '?do=' + action;
      }
      fmMain.action = page;
      fmMain.target = '';
      fmMain.submit();
   }
}
MO.FDuiResultConsole_checkService = function FDuiResultConsole_checkService(config){
   var o = this;
   if(config){
      if(!MO.Console.find(MO.FMessageConsole).checkResult(new MO.TMessageArg(config))){
         return false;
      }
      var cmdsNode = config.find('Commands');
      if(cmdsNode && cmdsNode.nodes && cmdsNode.nodes.count){
         for(var n=0; n<cmdsNode.nodes.count; n++){
            var node = cmdsNode.node(n);
            if(node.isName('Command')){
               o.executeCommand(node);
            }
         }
      }
      MO.Console.find(MO.FFocusConsole).restoreFocus();
   }
   return true;
}
MO.FDuiResultConsole_checkEvent = function FDuiResultConsole_checkEvent(event){
   var o = this;
   var xconfig = event.root;
   if(xconfig){
      var resultCd = xconfig.get('result_cd');
      if(resultCd == 'success'){
         return true;
      }
      var messageCd = xconfig.get('message_cd');
      var xmessages = xconfig.find('Messages');
      if(xmessages){
         var count = xmessages.nodeCount();
         for(var i = 0; i < count; i++){
            var xmessage = xmessages.node(i);
            if(xmessage.isName('Message')){
               var code = xmessage.get('code');
               var message = xmessage.get('message');
               var description = xmessage.get('description');
               MO.Console.find(MO.FDuiMessageConsole).showError(code, message, description);
               return false;
            }
         }
      }
   }
   return true;
}
MO.FDuiWindowConsole = function FDuiWindowConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd      = MO.EScope.Local;
   o._activeWindow = null;
   o._windows      = null;
   o.construct    = MO.FDuiWindowConsole_construct;
   o.create       = MO.FDuiWindowConsole_create;
   o.find         = MO.FDuiWindowConsole_find;
   return this;
}
MO.FDuiWindowConsole_construct = function FDuiWindowConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._windows = new MO.TDictionary();
}
MO.FDuiWindowConsole_create = function FDuiWindowConsole_create(clazz){
   var o = this;
   var instance = MO.Class.create(clazz);
   instance.buildDefine(MO.Window._hDocument);
   return instance;
}
MO.FDuiWindowConsole_find = function FDuiWindowConsole_find(clazz){
   var o = this;
   var name = MO.Class.name(clazz);
   var find = o._windows.get(name);
   if(find){
      return find;
   }
   var instance = o.create(clazz);
   o._windows.set(name, instance);
   return instance;
}
MO.FDuiWindowConsole_loadDefine = function FDuiWindowConsole_loadDefine(name){
   if(name == null){
      return null;
   }
   var config = this.defines.find(name);
   if(config == null){
      var doc = new MO.TXmlDocument();
      var root = doc.root();
      var action = root.create('Action');
      action.value = 'window.config.load';
      root.create('Window', 'name', name);
      var cnn = new MO.TXmlCnn();
      var doc = cnn.syncSend('window.xml', doc);
      doc.root();
   }
   if(!config){
      return MO.Logger.fatal(this, 'loadDefine', 'Not find window define: ' + sWinName);
   }
   return config;
}
MO.FDuiWindowConsole_dump = function FDuiWindowConsole_dump(){
   var sDump = this.className;
   sDump += '\n\nDefine:\n' + this.m_oDefinePool.dump();
   sDump += '\n\nWindow:\n' + this.windowList.dump();
   return sDump;
}
MO.FDuiWindowConsole_clear = function FDuiWindowConsole_clear(){
   this.focusWinCtl = null;
   this._activeWindow = null;
   this.activeForm = null;
   this.activeControl = null;
   this.m_oDefinePool = new FList();
   var nSize = this.windowList.size();
   for(var n=nSize-1; n>=0; n--){
      this.windowList.value(n).release();
   }
   this.windowList = new FList();
   IEngine.process(this, this.EVENT_CLOSEALL);
}
MO.FDuiWindowConsole_hideAll = function FDuiWindowConsole_hideAll(oExpWin, bDisplay){
   var nSize = this.windowList.size();
   for(var n=nSize-1; n>=0; n--){
      var oWin = this.windowList.value(n);
      if(oWin != oExpWin){
         oWin.hide(bDisplay);
      }
   }
}
MO.FDuiWindowConsole_setMaxWindow = function FDuiWindowConsole_setMaxWindow(oWin){
   this.maxFlag = true;
   this.hideAll(oWin);
}
MO.FDuiWindowConsole_restore = function FDuiWindowConsole_restore(){
   var nSize = this.windowList.size();
   this.hideAll(null, true);
   for(var n=0; n<nSize; n++){
      var oWin = this.windowList.value(n);
      if(oWin.maxFlag){
         this.windowList.value(n).restore();
      }
   }
   this.maxFlag = false;
}
MO.FDuiWindowConsole_initialize = function FDuiWindowConsole_initialize(oCtWin){
   this.clientWindow = oCtWin;
}
MO.FDuiWindowConsole_hasWindow = function FDuiWindowConsole_hasWindow(){
   return !this.windowList.isEmpty();
}
MO.FDuiWindowConsole_focus = function FDuiWindowConsole_focus(oWinCtl){
   this.focusWinCtl = oWinCtl;
   if(this.maxFlag){
      oWinCtl.show();
      this.hideAll(oWinCtl, true)
      oWinCtl.max();
   }
}
MO.FDuiWindowConsole_saveDefine = function FDuiWindowConsole_saveDefine(oWinNode, oClientWindow){
   if(oClientWindow){this.clientWindow.document.body.disabled = true;}
   if(!oWinNode){
      return LoggerUtil.fatal(this, 'saveDefine', 'Window node is null.');
   }
   var sFullName = oWinNode.attribute('full_name');
   if(!sFullName){
      return ILogger.fatal(this, 'saveDefine', 'Window full name is null.');
   }
   var oDoc = new FXMLDocument('Config');
   var oActNode = oDoc.rootNode.createNode('Action');
   oActNode.setAttribute('name', 'define.save');
   oDoc.rootNode.push(oWinNode);
   var oConnect = new FXMLConnect(SystemManager.serviceURL('window'), oDoc);
   oConnect.clientWindow = oClientWindow;
   oConnect.onload = this.onSaveDefineAfter;
   oConnect.send();
}
MO.FDuiWindowConsole_onEventMousedown = function FDuiWindowConsole_onEventMousedown(oCWin){
}
MO.FDuiWindowConsole_onSaveDefineAfter = function FDuiWindowConsole_onSaveDefineAfter(){
   ILogger.info(this, 'saveDefine', 'Save Ok.');
   if(this.clientWindow){this.clientWindow.document.body.disabled = false;}
}
MO.FDuiWindowConsole_releaseWindowName = function FDuiWindowConsole_releaseWindowName(sWinName){
   var oWin = this.windowList.removeName(sWinName);
   IEngine.process(this, this.EVENT_CLOSE, oWin);
}
MO.FDuiWindowConsole_releaseWindow = function FDuiWindowConsole_releaseWindow(oWin){
   this.windowList.removeValue(oWin);
   IEngine.process(this, this.EVENT_CLOSE, oWin);
}
MO.FDuiWindowConsole_doFrameAction = function FDuiWindowConsole_doFrameAction(sAction){
   if(!this.activeForm){
      return ILogger.fatal(this, 'doFrameAction', 'Not active form!');
   }
   this.activeForm.doAction(sAction);
}
MO.FDuiWindowConsole_doProperties = function FDuiWindowConsole_doProperties(){
   TrackManager.push(this, 'Do properties.');
   if(!WindowManager.focusWinCtl){return;}
   var arParams = new Array();
   arParams['WindowManager'] = WindowManager;
   window.showModalDialog(SystemManager.actionURL('window'), arParams, 'dialogWidth:500px;dialogHeight:360px;resizable:no;scroll:no;edge:sunken');
}
MO.FDuiWindowConsole_onEventRelease = function FDuiWindowConsole_onEventRelease(oCWin){
   if(oCWin){
      var oSubWin = null;
      var oRemoves = new Array();
      var nSize = this.windowList.size();
      for(var n=0; n<nSize; n++){
         oSubWin = this.windowList.value(n);
         if(oSubWin.clientWindow == oCWin){
            if(oSubWin == MoveManager.focusBorder){
               MoveManager.focus(null);
            }
            oRemoves.push(oSubWin);
         }
      }
      for(var n=0; n<oRemoves.length; n++){
         this.windowList.removeValue(oRemoves[n]);
      }
   }else{
      this.windowList.clear();
      MoveManager.focus(null);
   }
}
MO.FDuiWorkspaceApplication = function FDuiWorkspaceApplication(o){
   o = MO.Class.inherits(this, o, MO.FApplication);
   o._workspaces      = MO.Class.register(o, new MO.AGetter('_workspaces'));
   o._activeWorkspace = MO.Class.register(o, new MO.AGetter('_activeWorkspace'));
   o.onProcess        = MO.FDuiWorkspaceApplication_onProcess;
   o.selectWorkspace  = MO.FDuiWorkspaceApplication_selectWorkspace;
   o.processResize    = MO.FDuiWorkspaceApplication_processResize;
   o.processEvent     = MO.FDuiWorkspaceApplication_processEvent;
   return o;
}
MO.FDuiWorkspaceApplication_onProcess = function FDuiWorkspaceApplication_onProcess(){
   var o = this;
   var workspace = o._activeWorkspace
   if(workspace){
      workspace.psFrame();
   }
}
MO.FDuiWorkspaceApplication_selectWorkspace = function FDuiWorkspaceApplication_selectWorkspace(clazz){
   var o = this;
   var workspace = o._activeWorkspace = MO.Class.create(clazz);
   return workspace;
}
MO.FDuiWorkspaceApplication_processResize = function FDuiWorkspaceApplication_processResize(){
   var o = this;
}
MO.FDuiWorkspaceApplication_processEvent = function FDuiWorkspaceApplication_processEvent(event){
   var o = this;
}
MO.FDuiWorkspaceConsole = function FDuiWorkspaceConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd         = MO.EScope.Local;
   o._activeWorkspace = null;
   o._workspaces      = null;
   o._thread          = null;
   o._interval        = 100;
   o.onResize         = MO.FDuiWorkspaceConsole_onResize;
   o.onProcess        = MO.FDuiWorkspaceConsole_onProcess;
   o.construct        = MO.FDuiWorkspaceConsole_construct;
   o.active           = MO.FDuiWorkspaceConsole_active;
   o.resize           = MO.FDuiWorkspaceConsole_resize;
   o.dispose          = MO.FDuiWorkspaceConsole_dispose;
   return o;
}
MO.FDuiWorkspaceConsole_onResize = function FDuiWorkspaceConsole_onResize(p){
   var o = this;
   var workspace = o._activeWorkspace;
   if(workspace){
      workspace.psResize();
   }
}
MO.FDuiWorkspaceConsole_onProcess = function FDuiWorkspaceConsole_onProcess(event){
   var o = this;
   var workspace = o._activeWorkspace;
   if(workspace){
      workspace.psFrame(event);
   }
}
MO.FDuiWorkspaceConsole_construct = function FDuiWorkspaceConsole_construct(){
   var o = this;
   o.__base.FConsole.construct.call(o);
   o._workspaces = new MO.TDictionary();
   var thread = o._thread = MO.Class.create(MO.FThread);
   thread.setInterval(o._interval);
   thread.addProcessListener(o, o.onProcess);
   MO.Console.find(MO.FThreadConsole).start(thread);
   MO.RWindow.lsnsResize.register(o, o.onResize);
}
MO.FDuiWorkspaceConsole_active = function FDuiWorkspaceConsole_active(p){
   this._activeWorkspace = p;
}
MO.FDuiWorkspaceConsole_resize = function FDuiWorkspaceConsole_resize(){
   this.onResize();
}
MO.FDuiWorkspaceConsole_dispose = function FDuiWorkspaceConsole_dispose(){
   var o = this;
   o.__base.FConsole.dispose.call(o);
}
MO.EUiSplitStyle = new function EUiSplitStyle(){
   var o = this;
   o.Normal     = 'N';
   o.BulgeLine  = 'B';
   o.HollowLine = 'H';
   return o;
}
MO.MDuiShadow = function MDuiShadow(o){
   o = MO.Class.inherits(this, o);
   o._hShadow   = null;
   o.show       = MO.MDuiShadow_show;
   o.hide       = MO.MDuiShadow_hide;
   o.setVisible = MO.MDuiShadow_setVisible;
   return o;
}
MO.MDuiShadow_show = function MDuiShadow_show(v){
   var o = this;
   if(!o._hShadow){
      o._hShadow = MO.Window.Builder.createDiv(o._hPanel, 'RWindow_Shadow');
   }
   o._hShadow.style.zIndex = MO.RDuiLayer.next();
   if(v == false){
      o.hide();
   }else{
      var hs = o.panel(MO.EPanel.Shadow);
      if(hs){
         var s = o._hShadow.style;
         s.pixelLeft = hs.offsetLeft + 2;
         s.pixelTop = hs.offsetTop + 2;
         s.pixelWidth = hs.offsetWidth;
         s.pixelHeight = hs.offsetHeight;
         s.display = 'block';
      }
      var hp = o.panel(MO.EPanel.Panel);
      if(hp){
         hp.style.zIndex = MO.RDuiLayer.next();
      }
   }
}
MO.MDuiShadow_hide = function MDuiShadow_hide(){
   var o = this;
   if(o._hShadow){
      o._hShadow.style.display = 'none';
   }
}
MO.MDuiShadow_setVisible = function MDuiShadow_setVisible(p){
   var o = this;
   if(p){
      if(!o._hShadow){
         o._hShadow = MO.Window.Builder.createDiv(o._hPanel, 'RWindow_Shadow');
      }
      o._hShadow.style.zIndex = MO.RDuiLayer.next();
      var hs = o.panel(MO.EPanel.Shadow);
      if(hs){
         var r = MO.Window.Html.rect(hs);
         var s = o._hShadow.style;
         s.pixelLeft = r.left + 2;
         s.pixelTop = r.top + 2;
         s.pixelWidth = r.width();
         s.pixelHeight = r.height();
         s.display = 'block';
      }
      var hp = o.panel(MO.EPanel.Panel);
      if(hp){
         hp.style.zIndex = MO.RDuiLayer.next();
      }
   }else{
      if(o._hShadow){
         o._hShadow.style.display = 'none';
      }
   }
}
MO.SDuiColorBar = function SDuiColorBar(){
   var o = this;
   o._draging          = false;
   o.control           = null;
   o.typeCd            = null;
   o.minValue          = 0;
   o.maxValue          = 1;
   o.hPanel            = null;
   o.hColorPanel       = null;
   o.hColorImage       = null;
   o.hSlidePanel       = null;
   o.hSlideForm        = null;
   o.hSlideRowUL       = null;
   o.hSlideRowUM       = null;
   o.hSlideRowUR       = null;
   o.hSlideRowML       = null;
   o.hSlideRowMM       = null;
   o.hSlideRowMR       = null;
   o.hSlideRowBL       = null;
   o.hSlideRowBM       = null;
   o.hSlideRowBR       = null;
   o.hInputPanel       = null;
   o.hInput            = null;
   o.onMouseDown       = MO.SDuiColorBar_onMouseDown;
   o.onMouseMove       = MO.SDuiColorBar_onMouseMove;
   o.onMouseUp         = MO.SDuiColorBar_onMouseUp;
   o.build             = MO.SDuiColorBar_build;
   o.setRange          = MO.SDuiColorBar_setRange;
   o.setColorValue     = MO.SDuiColorBar_setColorValue;
   o.setSlideValue     = MO.SDuiColorBar_setSlideValue;
   o.setInputValue     = MO.SDuiColorBar_setInputValue;
   o.convertSlide      = MO.SDuiColorBar_convertSlide;
   o.convertGet        = MO.SDuiColorBar_convertGet;
   o.convertSet        = MO.SDuiColorBar_convertSet;
   o.get               = MO.SDuiColorBar_get;
   o.set               = MO.SDuiColorBar_set;
   o.changeSlide       = MO.SDuiColorBar_changeSlide;
   o.changeInputEdit   = MO.SDuiColorBar_changeInputEdit;
   o.changeInputChange = MO.SDuiColorBar_changeInputChange;
   return o;
}
MO.SDuiColorBar_onMouseDown = function SDuiColorBar_onMouseDown(p){
   var o = this;
   var x = MO.Window.Html.clientX(p.hSource, o.hSlideForm) + p.offsetX;
   o._draging = true;
   MO.Window.setOptionSelect(false);
   o.changeSlide(x);
}
MO.SDuiColorBar_onMouseMove = function SDuiColorBar_onMouseMove(p){
   var o = this;
   if(o._draging){
      var x = MO.Window.Html.clientX(p.hSource, o.hSlideForm) + p.offsetX;
      o.changeSlide(x);
   }
}
MO.SDuiColorBar_onMouseUp = function SDuiColorBar_onMouseUp(p){
   var o = this;
   o._draging = false;
   MO.Window.setOptionSelect(true);
}
MO.SDuiColorBar_build = function SDuiColorBar_build(p){
   var o = this;
   var c = o.control;
   var hcf = o.hPanel;
   var hr = MO.Window.Builder.appendTableRow(hcf);
   var hc = o.hColorPanel = MO.Window.Builder.appendTableCell(hr);
   hc.width = 13;
   hc.style.padding = '2px';
   o.hColorImage = MO.Window.Builder.appendIcon(hc, null, 'n', 11, 11);
   var hc = o.hSlidePanel = MO.Window.Builder.appendTableCell(hr);
   hc.style.padding = '2px';
   hc.vAlign = 'middle';
   var hf = o.hSlideForm = MO.Window.Builder.appendTable(hc);
   hf.__pbar = o;
   hf.width = '100%';
   hf.style.height = '9px';
   hf.style.cursor = 'pointer';
   var hl = o.hSlideRowUp = MO.Window.Builder.appendTableRow(hf);
   hl.style.height = '3px';
   o.hSlideRowUL = MO.Window.Builder.appendTableCell(hl);
   var hc = o.hSlideRowUM = MO.Window.Builder.appendTableCell(hl);
   hc.width = 2;
   hc.bgColor = '#EEEEEE';
   var hc = o.hSlideRowUR = MO.Window.Builder.appendTableCell(hl);
   var hl = o.hSlideRow = MO.Window.Builder.appendTableRow(hf);
   hl.style.height = '3px';
   var hc = o.hSlideRowML = MO.Window.Builder.appendTableCell(hl);
   hc.bgColor = '#999999';
   var hc = o.hSlideRowMM = MO.Window.Builder.appendTableCell(hl);
   hc.width = 2;
   hc.bgColor = '#EEEEEE';
   var hc = o.hSlideRowMR = MO.Window.Builder.appendTableCell(hl);
   hc.bgColor = '#999999';
   var hl = o.hSlideRowDown = MO.Window.Builder.appendTableRow(hf);
   hl.style.height = '3px';
   o.hSlideRowBL = MO.Window.Builder.appendTableCell(hl);
   var hc = o.hSlideRowBM = MO.Window.Builder.appendTableCell(hl);
   hc.width = 2;
   hc.bgColor = '#EEEEEE';
   o.hSlideRowBR = MO.Window.Builder.appendTableCell(hl);
   var hc = o.hInputPanel = MO.Window.Builder.appendTableCell(hr, o.control.styleName('InputPanel'));
   hc.width = 36;
   var he = o.hInput = MO.Window.Builder.appendEdit(hc, o.control.styleName('Input'));
   he._pbar = o;
   c.attachEvent('onInputKeyPress', he, c.onInputKeyPress);
   c.attachEvent('onInputEdit', he, c.onInputEdit);
   c.attachEvent('onInputChange', he, c.onInputChange);
}
MO.SDuiColorBar_setRange = function SDuiColorBar_setRange(i, a){
   var o = this;
   if(i != null){
      o.minValue = i;
   }
   if(a != null){
      o.maxValue = a;
   }
}
MO.SDuiColorBar_setColorValue = function SDuiColorBar_setColorValue(p){
   var o = this;
   var v = MO.Lang.Hex.format(p, 2);
   var c = null;
   switch(o.typeCd){
      case 'red':
         c = v + '0000';
         break;
      case 'green':
         c = '00' + v + '00';
         break;
      case 'blue':
         c = '0000' + v;
         break;
      default:
         throw new MO.TError(o, 'Invalid type.');
   }
   o.hColorImage.style.backgroundColor = '#' + c;
}
MO.SDuiColorBar_setSlideValue = function SDuiColorBar_setSlideValue(p){
   var o = this;
   var w = o.hSlideForm.offsetWidth;
   if(w > 0){
      var v = p / o.maxValue * w;
      o.hSlideRowML.width = MO.Lang.Integer.toRange(v, 1, w - 1);
   }
}
MO.SDuiColorBar_setInputValue = function SDuiColorBar_setInputValue(p){
   this.hInput.value = p;
}
MO.SDuiColorBar_convertGet = function SDuiColorBar_convertGet(p){
   return p;
}
MO.SDuiColorBar_get = function SDuiColorBar_get(){
   var o = this;
   return o.convertGet(o.hInput.value);
}
MO.SDuiColorBar_convertSet = function SDuiColorBar_convertSet(p){
   return p;
}
MO.SDuiColorBar_set = function SDuiColorBar_set(p){
   var o = this;
   var v = o.convertSet(p);
   o.setColorValue(v);
   o.setSlideValue(v);
   o.setInputValue(v);
}
MO.SDuiColorBar_convertSlide = function SDuiColorBar_convertSlide(p){
   return p;
}
MO.SDuiColorBar_changeSlide = function SDuiColorBar_changeSlide(p){
   var o = this;
   var w = o.hSlideForm.offsetWidth - 3;
   var v = o.convertSlide(p / w);
   o.set(v);
   o.control.refreshValue();
}
MO.SDuiColorBar_changeInputEdit = function SDuiColorBar_changeInputEdit(){
   var o = this;
   var v = o.convertGet(o.hInput.value);
   o.setColorValue(v);
   o.setSlideValue(v);
   o.control.refreshValue();
}
MO.SDuiColorBar_changeInputChange = function SDuiColorBar_changeInputChange(){
   var o = this;
   var v = o.convertGet(o.hInput.value);
   o.set(v);
   o.control.refreshValue();
}
MO.SDuiColorChannel = function SDuiColorChannel(){
   var o = this;
   MO.SDuiColorBar.call(o);
   o.minValue      = 0;
   o.maxValue      = 255;
   o.setInputValue = MO.SDuiColorChannel_setInputValue;
   o.convertGet    = MO.SDuiColorChannel_convertGet;
   o.convertSet    = MO.SDuiColorChannel_convertSet;
   return o;
}
MO.SDuiColorChannel_setInputValue = function SDuiColorChannel_setInputValue(p){
   var o = this;
   var v = MO.Integer.toRange(p, o.minValue, o.maxValue);
   var t = MO.Integer.format(v);
   var h = o.hInput;
   if(h.value != t){
      h.value = t;
   }
}
MO.SDuiColorChannel_convertGet = function SDuiColorChannel_convertGet(p){
   var o = this;
   var v = MO.Lang.Integer.parse(MO.Lang.String.nvl(p, '0'));
   return MO.Lang.Integer.toRange(v, o.minValue, o.maxValue) / 255;
}
MO.SDuiColorChannel_convertSet = function SDuiColorChannel_convertSet(p){
   return parseInt(p * 255);
}
MO.SDuiColorPower = function SDuiColorPower(){
   var o = this;
   MO.SDuiColorBar.call(o);
   o.minValue      = 0;
   o.maxValue      = 4;
   o.setColorValue = MO.SDuiColorPower_setColorValue;
   o.setSlideValue = MO.SDuiColorPower_setSlideValue;
   o.setInputValue = MO.SDuiColorPower_setInputValue;
   o.convertGet    = MO.SDuiColorPower_convertGet;
   o.convertSet    = MO.SDuiColorPower_convertSet;
   o.convertSlide  = MO.SDuiColorPower_convertSlide;
   return o;
}
MO.SDuiColorPower_setColorValue = function SDuiColorPower_setColorValue(p){
   var o = this;
   var v = MO.Lang.Integer.toRange(parseInt(p * 255), 0, 255);
   var s = MO.Lang.Hex.format(v, 2);
   o.hColorImage.style.backgroundColor = '#' + s + s + s;
}
MO.SDuiColorPower_setSlideValue = function SDuiColorPower_setSlideValue(p){
   var o = this;
   var w = o.hSlideForm.offsetWidth;
   if(w > 0){
      var v = p / o.maxValue * w;
      o.hSlideRowML.width = MO.Lang.Integer.toRange(v, 1, w - 1);
   }
}
MO.SDuiColorPower_setInputValue = function SDuiColorPower_setInputValue(p){
   var o = this;
   var h = o.hInput;
   var v = MO.Lang.Float.toRange(p, o.minValue, o.maxValue);
   var t = MO.Lang.Float.format(v, 0, null, 2, null);
   if(h.value != t){
      h.value = t;
   }
}
MO.SDuiColorPower_convertGet = function SDuiColorPower_convertGet(p){
   return MO.Lang.Float.parse(p);
}
MO.SDuiColorPower_convertSet = function SDuiColorPower_convertSet(p){
   return p;
}
MO.SDuiColorPower_convertSlide = function SDuiColorPower_convertSlide(p){
   return p * this.maxValue;
}
MO.SDuiSlide = function SDuiSlide(){
   var o = this;
   o._draging      = false;
   o.control       = null;
   o.stepValue     = 1;
   o.minValue      = 0;
   o.maxValue      = 100;
   o.range         = 100;
   o.hPanel        = null;
   o.hSlidePanel   = null;
   o.hSlideForm    = null;
   o.hSlideU       = null;
   o.hSlideUL      = null;
   o.hSlideUM      = null;
   o.hSlideUR      = null;
   o.hSlideM       = null;
   o.hSlideML      = null;
   o.hSlideMM      = null;
   o.hSlideMR      = null;
   o.hSlideB       = null;
   o.hSlideBL      = null;
   o.hSlideBM      = null;
   o.hSlideBR      = null;
   o.onMouseDown   = MO.SDuiSlide_onMouseDown;
   o.onMouseMove   = MO.SDuiSlide_onMouseMove;
   o.onMouseUp     = MO.SDuiSlide_onMouseUp;
   o.onSlideChange = MO.Method.empty;
   o.build         = MO.SDuiSlide_build;
   o.setRange      = MO.SDuiSlide_setRange;
   o.setSlideValue = MO.SDuiSlide_setSlideValue;
   o.get           = MO.SDuiSlide_get;
   o.set           = MO.SDuiSlide_set;
   o.changeSlide   = MO.SDuiSlide_changeSlide;
   return o;
}
MO.SDuiSlide_onMouseDown = function SDuiSlide_onMouseDown(p){
   var o = this;
   var x = MO.Window.Html.clientX(p.hSource, o.hSlideForm) + p.offsetX;
   o._draging = true;
   MO.Window.setOptionSelect(false);
   o.changeSlide(x);
}
MO.SDuiSlide_onMouseMove = function SDuiSlide_onMouseMove(p){
   var o = this;
   if(o._draging){
      var x = MO.Window.Html.clientX(p.hSource, o.hSlideForm) + p.offsetX;
      o.changeSlide(x);
   }
}
MO.SDuiSlide_onMouseUp = function SDuiSlide_onMouseUp(p){
   var o = this;
   o._draging = false;
   MO.Window.setOptionSelect(true);
}
MO.SDuiSlide_build = function SDuiSlide_build(p){
   var o = this;
   var c = o.control;
   var hf = o.hSlideForm = MO.Window.Builder.appendTable(o.hPanel);
   hf.__pcapture = o;
   hf.width = '100%';
   hf.style.height = '9px';
   hf.style.cursor = 'pointer';
   var hl = o.hSlideU = MO.Window.Builder.appendTableRow(hf);
   hl.style.height = '3px';
   o.hSlideUL = MO.Window.Builder.appendTableCell(hl);
   var hc = o.hSlideUM = MO.Window.Builder.appendTableCell(hl);
   hc.width = 2;
   hc.bgColor = '#EEEEEE';
   var hc = o.hSlideUR = MO.Window.Builder.appendTableCell(hl);
   var hl = o.hSlideM = MO.Window.Builder.appendTableRow(hf);
   hl.style.height = '3px';
   var hc = o.hSlideML = MO.Window.Builder.appendTableCell(hl);
   hc.bgColor = '#999999';
   var hc = o.hSlideMM = MO.Window.Builder.appendTableCell(hl);
   hc.width = 2;
   hc.bgColor = '#EEEEEE';
   var hc = o.hSlideMR = MO.Window.Builder.appendTableCell(hl);
   hc.bgColor = '#999999';
   var hl = o.hSlideB = MO.Window.Builder.appendTableRow(hf);
   hl.style.height = '3px';
   o.hSlideBL = MO.Window.Builder.appendTableCell(hl);
   var hc = o.hSlideBM = MO.Window.Builder.appendTableCell(hl);
   hc.width = 2;
   hc.bgColor = '#EEEEEE';
   o.hSlideBR = MO.Window.Builder.appendTableCell(hl);
}
MO.SDuiSlide_setRange = function SDuiSlide_setRange(i, a){
   var o = this;
   if(i != null){
      o.minValue = MO.Lang.Float.parse(i);
   }
   if(a != null){
      o.maxValue = MO.Lang.Float.parse(a);
   }
   o.range = o.maxValue - o.minValue;
}
MO.SDuiSlide_setSlideValue = function SDuiSlide_setSlideValue(p){
   var o = this;
   var w = o.hSlideForm.offsetWidth;
   if(w > 0){
      var v = (p - o.minValue) / o.range * w;
      o.hSlideML.width = MO.Lang.Integer.toRange(v, 1, w - 1);
   }
}
MO.SDuiSlide_get = function SDuiSlide_get(){
   var o = this;
   var w = o.hSlideForm.offsetWidth - 3;
   var v = (p / w) * o.range + o.minValue;
   return v;
}
MO.SDuiSlide_set = function SDuiSlide_set(p){
   var o = this;
   o.setSlideValue(p);
}
MO.SDuiSlide_changeSlide = function SDuiSlide_changeSlide(p){
   var o = this;
   var c = o.control;
   var w = o.hSlideForm.offsetWidth - 3;
   o.hSlideML.width = MO.Lang.Integer.toRange(p, 1, w - 1);
   var v = (p / w) * o.range + o.minValue;
   v = MO.Lang.Float.toRange(v, o.minValue, o.maxValue);
   o.onSlideChange.call(c, v);
}
MO.FDuiButton = function FDuiButton(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MListenerClick);
   o._labelPositionCd   = MO.Class.register(o, new MO.APtyString('_labelPositionCd'), MO.EUiPosition.Left);
   o._icon              = MO.Class.register(o, new MO.APtyString('_icon'));
   o._action            = MO.Class.register(o, new MO.APtyString('_action'));
   o._listenersClick    = MO.Class.register(o, new MO.AListener('_listenersClick', MO.EEvent.Click));
   o._stylePanel        = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleForm         = MO.Class.register(o, new MO.AStyle('_styleForm'));
   o._styleIcon         = MO.Class.register(o, new MO.AStyle('_styleIcon'));
   o._styleLabel        = MO.Class.register(o, new MO.AStyle('_styleLabel'));
   o._styleIconPanel    = MO.Class.register(o, new MO.AStyleIcon('_styleIconPanel'));
   o._hForm             = null;
   o._hLeftButton       = null;
   o._hMiddleButton     = null;
   o._hRightButton      = null;
   o._hLabelPanel       = null;
   o._hLabel            = null;
   o.onBuild            = MO.FDuiButton_onBuild;
   o.onClick            = MO.Class.register(o, new MO.AEventClick('onClick'), MO.FDuiButton_onClick);
   o.doClick            = MO.FDuiButton_doClick;
   return o;
}
MO.FDuiButton_onBuild = function FDuiButton_onBuild(e){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, e);
   var hPanel = o._hPanel;
   o.attachEvent('onClick', hPanel);
   var hForm = MO.Window.Builder.appendTable(hPanel, o.styleName('Form'));
   var hLine  = MO.Window.Builder.appendTableRow(hForm);
   if(o._icon){
      var hCell = MO.Window.Builder.appendTableCell(hLine);
      hCell.width = 16;
      o._hIcon = MO.Window.Builder.appendIcon(hCell, o.styleName('Icon'), o._icon);
   }
   if(o.label){
      var hCell = MO.Window.Builder.appendTableCell(hLine);
      hCell.align = 'center';
      hCell.noWrap = true;
      o._hLabel = MO.Window.Builder.appendText(hCell, o.styleName('Label'), o._label);
   }
}
MO.FDuiButton_onButtonEnter = function FDuiButton_onButtonEnter(e){
   var o = this;
   if(!o._disabled){
     o._hLeftButton.background = o.styleIconPath('HoverLeft');
     o._hMiddleButton.background = o.styleIconPath('HoverMiddle');
     o._hRightButton.background = o.styleIconPath('HoverRight');
   }
}
MO.FDuiButton_onButtonLeave = function FDuiButton_onButtonLeave(e){
   var o = this;
   if(!o._disabled){
     o._hLeftButton.background = o.styleIconPath('ButtonLeft');
     o._hMiddleButton.background = o.styleIconPath('Button');
     o._hRightButton.background = o.styleIconPath('ButtonRight');
   }
}
MO.FDuiButton_onButtonDown = function FDuiButton_onButtonDown(e){
   var o = this;
   if(!o._disabled){
     o._hLeftButton.background = o.styleIconPath('PressLeft');
     o._hMiddleButton.background = o.styleIconPath('PressMiddle');
     o._hRightButton.background = o.styleIconPath('PressRight');
   }
}
MO.FDuiButton_onButtonUp = function FDuiButton_onButtonUp(e){
   var o = this;
   if(!o._disabled){
     o._hLeftButton.background = o.styleIconPath('ButtonLeft');
     o._hMiddleButton.background = o.styleIconPath('Button');
     o._hRightButton.background = o.styleIconPath('ButtonRight');
   }
}
MO.FDuiButton_onButtonClickDelay = function FDuiButton_onButtonClickDelay(e){
   var o = this;
   o.__process = false;
   o.clickActive.status = MO.EActive.Sleep;
}
MO.FDuiButton_onClick = function FDuiButton_onClick(e){
   this.doClick();
}
MO.FDuiButton_onButtonClick = function FDuiButton_onButtonClick(e){
   this.doClick();
}
MO.FDuiButton_oeMode = function FDuiButton_oeMode(e){
   var o = this;
   o.__base.FDuiControl.oeMode.call(o, e);
   o.__base.MDisplay.oeMode.call(o, e);
   return MO.EEventStatus.Stop;
}
MO.FDuiButton_setLabel = function FDuiButton_setLabel(v){
   var o = this;
   o.label = v;
   o._hLabel.innerText = v;
   o._hLabel.noWrap = true;
}
MO.FDuiButton_setLabelColor = function FDuiButton_setLabelColor(c){
   var o = this;
   o._hLabel.style.color = '#FF0000';
}
MO.FDuiButton_setLabelStyle = function FDuiButton_setLabelStyle(c, w, s){
   var o = this;
   o._hLabel.style.color = '#FF0000';
   o._hLabel.style.fontWeight = 'bold';
   o._hLabel.style.fontSize = '12';
}
MO.FDuiButton_doClick = function FDuiButton_doClick(){
   var o = this;
   if(!o._disabled){
      MO.Console.find(MO.FDuiFocusConsole).blur();
      var event = new MO.SClickEvent(o);
      o.processClickListener(event);
      event.dispose();
      if(o._action){
         eval(o._action);
      }
   }
}
MO.FDuiButton_dispose = function FDuiButton_dispose(){
   var o = this;
   o._hForm = null;
   o._hFormEnd = null;
   o._hLabel = null;
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiCalendar = function FDuiCalendar(o){
   o = MO.Class.inherits(this, o, MO.FEditControl, MO.MEditBorder, MO.MDropable, MO.MDescCalendar);
   o.editFormat  = MO.Lang.Date.DisplayFormat;
   o.editHour     = MO.Class.register(o, new MO.TPtyBoolSet('editHour', 'editDate', MO.EDateTimeMode.Hour));
   o.editMinute   = MO.Class.register(o, new MO.TPtyBoolSet('editMinute', 'editDate', MO.EDateTimeMode.Minute));
   o.editSecond   = MO.Class.register(o, new MO.TPtyBoolSet('editSecond', 'editDate', MO.EDateTimeMode.Second));
   o.borderStyle = MO.EUiBorder.RoundDrop;
   o.date        = null;
   o.lsnEditEnd  = null;
   o.hForm       = null;
   o.hDrop       = null;
   o.hForm       = null;
   o.onKeyPress  = MO.FDuiCalendar_onKeyPress;
   o.onDataClick   = MO.FDuiCalendar_onDataClick;
   o.refreshStyle  = MO.FDuiCalendar_refreshStyle;
   o.onEditEnd   = MO.FDuiCalendar_onEditEnd;
   o.onBuildEdit = MO.FDuiCalendar_onBuildEdit;
   o.construct   = MO.FDuiCalendar_construct;
   o.formatValue = MO.FDuiCalendar_formatValue;
   o.formatText  = MO.FDuiCalendar_formatText;
   o.drop        = MO.FDuiCalendar_drop;
   o.doBlur      = MO.FDuiCalendar_doBlur;
   return o;
}
MO.FDuiCalendar_onDataClick = function FDuiCalendar_onDataClick(){
   var o = this;
   if(!o.editCheck){
      o.drop();
   }
}
MO.FDuiCalendar_onBuildEdit = function FDuiCalendar_onBuildEdit(b){
   var o = this;
   var htb = MO.Window.Builder.appendTable(b.hPanel);
    htb.style.tableLayout = 'fixed';
    var hr = o.hEdit = htb.insertRow();
   o.onBuildChange(hr.insertCell())
   var hc = hr.insertCell();
   var h = o.hEdit = MO.Window.Builder.appendEdit(hc, o.style('Edit'));
   h.style.disabled = 'true';
   if(o.editLength){
      h.maxLength = o.editLength;
   }
}
MO.FDuiCalendar_onEditEnd = function FDuiCalendar_onEditEnd(e){
   var o = this;
   if(e){
      o.set(e.get());
      o._invalidText = o.validText(o.text());
      o.refreshStyle();
   }
   o.onDataEditEnd(o);
}
MO.FDuiCalendar_onKeyPress = function FDuiCalendar_onKeyPress(e){
   if(!MO.Lang.String.inChars(String.fromCharCode(e.keyCode), MO.Lang.Date.Chars)){
      RKey.eventClear(e);
   }
}
MO.FDuiCalendar_construct = function FDuiCalendar_construct(){
   var o = this;
   o.base.FEditControl.construct.call(o);
   o.date = new TDate();
   o.lsnEditEnd = new TListener(o, o.onEditEnd);
}
MO.FDuiCalendar_formatValue = function FDuiCalendar_formatValue(t){
   if(t){
      var o = this;
      if(t.toLowerCase() == '@now'){
         o.date.now();
         return MO.Lang.Date.formatDate(o.date);
      }else{
         MO.Lang.Date.autoParse(o.date, t);
         return MO.Lang.Date.formatDate(o.date);
      }
   }
   return MO.Lang.String.nvl(t);
}
MO.FDuiCalendar_formatText = function FDuiCalendar_formatText(value){
   if(value){
      var o = this;
      MO.Lang.Date.autoParse(o.date, value);
      return MO.Lang.Date.formatDate(o.date, o.editFormat);
   }
   return MO.Lang.String.nvl(value);
}
MO.FDuiCalendar_refreshStyle = function FDuiCalendar_refreshStyle(){
   var o = this;
   o.base.FEditControl.refreshStyle.call(o);
   if(!o.editCheck){
      o.hEdit.readOnly = 'true';
   }
}
MO.FDuiCalendar_drop = function FDuiCalendar_drop(){
   var o = this;
   if(o.canDrop() && o._editable){
      var e = o.editor = RConsole.find(FEditConsole).focus(o, FDuiCalendarEditor, o.name);
      e.set(o.reget(), o.editFormat);
      e.setHourEditable(o.editHour);
      e.setMinuteEditable(o.editMinute);
      e.setSecondEditable(o.editSecond);
      e.lsnEditEnd = o.lsnEditEnd;
      e.show();
   }
}
MO.FDuiCalendar_doBlur = function FDuiCalendar_doBlur(){
   var o = this;
   o.base.FEditControl.doBlur.call(o);
   if(o.editor){
      o.editor.hide();
   }
}
MO.FDuiCalendarEditor = function FDuiCalendarEditor(o){
   o = MO.Class.inherits(this, o, MO.FDropEditor, MO.MDuiFocusLooper);
   o.editFormat       = null;
   o.dataValue        = null;
   o.date             = new MO.TDate();
   o.hTitlePanel      = null;
   o.hYearPrior       = null;
   o.hYear            = null;
   o.hYearNext        = null;
   o.hMonthPrior      = null;
   o.hMonth           = null;
   o.hMonthNext       = null;
   o.hDaysPanel       = null;
   o.hTimePanel       = null;
   o.hTime            = null;
   o.hNow             = null;
   o.hOk              = null;
   o.hCancel          = null;
   o.hHour            = null;
   o.hMinute          = null;
   o.hSecond          = null;
   o.hSelect          = null;
   o.editFormat       = MO.MO.Lang.Date.DisplayFormat;
   o.dateOrg          = new MO.TDate();
   o.dateOrgValue     = null;
   o.dayCells         = new MO.TList();
   o.focusObject      = null;
   o.skipBlur         = false;
   o.styleYearMonth   = MO.Class.register(o, new TStyle('YearMonth'));
   o.styleButton      = MO.Class.register(o, new TStyle('Button'));
   o.styleButtonHover = MO.Class.register(o, new TStyle('ButtonHover'));
   o.styleDay         = MO.Class.register(o, new TStyle('Day'));
   o.styleDaySel      = MO.Class.register(o, new TStyle('DaySel'));
   o.styleDayHover    = MO.Class.register(o, new TStyle('DayHover'));
   o.styleDayFree     = MO.Class.register(o, new TStyle('DayFree'));
   o.styleDayNone     = MO.Class.register(o, new TStyle('DayNone'));
   o.styleTitlePanel  = MO.Class.register(o, new TStyle('TitlePanel'));
   o.styleDaysPanel   = MO.Class.register(o, new TStyle('DaysPanel'));
   o.styleTimePanel   = MO.Class.register(o, new TStyle('TimePanel'));
   o.styleMonth       = MO.Class.register(o, new TStyle('Year'));
   o.styleMonth       = MO.Class.register(o, new TStyle('Month'));
   o.styleWeek        = MO.Class.register(o, new TStyle('Week'));
   o.styleTime        = MO.Class.register(o, new TStyle('Time'));
   o.styleHour        = MO.Class.register(o, new TStyle('Hour'));
   o.styleSplit       = MO.Class.register(o, new TStyle('Split'));
   o.styleMinute      = MO.Class.register(o, new TStyle('Minute'));
   o.styleSecond      = MO.Class.register(o, new TStyle('Second'));
   o.styleNow         = MO.Class.register(o, new TStyle('Now'));
   o.styleOk          = MO.Class.register(o, new TStyle('Ok'));
   o.onDaySelect      = MO.Class.register(o, new HMouseDown('onDaySelect'), FDuiCalendarEditor_onDaySelect);
   o.onButtonNow      = MO.Class.register(o, new HMouseDown('onButtonNow'), FDuiCalendarEditor_onButtonNow);
   o.onDateKeyDown    = MO.Class.register(o, new HKeyDown('onDateKeyDown'), FDuiCalendarEditor_onDateKeyDown);
   o.onDateBlur       = MO.Class.register(o, new HBlur('onDateBlur'), FDuiCalendarEditor_onDateBlur);
   o.onTimeBlur       = MO.Class.register(o, new HBlur('onTimeBlur'), FDuiCalendarEditor_onTimeBlur);
   o.onTimeClick      = MO.Class.register(o, new HClick('onTimeClick'), FDuiCalendarEditor_onTimeClick);
   o.onDayDbClick     = MO.Class.register(o, new HDoubleClick('onDayDbClick'), FDuiCalendarEditor_onDayDbClick);
   o.onDayEnter       = MO.Class.register(o, new HMouseEnter('onDayEnter'),    FDuiCalendarEditor_onDayEnter);
   o.onDayOut         = MO.Class.register(o, new HMouseOut('onDayOut'),        FDuiCalendarEditor_onDayOut);
   o.onButtonOk       = MO.Class.register(o, new HMouseDown('onButtonOk'),     FDuiCalendarEditor_onButtonOk);
   o.onButtonCancel   = MO.Class.register(o, new HMouseDown('onButtonCancel'), FDuiCalendarEditor_onButtonCancel);
   o.onButtonOver     = MO.Class.register(o, new HMouseEnter('onButtonOver'),  FDuiCalendarEditor_onButtonOver);
   o.onButtonOut      = MO.Class.register(o, new HMouseOut('onButtonOut'),     FDuiCalendarEditor_onButtonOut);
   o.onMdown          = MO.Class.register(o, new HMouseDown('onMdown'),        FDuiCalendarEditor_onMdown);
   o.onMup            = MO.Class.register(o, new HMouseUp('onMup'),            FDuiCalendarEditor_onMup);
   o.onBuildDrop      = MO.FDuiCalendarEditor_onBuildDrop;
   o.show             = MO.FDuiCalendarEditor_show;
   o.setMinuteEditable = MO.FDuiCalendarEditor_setMinuteEditable;
   o.setHourEditable   = MO.FDuiCalendarEditor_setHourEditable;
   o.setSecondEditable = MO.FDuiCalendarEditor_setSecondEditable;
   o.buildTitle       = MO.FDuiCalendarEditor_buildTitle;
   o.buildDays        = MO.FDuiCalendarEditor_buildDays;
   o.buildTime        = MO.FDuiCalendarEditor_buildTime;
   o.testBlur         = MO.FDuiCalendarEditor_testBlur;
   o.get              = MO.FDuiCalendarEditor_get;
   o.set              = MO.FDuiCalendarEditor_set;
   o.setDate          = MO.FDuiCalendarEditor_setDate;
   o.storeChange      = MO.FDuiCalendarEditor_storeChange;
   o.daySelectLsns    = new MO.TListeners();
   o.onBuildButton    = MO.FDuiCalendarEditor_onBuildButton;
   o.ohKdown          = MO.FDuiCalendarEditor_ohKdown;
   o.ohDaysChange     = MO.FDuiCalendarEditor_ohDaysChange;
   o.ohKeyCheck       = MO.FDuiCalendarEditor_ohKeyCheck;
   o.onDateAction     = MO.FDuiCalendarEditor_onDateAction;
   o.panel            = MO.FDuiCalendarEditor_panel;
   o.dispose          = MO.FDuiCalendarEditor_dispose;
   return o;
}
MO.FDuiCalendarEditor_onTimeClick = function FDuiCalendarEditor_onTimeClick(e){
   var o = this;
   var h = e.hSource;
   if(h.editAble){
      h.select();
   }
}
MO.FDuiCalendarEditor_onTimeBlur = function FDuiCalendarEditor_onTimeBlur(e){
   var o = this;
    var h = e.hSource;
    if(h == o.hHour){
       h.value = Math.min(MO.Lang.Integer.parse(h.value), 23);
    }else if(h == o.hMinute){
       h.value = Math.min(MO.Lang.Integer.parse(h.value), 59);
    }else if(h == o.hSecond){
       h.value = Math.min(MO.Lang.Integer.parse(h.value), 59);
    }
    o.storeChange();
    o.setDate(o.date);
}
MO.FDuiCalendarEditor_onDayDbClick = function FDuiCalendarEditor_onDayDbClick(e){
   var o = e.source
   if(MO.Class.isClass(o, FDuiCalendarEditor) && 0 != MO.Lang.Integer.parse(e.hSource.innerText)){
      o.date.setDay(e.hSource.innerText);
      o.dataValue = MO.Lang.Date.formatDate(o.date);
      o.editEnd();
   }
}
MO.FDuiCalendarEditor_onDaySelect = function FDuiCalendarEditor_onDaySelect(e){
   var o = this;
   if(MO.Class.isClass(o, FDuiCalendarEditor) && 0 != MO.Lang.Integer.parse(e.hSource.innerText)){
     var h = e.hSource;
     if(o.hSelect){
        o.hSelect.style.border = '1 solid #FFFFFF';
     };
     o.hSelect = h;
     h.style.border = '1 solid #2BD6F0';
      o.date.setDay(h.innerText);
   }
}
MO.FDuiCalendarEditor_onButtonNow = function FDuiCalendarEditor_onButtonNow(e){
   var o = e.source;
   if(MO.Class.isClass(o, FDuiCalendarEditor)){
      o.dataValue = MO.Lang.Date.format();
      o.editEnd();
   }
}
MO.FDuiCalendarEditor_onDateKeyDown = function FDuiCalendarEditor_onDateKeyDown(e, he){
   var o = this;
   var h = e.hSource;
   var v = h.value;
   if(EKey.Enter == e.keyCode){
      o.storeChange();
      o.setDate(o.date);
   }else if(EKey.Up == e.keyCode){
      if(h == o.hYear){
         o.hYear.value = MO.Lang.Integer.parse(o.hYear.value) + 1;
      }else if(h == o.hMonth){
         o.hMonth.value = MO.Lang.Integer.parse(o.hMonth.value) + 1;
      }else if(h == o.hHour){
         if(o.hHour.editAble){
           if(v < 23){
             h.value = MO.Lang.Integer.parse(h.value) + 1;
          }
         }
     }else if(h == o.hMinute){
       if(o.hMinute.editAble){
          if(v < 59){
            h.value = MO.Lang.Integer.parse(h.value) + 1;
         }
        }
     }else{
        if(o.hSecond.editAble){
           if(v < 59){
             h.value = MO.Lang.Integer.parse(h.value) + 1;
           }
         }
     }
      o.storeChange();
      o.setDate(o.date);
   }else if(EKey.Down == e.keyCode){
      if(h == o.hYear){
         o.hYear.value = MO.Lang.Integer.parse(o.hYear.value) - 1;
      }else if(h == o.hMonth){
         o.hMonth.value = MO.Lang.Integer.parse(o.hMonth.value) - 1;
      }else if(h == o.hHour){
        if(o.hHour.editAble){
            if(v > 0){
              h.value = MO.Lang.Integer.parse(h.value) - 1;
           }
        }
     }else if(h == o.hMinute){
        if(o.hMinute.editAble){
           if(v > 0){
               h.value = MO.Lang.Integer.parse(h.value) - 1;
            }
        }
     }else{
        if(o.hSecond.editAble){
           if(v > 0){
              h.value = MO.Lang.Integer.parse(h.value) - 1;
           }
        }
     }
      o.storeChange();
      o.setDate(o.date);
      h.select();
   }else{
     if(h == o.hHour || h == o.hMinute || h == o.hSecond){
        if(h.editAble){
           RKey.fixChars(he, MO.Lang.Date.Chars);
        }else{
           he.keyCode = 0;
           he.returnValue = false;
        }
     }else{
        RKey.fixChars(he, MO.Lang.Date.Chars);
     }
   }
}
MO.FDuiCalendarEditor_onDateBlur = function FDuiCalendarEditor_onDateBlur(){
   var o = this;
   o.storeChange();
   o.setDate(o.date);
}
MO.FDuiCalendarEditor_onBuildDrop = function FDuiCalendarEditor_onBuildDrop(){
   var o = this;
   o.hDatePanel = MO.Window.Builder.appendTable(o.hDropPanel);
   o.hDropPanel.align = 'center';
   o.hDatePanel.width = '100%';
   var hRow = o.hDatePanel.insertRow();
   var hCell = o.hTitlePanel = hRow.insertCell();
   hCell.colSpan = 2;
   hCell.className = o.style('TitlePanel');
   o.buildTitle();
   var hRow = o.hDatePanel.insertRow();
   var hCell = o.hDaysPanel = hRow.insertCell();
   hCell.colSpan = 2;
   hCell.className = o.style('DaysPanel');
   o.buildDays();
   var hRow = o.hDatePanel.insertRow();
   var hCell = o.hTimePanel = hRow.insertCell();
   o.buildTime();
   o.pushFocus(o.hYear);
   o.pushFocus(o.hMonth);
}
MO.FDuiCalendarEditor_show = function FDuiCalendarEditor_show(v){
   var o = this;
   o.base.FDropEditor.show.call(o, v);
   var hp = o.hPanel;
   var hbf = o.hBorderForm;
   var s = o.source;
   var r = s.getEditRange();
   hp.style.pixelLeft = r.x;
   hp.style.pixelTop = r.y + r.height;
   hp.style.pixelWidth = 273;
   o.base.MShadow.show.call(o);
}
MO.FDuiCalendarEditor_buildTitle = function FDuiCalendarEditor_buildTitle(){
   var o = this;
   var hTab = MO.Window.Builder.appendTable(o.hTitlePanel, null, 0, 5, 1);
   hTab.align = 'center';
   hTab.width = '100%';
   hTab.style.filter = "progid:DXImageTransform.Microsoft.Gradient(startColorStr='#E5FAFE', endColorStr='#FFFFFF', gradientType='0')";
   var hRow = hTab.insertRow();
   var hCel = hRow.insertCell();
   var h = o.hYearPrior = MO.Window.Builder.append(hCel, 'SPAN', o.style('Button'));
   h.link = o;
   h.linkAction = o.onDateAction;
   h.innerText = '3';
   o.attachEvent("onButtonOver",h);
   o.attachEvent("onButtonOut",h);
   o.attachEvent("onMdown",h);
   o.attachEvent("onMup",h);
   var hCel = hRow.insertCell();
   var h = o.hYear = MO.Window.Builder.append(hCel, 'INPUT', o.style('Year'));
   h.maxLength = '4';
   o.attachEvent('onDateBlur', h, o.onDateBlur);
   o.attachEvent('onDateKeyDown', h, o.onDateKeyDown);
   var hCel = hRow.insertCell();
   hCel.innerText = RContext.get('FDuiCalendarEditor:year');
   hCel.className = o.style('YearMonth');
   var hCel = hRow.insertCell();
   var h = o.hYearNext = MO.Window.Builder.append(hCel, 'SPAN', o.style('Button'));
   h.link = o;
   h.linkAction = o.onDateAction;
   h.innerText = '4';
   o.attachEvent("onButtonOver",h);
   o.attachEvent("onButtonOut",h);
   o.attachEvent("onMdown",h);
   o.attachEvent("onMup",h);
   var hCell = hRow.insertCell();
   hCell.width='10';
   var hCel = hRow.insertCell();
   var h = o.hMonthPrior = MO.Window.Builder.append(hCel, 'SPAN', o.style('Button'));
   h.link = o;
   h.linkAction = o.onDateAction;
   h.innerText = '3';
   o.attachEvent("onButtonOver",h);
   o.attachEvent("onButtonOut",h);
   o.attachEvent("onMdown",h);
   o.attachEvent("onMup",h);
   var hCel = hRow.insertCell();
   var h = o.hMonth = MO.Window.Builder.append(hCel, 'INPUT', o.style('Month'));
   h.maxLength = '2';
   o.attachEvent('onDateBlur', h, o.onDateBlur);
   o.attachEvent('onDateKeyDown', h, o.onDateKeyDown);
   var hCel = hRow.insertCell();
   hCel.innerText = RContext.get('FDuiCalendarEditor:month');
   hCel.className = o.style('YearMonth');
   var hCel = hRow.insertCell();
   var h = o.hMonthNext = MO.Window.Builder.append(hCel, 'SPAN', o.style('Button'));
   h.link = o;
   h.linkAction = o.onDateAction;
   h.innerText = '4';
   o.attachEvent("onButtonOver",h);
   o.attachEvent("onButtonOut",h);
   o.attachEvent("onMdown", h);
   o.attachEvent("onMup", h);
}
MO.FDuiCalendarEditor_buildDays = function FDuiCalendarEditor_buildDays(){
   var o = this;
   var hTab = MO.Window.Builder.appendTable(o.hDaysPanel, null, 0, 0, 1);
   hTab.width = '100%';
   var weekDays = RContext.get('FDuiCalendarEditor:weekdays').split(',');
   var count = weekDays.length;
   var hWeekRow = hTab.insertRow();
   for(var n=0; n<count; n++){
      var h = hWeekRow.insertCell();
      h.className = o.style('Week');
      h.align = 'center';
      h.innerText = weekDays[n];
   }
   for(var n=0; n<6; n++){
      var hRow = hTab.insertRow();
      for(var i=0; i<count; i++){
         var h = hRow.insertCell();
         h.link = o;
         h.className = o.style('DayNone');
         o.attachEvent("onDayEnter", h);
         o.attachEvent("onDayOut", h);
         o.attachEvent("onDaySelect", h);
         o.attachEvent("onDayDbClick", h);
         h.innerText = '.';
         o.dayCells.push(h);
      }
   }
}
MO.FDuiCalendarEditor_buildTime = function FDuiCalendarEditor_buildTime(){
   var o = this;
   var hTab = MO.Window.Builder.appendTable(o.hTimePanel, null, 0, 1, 1);
   var ht = o.hTimePanel;
   ht.style.filter = "progid:DXImageTransform.Microsoft.Gradient(startColorStr='#FFFFFF', endColorStr='#E5FAFE', gradientType='0')";
   var hRow = hTab.insertRow();
   var hb1 = hRow.insertCell();
   hb1.width = 5;
   var hl = hRow.insertCell();
   hl.width = 50;
   hl.style.color = '#1F8FB7';
   hl.style.fontWeight = 'BOLD';
   hl.innerText='时间:';
   var hc = hRow.insertCell();
   var hb = MO.Window.Builder.appendTable(hc, null, 0, 0, 0);
   hc.style.border = '1 solid #2BD6F0';
   hc.style.backgroundColor = '#FFFFFF';
   var hr = hb.insertRow();
   var hh =hr.insertCell();
   var hHour = o.hHour = MO.Window.Builder.appendEdit(hh, o.style('Hour'));
   hHour.maxLength = 2;
   o.attachEvent("onTimeClick", hHour);
   o.attachEvent("onDateKeyDown", hHour, o.onDateKeyDown);
   o.attachEvent("onTimeBlur", hHour, o.onTimeBlur);
   var hs1 = hr.insertCell();
   hs1.innerText = ':';
   var hm = hr.insertCell();
   var hMinute = o.hMinute = MO.Window.Builder.appendEdit(hm, o.style('Minute'));
   hMinute.maxLength = 2;
   o.attachEvent("onTimeClick", hMinute);
   o.attachEvent("onDateKeyDown", hMinute, o.onDateKeyDown);
   o.attachEvent("onTimeBlur", hMinute, o.onTimeBlur);
   var hs2 = hr.insertCell();
   hs2.innerText = ':';
   var hs = hr.insertCell();
   var hSecond = o.hSecond = MO.Window.Builder.appendEdit(hs, o.style('Second'));
   hSecond.maxLength = 2;
   o.attachEvent("onTimeClick", hSecond);
   o.attachEvent("onDateKeyDown", hSecond, o.onDateKeyDown);
   o.attachEvent("onTimeBlur", hSecond, o.onTimeBlur);
   var hb2 = hRow.insertCell();
   hb2.width = 50;
   var hn = hRow.insertCell();
   hn.style.display = 'none';
   var hNow = o.hNow = MO.Window.Builder.append(hn, 'SPAN', o.style('Now'));
   hNow.style.width = 50;
   hn.style.border='1 solid #2BD6F0';
   hNow.innerText = RContext.get('FDuiCalendarEditor:now');
   hNow.style.display = 'none';
   hNow.link = o;
   o.attachEvent("onButtonNow", hNow);
   var hc = hRow.insertCell();
   var hCl = o.hCancel = MO.Window.Builder.append(hc, 'SPAN', o.style('Ok'));
   hCl.style.width = 50;
   hc.style.border='1 solid #2BD6F0';
   hCl.link = o;
   o.attachEvent("onButtonCancel", hCl);
   hCl.innerText = RContext.get('FDuiCalendarEditor:cancel');
   var ho = hRow.insertCell();
   var hOk = o.hOk = MO.Window.Builder.append(ho, 'SPAN', o.style('Ok'));
   hOk.style.width = 50;
   ho.style.border='1 solid #2BD6F0';
   hOk.link = o;
   o.attachEvent("onButtonOk", hOk);
   hOk.innerText = RContext.get('FDuiCalendarEditor:ok');
}
MO.FDuiCalendarEditor_testBlur = function FDuiCalendarEditor_testBlur(c){
   return this.source != c;
}
MO.FDuiCalendarEditor_get = function FDuiCalendarEditor_get(){
   return this.dataValue;
}
MO.FDuiCalendarEditor_set = function FDuiCalendarEditor_set(value, format){
   var o = this;
   o.changed = false;
   o.skipBlur = 0;
   o.dataValue = value;
   o.dateOrgValue = value;
   o.editFormat = format;
   MO.Lang.Date.parse(o.date, value);
   MO.Lang.Date.parse(o.dateOrg, value);
   if(!value){
      o.date.now();
      MO.Lang.Date.parse(o.date, value);
      MO.Lang.Date.parse(o.dateOrg, value);
   }
   o.setDate(o.date);
}
MO.FDuiCalendarEditor_setDate = function FDuiCalendarEditor_setDate(date){
   var o = this;
   o.hYear.value = date.year;
   o.hMonth.value = date.month;
   o.hHour.value = MO.Lang.String.lpad(date.hour, 2, '0');
   o.hMinute.value = MO.Lang.String.lpad(date.minute, 2, '0');
   o.hSecond.value = MO.Lang.String.lpad(date.second, 2,'0');
   var selDay = date.day;
   if(!(o.dateOrg.year == date.year && o.dateOrg.month == date.month)){
      selDay = -1;
   }
   if(o.hSelect){
      o.hSelect.style.border='1 solid #FFFFFF';
   }
   var monthWeekDay = this.date.monthWeekDay();
   var monthDays = this.date.monthDays();
   var weekDay = monthWeekDay;
   for(var n=0; n<o.dayCells.count; n++){
      var h = o.dayCells.get(n);
      if(n<monthWeekDay){
         h.className = o.style('DayNone');
         h.innerText = '.'
      }else if(n < monthDays+monthWeekDay){
         if(weekDay == 7){
            weekDay = 0;
         }
         var day = n-monthWeekDay+1;
         if(day == selDay){
            h.className = o.style('DaySel');
            h.isCurrent = true;
            o.hSelect = h;
            h.style.border = '1 solid #2BD6F0';
         }else{
            h.isFree = (weekDay==0 || weekDay==6);
            h.className = h.isFree ? o.style('DayFree') : o.style('Day');
            h.isCurrent = false;
         }
         h.innerText = day;
         weekDay++;
      }else{
         h.className = o.style('DayNone');
         h.innerText = '.'
      }
   }
}
MO.FDuiCalendarEditor_setHourEditable = function FDuiCalendarEditor_setHourEditable(v){
   var o = this;
   if(!v){
      o.hHour.value = '00';
      o.hHour.style.cursor='default';
      o.hHour.style.color='gray';
      o.hHour.editAble = false;
   }else{
      o.hHour.editAble = true;
   }
}
MO.FDuiCalendarEditor_setMinuteEditable = function FDuiCalendarEditor_setMinuteEditable(v){
   var o = this;
   if(!v){
      o.hMinute.value = '00';
      o.hMinute.style.cursor='default';
      o.hMinute.style.color='gray';
      o.hMinute.editAble = false;
   }else{
      o.hMinute.editAble = true;
   }
}
MO.FDuiCalendarEditor_setSecondEditable = function FDuiCalendarEditor_setSecondEditable(v){
   var o = this;
   if(!v){
      o.hSecond.value = '00';
      o.hSecond.style.cursor='default';
      o.hSecond.style.color='gray';
      o.hSecond.editAble = false;
   }else{
      o.hSecond.editAble = true;
   }
}
MO.FDuiCalendarEditor_storeChange = function FDuiCalendarEditor_storeChange(){
   var o = this;
   o.date.setYear(o.hYear.value);
   o.date.setMonth(o.hMonth.value);
   o.date.setHour(Math.min(MO.Lang.Integer.parse(o.hHour.value), 23));
   o.date.setMinute(Math.min(MO.Lang.Integer.parse(o.hMinute.value), 59));
   o.date.setSecond(Math.min(MO.Lang.Integer.parse(o.hSecond.value), 59));
}
MO.FDuiCalendarEditor_onBuildButton = function FDuiCalendarEditor_onBuildButton(){
   var o = this;
}
MO.FDuiCalendarEditor_onMdown = function FDuiCalendarEditor_onMdown(e){
   var o = e.source;
   if(MO.Class.isClass(o, FDuiCalendarEditor)){
      o.isSkipBlur = true;
      if(e.hSource.linkAction){
         e.hSource.linkAction.call(o, e.hSource);
      }
   }
}
MO.FDuiCalendarEditor_onMup = function FDuiCalendarEditor_onMup(e){
   var o = e.source;
   if(MO.Class.isClass(o, FDuiCalendarEditor)){
      var f = o.focusObject;
      if(f && f.focus && f.select){
         f.focus();
         f.select();
      }
   }
}
MO.FDuiCalendarEditor_ohKdown = function FDuiCalendarEditor_ohKdown(){
   var o = this.link;
   if(MO.Class.isClass(o, FDuiCalendarEditor)){
      var e = RWindow.event(this);
      if(EKey.Esc == e.keyCode){
         o.dataValue = o.dateOrgValue;
         o.editStatus = EEditStatus.Cancel;
         o.endEdit();
      }else if(event.ctrlKey && EKey.Enter == e.keyCode){
         o.storeChange();
         o.editStatus = EEditStatus.Ok;
         o.endEdit();
      }else if(EKey.Enter == e.keyCode){
         o.storeChange();
         o.setDate(o.date);
      }else if(EKey.Tab == e.keyCode){
         o.isSkipBlur = true;
         if(e.shiftKey){
            o.focusPrior();
         }else{
            o.focusNext();
         }
         e.returnValue = 0;
      }
   }
}
MO.FDuiCalendarEditor_onButtonOver = function FDuiCalendarEditor_onButtonOver(e){
   var o = e.source;
   if(MO.Class.isClass(o, FDuiCalendarEditor)){
      e.hSource.className = o.style('ButtonHover');
   }
}
MO.FDuiCalendarEditor_onButtonOut = function FDuiCalendarEditor_onButtonOut(e){
   var o = e.source;
   if(MO.Class.isClass(o, FDuiCalendarEditor)){
      e.hSource.className = o.style('Button');
   }
}
MO.FDuiCalendarEditor_onButtonOk = function FDuiCalendarEditor_onButtonOk(e){
   var o = e.source;
   if(MO.Class.isClass(o, FDuiCalendarEditor)){
      o.editStatus = EEditStatus.Ok;
      o.dataValue = MO.Lang.Date.formatDate(o.date);
      o.editEnd();
   }
}
MO.FDuiCalendarEditor_onButtonCancel = function FDuiCalendarEditor_onButtonCancel(e) {
   var o = e.source;
   if(MO.Class.isClass(o, FDuiCalendarEditor)){
    o.editStatus = EEditStatus.Cancel;
     o.dataValue = '';
     o.editEnd();
   }
}
MO.FDuiCalendarEditor_ohDaysChange = function FDuiCalendarEditor_ohDaysChange(){
   var o = this.link;
   if(MO.Class.isClass(o, FDuiCalendarEditor)){
      o.date.setYear(o.hYear.value);
      o.date.setMonth(o.hMonth.value);
      o.setDate(o.date);
   }
}
MO.FDuiCalendarEditor_ohKeyCheck = function FDuiCalendarEditor_ohKeyCheck(){
   var e = RWindow.event(this)
   if(!MO.Lang.String.inChars(String.fromCharCode(e.keyCode), MO.Lang.Date.Chars)){
      e.keyCode = 0;
   }
}
MO.FDuiCalendarEditor_onDayEnter = function FDuiCalendarEditor_onDayEnter(e){
   var o = e.source;
   if(MO.Class.isClass(o, FDuiCalendarEditor) && e.hSource.innerText != '.'){
      if(!e.hSource.isCurrent){
         e.hSource.className = o.style('DayHover');
      }
   }
}
MO.FDuiCalendarEditor_onDayOut = function FDuiCalendarEditor_onDayOut(e){
   var o = e.source;
   if(MO.Class.isClass(o, FDuiCalendarEditor) && e.hSource.innerText != '.'){
      if(!e.hSource.isCurrent){
         e.hSource.className = e.hSource.isFree ? o.style('DayFree') : o.style('Day');
      }
   }
}
MO.FDuiCalendarEditor_onDateAction = function FDuiCalendarEditor_onDateAction(h){
   var o = this;
   if(o.hYearPrior == h){
      o.date.addYear(-1);
      o.setDate(o.date);
      if(o.focusObject != this.hYear){
         o.focusObject = this.hYear;
         o.hYear.focus();
         o.hYear.select();
      }
   }else if(o.hYearNext == h){
      o.date.addYear(1);
      o.setDate(o.date);
      if(o.focusObject != this.hYear){
         o.focusObject = this.hYear;
         o.hYear.focus();
         o.hYear.select();
      }
   }else if(o.hMonthPrior == h){
      this.date.addMonth(-1);
      o.setDate(o.date);
      if(o.focusObject != this.hMonth){
         o.focusObject = this.hMonth;
         o.hMonth.focus();
      }
   }else if(o.hMonthNext == h){
      this.date.addMonth(1);
      o.setDate(o.date);
      if(o.focusObject != this.hMonth){
         o.focusObject = this.hMonth;
         o.hMonth.focus();
      }
   }
}
MO.FDuiCalendarEditor_panel = function FDuiCalendarEditor_panel(type){
   var o = this;
   if(EPanel.Shadow == type){
      return o.hPanel;
   }
   return o.base.FDropEditor.panel.call(o, type);
}
MO.FDuiCalendarEditor_dispose = function FDuiCalendarEditor_dispose(){
   var o = this;
   o.base.FDropEditor.dispose.call(o);
   o.hDatePanel = null;
   o.hDropPanel = null;
   o.hTitlePanel = null;
   o.hOk = null;
   o.hNow = null;
   o.hButtonPanel = null;
   o.hMonthNext = null;
   o.hYear = null;
   o.hMonth = null;
   o.hTime = null;
   o.hTimePanel = null;
}
MO.FDuiCheck = function FDuiCheck(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl, MO.MUiPropertyCheck);
   o._optionValueStyle     = false;
   o._listenersDataChanged = MO.Class.register(o, new MO.AListener('_listenersDataChanged', MO.EEvent.DataChanged));
   o._hInput               = null;
   o.onBuildEditValue      = MO.FDuiCheck_onBuildEditValue;
   o.onInputClick          = MO.Class.register(o, new MO.AEventClick('onInputClick'), MO.FDuiCheck_onInputClick);
   o.construct             = MO.FDuiCheck_construct;
   o.get                   = MO.FDuiCheck_get;
   o.set                   = MO.FDuiCheck_set;
   o.text                  = MO.FDuiCheck_text;
   o.refreshValue          = MO.FDuiCheck_refreshValue;
   o.refreshStyle          = MO.FDuiCheck_refreshStyle;
   o.dispose               = MO.FDuiCheck_dispose;
   return o;
}
MO.FDuiCheck_onBuildEditValue = function FDuiCheck_onBuildEditValue(p){
   var o = this;
   var hInput = o._hInput = MO.Window.Builder.appendCheck(o._hValuePanel);
   hInput.style.cursor = 'hand';
   o.attachEvent('onInputClick', hInput);
}
MO.FDuiCheck_onInputClick = function FDuiCheck_onInputClick(p){
   this.refreshValue();
}
MO.FDuiCheck_construct = function FDuiCheck_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._editSize.set(60, 20);
}
MO.FDuiCheck_get = function FDuiCheck_get(){
   var o = this;
   var value = o._hInput.checked;
   return value;
}
MO.FDuiCheck_set = function FDuiCheck_set(value){
   var o = this;
   var dataValue = MO.Lang.Boolean.parse(value);
   o._dataValue = dataValue;
   o._hInput.checked = dataValue;
   o.changeSet(false);
}
MO.FDuiCheck_text = function FDuiCheck_text(){
   var o = this;
   var value = this.get();
   var text = MO.Lang.Boolean.toString(value, o._valueTrue, o._valueFalse);
   return text;
}
MO.FDuiCheck_refreshValue = function FDuiCheck_refreshValue(){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiCheck_refreshStyle = function FDuiCheck_refreshStyle(){
   var o = this;
   o.__base.FDuiEditControl.refreshStyle.call(o);
   o._hInput.readOnly = !o._statusValueEdit;
}
MO.FDuiCheck_dispose = function FDuiCheck_dispose(){
   var o = this
   o._inputSize = MO.Lang.Object.dispose(o._inputSize);
   o.__base.FDuiEditControl.dispose.call(o);
}
MO.FDuiCheckPicker = function FDuiCheckPicker(o){
   o = MO.Class.inherits(this, o, MO.FEditControl, MO.MEditBorder, MO.MDescCheckPicker, MO.MDropable);
   o.stIconDropSelect = MO.Class.register(o, new MO.AStyleIcon('DropSelect'));
   o.items            = new MO.TItems();
   o.borderStyle      = MO.EUiBorder.RoundDrop;
   o.onBuildEdit      = MO.FDuiCheckPicker_onBuildEdit;
   o.onEditEnd        = MO.FDuiCheckPicker_onEditEnd;
   o.onDataKeyDown    = MO.FDuiCheckPicker_onDataKeyDown;
   o.loadConfig       = MO.FDuiCheckPicker_loadConfig;
   o.formatValue      = MO.FDuiCheckPicker_formatValue;
   o.validText        = MO.FDuiCheckPicker_validText;
   o.formatText       = MO.FDuiCheckPicker_formatText;
   o.refreshStyle     = MO.FDuiCheckPicker_refreshStyle;
   o.drop             = MO.FDuiCheckPicker_drop;
   o.dispose          = MO.FDuiCheckPicker_dispose;
   return o;
}
MO.FDuiCheckPicker_onBuildEdit = function FDuiCheckPicker_onBuildEdit(b){
   var o = this;
   var h = o.hEdit = MO.Window.Builder.appendEdit(b.hPanel, o.style('Edit'));
   if(o.editLength){
      h.maxLength = o.editLength;
   }
}
MO.FDuiCheckPicker_onEditEnd = function FDuiCheckPicker_onEditEnd(editor){
   var o = this;
   if(editor){
      o.set(editor.values);
   }
   o.onDataEditEnd(o);
}
MO.FDuiCheckPicker_loadConfig = function FDuiCheckPicker_loadConfig(c){
   var o = this;
   o.base.FEditControl.loadConfig.call(o, c);
   if(o.dataEmpty){
      o.items.create();
   }
   o.items.loadConfig(c);
   return MO.EStatus.Stop;
}
MO.FDuiCheckPicker_text = function FDuiCheckPicker_text(){
   return this.hEdit.value;
}
MO.FDuiCheckPicker_setText = function FDuiCheckPicker_setText(text){
   this.hEdit.value = text;
}
MO.FDuiCheckPicker_formatValue = function FDuiCheckPicker_formatValue(text){
   var o = this;
   if(!MO.Lang.String.isEmpty(text)){
      ta = MO.Lang.String.split(text, ',');
      var vs = new Array();
      var item = o.items.items;
      for(var n = 0; n < ta.length; n++){
         for(var m = 0; m < item.count; m++){
            var c = item.value(m);
            if(c.label == ta[n]){
               vs.push(c.value);
            }
         }
      }
      return MO.Lang.String.toUpper(vs.join());
   }else{
      return '';
   }
}
MO.FDuiCheckPicker_validText = function FDuiCheckPicker_validText(text){
   var o = this;
   if(MO.Lang.String.isEmpty(text)){
      return true;
   }
   return !MO.Lang.String.isEmpty(o.formatValue(text));
}
MO.FDuiCheckPicker_formatText = function FDuiCheckPicker_formatText(v){
   var o = this;
   if(!MO.Lang.String.isEmpty(v)){
      va = MO.Lang.String.split(v, ',');
      var vs = new Array();
      var item = o.items.items;
      for(var n = 0; n < va.length; n++){
         var t = item.values[item.indexOf(va[n])];
         if(t){
            vs.push(t.label);
         }
      }
      return MO.Lang.String.toUpper(vs.join());
   }else{
      return '';
   }
}
MO.FDuiCheckPicker_refreshStyle = function FDuiCheckPicker_refreshStyle(){
   var o = this;
   o.base.FEditControl.refreshStyle.call(o);
   o.hDrop.src = o.styleIconPath(o._hover ? 'DropSelect' : 'Drop');
}
MO.FDuiCheckPicker_drop = function FDuiCheckPicker_drop(){
   var o = this;
   if(o.canDrop() && o.canEdit && o.items.count() > 0){
      var ed = o.editor = MO.Console.find(FEditConsole).focus(o, FDuiCheckPickerEditor, o.editRefer);
      if(ed.linkControl(o)){
         ed.setItems(o.items);
         ed.set(o.reget());
      }
      ed.show();
   }
}
MO.FDuiCheckPicker_onDataKeyDown = function FDuiCheckPicker_onDataKeyDown(s, e){
   var o = this;
   o.base.FEditControl.onDataKeyDown.call(o, s, e);
   if(o.items.count()){
      if(o.editor && o.editor.source == o){
         o.editor.onEditKeyDown(s, e);
      }
   }
}
MO.FDuiCheckPicker_dispose = function FDuiCheckPicker_dispose(){
   var o = this;
   o.base.FEditControl.dispose.call(o);
   o.hEdit = MO.Lang.Html.free(o.hEdit);
}
MO.FDuiCheckPickerEditor = function FDuiCheckPickerEditor(o){
   o = MO.Class.inherits(this, o, MO.FDropEditor, MO.MShadow);
   o.MinWidth         = 120;
   o.onEditFocus      = MO.Class.register(o, new MO.HFocus('onEditFocus'));
   o.onEditBlur       = MO.Class.register(o, new MO.HBlur('onEditBlur'));
   o.stIconDropSelect = MO.Class.register(o, new MO.TStyleIcon('DropSelect'));
   o.stFlag           = MO.Class.register(o, new MO.TStyle('Flag'));
   o.stEditForm       = MO.Class.register(o, new MO.TStyle('EditForm'));
   o.pattern          = null;
   o.originItem       = null;
   o.selectItem       = null;
   o.items            = null;
   o.itemClickListener = null;
   o.values           = new Array();
   o.hBtnTextSpan     = null;
   o.onBuildDrop      = MO.FDuiCheckPickerEditor_onBuildDrop;
   o.onBuildButton    = MO.FDuiCheckPickerEditor_onBuildButton;
   o.onItemClick      = MO.FDuiCheckPickerEditor_onItemClick;
   o.onEditKeyDown    = MO.FDuiCheckPickerEditor_onEditKeyDown;
   o.construct        = MO.FDuiCheckPickerEditor_construct;
   o.set              = MO.FDuiCheckPickerEditor_set;
   o.setItems         = MO.FDuiCheckPickerEditor_setItems;
   o.select           = MO.FDuiCheckPickerEditor_select;
   o.linkControl      = MO.FDuiCheckPickerEditor_linkControl;
   o.show             = MO.FDuiCheckPickerEditor_show;
   o.hide             = MO.FDuiCheckPickerEditor_hide;
   o.dispose          = MO.FDuiCheckPickerEditor_dispose;
   return o;
}
MO.FDuiCheckPickerEditor_construct = function FDuiCheckPickerEditor_construct(){
   var o = this;
   o.itemClickListener = new TListener(o, o.onItemClick);
}
MO.FDuiCheckPickerEditor_onBuildDrop = function FDuiCheckPickerEditor_onBuildDrop(){
   var o = this;
   o.hItemsForm = MO.Window.Builder.appendTable(o.hDropPanel);
   o.hItemsForm.width = '100%';
   o.hItemsPanel = MO.Window.Builder.append(o.hItemsForm, 'TBODY');
   o.onBuildButton();
}
MO.FDuiCheckPickerEditor_onBuildButton = function FDuiCheckPickerEditor_onBuildButton(){
   var o = this;
   o.base.FDropEditor.onBuildButton.call(o);
   var h = o.hBtnTextSpan = MO.Window.Builder.newSpan(o.hButtonPanel, null);
   h.innerText = 'colse';
}
MO.FDuiCheckPickerEditor_onItemClick = function FDuiCheckPickerEditor_onItemClick(s){
   var o = this;
   s.setChecked(!s.checked);
   var ts = o.items.items;
   var cs = o.components;
   var vs = new Array();
   for(var n = 0; n < ts.count; n++){
      var c = cs.value(n);
      if(c.checked){
         vs.push(c.value);
      }
   }
   var e = o.source;
   e.set(vs.join());
}
MO.FDuiCheckPickerEditor_select = function FDuiCheckPickerEditor_select(p){
   var o = this;
   var cs = o.components;
   p = Math.min(Math.max(0, p), cs.count-1)
   for(var n=0; n<cs.count; n++){
      o.components.value(n).setChecked(n == p);
   }
   o.position = p;
}
MO.FDuiCheckPickerEditor_onEditKeyDown = function FDuiCheckPickerEditor_onEditKeyDown(s, e){
   var o = this;
   return;
}
MO.FDuiCheckPickerEditor_set = function FDuiCheckPickerEditor_set(v){
   var o = this;
   var cs = o.components;
   var cl = cs.count;
   for(var n = 0;n < cl;n++){
      cs.value(n).setChecked(false);
   }
   if(!MO.Lang.String.isEmpty(v)){
      o.values = v;
      va = MO.Lang.String.split(v, ',');
      for(var n = 0; n < va.length; n++){
         var c = cs.get(va[n]);
         if(c){
            c.setChecked(true);
         }
      }
   }
}
MO.FDuiCheckPickerEditor_setItems = function FDuiCheckPickerEditor_setItems(items){
   var o = this;
   if(o.components){
      return;
   }
   var hip = o.hItemsPanel;
   o.items = items;
   var count = items.count();
   for(var n=0; n<count; n++){
      if(n > 0){
         var hr = MO.Window.Builder.append(hip, 'TR');
         hr.height = 1;
         var hd = MO.Window.Builder.append(hr, 'TD');
         hd.colSpan = 3;
         hd.style.borderTop = '1 dashed #24c2db';
         MO.Window.Builder.appendEmpty(hd);
      }
      var t = items.get(n);
      var c = RControl.create(FSelectItem);
      c.name = t.value;
      c.lsnsClick.push(o.itemClickListener);
      c.set(t.icon, t.label, t.value);
      c.setPanel(hip);
      o.push(c);
   }
   o.position = 0;
}
MO.FDuiCheckPickerEditor_linkControl = function FDuiCheckPickerEditor_linkControl(c){
   var o = this;
   if(o.source == c){
      return false;
   }
   o.source = c;
   RLog.debug(o, 'link Panel (panel={0}, edit={1})', MO.Class.dump(c.hEditCell), MO.Class.dump(c.hEdit));
   MO.Window.Html.toRect(o.rect, c.hEditCell);
   MO.Window.Html.setPixelRect(o.hPanel, o.rect);
   o.hPanel.style.pixelTop = o.rect.bottom;
   var hbf = o.border.hForm;
   hbf.style.pixelWidth = c.editBorder.hForm.width;
   hbf.style.pixelHeight = c.editBorder.hForm.height;
   return true;
}
MO.FDuiCheckPickerEditor_show = function FDuiCheckPickerEditor_show(v){
   var o = this;
   o.base.FDropEditor.show.call(o, v);
   RConsole.find(FFocusConsole).focus(o);
   if(o.border.hForm.offsetWidth < o.MinWidth){
      o.border.hForm.style.pixelWidth = o.MinWidth;
   }
   o.base.MShadow.show.call(o, v);
   o.isSkipBlur = false;
}
MO.FDuiCheckPickerEditor_hide = function FDuiCheckPickerEditor_hide(){
   var o = this;
   o.source = null;
   o.base.FDropEditor.hide.call(o);
   o.base.MShadow.hide.call(o);
}
MO.FDuiCheckPickerEditor_dispose = function FDuiCheckPickerEditor_dispose(){
   var o = this;
   o.base.FDropEditor.dispose.call(o);
   RMemory.freeHtml(o.hPanel);
   RMemory.freeHtml(o.hItemsForm);
   RMemory.freeHtml(o.hItemsPanel);
   RMemory.freeHtml(o.hBtnTextSpan);
   RMemory.freeHtml(o.hDropPanel);
   RMemory.freeHtml(o.hButtonPanel);
   o.hPanel = null;
   o.hItemsForm = null;
   o.hItemsPanel = null;
   o.hBtnTextSpan = null;
   o.hDropPanel = null;
   o.hButtonPanel = null;
}
MO.FDuiColor = function FDuiColor(o){
   o = MO.Class.inherits(this, o, MO.FEditControl);
   o._inputSize       = MO.Class.register(o, new MO.APtySize2('_inputSize'));
   o._styleInputPanel = MO.Class.register(o, new MO.AStyle('_styleInputPanel'));
   o._styleInput      = MO.Class.register(o, new MO.AStyle('_styleInput'));
   o._hInput          = null;
   o.onBuildEditValue = MO.FDuiColor_onBuildEditValue;
   o.construct        = MO.FDuiColor_construct;
   o.get              = MO.FDuiColor_get;
   o.set              = MO.FDuiColor_set;
   return o;
}
MO.FDuiColor_oeDataLoad = function FDuiColor_oeDataLoad(p){
   var o = this;
   alert(p);
   return EEventStatus.Stop;
}
MO.FDuiColor_oeDataSave = function FDuiColor_oeDataSave(p){
   var o = this;
   return EEventStatus.Stop;
}
MO.FDuiColor_onBuildEditValue = function FDuiColor_onBuildEditValue(p){
   var o = this;
   var h = o._hValuePanel;
   h.className = o.styleName('InputPanel');
   var he = o._hInput = MO.Window.Builder.appendEdit(h, o.styleName('Input'));
   if(o._editLength){
      he.maxLength = o._editLength;
   }
}
MO.FDuiColor_construct = function FDuiColor_construct(){
   var o = this;
   o.__base.FEditControl.construct.call(o);
   o._inputSize = new SSize2(120, 0);
}
MO.FDuiColor_get = function FDuiColor_get(p){
   var o = this;
   var r = o.__base.FEditControl.get.call(o, p);
   var h = o._hInput;
   if(h){
      r = h.value;
   }
   return r;
}
MO.FDuiColor_set = function FDuiColor_set(p){
   var o = this;
   o.__base.FEditControl.set.call(o, p);
   var h = o._hInput;
   if(h){
      h.value = MO.Lang.String.nvl(p);
   }
}
MO.FDuiColor_onDataKeyDown = function FDuiColor_onDataKeyDown(s, e){
   var o = this;
   o.__base.FEditControl.onDataKeyDown.call(o, s, e);
   if(o.editCase){
      RKey.fixCase(e, o.editCase);
   }
}
MO.FDuiColor_formatValue = function FDuiColor_formatValue(v){
   var o = this;
   var r = MO.Lang.String.nvl(v);
   if(ECase.Upper == o.editCase){
      r = MO.Lang.String.toUpper(r);
   }else if(ECase.Lower == o.editCase){
      r = MO.Lang.String.toLower(r);
   }
   return r;
}
MO.FDuiColor_setText = function FDuiColor_setText(t){
   var o = this;
   if(!o.hEdit){
      return;
   }
   if('U'== o.editCase){
      o.hEdit.value = MO.Lang.String.toUpper(t);
   }else if('L'== o.editCase){
         o.hEdit.value = MO.Lang.String.toLower(t);
   }else{
      o.hEdit.value = t;
   }
   if('right' == o.editAlign ){
      o.hEdit.style.textAlign = 'right';
   }else if('left' == o.editAlign ){
      o.hEdit.style.textAlign = 'left';
   }else{
      o.hEdit.style.textAlign = 'center';
   }
}
MO.FDuiColor_validText = function FDuiColor_validText(t){
   var o = this;
   var r = o.__base.FEditControl.validText.call(o, t);
   if(!r){
      if(o.validLenmin){
         if(o.validLenmin > t.length){
            return RContext.get('MDescEdit:ValidMinLength', o.validLenmin);
         }
      }
      if(o.validLenmax){
         if(o.validLenmax < t.length){
            return RContext.get('MDescEdit:ValidMaxLength', o.validLenmax);
         }
      }
   }
   return r;
}
MO.FDuiColor_findEditor = function FDuiColor_findEditor(){
   var o = this;
   if(o.editComplete){
      var de = o.editor;
      if(!de){
         o.dsControl = o.topControl(MDataset);
         if(o.dsControl){
            de = o.editor = RConsole.find(FDuiColorConsole).focus(o, FDuiColorEditor);
         }
      }
      if(de){
         de.linkControl(o);
      }
      return o.editor;
   }
}
MO.FDuiColor_drop = function FDuiColor_drop(){
   var o = this;
   var de = o.findEditor();
   if(de){
      var t = o.reget();
      if(t.length > 0){
         if(o.finded != t){
            if(de.source != o){
               de.linkControl(o);
            }
            de.search(t);
         }
         o.finded = t;
      }
   }
}
MO.FDuiColor_clone = function FDuiColor_clone(){
   var o = this;
   var r = o._class.newInstance();
   GHtml_clone(r, o.hPanel);
   return r;
}
MO.FDuiColor_link = function FDuiColor_link(){
   var o = this;
}
MO.FDuiColor3Tpl = function FDuiColor3Tpl(o){
   o = MO.Class.inherits(this, o, MO.FEditControl, MO.MListenerDataChanged);
   o._inputSize        = MO.Class.register(o, new MO.APtySize2('_inputSize'));
   o._styleValuePanel  = MO.Class.register(o, new MO.AStyle('_styleValuePanel'));
   o._styleInput       = MO.Class.register(o, new MO.AStyle('_styleInput'));
   o._innerOriginValue = null;
   o._innerDataValue   = null;
   o._hInputRed        = null;
   o._hInputGreen      = null;
   o._hInputBlue       = null;
   o.onBuildEditValue  = MO.FDuiColor3Tpl_onBuildEditValue;
   o.onInputKeyPress   = MO.Class.register(o, new MO.AEventKeyPress('onInputKeyPress'), MO.FDuiColor3Tpl_onInputKeyPress);
   o.onInputChanged    = MO.Class.register(o, new MO.AEventInputChanged('MO.onInputChanged'), FDuiColor3Tpl_onInputChanged);
   o.construct         = MO.FDuiColor3Tpl_construct;
   o.get               = MO.FDuiColor3Tpl_get;
   o.set               = MO.FDuiColor3Tpl_set;
   return o;
}
MO.FDuiColor3Tpl_onBuildEditValue = function FDuiColor3Tpl_onBuildEditValue(p){
   var o = this;
   var h = o._hValuePanel;
   h.className = o.styleName('ValuePanel');
   var hf = o._hValueForm = MO.Window.Builder.appendTable(h);
   hf.width = '100%';
   var hl = o._hValueLine = MO.Window.Builder.appendTableRow(hf);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hl);
   o.onBuildEditChange(p);
   var hc = MO.Window.Builder.appendTableCell(hl);
   hc.style.borderRight = '1px solid #666666';
   var he = o._hInputRed = MO.Window.Builder.appendEdit(hc, o.styleName('Input'));
   o.attachEvent('onInputKeyPress', he, o.onInputKeyPress);
   o.attachEvent('onInputChanged', he, o.onInputChanged);
   var hc = MO.Window.Builder.appendTableCell(hl);
   hc.style.borderLeft = '1px solid #999999';
   hc.style.borderRight = '1px solid #666666';
   var he = o._hInputGreen = MO.Window.Builder.appendEdit(hc, o.styleName('Input'));
   o.attachEvent('onInputKeyPress', he, o.onInputKeyPress);
   o.attachEvent('onInputChanged', he, o.onInputChanged);
   var hc = MO.Window.Builder.appendTableCell(hl);
   hc.style.borderLeft = '1px solid #999999';
   var he = o._hInputBlue = MO.Window.Builder.appendEdit(hc, o.styleName('Input'));
   o.attachEvent('onInputKeyPress', he, o.onInputKeyPress);
   o.attachEvent('onInputChanged', he, o.onInputChanged);
   var hdp = o._hDropPanel = MO.Window.Builder.appendTableCell(hl);
   hdp.style.borderLeft = '1px solid #666666';
   o.onBuildEditDrop(p);
}
MO.FDuiColor3Tpl_onInputKeyPress = function FDuiColor3Tpl_onInputKeyPress(p){
   var o = this;
   var c = p.keyCode;
   if(!EKeyCode.floatCodes[c]){
      p.cancel();
   }
}
MO.FDuiColor3Tpl_onInputChanged = function FDuiColor3Tpl_onInputChanged(p){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiColor3Tpl_construct = function FDuiColor3Tpl_construct(){
   var o = this;
   o.__base.FEditControl.construct.call(o);
   o._inputSize = new SSize2(120, 0);
   o._innerOriginValue = new SColor4();
   o._innerDataValue = new SColor4();
}
MO.FDuiColor3Tpl_get = function FDuiColor3Tpl_get(p){
   var o = this;
   var v = o._innerDataValue;
   var h = o._hInputRed;
   if(h){
      v.red = RFloat.parse(h.value);
   }
   var h = o._hInputGreen;
   if(h){
      v.green = RFloat.parse(h.value);
   }
   var h = o._hInputBlue;
   if(h){
      v.blue = RFloat.parse(h.value);
   }
   return v;
}
MO.FDuiColor3Tpl_set = function FDuiColor3Tpl_set(p){
   var o = this;
   o.__base.FEditControl.set.call(o, p);
   if(p.constructor == SColor4){
      o._innerOriginValue.assign(p);
      o._innerDataValue.assign(p);
   }else{
      throw new TError('Invalid value format.');
   }
   var v = o._innerDataValue;
   var h = o._hInputRed;
   if(h){
      h.value = RFloat.format(v.red, 0, null, 2, null);
   }
   var h = o._hInputGreen;
   if(h){
      h.value = RFloat.format(v.green, 0, null, 2, null);
   }
   var h = o._hInputBlue;
   if(h){
      h.value = RFloat.format(v.blue, 0, null, 2, null);
   }
   o.changeSet(false);
}
MO.FDuiColor3Tpl_onDataKeyDown = function FDuiColor3Tpl_onDataKeyDown(s, e){
   var o = this;
   o.__base.FEditControl.onDataKeyDown.call(o, s, e);
   if(o.editCase){
      RKey.fixCase(e, o.editCase);
   }
}
MO.FDuiColor3Tpl_formatValue = function FDuiColor3Tpl_formatValue(v){
   var o = this;
   var r = MO.Lang.String.nvl(v);
   if(ECase.Upper == o.editCase){
      r = MO.Lang.String.toUpper(r);
   }else if(ECase.Lower == o.editCase){
      r = MO.Lang.String.toLower(r);
   }
   return r;
}
MO.FDuiColor3Tpl_setText = function FDuiColor3Tpl_setText(t){
   var o = this;
   if(!o.hEdit){
      return;
   }
   if('U'== o.editCase){
      o.hEdit.value = MO.Lang.String.toUpper(t);
   }else if('L'== o.editCase){
         o.hEdit.value = MO.Lang.String.toLower(t);
   }else{
      o.hEdit.value = t;
   }
   if('right' == o.editAlign ){
      o.hEdit.style.textAlign = 'right';
   }else if('left' == o.editAlign ){
      o.hEdit.style.textAlign = 'left';
   }else{
      o.hEdit.style.textAlign = 'center';
   }
}
MO.FDuiColor3Tpl_validText = function FDuiColor3Tpl_validText(t){
   var o = this;
   var r = o.__base.FEditControl.validText.call(o, t);
   if(!r){
      if(o.validLenmin){
         if(o.validLenmin > t.length){
            return RContext.get('MDescEdit:ValidMinLength', o.validLenmin);
         }
      }
      if(o.validLenmax){
         if(o.validLenmax < t.length){
            return RContext.get('MDescEdit:ValidMaxLength', o.validLenmax);
         }
      }
   }
   return r;
}
MO.FDuiColor3Tpl_findEditor = function FDuiColor3Tpl_findEditor(){
   var o = this;
   if(o.editComplete){
      var de = o.editor;
      if(!de){
         o.dsControl = o.topControl(MDataset);
         if(o.dsControl){
            de = o.editor = RConsole.find(FDuiColor3TplConsole).focus(o, FDuiColor3TplEditor);
         }
      }
      if(de){
         de.linkControl(o);
      }
      return o.editor;
   }
}
MO.FDuiColor3Tpl_drop = function FDuiColor3Tpl_drop(){
   var o = this;
   var de = o.findEditor();
   if(de){
      var t = o.reget();
      if(t.length > 0){
         if(o.finded != t){
            if(de.source != o){
               de.linkControl(o);
            }
            de.search(t);
         }
         o.finded = t;
      }
   }
}
MO.FDuiColor3Tpl_clone = function FDuiColor3Tpl_clone(){
   var o = this;
   var r = o._class.newInstance();
   GHtml_clone(r, o.hPanel);
   return r;
}
MO.FDuiColor3Tpl_link = function FDuiColor3Tpl_link(){
   var o = this;
}
MO.FDuiColor4 = function FDuiColor4(o){
   o = MO.Class.inherits(this, o, MO.FEditControl);
   o._inputSize       = MO.Class.register(o, new MO.APtySize2('_inputSize'));
   o._styleInputPanel = MO.Class.register(o, new MO.AStyle('_styleInputPanel'));
   o._styleInput      = MO.Class.register(o, new MO.AStyle('_styleInput'));
   o._hInput          = null;
   o.onBuildEditValue = MO.FDuiColor4_onBuildEditValue;
   o.construct        = MO.FDuiColor4_construct;
   o.get              = MO.FDuiColor4_get;
   o.set              = MO.FDuiColor4_set;
   return o;
}
MO.FDuiColor4_oeDataLoad = function FDuiColor4_oeDataLoad(p){
   var o = this;
   alert(p);
   return EEventStatus.Stop;
}
MO.FDuiColor4_oeDataSave = function FDuiColor4_oeDataSave(p){
   var o = this;
   return EEventStatus.Stop;
}
MO.FDuiColor4_onBuildEditValue = function FDuiColor4_onBuildEditValue(p){
   var o = this;
   var h = o._hValuePanel;
   h.className = o.styleName('InputPanel');
   var he = o._hInput = MO.Window.Builder.appendEdit(h, o.styleName('Input'));
   if(o._editLength){
      he.maxLength = o._editLength;
   }
}
MO.FDuiColor4_construct = function FDuiColor4_construct(){
   var o = this;
   o.__base.FEditControl.construct.call(o);
   o._inputSize = new SSize2(120, 0);
}
MO.FDuiColor4_get = function FDuiColor4_get(p){
   var o = this;
   var r = o.__base.FEditControl.get.call(o, p);
   var h = o._hInput;
   if(h){
      r = h.value;
   }
   return r;
}
MO.FDuiColor4_set = function FDuiColor4_set(p){
   var o = this;
   o.__base.FEditControl.set.call(o, p);
   var v = null;
   if(p.constructor == SColor4){
      var r = RFloat.format(p.red, 0, null, 3, null);
      var g = RFloat.format(p.green, 0, null, 3, null);
      var b = RFloat.format(p.blue, 0, null, 3, null);
      v = r + ',' + g + ',' + b;
   }
   var h = o._hInput;
   if(h){
      h.value = v;
   }
}
MO.FDuiColor4_onDataKeyDown = function FDuiColor4_onDataKeyDown(s, e){
   var o = this;
   o.__base.FEditControl.onDataKeyDown.call(o, s, e);
   if(o.editCase){
      RKey.fixCase(e, o.editCase);
   }
}
MO.FDuiColor4_formatValue = function FDuiColor4_formatValue(v){
   var o = this;
   var r = MO.Lang.String.nvl(v);
   if(ECase.Upper == o.editCase){
      r = MO.Lang.String.toUpper(r);
   }else if(ECase.Lower == o.editCase){
      r = MO.Lang.String.toLower(r);
   }
   return r;
}
MO.FDuiColor4_setText = function FDuiColor4_setText(t){
   var o = this;
   if(!o.hEdit){
      return;
   }
   if('U'== o.editCase){
      o.hEdit.value = MO.Lang.String.toUpper(t);
   }else if('L'== o.editCase){
         o.hEdit.value = MO.Lang.String.toLower(t);
   }else{
      o.hEdit.value = t;
   }
   if('right' == o.editAlign ){
      o.hEdit.style.textAlign = 'right';
   }else if('left' == o.editAlign ){
      o.hEdit.style.textAlign = 'left';
   }else{
      o.hEdit.style.textAlign = 'center';
   }
}
MO.FDuiColor4_validText = function FDuiColor4_validText(t){
   var o = this;
   var r = o.__base.FEditControl.validText.call(o, t);
   if(!r){
      if(o.validLenmin){
         if(o.validLenmin > t.length){
            return RContext.get('MDescEdit:ValidMinLength', o.validLenmin);
         }
      }
      if(o.validLenmax){
         if(o.validLenmax < t.length){
            return RContext.get('MDescEdit:ValidMaxLength', o.validLenmax);
         }
      }
   }
   return r;
}
MO.FDuiColor4_findEditor = function FDuiColor4_findEditor(){
   var o = this;
   if(o.editComplete){
      var de = o.editor;
      if(!de){
         o.dsControl = o.topControl(MDataset);
         if(o.dsControl){
            de = o.editor = RConsole.find(FDuiColor4Console).focus(o, FDuiColor4Editor);
         }
      }
      if(de){
         de.linkControl(o);
      }
      return o.editor;
   }
}
MO.FDuiColor4_drop = function FDuiColor4_drop(){
   var o = this;
   var de = o.findEditor();
   if(de){
      var t = o.reget();
      if(t.length > 0){
         if(o.finded != t){
            if(de.source != o){
               de.linkControl(o);
            }
            de.search(t);
         }
         o.finded = t;
      }
   }
}
MO.FDuiColor4_clone = function FDuiColor4_clone(){
   var o = this;
   var r = o._class.newInstance();
   GHtml_clone(r, o.hPanel);
   return r;
}
MO.FDuiColor4_link = function FDuiColor4_link(){
   var o = this;
}
MO.FDuiColorPicker = function FDuiColorPicker(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl, MO.MUiPropertyEdit);
   o._inputSize            = MO.Class.register(o, new MO.APtySize2('_inputSize'));
   o._unit                 = MO.Class.register(o, new MO.APtyString('_unit'));
   o._listenersDataChanged = MO.Class.register(o, new MO.AListener('_listenersDataChanged', MO.EEvent.DataChanged));
   o._hValueForm           = null;
   o._hValueLine           = null;
   o._hInputPanel          = null;
   o._hInput               = null;
   o.onBuildEditValue      = MO.FDuiColorPicker_onBuildEditValue;
   o.onInputEdit           = MO.Class.register(o, new MO.AEventInputChanged('onInputEdit'), MO.FDuiColorPicker_onInputEdit);
   o.construct             = MO.FDuiColorPicker_construct;
   o.formatText            = MO.FDuiColorPicker_formatText;
   o.formatValue           = MO.FDuiColorPicker_formatValue;
   o.get                   = MO.FDuiColorPicker_get;
   o.set                   = MO.FDuiColorPicker_set;
   o.setEditAble           = MO.FDuiColorPicker_setEditAble;
   o.refreshValue          = MO.FDuiColorPicker_refreshValue;
   o.refreshStyle          = MO.FDuiColorPicker_refreshStyle;
   o.dispose               = MO.FDuiColorPicker_dispose;
   return o;
}
MO.FDuiColorPicker_onBuildEditValue = function FDuiColorPicker_onBuildEditValue(event){
   var o = this;
   var hValuePanel = o._hValuePanel;
   var hValueForm = o._hValueForm = MO.Window.Builder.appendTable(hValuePanel);
   var hValueLine = o._hValueLine = MO.Window.Builder.appendTableRow(hValueForm);
   MO.Window.Html.setSize(hValueForm, o._inputSize);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hValueLine);
   o.onBuildEditChange(event);
   var hInputPanel = o._hInputPanel = MO.Window.Builder.appendTableCell(hValueLine);
   var hInput = o._hInput = MO.Window.Builder.appendEdit(hInputPanel);
   o.attachEvent('onInputEdit', hInput, o.onInputEdit);
   if(o._editLength){
      hInput.maxLength = o._editLength;
   }
}
MO.FDuiColorPicker_onInputEdit = function FDuiColorPicker_onInputEdit(p){
   var o = this;
   o.refreshValue();
}
MO.FDuiColorPicker_construct = function FDuiColorPicker_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2(0, 0);
}
MO.FDuiColorPicker_formatText = function FDuiColorPicker_formatText(value){
   var o = this;
   var result = MO.Lang.String.nvl(value);
   o._dataDisplay = result;
   return result;
}
MO.FDuiColorPicker_formatValue = function FDuiColorPicker_formatValue(value){
   return value;
}
MO.FDuiColorPicker_get = function FDuiColorPicker_get(){
   var o = this;
   var value = o._hInput.value;
   return value;
}
MO.FDuiColorPicker_set = function FDuiColorPicker_set(value){
   var o = this;
   o._dataValue = value;
   var text = MO.Lang.String.nvl(value);
   o._hInput.value = text;
   o.changeSet(false);
}
MO.FDuiColorPicker_setEditAble = function FDuiColorPicker_setEditAble(flag){
   var o = this;
   o.__base.FDuiEditControl.setEditAble.call(o, flag);
   o._hInput.readOnly = !flag;
}
MO.FDuiColorPicker_refreshValue = function FDuiColorPicker_refreshValue(){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiColorPicker_refreshStyle = function FDuiColorPicker_refreshStyle(){
   var o = this;
   o.__base.FDuiEditControl.refreshStyle.call(o);
   var inputStyle = null;
   if(o._statusEditable){
      if(o._statusValueHover){
         inputStyle = 'InputHover';
      }else{
         inputStyle = 'InputNormal';
      }
   }else{
      inputStyle = 'InputReadonly';
   }
   var hInput = o._hInput;
   hInput.className = o.styleName(inputStyle);
   hInput.readOnly = !o._statusEditable;
}
MO.FDuiColorPickerEditor = function FDuiColorPickerEditor(o){
   o = MO.Class.inherits(this, o, MO.FDropEditor, MO.MShadow);
   o.MinWidth     = 240;
   o.ColorHex     = new Array('00', '33', '66', '99', 'CC', 'FF');
   o.SpColorHex   = new Array('FF0000', '00FF00', '0000FF', 'FFFF00', '00FFFF','FF00FF');
   o.onCellEnter  = MO.Class.register(o, new HMouseOver('onCellEnter'),  MO.FDuiColorPickerEditor_onCellEnter);
   o.onCellSelect = MO.Class.register(o, new HMouseDown('onCellSelect'), MO.FDuiColorPickerEditor_onCellSelect);
   o.color        = null;
   o.hTable       = null;
   o.cellWidth    = 16;
   o.cellHeight   = 10;
   o.onBuildDrop  = MO.FDuiColorPickerEditor_onBuildDrop;
   o.onKeyDown    = MO.FDuiColorPickerEditor_onKeyDown;
   o.onCellSelect = MO.FDuiColorPickerEditor_onCellSelect;
    o.onEditEnd   = MO.FDuiColorPickerEditor_onEditEnd;
   o.makeCell     = MO.FDuiColorPickerEditor_makeCell;
   o.set          = MO.FDuiColorPickerEditor_set;
   o.show         = MO.FDuiColorPickerEditor_show;
   o.hide         = MO.FDuiColorPickerEditor_hide;
   o.linkControl  = MO.FDuiColorPickerEditor_linkControl;
   o.dispose      = MO.FDuiColorPickerEditor_dispose;
   return o;
}
MO.FDuiColorPickerEditor_onBuildDrop = function FDuiColorPickerEditor_onBuildDrop(){
   var o = this;
   o.hTable = MO.Window.Builder.appendTable(o.hDropPanel);
   for(var i = 0; i < 2; i++){
      for(var j = 0; j < 6; j++){
         var hRow = o.hTable.insertRow();
         o.makeCell(hRow, "#000000");
         if (i == 0){
            o.makeCell(hRow, '#'+o.ColorHex[j] + o.ColorHex[j] + o.ColorHex[j]);
         }else {
            o.makeCell(hRow, '#'+o.SpColorHex[j]);
         }
         o.makeCell(hRow, "#000000");
         for (k = 0; k < 3; k++) {
            for (l = 0; l < 6; l++) {
               o.makeCell(hRow, '#'+o.ColorHex[k + i * 3] + o.ColorHex[l] + o.ColorHex[j]);
            }
         }
      }
   }
}
MO.FDuiColorPickerEditor_linkControl = function FDuiColorPickerEditor_linkControl(c){
   var o = this;
   if(o.source == c){
      return false;
   }
   o.source = c;
   RLog.debug(o, 'link Panel (panel={0}, edit={1})', MO.Class.dump(c.hEditCell), MO.Class.dump(c.hEdit));
   MO.Window.Html.toRect(o.rect, c.hEditCell);
   MO.Window.Html.setPixelRect(o.hPanel, o.rect);
   o.hPanel.style.pixelTop = o.rect.bottom;
   var hbf = o.border.hForm;
   hbf.style.pixelWidth = c.editBorder.hForm.width;
   hbf.style.pixelHeight = c.editBorder.hForm.height;
   return true;
}
MO.FDuiColorPickerEditor_onCellEnter = function FDuiColorPickerEditor_onCellEnter(e){
   var o = this;
   o.editable.hDrop.style.backgroundColor = e.hSource.style.backgroundColor;
}
MO.FDuiColorPickerEditor_onCellSelect = function FDuiColorPickerEditor_onCellSelect(e){
   var o = this;
   o.color = e.srcElement.style.backgroundColor;
   o.editStatus = EEditStatus.Ok
   o.blur();
}
MO.FDuiColorPickerEditor_makeCell = function FDuiColorPickerEditor_makeCell(hRow, color) {
   var o = this;
   var h = hRow.insertCell();
   h.link = o;
   h.width = o.cellWidth;
   h.height = o.cellHeight;
   h.style.backgroundColor = color;
   o.attachEvent('onCellEnter', h);
   o.attachEvent('onCellSelect', h);
   return h;
}
MO.FDuiColorPickerEditor_onKeyDown = function FDuiColorPickerEditor_onKeyDown(e){
   alert(FDuiColorPickerEditor_onKeyDown);
   var o = this;
   var kc = e.keyCode;
   if(EKey.Up == kc){
      o.select(o.selectIndex-1);
   }else if(EKey.Down == kc){
      o.select(o.selectIndex+1);
   }else if(EKey.Esc == kc){
      o.editStatus = EEditStatus.Cancel;
      o.selectIndex = o.originIndex;
      RKey.eventClear(e);
      o.inEdit = false;
      o.hEdit.blur();
   }else if(EKey.Enter == kc){
      o.editStatus = EEditStatus.Ok;
      RKey.eventClear(e);
      o.inEdit = false;
      o.hEdit.blur();
   }
}
MO.FDuiColorPickerEditor_set = function FDuiColorPickerEditor_set(v){
   var o = this;
   o.color = v;
}
MO.FDuiColorPickerEditor_show = function FDuiColorPickerEditor_show(v){
   var o = this;
   o.base.FDropEditor.show.call(o, v);
   RConsole.find(FFocusConsole).focus(o);
   if(o.border.hForm.offsetWidth < o.MinWidth){
      o.border.hForm.style.pixelWidth = o.MinWidth;
   }
   o.base.MShadow.show.call(o, v);
   o.isSkipBlur = false;
}
MO.FDuiColorPickerEditor_onEditEnd = function FDuiColorPickerEditor_onEditEnd(){
   var o = this;
   var t = o.editable;
   RLog.debug(o, 'Edit end (editable={0}, status={1})', MO.Class.dump(t), REnum.decode(EEditStatus, o.editStatus));
   if(t){
      t.hDrop.style.backgroundColor = o.color;
      var ec = RConsole.find(FEventConsole);
      if(EEditStatus.Cancel == o.editStatus){
         ec.add(t, t.focus);
      }else if(EEditStatus.Ok == o.editStatus){
         t.onEditEnd(o);
         ec.add(t, t.focus);
      }
   }
   o.editable = null;
   o.inEdit = false;
}
MO.FDuiColorPickerEditor_hide = function FDuiColorPickerEditor_hide(){
   var o = this;
   o.source = null;
   o.base.FDropEditor.hide.call(o);
   o.base.MShadow.hide.call(o);
}
MO.FDuiColorPickerEditor_dispose = function FDuiColorPickerEditor_dispose(){
   var o = this;
   o.base.FDropEditor.dispose.call(o);
   RMemory.freeHtml(o.hTable);
   RMemory.freeHtml(o.hDropPanel);
   RMemory.freeHtml(o.hEdit);
   o.hTable = null;
   o.hDropPanel = null;
   o.hEdit = null;
}
MO.FDuiColorPower = function FDuiColorPower(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl, MO.MListenerDataChanged, MO.MMouseCapture);
   o._inputSize          = MO.Class.register(o, new MO.APtySize2('_inputSize'));
   o._valueMin           = MO.Class.register(o, new MO.APtyNumber('_valueMin'));
   o._valueMax           = MO.Class.register(o, new MO.APtyNumber('_valueMax'));
   o._styleValuePanel    = MO.Class.register(o, new MO.AStyle('_styleValuePanel'));
   o._styleInputPanel    = MO.Class.register(o, new MO.AStyle('_styleInputPanel'));
   o._styleInput         = MO.Class.register(o, new MO.AStyle('_styleInput'));
   o._innerOriginValue   = null;
   o._innerDataValue     = null;
   o._barRed             = null;
   o._barGreen           = null;
   o._barBlue            = null;
   o._barPower           = null;
   o._hColorPanel        = null;
   o._hColorImage        = null;
   o._hChannelPanel      = null;
   o._hChannelForm       = null;
   o.onBuildEditValue    = MO.FDuiColorPower_onBuildEditValue;
   o.onMouseCaptureStart = MO.FDuiColorPower_onMouseCaptureStart;
   o.onMouseCapture      = MO.FDuiColorPower_onMouseCapture;
   o.onMouseCaptureStop  = MO.FDuiColorPower_onMouseCaptureStop;
   o.onInputKeyPress     = MO.Class.register(o, new MO.AEventKeyPress('onInputKeyPress'), MO.FDuiColorPower_onInputKeyPress);
   o.onInputEdit         = MO.Class.register(o, new MO.AEventInputChanged('onInputEdit'), MO.FDuiColorPower_onInputEdit);
   o.onInputChange       = MO.Class.register(o, new MO.AEventChange('onInputChange'), MO.FDuiColorPower_onInputChange);
   o.construct           = MO.FDuiColorPower_construct;
   o.get                 = MO.FDuiColorPower_get;
   o.set                 = MO.FDuiColorPower_set;
   o.setDisplayColor     = MO.FDuiColorPower_setDisplayColor;
   o.setDisplay          = MO.FDuiColorPower_setDisplay;
   o.refreshValue        = MO.FDuiColorPower_refreshValue;
   o.dispose             = MO.FDuiColorPower_dispose;
   return o;
}
MO.FDuiColorPower_onBuildEditValue = function FDuiColorPower_onBuildEditValue(p){
   var o = this;
   var h = o._hValuePanel;
   h.className = o.styleName('ValuePanel');
   var hf = o._hValueForm = MO.Window.Builder.appendTable(h);
   hf.width = '100%';
   var hl = o._hValueLine = MO.Window.Builder.appendTableRow(hf);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hl);
   o.onBuildEditChange(p);
   var hcp = o._hColorPanel = MO.Window.Builder.appendTableCell(hl);
   hcp.width = 16;
   hcp.style.padding = '2px';
   o._hColorImage = MO.Window.Builder.appendIcon(hcp, null, 'n', 14, 65);
   var hcp = o._hChannelPanel = MO.Window.Builder.appendTableCell(hl);
   var hcf = o._hChannelForm = MO.Window.Builder.appendTable(hcp, null, 0, 1, 0);
   hcf.__linker = o;
   hcf.width = '100%';
   var b = o._barRed = new MO.SDuiColorChannel();
   b.control = o;
   b.typeCd = 'red';
   b.hPanel = hcf;
   b.build();
   var b = o._barGreen = new MO.SDuiColorChannel();
   b.control = o;
   b.typeCd = 'green';
   b.hPanel = hcf;
   b.build();
   var b = o._barBlue = new MO.SDuiColorChannel();
   b.control = o;
   b.typeCd = 'blue';
   b.hPanel = hcf;
   b.build();
   var b = o._barPower = new MO.SDuiColorPower();
   b.control = o;
   b.typeCd = 'power';
   b.setRange(o._valueMin, o._valueMax);
   b.hPanel = hcf;
   b.build();
}
MO.FDuiColorPower_onMouseCaptureStart = function FDuiColorPower_onMouseCaptureStart(p){
   var o = this;
   var b = MO.Window.Html.searchObject(p.hSource, '__pbar');
   if(b){
      b.onMouseDown(p);
   }
}
MO.FDuiColorPower_onMouseCapture = function FDuiColorPower_onMouseCapture(p){
   var o = this;
   var b = MO.Window.Html.searchObject(p.hSource, '__pbar');
   if(b){
      b.onMouseMove(p);
   }
}
MO.FDuiColorPower_onMouseCaptureStop = function FDuiColorPower_onMouseCaptureStop(p){
   var o = this;
   var b = MO.Window.Html.searchObject(p.hSource, '__pbar');
   if(b){
      b.onMouseUp(p);
   }
}
MO.FDuiColorPower_onInputKeyPress = function FDuiColorPower_onInputKeyPress(p){
   var o = this;
   var c = p.keyCode;
   if(MO.RKeyboard.isControlKey(c)){
      return;
   }
   if(!MO.RKeyboard.isFloatKey(c)){
      p.cancel();
   }
}
MO.FDuiColorPower_onInputEdit = function FDuiColorPower_onInputEdit(p){
   var o = this;
   var hs = p.hSender;
   var b = hs._pbar;
   if(b){
      b.changeInputEdit();
   }
   o.processDataChangedListener(o);
}
MO.FDuiColorPower_onInputChange = function FDuiColorPower_onInputChange(p){
   var o = this;
   var hs = p.hSender;
   var b = hs._pbar;
   if(b){
      b.changeInputChange();
   }
   o.processDataChangedListener(o);
}
MO.FDuiColorPower_construct = function FDuiColorPower_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2(120, 0);
   o._innerOriginValue = new MO.SColor4();
   o._innerDataValue = new MO.SColor4();
}
MO.FDuiColorPower_get = function FDuiColorPower_get(p){
   var o = this;
   var v = o._innerDataValue;
   v.red = o._barRed.get();
   v.green = o._barGreen.get();
   v.blue = o._barBlue.get();
   v.alpha = o._barPower.get();
   return v;
}
MO.FDuiColorPower_set = function FDuiColorPower_set(p){
   var o = this;
   o.__base.FDuiEditControl.set.call(o, p);
   if(p.constructor == MO.SColor4){
      o._innerOriginValue.assign(p);
      o._innerDataValue.assign(p);
   }else{
      throw new MO.TError('Invalid value format.');
   }
   o.setDisplayColor();
   var v = o._innerDataValue;
   o._barRed.set(v.red);
   o._barGreen.set(v.green);
   o._barBlue.set(v.blue);
   o._barPower.set(v.alpha);
   o.changeSet(false);
}
MO.FDuiColorPower_setDisplayColor = function FDuiColorPower_setDisplayColor(){
   var o = this;
   var v = o._innerDataValue;
   var va = v.alpha;
   var vr = MO.Lang.Hex.format(MO.Lang.Integer.toRange(parseInt(v.red * va * 255), 0, 255), 2);
   var vg = MO.Lang.Hex.format(MO.Lang.Integer.toRange(parseInt(v.green * va * 255), 0, 255), 2);
   var vb = MO.Lang.Hex.format(MO.Lang.Integer.toRange(parseInt(v.blue * va * 255), 0, 255), 2);
   o._hColorImage.style.backgroundColor = '#' + vr + vg + vb;
}
MO.FDuiColorPower_setDisplay = function FDuiColorPower_setDisplay(){
   var o = this;
   o.setDisplayColor();
   var v = o._innerDataValue;
   o._barRed.set(v.red);
   o._barGreen.set(v.green);
   o._barBlue.set(v.blue);
   o._barPower.set(v.alpha);
}
MO.FDuiColorPower_refreshValue = function FDuiColorPower_refreshValue(){
   var o = this;
   o.get();
   o.setDisplayColor();
   o.processDataChangedListener(o);
}
MO.FDuiColorPower_dispose = function FDuiColorPower_dispose(t){
   var o = this;
   o.__base.FDuiEditControl.dispose.call(o, t);
}
MO.FDuiDateTime = function FDuiDateTime(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl, MO.MDuiDropable);
   o.editDispMode = MO.Class.register(o, new MO.APtySet('editDisplay', 'editDate', MO.EDateTimeMode.Display));
   o.editYear     = MO.Class.register(o, new MO.APtySet('editYear', 'editDate', MO.EDateTimeMode.Year));
   o.editMonth    = MO.Class.register(o, new MO.APtySet('editMonth', 'editDate', MO.EDateTimeMode.Month));
   o.editDay      = MO.Class.register(o, new MO.APtySet('editDay', 'editDate', MO.EDateTimeMode.Day));
   o._date        = null;
   o.borderStyle  = MO.EUiBorder.RoundDrop;
   o.lsnEditEnd   = null;
   o.hYearPanel   = null;
   o.hYear        = null;
   o.hMonthPanel  = null;
   o.hMonth       = null;
   o.hDayPanel    = null;
   o.hDay         = null;
   o.onKeyPress   = MO.FDuiDateTime_onKeyPress;
   o.onEditEnd    = MO.FDuiDateTime_onEditEnd;
   o.onBuildEdit  = MO.FDuiDateTime_onBuildEdit;
   o.oeSaveValue  = MO.FDuiDateTime_oeSaveValue;
   o.construct    = MO.FDuiDateTime_construct;
   o.formatValue  = MO.FDuiDateTime_formatValue;
   o.text         = MO.FDuiDateTime_text;
   o.setText      = MO.FDuiDateTime_setText;
   o.validText    = MO.FDuiDateTime_validText;
   o.setEditable  = MO.FDuiDateTime_setEditable;
   o.refreshStyle = MO.FDuiDateTime_refreshStyle;
   o.drop         = MO.FDuiDateTime_drop;
   o.dispose      = MO.FDuiDateTime_dispose;
   return o;
}
MO.FDuiDateTime_onKeyPress = function FDuiDateTime_onKeyPress(e){
   if(!MO.Lang.String.inChars(String.fromCharCode(e.keyCode), MO.Lang.Date.Chars)){
      MO.RKey.eventClear(e);
   }
}
MO.FDuiDateTime_onEditEnd = function FDuiDateTime_onEditEnd(e){
   var o = this;
   if(e){
      o.set(e.get());
   }
   o.onDataEditEnd(o);
}
MO.FDuiDateTime_onBuildEdit = function FDuiDateTime_onBuildEdit(b){
   var o = this;
   var htb = MO.Window.Builder.appendTable(b.hPanel);
   htb.width = '100%';
   htb.style.tableLayout = 'fixed';
   var hr = o.hEdit = htb.insertRow();
   o.onBuildChange(hr.insertCell())
   var hc = oonDateDoubleClickPanel = hr.insertCell();
   hc.width = '40%';
   hc.style.padding = '0 1';
   var he = o.hYear = MO.Window.Builder.appendEdit(hc);
   he.maxLength = 4;
   he.style.border = 0;
   he.style.width = '100%';
   he.style.textAlign = 'right';
   var hc = o.hYearSplit = hr.insertCell();
   hc.width = 5;
   hc.innerText = '-';
   o.hYear.style.display = o.editYear?'block':'none'
   o.hYearSplit.style.display = o.editYear?'block':'none'
   var hc = o.hMonthPanel = hr.insertCell();
   hc.width = '20%';
   hc.style.padding = '0 1';
   var he = o.hMonth = MO.Window.Builder.appendEdit(hc);
   he.maxLength = 2;
   he.style.border = 0;
   he.style.width = '100%';
   he.style.textAlign = 'right';
   var hc = o.hMonthSplit = hr.insertCell();
   hc.width = 5;
   hc.innerText = '-';
   o.hMonth.style.display = o.editMonth?'block':'none';
   o.hMonthSplit.style.display = o.editDay?'block':'none';
   var hc = o.hDayPanel = hr.insertCell();
   hc.width = '20%';
   hc.style.padding = '0 1'
   var he = o.hDay = MO.Window.Builder.appendEdit(hc);
   he.maxLength = 2;
   he.style.border = 0;
   he.style.width = '100%';
   he.style.textAlign = 'right';
   o.hDay.style.display = o.editDay?'block':'none';
}
MO.FDuiDateTime_oeSaveValue = function FDuiDateTime_oeSaveValue(e){
   var o = this;
   var dn = MO.Lang.String.nvl(o.dataCode, o.dataName);
   if(!MO.Lang.String.isEmpty(dn)){
      var vs = e.values;
      var v = vs.get(dn);
      if(v){
         vs.set(dn, o.reget().substring(0, 8) + v.substring(8));
      }else{
         vs.set(dn, o.reget());
      }
   }
   return MO.EEventStatus.Stop;
}
MO.FDuiDateTime_construct = function FDuiDateTime_construct(){
   var o = this;
   o.base.FDuiEditControl.construct.call(o);
   o._date = new MO.TDate();
   o.lsnEditEnd = new MO.TListener(o, o.onEditEnd);
}
MO.FDuiDateTime_formatValue = function FDuiDateTime_formatValue(t){
   if(t){
      var o = this;
      if(t.toLowerCase() == '@now'){
         o._date.now();
         return MO.Lang.Date.formatDate(o._date);
      }else{
         MO.Lang.Date.autoParse(o._date, t);
         return MO.Lang.Date.formatDate(o._date);
      }
   }
   return MO.Lang.String.nvl(t);
}
MO.FDuiDateTime_text = function FDuiDateTime_text(){
   var o = this;
   o._date.setYear(o._date.year);
   o._date.setMonth(o._date.month);
   o._date.setDay(o._date.day);
   return MO.Lang.Date.formatDate(o._date);
}
MO.FDuiDateTime_setText = function FDuiDateTime_setText(t){
   var o = this;
   if(t){
      MO.Lang.Date.autoParse(o._date, t);
      o.hYear.value = MO.Lang.Integer.format(o._date.year, 4);
      o.hMonth.value = MO.Lang.Integer.format(o._date.month, 2);
      o.hDay.value = MO.Lang.Integer.format(o._date.day, 2);
   }else{
      o.hYear.value = '';
      o.hMonth.value = '';
      o.hDay.value = '';
   }
}
MO.FDuiDateTime_validText = function FDuiDateTime_validText(t){
   return null;
}
MO.FDuiDateTime_setEditable = function FDuiDateTime_setEditable(v){
   var o = this;
   o.base.FDuiEditControl.setEditable.call(o, v);
   o.hYear.readOnly = !v;
   o.hMonth.readOnly = !v;
   o.hDay.readOnly = !v;
}
MO.FDuiDateTime_refreshStyle = function FDuiDateTime_refreshStyle(){
   var o = this;
   o.base.FDuiEditControl.refreshStyle.call(o);
   o.hYear.style.color = o._textColor;
   o.hYear.style.backgroundColor = o._backColor;
   o.hMonth.style.color = o._textColor;
   o.hMonth.style.backgroundColor = o._backColor;
   o.hDay.style.color = o._textColor;
   o.hDay.style.backgroundColor = o._backColor;
}
MO.FDuiDateTime_drop = function FDuiDateTime_drop(){
   var o = this;
   if(o.canDrop() && o._editable){
      var e = o.editor = RConsole.find(FEditConsole).focus(o, FDuiDateTimeEditor, o.editRefer);
      e.set(MO.Lang.Date.formatDate(o._date));
      e.setYearVisible(o.editYear);
      e.setMonthVisible(o.editMonth);
      e.setDayVisible(o.editDay);
      e.lsnEditEnd = o.lsnEditEnd;
      e.show();
   }
}
MO.FDuiDateTime_dispose = function FDuiDateTime_dispose(){
   var o = this;
   o.base.FDuiEditControl.dispose.call(o);
   o._date = null;
}
MO.FDuiDateTimeEditor = function FDuiDateTimeEditor(o){
   o = MO.Class.inherits(this, o, MO.FDuiDropEditor);
   o.date              = null;
   o.years             = null;
   o.months            = null;
   o.days              = null;
   o.hPanelDay         = null;
   o.hPanelMonth       = null;
   o.hPanelYear        = null;
   o.hTitleDay         = null;
   o.hTitleMonth       = null;
   o.hTitleYear        = null;
   o.onButtonEnter     = MO.Class.register(o, new MO.AEventMouseEnter('onButtonEnter'), MO.FDuiDateTimeEditor_onButtonEnter);
   o.onButtonLeave     = MO.Class.register(o, new MO.AEventMouseLeave('onButtonLeave'), MO.FDuiDateTimeEditor_onButtonLeave);
   o.onYearClick       = MO.Class.register(o, new MO.AEventMouseDown('onYearClick'), MO.FDuiDateTimeEditor_onYearClick);
   o.onMonthClick      = MO.Class.register(o, new MO.AEventMouseDown('onMonthClick'), MO.FDuiDateTimeEditor_onMonthClick);
   o.onDayClick        = MO.Class.register(o, new MO.AEventMouseDown('onDayClick'), MO.FDuiDateTimeEditor_onDayClick);
   o.onDateDoubleClick = MO.Class.register(o, new MO.AEventDoubleClick('onDateDoubleClick'), MO.FDuiDateTimeEditor_onDateDoubleClick);
   o.onNowClick        = MO.Class.register(o, new MO.AEventMouseDown('onNowClick'), MO.FDuiDateTimeEditor_onNowClick);
   o.onConfirmClick    = MO.Class.register(o, new MO.AEventMouseDown('MO.onConfirmClick'), FDuiDateTimeEditor_onConfirmClick);
   o.onBuildDrop       = MO.FDuiDateTimeEditor_onBuildDrop;
   o.onBuildButton     = MO.FDuiDateTimeEditor_onBuildButton;
   o.construct         = MO.FDuiDateTimeEditor_construct;
   o.buildTitle        = MO.FDuiDateTimeEditor_buildTitle;
   o.get               = MO.FDuiDateTimeEditor_get;
   o.set               = MO.FDuiDateTimeEditor_set;
   o.resetDay          = MO.FDuiDateTimeEditor_resetDay;
   o.setYearVisible    = MO.FDuiDateTimeEditor_setYearVisible;
   o.setMonthVisible   = MO.FDuiDateTimeEditor_setMonthVisible;
   o.setDayVisible     = MO.FDuiDateTimeEditor_setDayVisible;
   o.selectCell        = MO.FDuiDateTimeEditor_selectCell;
   o.restore           = MO.FDuiDateTimeEditor_restore;
   o.show              = MO.FDuiDateTimeEditor_show;
   o.dispose           = MO.FDuiDateTimeEditor_dispose;
   return o;
}
MO.FDuiDateTimeEditor_onButtonEnter = function FDuiDateTimeEditor_onButtonEnter(e){
   if(!e.hSource.isSelect){
     if(MO.Lang.String.isEmpty(e.hSource.innerText)){
         e.hSource.style.backgroundColor = '#CCCCFF';
     }
   }
}
MO.FDuiDateTimeEditor_onButtonLeave = function FDuiDateTimeEditor_onButtonLeave(e){
   if(!e.hSource.isSelect){
      e.hSource.style.backgroundColor = '#FFFFFF';
   }
}
MO.FDuiDateTimeEditor_onYearClick = function FDuiDateTimeEditor_onYearClick(e){
   var o = this;
   o.date.setYear(e.hSource.innerText);
   o.restore();
   o.resetDay();
}
MO.FDuiDateTimeEditor_onMonthClick = function FDuiDateTimeEditor_onMonthClick(e){
   var o = this;
   o.date.setMonth(e.hSource.innerText);
   o.restore();
   o.resetDay();
}
MO.FDuiDateTimeEditor_onDayClick = function FDuiDateTimeEditor_onDayClick(e){
   var o = this;
   if(!MO.Lang.String.equals(e.hSource.innerText, '.')){
      o.date.setDay(e.hSource.innerText);
      o.restore();
   }
}
MO.FDuiDateTimeEditor_onDateDoubleClick = function FDuiDateTimeEditor_onDateDoubleClick(){
   this.onConfirmClick();
}
MO.FDuiDateTimeEditor_onNowClick = function FDuiDateTimeEditor_onNowClick(){
   var o = this;
   o.date = new TDate();
   o.editEnd();
}
MO.FDuiDateTimeEditor_onConfirmClick = function FDuiDateTimeEditor_onConfirmClick(){
   var o = this;
   o.date.setYear(o.hYear.value);
   o.date.setMonth(o.hMonth.value);
   o.date.setDay(o.hDay.value);
   o.editEnd();
}
MO.FDuiDateTimeEditor_onBuildDrop = function FDuiDateTimeEditor_onBuildDrop(){
   var o = this;
   var hdp = o.hDropPanel;
   hdp.width = 220;
   o.attachEvent('onDateDoubleClick', hdp);
   o.hTitleYear = o.buildTitle('Year', 4);
   var hp = o.hPanelYear = o.hSelectPanel = MO.Window.Builder.appendTable(hdp);
   hp.width = '100%';
   for(var m=0; m<4; m++){
      var hr = hp.insertRow();
      for(var n=0; n<4; n++){
         var hc = hr.insertCell();
         hc.innerText = MO.Lang.Integer.format(2000 + 4*m+n, 2);
         hc.align = 'center';
         hc.style.padding = '1 6';
         hc.style.cursor = 'hand';
         hc.style.borderBottom = '1 solid #EEEEEE';
         if(n < 5){
            hc.style.borderRight = '1 solid #EEEEEE';
         }
         o.attachEvent('onButtonEnter', hc);
         o.attachEvent('onButtonLeave', hc);
         o.attachEvent('onYearClick', hc);
         o.years.push(hc);
      }
   }
   o.hTitleMonth = o.buildTitle('Month', 2);
   var hp = o.hPanelMonth = o.hSelectPanel = MO.Window.Builder.appendTable(hdp);
   hp.width = '100%';
   for(var m=0; m<2; m++){
      hr = hp.insertRow();
      for(var n=0; n<6; n++){
         var hc = hr.insertCell();
         hc.innerText = MO.Lang.Integer.format(6*m+n+1, 2);
         hc.align = 'center';
         hc.style.cursor = 'hand';
         hc.style.borderBottom = '1 solid #EEEEEE';
         if(n < 5){
            hc.style.borderRight = '1 solid #EEEEEE';
         }
         o.attachEvent('onButtonEnter', hc);
         o.attachEvent('onButtonLeave', hc);
         o.attachEvent('onMonthClick', hc);
         o.months.push(hc);
      }
   }
   o.hTitleDay = o.buildTitle('Day', 2);
   var hp = o.hPanelDay = o.hSelectPanel = MO.Window.Builder.appendTable(hdp);
   hp.width = '100%';
   for(var m=0; m<5; m++){
      hr = hp.insertRow();
      for(var n=0; n<7; n++){
         var day = 7*m+n+1;
         if(day > 31){
            continue;
         }
         var hc = hr.insertCell();
         hc.innerText = MO.Lang.Integer.format(day, 2);
         hc.align = 'center';
         hc.style.borderBottom = '1 solid #EEEEEE';
         hc.style.cursor = 'hand';
         if(n < 5){
            hc.style.borderRight = '1 solid #EEEEEE';
         }
         o.attachEvent('onButtonEnter', hc);
         o.attachEvent('onButtonLeave', hc);
         o.attachEvent('onDayClick', hc);
         o.days.push(hc);
      }
   }
}
MO.FDuiDateTimeEditor_onBuildButton = function FDuiDateTimeEditor_onBuildButton(){
   var o = this;
   o.base.FDuiDropEditor.onBuildButton.call(o);
   var hf = MO.Window.Builder.appendTable(o.hButtonPanel);
   hf.width = '100%';
   hf.height = 20;
   hf.style.filter = "progid:DXImageTransform.Microsoft.Gradient(startColorStr='#EEEEEE', endColorStr='#FFFFFF', gradientType='0')";
   var hr = hf.insertRow();
   var hc = hr.insertCell();
   hc.style.padding = '0 6';
   var h = o.hNow = MO.Window.Builder.append(hc, 'SPAN');
   h.style.cursor = 'hand';
   o.attachEvent('onNowClick', h);
   h.innerText = MO.RContext.get('FDate:Now');
   var hc = hr.insertCell();
   hc.style.padding = '0 6';
   hc.align = 'right';
   var h = o.hNow = MO.Window.Builder.append(hc, 'SPAN');
   h.style.cursor = 'hand';
   o.attachEvent('onConfirmClick', h);
   h.innerText = MO.RContext.get('FDate:Confirm');
}
MO.FDuiDateTimeEditor_construct = function FDuiDateTimeEditor_construct(){
   var o = this;
   o.base.FDuiDropEditor.construct.call(o);
   o.date = new MO.TDate();
   o.years = new MO.TList();
   o.months = new MO.TList();
   o.days = new MO.TList();
}
MO.FDuiDateTimeEditor_buildTitle = function FDuiDateTimeEditor_buildTitle(n, ml){
   var o = this;
   var hf = MO.Window.Builder.appendTable(o.hDropPanel);
   hf.width = '100%';
   hf.style.borderBottom = '1 solid #999999';
   hf.style.filter = "progid:DXImageTransform.Microsoft.Gradient(startColorStr='#FFFFFF', endColorStr='#E5FAFE', gradientType='0')";
   hf.style.backgroundColor = '#F8F8F8';
   hf.style.padding = '2 6';
   var hr = hf.insertRow();
   var hc = hr.insertCell();
   hc.width = 60;
   var he = o['h' + n] = MO.Window.Builder.appendEdit(hc);
   he.style.width = '100%';
   he.style.textAlign = 'right';
   he.style.border = '1 solid #CCCCCC';
   he.maxLength = ml;
   var hc = hr.insertCell();
   hc.innerText = MO.RContext.get('FDate:' + n);
   return hf;
}
MO.FDuiDateTimeEditor_get = function FDuiDateTimeEditor_get(){
   return MO.Lang.Date.formatDate(this.date);
}
MO.FDuiDateTimeEditor_set = function FDuiDateTimeEditor_set(v){
   var o = this;
   MO.Lang.Date.autoParse(o.date, v);
   o.restore();
}
MO.FDuiDateTimeEditor_setYearVisible = function FDuiDateTimeEditor_setYearVisible(v){
   var o = this;
   o.hPanelYear.style.display = v? 'block':'none';
   o.hTitleYear.style.display = v? 'block':'none';
}
MO.FDuiDateTimeEditor_setMonthVisible = function FDuiDateTimeEditor_setMonthVisible(v){
   var o = this;
   o.hPanelMonth.style.display = v? 'block':'none';
   o.hTitleMonth.style.display = v? 'block':'none';
}
MO.FDuiDateTimeEditor_setDayVisible = function FDuiDateTimeEditor_setDayVisible(v){
   var o = this;
   o.hPanelDay.style.display = v? 'block':'none';
   o.hTitleDay.style.display = v? 'block':'none';
}
MO.FDuiDateTimeEditor_show = function FDuiDateTimeEditor_show(v){
   var o = this;
   o.base.FDuiDropEditor.show.call(o, v);
   var hp = o.hPanel;
   var hbf = o.hBorderForm;
   var s = o.source;
   var r = s.getEditRange();
   hp.style.pixelLeft = r.x;
   hp.style.pixelTop = r.y + r.height;
   hp.style.pixelWidth = 220;
   o.base.MShadow.show.call(o);
}
MO.FDuiDateTimeEditor_resetDay = function FDuiDateTimeEditor_resetDay(){
   var o = this;
   var monthDays = this.date.monthDays();
   for(var n=0; n<o.days.count; n++){
      var hd = o.days.get(n);
      if(n >= monthDays){
         hd.innerText = '.';
      }else{
        hd.innerText = MO.Lang.Integer.format(n+1, 2);
      }
   }
}
MO.FDuiDateTimeEditor_selectCell = function FDuiDateTimeEditor_selectCell(ls, v){
   var c = ls.count;
   for(var n=0; n<c; n++){
      var h = ls.get(n);
      if(h.innerText == v){
         h.style.color = '#FFFFFF';
         h.style.backgroundColor = '#9999EE';
         h.isSelect = true;
      }else{
         h.style.color = '#000000';
         h.style.backgroundColor = '#FFFFFF';
         h.isSelect = false;
      }
   }
}
MO.FDuiDateTimeEditor_restore = function FDuiDateTimeEditor_restore(){
   var o = this;
   o.hYear.value = o.date.year;
   o.hMonth.value = o.date.month;
   o.hDay.value = o.date.day;
   o.selectCell(o.years, o.date.year);
   o.selectCell(o.months, o.date.month);
   o.selectCell(o.days, o.date.day);
}
MO.FDuiDateTimeEditor_dispose = function FDuiDateTimeEditor_dispose(){
   var o = this;
   o.base.FDuiDropEditor.dispose.call(o);
   o.hPanel = null;
}
MO.FDuiDropEditor = function FDuiDropEditor(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditor, MO.MDuiShadow);
   o._stylePanel       = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleDropForm    = MO.Class.register(o, new MO.AStyle('_styleDropForm'));
   o._styleDropPanel   = MO.Class.register(o, new MO.AStyle('_styleDropPanel'));
   o._styleButtonPanel = MO.Class.register(o, new MO.AStyle('_styleButtonPanel'));
   o._minWidth         = 160;
   o._minHeight        = 300;
   o._hDropForm        = null;
   o._hDropPanel       = null;
   o._hButtonPanel     = null;
   o.onBuildDrop       = MO.Method.virtual(o, 'onBuildDrop');
   o.onBuildButton     = MO.Method.empty;
   o.onBuild           = MO.FDuiDropEditor_onBuild;
   o.onDropMouseDown   = MO.Class.register(o, new MO.AEventMouseDown('onDropMouseDown'));
   o.onDropMouseUp     = MO.Class.register(o, new MO.AEventMouseUp('onDropMouseUp'));
   o.panel             = MO.FDuiDropEditor_panel;
   o.setVisible        = MO.FDuiDropEditor_setVisible;
   o.dispose           = MO.FDuiDropEditor_dispose;
   return o;
}
MO.FDuiDropEditor_onBuild = function FDuiDropEditor_onBuild(p){
   var o = this;
   o.__base.FDuiEditor.onBuild.call(o, p);
   var h = o._hPanel;
   h.className = o.styleName('Panel');
   var hf = o._hDropForm = MO.Window.Builder.appendTable(h, o.styleName('DropForm'));
   o._hDropPanel = MO.Window.Builder.appendTableRowCell(hf, o.styleName('DropPanel'));
   o._hButtonPanel = MO.Window.Builder.appendTableRowCell(hf, o.styleName('ButtonPanel'));
   o.onBuildDrop();
   o.onBuildButton();
}
MO.FDuiDropEditor_panel = function FDuiDropEditor_panel(panelCd){
   var o = this;
   if(panelCd == MO.EPanel.Shadow){
      return o.hPanel;
   }
   return o.__base.FDuiEditor.panel.call(o, panelCd);
}
MO.FDuiDropEditor_setVisible = function FDuiDropEditor_setVisible(p){
   var o = this;
   var h = o._hPanel;
   var hd = o._hPanel.ownerDocument;
   if(p){
      hd.body.appendChild(h);
   }else{
      hd.body.removeChild(h);
   }
   o.__base.FDuiEditor.setVisible.call(o, p);
}
MO.FDuiDropEditor_dispose = function FDuiDropEditor_dispose(){
   var o = this;
   o._hButtonPanel = MO.Window.Html.free(o._hButtonPanel);
   o._hDropPanel = MO.Window.Html.free(o._hDropPanel);
   o._hDropForm = MO.Window.Html.free(o._hDropForm);
   o.__base.FControl.dispose.call(o);
}
MO.FDuiEdit = function FDuiEdit(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl, MO.MUiPropertyEdit);
   o._inputSize            = MO.Class.register(o, [new MO.APtySize2('_inputSize'), new MO.AGetter('_inputSize')]);
   o._unit                 = MO.Class.register(o, [new MO.APtyString('_unit'), new MO.AGetSet('_unit')]);
   o._listenersDataChanged = MO.Class.register(o, new MO.AListener('_listenersDataChanged'));
   o._hValueForm           = null;
   o._hValueLine           = null;
   o._hInputPanel          = null;
   o._hInput               = null;
   o.onBuildEditValue      = MO.FDuiEdit_onBuildEditValue;
   o.onInputEdit           = MO.Class.register(o, new MO.AEventInputChanged('onInputEdit'), MO.FDuiEdit_onInputEdit);
   o.construct             = MO.FDuiEdit_construct;
   o.formatText            = MO.FDuiEdit_formatText;
   o.formatValue           = MO.FDuiEdit_formatValue;
   o.get                   = MO.FDuiEdit_get;
   o.set                   = MO.FDuiEdit_set;
   o.refreshValue          = MO.FDuiEdit_refreshValue;
   o.refreshStyle          = MO.FDuiEdit_refreshStyle;
   o.dispose               = MO.FDuiEdit_dispose;
   return o;
}
MO.FDuiEdit_onBuildEditValue = function FDuiEdit_onBuildEditValue(event){
   var o = this;
   var hValuePanel = o._hValuePanel;
   var hValueForm = o._hValueForm = MO.Window.Builder.appendTable(hValuePanel);
   var hValueLine = o._hValueLine = MO.Window.Builder.appendTableRow(hValueForm);
   MO.Window.Html.setSize(hValueForm, o._inputSize);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hValueLine);
   o.onBuildEditChange(event);
   var hInputPanel = o._hInputPanel = MO.Window.Builder.appendTableCell(hValueLine);
   var hInput = o._hInput = MO.Window.Builder.appendEdit(hInputPanel);
   o.attachEvent('onInputEdit', hInput, o.onInputEdit);
   if(o._editLength){
      hInput.maxLength = o._editLength;
   }
}
MO.FDuiEdit_onInputEdit = function FDuiEdit_onInputEdit(p){
   var o = this;
   o.refreshValue();
}
MO.FDuiEdit_construct = function FDuiEdit_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2();
}
MO.FDuiEdit_formatText = function FDuiEdit_formatText(value){
   var o = this;
   var result = MO.Lang.String.nvl(value);
   o._dataDisplay = result;
   return result;
}
MO.FDuiEdit_formatValue = function FDuiEdit_formatValue(value){
   return value;
}
MO.FDuiEdit_get = function FDuiEdit_get(){
   var o = this;
   var value = o._hInput.value;
   return value;
}
MO.FDuiEdit_set = function FDuiEdit_set(value){
   var o = this;
   o._dataValue = value;
   var text = MO.Lang.String.nvl(value);
   o._hInput.value = text;
   o.changeSet(false);
}
MO.FDuiEdit_refreshValue = function FDuiEdit_refreshValue(){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiEdit_refreshStyle = function FDuiEdit_refreshStyle(){
   var o = this;
   o.__base.FDuiEditControl.refreshStyle.call(o);
   var inputStyle = null;
   if(o._statusEditable){
      if(o._statusValueHover){
         inputStyle = 'InputHover';
      }else{
         inputStyle = 'InputNormal';
      }
   }else{
      inputStyle = 'InputReadonly';
   }
   var hInput = o._hInput;
   hInput.className = o.styleName(inputStyle);
   hInput.readOnly = !o._statusEditable;
}
MO.FDuiEdit_dispose = function FDuiEdit_dispose(){
   var o = this
   o._inputSize = MO.Lang.Object.dispose(o._inputSize);
   o.__base.FDuiEditControl.dispose.call(o);
}
MO.FDuiEditControl = function FDuiEditControl(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MO.MUiDataValue, MO.MUiDataField, MO.MUiDisplay, MO.MUiEditValue, MO.MUiEditable, MO.MDuiEditChange, MO.MDuiEditDrop);
   o._labelModeCd            = MO.Class.register(o, new MO.APtyString('_labelModeCd'), MO.EUiLabelMode.All);
   o._labelPositionCd        = MO.Class.register(o, new MO.APtyString('_labelPositionCd'), MO.EUiLabelPosition.Left);
   o._labelSize              = MO.Class.register(o, new MO.APtySize2('_labelSize'));
   o._labelAlignCd           = MO.Class.register(o, new MO.APtyString('_labelAlignCd'), MO.EUiAlign.Left);
   o._labelColor             = MO.Class.register(o, new MO.APtyString('_labelColor'));
   o._editSize               = MO.Class.register(o, new MO.APtySize2('_editSize'));
   o._editColor              = MO.Class.register(o, new MO.APtyString('_editColor'));
   o._styleLabelPanel        = MO.Class.register(o, new MO.AStyle('_styleLabelPanel'));
   o._styleEditPanel         = MO.Class.register(o, new MO.AStyle('_styleEditPanel'));
   o._styleValuePanel        = MO.Class.register(o, new MO.AStyle('_styleValuePanel'));
   o._styleValueNormal       = MO.Class.register(o, new MO.AStyle('_styleValueNormal'));
   o._styleValueHover        = MO.Class.register(o, new MO.AStyle('_styleValueHover'));
   o._styleValueReadonly     = MO.Class.register(o, new MO.AStyle('_styleValueReadonly'));
   o._styleInputPanel        = MO.Class.register(o, new MO.AStyle('_styleInputPanel'));
   o._styleInputNormal       = MO.Class.register(o, new MO.AStyle('_styleInputNormal'));
   o._styleInputHover        = MO.Class.register(o, new MO.AStyle('_styleInputHover'));
   o._styleInputReadonly     = MO.Class.register(o, new MO.AStyle('_styleInputReadonly'));
   o._optionValueStyle       = true;
   o._statusValueHover       = false;
   o._progressing            = false;
   o._hLabelPanel            = null;
   o._hLabelForm             = null;
   o._hIconPanel             = null;
   o._hIcon                  = null;
   o._hTextPanel             = null;
   o._hText                  = null;
   o._hEditPanel             = null;
   o._hEditForm              = null;
   o._hValuePanel            = null;
   o.onValueEnter            = MO.Class.register(o, new MO.AEventMouseEnter('onValueEnter'), MO.FDuiEditControl_onValueEnter);
   o.onValueLeave            = MO.Class.register(o, new MO.AEventMouseLeave('onValueLeave'), MO.FDuiEditControl_onValueLeave);
   o.onBuildLabelIcon        = MO.FDuiEditControl_onBuildLabelIcon;
   o.onBuildLabelText        = MO.FDuiEditControl_onBuildLabelText;
   o.onBuildLabel            = MO.FDuiEditControl_onBuildLabel;
   o.onBuildEditValue        = MO.Method.virtual(o, 'onBuildEditValue');
   o.onBuildEdit             = MO.FDuiEditControl_onBuildEdit;
   o.onBuildPanel            = MO.FDuiEditControl_onBuildPanel;
   o.onBuild                 = MO.FDuiEditControl_onBuild;
   o.oeMode                  = MO.FDuiEditControl_oeMode;
   o.oeProgress              = MO.FDuiEditControl_oeProgress;
   o.oeLoadUnit              = MO.FDuiEditControl_oeLoadUnit;
   o.oeSaveUnit              = MO.FDuiEditControl_oeSaveUnit;
   o.construct               = MO.FDuiEditControl_construct;
   o.calculateValueRectangle = MO.FDuiEditControl_calculateValueRectangle;
   o.panel                   = MO.FDuiEditControl_panel;
   o.setLabel                = MO.FDuiEditControl_setLabel;
   o.setEditable             = MO.FDuiEditControl_setEditable;
   o.refreshStyle            = MO.FDuiEditControl_refreshStyle;
   o.dispose                 = MO.FDuiEditControl_dispose;
   return o;
}
MO.FDuiEditControl_onValueEnter = function FDuiEditControl_onValueEnter(event){
   var o = this;
   o._statusValueHover = true;
   o.refreshStyle();
}
MO.FDuiEditControl_onValueLeave = function FDuiEditControl_onValueLeave(event){
   var o = this;
   o._statusValueHover = false;
   o.refreshStyle();
}
MO.FDuiEditControl_onBuildLabelIcon = function FDuiEditControl_onBuildLabelIcon(event){
   var o = this;
   if(o._labelIcon){
      o._hIcon = MO.Window.Builder.appendIcon(o._hIconPanel, null, o._labelIcon);
   }else{
      o._hIcon = MO.Window.Builder.appendIcon(o._hIconPanel, null, 'n', 16, 16);
   }
}
MO.FDuiEditControl_onBuildLabelText = function FDuiEditControl_onBuildLabelText(event){
   var o = this;
   o._hText = MO.Window.Builder.appendSpan(o._hTextPanel, null, o._label);
}
MO.FDuiEditControl_onBuildLabel = function FDuiEditControl_onBuildLabel(event){
   var o = this;
   var hLabelForm = o._hLabelForm = MO.Window.Builder.appendTable(o._hLabelPanel, o.styleName('LabelPanel'));
   var hLabelLine = MO.Window.Builder.appendTableRow(hLabelForm);
   var hIconPanel = o._hIconPanel = MO.Window.Builder.appendTableCell(hLabelLine);
   hIconPanel.width = '20px';
   o.onBuildLabelIcon(event);
   var hTextPanel = o._hTextPanel = MO.Window.Builder.appendTableCell(hLabelLine);
   hTextPanel.noWrap = true;
   o.onBuildLabelText(event);
   MO.Window.Html.setSize(hLabelForm, o._labelSize);
   if(o._labelAlignCd){
      hTextPanel.align = o._labelAlignCd;
      hTextPanel.style.paddingRight = 4;
   }
   if(o._labelColor){
      o._hLabel.style.color = o._labelColor;
   }
}
MO.FDuiEditControl_onBuildEdit = function FDuiEditControl_onBuildEdit(event){
   var o = this;
   var hEditForm = o._hEditForm = MO.Window.Builder.appendTable(o._hEditPanel, o.styleName('EditPanel'));
   var hEditLine = o._hEditLine = MO.Window.Builder.appendTableRow(hEditForm);
   var hValuePanel = o._hValuePanel = MO.Window.Builder.appendTableCell(hEditLine);
   o.attachEvent('onValueEnter', hValuePanel);
   o.attachEvent('onValueLeave', hValuePanel);
   o.onBuildEditValue(event);
   MO.Window.Html.setSize(hEditForm, o._editSize);
}
MO.FDuiEditControl_onBuildPanel = function FDuiEditControl_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.Window.Builder.createTable(event, o.styleName('Panel'));
}
MO.FDuiEditControl_onBuild = function FDuiEditControl_onBuild(event){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, event);
   var hPanel = o._hPanel;
   var labelModeCd = o._labelModeCd;
   var hLabelPanel = null;
   var hEditPanel = null;
   if(labelModeCd == MO.EUiLabelMode.Label){
      hLabelPanel = MO.Window.Builder.appendTableCell(MO.Window.Builder.appendTableRow(hPanel));
   }else if(labelModeCd == MO.EUiLabelMode.Hidden){
      hEditPanel = MO.Window.Builder.appendTableCell(MO.Window.Builder.appendTableRow(hPanel));
   }else{
      var labelPositionCd = o._labelPositionCd;
      if(labelPositionCd == MO.EUiLabelPosition.Top){
         hLabelPanel = MO.Window.Builder.appendTableRowCell(hPanel);
         hEditPanel = MO.Window.Builder.appendTableRowCell(hPanel);
      }else if(labelPositionCd == MO.EUiLabelPosition.Right){
         var hRow = MO.Window.Builder.appendTableRow(hPanel);
         hEditPanel = MO.Window.Builder.appendTableCell(hRow);
         hLabelPanel = MO.Window.Builder.appendTableCell(hRow);
      }else if(labelPositionCd == MO.EUiLabelPosition.Bottom){
         hEditPanel = MO.Window.Builder.appendTableRowCell(hPanel);
         hLabelPanel = MO.Window.Builder.appendTableRowCell(hPanel);
      }else{
         var hRow = MO.Window.Builder.appendTableRow(hPanel);
         hLabelPanel = MO.Window.Builder.appendTableCell(hRow);
         hEditPanel = MO.Window.Builder.appendTableCell(hRow);
      }
   }
   o._hLabelPanel = hLabelPanel;
   o._hEditPanel = hEditPanel;
   if(hLabelPanel){
      o.onBuildLabel(event);
      hLabelPanel.appendChild(o._hLabelForm);
      o.setLabel(o._label);
   }
   if(hEditPanel){
      o.onBuildEdit(event);
   }
   o.refreshStyle();
}
MO.FDuiEditControl_oeMode = function FDuiEditControl_oeMode(event){
   var o = this;
   o.__base.FDuiControl.oeMode.call(o, event);
   o.__base.MUiDisplay.oeMode.call(o, event);
   o.__base.MUiEditable.oeMode.call(o, event);
   return MO.EEventStatus.Stop;
}
MO.FDuiEditControl_oeProgress = function FDuiEditControl_oeProgress(event){
   var o = this;
   if(o._progressing && event.enable){
      return MO.EEventStatus.Stop;
   }
   o._progressing = event.enable;
   if(event.enable){
      var ea = o._editable;
      o.setEditable(false);
      o._editable = ea;
   }else{
      o.setEditable(o._editable);
   }
   return MO.EEventStatus.Stop;
}
MO.FDuiEditControl_oeLoadUnit = function FDuiEditControl_oeLoadUnit(event){
   var o = this;
   var unit = event.unit;
   var dataName = o._dataName;
   if(!MO.Lang.String.isEmpty(dataName)){
      var text = unit.get(dataName);
      o.set(text);
   }
   return MO.EEventStatus.Stop;
}
MO.FDuiEditControl_oeSaveUnit = function FDuiEditControl_oeSaveUnit(event){
   var o = this;
   var unit = event.unit;
   var dataName = o._dataName;
   if(!MO.Lang.String.isEmpty(dataName)){
      var text = o.text();
      if(!MO.Lang.String.isEmpty(text)){
         unit.set(dataName, text)
      }
   }
   return MO.EEventStatus.Stop;
}
MO.FDuiEditControl_construct = function FDuiEditControl_construct(){
   var o = this;
   o.__base.FDuiControl.construct.call(o);
   o.__base.MDuiEditChange.construct.call(o);
   o.__base.MDuiEditDrop.construct.call(o);
   o._labelSize = new MO.SSize2(0, 0);
   o._editSize = new MO.SSize2(0, 0);
}
MO.FDuiEditControl_panel = function FDuiEditControl_panel(panelCd){
   var o = this;
   if(MO.EPanel.Edit == panelCd){
      return o._hEdit;
   }else if(MO.EPanel.Focus == panelCd){
      return o._hEdit;
   }
   return o.__base.FDuiControl.panel.call(o, panelCd);
}
MO.FDuiEditControl_setLabel = function FDuiEditControl_setLabel(value){
   var o = this;
   o._label = value;
   if(o._hText){
      o._hText.innerHTML = MO.Lang.String.nvl(value);
   }
}
MO.FDuiEditControl_setEditable = function FDuiEditControl_setEditable(value){
   var o = this;
   o._statusEditable = value;
   o.refreshStyle();
}
MO.FDuiEditControl_calculateValueRectangle = function FDuiEditControl_calculateValueRectangle(rectangle){
   var o = this;
   if(!rectangle){
      rectangle = new MO.SRectangle();
   }
   var hPanel = o._hValuePanel;
   var position = MO.Window.Html.clientPosition(hPanel);
   rectangle.left = position.x;
   rectangle.top = position.y;
   rectangle.width = hPanel.offsetWidth;
   rectangle.height = hPanel.offsetHeight;
   return rectangle;
}
MO.FDuiEditControl_refreshStyle = function FDuiEditControl_refreshStyle(){
   var o = this;
   if(o._optionValueStyle){
      var hForm = o._hValueForm;
      if(hForm){
         if(o._statusEditable){
            if(o._statusValueHover){
               hForm.className = o.styleName('ValueHover');
            }else{
               hForm.className = o.styleName('ValueNormal');
            }
         }else{
            hForm.className = o.styleName('ValueReadonly');
         }
      }
   }
}
MO.FDuiEditControl_dispose = function FDuiEditControl_dispose(){
   var o = this;
   o._labelSize = MO.Lang.Object.dispose(o._labelSize);
   o._editSize = MO.Lang.Object.dispose(o._editSize);
   o._hLabelPanel = MO.Window.Html.free(o._hLabelPanel);
   o._hLabelForm = MO.Window.Html.free(o._hLabelForm);
   o._hIconPanel = MO.Window.Html.free(o._hIconPanel);
   o._hIcon = MO.Window.Html.free(o._hIcon);
   o._hTextPanel = MO.Window.Html.free(o._hTextPanel);
   o._hText = MO.Window.Html.free(o._hText);
   o._hEditPanel = MO.Window.Html.free(o._hEditPanel);
   o._hEditForm = MO.Window.Html.free(o._hEditForm);
   o._hValuePanel = MO.Window.Html.free(o._hValuePanel);
   o._hDropPanel = MO.Window.Html.free(o._hDropPanel);
   o.__base.MDuiEditDrop.dispose.call(o);
   o.__base.MDuiEditChange.dispose.call(o);
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiEditor = function FDuiEditor(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MO.MDuiFocus);
   o._visible       = false;
   o._statusVisible = false;
   o._styleEdit     = MO.Class.register(o, new MO.AStyle('_styleEdit'));
   o._statusEditing = false;
   o._source        = null;
   o._hEdit         = null;
   o.lsnEditBegin   = null;
   o.lsnEditCancel  = null;
   o.lsnEditEnd     = null;
   o.onEditKeyDown  = MO.Class.register(o, new MO.AEventKeyDown('onEditKeyDown'));
   o.onEditKeyPress = MO.Class.register(o, new MO.AEventKeyPress('onEditKeyPress'));
   o.onEditKeyUp    = MO.Class.register(o, new MO.AEventKeyUp('onEditKeyUp'));
   o.onEditChange   = MO.Class.register(o, new MO.AEventChange('onEditChange'));
   o.onEditBegin    = MO.FDuiEditor_onEditBegin;
   o.onEditChanged  = MO.FDuiEditor_onEditChanged;
   o.onEditEnd      = MO.FDuiEditor_onEditEnd;
   o.onBuildPanel   = MO.FDuiEditor_onBuildPanel;
   o.onBuild        = MO.FDuiEditor_onBuild;
   o.get            = MO.Method.virtual(o, 'get');
   o.set            = MO.Method.virtual(o, 'set');
   o.doBlur         = MO.FDuiEditor_doBlur;
   o.panel          = MO.FDuiEditor_panel;
   o.linkControl    = MO.FDuiEditor_linkControl;
   o.editBegin      = MO.FDuiEditor_editBegin;
   o.editCancel     = MO.FDuiEditor_editCancel;
   o.editEnd        = MO.FDuiEditor_editEnd;
   o.reset          = MO.FDuiEditor_reset;
   o.setVisible     = MO.FDuiEditor_setVisible;
   o.dispose        = MO.FDuiEditor_dispose;
   return o;
}
MO.FDuiEditor_onEditBegin = function FDuiEditor_onEditBegin(){
   this.editBegin();
}
MO.FDuiEditor_onEditChanged = function FDuiEditor_onEditChanged(){
   var o = this;
   var g = o.storage = MO.Lang.Object.nvlObj(o.storage);
   if(g.value == o.value()){
      if(o.changed){
         o.changed = false;
      }
   }else{
      if(!o.changed){
         o.changed = true;
      }
   }
}
MO.FDuiEditor_onEditEnd = function FDuiEditor_onEditEnd(){
   var o = this;
   var s = o._source;
   o.hide();
   if(o.lsnEditEnd){
      o.lsnEditEnd.process(o);
   }
   s._editor = null;
   o._source = null;
   o._statusEditing = false;
}
MO.FDuiEditor_onBuildPanel = function FDuiEditor_onBuildPanel(p){
   var o = this;
   var h = o._hPanel = MO.Window.Builder.createSpan(p);
   h.__linker = o;
}
MO.FDuiEditor_onBuild = function FDuiEditor_onBuild(p){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, p);
   o._hPanel.style.zIndex = MO.EUiLayer.Editor;
}
MO.FDuiEditor_get = function FDuiEditor_get(name){
}
MO.FDuiEditor_set = function FDuiEditor_set(name, value){
}
MO.FDuiEditor_doBlur = function FDuiEditor_doBlur(){
   var o = this;
   var s = o._source;
   if(s){
      o.editCancel();
      if(MO.Class.isClass(s, MO.MDuiFocus)){
         s.doBlur();
      }
   }
}
MO.FDuiEditor_panel = function FDuiEditor_panel(panelCd){
   var o = this;
   if(panelCd == MO.EPanel.Edit){
      return o._hEdit;
   }else if(panelCd == MO.EPanel.Focus){
      return o._hEdit;
   }
   return o.__base.FDuiControl.panel.call(o, panelCd);
}
MO.FDuiEditor_linkControl = function FDuiEditor_linkControl(c){
   var o = this;
   o._source = c;
}
MO.FDuiEditor_editBegin = function FDuiEditor_editBegin(){
   var o = this;
   var s = o._source;
   if(o.lsnEditCancel){
      o.lsnEditCancel.process(o);
   }
   s._editor = o;
   o._statusEditing = true;
}
MO.FDuiEditor_editCancel = function FDuiEditor_editCancel(){
   var o = this;
   var s = o._source;
   o.hide();
   if(o.lsnEditCancel){
      o.lsnEditCancel.process(o);
   }
   s._editor = null;
   o._source = null;
   o._statusEditing = false;
}
MO.FDuiEditor_editEnd = function FDuiEditor_editEnd(){
   this.onEditEnd();
}
MO.FDuiEditor_reset = function FDuiEditor_reset(){
   var o = this;
   o.lsnEditBegin = null;
   o.lsnEditCancel = null;
   o.lsnEditEnd = null;
}
MO.FDuiEditor_setVisible = function FDuiEditor_setVisible(p){
   var o = this;
   o.__base.FDuiControl.setVisible.call(o, p);
   if(p){
      o.editBegin();
      o.focus();
   }
}
MO.FDuiEditor_dispose = function FDuiEditor_dispose(){
   var o = this;
   o.__base.FDuiControl.dispose.call(o);
   o._hEdit = null;
}
MO.FDuiFile = function FDuiFile(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl, MO.MListenerDataChanged);
   o._inputSize       = MO.Class.register(o, new MO.APtySize2('_inputSize'));
   o._unit            = MO.Class.register(o, new MO.APtyString('_unit'));
   o._styleValuePanel = MO.Class.register(o, new MO.AStyle('_styleValuePanel'));
   o._styleInputPanel = MO.Class.register(o, new MO.AStyle('_styleInputPanel'));
   o._styleInput      = MO.Class.register(o, new MO.AStyle('_styleInput'));
   o._styleFile       = MO.Class.register(o, new MO.AStyle('_styleFile'));
   o._styleBrowser    = MO.Class.register(o, new MO.AStyle('_styleBrowser'));
   o._hValueForm      = null;
   o._hValueLine      = null;
   o._hInputPanel     = null;
   o._hInput          = null;
   o.onBuildEditValue = MO.FDuiFile_onBuildEditValue;
   o.onFileChange     = MO.Class.register(o, new MO.AEventChange('onFileChange'), MO.FDuiFile_onFileChange);
   o.construct        = MO.FDuiFile_construct;
   o.formatDisplay    = MO.FDuiFile_formatDisplay;
   o.formatValue      = MO.FDuiFile_formatValue;
   o.get              = MO.FDuiFile_get;
   o.set              = MO.FDuiFile_set;
   o.refreshValue     = MO.FDuiFile_refreshValue;
   return o;
}
MO.FDuiFile_onBuildEditValue = function FDuiFile_onBuildEditValue(p){
   var o = this;
   var hp = o._hValuePanel;
   hp.className = o.styleName('ValuePanel');
   var hf = o._hValueForm = MO.Window.Builder.appendTable(hp);
   hf.width = '100%';
   var hl = o._hValueLine = MO.Window.Builder.appendTableRow(hf);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hl);
   o.onBuildEditChange(p);
   var hInputPanel = o._hInputPanel = MO.Window.Builder.appendTableCell(hl,  o.styleName('InputPanel'));
   var he = o._hInputEdit = MO.Window.Builder.appendEdit(hInputPanel, o.styleName('Input'));
   var hFile = o._hInput = MO.Window.Builder.appendFile(hInputPanel, o.styleName('File'));
   o.attachEvent('onFileChange', hFile);
   var hBrowserPanel = o._hBrowserPanel = MO.Window.Builder.appendTableCell(o._hEditLine);
   hBrowserPanel.style.paddingLeft = '4px';
   var hBrowser = o._hBrowser = MO.Window.Builder.appendButton(hBrowserPanel, o.styleName('Browser'));
   hBrowser.value = '浏览...';
   MO.Window.Html.setSize(hInputPanel, o._inputSize);
   MO.Window.Html.setSize(hFile, o._inputSize);
   if(o._editLength){
      he.maxLength = o._editLength;
   }
}
MO.FDuiFile_onFileChange = function FDuiFile_onFileChange(event){
   var o = this;
   var hFile = o._hInput;
   if(hFile.files){
      if(hFile.files.length){
         var file = hFile.files[0];
         var name = file.name;
         o._hInputEdit.value = name + ' (' + file.size + 'byte)';
         o.processDataChangedListener(event);
      }
   }
}
MO.FDuiFile_construct = function FDuiFile_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2(120, 0);
}
MO.FDuiFile_formatDisplay = function FDuiFile_formatDisplay(p){
   var o = this;
   var r = MO.Lang.String.nvl(p);
   o._dataDisplay = r;
   return r;
}
MO.FDuiFile_formatValue = function FDuiFile_formatValue(p){
   return p;
}
MO.FDuiFile_get = function FDuiFile_get(){
   var o = this;
   var r = o.__base.FDuiEditControl.get.call(o);
   var r = o._hInput.value;
   return r;
}
MO.FDuiFile_set = function FDuiFile_set(p){
   var o = this;
   o.__base.FDuiEditControl.set.call(o, p);
   o._hInput.value = MO.Lang.String.nvl(p);
}
MO.FDuiFile_refreshValue = function FDuiFile_refreshValue(){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiForm = function FDuiForm(o){
   o = MO.Class.inherits(this, o, MO.FDuiLayout, MO.MUiDataContainer, MO.MUiDisplayContrainer, MO.MDuiDescribeFrame);
   o._logicGroup    = MO.Class.register(o, [new MO.APtyString('_logicGroup'), new MO.AGetter('_logicGroup')]);
   o._logicCode     = MO.Class.register(o, [new MO.APtyString('_logicCode'), new MO.AGetter('_logicCode')]);
   o._logicService  = MO.Class.register(o, [new MO.APtyString('_logicService'), new MO.AGetter('_logicService')]);
   o._logicAction   = MO.Class.register(o, [new MO.APtyString('_logicAction'), new MO.AGetter('_logicAction')]);
   o.construct      = MO.FDuiForm_construct;
   o.processMode    = MO.FDuiForm_processMode;
   o.dispose        = MO.FDuiForm_dispose;
   return o;
}
MO.FDuiForm_construct = function FDuiForm_construct(){
   var o = this;
   o.__base.FDuiLayout.construct.call(o);
   o.__base.MUiDisplayContrainer.construct.call(o);
}
MO.FDuiForm_dispose = function FDuiForm_dispose(){
   var o = this;
   o._hEdit = MO.Window.Html.free(o._hEdit);
   o._hDrop = MO.Window.Html.free(o._hDrop);
   o.__base.MUiDisplayContrainer.dispose.call(o);
   o.__base.FDuiLayout.dispose.call(o);
}
MO.FDuiForm_onMouseDown = function FDuiForm_onMouseDown(p){
   var o = this;
}
MO.FDuiForm_onLoadDataset = function FDuiForm_onLoadDataset(ds){
   var o = this;
   o.doUpdate(o.dsViewer.current());
}
MO.FDuiForm_onLoadDatasetEnd = function FDuiForm_onLoadDatasetEnd(){
   var o = this;
   o.topControl().topResize();
   o.psProgress(false);
}
MO.FDuiForm_isDataChanged = function FDuiForm_isDataChanged(){
   var o = this;
   var ps = o.allDataComponents();
   if(!ps.isEmpty()){
      var pc = ps.count;
      for(var n=0; n<pc; n++){
         var p = ps.value(n);
         if(p.isDataChanged()){
            return true;
         }
      }
   }
}
MO.FDuiForm_getFormLink = function FDuiForm_getFormLink(t){
   var o = this;
   if(EFormLink.Form == t){
      return o.name;
   }else if(EFormLink.Table == t){
      return o.formName;
   }
   RMessage.fatal(o, null, 'Form link is invalid. (type={0})', t);
}
MO.FDuiForm_allDataComponents = function FDuiForm_allDataComponents(p, m){
   var o = this;
   if(!p){
      p = o;
   }
   if(!m){
      m = o._dataComponents;
   }
   var cs = p.components;
   if(cs){
      var cc = cs.count;
      for(var n = 0; n<cc; n++){
         var c = cs.value(n);
         if(!MO.Class.isClass(c, MDataset)){
            if(MO.Class.isClass(c, MValue)){
               m.set(c.dataName, c);
            }
            o.allDataComponents(c, m);
         }
      }
   }
   return m;
}
MO.FDuiForm_get = function FDuiForm_get(n){
   var ps = this.allDataComponents();
   if(ps){
      var p = ps.get(n);
      if(p){
         return p.get();
      }
   }
}
MO.FDuiForm_set = function FDuiForm_set(n){
   var ps = this.allDataComponents();
   if(ps){
      var p = ps.get(n);
      if(p){
         return p.reget();
      }
   }
}
MO.FDuiForm_set = function FDuiForm_set(n, v){
   var ps = this.allDataComponents();
   if(ps){
      var p = ps.get(n);
      if(p){
         p.set(v);
      }
   }
}
MO.FDuiForm_getDataCodes = function FDuiForm_getDataCodes(){
   var o = this;
   var e = o._codeEvent;
   e.values = new TAttributes();
   o.process(e);
   return e.values;
}
MO.FDuiForm_getCurrentRow = function FDuiForm_getCurrentRow(){
   return this.saveValue();
}
MO.FDuiForm_getSelectedRows = function FDuiForm_getSelectedRows(){
   var ls = new TList();
   ls.push(this.saveValue());
   return ls;
}
MO.FDuiForm_getCurrentRows = function FDuiForm_getCurrentRows(){
   var o = this;
   var ls = new TList();
   var r = new TRow();
   o.toDeepAttributes(r);
   o.saveValue(r);
   ls.push(r);
   return ls;
}
MO.FDuiForm_getChangedRows = function FDuiForm_getChangedRows(){
   var o = this;
   var ls = new TList();
   if(o.isDataChanged()){
      var r = new TRow();
      o.toDeepAttributes(r);
      o.saveValue(r);
      ls.push(r);
   }
   return ls;
}
MO.FDuiForm_getRows = function FDuiForm_getRows(){
   var ls = new TList();
   ls.push(this.saveValue());
   return ls;
}
MO.FDuiForm_clearValue = function FDuiForm_clearValue(){
   this.process(this._clearEvent);
}
MO.FDuiForm_resetValue = function FDuiForm_resetValue(){
   this.process(this._resetEvent);
}
MO.FDuiForm_loadValue = function FDuiForm_loadValue(r, m){
   if(r){
      var o = this;
      var e = o._loadEvent;
      e.viewer = o.dsViewer;
      e.store = m;
      e.values = r;
      o.process(e);
   }
}
MO.FDuiForm_saveValue = function FDuiForm_saveValue(r, m){
   var o = this;
   if(!r){
      r = new TRow();
   }
   var e = o._saveEvent;
   e.viewer = o.dsViewer;
   e.store = m;
   e.values = r;
   o.process(e);
   r.set('_status', o._dataStatusCd);
   return r;
}
MO.FDuiForm_recordValue = function FDuiForm_recordValue(){
   this.process(this._recordEvent);
}
MO.FDuiForm_toAttributes = function FDuiForm_toAttributes(r, m){
   return this.saveValue(r, m);
}
MO.FDuiForm_focus = function FDuiForm_focus(){
   var o = this;
   o.__base.MDuiFocus.focus.call(o);
   o.focusControl();
   RConsole.find(FFocusConsole).focusClass(MDataset, o);
}
MO.FDuiForm_dsUpdate = function FDuiForm_dsUpdate(u, v){
   var o = this;
   if(u){
      o.psProgress(true);
      o.psMode(EMode.Update);
      var g = new TDatasetFetchArg(o.name, o.formId, o.dsPageSize, 0);
      g.form = o;
      g.reset = true;
      o.dsSearchs.clear();
      if(u){
         o.dsSearchs.push(new TSearchItem('OUID', u));
      }
      if(v){
         o.dsSearchs.push(new TSearchItem('OVER', v));
      }
      g.searchs = o.dsSearchs;
      g.values.append(o.dsValues);
      g.callback = new TInvoke(o, o.onDsUpdate);
      if(o.onDsUpdateCheck(g)){
         RConsole.find(FDatasetConsole).fetch(g);
      }
      return;
   }
   return o.__base.MDataset.dsUpdate.call(o, u, v)
}
MO.FDuiForm_setEditable = function FDuiForm_setEditable(v){
   var ps = this.allDataComponents();
   if(ps){
      var pc = ps.count;
      for(var n = 0; n < pc; n++){
         var p = ps.value(n);
         p.setEditable(v);
      }
   }
}
MO.FDuiForm_doPrepare = function FDuiForm_doPrepare(v){
   var o = this;
   o._dataStatusCd = ERowStatus.Insert;
   o.resetValue();
   o.loadValue(v);
   o.recordValue();
   o.dsLoaded();
}
MO.FDuiForm_doUpdate = function FDuiForm_doUpdate(v){
   var o = this;
   o._dataStatusCd = ERowStatus.Update;
   o.clearValue();
   o.loadValue(v);
   o.recordValue();
   o.dsLoaded();
}
MO.FDuiForm_doDelete = function FDuiForm_doDelete(v){
   var o = this;
   o._dataStatusCd = ERowStatus.Delete;
   o.clearValue();
   o.loadValue(v);
   o.recordValue();
   o.dsLoaded();
}
MO.FDuiForm_allNameComponents = function FDuiForm_allNameComponents(f, p, m){
   var o = this;
   var vs = o._nameComponents;
   if(!f && vs){
      return vs;
   }
   if(!vs){
      vs = o._nameComponents = new TMap();
   }
   if(f){
      vs.clear();
   }
   if(!p){
      p = this;
   }
   if(!m){
      m = vs;
   }
   var cs = p.components;
   if(cs){
      var cc = cs.count;
      for(var n = 0; n<cc; n++){
         var c = cs.value(n);
         if(!MO.Class.isClass(c, MDataset)){
            if(MO.Class.isClass(c, MValue)){
               m.set(c.name, c);
            }
            o.allNameComponents(false, c, m);
         }
      }
   }
   return vs;
}
MO.FDuiForm_onLoaded = function FDuiForm_onLoaded(){
   var o = this.form;
   var doc = this.document;
   if(o && doc){
      RControl.build(o, doc.root());
      o.isLoading = false;
      o.lsnsLoaded.process(o);
   }
}
MO.FDuiForm_onDsFetchEnd = function FDuiForm_onDsFetchEnd(){
   var o = this;
   var v = o.dsCurrent();
   if(v){
      o.loadValue(v);
   }
}
MO.FDuiForm_onDsUpdateBegin = function FDuiForm_onDsUpdateBegin(){
   var o = this;
   var v = o.dsCurrent();
   if(v){
      o.saveValue(v);
   }
}
MO.FDuiForm_onDsUpdateEnd = function FDuiForm_onDsUpdateEnd(){
   var o = this;
   var v = o.dsCurrent();
   if(v){
      o.loadValue(v);
   }
}
MO.FDuiForm_connect = function FDuiForm_connect(service, type, action, attrs){
   var doc = new TXmlDocument();
   var root = doc.root();
   root.set('type', type);
   root.set('name', this.name);
   root.set('action', action);
   root.create('Attributes').value = attrs;
   var event = new TEvent(this, EXmlEvent.Send);
   event.url = service;
   event.document = doc;
   event.form = this;
   event.onLoad = this.onLoaded;
   RConsole.find(FXmlConsole).process(event);
}
MO.FDuiForm_loadDocument = function FDuiForm_loadDocument(doc){
   if(doc){
      var root = doc.root();
      if(root.isName('Table')){
         var o = this;
         o.loadConfig(root);
         o.buildColumns(root);
         o.buildRows(root);
      }
   }
}
MO.FDuiForm_testStatus = function FDuiForm_testStatus(t){
   var o = this;
   var r = o.__base.MDataset.testStatus.call(o, t);
   if(EDataAction.Fetch == t){
      return true;
   }else if(EDataAction.Fetch == t){
      return true;
   }else if(EDataAction.Search== t){
      return true;
   }else if(EDataAction.First == t){
      return false;
   }else if(EDataAction.Prior == t){
      return false;
   }else if(EDataAction.Next == t){
      return false;
   }else if(EDataAction.Last == t){
      return false;
   }else if(EDataAction.Action == t){
      return true;
   }
   return r;
}
MO.FDuiForm_hasAction = function FDuiForm_hasAction(){
   var o = this;
   var cs = o.components;
   var ct = cs.count;
   for(var n = 0; n < ct; n++){
      var c = cs.value(n);
      if(MO.Class.isClass(c, FDataAction)){
         return true;
      }
   }
   return false;
}
MO.FDuiFrame = function FDuiFrame(o){
   o = MO.Class.inherits(this, o, MO.FDuiLayout);
   return o;
}
MO.FDuiIconPicker = function FDuiIconPicker(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl, MO.MUiPropertyEdit);
   o._inputSize            = MO.Class.register(o, new MO.APtySize2('_inputSize'));
   o._unit                 = MO.Class.register(o, new MO.APtyString('_unit'));
   o._listenersDataChanged = MO.Class.register(o, new MO.AListener('_listenersDataChanged', MO.EEvent.DataChanged));
   o._hValueForm           = null;
   o._hValueLine           = null;
   o._hInputPanel          = null;
   o._hInput               = null;
   o.onBuildEditValue      = MO.FDuiIconPicker_onBuildEditValue;
   o.onInputEdit           = MO.Class.register(o, new MO.AEventInputChanged('onInputEdit'), MO.FDuiIconPicker_onInputEdit);
   o.construct             = MO.FDuiIconPicker_construct;
   o.formatText            = MO.FDuiIconPicker_formatText;
   o.formatValue           = MO.FDuiIconPicker_formatValue;
   o.get                   = MO.FDuiIconPicker_get;
   o.set                   = MO.FDuiIconPicker_set;
   o.setEditAble           = MO.FDuiIconPicker_setEditAble;
   o.refreshValue          = MO.FDuiIconPicker_refreshValue;
   o.refreshStyle          = MO.FDuiIconPicker_refreshStyle;
   o.dispose               = MO.FDuiIconPicker_dispose;
   return o;
}
MO.FDuiIconPicker_onBuildEditValue = function FDuiIconPicker_onBuildEditValue(event){
   var o = this;
   var hValuePanel = o._hValuePanel;
   var hValueForm = o._hValueForm = MO.Window.Builder.appendTable(hValuePanel);
   var hValueLine = o._hValueLine = MO.Window.Builder.appendTableRow(hValueForm);
   MO.Window.Html.setSize(hValueForm, o._inputSize);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hValueLine);
   o.onBuildEditChange(event);
   var hInputPanel = o._hInputPanel = MO.Window.Builder.appendTableCell(hValueLine);
   var hInput = o._hInput = MO.Window.Builder.appendEdit(hInputPanel);
   o.attachEvent('onInputEdit', hInput, o.onInputEdit);
   if(o._editLength){
      hInput.maxLength = o._editLength;
   }
}
MO.FDuiIconPicker_onInputEdit = function FDuiIconPicker_onInputEdit(p){
   var o = this;
   o.refreshValue();
}
MO.FDuiIconPicker_construct = function FDuiIconPicker_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2(0, 0);
}
MO.FDuiIconPicker_formatText = function FDuiIconPicker_formatText(value){
   var o = this;
   var result = MO.Lang.String.nvl(value);
   o._dataDisplay = result;
   return result;
}
MO.FDuiIconPicker_formatValue = function FDuiIconPicker_formatValue(value){
   return value;
}
MO.FDuiIconPicker_get = function FDuiIconPicker_get(){
   var o = this;
   var value = o._hInput.value;
   return value;
}
MO.FDuiIconPicker_set = function FDuiIconPicker_set(value){
   var o = this;
   o._dataValue = value;
   var text = MO.Lang.String.nvl(value);
   o._hInput.value = text;
   o.changeSet(false);
}
MO.FDuiIconPicker_setEditAble = function FDuiIconPicker_setEditAble(flag){
   var o = this;
   o.__base.FDuiEditControl.setEditAble.call(o, flag);
   o._hInput.readOnly = !flag;
}
MO.FDuiIconPicker_refreshValue = function FDuiIconPicker_refreshValue(){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiIconPicker_refreshStyle = function FDuiIconPicker_refreshStyle(){
   var o = this;
   o.__base.FDuiEditControl.refreshStyle.call(o);
   var inputStyle = null;
   if(o._statusEditable){
      if(o._statusValueHover){
         inputStyle = 'InputHover';
      }else{
         inputStyle = 'InputNormal';
      }
   }else{
      inputStyle = 'InputReadonly';
   }
   var hInput = o._hInput;
   hInput.className = o.styleName(inputStyle);
   hInput.readOnly = !o._statusEditable;
}
MO.FDuiLabel = function FDuiLabel(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl);
   o.onBuild = MO.FDuiLabel_onBuild;
   o.get     = MO.FDuiLabel_get;
   o.set     = MO.FDuiLabel_set;
   return o;
}
MO.FDuiLabel_onBuild = function FDuiLabel_onBuild(event){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, event);
}
MO.FDuiLabel_get = function FDuiLabel_get(){
   return this._hPanel.innerHTML;
}
MO.FDuiLabel_set = function FDuiLabel_set(value){
   this._hPanel.innerHTML = value;
}
MO.FDuiLayout = function FDuiLayout(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer);
   o._styleForm         = MO.Class.register(o, new MO.AStyle('_styleForm'));
   o._styleControlPanel = MO.Class.register(o, new MO.AStyle('_styleControlPanel'));
   o._lastSplit      = null;
   o._hPanelForm     = null;
   o._hContainer     = null;
   o._hPanelTable    = null;
   o._hPanelLine     = null;
   o.onBuildPanel    = MO.FDuiLayout_onBuildPanel;
   o.onDesignBegin   = MO.FDuiLayout_onDesignBegin;
   o.onDesignEnd     = MO.FDuiLayout_onDesignEnd;
   o.oeDesign        = MO.FDuiLayout_oeDesign;
   o.oeResize        = MO.FDuiLayout_oeResize;
   o.oeRefresh       = MO.FDuiLayout_oeRefresh;
   o.insertPosition  = MO.FDuiLayout_insertPosition;
   o.moveChild       = MO.FDuiLayout_moveChild;
   o.innerAppendLine = MO.FDuiLayout_innerAppendLine;
   o.appendChild     = MO.FDuiLayout_appendChild;
   o.resize          = MO.FDuiLayout_resize;
   o.dispose         = MO.FDuiLayout_dispose;
   return o;
}
MO.FDuiLayout_onBuildPanel = function FDuiLayout_onBuildPanel(event){
   var o = this;
   var h = o._hPanel = o._hPanelForm = MO.Window.Builder.createTable(event, o.styleName('Form'), null, 0, 1);
   if(o._layoutCd == MO.EUiLayout.Design){
      var hr = MO.Window.Builder.appendTableRow(h);
      var hc = MO.Window.Builder.appendTableCell(hr);
      o._hContainer = hc;
   }
}
MO.FDuiLayout_onDesignBegin = function FDuiLayout_onDesignBegin(){
   var o = this;
   o.__base.MDesign.onDesignBegin.call(o);
}
MO.FDuiLayout_onDesignEnd = function FDuiLayout_onDesignEnd(){
   var o = this;
   o.__base.MDesign.onDesignEnd.call(o);
}
MO.FDuiLayout_oeDesign = function FDuiLayout_oeDesign(p){
   var o = this;
   o.__base.FDuiContainer.oeDesign.call(o, p);
   if(p.isAfter()){
      switch(p.layoutCd){
         case MO.EDesign.Move:
            break;
         case MO.EDesign.Border:
            if(event.flag){
               o._hPanel.border = 1;
               o._hPanel.style.border = '1 solid red';
            }else{
               o._hPanel.border = 0;
               o._hPanel.style.border = null;
            }
            break;
      }
   }
}
MO.FDuiLayout_oeResize = function FDuiLayout_oeResize(p){
   var o = this;
   o.__base.FDuiContainer.oeResize.call(o, p);
   if(p.isAfter()){
      o.resize();
   }
}
MO.FDuiLayout_oeRefresh = function FDuiLayout_oeRefresh(p){
   var o = this;
   o.__base.FDuiContainer.oeDesign.call(o, p);
   if(p.isAfter()){
      o.resize();
   }
}
MO.FDuiLayout_insertPosition = function FDuiLayout_insertPosition(controlSource, controlTarget, index, copy){
   var o = this;
   var components = o._components;
   var controls = o._controls;
   components.removeValue(controlSource);
   controls.removeValue(controlSource);
   if(controlTarget){
      var index = components.indexOfValue(controlTarget);
      components.insert(index + index, controlSource.name, controlSource);
      var index = controls.indexOfValue(controlTarget);
      controls.insert(index + index, controlSource.name, controlSource);
   }else{
      components.set(controlSource.name, controlSource);
      controls.set(controlSource.name, controlSource);
   }
}
MO.FDuiLayout_moveChild = function FDuiLayout_moveChild(cf, ct, pos, copy){
   if(!(cf && ct && pos) || (cf == ct)){
      return;
   }
   var o = this;
   var hPanel = o._hPanel;
   var moved = false;
   var cfh = MO.Class.isClass(cf, MO.MDuiHorizontal);
   var hCfTd = MO.Window.Html.parent(cf._hPanel, 'TD');
   var hCfTab = MO.Window.Html.parent(cf._hPanel, 'TABLE');
   var cth = MO.Class.isClass(ct, MO.MDuiHorizontal);
   var hTd = MO.Window.Html.parent(ct._hPanel, 'TD');
   var hTable = MO.Window.Html.parent(hTd, 'TABLE');
   switch(pos){
      case EPosition.Before:
         var hRow = hTable.rows[0];
         for(var n = 0; n < hRow.cells.length; n++){
            if(hRow.cells[n] == hTd){
               var hCell = MO.Window.Builder.appendTableCell(hRow, null, hTd.cellIndex);
               hCell.appendChild(cf._hPanel);
               o.insertPosition(cf, ct, 0, copy);
               cf.nowrap = true;
               cf._hPanelLine = hTable;
               moved = true;
               break;
            }
         }
         break;
      case EPosition.After:
         var hRow = hTable.rows[0];
         for(var n = 0; n < hRow.cells.length; n++){
            if(hRow.cells[n] == hTd){
               var hCfTd = MO.Window.Html.parent(cf._hPanel, 'TD');
               var hCell = MO.Window.Builder.appendTableCell(hRow, null, hTd.cellIndex + 1);
               hCell.appendChild(cf._hPanel);
               o.insertPosition(cf, ct, 1, copy);
               cf.nowrap = false;
               cf._hPanelLine = hTable;
               ct.nowrap = true;
               moved = true;
               break;
            }
         }
         break;
      case EPosition.LineBefore:
         if(cth){
            if(cfh){
               o._hContainer.insertBefore(cf._hPanel, ct._hPanel);
            }else{
               var hNewTab = o.innerAppendLine();
               o._hContainer.insertBefore(hNewTab, ct._hPanel);
               var hCell = MO.Window.Builder.appendTableCell(o._hPanelLine);
               hCell.appendChild(cf._hPanel);
               cf._hPanelLine = hNewTab;
            }
            o.insertPosition(cf, ct, 0, copy);
         }else{
            var count = o._hContainer.children.length;
            for(var n = 0; n < count; n++){
               if(o._hContainer.children[n] == hTable){
                  if(cfh){
                     o._hContainer.insertBefore(cf._hPanel, hTable);
                  }else{
                     var hNewTab = o.innerAppendLine();
                     o._hContainer.insertBefore(hNewTab, hTable);
                     var hCell = MO.Window.Builder.appendTableCell(o._hPanelLine);
                     hCell.appendChild(cf._hPanel);
                     cf._hPanelLine = hNewTab;
                     moved = true;
                  }
                  o.insertPosition(cf, ct, 0, copy);
                  cf.nowrap = false;
                  break;
               }
            }
         }
         break;
      case EPosition.LineAfter:
         if(cfh){
            o._hContainer.appendChild(cf._hPanel);
         }else{
            var hNewTab = o.innerAppendLine();
            var hCell = MO.Window.Builder.appendTableCell(o._hPanelLine);
            hCell.appendChild(cf._hPanel);
            hCell.appendChild(cf._hPanel);
            moved = true;
         }
         o.insertPosition(cf, null, 0, copy);
         ct.nowrap = false;
         cf.nowrap = false;
         break;
   }
   if(moved){
      hCfTd.removeNode(true);
      if(hCfTab.rows[0].cells.length == 0){
         hCfTab.removeNode(true);
      }
   }
}
MO.FDuiLayout_innerAppendLine = function FDuiLayout_innerAppendLine(){
   var o = this;
   var h = null;
   if(o._layoutCd == EUiLayout.Design){
      h = o._hPanelTable = MO.Window.Builder.appendTable(o._hContainer);
      h.style.paddingBottom = 4;
      o._hPanelLine = MO.Window.Builder.appendTableRow(h);
   }else{
      o._hPanelTable = null;
      o._hPanelLine = null;
   }
   return h;
}
MO.FDuiLayout_appendChild = function FDuiLayout_appendChild(control){
   var o = this;
   if(o._layoutCd == MO.EUiLayout.Design){
      if(!o._hPanelLine){
         o.innerAppendLine();
      }
      if(MO.Class.isClass(control, MO.MDuiHorizontal)){
         if(o._hPanelTable.rows[0].cells.length == 0){
            o._hContainer.insertBefore(control._hPanel, o._hPanelTable);
         }else{
            o._hContainer.appendChild(control._hPanel);
            o.innerAppendLine();
         }
         return;
      }
      var hCell = MO.Window.Builder.appendTableCell(o._hPanelLine, o.styleName('ControlPanel'));
      if(!MO.Class.isClass(control, MO.FDuiLayout)){
         control._hPanelLine = o._hPanelTable;
      }
      hCell.appendChild(control._hPanel);
      control._hLayoutCell = hCell;
      if(!control.nowrap() && (o.controls.last() != control)){
         o.innerAppendLine();
      }
   }else{
      control._hPanel.style.paddingTop = 2;
      control._hPanel.style.paddingBottom = 2;
      if(control.dockCd() == MO.EUiDock.Fill){
         var hCell = MO.Window.Builder.appendTableRowCell(o._hPanelForm, o.styleName('ControlPanel'));
         hCell.appendChild(control._hPanel);
      }else if(control._sizeCd == MO.EUiSize.Fill){
         var hCell = MO.Window.Builder.appendTableRowCell(o._hPanelForm, o.styleName('ControlPanel'));
         hCell.appendChild(control._hPanel);
      }else if(MO.Lang.Set.contains(control._sizeCd, MO.EUiSize.Horizontal) || '100%' == control.width){
         if(MO.Class.isClass(control, MO.FDuiSplit)){
            o._lastSplit = control;
         }
         var hLine = MO.Window.Builder.appendTableRow(o._hPanelForm);
         var hCell = MO.Window.Builder.appendTableCell(hLine, o.styleName('ControlPanel'));
         hCell.vAlign = 'top';
         hCell.appendChild(control._hPanel);
         control._hLayoutRow = hLine;
         o._hPanelLast = hCell;
         if(!MO.Lang.Set.contains(control._sizeCd, MO.EUiSize.Vertical)){
            hCell.height = 1;
         }else if(control.height){
            hCell.height = control.height;
         }
         o._hPanelLine = null;
      }else{
         if(!o._hPanelLine){
            var hLine = MO.Window.Builder.appendTableRow(o._hPanelForm);
            hLine.height = 1;
            if(o._lastSplit){
               o._lastSplit.pushLine(hLine);
            }
            var hCell = MO.Window.Builder.appendTableCell(hLine, o.styleName('ControlPanel'));
            hCell.vAlign = 'top';
            var ht = o._hPanelTable = MO.Window.Builder.appendTable(hCell);
            o._hPanelLine = MO.Window.Builder.appendTableRow(ht);
         }
         var hCell = MO.Window.Builder.appendTableCell(o._hPanelLine, o.styleName('ControlPanel'))
         control._hLayoutRow = o._hPanelLine;
         o._hPanelLast = hCell;
         hCell.appendChild(control._hPanel);
         control._hLayoutCell = hCell;
         if(!control.nowrap()){
            o._hPanelLine = null;
         }
      }
   }
}
MO.FDuiLayout_resize = function FDuiLayout_resize(){
   var o = this;
   var components = o._components;
   if(components){
      var ha = false;
      var count = components.count();
      for(var n = 0; n < count; n++){
         var component = components.at(n);
         if(MO.Class.isClass(component, MO.FDuiTable) || MO.Class.isClass(component, MO.FDuiPageControl)){
            ha = true;
            break;
         }
      }
   }
}
MO.FDuiLayout_dispose = function FDuiLayout_dispose(){
   var o = this;
   o._hPanelCurrent = null;
   o._hPanelTable = null;
   o._hPanel = null;
   o._hContainer = null;
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiLayoutHorizontal = function FDuiLayoutHorizontal(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer);
   o._stylePanel  = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._hLine       = null;
   o.onBuildPanel = MO.FDuiLayoutHorizontal_onBuildPanel;
   o.onBuild      = MO.FDuiLayoutHorizontal_onBuild;
   o.appendChild  = MO.FDuiLayoutHorizontal_appendChild;
   o.dispose      = MO.FDuiLayoutHorizontal_dispose;
   return o;
}
MO.FDuiLayoutHorizontal_onBuildPanel = function FDuiLayoutHorizontal_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.Window.Builder.createTable(event, o.styleName('Panel'));
}
MO.FDuiLayoutHorizontal_onBuild = function FDuiLayoutHorizontal_onBuild(event){
   var o = this;
   o.__base.FDuiContainer.onBuild.call(o, event)
   o._hLine = MO.Window.Builder.appendTableRow(o._hPanel);
}
MO.FDuiLayoutHorizontal_appendChild = function FDuiLayoutHorizontal_appendChild(control){
   var o = this;
   var hCell = MO.Window.Builder.appendTableCell(o._hLine);
   hCell.appendChild(control._hPanel);
   var dockCd = control.dockCd();
   if(dockCd == 'left'){
      hCell.align = 'left';
   }else if(dockCd == 'center'){
      hCell.align = 'center';
   }else if(dockCd == 'right'){
      hCell.align = 'right';
   }
}
MO.FDuiLayoutHorizontal_dispose = function FDuiLayoutHorizontal_dispose(){
   var o = this;
   o._hLine = MO.Window.Html.free(o._hLine);
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiLayoutVertical = function FDuiLayoutVertical(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer);
   o._stylePanel  = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._hLine       = null;
   o.onBuildPanel = MO.FDuiLayoutVertical_onBuildPanel;
   o.appendChild  = MO.FDuiLayoutVertical_appendChild;
   o.dispose      = MO.FDuiLayoutVertical_dispose;
   return o;
}
MO.FDuiLayoutVertical_onBuildPanel = function FDuiLayoutVertical_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.Window.Builder.createTable(event, o.styleName('Panel'));
}
MO.FDuiLayoutVertical_appendChild = function FDuiLayoutVertical_appendChild(control){
   var o = this;
   var hCell = MO.Window.Builder.appendTableRowCell(o._hPanel);
   hCell.appendChild(control._hPanel);
   var height = control.size().height;
   if(height){
      hCell.style.height = height + 'px';
   }
}
MO.FDuiLayoutVertical_dispose = function FDuiLayoutVertical_dispose(){
   var o = this;
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiListBox = function FDuiListBox(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MDuiHorizontal, MO.MListenerClick);
   o._sizeCd      = MO.EUiSize.Horizontal
   o._stylePanel  = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._hForm       = null;
   o.onBuildPanel = MO.FDuiListBox_onBuildPanel;
   o.createItem   = MO.FDuiListBox_createItem;
   o.appendChild  = MO.FDuiListBox_appendChild;
   o.clickItem    = MO.FDuiListBox_clickItem;
   o.clear        = MO.FDuiListBox_clear;
   o.dispose      = MO.FDuiListBox_dispose;
   return o;
}
MO.FDuiListBox_onBuildPanel = function FDuiListBox_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.Window.Builder.createTable(p, o.styleName('Panel'));
}
MO.FDuiListBox_createItem = function FDuiListBox_createItem(icon, label){
   var o = this;
   var item = MO.Class.create(MO.FDuiListItem);
   item.build(o._hPanel);
   item.setLabel(label);
   return item;
}
MO.FDuiListBox_appendChild = function FDuiListBox_appendChild(control){
   var o = this;
   o._hPanel.appendChild(control._hPanel);
}
MO.FDuiListBox_clickItem = function FDuiListBox_clickItem(item){
   var o = this;
   var components = o._components;
   if(components){
      var count = components.count();
      for(var i = 0; i < count; i++){
         var component = components.at(i);
         if(MO.Class.isClass(component, MO.FDuiListItem)){
            component.setChecked(component == item);
         }
      }
   }
   var event = new MO.SEvent(o);
   event.item = item;
   o.processClickListener(event);
   event.dispose();
}
MO.FDuiListBox_clear = function FDuiListBox_clear(){
   var o = this;
   var components = o._components;
   if(components){
      var count = components.count();
      for(var i = 0; i < count; i++){
         var component = components.at(i);
         if(MO.Class.isClass(component, MO.FDuiListItem)){
            o._hPanel.removeChild(component._hPanel);
         }
         component.dispose();
      }
      components.clear();
      o._controls.clear();
   }
}
MO.FDuiListBox_dispose = function FDuiListBox_dispose(){
   var o = this;
   o.__base.FContainer.dispose.call(o);
}
MO.FDuiListItem = function FDuiListItem(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl);
   o._styleNormal    = MO.Class.register(o, new MO.AStyle('_styleNormal'));
   o._styleHover     = MO.Class.register(o, new MO.AStyle('_styleHover'));
   o._styleSelect    = MO.Class.register(o, new MO.AStyle('_styleSelect'));
   o._styleIconPanel = MO.Class.register(o, new MO.AStyle('_styleIconPanel'));
   o._styleIcon      = MO.Class.register(o, new MO.AStyle('_styleIcon'));
   o._styleLabel     = MO.Class.register(o, new MO.AStyle('_styleLabel'));
   o._checked        = false;
   o._hPanel         = null;
   o._hIconPanel     = null;
   o._hIcon          = null;
   o._hLabel         = null;
   o.onBuildPanel    = MO.FDuiListItem_onBuildPanel;
   o.onBuild         = MO.FDuiListItem_onBuild;
   o.onEnter         = MO.FDuiListItem_onEnter;
   o.onLeave         = MO.FDuiListItem_onLeave;
   o.onClick         = MO.Class.register(o, new MO.AEventClick('onClick'), MO.FDuiListItem_onClick);
   o.label           = MO.FDuiListItem_label;
   o.setLabel        = MO.FDuiListItem_setLabel;
   o.setChecked      = MO.FDuiListItem_setChecked;
   o.dispose         = MO.FDuiListItem_dispose;
   return o;
}
MO.FDuiListItem_onBuildPanel = function FDuiListItem_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.Window.Builder.createTableRow(p, o.styleName('Normal'));
}
MO.FDuiListItem_onBuild = function FDuiListItem_onBuild(p){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, p);
   var h = o._hPanel;
   o._hIconPanel = MO.Window.Builder.appendTableCell(h, o.styleName('IconPanel'))
   if(o._icon){
      o._hIcon = MO.Window.Builder.appendIcon(o._hIconPanel, o.styleName('Icon'), o._icon);
   }
   o._hLabel = MO.Window.Builder.appendTableCell(h, o.styleName('Label'));
   if(o._label){
      o.setLabel(o._label);
   }
   o.attachEvent('onClick', h);
}
MO.FDuiListItem_onEnter = function FDuiListItem_onEnter(){
   var o = this;
   o.__base.FDuiControl.onEnter.call(o);
   o._hPanel.className = MO.Lang.Boolean.parse(o._checked) ? o.styleName('Select') : o.styleName('Hover');
}
MO.FDuiListItem_onLeave = function FDuiListItem_onLeave(){
   var o = this;
   o._hPanel.className = MO.Lang.Boolean.parse(o._checked) ? o.styleName('Select') : o.styleName('Normal');
   o.__base.FDuiControl.onLeave.call(o);
}
MO.FDuiListItem_onClick = function FDuiListItem_onClick(p){
   var o = this;
   o._parent.clickItem(o);
}
MO.FDuiListItem_label = function FDuiListItem_label(p){
   return this._label;
}
MO.FDuiListItem_setLabel = function FDuiListItem_setLabel(p){
   var o = this;
   o._label = p;
   o._hLabel.innerHTML = MO.Lang.String.nvl(p);
}
MO.FDuiListItem_setChecked = function FDuiListItem_setChecked(p){
   var o = this;
   o._checked = p;
   if(o._hIcon){
      o._hIcon.style.display = p ? 'block' : 'none';
   }else{
      o._hIconPanel.innerHTML = p ? 'O' : '';
   }
   o._hPanel.className = p ? o.styleName('Select') : o.styleName('Normal');
}
MO.FDuiListItem_dispose = function FDuiListItem_dispose(){
   var o = this;
   o._hPanel = MO.Window.Html.free(o._hPanel);
   o._hIconPanel = MO.Window.Html.free(o._hIconPanel);
   o._hIcon = MO.Window.Html.free(o._hIcon);
   o._hLabel = MO.Window.Html.free(o._hLabel);
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiListView = function FDuiListView(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MDuiHorizontal);
   o._sizeCd           = MO.EUiSize.Horizontal
   o._stylePanel       = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._focusItem        = null;
   o._itemPool         = null;
   o._listenersClick       = MO.Class.register(o, new MO.AListener('_listenersClick', MO.EEvent.Click));
   o._listenersDoubleClick = MO.Class.register(o, new MO.AListener('_listenersDoubleClick', MO.EEvent.DoubleClick));
   o._hForm            = null;
   o.onBuildPanel      = MO.FDuiListView_onBuildPanel;
   o.onBuild           = MO.FDuiListView_onBuild;
   o.onClick           = MO.Class.register(o, new MO.AEventClick('onClick'), MO.FDuiListView_onClick);
   o.construct         = MO.FDuiListView_construct;
   o.focusItem         = MO.FDuiListView_focusItem;
   o.createItem        = MO.FDuiListView_createItem;
   o.appendChild       = MO.FDuiListView_appendChild;
   o.selectItem        = MO.FDuiListView_selectItem;
   o.doClickItem       = MO.FDuiListView_doClickItem;
   o.doDoubleClickItem = MO.FDuiListView_doDoubleClickItem;
   o.clear             = MO.FDuiListView_clear;
   o.dispose           = MO.FDuiListView_dispose;
   return o;
}
MO.FDuiListView_onBuildPanel = function FDuiListView_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.Window.Builder.createDiv(p, o.styleName('Panel'));
}
MO.FDuiListView_onBuild = function FDuiListView_onBuild(event){
   var o = this;
   o.__base.FDuiContainer.onBuild.call(o, event);
   var hPanel = o._hPanel;
   o.attachEvent('onClick', hPanel);
}
MO.FDuiListView_onClick = function FDuiListView_onClick(s, e){
   var o = this;
   if(s.hSender == o._hNodePanel){
      var node = o._focusNode;
      if(node){
         node.select(false);
         o._focusNode = null;
      }
   }
}
MO.FDuiListView_construct = function FDuiListView_construct(){
   var o = this;
   o.__base.FDuiContainer.construct.call(o);
   o._itemPool = MO.Class.create(MO.FObjectPool);
}
MO.FDuiListView_focusItem = function FDuiListView_focusItem(){
   return this._focusItem;
}
MO.FDuiListView_createItem = function FDuiListView_createItem(clazz, pi, pl){
   var o = this;
   var item = o._itemPool.alloc();
   if(!item){
      if(clazz){
         item = MO.Class.create(clazz);
      }else{
         item = MO.Class.create(MO.FDuiListViewItem);
      }
      item.build(o._hPanel);
   }
   return item;
}
MO.FDuiListView_appendChild = function FDuiListView_appendChild(p){
   var o = this;
   o._hPanel.appendChild(p._hPanel);
}
MO.FDuiListView_selectItem = function FDuiListView_selectItem(item){
   var o = this;
   var components = o._components;
   if(components){
      var count = components.count();
      for(var i = 0; i < count; i++){
         var component = components.valueAt(i);
         if(MO.Class.isClass(component, FDuiListViewItem)){
            component.setChecked(component == item);
         }
      }
   }
   o._focusItem = item;
}
MO.FDuiListView_doClickItem = function FDuiListView_doClickItem(item){
   var o = this;
   o.selectItem(item);
   var event = new MO.SClickEvent(o);
   event.item = item;
   o.processClickListener(event);
   event.dispose();
}
MO.FDuiListView_doDoubleClickItem = function FDuiListView_doDoubleClickItem(item){
   var o = this;
   o.selectItem(item);
   var event = new MO.SClickEvent(o);
   event.item = item;
   o.processDoubleClickListener(event);
   event.dispose();
}
MO.FDuiListView_clear = function FDuiListView_clear(){
   var o = this;
   var cs = o._components;
   if(cs){
      var c = cs.count();
      for(var i = 0; i < c; i++){
         var m = cs.value(i);
         if(MO.Class.isClass(m, MO.FDuiListViewItem)){
            o._hPanel.removeChild(m._hPanel);
            o._itemPool.free(m)
         }else{
            m.dispose();
         }
      }
      cs.clear();
      o._controls.clear();
   }
}
MO.FDuiListView_dispose = function FDuiListView_dispose(){
   var o = this;
   o.__base.FContainer.dispose.call(o);
}
MO.FDuiListViewItem = function FDuiListViewItem(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl);
   o._stylePanel     = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleNormal    = MO.Class.register(o, new MO.AStyle('_styleNormal'));
   o._styleHover     = MO.Class.register(o, new MO.AStyle('_styleHover'));
   o._styleSelect    = MO.Class.register(o, new MO.AStyle('_styleSelect'));
   o._styleForm      = MO.Class.register(o, new MO.AStyle('_styleForm'));
   o._styleContent   = MO.Class.register(o, new MO.AStyle('_styleContent'));
   o._styleIconPanel = MO.Class.register(o, new MO.AStyle('_styleIconPanel'));
   o._styleIcon      = MO.Class.register(o, new MO.AStyle('_styleIcon'));
   o._styleLabel     = MO.Class.register(o, new MO.AStyle('_styleLabel'));
   o._checked        = false;
   o._contentHeight  = 28;
   o._hPanel         = null;
   o._hBorder        = null;
   o._hForm          = null;
   o._hContentForm   = null;
   o._hContentLine   = null;
   o._hIconPanel     = null;
   o._hIcon          = null;
   o._hLabel         = null;
   o.onBuildPanel    = MO.FDuiListViewItem_onBuildPanel;
   o.onBuild         = MO.FDuiListViewItem_onBuild;
   o.onEnter         = MO.FDuiListViewItem_onEnter;
   o.onLeave         = MO.FDuiListViewItem_onLeave;
   o.onClick         = MO.Class.register(o, new MO.AEventClick('onClick'), MO.FDuiListViewItem_onClick);
   o.onDoubleClick   = MO.Class.register(o, new MO.AEventDoubleClick('onDoubleClick'), MO.FDuiListViewItem_onDoubleClick);
   o.label           = MO.FDuiListViewItem_label;
   o.setLabel        = MO.FDuiListViewItem_setLabel;
   o.setChecked      = MO.FDuiListViewItem_setChecked;
   o.dispose         = MO.FDuiListViewItem_dispose;
   return o;
}
MO.FDuiListViewItem_onBuildPanel = function FDuiListViewItem_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.Window.Builder.createDiv(p, o.styleName('Panel'));
}
MO.FDuiListViewItem_onBuild = function FDuiListViewItem_onBuild(p){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, p);
   var hPanel = o._hPanel;
   var hBorder = o._hBorder = MO.Window.Builder.appendDiv(hPanel, o.styleName('Normal'));
   var hTable = o._hForm = MO.Window.Builder.appendTable(hBorder, o.styleName('Form'));
   var hLine1 = o._hLine1 = MO.Window.Builder.appendTableRowCell(hTable)
   var hLine2 = o._hLine2 = MO.Window.Builder.appendTableRowCell(hTable)
   hLine2.height = o._contentHeight;
   var hContentForm = o._hContentForm = MO.Window.Builder.appendTable(hLine2, o.styleName('Content'));
   var hContentLine = o._hContentLine = MO.Window.Builder.appendTableRow(hContentForm);
   o._hIconPanel = MO.Window.Builder.appendTableCell(hContentLine, o.styleName('IconPanel'))
   o._hIcon = MO.Window.Builder.appendIcon(o._hIconPanel, o.styleName('Icon'), MO.Lang.String.nvl(o._icon, 'tools.select'));
   MO.Window.Html.displaySet(o._hIcon, false);
   o._hLabel = MO.Window.Builder.appendTableCell(hContentLine, o.styleName('Label'));
   if(o._label){
      o.setLabel(o._label);
   }
   o.attachEvent('onClick', hPanel);
   o.attachEvent('onDoubleClick', hPanel);
}
MO.FDuiListViewItem_onEnter = function FDuiListViewItem_onEnter(){
   var o = this;
   o.__base.FDuiControl.onEnter.call(o);
   o._hBorder.className = MO.Lang.Boolean.parse(o._checked) ? o.styleName('Select') : o.styleName('Hover');
}
MO.FDuiListViewItem_onLeave = function FDuiListViewItem_onLeave(){
   var o = this;
   o._hBorder.className = MO.Lang.Boolean.parse(o._checked) ? o.styleName('Select') : o.styleName('Normal');
   o.__base.FDuiControl.onLeave.call(o);
}
MO.FDuiListViewItem_onClick = function FDuiListViewItem_onClick(event){
   var o = this;
   if(o._checked){
      o._parent.doDoubleClickItem(o);
   }else{
      o._parent.doClickItem(o);
   }
}
MO.FDuiListViewItem_onDoubleClick = function FDuiListViewItem_onDoubleClick(event){
   var o = this;
   o._parent.doDoubleClickItem(o);
}
MO.FDuiListViewItem_label = function FDuiListViewItem_label(p){
   return this._label;
}
MO.FDuiListViewItem_setLabel = function FDuiListViewItem_setLabel(p){
   var o = this;
   o._label = p;
   o._hLabel.innerHTML = MO.Lang.String.nvl(p);
}
MO.FDuiListViewItem_setChecked = function FDuiListViewItem_setChecked(checked){
   var o = this;
   o._checked = checked;
   if(o._hIcon){
      o._hIcon.style.display = checked ? 'block' : 'none';
   }else{
      o._hIconPanel.innerHTML = checked ? 'O' : '';
   }
   o._hBorder.className = checked ? o.styleName('Select') : o.styleName('Normal');
}
MO.FDuiListViewItem_dispose = function FDuiListViewItem_dispose(){
   var o = this;
   o._hPanel = MO.Window.Html.free(o._hPanel);
   o._hBorder = MO.Window.Html.free(o._hBorder);
   o._hForm = MO.Window.Html.free(o._hForm);
   o._hLine1 = MO.Window.Html.free(o._hLine1);
   o._hLine2 = MO.Window.Html.free(o._hLine2);
   o._hContentForm = MO.Window.Html.free(o._hContentForm);
   o._hContentLine = MO.Window.Html.free(o._hContentLine);
   o._hIconPanel = MO.Window.Html.free(o._hIconPanel);
   o._hIcon = MO.Window.Html.free(o._hIcon);
   o._hLabel = MO.Window.Html.free(o._hLabel);
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiMemo = function FDuiMemo(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl, MO.MUiPropertyEdit);
   o._inputSize            = MO.Class.register(o, new MO.APtySize2('_inputSize'));
   o._listenersDataChanged = MO.Class.register(o, new MO.AListener('_listenersDataChanged', MO.EEvent.DataChanged));
   o._hValueForm           = null;
   o._hValueLine           = null;
   o._hInputPanel          = null;
   o._hInput               = null;
   o.onBuildEditValue      = MO.FDuiMemo_onBuildEditValue;
   o.onInputEdit           = MO.Class.register(o, new MO.AEventInputChanged('onInputEdit'), MO.FDuiMemo_onInputEdit);
   o.construct             = MO.FDuiMemo_construct;
   o.formatDisplay         = MO.FDuiMemo_formatDisplay;
   o.formatValue           = MO.FDuiMemo_formatValue;
   o.get                   = MO.FDuiMemo_get;
   o.set                   = MO.FDuiMemo_set;
   o.refreshValue          = MO.FDuiMemo_refreshValue;
   o.refreshStyle          = MO.FDuiMemo_refreshStyle;
   o.dispose               = MO.FDuiMemo_dispose;
   return o;
}
MO.FDuiMemo_onBuildEditValue = function FDuiMemo_onBuildEditValue(event){
   var o = this;
   var hValuePanel = o._hValuePanel;
   var hValueForm = o._hValueForm = MO.Window.Builder.appendTable(hValuePanel);
   var hValueLine = o._hValueLine = MO.Window.Builder.appendTableRow(hValueForm);
   MO.Window.Html.setSize(hValueForm, o._inputSize);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hValueLine);
   o.onBuildEditChange(event);
   var hInputPanel = o._hInputPanel = MO.Window.Builder.appendTableCell(hValueLine, o.styleName('InputPanel'));
   hInputPanel.style.padding = '1px';
   var hInput = o._hInput = MO.Window.Builder.append(hInputPanel, 'TEXTAREA');
   hInput.style.height = '100%';
   hInput.wrap = 'off';
   o.attachEvent('onInputEdit', hInput, o.onInputEdit);
   if(o._editLength){
      hInput.maxLength = o._editLength;
   }
}
MO.FDuiMemo_onInputEdit = function FDuiMemo_onInputEdit(event){
   var o = this;
   o.refreshValue();
}
MO.FDuiMemo_construct = function FDuiMemo_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2();
}
MO.FDuiMemo_formatDisplay = function FDuiMemo_formatDisplay(value){
   var o = this;
   var text = MO.Lang.String.nvl(value);
   o._dataDisplay = text;
   return text;
}
MO.FDuiMemo_formatValue = function FDuiMemo_formatValue(value){
   return value;
}
MO.FDuiMemo_get = function FDuiMemo_get(){
   var o = this;
   var value = o._hInput.value;
   return value;
}
MO.FDuiMemo_set = function FDuiMemo_set(value){
   var o = this;
   o._dataValue = value;
   var text = MO.Lang.String.nvl(value);
   o._hInput.value = text;
   o.changeSet(false);
}
MO.FDuiMemo_refreshValue = function FDuiMemo_refreshValue(){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiMemo_refreshStyle = function FDuiMemo_refreshStyle(){
   var o = this;
   o.__base.FDuiEditControl.refreshStyle.call(o);
   var hInput = o._hInput;
   var inputStyle = null;
   if(o._statusEditable){
      if(o._statusValueHover){
         inputStyle = 'InputHover';
      }else{
         inputStyle = 'InputNormal';
      }
   }else{
      inputStyle = 'InputReadonly';
   }
   hInput.className = o.styleName(inputStyle);
   hInput.readOnly = !o._statusEditable;
}
MO.FDuiMemo_dispose = function FDuiMemo_dispose(){
   var o = this
   o._inputSize = MO.Lang.Object.dispose(o._inputSize);
   o.__base.FDuiEditControl.dispose.call(o);
}
MO.FDuiNumber = function FDuiNumber(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl, MO.MUiDescriptorPicker, MO.MUiDescriptorZoom, MO.MUiPropertyNumber);
   o._inputSize            = MO.Class.register(o, [new MO.APtySize2('_inputSize'), new MO.AGetter('_inputSize')]);
   o._styleAdjustPanel     = MO.Class.register(o, new MO.AStyle('_styleAdjustPanel'));
   o._styleAdjustForm      = MO.Class.register(o, new MO.AStyle('_styleAdjustForm'));
   o._styleUpPanel         = MO.Class.register(o, new MO.AStyle('_styleUpPanel'));
   o._styleDownPanel       = MO.Class.register(o, new MO.AStyle('_styleDownPanel'));
   o._innerOriginValue     = null;
   o._innerDataValue       = null;
   o._listenersDataChanged = MO.Class.register(o, new MO.AListener('_listenersDataChanged'));
   o._hInput               = null;
   o._iconUp               = null;
   o._iconDown             = null;
   o.onBuildEditValue      = MO.FDuiNumber_onBuildEditValue;
   o.onLabelPickerClick    = MO.Class.register(o, new MO.AEventClick('onLabelPickerClick'));
   o.onInputKeyPress       = MO.Class.register(o, new MO.AEventKeyPress('onInputKeyPress'), MO.FDuiNumber_onInputKeyPress);
   o.onInputChanged        = MO.Class.register(o, new MO.AEventInputChanged('onInputChanged'), MO.FDuiNumber_onInputChanged);
   o.onInputPickerClick    = MO.Class.register(o, new MO.AEventDoubleClick('onInputPickerClick'));
   o.construct             = MO.FDuiNumber_construct;
   o.formatDisplay         = MO.FDuiNumber_formatDisplay;
   o.formatValue           = MO.FDuiNumber_formatValue;
   o.get                   = MO.FDuiNumber_get;
   o.set                   = MO.FDuiNumber_set;
   o.doPicker              = MO.FDuiNumber_doPicker;
   o.refreshStyle          = MO.FDuiNumber_refreshStyle;
   o.dispose               = MO.FDuiNumber_dispose;
   return o;
}
MO.FDuiNumber_onBuildEditValue = function FDuiNumber_onBuildEditValue(p){
   var o = this;
   var hValuePanel = o._hValuePanel;
   var hValueForm = o._hValueForm = MO.Window.Builder.appendTable(hValuePanel);
   var hValueLine = o._hValueLine = MO.Window.Builder.appendTableRow(hValueForm);
   MO.Window.Html.setSize(hValueForm, o._inputSize);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hValueLine);
   o.onBuildEditChange(p);
   var hInputPanel = o._hInputPanel = MO.Window.Builder.appendTableCell(hValueLine);
   var hInput = o._hInput = MO.Window.Builder.appendEdit(hInputPanel);
   hInput.style.textAlign = 'right';
   o.attachEvent('onInputKeyPress', hInput, o.onInputKeyPress);
   o.attachEvent('onInputChanged', hInput, o.onInputChanged);
   o.attachEvent('onInputPickerClick', hInput, o.onPickerClick);
   if(o._editLength){
      hInput.maxLength = o._editLength;
   }
   if(!MO.Lang.String.isEmpty(o._pickerFrame)){
      var hText = o._hText;
      hText.style.cursor = 'pointer';
      hText.style.textDecoration = 'underline';
      o.attachEvent('onLabelPickerClick', hText, o.onPickerClick);
   }
   var hAdjustPanel = o._hAdjustPanel = MO.Window.Builder.appendTableCell(hValueLine, o.styleName('AdjustForm'));
   var hAdjustForm = o.hAdjustForm = MO.Window.Builder.appendTable(hAdjustPanel, o.styleName('AdjustForm'));
   var hCell = MO.Window.Builder.appendTableRowCell(hAdjustForm, o.styleName('UpPanel'));
   var hIcon = o._hUpIcon = MO.Window.Builder.appendIcon(hCell, null, 'control.number.up');
   hIcon.align = 'center';
   var hCell = MO.Window.Builder.appendTableRowCell(hAdjustForm, o.styleName('DownPanel'));
   var hIcon = o._hDownIcon = MO.Window.Builder.appendIcon(hCell, null, 'control.number.down');
   hIcon.align = 'center';
}
MO.FDuiNumber_onInputKeyPress = function FDuiNumber_onInputKeyPress(event){
   var o = this;
   var code = event.keyCode;
}
MO.FDuiNumber_onInputChanged = function FDuiNumber_onInputChanged(p){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiNumber_construct = function FDuiNumber_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._editSize.set(100, 20);
   o._inputSize = new MO.SSize2(80, 0);
}
MO.FDuiNumber_formatDisplay = function FDuiNumber_formatDisplay(value){
   var o = this;
   var text = o._dataDisplay = MO.Lang.Float.format(value, 0, null, o._valuePrecision, null);
   return text;
}
MO.FDuiNumber_formatValue = function FDuiNumber_formatValue(value){
   return value;
}
MO.FDuiNumber_get = function FDuiNumber_get(){
   var o = this;
   var value = o._hInput.value;
   return value;
}
MO.FDuiNumber_set = function FDuiNumber_set(value){
   var o = this;
   o._dataValue = value;
   var text = MO.Lang.String.nvl(value);
   o._hInput.value = text;
   o.changeSet(false);
}
MO.FDuiNumber_doPicker = function FDuiNumber_doPicker(){
   var o = this;
   var pickerFrame = o._pickerFrame;
   if(!MO.Lang.String.isEmpty(pickerFrame)){
      var frame = MO.Console.find(MO.FDuiFrameConsole).get(o, pickerFrame);
      frame.showPosition(MO.EUiPosition.Center)
      frame.setDataSelectListener(o, o.onPickerSelect);
      frame.doFetch();
   }
}
MO.FDuiNumber_refreshStyle = function FDuiNumber_refreshStyle(){
   var o = this;
   o.__base.FDuiEditControl.refreshStyle.call(o);
   var hInput = o._hInput;
   var inputStyle = null;
   if(o._statusEditable){
      if(o._statusValueHover){
         inputStyle = 'InputHover';
      }else{
         inputStyle = 'InputNormal';
      }
   }else{
      inputStyle = 'InputReadonly';
   }
   hInput.className = o.styleName(inputStyle);
   hInput.readOnly = !o._statusEditable;
}
MO.FDuiNumber_dispose = function FDuiNumber_dispose(){
   var o = this
   o._inputSize = MO.Lang.Object.dispose(o._inputSize);
   o.__base.FDuiEditControl.dispose.call(o);
}
MO.FDuiNumber_onDataKeyDown = function FDuiNumber_onDataKeyDown(s, e){
   var o = this;
   o.__base.FDuiEditControl.onDataKeyDown.call(o, s, e);
   if(o.editCase){
      MO.RKey.fixCase(e, o.editCase);
   }
}
MO.FDuiNumber_setText = function FDuiNumber_setText(t){
   var o = this;
   if(!o.hEdit){
      return;
   }
   if('U'== o.editCase){
      o.hEdit.value = MO.Lang.String.toUpper(t);
   }else if('L'== o.editCase){
         o.hEdit.value = MO.Lang.String.toLower(t);
   }else{
      o.hEdit.value = t;
   }
   if('right' == o.editAlign ){
      o.hEdit.style.textAlign = 'right';
   }else if('left' == o.editAlign ){
      o.hEdit.style.textAlign = 'left';
   }else{
      o.hEdit.style.textAlign = 'center';
   }
}
MO.FDuiNumber_validText = function FDuiNumber_validText(t){
   var o = this;
   var r = o.__base.FDuiEditControl.validText.call(o, t);
   if(!r){
      if(o.validLenmin){
         if(o.validLenmin > t.length){
            return RContext.get('MDescEdit:ValidMinLength', o.validLenmin);
         }
      }
      if(o.validLenmax){
         if(o.validLenmax < t.length){
            return RContext.get('MDescEdit:ValidMaxLength', o.validLenmax);
         }
      }
   }
   return r;
}
MO.FDuiNumber_findEditor = function FDuiNumber_findEditor(){
   var o = this;
   if(o.editComplete){
      var de = o.editor;
      if(!de){
         o.dsControl = o.topControl(MDataset);
         if(o.dsControl){
            de = o.editor = RConsole.find(FDuiNumberConsole).focus(o, FDuiNumberEditor);
         }
      }
      if(de){
         de.linkControl(o);
      }
      return o.editor;
   }
}
MO.FDuiNumber_drop = function FDuiNumber_drop(){
   var o = this;
   var de = o.findEditor();
   if(de){
      var t = o.reget();
      if(t.length > 0){
         if(o.finded != t){
            if(de.source != o){
               de.linkControl(o);
            }
            de.search(t);
         }
         o.finded = t;
      }
   }
}
MO.FDuiNumber2 = function FDuiNumber2(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl);
   o._inputSize            = MO.Class.register(o, [new MO.APtySize2('_inputSize'), new MO.AGetter('_inputSize')]);
   o._listenersDataChanged = MO.Class.register(o, new MO.AListener('_listenersDataChanged', MO.EEvent.DataChanged));
   o._hInput1              = null;
   o._hInput2              = null;
   o.onBuildEditInput      = MO.FDuiNumber2_onBuildEditInput;
   o.onBuildEditValue      = MO.FDuiNumber2_onBuildEditValue;
   o.onInputKeyPress       = MO.Class.register(o, new MO.AEventKeyPress('onInputKeyPress'), MO.FDuiNumber2_onInputKeyPress);
   o.onInputChanged        = MO.Class.register(o, new MO.AEventInputChanged('onInputChanged'), MO.FDuiNumber2_onInputChanged);
   o.construct             = MO.FDuiNumber2_construct;
   o.get                   = MO.FDuiNumber2_get;
   o.set                   = MO.FDuiNumber2_set;
   o.text                  = MO.FDuiNumber2_text;
   o.refreshStyle          = MO.FDuiNumber2_refreshStyle;
   o.dispose               = MO.FDuiNumber2_dispose;
   return o;
}
MO.FDuiNumber2_onBuildEditInput = function FDuiNumber2_onBuildEditInput(event, hTag){
   var o = this;
   o.attachEvent('onInputKeyPress', hTag, o.onInputKeyPress);
   o.attachEvent('onInputChanged', hTag, o.onInputChanged);
}
MO.FDuiNumber2_onBuildEditValue = function FDuiNumber2_onBuildEditValue(event){
   var o = this;
   var hValuePanel = o._hValuePanel;
   var hValueForm = o._hValueForm = MO.Window.Builder.appendTable(hValuePanel);
   var hLine = MO.Window.Builder.appendTableRow(hValueForm);
   MO.Window.Html.setSize(hValueForm, o._inputSize);
   var hCell = MO.Window.Builder.appendTableCell(hLine, o.styleName('InputPanel'));
   var hInput = o._hInput1 = MO.Window.Builder.appendEdit(hCell);
   hInput.style.textAlign = 'right';
   o.onBuildEditInput(event, hInput)
   var hCell = MO.Window.Builder.appendTableCell(hLine, o.styleName('InputPanel'));
   hCell.style.borderLeft = '1px solid #EEEEEE';
   var hInput = o._hInput2 = MO.Window.Builder.appendEdit(hCell);
   hInput.style.textAlign = 'right';
   o.onBuildEditInput(event, hInput)
}
MO.FDuiNumber2_onInputKeyPress = function FDuiNumber2_onInputKeyPress(p){
   var o = this;
}
MO.FDuiNumber2_onInputChanged = function FDuiNumber2_onInputChanged(p){
   var o = this;
}
MO.FDuiNumber2_construct = function FDuiNumber2_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2();
   o._currentValue = new MO.SPoint2();
   o._dataValue = new MO.SPoint2();
}
MO.FDuiNumber2_get = function FDuiNumber2_get(value){
   var o = this;
   var currentValue = MO.Runtime.nvl(value, o._currentValue);
   var text1 = o._hInput1.value;
   currentValue.x = MO.Lang.Float.parse(text1);
   var text2 = o._hInput2.value;
   currentValue.y = MO.Lang.Float.parse(text2);
   return currentValue;
}
MO.FDuiNumber2_set = function FDuiNumber2_set(value){
   var o = this;
   var dataValue = o._dataValue;
   if(arguments.length == 1){
      var value = arguments[0];
      if(value == null){
         dataValue.set(0, 0);
      }else if(value.constructor == String){
         dataValue.parse(value);
      }else if(value.constructor == MO.SPoint2){
         dataValue.set(value.x, value.y);
      }else if(value.constructor == MO.SSize2){
         dataValue.set(value.width, value.height);
      }else{
         throw new MO.TError('Invalid value format.');
      }
   }else if(arguments.length == 2){
      dataValue.set(arguments[0], arguments[1]);
   }else{
      throw new MO.TError('Invalid value format.');
   }
   o._hInput1.value = MO.Lang.Float.format(dataValue.x, 0, null, 2, null);
   o._hInput2.value = MO.Lang.Float.format(dataValue.y, 0, null, 2, null);
   o.changeSet(false);
}
MO.FDuiNumber2_text = function FDuiNumber2_text(){
   var o = this;
   var value = o.get();
   var text = value.toString();
   return text;
}
MO.FDuiNumber2_refreshStyle = function FDuiNumber2_refreshStyle(){
   var o = this;
   o.__base.FDuiEditControl.refreshStyle.call(o);
   var inputStyle = null;
   if(o._statusEditable){
      if(o._statusValueHover){
         inputStyle = 'InputHover';
      }else{
         inputStyle = 'InputNormal';
      }
   }else{
      inputStyle = 'InputReadonly';
   }
   var hInput1 = o._hInput1;
   hInput1.className = o.styleName(inputStyle);
   hInput1.readOnly = !o._statusEditable;
   var hInput2 = o._hInput2;
   hInput2.className = o.styleName(inputStyle);
   hInput2.readOnly = !o._statusEditable;
}
MO.FDuiNumber2_dispose = function FDuiNumber2_dispose(){
   var o = this
   o._inputSize = MO.Lang.Object.dispose(o._inputSize);
   o._dataValue = MO.Lang.Object.dispose(o._dataValue);
   o._currentValue = MO.Lang.Object.dispose(o._currentValue);
   o.__base.FDuiEditControl.dispose.call(o);
}
MO.FDuiNumber2_onDataKeyDown = function FDuiNumber2_onDataKeyDown(s, e){
   var o = this;
   o.__base.FDuiEditControl.onDataKeyDown.call(o, s, e);
   if(o.editCase){
      MO.RKey.fixCase(e, o.editCase);
   }
}
MO.FDuiNumber2_formatValue = function FDuiNumber2_formatValue(v){
   var o = this;
   var r = MO.Lang.String.nvl(v);
   if(ECase.Upper == o.editCase){
      r = MO.Lang.String.toUpper(r);
   }else if(ECase.Lower == o.editCase){
      r = MO.Lang.String.toLower(r);
   }
   return r;
}
MO.FDuiNumber2_setText = function FDuiNumber2_setText(t){
   var o = this;
   if(!o.hEdit){
      return;
   }
   if('U'== o.editCase){
      o.hEdit.value = MO.Lang.String.toUpper(t);
   }else if('L'== o.editCase){
         o.hEdit.value = MO.Lang.String.toLower(t);
   }else{
      o.hEdit.value = t;
   }
   if('right' == o.editAlign ){
      o.hEdit.style.textAlign = 'right';
   }else if('left' == o.editAlign ){
      o.hEdit.style.textAlign = 'left';
   }else{
      o.hEdit.style.textAlign = 'center';
   }
}
MO.FDuiNumber2_validText = function FDuiNumber2_validText(t){
   var o = this;
   var r = o.__base.FDuiEditControl.validText.call(o, t);
   if(!r){
      if(o.validLenmin){
         if(o.validLenmin > t.length){
            return MO.RContext.get('MDescEdit:ValidMinLength', o.validLenmin);
         }
      }
      if(o.validLenmax){
         if(o.validLenmax < t.length){
            return MO.RContext.get('MDescEdit:ValidMaxLength', o.validLenmax);
         }
      }
   }
   return r;
}
MO.FDuiNumber2_findEditor = function FDuiNumber2_findEditor(){
   var o = this;
   if(o.editComplete){
      var de = o.editor;
      if(!de){
         o.dsControl = o.topControl(MDataset);
         if(o.dsControl){
            de = o.editor = MO.Console.find(MO.FDuiNumber2Console).focus(o, MO.FDuiNumber2Editor);
         }
      }
      if(de){
         de.linkControl(o);
      }
      return o.editor;
   }
}
MO.FDuiNumber2_drop = function FDuiNumber2_drop(){
   var o = this;
   var de = o.findEditor();
   if(de){
      var t = o.reget();
      if(t.length > 0){
         if(o.finded != t){
            if(de.source != o){
               de.linkControl(o);
            }
            de.search(t);
         }
         o.finded = t;
      }
   }
}
MO.FDuiNumber2_clone = function FDuiNumber2_clone(){
   var o = this;
   var r = o._class.newInstance();
   GHtml_clone(r, o.hPanel);
   return r;
}
MO.FDuiNumber2_link = function FDuiNumber2_link(){
   var o = this;
}
MO.FDuiNumber3 = function FDuiNumber3(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl);
   o._inputSize            = MO.Class.register(o, [new MO.APtySize2('_inputSize'), new MO.AGetter('_inputSize')]);
   o._styleValuePanel      = MO.Class.register(o, new MO.AStyle('_styleValuePanel'));
   o._styleInputPanel      = MO.Class.register(o, new MO.AStyle('_styleInputPanel'));
   o._styleInput           = MO.Class.register(o, new MO.AStyle('_styleInput'));
   o._innerOriginValue     = null;
   o._innerDataValue       = null;
   o._listenersDataChanged = MO.Class.register(o, new MO.AListener('_listenersDataChanged', MO.EEvent.DataChanged));
   o._hInput               = null;
   o.onBuildEditInput      = MO.FDuiNumber3_onBuildEditInput;
   o.onBuildEditValue      = MO.FDuiNumber3_onBuildEditValue;
   o.onInputKeyPress       = MO.Class.register(o, new MO.AEventKeyPress('onInputKeyPress'), FDuiNumber3_onInputKeyPress);
   o.onInputChanged        = MO.Class.register(o, new MO.AEventInputChanged('onInputChanged'), FDuiNumber3_onInputChanged);
   o.construct             = MO.FDuiNumber3_construct;
   o.get                   = MO.FDuiNumber3_get;
   o.set                   = MO.FDuiNumber3_set;
   o.refreshStyle          = MO.FDuiNumber3_refreshStyle;
   o.dispose               = MO.FDuiNumber3_dispose;
   return o;
}
MO.FDuiNumber3_onBuildEditInput = function FDuiNumber3_onBuildEditInput(p, h){
   var o = this;
   o.attachEvent('onInputKeyPress', h, o.onInputKeyPress);
   o.attachEvent('onInputChanged', h, o.onInputChanged);
}
MO.FDuiNumber3_onBuildEditValue = function FDuiNumber3_onBuildEditValue(p){
   var o = this;
   var h = o._hValuePanel;
   h.className = o.styleName('ValuePanel');
   var hValueForm = o._hValueForm = MO.Window.Builder.appendTable(h);
   var hValueLine = MO.Window.Builder.appendTableRow(hValueForm);
   MO.Window.Html.setSize(hValueForm, o._inputSize);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hValueLine);
   o.onBuildEditChange(p);
   var hCell = MO.Window.Builder.appendTableCell(hValueLine, o.styleName('InputPanel'));
   hCell.style.borderRight = '1px solid #666666';
   var hInput = o._hInput1 = MO.Window.Builder.appendEdit(hCell, o.styleName('Input'));
   hInput.style.textAlign = 'right';
   o.onBuildEditInput(p, hInput)
   var hCell = MO.Window.Builder.appendTableCell(hValueLine, o.styleName('InputPanel'));
   hCell.style.borderLeft = '1px solid #999999';
   hCell.style.borderRight = '1px solid #666666';
   var hInput = o._hInput2 = MO.Window.Builder.appendEdit(hCell, o.styleName('Input'));
   hInput.style.textAlign = 'right';
   o.onBuildEditInput(p, hInput)
   var hCell = MO.Window.Builder.appendTableCell(hValueLine, o.styleName('InputPanel'));
   hCell.style.borderLeft = '1px solid #999999';
   var hInput = o._hInput3 = MO.Window.Builder.appendEdit(hCell, o.styleName('Input'));
   hInput.style.textAlign = 'right';
   o.onBuildEditInput(p, hInput)
}
MO.FDuiNumber3_onInputKeyPress = function FDuiNumber3_onInputKeyPress(p){
   var o = this;
   var c = p.keyCode;
   if(!EKeyCode.floatCodes[c]){
      p.cancel();
   }
}
MO.FDuiNumber3_onInputChanged = function FDuiNumber3_onInputChanged(p){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiNumber3_construct = function FDuiNumber3_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2(120, 0);
   o._innerOriginValue = new MO.SPoint3();
   o._innerDataValue = new MO.SPoint3();
}
MO.FDuiNumber3_get = function FDuiNumber3_get(p){
   var o = this;
   o.__base.FDuiEditControl.get.call(o, p);
   var v = o._innerDataValue;
   var h = o._hInput1;
   if(h){
      v.x = MO.Lang.Float.parse(h.value);
   }
   var h = o._hInput2;
   if(h){
      v.y = MO.Lang.Float.parse(h.value);
   }
   var h = o._hInput3;
   if(h){
      v.z = MO.Lang.Float.parse(h.value);
   }
   return v;
}
MO.FDuiNumber3_set = function FDuiNumber3_set(p){
   var o = this;
   o.__base.FDuiEditControl.set.call(o, p);
   var a = arguments;
   var vo = o._innerOriginValue
   var vd = o._innerDataValue;
   if(a.length == 1){
      if((p.constructor == MO.SPoint3) || (p.constructor == MO.SVector3)){
         vo.assign(p);
         vd.assign(p);
      }else{
         throw new MO.TError('Invalid value format.');
      }
   }else if(a.length == 3){
      vo.set(a[0], a[1], a[2]);
      vd.assign(vo);
   }else{
      throw new MO.TError('Invalid value format.');
   }
   var h = o._hInput1;
   if(h){
      h.value = MO.Lang.Float.format(vd.x, 0, null, 3, null);
   }
   var h = o._hInput2;
   if(h){
      h.value = MO.Lang.Float.format(vd.y, 0, null, 3, null);
   }
   var h = o._hInput3;
   if(h){
      h.value = MO.Lang.Float.format(vd.z, 0, null, 3, null);
   }
   o.changeSet(false);
}
MO.FDuiNumber3_refreshStyle = function FDuiNumber3_refreshStyle(){
   var o = this;
   o.__base.FDuiEditControl.refreshStyle.call(o);
   var inputStyle = null;
   if(o._statusEditable){
      if(o._statusValueHover){
         inputStyle = 'InputHover';
      }else{
         inputStyle = 'InputNormal';
      }
   }else{
      inputStyle = 'InputReadonly';
   }
   o._hInput1.className = o.styleName(inputStyle);
   o._hInput1.readOnly = !o._statusEditable;
   o._hInput2.className = o.styleName(inputStyle);
   o._hInput2.readOnly = !o._statusEditable;
   o._hInput3.className = o.styleName(inputStyle);
   o._hInput3.readOnly = !o._statusEditable;
}
MO.FDuiNumber3_dispose = function FDuiNumber3_dispose(){
   var o = this
   o._inputSize = MO.Lang.Object.dispose(o._inputSize);
   o._dataValue = MO.Lang.Object.dispose(o._dataValue);
   o._currentValue = MO.Lang.Object.dispose(o._currentValue);
   o.__base.FDuiEditControl.dispose.call(o);
}
MO.FDuiNumber3_onDataKeyDown = function FDuiNumber3_onDataKeyDown(s, e){
   var o = this;
   o.__base.FDuiEditControl.onDataKeyDown.call(o, s, e);
   if(o.editCase){
      RKey.fixCase(e, o.editCase);
   }
}
MO.FDuiNumber3_formatValue = function FDuiNumber3_formatValue(v){
   var o = this;
   var r = MO.Lang.String.nvl(v);
   if(ECase.Upper == o.editCase){
      r = MO.Lang.String.toUpper(r);
   }else if(ECase.Lower == o.editCase){
      r = MO.Lang.String.toLower(r);
   }
   return r;
}
MO.FDuiNumber3_setText = function FDuiNumber3_setText(t){
   var o = this;
   if(!o.hEdit){
      return;
   }
   if('U'== o.editCase){
      o.hEdit.value = MO.Lang.String.toUpper(t);
   }else if('L'== o.editCase){
         o.hEdit.value = MO.Lang.String.toLower(t);
   }else{
      o.hEdit.value = t;
   }
   if('right' == o.editAlign ){
      o.hEdit.style.textAlign = 'right';
   }else if('left' == o.editAlign ){
      o.hEdit.style.textAlign = 'left';
   }else{
      o.hEdit.style.textAlign = 'center';
   }
}
MO.FDuiNumber3_validText = function FDuiNumber3_validText(t){
   var o = this;
   var r = o.__base.FDuiEditControl.validText.call(o, t);
   if(!r){
      if(o.validLenmin){
         if(o.validLenmin > t.length){
            return RContext.get('MDescEdit:ValidMinLength', o.validLenmin);
         }
      }
      if(o.validLenmax){
         if(o.validLenmax < t.length){
            return RContext.get('MDescEdit:ValidMaxLength', o.validLenmax);
         }
      }
   }
   return r;
}
MO.FDuiNumber3_findEditor = function FDuiNumber3_findEditor(){
   var o = this;
   if(o.editComplete){
      var de = o.editor;
      if(!de){
         o.dsControl = o.topControl(MDataset);
         if(o.dsControl){
            de = o.editor = RConsole.find(FDuiNumber3Console).focus(o, FDuiNumber3Editor);
         }
      }
      if(de){
         de.linkControl(o);
      }
      return o.editor;
   }
}
MO.FDuiNumber3_drop = function FDuiNumber3_drop(){
   var o = this;
   var de = o.findEditor();
   if(de){
      var t = o.reget();
      if(t.length > 0){
         if(o.finded != t){
            if(de.source != o){
               de.linkControl(o);
            }
            de.search(t);
         }
         o.finded = t;
      }
   }
}
MO.FDuiNumber3_clone = function FDuiNumber3_clone(){
   var o = this;
   var r = o._class.newInstance();
   GHtml_clone(r, o.hPanel);
   return r;
}
MO.FDuiNumber3_link = function FDuiNumber3_link(){
   var o = this;
}
MO.FDuiNumber4 = function FDuiNumber4(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl);
   o._inputSize            = MO.Class.register(o, [new MO.APtySize2('_inputSize'), new MO.AGetter('_inputSize')]);
   o._listenersDataChanged = MO.Class.register(o, new MO.AListener('_listenersDataChanged', MO.EEvent.DataChanged));
   o._hInput               = null;
   o.onBuildEditInput      = MO.FDuiNumber4_onBuildEditInput;
   o.onBuildEditValue      = MO.FDuiNumber4_onBuildEditValue;
   o.onInputKeyPress       = MO.Class.register(o, new MO.AEventKeyPress('onInputKeyPress'), MO.FDuiNumber4_onInputKeyPress);
   o.onInputChanged        = MO.Class.register(o, new MO.AEventInputChanged('onInputChanged'), MO.FDuiNumber4_onInputChanged);
   o.construct             = MO.FDuiNumber4_construct;
   o.get                   = MO.FDuiNumber4_get;
   o.set                   = MO.FDuiNumber4_set;
   o.text                  = MO.FDuiNumber4_text;
   o.refreshStyle          = MO.FDuiNumber4_refreshStyle;
   o.dispose               = MO.FDuiNumber4_dispose;
   return o;
}
MO.FDuiNumber4_onBuildEditInput = function FDuiNumber4_onBuildEditInput(event, hTag){
   var o = this;
   o.attachEvent('onInputKeyPress', hTag, o.onInputKeyPress);
   o.attachEvent('onInputChanged', hTag, o.onInputChanged);
}
MO.FDuiNumber4_onBuildEditValue = function FDuiNumber4_onBuildEditValue(p){
   var o = this;
   var hValuePanel = o._hValuePanel;
   var hValueForm = o._hValueForm = MO.Window.Builder.appendTable(hValuePanel);
   var hValueLine = MO.Window.Builder.appendTableRow(hValueForm);
   MO.Window.Html.setSize(hValueForm, o._inputSize);
   var hCell = MO.Window.Builder.appendTableCell(hValueLine, o.styleName('InputPanel'));
   var hInput = o._hInput1 = MO.Window.Builder.appendEdit(hCell);
   hInput.style.textAlign = 'right';
   o.onBuildEditInput(event, hInput)
   var hCell = MO.Window.Builder.appendTableCell(hValueLine, o.styleName('InputPanel'));
   hCell.style.borderLeft = '1px solid #EEEEEE';
   var hInput = o._hInput2 = MO.Window.Builder.appendEdit(hCell);
   hInput.style.textAlign = 'right';
   o.onBuildEditInput(event, hInput)
   var hCell = MO.Window.Builder.appendTableCell(hValueLine, o.styleName('InputPanel'));
   hCell.style.borderLeft = '1px solid #EEEEEE';
   var hInput = o._hInput3 = MO.Window.Builder.appendEdit(hCell);
   hInput.style.textAlign = 'right';
   o.onBuildEditInput(event, hInput)
   var hCell = MO.Window.Builder.appendTableCell(hValueLine, o.styleName('InputPanel'));
   hCell.style.borderLeft = '1px solid #EEEEEE';
   var hInput = o._hInput4 = MO.Window.Builder.appendEdit(hCell);
   hInput.style.textAlign = 'right';
   o.onBuildEditInput(event, hInput)
}
MO.FDuiNumber4_onInputKeyPress = function FDuiNumber4_onInputKeyPress(p){
   var o = this;
}
MO.FDuiNumber4_onInputChanged = function FDuiNumber4_onInputChanged(p){
   var o = this;
}
MO.FDuiNumber4_construct = function FDuiNumber4_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2(0, 0);
   o._currentValue = new MO.SPoint4();
   o._dataValue = new MO.SPoint4();
}
MO.FDuiNumber4_get = function FDuiNumber4_get(value){
   var o = this;
   var currentValue = MO.Runtime.nvl(value, o._currentValue);
   var text1 = o._hInput1.value;
   currentValue.x = MO.Lang.Float.parse(text1);
   var text2 = o._hInput2.value;
   currentValue.y = MO.Lang.Float.parse(text2);
   var text3 = o._hInput3.value;
   currentValue.y = MO.Lang.Float.parse(text3);
   var text4 = o._hInput4.value;
   currentValue.y = MO.Lang.Float.parse(text4);
   return currentValue;
}
MO.FDuiNumber4_set = function FDuiNumber4_set(value){
   var o = this;
   var dataValue = o._dataValue;
   if(arguments.length == 1){
      var value = arguments[0];
      if(value == null){
         dataValue.set(0, 0);
      }else if(value.constructor == String){
         dataValue.parse(value);
      }else if(value.constructor == MO.SPoint4){
         dataValue.set(value.x, value.y, value.z, value.w);
      }else if(value.constructor == MO.SVector4){
         dataValue.set(value.x, value.y, value.z, value.w);
      }else{
         throw new MO.TError('Invalid value format.');
      }
   }else if(arguments.length == 4){
      dataValue.set(arguments[0], arguments[1], arguments[2], arguments[3]);
   }else{
      throw new MO.TError('Invalid value format.');
   }
   o._hInput1.value = MO.Lang.Float.format(dataValue.x, 0, null, 2, null);
   o._hInput2.value = MO.Lang.Float.format(dataValue.y, 0, null, 2, null);
   o._hInput3.value = MO.Lang.Float.format(dataValue.z, 0, null, 2, null);
   o._hInput4.value = MO.Lang.Float.format(dataValue.w, 0, null, 2, null);
   o.changeSet(false);
}
MO.FDuiNumber4_text = function FDuiNumber4_text(){
   var o = this;
   var value = o.get();
   var text = value.toString();
   return text;
}
MO.FDuiNumber4_refreshStyle = function FDuiNumber4_refreshStyle(){
   var o = this;
   o.__base.FDuiEditControl.refreshStyle.call(o);
   var inputStyle = null;
   if(o._statusEditable){
      if(o._statusValueHover){
         inputStyle = 'InputHover';
      }else{
         inputStyle = 'InputNormal';
      }
   }else{
      inputStyle = 'InputReadonly';
   }
   o._hInput1.className = o.styleName(inputStyle);
   o._hInput1.readOnly = !o._statusEditable;
   o._hInput2.className = o.styleName(inputStyle);
   o._hInput2.readOnly = !o._statusEditable;
   o._hInput3.className = o.styleName(inputStyle);
   o._hInput3.readOnly = !o._statusEditable;
   o._hInput4.className = o.styleName(inputStyle);
   o._hInput4.readOnly = !o._statusEditable;
}
MO.FDuiNumber4_dispose = function FDuiNumber4_dispose(){
   var o = this
   o._inputSize = MO.Lang.Object.dispose(o._inputSize);
   o._dataValue = MO.Lang.Object.dispose(o._dataValue);
   o._currentValue = MO.Lang.Object.dispose(o._currentValue);
   o.__base.FDuiEditControl.dispose.call(o);
}
MO.FDuiNumber4_onDataKeyDown = function FDuiNumber4_onDataKeyDown(s, e){
   var o = this;
   o.__base.FDuiEditControl.onDataKeyDown.call(o, s, e);
   if(o.editCase){
      RKey.fixCase(e, o.editCase);
   }
}
MO.FDuiNumber4_formatValue = function FDuiNumber4_formatValue(v){
   var o = this;
   var r = MO.Lang.String.nvl(v);
   if(ECase.Upper == o.editCase){
      r = MO.Lang.String.toUpper(r);
   }else if(ECase.Lower == o.editCase){
      r = MO.Lang.String.toLower(r);
   }
   return r;
}
MO.FDuiNumber4_setText = function FDuiNumber4_setText(t){
   var o = this;
   if(!o.hEdit){
      return;
   }
   if('U'== o.editCase){
      o.hEdit.value = MO.Lang.String.toUpper(t);
   }else if('L'== o.editCase){
         o.hEdit.value = MO.Lang.String.toLower(t);
   }else{
      o.hEdit.value = t;
   }
   if('right' == o.editAlign ){
      o.hEdit.style.textAlign = 'right';
   }else if('left' == o.editAlign ){
      o.hEdit.style.textAlign = 'left';
   }else{
      o.hEdit.style.textAlign = 'center';
   }
}
MO.FDuiNumber4_validText = function FDuiNumber4_validText(t){
   var o = this;
   var r = o.__base.FDuiEditControl.validText.call(o, t);
   if(!r){
      if(o.validLenmin){
         if(o.validLenmin > t.length){
            return RContext.get('MDescEdit:ValidMinLength', o.validLenmin);
         }
      }
      if(o.validLenmax){
         if(o.validLenmax < t.length){
            return RContext.get('MDescEdit:ValidMaxLength', o.validLenmax);
         }
      }
   }
   return r;
}
MO.FDuiNumber4_findEditor = function FDuiNumber4_findEditor(){
   var o = this;
   if(o.editComplete){
      var de = o.editor;
      if(!de){
         o.dsControl = o.topControl(MDataset);
         if(o.dsControl){
            de = o.editor = RConsole.find(FDuiNumber4Console).focus(o, FDuiNumber4Editor);
         }
      }
      if(de){
         de.linkControl(o);
      }
      return o.editor;
   }
}
MO.FDuiNumber4_drop = function FDuiNumber4_drop(){
   var o = this;
   var de = o.findEditor();
   if(de){
      var t = o.reget();
      if(t.length > 0){
         if(o.finded != t){
            if(de.source != o){
               de.linkControl(o);
            }
            de.search(t);
         }
         o.finded = t;
      }
   }
}
MO.FDuiNumber4_clone = function FDuiNumber4_clone(){
   var o = this;
   var r = o._class.newInstance();
   GHtml_clone(r, o.hPanel);
   return r;
}
MO.FDuiNumber4_link = function FDuiNumber4_link(){
   var o = this;
}
MO.FDuiPanel = function FDuiPanel(o){
   o = MO.Class.inherits(this, o, MO.FDuiLayout, MO.MDuiDesign, MO.MDuiFocus);
   o._sizeCd      = MO.EUiSize.Horizontal;
   o._stylePanel  = MO.Class.register(o, new MO.AStyle('_stylePanel', 'Panel'));
   o._styleLabel  = MO.Class.register(o, new MO.AStyle('_styleLabel', 'Label'));
   o._styleBody   = MO.Class.register(o, new MO.AStyle('_styleBody', 'Body'));
   o._hImage      = null;
   o._imagePlus   = 'control.panel.plus';
   o._imageMinus  = 'control.panel.minus';
   o._statusBody  = true;
   o.onBuildPanel = MO.FDuiPanel_onBuildPanel;
   o.onTitleClick = MO.Class.register(o, new MO.AEventClick('onTitleClick'), MO.FDuiPanel_onTitleClick);
   return o;
}
MO.FDuiPanel_onBuildPanel = function FDuiPanel_onBuildPanel(p){
   var o = this;
   var h = o._hPanel = MO.Window.Builder.createDiv(p, o.styleName('Panel'));
   var hl = MO.Window.Builder.appendTable(h, o.styleName('Label'));
   o.attachEvent('onTitleClick', hl);
   hl.width = '100%';
   var hr = MO.Window.Builder.appendTableRow(hl);
   hr.vAlign = 'middle';
   var hri = MO.Window.Builder.appendTableCell(hr);
   hri.width = 20;
   o._hImage = MO.Window.Builder.appendIcon(hri, null, o._imageMinus);
   var hrt = MO.Window.Builder.appendTableCell(hr);
   hrt.innerHTML = o._label;
   var hb = o._hBody = MO.Window.Builder.appendDiv(h, o.styleName('Body'))
   o._hPanelForm = MO.Window.Builder.appendTable(hb, o.styleName('Form'));
}
MO.FDuiPanel_onTitleClick = function FDuiPanel_onTitleClick(p){
   var o = this;
   var status = !o._statusBody;
   o._statusBody = status;
   o._hImage.src = MO.Window.Resource.iconPath(status ? o._imageMinus : o._imagePlus);
   MO.Window.Html.displaySet(o._hBody, status);
}
MO.FDuiPanelHorizontal = function FDuiPanelHorizontal(o){
   o = MO.Class.inherits(this, o, MO.FDuiLayoutHorizontal);
   o._sizeCd = MO.EUiSize.Horizontal;
   return o;
}
MO.FDuiPanelVertical = function FDuiPanelVertical(o){
   o = MO.Class.inherits(this, o, MO.FDuiLayoutVertical);
   return o;
}
MO.FDuiPicker = function FDuiPicker(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl);
   o._inputSize            = MO.Class.register(o, [new MO.APtySize2('_inputSize'), new MO.AGetter('_inputSize')]);
   o._listenersDataChanged = MO.Class.register(o, new MO.AListener('_listenersDataChanged', MO.EEvent.DataChanged));
   o._hInput1              = null;
   o._hInput2              = null;
   o.onBuildEditInput      = MO.FDuiPicker_onBuildEditInput;
   o.onBuildEditValue      = MO.FDuiPicker_onBuildEditValue;
   o.onInputKeyPress       = MO.Class.register(o, new MO.AEventKeyPress('onInputKeyPress'), MO.FDuiPicker_onInputKeyPress);
   o.onInputChanged        = MO.Class.register(o, new MO.AEventInputChanged('onInputChanged'), MO.FDuiPicker_onInputChanged);
   o.construct             = MO.FDuiPicker_construct;
   o.get                   = MO.FDuiPicker_get;
   o.set                   = MO.FDuiPicker_set;
   o.text                  = MO.FDuiPicker_text;
   o.refreshStyle          = MO.FDuiPicker_refreshStyle;
   o.dispose               = MO.FDuiPicker_dispose;
   return o;
}
MO.FDuiPicker_onBuildEditInput = function FDuiPicker_onBuildEditInput(event, hTag){
   var o = this;
   o.attachEvent('onInputKeyPress', hTag, o.onInputKeyPress);
   o.attachEvent('onInputChanged', hTag, o.onInputChanged);
}
MO.FDuiPicker_onBuildEditValue = function FDuiPicker_onBuildEditValue(event){
   var o = this;
   var hValuePanel = o._hValuePanel;
   var hValueForm = o._hValueForm = MO.Window.Builder.appendTable(hValuePanel);
   var hLine = MO.Window.Builder.appendTableRow(hValueForm);
   MO.Window.Html.setSize(hValueForm, o._inputSize);
   var hCell = MO.Window.Builder.appendTableCell(hLine, o.styleName('InputPanel'));
   var hInput = o._hInput1 = MO.Window.Builder.appendEdit(hCell);
   o.onBuildEditInput(event, hInput)
   var hCell = MO.Window.Builder.appendTableCell(hLine, o.styleName('InputPanel'));
   hCell.style.borderLeft = '1px solid #EEEEEE';
   var hInput = o._hInput2 = MO.Window.Builder.appendEdit(hCell);
   o.onBuildEditInput(event, hInput)
}
MO.FDuiPicker_onInputKeyPress = function FDuiPicker_onInputKeyPress(p){
   var o = this;
}
MO.FDuiPicker_onInputChanged = function FDuiPicker_onInputChanged(p){
   var o = this;
}
MO.FDuiPicker_construct = function FDuiPicker_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2();
   o._currentValue = new MO.SPoint2();
   o._dataValue = new MO.SPoint2();
}
MO.FDuiPicker_get = function FDuiPicker_get(value){
   var o = this;
   var currentValue = MO.Runtime.nvl(value, o._currentValue);
   var text1 = o._hInput1.value;
   currentValue.x = MO.Lang.Float.parse(text1);
   var text2 = o._hInput2.value;
   currentValue.y = MO.Lang.Float.parse(text2);
   return currentValue;
}
MO.FDuiPicker_set = function FDuiPicker_set(value){
   var o = this;
   var dataValue = o._dataValue;
   if(arguments.length == 1){
      var value = arguments[0];
      if(value == null){
         dataValue.set(0, 0);
      }else if(value.constructor == String){
         dataValue.parse(value);
      }else if(value.constructor == MO.SPoint2){
         dataValue.set(value.x, value.y);
      }else if(value.constructor == MO.SSize2){
         dataValue.set(value.width, value.height);
      }else{
         throw new MO.TError('Invalid value format.');
      }
   }else if(arguments.length == 2){
      dataValue.set(arguments[0], arguments[1]);
   }else{
      throw new MO.TError('Invalid value format.');
   }
   o._hInput1.value = MO.Lang.Float.format(dataValue.x, 0, null, 2, null);
   o._hInput2.value = MO.Lang.Float.format(dataValue.y, 0, null, 2, null);
   o.changeSet(false);
}
MO.FDuiPicker_text = function FDuiPicker_text(){
   var o = this;
   var value = o.get();
   var text = value.toString();
   return text;
}
MO.FDuiPicker_refreshStyle = function FDuiPicker_refreshStyle(){
   var o = this;
   o.__base.FDuiEditControl.refreshStyle.call(o);
   var inputStyle = null;
   if(o._statusEditable){
      if(o._statusValueHover){
         inputStyle = 'InputHover';
      }else{
         inputStyle = 'InputNormal';
      }
   }else{
      inputStyle = 'InputReadonly';
   }
   var hInput1 = o._hInput1;
   hInput1.className = o.styleName(inputStyle);
   hInput1.readOnly = !o._statusEditable;
   var hInput2 = o._hInput2;
   hInput2.className = o.styleName(inputStyle);
   hInput2.readOnly = !o._statusEditable;
}
MO.FDuiPicker_dispose = function FDuiPicker_dispose(){
   var o = this
   o._inputSize = MO.Lang.Object.dispose(o._inputSize);
   o._dataValue = MO.Lang.Object.dispose(o._dataValue);
   o._currentValue = MO.Lang.Object.dispose(o._currentValue);
   o.__base.FDuiEditControl.dispose.call(o);
}
MO.FDuiPicker_onDataKeyDown = function FDuiPicker_onDataKeyDown(s, e){
   var o = this;
   o.__base.FDuiEditControl.onDataKeyDown.call(o, s, e);
   if(o.editCase){
      MO.RKey.fixCase(e, o.editCase);
   }
}
MO.FDuiPicker_formatValue = function FDuiPicker_formatValue(v){
   var o = this;
   var r = MO.Lang.String.nvl(v);
   if(ECase.Upper == o.editCase){
      r = MO.Lang.String.toUpper(r);
   }else if(ECase.Lower == o.editCase){
      r = MO.Lang.String.toLower(r);
   }
   return r;
}
MO.FDuiPicker_setText = function FDuiPicker_setText(t){
   var o = this;
   if(!o.hEdit){
      return;
   }
   if('U'== o.editCase){
      o.hEdit.value = MO.Lang.String.toUpper(t);
   }else if('L'== o.editCase){
         o.hEdit.value = MO.Lang.String.toLower(t);
   }else{
      o.hEdit.value = t;
   }
   if('right' == o.editAlign ){
      o.hEdit.style.textAlign = 'right';
   }else if('left' == o.editAlign ){
      o.hEdit.style.textAlign = 'left';
   }else{
      o.hEdit.style.textAlign = 'center';
   }
}
MO.FDuiPicker_validText = function FDuiPicker_validText(t){
   var o = this;
   var r = o.__base.FDuiEditControl.validText.call(o, t);
   if(!r){
      if(o.validLenmin){
         if(o.validLenmin > t.length){
            return MO.RContext.get('MDescEdit:ValidMinLength', o.validLenmin);
         }
      }
      if(o.validLenmax){
         if(o.validLenmax < t.length){
            return MO.RContext.get('MDescEdit:ValidMaxLength', o.validLenmax);
         }
      }
   }
   return r;
}
MO.FDuiPicker_findEditor = function FDuiPicker_findEditor(){
   var o = this;
   if(o.editComplete){
      var de = o.editor;
      if(!de){
         o.dsControl = o.topControl(MDataset);
         if(o.dsControl){
            de = o.editor = MO.Console.find(MO.FDuiPickerConsole).focus(o, MO.FDuiPickerEditor);
         }
      }
      if(de){
         de.linkControl(o);
      }
      return o.editor;
   }
}
MO.FDuiPicker_drop = function FDuiPicker_drop(){
   var o = this;
   var de = o.findEditor();
   if(de){
      var t = o.reget();
      if(t.length > 0){
         if(o.finded != t){
            if(de.source != o){
               de.linkControl(o);
            }
            de.search(t);
         }
         o.finded = t;
      }
   }
}
MO.FDuiPicker_clone = function FDuiPicker_clone(){
   var o = this;
   var r = o._class.newInstance();
   GHtml_clone(r, o.hPanel);
   return r;
}
MO.FDuiPicker_link = function FDuiPicker_link(){
   var o = this;
}
MO.FDuiPicture = function FDuiPicture(o){
   o = MO.Class.inherits(this, o, MO.FEditControl, MO.MEditBorder, MO.MDescEdit);
   o.storeType         = MO.Class.register(o, new MO.APtyString('storeType'));
   o.storeCode         = MO.Class.register(o, new MO.APtyString('storeCode'));
   o.storeName         = MO.Class.register(o, new MO.APtyString('storeName'));
   o.editAdjust        = MO.Class.register(o, new MO.APtyInteger('editAdjust'));
   o.editMaxWidth      = MO.Class.register(o, new MO.APtyInteger('editMaxWidth'));
   o.editMaxHeight     = MO.Class.register(o, new MO.APtyInteger('editMaxHeight'));
   o.__seed            = 0;
   o.attributes        = null;
   o.border            = null;
   o.borderStyle       = MO.EUiBorder.Round;
   o.onUploadMouseDown = MO.Class.register(o, new HMouseDown('onUploadMouseDown'), FDuiPicture_onUploadMouseDown);
   o.onFileUploaded    = MO.FDuiPicture_onFileUploaded;
   o.onBuildEdit       = MO.FDuiPicture_onBuildEdit;
   o.construct         = MO.FDuiPicture_construct;
   o.makeIconPath      = MO.FDuiPicture_makeIconPath;
   o.setText           = MO.FDuiPicture_setText;
   o.setEditable       = MO.FDuiPicture_setEditable;
   o.dispose           = MO.FDuiPicture_dispose;
   return o;
}
MO.FDuiPicture_onUploadMouseDown = function FDuiPicture_onUploadMouseDown(e){
   var o = this;
   if(o._editable && !o._disbaled){
      var uw = MO.Console.find(MO.FUploadConsole).findWindow();
      uw.lsnsUploaded.register(o, o.onFileUploaded);
      uw.typeCode = 'P';
      uw.fileEdit = false;
      uw.recordCode = o.recordCode;
      uw.recordGuid = o.recordGuid;
      uw.recordName = o.recordName;
      uw.guid = o.guid;
      uw.adjustWidth = o.editWidth;
      uw.adjustHeight = o.editHeight;
      uw.show();
   }
}
MO.FDuiPicture_onFileUploaded = function FDuiPicture_onFileUploaded(s, g){
   var o = this;
   var as = g.attributes;
   o.guid = as.get('GUID');
   o.mime = as.get('MIME');
   o.networkCode = as.get('NETWORK_CODE')
   o.hImage.src = o.makeIconPath(o.guid, o.mime, o.networkCode) + '?' + MO.Lang.Date.format() + (++o.__seed);
   o.hImage.style.display = 'block';
}
MO.FDuiPicture_onBuildEdit = function FDuiPicture_onBuildEdit(b){
   var o = this;
   var hif = o.hImageForm = o.hEdit = MO.Window.Builder.appendTable(b.hPanel);
   hif.width = '100%';
   hif.border = 1;
   hif.height = '100%';
   var hc = o.hImagePanel = hif.insertRow().insertCell();
   hc.align = 'center';
   hc.style.cursor = 'hand';
   o.attachEvent('onUploadMouseDown', o.hImagePanel);
   var h = o.hImage = MO.Window.Builder.append(hc, 'IMAGE');
   h.style.border = '1 solid #CCCCCC';
   h.style.display = 'none';
   if(o.left>0 && o.top>0){
      o.hPanel.style.position = 'absolute';
   }
}
MO.FDuiPicture_construct = function FDuiPicture_construct(){
   var o = this;
   o.base.FEditControl.construct.call(o);
   o.attributes = new MO.TAttributes();
}
MO.FDuiPicture_makeIconPath = function FDuiPicture_makeIconPath(g, m, sc){
   var o = this;
   var s = o.recordCode + '/' + o.recordGuid + '/' + g + '.icon.' + m;
   return top.RContext.context('/svr/' + sc.toLowerCase() + '/sys/' + MO.Lang.String.toLower(s));
}
MO.FDuiPicture_setText = function FDuiPicture_setText(t){
   var o = this;
   var as = o.attributes;
   as.clear();
   var v = false;
   if(!MO.Lang.String.isEmpty(t)){
      as.unpack(t);
      o.networkCode = as.get('nc');
      o.recordCode = as.get('code');
      o.recordGuid = as.get('guid');
      o.recordName = as.get('name');
      o.guid = as.get('ogid');
      o.mime = as.get('mime');
      if(o.guid && o.mime){
         v = true;
         o.hImage.src = o.makeIconPath(o.guid, o.mime, o.networkCode);
      }
   }
   o.hImage.style.display = v ? 'block' : 'none';
}
MO.FDuiPicture_setEditable = function FDuiPicture_setEditable(v){
   var o = this;
   o.base.FEditControl.setEditable.call(o, v);
   if(v){
      o.hImagePanel.style.cursor = 'hand';
   }else{
      o.hImagePanel.style.cursor = 'normal';
   }
}
MO.FDuiPicture_dispose = function FDuiPicture_dispose(){
   var o = this;
   o.base.FEditControl.dispose.call(o);
   o.hImage = null;
}
MO.FDuiProgressBar = function FDuiProgressBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl);
   o._stylePanel  = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._rate        = 0;
   o._hForm       = null;
   o.onBuildPanel = MO.FDuiProgressBar_onBuildPanel;
   o.onBuild      = MO.FDuiProgressBar_onBuild;
   o.get          = MO.FDuiProgressBar_get;
   o.set          = MO.FDuiProgressBar_set;
   o.dispose      = MO.FDuiProgressBar_dispose;
   return o;
}
MO.FDuiProgressBar_onBuildPanel = function FDuiProgressBar_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.Window.Builder.createTable(event, o.styleName('Panel'));
}
MO.FDuiProgressBar_onBuild = function FDuiProgressBar_onBuild(event){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, event);
   var hLine = o._hLine = MO.Window.Builder.appendTableRow(o._hPanel);
   o.hProgress = MO.Window.Builder.appendTableCell(hLine);
   o.hEmpty = MO.Window.Builder.appendTableCell(hLine);
}
MO.FDuiProgressBar_get = function FDuiProgressBar_get(){
   return this._rate;
}
MO.FDuiProgressBar_set = function FDuiProgressBar_set(value){
   var o = this;
   o._rate = value;
}
MO.FDuiProgressBar_dispose = function FDuiProgressBar_dispose(){
   var o = this;
   o._hForm = MO.Window.Html.free(o._hForm);
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiRadio = function FDuiRadio(o){
   o = MO.Class.inherits(this, o, MO.FEditControl);
   o._groupName       = MO.Class.register(o, new MO.APtyString('_groupName'));
   o._styleInput      = MO.Class.register(o, new MO.AStyle('_styleInput', 'Input'));
   o._hInput          = null;
   o.onBuildEditValue = MO.FDuiRadio_onBuildEditValue;
   return o;
}
MO.FDuiRadio_onBuildEditValue = function FDuiRadio_onBuildEditValue(p){
   var o = this;
   o._hInput = MO.Window.Builder.appendRadio(o._hValuePanel, o.styleName('Input'));
}
MO.FDuiRadio_clearValue = function FDuiRadio_clearValue(){
   this.hEdit.checked = false;
}
MO.FDuiRadio_resetValue = function FDuiRadio_resetValue(){
   this.hEdit.checked = this._editChecked;
}
MO.FDuiRadio_saveValue = function FDuiRadio_saveValue(vs){
   var o = this;
   if(o.hEdit.checked){
      vs.set(o.dataName, o.dataDefault);
   }
}
MO.FDuiRadio_text = function FDuiRadio_text(){
   return this.hEdit.checked ? this.dataDefault : '';
}
MO.FDuiRadio_setText = function FDuiRadio_setText(t){
   this.hEdit.checked = (this.dataDefault == t);
}
MO.FDuiRadio_refreshStyle = function FDuiRadio_refreshStyle(){
   var o = this;
   var h = o.panel(MO.EPanel.Edit);
   h.disabled = !o._editable;
   h.style.cursor = o._editable? 'hand':'normal';
}
MO.FDuiSelect = function FDuiSelect(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl, MO.MUiContainer, MO.MUiPropertySelect);
   o._inputSize            = MO.Class.register(o, [new MO.APtySize2('_inputSize'), new MO.AGetter('_inputSize')]);
   o._listenersDataChanged = MO.Class.register(o, new MO.AListener('_listenersDataChanged', MO.EEvent.DataChanged));
   o._hValueForm           = null;
   o._hValueLine           = null;
   o._hInputPanel          = null;
   o._hInput               = null;
   o.onBuildEditValue      = MO.FDuiSelect_onBuildEditValue;
   o.onDoubleClick         = MO.Class.register(o, new MO.AEventDoubleClick('onDoubleClick'), MO.FDuiSelect_onDropClick);
   o.onDropClick           = MO.FDuiSelect_onDropClick;
   o.onKeyDown             = MO.Class.register(o, new MO.AEventKeyDown('onKeyDown'), MO.FDuiSelect_onKeyDown);
   o.construct             = MO.FDuiSelect_construct;
   o.createChild           = MO.FDuiSelect_createChild;
   o.findItemByLabel       = MO.FDuiSelect_findItemByLabel;
   o.findItemByValue       = MO.FDuiSelect_findItemByValue;
   o.formatValue           = MO.FDuiSelect_formatValue;
   o.formatDisplay         = MO.FDuiSelect_formatDisplay;
   o.get                   = MO.FDuiSelect_get;
   o.set                   = MO.FDuiSelect_set;
   o.selectItem            = MO.FDuiSelect_selectItem;
   o.refreshValue          = MO.FDuiSelect_refreshValue;
   o.refreshStyle          = MO.FDuiSelect_refreshStyle;
   o.drop                  = MO.FDuiSelect_drop;
   o.dispose               = MO.FDuiSelect_dispose;
   return o;
}
MO.FDuiSelect_onBuildEditValue = function FDuiSelect_onBuildEditValue(event){
   var o = this;
   var hValuePanel = o._hValuePanel;
   var hValueForm = o._hValueForm = MO.Window.Builder.appendTable(hValuePanel);
   var hValueLine = o._hValueLine = MO.Window.Builder.appendTableRow(hValueForm);
   MO.Window.Html.setSize(hValueForm, o._inputSize);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hValueLine);
   o.onBuildEditChange(event);
   var hInputPanel = o._hInputPanel = MO.Window.Builder.appendTableCell(hValueLine, o.styleName('InputPanel'));
   var hInput = o._hInput = MO.Window.Builder.appendEdit(hInputPanel);
   o.attachEvent('onDoubleClick', hInput);
   o.attachEvent('onKeyDown', hInput);
   if(o._editLength){
      hInput.maxLength = o._editLength;
   }
   var hdp = o._hDropPanel = MO.Window.Builder.appendTableCell(hValueLine);
   o.onBuildEditDrop(event);
   var item = o._emptyItem = MO.Class.create(MO.FDuiSelectItem);
   item.build(event);
   o.push(item);
}
MO.FDuiSelect_onDropClick = function FDuiSelect_onDropClick(event){
   this.drop();
}
MO.FDuiSelect_onKeyDown = function FDuiSelect_onKeyDown(event){
   var o = this;
   var editor = o._editor;
   if(editor && editor._statusEditing && (editor._source == o)){
      editor.onEditKeyDown(event);
      return;
   }
   if(event.keyCode == MO.EKeyCode.Down){
      o.drop();
   }
}
MO.FDuiSelect_construct = function FDuiSelect_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2();
}
MO.FDuiSelect_createChild = function FDuiSelect_createChild(xconfig){
   var control = MO.Dui.Control.newInstance(xconfig);
   control._parent = this;
   return control;
}
MO.FDuiSelect_findItemByLabel = function FDuiSelect_findItemByLabel(label){
   var o = this;
   var components = o._components;
   if(components){
      var count = components.count();
      for(var i = 0; i < count; i++){
         var component = components.at(i);
         if(MO.Lang.String.equals(component.label(), label, true)){
            return component;
         }
      }
   }
   return null;
}
MO.FDuiSelect_findItemByValue = function FDuiSelect_findItemByValue(dataValue){
   var o = this;
   var components = o._components;
   if(components){
      var count = components.count();
      for(var i = 0; i < count; i++){
         var component = components.at(i);
         if(MO.Lang.String.equals(component.dataValue(), dataValue, true)){
            return component;
         }
      }
   }
   return null;
}
MO.FDuiSelect_formatValue = function FDuiSelect_formatValue(label){
   var o = this;
   var item = o.findItemByLabel(label);
   if(item){
      return MO.Lang.String.nvl(item.dataValue());
   }
   return item;
}
MO.FDuiSelect_formatDisplay = function FDuiSelect_formatDisplay(value){
   var o = this;
   var label = '';
   var item = o.findItemByValue(value);
   if(item){
      label = MO.Lang.String.nvl(item.label());
   }
   return label;
}
MO.FDuiSelect_get = function FDuiSelect_get(){
   var o = this;
   var value = null;
   var text = o._hInput.value;
   var item = o.findItemByLabel(text);
   if(item){
      value = item.dataValue();
   }
   return value;
}
MO.FDuiSelect_set = function FDuiSelect_set(value){
   var o = this;
   var text = null;
   var item = o.findItemByValue(value);
   if(item){
      text = item.label();
   }
   o._hInput.value = MO.Lang.String.nvl(text);
   o.changeSet(false);
}
MO.FDuiSelect_selectItem = function FDuiSelect_selectItem(item){
   var o = this;
   o._hInput.value = MO.Lang.String.nvl(item.label());
   o.refreshValue();
}
MO.FDuiSelect_refreshValue = function FDuiSelect_refreshValue(){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiSelect_refreshStyle = function FDuiSelect_refreshStyle(){
   var o = this;
   o.__base.FDuiEditControl.refreshStyle.call(o);
   o.__base.MDuiEditDrop.refreshStyle.call(o);
   var hInput = o._hInput;
   var inputStyle = null;
   if(o._statusEditable){
      if(o._statusValueHover){
         inputStyle = 'InputHover';
      }else{
         inputStyle = 'InputNormal';
      }
   }else{
      inputStyle = 'InputReadonly';
   }
   hInput.className = o.styleName(inputStyle);
   hInput.readOnly = !o._statusEditable;
}
MO.FDuiSelect_drop = function FDuiSelect_drop(){
   var o = this;
   if(o.hasComponent()){
      var value = o.get();
      var editor = o._editor = MO.Console.find(MO.FDuiEditorConsole).focus(o, MO.FDuiSelectEditor, o._name);
      editor.buildItems(o);
      editor.set(value);
      editor.show();
   }
}
MO.FDuiSelect_dispose = function FDuiSelect_dispose(){
   var o = this;
   o.__base.FDuiEditControl.dispose.call(o);
}
MO.FDuiSelect_onEditEnd = function FDuiSelect_onEditEnd(e){
   var o = this;
   if(e){
      o.set(e.get());
      o._invalidText = o.validText(o.text());
      o.refreshStyle();
   }
   o.onDataEditEnd(o);
}
MO.FDuiSelect_loadConfig = function FDuiSelect_loadConfig(c){
   var o = this;
   o.__base.FDuiEditControl.loadConfig.call(o, c);
   if(o.dataEmpty){
      o.items.create();
   }
   if(!o.editCheck){
      o.items.create('', '');
   }
   o.items.loadConfig(c);
   var ns = c.nodes;
   if(ns){
   var nc = ns.count;
      for(var n = 0; n < nc; n++){
        var p = ns.get(n);
         if(p.isName('Event')){
            var e = MO.Class.create(FEvent);
             e.loadConfig(p);
             o.push(e);
         }
      }
   }
   return EStatus.Stop;
}
MO.FDuiSelect_doBlur = function FDuiSelect_doBlur(){
   var o = this;
   o.__base.FDuiEditControl.doBlur.call(o);
   if(o._editor){
      o._editor.hide();
   }
}
MO.FDuiSelectEditor = function FDuiSelectEditor(o){
   o = MO.Class.inherits(this, o, MO.FDuiDropEditor);
   o._items              = null;
   o._position           = null;
   o._valueRectangle     = null;
   o._listenersItemClick = MO.Class.register(o, new MO.AListener('_listenersItemClick', MO.EEvent.ItemClick));
   o._hDropLayout        = null;
   o._hItemsForm         = null;
   o.onBuildDrop        = MO.FDuiSelectEditor_onBuildDrop;
   o.onItemClick        = MO.FDuiSelectEditor_onItemClick;
   o.onEditKeyDown      = MO.FDuiSelectEditor_onEditKeyDown;
   o.onEditEnd          = MO.FDuiSelectEditor_onEditEnd;
   o.construct          = MO.FDuiSelectEditor_construct;
   o.testBlur           = MO.FDuiSelectEditor_testBlur;
   o.buildItems         = MO.FDuiSelectEditor_buildItems;
   o.clearItems         = MO.FDuiSelectEditor_clearItems;
   o.get                = MO.FDuiSelectEditor_get;
   o.set                = MO.FDuiSelectEditor_set;
   o.select             = MO.FDuiSelectEditor_select;
   o.fetch              = MO.FDuiSelectEditor_fetch;
   o.setVisible         = MO.FDuiSelectEditor_setVisible;
   o.dispose            = MO.FDuiSelectEditor_dispose;
   return o;
}
MO.FDuiSelectEditor_onBuildDrop = function FDuiSelectEditor_onBuildDrop(){
   var o = this;
   var hl = o._hDropLayout = MO.Window.Builder.appendDiv(o._hDropPanel)
   var hf = o._hItemsForm = MO.Window.Builder.appendTable(hl);
   o._hItemsBody = MO.Window.Builder.append(hf, 'TBODY');
}
MO.FDuiSelectEditor_onItemClick = function FDuiSelectEditor_onItemClick(p){
   var o = this;
   var s = o._source;
   o._position = o._items.indexOfValue(p);
   o.editEnd();
}
MO.FDuiSelectEditor_onEditKeyDown = function FDuiSelectEditor_onEditKeyDown(p){
   var o = this;
   switch(p.keyCode){
      case MO.EKeyCode.Up:
         o.select(o._position - 1);
         break;
      case MO.EKeyCode.Down:
         o.select(o._position + 1);
         break;
      case MO.EKeyCode.Enter:
         o.editEnd();
         break;
      case MO.EKeyCode.Esc:
         o.editCancel();
         break;
   }
}
MO.FDuiSelectEditor_onEditEnd = function FDuiSelectEditor_onEditEnd(){
   var o = this;
   var s = o._source;
   var c = o._items.value(o._position);
   s.selectItem(c);
   o.__base.FDuiDropEditor.onEditEnd.call(o);
}
MO.FDuiSelectEditor_construct = function FDuiSelectEditor_construct(){
   var o = this;
   o.__base.FDuiDropEditor.construct.call(o);
   o._valueRectangle = new MO.SRectangle();
}
MO.FDuiSelectEditor_testBlur = function FDuiSelectEditor_testBlur(c){
   var o = this;
   if(o._source == c){
      return false;
   }
   return !this._items.contains(c);
}
MO.FDuiSelectEditor_clearItems = function FDuiSelectEditor_clearItems(){
   var o = this;
   var hb = o._hItemsBody;
   var cs = o._items;
   if(cs){
      for(var i = cs.count() - 1; i >= 0; i--){
         var ci = cs.value(i);
         ci.removeClickListener(o, o.onItemClick);
         hb.removeChild(ci._hPanel);
      }
   }
   o._position = 0;
}
MO.FDuiSelectEditor_buildItems = function FDuiSelectEditor_buildItems(p){
   var o = this;
   var hb = o._hItemsBody;
   var cs = p.components();
   if(cs == o._items){
      return;
   }else{
      o.clearItems();
   }
   var c = cs.count();
   for(var i = 0; i < c; i++){
      var ci = cs.value(i);
      ci.addClickListener(o, o.onItemClick);
      ci.setPanel(hb);
   }
   o._position = 0;
   o._items = cs;
}
MO.FDuiSelectEditor_get = function FDuiSelectEditor_get(){
   var o = this;
   return o._items.get(o._position).value;
}
MO.FDuiSelectEditor_set = function FDuiSelectEditor_set(v){
   var o = this;
   o._position = -1;
   var ps = o._items;
   var pc = ps.count();
   for(var i = 0; i < pc; i++){
      var p = ps.value(i);
      if(MO.Lang.String.equals(p._dataValue, v, true)){
         o._position = i;
         p.setChecked(true);
      }else{
         p.setChecked(false);
      }
   }
}
MO.FDuiSelectEditor_select = function FDuiSelectEditor_select(p){
   var o = this;
   var s = o._items;
   var c = s.count();
   var n = MO.Lang.Integer.toRange(p, 0, c - 1);
   for(var i = 0; i < c; i++){
      s.value(i).setChecked(i == n);
   }
   o._position = n;
}
MO.FDuiSelectEditor_fetch = function FDuiSelectEditor_fetch(){
   var o = this;
   if(!o.hasFetched){
      var g = new TCodeListServiceArg();
      var f = o._source.topControl(MDataset);
      g.values = f.getCurrentRows();
      g.name = o._source.editRefer;
      var doc = MO.Console.find(MO.FCodeListConsole).fetch(g);
      if(doc){
         var edt = o._source;
         edt._items.clear();
         edt._items.loadConfig(doc.root().nodes.get(0));
      }
      o.hasFetched = true;
   }
}
MO.FDuiSelectEditor_setVisible = function FDuiSelectEditor_setVisible(visible){
   var o = this;
   o.__base.FDuiDropEditor.setVisible.call(o, visible);
   var hPanel = o._hPanel;
   var hItemsForm = o._hItemsForm;
   if(visible){
      var source = o._source;
      var rectangle = source.calculateValueRectangle(o._valueRectangle);
      hItemsForm.width = '';
      var formWidth = hItemsForm.offsetWidth;
      hPanel.style.left = rectangle.left + 'px';
      hPanel.style.top = rectangle.bottom() + 'px';
      hPanel.style.width = Math.max(formWidth, rectangle.width) + 'px';
      hItemsForm.width = '100%';
      if(hItemsForm.offsetHeight > o._minHeight){
         o._hDropLayout.style.overflowY = 'scroll';
         o._hDropLayout.style.height = o._minHeight + 'px';
      }
   }
}
MO.FDuiSelectEditor_dispose = function FDuiSelectEditor_dispose(){
   var o = this;
   o._valueRectangle = MO.Lang.Object.dispose(o._valueRectangle);
   o._hDropLayout = MO.Window.Html.free(o._hDropLayout);
   o._hItemsForm = MO.Window.Html.free(o._hItemsForm);
   o.__base.FDuiDropEditor.dispose.call(o);
}
MO.FDuiSelectItem = function FDuiSelectItem(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl);
   o._icon             = MO.Class.register(o, [new MO.APtyString('_icon'), new MO.AGetter('_icon')]);
   o._dataValue        = MO.Class.register(o, [new MO.APtyString('_dataValue'), new MO.AGetSet('_dataValue')]);
   o._note             = MO.Class.register(o, [new MO.APtyString('_note'), new MO.AGetSet('_note')]);
   o._styleNormal      = MO.Class.register(o, new MO.AStyle('_styleNormal'));
   o._styleHover       = MO.Class.register(o, new MO.AStyle('_styleHover'));
   o._styleSelect      = MO.Class.register(o, new MO.AStyle('_styleSelect'));
   o._styleIconChecked = MO.Class.register(o, new MO.AStyle('_styleIcon'));
   o._styleLabel       = MO.Class.register(o, new MO.AStyle('_styleLabel'));
   o._styleNote        = MO.Class.register(o, new MO.AStyle('_styleNote'));
   o._checked          = false;
   o._listenersClick   = MO.Class.register(o, new MO.AListener('_listenersClick', MO.EEvent.Click));
   o._hIconPanel       = null;
   o._hIcon            = null;
   o._hLabelPanel      = null;
   o._hNotePanel       = null;
   o.onBuildPanel      = MO.FDuiSelectItem_onBuildPanel;
   o.onBuild           = MO.FDuiSelectItem_onBuild;
   o.onEnter           = MO.FDuiSelectItem_onEnter;
   o.onLeave           = MO.FDuiSelectItem_onLeave;
   o.onMouseDown       = MO.Class.register(o, new MO.AEventMouseDown('onMouseDown'), MO.FDuiSelectItem_onMouseDown);
   o.setChecked        = MO.FDuiSelectItem_setChecked;
   o.set               = MO.FDuiSelectItem_set;
   o.dispose           = MO.FDuiSelectItem_dispose;
   return o;
}
MO.FDuiSelectItem_onBuildPanel = function FDuiSelectItem_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.Window.Builder.createTableRow(p, o.styleName("Normal"));
}
MO.FDuiSelectItem_onBuild = function FDuiSelectItem_onBuild(event){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, event);
   var hPanel = o._hPanel;
   o.attachEvent('onMouseDown', hPanel);
   var hIconPanel = o._hIconPanel = MO.Window.Builder.appendTableCell(hPanel, o.styleName("Icon"));
   hIconPanel.width = 18;
   hIconPanel.align = 'center';
   var hIconPanel = o._hLabelPanel = MO.Window.Builder.appendTableCell(hPanel, o.styleName("Label"));
   if(o._label){
      hIconPanel.innerHTML = o._label;
   }else{
      hIconPanel.innerHTML = '&nbsp;';
   }
   o._hNotePanel = MO.Window.Builder.appendTableCell(hPanel, o.styleName("Note"));
}
MO.FDuiSelectItem_onEnter = function FDuiSelectItem_onEnter(){
   var o = this;
   o.__base.FDuiControl.onEnter.call(o);
   o._hPanel.className = MO.Lang.Boolean.parse(o._checked) ? o.styleName('Select') : o.styleName('Hover');
}
MO.FDuiSelectItem_onLeave = function FDuiSelectItem_onLeave(){
   var o = this;
   o._hPanel.className = MO.Lang.Boolean.parse(o._checked) ? o.styleName('Select') : o.styleName('Normal');
   o.__base.FDuiControl.onLeave.call(o);
}
MO.FDuiSelectItem_onMouseDown = function FDuiSelectItem_onMouseDown(){
   var o = this;
   o.processClickListener(o);
}
MO.FDuiSelectItem_setChecked = function FDuiSelectItem_setChecked(value){
   var o = this;
   o._checked = value;
   if(o._hIcon){
      o._hIcon.style.display = value ? 'block' : 'none';
   }else{
      o._hIconPanel.innerHTML = value ? 'O' : '';
   }
   o._hPanel.className = value ? o.styleName('Select') : o.styleName('Normal');
}
MO.FDuiSelectItem_set = function FDuiSelectItem_set(icon, label, value, note){
   var o = this;
   o._icon = MO.Lang.String.nvl(icon);
   if(!MO.Lang.String.isEmpty(o._icon)){
      o._hIcon = MO.Window.Builder.appendIcon(o._hIconPanel, o.styleIcon(o._icon));
   }
   o._label = MO.Lang.String.nvl(label);
   o._value = MO.Lang.String.nvl(value);
   o._note = MO.Lang.String.nvl(note);
   o._hLabelPanel.innerText = o._label;
   o._hNotePanel.innerText = o._note;
}
MO.FDuiSelectItem_dispose = function FDuiSelectItem_dispose(){
   var o = this;
   o._hIconPanel = MO.Window.Html.free(o._hIconPanel);
   o._hLabelPanel = MO.Window.Html.free(o._hLabelPanel);
   o._hNotePanel = MO.Window.Html.free(o._hNotePanel);
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiSlideNumber = function FDuiSlideNumber(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl, MO.MUiPropertyNumber, MO.MListenerDataChanged, MO.MMouseCapture);
   o._inputSize          = MO.Class.register(o, new MO.APtySize2('_inputSize'));
   o._styleSlidePanel    = MO.Class.register(o, new MO.AStyle('_styleSlidePanel'));
   o._styleValuePanel    = MO.Class.register(o, new MO.AStyle('_styleValuePanel'));
   o._styleInput         = MO.Class.register(o, new MO.AStyle('_styleInput'));
   o._styleAdjustForm    = MO.Class.register(o, new MO.AStyle('_styleAdjustForm'));
   o._styleUpPanel       = MO.Class.register(o, new MO.AStyle('_styleUpPanel'));
   o._styleDownPanel     = MO.Class.register(o, new MO.AStyle('_styleDownPanel'));
   o._innerOriginValue   = null;
   o._innerDataValue     = null;
   o._slide              = null;
   o._hInput             = null;
   o._iconUp             = null;
   o._iconDown           = null;
   o.onBuildEditValue    = MO.FDuiSlideNumber_onBuildEditValue;
   o.onMouseCaptureStart = MO.FDuiSlideNumber_onMouseCaptureStart;
   o.onMouseCapture      = MO.FDuiSlideNumber_onMouseCapture;
   o.onMouseCaptureStop  = MO.FDuiSlideNumber_onMouseCaptureStop;
   o.onSlideChange       = MO.FDuiSlideNumber_onSlideChange;
   o.onInputKeyPress     = MO.Class.register(o, new MO.AEventKeyPress('onInputKeyPress'), MO.FDuiSlideNumber_onInputKeyPress);
   o.onInputEdit         = MO.Class.register(o, new MO.AEventInputChanged('onInputEdit'), MO.FDuiSlideNumber_onInputEdit);
   o.onInputChange       = MO.Class.register(o, new MO.AEventChange('onInputChange'), MO.FDuiSlideNumber_onInputChange);
   o.construct           = MO.FDuiSlideNumber_construct;
   o.get                 = MO.FDuiSlideNumber_get;
   o.set                 = MO.FDuiSlideNumber_set;
   o.setInputValue       = MO.FDuiSlideNumber_setInputValue;
   o.refreshValue        = MO.FDuiSlideNumber_refreshValue;
   return o;
}
MO.FDuiSlideNumber_onBuildEditValue = function FDuiSlideNumber_onBuildEditValue(p){
   var o = this;
   var hp = o._hValuePanel;
   hp.className = o.styleName('ValuePanel');
   var hf = o._hValueForm = MO.Window.Builder.appendTable(hp);
   hf.__linker = o;
   hf.width = '100%';
   var hl = o._hValueLine = MO.Window.Builder.appendTableRow(hf);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hl);
   o.onBuildEditChange(p);
   var hsp = o._hSlidePanel = MO.Window.Builder.appendTableCell(hl, o.styleName('SlidePanel'));
   var b = o._slide = new MO.SDuiSlide();
   b.control = o;
   b.hPanel = hsp;
   b.setRange(o._valueMin, o._valueMax);
   b.onSlideChange = o.onSlideChange;
   b.build();
   var hep = o._hInputPanel = MO.Window.Builder.appendTableCell(hl);
   var he = o._hInput = MO.Window.Builder.appendEdit(hep, o.styleName('Input'));
   o.attachEvent('onInputKeyPress', he, o.onInputKeyPress);
   o.attachEvent('onInputEdit', he, o.onInputEdit);
   o.attachEvent('onInputChange', he, o.onInputChange);
   MO.Window.Html.setSize(hep, o._inputSize);
   if(o._editLength){
      he.maxLength = o._editLength;
   }
   var hap = o._hAdjustPanel = MO.Window.Builder.appendTableCell(hl);
   hap.style.borderLeft = '1px solid #666666';
   hap.width = 12;
   var haf = o.hAdjustForm = MO.Window.Builder.appendTable(hap, o.styleName('AdjustForm'));
   var hc = MO.Window.Builder.appendTableRowCell(haf);
   hc.className = o.styleName('UpPanel');
   var hi = o._hUpIcon = MO.Window.Builder.appendIcon(hc, null, 'control.number.up');
   hi.align = 'center';
   var hc = MO.Window.Builder.appendTableRowCell(haf);
   hc.className = o.styleName('DownPanel');
   var hi = o._hDownIcon = MO.Window.Builder.appendIcon(hc, null, 'control.number.down');
}
MO.FDuiSlideNumber_onMouseCaptureStart = function FDuiSlideNumber_onMouseCaptureStart(p){
   var o = this;
   var c = MO.Window.Html.searchObject(p.hSource, '__pcapture');
   if(c){
      c.onMouseDown(p);
   }
}
MO.FDuiSlideNumber_onMouseCapture = function FDuiSlideNumber_onMouseCapture(p){
   var o = this;
   var c = MO.Window.Html.searchObject(p.hSource, '__pcapture');
   if(c){
      c.onMouseMove(p);
   }
}
MO.FDuiSlideNumber_onMouseCaptureStop = function FDuiSlideNumber_onMouseCaptureStop(p){
   var o = this;
   var c = MO.Window.Html.searchObject(p.hSource, '__pcapture');
   if(c){
      c.onMouseUp(p);
   }
}
MO.FDuiSlideNumber_onSlideChange = function FDuiSlideNumber_onSlideChange(p){
   var o = this;
   o.setInputValue(p);
   o.refreshValue();
}
MO.FDuiSlideNumber_onInputKeyPress = function FDuiSlideNumber_onInputKeyPress(p){
   var o = this;
   var c = p.keyCode;
   if(!MO.RKeyboard.isFloatKey(c)){
      p.cancel();
   }
}
MO.FDuiSlideNumber_onInputEdit = function FDuiSlideNumber_onInputEdit(p){
   var o = this;
   var v = o._hInput.value;
   o._slide.set(v);
   o.refreshValue();
}
MO.FDuiSlideNumber_onInputChange = function FDuiSlideNumber_onInputChange(p){
   var o = this;
   var v = o._hInput.value;
   o._slide.set(v);
   o.setInputValue(v);
   o.refreshValue();
}
MO.FDuiSlideNumber_construct = function FDuiSlideNumber_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2(120, 0);
}
MO.FDuiSlideNumber_get = function FDuiSlideNumber_get(p){
   var o = this;
   var v = o._hInput.value;
   var r = MO.Lang.Float.parse(v);
   return MO.Lang.Float.toRange(r, o._valueMin, o._valueMax);
}
MO.FDuiSlideNumber_set = function FDuiSlideNumber_set(p){
   var o = this;
   o.__base.FDuiEditControl.set.call(o, p);
   var v = MO.Lang.String.nvl(p, '0');
   o._innerOriginValue = v;
   o._innerDataValue = v;
   o._slide.set(v);
   o.setInputValue(v);
   o.changeSet(false);
}
MO.FDuiSlideNumber_setInputValue = function FDuiSlideNumber_setInputValue(p){
   var o = this;
   var v = MO.Lang.Float.parse(p);
   if(isNaN(v)){
      return;
   }
   v = MO.Lang.Float.toRange(v, o._valueMin, o._valueMax);
   o._dataDisplay = MO.Lang.Float.format(v, 0, null, 2, null);
   o._hInput.value = o._dataDisplay;
}
MO.FDuiSlideNumber_refreshValue = function FDuiSlideNumber_refreshValue(){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiSplit = function FDuiSplit(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl);
   return o;
}
MO.FDuiSplit_onSplitMouseEnter = function FDuiSplit_onSplitMouseEnter(e){
   var o = this;
   if(o.hImage){
      o.hImage.src = RRes._iconPath(o.extended ? 'ctl.collapse_hvr' : 'ctl.expand_hvr');
   }
}
MO.FDuiSplit_onSplitMouseLeave = function FDuiSplit_onSplitMouseLeave(e){
   var o = this;
   if(o.hImage){
      o.hImage.src = RRes._iconPath(o.extended ? 'ctl.collapse_nor' : 'ctl.expand_nor');
   }
}
MO.FDuiSplit_onMouseDown = function FDuiSplit_onMouseDown(){
   var o = this;
   if(ESplitStyle.Normal == o._dispStyle){
      o.extend(!o.extended);
   }
}
MO.FDuiSplit_onBuildPanel = function FDuiSplit_onBuildPanel(){
   var o = this;
   o.hPanel = MO.Window.Builder.create(null, 'DIV');
   o.hForm = MO.Window.Builder.appendTable(o.hPanel);
   o.hForm.width = '100%';
}
MO.FDuiSplit_oeBuild = function FDuiSplit_oeBuild(e){
   var o = this;
   o.base.FDuiControl.oeBuild.call(o, e);
   o.height = 2;
   if(MO.Lang.String.equals(o._dispStyle, ESplitStyle.Normal)){
      var hf = o.hForm;
      var hr = hf.insertRow()
      o.attachEvent('onSplitMouseEnter', hf);
      o.attachEvent('onSplitMouseLeave', hf);
      var hc = hr.insertCell();
      hc.width = '100%';
      hc.height = 25;
      hc.style.padding = '0 0';
      hc.style.background = 'url(' + RRes._iconPath('ctl.FDuiSplit_Panel') + ')';
      MO.Window.Builder.appendEmpty(hc, 4);
      o.hImage = MO.Window.Builder.appendIcon(hc, o._iconMinus);
      if(o._icon){
         o.hIcon = MO.Window.Builder.appendIcon(hc, o._icon);
      }
      o.hText = MO.Window.Builder.appendText(hc, '&nbsp;&nbsp;' + o.label);
      o.hText.style.fontWeight='BOLD';
   }else if(MO.Lang.String.equals(o._dispStyle, ESplitStyle.BulgeLine)){
      var h = this.hForm.insertRow().insertCell();
      h.style.borderBottom  = '1px solid #666666';
      h.style.borderTop  = '1px solid #DDDDDD';
      h.height = 2;
   }else if(MO.Lang.String.equals(o._dispStyle, ESplitStyle.HollowLine)){
      var h = this.hForm.insertRow().insertCell();
      h.style.borderBottom  = '1px solid #DDDDDD';
      h.style.borderTop  = '1px solid #666666';
      h.height = 2;
   }
   return EEventStatus.Stop;
}
MO.FDuiSplit_oeMode = function FDuiSplit_oeMode(e){
   var o = this;
   var r = o.base.FDuiControl.oeMode.call(o, e);
   o.base.MDisplay.oeMode.call(o, e);
   o.extend(o._editExtend);
   return r;
}
MO.FDuiSplit_construct = function FDuiSplit_construct(){
   var o = this;
   o.__lines = new TList();
}
MO.FDuiSplit_extend = function FDuiSplit_extend(v){
   var o = this;
   if(EMode.Design == o._emode){
      return;
   }
   if(o.extended == v){
      return;
   }
   o.extended = v;
   if(o.hImage){
      o.hImage.src = v ? RResource._iconPath(o._iconMinus) : RRes._iconPath(o._iconPlus);
   }
   var c = o.__lines.count;
   for(var n=0; n<c; n++){
      o.__lines.get(n).style.display = v ? 'block' : 'none';
   }
   o.topControl().topResize(o);
}
MO.FDuiSplit_pushLine = function FDuiSplit_pushLine(hr){
   this.__lines.push(hr);
}
MO.FDuiSplit_dispose = function FDuiSplit_dispose(){
   var o = this;
   o.base.FDuiControl.dispose.call(o);
   if(o.__lines){
      o.__lines.release();
      o.__lines = null;
   }
   o.hForm = null;
   o.hText = null;
   o.hIcon = null;
   o.hImage = null;
}
MO.FDuiTemplate = function FDuiTemplate(o){
   o = MO.Class.inherits(this, o, MO.FDuiEditControl, MO.MUiPropertyEdit, MO.MListenerDataChanged);
   o._inputSize       = MO.Class.register(o, new MO.APtySize2('_inputSize'));
   o._unit            = MO.Class.register(o, new MO.APtyString('_unit'));
   o._styleValuePanel = MO.Class.register(o, new MO.AStyle('_styleValuePanel'));
   o._styleInputPanel = MO.Class.register(o, new MO.AStyle('_styleInputPanel'));
   o._styleInput      = MO.Class.register(o, new MO.AStyle('_styleInput'));
   o._hValueForm      = null;
   o._hValueLine      = null;
   o._hInputPanel     = null;
   o._hInput          = null;
   o.onBuildEditValue = MO.FDuiTemplate_onBuildEditValue;
   o.onInputEdit      = MO.Class.register(o, new MO.AEventInputChanged('onInputEdit'), MO.FDuiTemplate_onInputEdit);
   o.construct        = MO.FDuiTemplate_construct;
   o.formatDisplay    = MO.FDuiTemplate_formatDisplay;
   o.formatValue      = MO.FDuiTemplate_formatValue;
   o.get              = MO.FDuiTemplate_get;
   o.set              = MO.FDuiTemplate_set;
   o.refreshValue     = MO.FDuiTemplate_refreshValue;
   return o;
}
MO.FDuiTemplate_onBuildEditValue = function FDuiTemplate_onBuildEditValue(p){
   var o = this;
   var hp = o._hValuePanel;
   hp.className = o.styleName('ValuePanel');
   var hf = o._hValueForm = MO.Window.Builder.appendTable(hp);
   hf.width = '100%';
   var hl = o._hValueLine = MO.Window.Builder.appendTableRow(hf);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hl);
   o.onBuildEditChange(p);
   var hep = o._hInputPanel = MO.Window.Builder.appendTableCell(hl);
   var he = o._hInput = MO.Window.Builder.appendEdit(hep, o.styleName('Input'));
   o.attachEvent('onInputEdit', he, o.onInputEdit);
   MO.Window.Html.setSize(hep, o._inputSize);
   if(o._editLength){
      he.maxLength = o._editLength;
   }
}
MO.FDuiTemplate_onInputEdit = function FDuiTemplate_onInputEdit(p){
   var o = this;
   var v = o._hInput.value;
   o.refreshValue();
}
MO.FDuiTemplate_construct = function FDuiTemplate_construct(){
   var o = this;
   o.__base.FDuiEditControl.construct.call(o);
   o._inputSize = new MO.SSize2(120, 0);
}
MO.FDuiTemplate_formatDisplay = function FDuiTemplate_formatDisplay(p){
   var o = this;
   var r = MO.Lang.String.nvl(p);
   o._dataDisplay = r;
   return r;
}
MO.FDuiTemplate_formatValue = function FDuiTemplate_formatValue(p){
   return p;
}
MO.FDuiTemplate_get = function FDuiTemplate_get(){
   var o = this;
   var r = o.__base.FDuiEditControl.get.call(o);
   var r = o._hInput.value;
   return r;
}
MO.FDuiTemplate_set = function FDuiTemplate_set(p){
   var o = this;
   o.__base.FDuiEditControl.set.call(o, p);
   o._hInput.value = MO.Lang.String.nvl(p);
}
MO.FDuiTemplate_refreshValue = function FDuiTemplate_refreshValue(){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiText = function FDuiText(o){
   o = MO.Class.inherits(this, o, MO.FDuiTextControl, MO.MUiPropertyEdit, MO.MListenerDataChanged);
   o._inputSize       = MO.Class.register(o, new MO.APtySize2('_inputSize'));
   o._unit            = MO.Class.register(o, new MO.APtyString('_unit'));
   o._styleValuePanel = MO.Class.register(o, new MO.AStyle('_styleValuePanel'));
   o._styleInputPanel = MO.Class.register(o, new MO.AStyle('_styleInputPanel'));
   o._styleInput      = MO.Class.register(o, new MO.AStyle('_styleInput'));
   o._hValueForm      = null;
   o._hValueLine      = null;
   o._hInputPanel     = null;
   o._hInput          = null;
   o.onBuildEditValue = MO.FDuiText_onBuildEditValue;
   o.onInputEdit      = MO.Class.register(o, new MO.AEventInputChanged('onInputEdit'), FDuiText_onInputEdit);
   o.construct        = MO.FDuiText_construct;
   o.formatDisplay    = MO.FDuiText_formatDisplay;
   o.formatValue      = MO.FDuiText_formatValue;
   o.get              = MO.FDuiText_get;
   o.set              = MO.FDuiText_set;
   o.refreshValue     = MO.FDuiText_refreshValue;
   return o;
}
MO.FDuiText_onBuildEditValue = function FDuiText_onBuildEditValue(p){
   var o = this;
   var hp = o._hValuePanel;
   hp.className = o.styleName('ValuePanel');
   var hf = o._hValueForm = MO.Window.Builder.appendTable(hp);
   hf.width = '100%';
   var hl = o._hValueLine = MO.Window.Builder.appendTableRow(hf);
   o._hChangePanel = MO.Window.Builder.appendTableCell(hl);
   o.onBuildEditChange(p);
   var hep = o._hInputPanel = MO.Window.Builder.appendTableCell(hl);
   var he = o._hInput = MO.Window.Builder.appendEdit(hep, o.styleName('Input'));
   o.attachEvent('onInputEdit', he, o.onInputEdit);
   MO.Window.Html.setSize(hep, o._inputSize);
   if(o._editLength){
      he.maxLength = o._editLength;
   }
}
MO.FDuiText_onInputEdit = function FDuiText_onInputEdit(p){
   var o = this;
   var v = o._hInput.value;
   o.refreshValue();
}
MO.FDuiText_construct = function FDuiText_construct(){
   var o = this;
   o.__base.FDuiTextControl.construct.call(o);
   o._inputSize = new MO.SSize2(120, 0);
}
MO.FDuiText_formatDisplay = function FDuiText_formatDisplay(p){
   var o = this;
   var r = MO.Lang.String.nvl(p);
   o._dataDisplay = r;
   return r;
}
MO.FDuiText_formatValue = function FDuiText_formatValue(p){
   return p;
}
MO.FDuiText_get = function FDuiText_get(){
   var o = this;
   var r = o.__base.FDuiTextControl.get.call(o);
   var r = o._hInput.value;
   return r;
}
MO.FDuiText_set = function FDuiText_set(p){
   var o = this;
   o.__base.FDuiTextControl.set.call(o, p);
   o._hInput.value = MO.Lang.String.nvl(p);
}
MO.FDuiText_refreshValue = function FDuiText_refreshValue(){
   var o = this;
   o.processDataChangedListener(o);
}
MO.EDuiGridColumn = new function EDuiGridColumn(){
   var o = this;
   o.None = 0;
   o.Size = 1;
   o.Drag = 2;
   return o;
}
MO.EDuiGridDisplay = new function EDuiGridDisplayFace(){
   var o = this;
   o.Title     = 'T';
   o.Head      = 'H';
   o.Search    = 'S';
   o.Total     = 'A';
   o.Navigator = 'N';
   return o;
}
MO.EDuiGridRowStatus = new function EDuiGridRowStatus(){
   var o = this;
   o.Normal = 'Normal';
   o.Hover  = 'Hover';
   o.Select = 'Select';
   return o;
}
MO.FDuiCell = function FDuiCell(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MO.MUiValue, MO.MUiDataValue);
   o._stylePanelNormal = MO.Class.register(o, new MO.AStyle('_stylePanelNormal'));
   o._stylePanelHover  = MO.Class.register(o, new MO.AStyle('_stylePanelHover'));
   o._stylePanelSelect = MO.Class.register(o, new MO.AStyle('_stylePanelSelect'));
   o._styleInputNormal = MO.Class.register(o, new MO.AStyle('_styleInputNormal'));
   o._styleInputHover  = MO.Class.register(o, new MO.AStyle('_styleInputHover'));
   o._styleInputSelect = MO.Class.register(o, new MO.AStyle('_styleInputSelect'));
   o._table            = MO.Class.register(o, new MO.AGetSet('_table'));
   o._column           = MO.Class.register(o, new MO.AGetSet('_column'));
   o._row              = MO.Class.register(o, new MO.AGetSet('_row'));
   o._rowStatusCd      = MO.EDuiGridRowStatus.Normal;
   o.onBuildPanel      = MO.FDuiCell_onBuildPanel;
   o.onBuild           = MO.FDuiCell_onBuild;
   o.onCellMouseEnter  = MO.Class.register(o, new MO.AEventMouseEnter('onCellMouseEnter'), MO.FDuiCell_onCellMouseEnter);
   o.onCellMouseLeave  = MO.Class.register(o, new MO.AEventMouseLeave('onCellMouseLeave'), MO.FDuiCell_onCellMouseLeave);
   o.onCellClick       = MO.Class.register(o, new MO.AEventClick('onCellClick'), MO.FDuiCell_onCellClick);
   o.onCellDoubleClick = MO.Class.register(o, new MO.AEventDoubleClick('onCellDoubleClick'), MO.FDuiCell_onCellDoubleClick);
   o.oeLoadDataRow     = MO.FDuiCell_oeLoadDataRow;
   o.oeSaveDataRow     = MO.FDuiCell_oeSaveDataRow;
   o.construct        = MO.FDuiCell_construct;
   o.testDataChanged  = MO.FDuiCell_testDataChanged;
   o.setVisible       = MO.FDuiCell_setVisible;
   o.focus            = MO.FDuiCell_focus;
   o.refreshStyle     = MO.FDuiCell_refreshStyle;
   o.dispose          = MO.FDuiCell_dispose;
   return o;
}
MO.FDuiCell_onBuildPanel = function FDuiCell_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.Window.Builder.create(event, 'TD', o.styleName('Panel'));
}
MO.FDuiCell_onBuild = function FDuiCell_onBuild(event){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, event)
   var column = o._column;
   var hPanel = o._hPanel;
   MO.Window.Html.linkSet(hPanel, 'control', o);
   o.attachEvent('onCellMouseEnter', hPanel);
   o.attachEvent('onCellMouseLeave', hPanel);
   o.attachEvent('onCellClick', hPanel);
   o.attachEvent('onCellDoubleClick', hPanel);
}
MO.FDuiCell_onCellMouseEnter = function FDuiCell_onCellMouseEnter(event){
   var o = this;
   var table = o._table;
   var row = o._row;
   table.hoverRow(row, true);
}
MO.FDuiCell_onCellMouseLeave = function FDuiCell_onCellMouseLeave(event){
   var o = this;
   var table = o._table;
   var row = o._row;
   table.hoverRow(row, false);
}
MO.FDuiCell_onCellClick = function FDuiCell_onCellClick(event){
   var o = this;
   var table = o._table;
   table.clickCell(o);
}
MO.FDuiCell_onCellDoubleClick = function FDuiCell_onCellDoubleClick(event){
   var o = this;
   var table = o._table;
   table.doubleClickCell(o);
}
MO.FDuiCell_oeLoadDataRow = function FDuiCell_oeLoadDataRow(event){
   var o = this;
   var column = o._column;
   var dataName = column.dataName();
   var dataRow = event.dataRow;
   var value = dataRow.get(dataName);
   o.set(value);
   return MO.EEventStatus.Stop;
}
MO.FDuiCell_oeSaveDataRow = function FDuiCell_oeSaveDataRow(event){
   var o = this;
   var column = o._column;
   var dataName = column.dataName();
   var dataRow = event.dataRow;
   var value = o.get();
   dataRow.set(dataName, value);
   return MO.EEventStatus.Stop;
}
MO.FDuiCell_setVisible = function FDuiCell_setVisible(value){
}
MO.FDuiCell_focus = function FDuiCell_focus(value){
   var o = this;
}
MO.FDuiCell_refreshStyle = function FDuiCell_refreshStyle(){
   var o = this;
   var table = o._table;
   var row = o._row;
   var selected = row._statusSelect;
   if(selected){
      o._rowStatusCd = MO.EDuiGridRowStatus.Select;
   }else{
      var hover = (table._hoverRow == row);
      if(hover){
         o._rowStatusCd = MO.EDuiGridRowStatus.Hover;
      }else{
         o._rowStatusCd = MO.EDuiGridRowStatus.Normal;
      }
   }
   o._hPanel.className = o.styleName('Panel' + o._rowStatusCd);
}
MO.FDuiCell_dispose = function FDuiCell_dispose(){
   var o = this;
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiCell_doFocus = function FDuiCell_doFocus(){
   var o = this;
   o._table.__focusCell = o;
   if(o._column.isEditAble(o)){
      var hs = o._hPanel.style;
      hs.borderLeft = '1px solid #666666';
      hs.borderTop = '1px solid #666666';
      hs.borderRight = '1px solid #CCCCCC';
      hs.borderBottom = '1px solid #CCCCCC';
      o.__focus = true;
      o.refreshStyle();
   }
}
MO.FDuiCell_doBlur = function FDuiCell_doBlur(){
   var o = this;
   if(o._column.isEditAble(o)){
      var hs = o._hPanel.style;
      hs.borderLeft = '0px solid #666666';
      hs.borderTop = '0px solid #666666';
      hs.borderRight = '1px solid #F0F0F0';
      hs.borderBottom = '1px dotted #CCCCCC';
      o.__focus = false;
      o.refreshStyle();
   }
}
MO.FDuiCell_descriptor = function FDuiCell_descriptor(){
   return this._column;
}
MO.FDuiCell_text = function FDuiCell_text(){
   var o = this;
   var c = o._column;
   if(EEditFormat.Html == c.editFormat){
      return o._hPanel.innerHTML;
   }else if(c._absEdit && o._hEdit){
      return o._hEdit.value;
   }else if(o._hEditPanel){
      return o._hEditPanel.innerText;
   }
   return '';
}
MO.FDuiCell_setText = function FDuiCell_setText(t){
   var o = this;
   var c = o._column;
   if(EEditFormat.Html == c.editFormat){
      o._hPanel.innerHTML = t;
   }else if(c._absEdit && o._hEdit){
      o._hEdit.value = t;
   }else if(o._hEditPanel){
      o._hEditPanel.innerText = t;
   }
}
MO.FDuiCell_dump = function FDuiCell_dump(s){
   var o = this;
   s = RString.nvlStr(s);
   s.append(RClass.dump(o), '[');
   s.append(o.value);
   s.append(']');
   return s;
}
with(MO){
   MO.FDuiCellButton = function FDuiCellButton(o){
      o = MO.Class.inherits(this, o, FCell);
      o.buttons           = null;
      o.attributes        = null;
      o.onButtonEnter     = MO.Class.register(o, new MO.AEventMouseEnter('onButtonEnter'), FDuiCellButton_onButtonEnter);
      o.onButtonLeave     = MO.Class.register(o, new MO.AEventMouseLeave('onButtonLeave'), FDuiCellButton_onButtonLeave);
      o.onCellLeave       = MO.Class.register(o, new MO.AEventMouseLeave('onCellLeave'), FDuiCellButton_onCellLeave);
      o.onHintEnter       = MO.Class.register(o, new MO.AEventMouseEnter('onHintEnter'), FDuiCellButton_onHintEnter);
      o.onHintLeave       = MO.Class.register(o, new MO.AEventMouseLeave('onHintLeave'), FDuiCellButton_onHintLeave);
      o.onButtonClick     = MO.Class.register(o, new MO.AEventClick('onButtonClick'), FDuiCellButton_onButtonClick);
      o.construct         = FDuiCellButton_construct;
      o.isDataChanged     = RMethod.emptyFalse;
      o.findButtonByPanel = FDuiCellButton_findButtonByPanel;
      o.buildForm         = FDuiCellButton_buildForm;
      o.set               = FDuiCellButton_set;
      o.modifyButton      = FDuiCellButton_modifyButton;
      o.refreshStyle      = FDuiCellButton_refreshStyle;
      return o;
   }
   MO.FDuiCellButton_onButtonEnter = function FDuiCellButton_onButtonEnter(e){
      var o = this;
      var b = o.findButtonByPanel(e.hSource);
      if(b){
         var hs = b.hPanel.style;
         hs.color = 'black';
         hs.cursor = 'hand';
         if(b.hintBox){
           b.hintBox.style.display = "block";
          }
      }
      if (o.hHintPanel) {
         o.hHintPanel.style.display = '';
      }
   }
   MO.FDuiCellButton_onButtonLeave = function FDuiCellButton_onButtonLeave(e){
      var o = this;
      var b = o.findButtonByPanel(e.hSource);
      if(b){
         var hs = b.hPanel.style;
         hs.color = '#0661B0';
         hs.cursor = 'normal';
      }
   }
   MO.FDuiCellButton_onHintEnter = function FDuiCellButton_onHintEnter(e){
      var o = this;
      e.hSource.style.backgroundColor = "#eeeeee";
   }
   MO.FDuiCellButton_onCellLeave = function FDuiCellButton_onCellLeave(e){
      var bs = this.buttons;
      var c = bs.count;
      for(var n = 0; n<c; n++){
         var b = bs.value(n);
         if(b.hintBox){
            b.hintBox.style.display='none';
         }
      }
   }
   MO.FDuiCellButton_onHintLeave = function FDuiCellButton_onHintLeave(e){
      e.hSource.style.backgroundColor = "#ffffff";
       e.hSource.style.display = "none";
   }
   MO.FDuiCellButton_onButtonClick = function FDuiCellButton_onButtonClick(e){
      var o = this;
      var t = o.table;
      t.clickCell(o);
      var b = o.findButtonByPanel(e.hSource);
      if(b){
         b.button.callEvent('onClick', o, e);
      }
   }
   MO.FDuiCellButton_construct = function FDuiCellButton_construct(){
      var o = this;
      o.base.FCell.construct.call(o);
      o.attributes = new TAttributes();
   }
   MO.FDuiCellButton_findButtonByPanel = function FDuiCellButton_findButtonByPanel(h){
      var o = this;
      var bs = o.buttons;
      for(var n=0; n<bs.count; n++){
         var b = bs.value(n);
         if(b.hPanel == h){
            return b;
         }
      }
   }
   MO.FDuiCellButton_buildForm = function FDuiCellButton_buildForm(){
      var o = this;
      var c = o.column;
      var hp = o.hPanel;
      RControl.attachEvent(o, 'onCellLeave', hp, o.onCellLeave);
      hp.align = 'left';
      hp.padding = 1;
      var hf = o.hForm = MO.Window.Builder.appendTable(o.hPanel);
      var hr = o.hFormLine = hf.insertRow();
      var bs = c.components;
      if(bs){
         o.buttons = new TMap();
         for(var n=0; n<bs.count; n++){
            var b = bs.value(n);
            var hc = hr.insertCell();
            hc.align = 'center';
            hc.style.padding = '0 3';
            var hbp = MO.Window.Builder.append(hc, 'DIV');
            var hi = null;
            if(b.icon){
               hi = MO.Window.Builder.appendIcon(hbp, b.icon);
            }else{
               hbp.style.padding = '2 6';
               hbp.style.color = '#0661B0';
               hbp.style.textDecoration = 'underline';
            }
            o.attachEvent('onButtonEnter', hbp, o.onButtonEnter);
            o.attachEvent('onButtonLeave', hbp, o.onButtonLeave);
            o.attachEvent('onButtonClick', hbp, o.onButtonClick);
            var ht = null;
            if(b.label){
               if(b.icon){
                  hi.title = b.label;
               }else{
                  ht = MO.Window.Builder.appendText(hbp, b.label);
               }
            }
            var cb = new TCellButton();
            cb.button = b;
            cb.hLayout = hc;
            cb.hPanel = hbp;
            cb.hIcon = hi;
            cb.hText = ht;
            o.buttons.set(b.name, cb);
         }
         var hfp = o.hHintPanel = o.hForm.insertRow().insertCell();
         hfp.height = 1;
         hfp.style.position = 'relative';
      }
   }
   MO.FDuiCellButton_set = function FDuiCellButton_set(v){
      var o = this;
      if(!MO.Lang.String.isEmpty(v)){
         var pbs = new TAttributes();
         pbs.unpack(v);
         for(var n=0; n<pbs.count; n++){
            var b = o.buttons.get(pbs.name(n));
            var pk = pbs.value(n);
            if(b && !MO.Lang.String.isEmpty(pk)){
               var as = o.attributes;
               as.clear();
               as.unpack(pk);
               o.modifyButton(b, as);
            }
         }
      }
   }
   MO.FDuiCellButton_modifyButton = function FDuiCellButton_modifyButton(b, as){
      var o = this;
      var bv = true;
      if(as.contains('visible')){
         bv = RBoolean.isTrue(as.get('visible'));
      }
      b.hLayout.style.display = bv ? 'block' : 'none';
      var pd = as.get('disabled');
      if(pd){
         if(RBoolean.isTrue(pd)){
            hc.style.padding = 3;
            hc.style.border = 0;
         }else{
            hc.style.padding = 2;
            hc.style.borderLeft = '1 solid #DDDDDD';
            hc.style.borderTop = '1 solid #DDDDDD';
            hc.style.borderRight = '1 solid #999999';
            hc.style.borderBottom = '1 solid #999999';
            hc.style.backgroundColor = '#FFFFFF';
         }
      }
      var pl = as.get('label');
      if(pl){
         if(b.icon){
            b.hIcon.title = pl;
         }else{
            b.hText.innerText = pl;
         }
      }
      if(as.contains('hint')){
         hfd = o.hFloatDrop = MO.Window.Builder.append(o.hHintPanel, 'DIV');
         hfd.style.borderLeft = '1 solid #CCCCCC';
         hfd.style.borderTop = '1 solid #CCCCCC';
         hfd.style.borderRight = '1 solid #666666';
         hfd.style.borderBottom = '1 solid #666666';
         hfd.style.zIndex = 40000;
         hfd.style.backgroundColor = '#FFFFFF';
         hfd.style.display = 'none';
         hfd.style.position = 'absolute'
         hfd.style.padding = '4 8';
         hfd.style.width = '300px';
         hfd.style.pixelTop = b.offsetHeight + 1;
         hfd.style.pixelLeft = b.hPanel.offsetWidth + 20;
         hfd.innerHTML = as.get('hint');
         o.attachEvent('onHintEnter', hfd, o.onHintEnter);
         o.attachEvent('onHintLeave', hfd, o.onHintLeave);
         b.hintBox = hfd;
      }
   }
   MO.FDuiCellButton_refreshStyle = function FDuiCellButton_refreshStyle(){
      var o = this;
      var r = o.row;
      var bc = null;
      if(r.isSelect){
         bc = EColor.RowSelect;
      }else{
         var ih = (o.column.table.__hoverRow == r);
         if(ih){
            bc = EColor.RowHover;
         }else{
            bc = EColor.Rows[r.index % EColor.Rows.length];
         }
      }
      o.hPanel.style.backgroundColor = bc;
   }
}
MO.FDuiCellEdit = function FDuiCellEdit(o){
   o = MO.Class.inherits(this, o, MO.FDuiCellEditControl);
   o._hInput      = null;
   o.onBuildEdit  = MO.FDuiCellEdit_onBuildEdit;
   o.get          = MO.FDuiCellEdit_get;
   o.set          = MO.FDuiCellEdit_set;
   o.refreshStyle = MO.FDuiCellEdit_refreshStyle;
   return o;
}
MO.FDuiCellEdit_onBuildEdit = function FDuiCellEdit_onBuildEdit(p){
   var o = this;
   var c = o._column;
   o._hInput = MO.Window.Builder.appendEdit(o._hEditPanel);
}
MO.FDuiCellEdit_get = function FDuiCellEdit_get(){
   var o = this;
   var value = o._hInput.value;
   return value;
}
MO.FDuiCellEdit_set = function FDuiCellEdit_set(value){
   var o = this;
   var text = MO.Lang.String.nvl(value);
   o._hInput.value = text;
}
MO.FDuiCellEdit_refreshStyle = function FDuiCellEdit_refreshStyle(){
   var o = this;
   o.__base.FDuiCellEditControl.refreshStyle.call(o);
   o._hInput.className = o.styleName('Input' + o._rowStatusCd);
}
MO.FDuiCellEdit_buildDrop = function FDuiCellEdit_buildDrop(){
   var o = this;
   var c = o.column;
   if(!MO.Lang.String.isEmpty(c.lovRefer)){
      var hdp = o.hDropPanel;
      hdp.align = 'right';
      hdp.style.paddingRight = 2;
      var hli = o.hLovImage = MO.Window.Builder.appendIcon(hdp, 'ctl.FDuiCellEdit_Lov', null, 16, 16);
      hli.style.borderLeft='1 solid #CCCCCC';
      hli.style.cursor = 'hand';
      c.linkEvent(o, 'onListClick', hli);
   }
}
MO.FDuiCellEdit_setInfo = function FDuiCellEdit_setInfo(f){
   var o = this;
   o.base.FDuiCellEditControl.setInfo.call(o, f);
   var d = o.column;
   var m = d.iconMap;
   var hi = o.hIcon;
   if(m && m.get(f.icon)){
      hi.style.display = 'block';
      hi.title = f.iconHint;
      hi.src = MO.Window.Resource.iconPath(m.get(f.icon));
   }else{
      if(hi){
         hi.style.display = 'none';
      }
   }
}
MO.FDuiCellEdit_text = function FDuiCellEdit_text(){
   var o = this;
   var c = o.column;
   if(c.canZoom()){
      return o.hEdit.innerText;
   }
   if(c._absEdit){
      return o.hEdit.value;
   }
   return o.hEditPanel.innerText;
}
MO.FDuiCellEdit_setText = function FDuiCellEdit_setText(t){
   var o = this;
   var c = o.column;
   if(c.canZoom()){
      o.hEdit.innerText = t;
   }else{
      if(c._absEdit){
         o.hEdit.value = t;
      }else{
         o.hEditPanel.innerText = t;
      }
   }
}
MO.FDuiCellEditControl = function FDuiCellEditControl(o){
   o = MO.Class.inherits(this, o, MO.FDuiCell);
   o._hForm       = null;
   o._hLine       = null;
   o._hEditPanel  = null;
   o._hEdit       = null;
   o.onBuildIcon  = MO.FDuiCellEditControl_onBuildIcon;
   o.onBuildEdit  = MO.FDuiCellEditControl_onBuildEdit;
   o.onBuildDrop  = MO.Method.empty;
   o.onBuildForm  = MO.FDuiCellEditControl_onBuildForm;
   o.onBuild      = MO.FDuiCellEditControl_onBuild;
   return o;
}
MO.FDuiCellEditControl_onBuildIcon = function FDuiCellEditControl_onBuildIcon(p){
   var o = this;
   o.hIcon = MO.Window.Builder.append(o.hIconPanel, 'IMG');
}
MO.FDuiCellEditControl_onBuildEdit = function FDuiCellEditControl_onBuildEdit(p){
   var o = this;
   var c = o._column;
}
MO.FDuiCellEditControl_onBuildForm = function FDuiCellEditControl_onBuildForm(p){
   var o = this;
   var c = o._column;
   if(c._hasIconArea || c._hasDropArea){
      var hForm = o._hForm = MO.Window.Builder.appendTable(o._hPanel);
      hForm.width = '100%';
      var hLine = o.hFormLine = MO.Window.Builder.appendTableRow(hForm);
      if(c.hasIconArea){
         o.hIconPanel = MO.Window.Builder.appendTableCell(hLine);
         o.hIconPanel.width = 18;
         o.onBuildIcon(p);
      }
      o._hEditPanel = MO.Window.Builder.appendTableCell(hLine);
      o.onBuildEdit(p);
      if(c.hasDropArea){
         o.hDropPanel = MO.Window.Builder.appendTableCell(hLine);
         o.hDropPanel.width = 8;
         o.onBuildDrop(p);
      }
   }else{
      var hep = o._hEditPanel = o._hPanel;
      o.onBuildEdit(p);
   }
}
MO.FDuiCellEditControl_onBuild = function FDuiCellEditControl_onBuild(p){
   var o = this;
   o.__base.FDuiCell.onBuild.call(o, p)
   o.onBuildForm(p);
}
MO.FDuiCellEditControl_getEditRange = function FDuiCellEditControl_getEditRange(){
   var o = this;
   var hc = o.hPanel;
   var p = RHtml.offsetPosition(hc);
   var w = hc.offsetWidth;
   var h = hc.offsetHeight;
   return new TRange(p.x, p.y, w, h);
}
MO.FDuiCellEditControl_select = function FDuiCellEditControl_select(v){
   var o = this;
   var a = o.descriptor().isEditAble(o.row);
   if(v){
      if(!MO.Class.isClass(o, FDuiCellCalendar)){
         o.setEditStyle(a ? EStyle.Select : EStyle.ReadonlySelect);
      }else{
         o.setEditStyle(EStyle.ReadonlySelect);
         o.column.disable();
      }
   }else{
      if(!MO.Class.isClass(o, FDuiCellCalendar)){
         o.setEditStyle(a ? EStyle.Normal : EStyle.Readonly);
      }else{
         o.setEditStyle(EStyle.Readonly);
         o.column.disable();
      }
   }
}
MO.FDuiCellEditControl_setVisible = function FDuiCellEditControl_setVisible(v){
   var o = this;
   o.hPanel.style.display = v ? 'block' : 'none';
   if(v){
      if(!MO.Class.isClass(o, FDuiCellCalendar)){
         var a = o.descriptor().isEditAble(o.row);
         o.setEditStyle(a ? EStyle.Normal : EStyle.Readonly);
     }else{
       o.setEditStyle(EStyle.Readonly);
       o.column.disable();
     }
   }
}
MO.FDuiCellEditControl_refreshStyle = function FDuiCellEditControl_refreshStyle(){
   var o = this;
   var t = o.table;
   var c = o.column;
   var r = o.row;
   var hep = o.hEditPanel;
   var he = o.hEdit;
   var hd = o.hDrop;
   var e = c.isEditAble(r);
   var s = r.isSelect;
   var ce = e ? EColor.TextEdit : EColor.TextReadonly;
   if(he){
      he.readOnly = !e;
      if(!c.zoomRefer){
         he.style.color = ce;
      }
      if(hd){
         he.style.cursor = e? 'hand':'normal';
         hd.style.cursor = e? 'hand':'normal';
      }
   }
   if(hep){
      hep.style.color = ce;
   }
   var bc = null;
   if(s){
      bc = EColor.RowSelect;
   }else{
      var ih = (t.__hoverRow == r);
      if(ih){
         bc = EColor.RowHover;
      }else{
         bc = EColor.Rows[r.index % EColor.Rows.length];
      }
   }
   if(o.__focus){
      bc = EColor.RowEditHover;
   }
   if(he){
      he.style.backgroundColor = bc;
   }
   o.hPanel.style.backgroundColor = bc;
}
MO.FDuiCellSelected = function FDuiCellSelected(o){
   o = MO.Class.inherits(this, o, MO.FDuiCell);
   o._dataName  = '_select';
   o._styleEdit = MO.Class.register(o, new MO.AStyle('_styleEdit'));
   o._hSelected = null;
   o.onBuild    = MO.FDuiCellSelected_onBuild;
   o.onSelected = MO.FDuiCellSelected_onSelected;
   return o;
}
MO.FDuiCellSelected_onBuild = function FDuiCellSelected_onBuild(p){
   var o = this;
   o.__base.FDuiCell.onBuild.call(o, p)
   var c = o._column;
   var h = o._hPanel;
   h.align = 'center';
   var hs = o._hSelected = MO.Window.Builder.appendCheck(h, o.styleName('Edit'));
   hs.parent = o;
   hs.onclick = o.onSelected;
}
MO.FDuiCellSelected_onSelected = function FDuiCellSelected_onSelected(p){
   var o = this;
}
MO.FDuiCellSelected_refreshStyle = function FDuiCellSelected_refreshStyle(){
   var o = this;
   var r = o.row;
   var t = r.table;
   var p = null;
   if(t.dispSelected){
      o.hPanel.style.display = 'block';
      if(r.isSelect){
         o._hSelected.checked = true;
         o.hPanel.style.backgroundColor = '#CEE7FF';
      }else{
         o._hSelected.checked = false;
         o.hPanel.style.backgroundColor = '#FFFFFF';
      }
   }else{
      o.hPanel.style.display = 'none';
   }
}
MO.FDuiCellSelected_dispose = function FDuiCellSelected_dispose(){
   var o = this;
   o.base.FDuiCellEditControl.dispose.call(o);
   o._hSelected = null;
}
MO.FDuiCellStatus = function FDuiCellStatus(o){
   o = MO.Class.inherits(this, o, MO.FDuiCell);
   o._dataName    = '_status';
   o._hIcon     = null;
   o.onBuild      = MO.FDuiCellStatus_onBuild;
   o.refreshStyle = MO.FDuiCellStatus_refreshStyle;
   return o;
}
MO.FDuiCellStatus_onBuild = function FDuiCellStatus_onBuild(p){
   var o = this;
   o.__base.FDuiCell.onBuild.call(o, p)
   var hPanel = o._hPanel;
   hPanel.align = 'center';
   hPanel.style.paddingTop = 2;
   hPanel.style.paddingBottom = 2;
   hPanel.style.cursor = 'normal';
   var hIcon = o._hIcon = MO.Window.Builder.appendIcon(hPanel, null, 'editor.design.frame.gridrownormal');
   hIcon.style.cursor = 'pointer';
}
MO.FDuiCellStatus_refreshStyle = function FDuiCellStatus_refreshStyle(){
   var o = this;
   o.__base.FDuiCell.refreshStyle.call(o);
   var row = o._row;
   var table = o._table;
}
MO.FDuiCellStatus_onStatusEnter = function FDuiCellStatus_onStatusEnter(){
   this.row.table.getRowBar().linkCell(this);
}
MO.FDuiCellStatus_setIcon = function FDuiCellStatus_setIcon(s){
   this._hStatus.src = s;
}
MO.FDuiCellStatus_dispose = function FDuiCellStatus_dispose(){
   var o = this;
   o.base.FDuiCellEditControl.dispose.call(o);
   o._hStatus = null;
}
MO.FDuiCellText = function FDuiCellText(o){
   o = MO.Class.inherits(this, o, MO.FDuiCell);
   o.onBuildEdit = MO.FDuiCellText_onBuildEdit;
   o.get         = MO.FDuiCellText_get;
   o.set         = MO.FDuiCellText_set;
   return o;
}
MO.FDuiCellText_onBuildEdit = function FDuiCellText_onBuildEdit(p){
   var o = this;
}
MO.FDuiCellText_get = function FDuiCellText_get(){
   var o = this;
   var value = o._hPanel.innerHTML;
   return value;
}
MO.FDuiCellText_set = function FDuiCellText_set(value){
   var o = this;
   var text = MO.Lang.String.nvl(value);
   o._hPanel.innerHTML = text;
}
MO.FDuiColumn = function FDuiColumn(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MO.MUiDataField);
   o._optionFixed       = MO.Class.register(o, [new MO.APtyBoolean('_optionFixed'), new MO.AGetSet('_optionFixed')], false);
   o._displayList       = true;
   o._styleLabel        = MO.Class.register(o, new MO.AStyle('_styleLabel'));
   o._styleSearchPanel  = MO.Class.register(o, new MO.AStyle('_styleSearchPanel'));
   o._styleSearchEdit   = MO.Class.register(o, new MO.AStyle('_styleSearchEdit'));
   o._styleIconSortUp   = MO.Class.register(o, new MO.AStyleIcon('_styleIconSortUp'));
   o._styleIconSortDown = MO.Class.register(o, new MO.AStyleIcon('_styleIconSortDown'));
   o._table             = MO.Class.register(o, new MO.AGetSet('_table'));
   o._cellClass         = MO.FDuiCell;
   o._hForm             = null;
   o._hFormLine         = null;
   o._hIconPanel        = null;
   o._hIcon             = null;
   o._hLabel            = null;
   o._hSortPanel        = null;
   o._hSortUp           = null;
   o._hSortDown         = null;
   o._hSearchPanel      = null;
   o._hSearchForm       = null;
   o._hSearchFormLine   = null;
   o._hSearchEditPanel  = null;
   o._hSearchEdit       = null;
   o._hFixPanel         = null;
   o.onBuildLabel       = MO.FDuiColumn_onBuildLabel;
   o.onBuildSearchIcon  = MO.Method.empty;
   o.onBuildSearchEdit  = MO.FDuiColumn_onBuildSearchEdit;
   o.onBuildSearchDrop  = MO.Method.empty;
   o.onBuildSearchForm  = MO.FDuiColumn_onBuildSearchForm;
   o.onBuildSearch      = MO.FDuiColumn_onBuildSearch;
   o.onBuildTotal       = MO.FDuiColumn_onBuildTotal;
   o.onBuildPanel       = MO.FDuiColumn_onBuildPanel;
   o.onBuild            = MO.FDuiColumn_onBuild;
   o.onSearchEnter      = MO.Class.register(o, new MO.AEventMouseEnter('onSearchEnter'));
   o.onSearchClick      = MO.Class.register(o, new MO.AEventClick('onSearchClick'));
   o.onSearchLeave      = MO.Class.register(o, new MO.AEventMouseLeave('onSearchLeave'));
   o.onSearchKeyDown    = MO.Class.register(o, new MO.AEventKeyDown('onSearchKeyDown'));
   o.onCellMouseEnter   = MO.Class.register(o, new MO.AEventMouseEnter('onCellMouseEnter'), MO.FDuiColumn_onCellMouseEnter);
   o.onCellMouseLeave   = MO.Class.register(o, new MO.AEventMouseLeave('onCellMouseLeave'), MO.FDuiColumn_onCellMouseLeave);
   o.createCell         = MO.FDuiColumn_createCell;
   o.searchValue        = MO.FDuiColumn_searchValue;
   o.searchReset        = MO.FDuiColumn_searchReset;
   o.refreshWidth       = MO.FDuiColumn_refreshWidth;
   o.dispose            = MO.FDuiColumn_dispose;
   return o;
}
MO.FDuiColumn_onBuildLabel = function FDuiColumn_onBuildLabel(event){
   var o = this;
   var hLine = o._hFormLine;
   if (o._icon) {
      var hIconPanel = o._hIconPanel = MO.Window.Builder.appendTableCell(hLine);
      o._hIcon = MO.Window.Builder.appendIcon(hIconPanel, o.icon);
   }
   var hLabel = o._hLabel = MO.Window.Builder.appendTableCell(hLine);
   hLabel.innerHTML = MO.Lang.String.nvl(o.label());
   var hSortPanel = o._hSortPanel = MO.Window.Builder.appendTableCell(hLine);
   var hSortUp = o._hSortUp = MO.Window.Builder.appendIcon(hSortPanel, o.styleIcon('SortUp', MO.FDuiColumn));
   hSortUp.style.display = 'none';
   var hSortDown = o._hSortDown = MO.Window.Builder.appendIcon(hSortPanel, o.styleIcon('SortDown', MO.FDuiColumn));
   hSortDown.style.display = 'none';
}
MO.FDuiColumn_onBuildSearchEdit = function FDuiColumn_onBuildSearchEdit(event){
   var o = this;
   var hSearchEditPanel = o._hSearchEditPanel = MO.Window.Builder.appendTableCell(o._hSearchFormLine, o.styleName('SearchPanel'));
   var hSearchEdit = o._hSearchEdit = MO.Window.Builder.appendEdit(hSearchEditPanel, o.styleName('SearchEdit'));
   o._table.linkEvent(o, 'onColumnSearchKeyDown', hSearchEdit);
}
MO.FDuiColumn_onBuildSearchForm = function FDuiColumn_onBuildSearchForm(event){
   var o = this;
   var hSearchForm = o._hSearchForm = MO.Window.Builder.appendTable(o._hSearchPanel);
   hSearchForm.style.width = (o._width - 2) + 'px';
   var hSearchFormLine = o._hSearchFormLine = MO.Window.Builder.appendTableRow(hSearchForm);
   o.onBuildSearchEdit();
}
MO.FDuiColumn_onBuildSearch = function FDuiColumn_onBuildSearch(event){
   var o = this;
   var hSearchPanel = o._hSearchPanel = MO.Window.Builder.create(event, 'TD', o.styleName('SearchPanel'));
   hSearchPanel.style.backgroundColor = "#FFFFFF";
   hSearchPanel.style.borderBottom = '1 solid #9EC4EB';
   MO.Window.Html.linkSet(hSearchPanel, 'control', o);
  o.attachEvent('onSearchEnter', hSearchPanel);
  o.attachEvent('onSearchLeave', hSearchPanel);
  o.onBuildSearchForm(event);
}
MO.FDuiColumn_onBuildTotal = function FDuiColumn_onBuildTotal(event){
   var o = this;
   var hTotalPanel = o._hTotalPanel = MO.Window.Builder.create(event, 'TD');
   MO.Window.Html.linkSet(hTotalPanel, 'control', o);
   hTotalPanel.align = 'right';
   hTotalPanel.style.color = '#686860';
   hTotalPanel.style.backgroundColor = '#F8F8F0';
   hTotalPanel.style.borderBottom = '1 solid #B8B8B0';
   hTotalPanel.innerText = ' ';
}
MO.FDuiColumn_onBuildPanel = function FDuiColumn_onBuildPanel(event) {
   var o = this;
   o._hPanel = MO.Window.Builder.create(event, 'TD', o.styleName('Label'));
}
MO.FDuiColumn_onBuild = function FDuiColumn_onBuild(event) {
   var o = this;
   var table = o._table;
   var width = o._width = Math.max(o._size.width, 10);
   o._absEdit = o._editInsert || o._editUpdate || o._editDelete;
   if(!o._absEdit){
      if(!MO.Lang.String.isEmpty(o._lovReference)){
         o._hasDropArea = true;
      }else{
         o._hasDropArea = false;
      }
   }
   if(!MO.Lang.String.isEmpty(o._viewIcons)){
      var map = o._iconMap = new MO.TAttributes();
      map.split(o._viewIcons.replace(/\n/g, ';'), '=', ';');
      o._hasIconArea = map.count > 0;
   }
   o.__base.FDuiControl.onBuild.call(o, event);
   var hPanel = o._hPanel;
   var hForm = o._hForm = MO.Window.Builder.appendTable(hPanel);
   if (!o._orderAble) {
     hForm.style.cursor = 'hand';
   }
   o._hFormLine = MO.Window.Builder.appendTableRow(hForm);
   o.onBuildLabel(event);
   o.onBuildSearch(event);
   o.onBuildTotal(event);
   var hFixPanel = o._hFixPanel = MO.Window.Builder.create(event, 'TD');
   hFixPanel.style.width = width + 'px';
   hFixPanel.style.height = '1px';
   hFixPanel.style.backgroundColor = '#999999'
}
MO.FDuiColumn_onCellMouseEnter = function FDuiColumn_onCellMouseEnter(event){
   var row = event.row;
   this._table.hoverRow(row, true);
}
MO.FDuiColumn_onCellMouseLeave = function FDuiColumn_onCellMouseLeave(event){
   var row = event.row;
   this._table.hoverRow(row, false);
}
MO.FDuiColumn_createCell = function FDuiColumn_createCell(row){
   var o = this;
   var cell = MO.Class.create(o._cellClass);
   cell.setTable(o._table);
   cell.setColumn(o);
   cell.setName(o._name);
   cell.build(o);
   cell.setVisible(o._displayList);
   cell._hPanel.style.width = o._width + 'px';
   return cell;
}
MO.FDuiColumn_searchValue = function FDuiColumn_searchValue(){
   var o = this;
   var value = null;
   var hSearchEdit = o._hSearchEdit;
   if(hSearchEdit){
      value = hSearchEdit.value;
   }
   return value;
}
MO.FDuiColumn_searchReset = function FDuiColumn_searchReset(){
   var o = this;
   var hSearchEdit = o._hSearchEdit;
   if(hSearchEdit){
      hSearchEdit.value = '';
   }
}
MO.FDuiColumn_refreshWidth = function FDuiColumn_refreshWidth(){
   var o = this;
   var width = o._hPanel.offsetWidth;
   o._hFixPanel.style.width = width + 'px';
}
MO.FDuiColumn_dispose = function FDuiColumn_dispose(){
   var o = this;
   o._hSearchPanel = MO.Window.Html.free(o._hSearchPanel);
   o._hFixPanel = MO.Window.Html.free(o._hFixPanel);
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiColumn_onCellMouseDown = function FDuiColumn_onCellMouseDown(s, e){
   var o = this;
   var t = s.table;
   var r = s.row;
   t.__focusCell = s;
   t.selectRow(r, !e.ctrlKey, true);
   var fc = RConsole.find(FFocusConsole);
   var c = fc.focusControl;
   if(MO.Class.isClass(c, FDropEditor)){
      if(c.source == s){
         return;
      }
   }
   RConsole.find(FFocusConsole).focus(s);
}
MO.FDuiColumn_onCellClick = function FDuiColumn_onCellClick(s, e){
   this.table.clickRow(s.row);
}
MO.FDuiColumn_onCellDoubleClick = function FDuiColumn_onCellDoubleClick(s, e){
   var o = this;
   var r = s.row;
   if(!o.isEditAble(r)){
      o.table.doubleClickRow(r);
   }
}
MO.FDuiColumn_onCellKeyDown = function FDuiColumn_onCellKeyDown(s, e, he){
   var o = this;
   if(he){
      o.table.onCellKeyDown(s, e, he);
   }
}
MO.FDuiColumn_oeMode = function FDuiColumn_oeMode(e){
   var o = this;
   if(e.isAfter()){
      var d = false;
      if(EAction.Design == e.mode){
         d = o.dispDesign;
      }else{
         d = o._displayList;
      }
      o.inModeDisplay = d;
      o.setVisible(d);
   }
   return EEventStatus.Continue;
}
MO.FDuiColumn_oeRefresh = function FDuiColumn_oeRefresh(e) {
   var o = this;
   if(e.isBefore()){
      o.setVisible(o._displayList);
   }
}
MO.FDuiColumn_onDataKeyDown = function FDuiColumn_onDataKeyDown(s, e) {
   var o = this;
   o.__base.MEditDescriptor.onDataKeyDown.call(o, s, e);
}
MO.FDuiColumn_onDataChanged = function FDuiColumn_onDataChanged(s, e) {
   var o = this;
   o.table.setDataStatus(s.row, EDataStatus.Update);
}
MO.FDuiColumn_onEditBegin = function FDuiColumn_onEditBegin(editor) {
   var o = this;
   var row = editor.row;
   o.editor = editor;
   o.table.editRow = row;
   o.table.editColumn = o;
   o.table.select(row, true);
}
MO.FDuiColumn_onEditEnd = function FDuiColumn_onEditEnd(e) {
   var o = this;
   var row = editor.row;
   var text = editor.text();
   o.setValue(row, o.formatValue(text));
   o.setText(row, text);
   o.table.setDataStatus(row, row.isChanged() ? EDataStatus.Update : EDataStatus.Unknown)
   o.editor = null;
}
MO.FDuiColumn_onEditChanged = function FDuiColumn_onEditChanged(cell) {
   cell.row.refresh();
}
MO.FDuiColumn_onHeadMouseDown = function FDuiColumn_onHeadMouseDown(e) {
   var o = this;
   var tbl = o.table;
   var ct = tbl.dsViewer.count;
   var x = e.x;
   if(!MO.Class.isClass(o, FDuiColumnButton)){
      var l = o._hPanel.offsetWidth;
      var r = l - 6;
      if (x > 0 && x < r) {
         if (ct > 0 && !MO.Class.isClass(e.source, FDuiColumnStatus)) {
            var cs = tbl.columns;
            var len = cs.count;
            for ( var n = 0; n < len; n++) {
               var c = cs.value(n);
               c._hSortUp.style.display = 'none';
               c._hSortDown.style.display = 'none';
            }
            tbl.dsOrders.clear();
            var oi = new TOrderItem();
            var n = o.dataName;
            if (o.sortType) {
               oi.set(n, EOrder.Desc);
               o._hSortUp.style.display = 'none';
               o._hSortDown.style.display = 'block';
            } else {
               o._hSortUp.style.display = 'block';
               o._hSortDown.style.display = 'none';
               oi.set(n, EOrder.Asc);
            }
            o.sortType = !o.sortType;
            tbl.dsOrders.push(oi);
            tbl.dsSearch();
         }
   }
   }
}
MO.FDuiColumn_onRowClick = function FDuiColumn_onRowClick(s, e){
   RConsole.find(FListenerConsole).process(FGridControl, EGridAction.RowClick, s.row, s.row);
}
MO.FDuiColumn_createMoveable = function FDuiColumn_createMoveable(p) {
   var o = this;
   var r = o.cloneMove;
   if (!r) {
      r = MO.Class.create(o.constructor);
      r.buildMode = EColumnMode.Drag;
      r.assign(o, EAssign.Property);
      r.build();
      o.cloneMove = r;
   }
   var hc = o.panel(EPanel.Move);
   var hr = r.panel(EPanel.Move);
   RHtml.setPixelRect(hr, RHtml.rect(hc));
   hr.className = r.styleName('DesignMove');
   hr.style.pixelLeft = hc.offsetLeft;
   r.show();
   return r;
}
MO.FDuiColumn_setStyleStatus = function FDuiColumn_setStyleStatus(row, status) {
   var o = this;
   var h = o.cell(row);
   if (h) {
      var s = h.style;
      switch (status) {
      case EStyle.Normal:
         if (row.isDelete()) {
            s.backgroundColor = EColor.Delete;
         } else {
            if (o.isEditAble(row)) {
               s.backgroundColor = EColor.Edit;
            } else {
               s.backgroundColor = EColor.Readonly;
            }
         }
         break;
      case EStyle.Select:
         if (row.isDelete()) {
            s.backgroundColor = EColor.Select;
         } else {
            s.textDecoration = 'none';
            if (o.isEditAble(row)) {
               s.backgroundColor = EColor.RowEditSelect;
            } else {
               s.backgroundColor = EColor.Select;
            }
         }
         break;
      case EStyle.Delete:
         s.textDecoration = 'line-through';
         s.backgroundColor = EColor.Select;
         break;
      }
   }
}
MO.FDuiColumn_cell = function FDuiColumn_cell(r){
   return r.cell(this.index);
}
MO.FDuiColumn_equalsValue = function FDuiColumn_equalsValue(s, t) {
   return RString.nvl(s).replace(/\n/g, '\\n').replace(/\r/g, '\\r') == MO.Lang.String.nvl(t).replace(/\n/g, '\\n').replace(/\r/g, '\\r');
}
MO.FDuiColumn_setWidth = function FDuiColumn_setWidth(w){
   var o = this;
   o._hPanel.style.pixelWidth = w;
   o._hFixPanel.style.pixelWidth = w;
}
MO.FDuiColumn_setVisible = function FDuiColumn_setVisible(v){
   var o = this;
   o.isDisplay = v;
   var s = v ? 'block' : 'none';
   o._hPanel.style.display = s;
   o._hSearchPanel.style.display = s;
   o._hTotalPanel.style.display = s;
   o._hFixPanel.style.display = s;
}
MO.FDuiColumn_moveCellFocus = function FDuiColumn_moveCellFocus(row, p) {
   var o = this;
   var t = o.table;
   var mt = null;
   var mr = null;
   var mc = null;
   if(EPosition.Top == p){
      mt = o;
      mr = t.rows.get(t.rows.indexOf(row) - 1);
      if(mr){
         mc = mr.cell(mt.index);
      }
   }else if(EPosition.Bottom == p){
      mt = o;
      mr = t.rows.get(t.rows.indexOf(row) + 1);
      if(mr){
         mc = mr.cell(mt.index);
      }
   }else if (EPosition.Before == p){
      var fi = o.index - 1;
      var ri = t.rows.indexOf(row);
      for(var n = ri; n >= 0; n--){
         var fr = t.rows.get(n);
         for( var i = fi; i >= 0; i--){
            var ft = t.columns.value(i);
            if(MO.Class.isClass(ft, FDuiColumn) && ft._displayList){
               mt = ft;
               mr = fr;
               mc = mr.cell(mt.index);
               break;
            }
         }
         if(mt){
            break;
         }
         fi = t.columns.count - 1;
      }
   }else if(EPosition.After == p){
      var fi = o.index + 1;
      var ri = t.rows.indexOf(row);
      var cc = t.columns.count;
      var rc = t.rows.count;
      for(var n = ri; n < rc; n++){
         var fr = t.rows.get(n);
         for(var i = fi; i < cc; i++){
            var ft = t.columns.value(i);
            if(MO.Class.isClass(ft, FDuiColumn) && ft._displayList){
               mt = ft;
               mr = fr;
               mc = mr.cell(mt.index);
               break;
            }
         }
         if(mt){
            break;
         }
         fi = 0;
      }
   }
   if(mt && mr && mc){
      mc.focus(true);
      RConsole.find(FFocusConsole).focus(mc);
   }
}
MO.FDuiColumn_getEditRange = function FDuiColumn_getEditRange(){
   var o = this;
   var hc = o._hSearchPanel;
   var p = RHtml.offsetPosition(hc);
   var w = hc.offsetWidth;
   var h = hc.offsetHeight;
   return new TRange(p.x, p.y, w, h);
}
with(MO){
   MO.FDuiColumnButton = function FDuiColumnButton(o){
      o = MO.Class.inherits(this, o, FColumn);
      o.__cellClass = FCellButton;
      return o;
   }
}
MO.FDuiColumnEdit = function FDuiColumnEdit(o){
   o = MO.Class.inherits(this, o, MO.FDuiColumnEditControl, MO.MUiPropertyEdit);
   o._cellClass     = MO.FDuiCellEdit;
   return o;
}
MO.FDuiColumnEdit_onCellMouseEnter = function FDuiColumnEdit_onCellMouseEnter(s, e){
}
MO.FDuiColumnEdit_onCellMouseLeave = function FDuiColumnEdit_onCellMouseLeave(s, e){
}
MO.FDuiColumnEdit_onListClick = function FDuiColumnEdit_onListClick(s, e){
   var o = this;
   o.table.__focusCell = s;
   var cvs = s.row.saveRow().toAttributes();
   o.doListView(cvs);
}
MO.FDuiColumnEdit_onZoomHover = function FDuiColumnEdit_onZoomHover(s, e){
   s.hEdit.style.color='black';
}
MO.FDuiColumnEdit_onZoomLeave = function FDuiColumnEdit_onZoomLeave(s, e){
   s.hEdit.style.color='blue';
}
MO.FDuiColumnEdit_onZoomClick = function FDuiColumnEdit_onZoomClick(s, e){
   var o = this;
   o.table.clickRow(s.row);
   var r = s.row.saveRow();
   var v = r.get(o.zoomField)
   if(!MO.Lang.String.isEmpty(v)){
      o.doZoom(v);
   }
}
MO.FDuiColumnEditControl = function FDuiColumnEditControl(o){
   o = MO.Class.inherits(this, o, MO.FDuiColumn);
   return o;
}
MO.FDuiColumnEditControl_isEditAble = function FDuiColumnEditControl_isEditAble(r){
   var o = this;
   if(r){
      return (ERowStatus.Insert == r.status) ? o.editInsert : o.editUpdate;
   }
}
MO.FDuiColumnEmpty = function FDuiColumnEmpty(o){
   o = MO.Class.inherits(this, o, FDuiColumn);
   o._dispList         = true;
   o.onBuildSearchForm = MO.Method.empty;
   return o;
}
MO.FDuiColumnSelected = function FDuiColumnSelected(o){
   o = MO.Class.inherits(this, o, MO.FDuiColumnEditControl);
   o._name             = '_select';
   o._label            = '选中';
   o._dataName         = '_select';
   o._styleEdit        = MO.Class.register(o, new MO.AStyle('_styleEdit'));
   o._optionFixed      = true;
   o._cellClass        = MO.FDuiCellSelected;
   o.onBuildSearchForm = MO.FDuiColumnSelected_onBuildSearchForm;
   o.onBuild           = MO.FDuiColumnSelected_onBuild;
   o.createCell        = MO.FDuiColumnSelected_createCell;
   o.dispose           = MO.FDuiColumnSelected_dispose;
   return o;
}
MO.FDuiColumnSelected_onBuildSearchForm = function FDuiColumnSelected_onBuildSearchForm(p){
   var o = this;
   var hf = o._hSearchForm = MO.Window.Builder.appendTable(o._hSearchPanel);
   hf.width = '100%';
   var hfl = o._hSearchFormLine = MO.Window.Builder.appendTableRow(hf);
   var hc = MO.Window.Builder.appendTableCell(hfl);
   hc.align = 'center';
   o._hSelected = MO.Window.Builder.appendCheck(hc, o.styleName('Edit'));
   o._hSelected.column = o;
   o._hSelected.onclick = o.onSelectedClick;
}
MO.FDuiColumnSelected_onBuild = function FDuiColumnSelected_onBuild(e){
   var o = this;
   o.__base.FDuiColumnEditControl.onBuild.call(o, e);
   var hPanel = o._hPanel;
   hPanel.align = 'center';
}
MO.FDuiColumnSelected_createCell = function FDuiColumnSelected_createCell(p){
   var o = this;
   var c = o.__base.FDuiColumnEditControl.createCell.call(o, p);
   if(p){
      p.cellSelect = c;
   }
   return c;
}
MO.FDuiColumnSelected_dispose = function FDuiColumnSelected_dispose(){
   var o = this;
   o._hSelect = null;
   o.__base.FDuiColumnEditControl.dispose.call(o);
}
MO.FDuiColumnSelected_setVisible = function FDuiColumnSelected_setVisible(){
   var o = this;
   var v = o._table._displayColumnSelect ? 'block' : 'none';
   o._hPanel.style.display = v
   o._hSelected.style.display = v;
   o._hSearchPanel.style.display = v;
   o._hTotalPanel.style.display = v;
   o._hFixPanel.style.display = v;
}
MO.FDuiColumnSelected_onCellClick = function FDuiColumnSelected_onCellClick(s, e){
   return;
}
MO.FDuiColumnSelected_onSelectedClick = function FDuiColumnSelected_onSelectedClick(s, e){
   var o = this;
   var c = o.column;
   var rs = c.table.rows;
    var rc = rs.count;
    for(var n = 0; n<rc; n++){
       var r = rs.get(n);
       if(r.selectAble){
          if(o.checked){
             c.table.selectRow(r, false, true);
          }else{
             c.table.clearSelectRow(r);
          }
       }
    }
}
MO.FDuiColumnStatus = function FDuiColumnStatus(o){
   o = MO.Class.inherits(this, o, MO.FDuiColumnEditControl);
   o._name             = '_status';
   o._label            = '状态';
   o._dataName         = '_status';
   o._optionFixed      = true;
   o._cellClass        = MO.FDuiCellStatus;
   o.onBuildSearchForm = MO.FDuiColumnStatus_onBuildSearchForm;
   o.onBuild           = MO.FDuiColumnStatus_onBuild;
   o.onCellClick       = MO.FDuiColumnStatus_onCellClick;
   o.createCell        = MO.FDuiColumnStatus_createCell;
   return o;
}
MO.FDuiColumnStatus_onBuildSearchForm = function FDuiColumnStatus_onBuildSearchForm(event){
   var o = this;
   var hForm = o._hSearchForm = MO.Window.Builder.appendTable(o._hSearchPanel);
   hForm.width = '100%';
   hForm.height = 18;
   var hLine = o._hSearchFormLine = MO.Window.Builder.appendTableRow(hForm);
   var hCell = MO.Window.Builder.appendTableCell(hLine);
   hCell.align = 'center';
}
MO.FDuiColumnStatus_onBuild = function FDuiColumnStatus_onBuild(event){
   var o = this;
   o.__base.FDuiColumnEditControl.onBuild.call(o, event);
   var hPanel = o._hPanel;
   hPanel.align = 'center';
}
MO.FDuiColumnStatus_onCellClick = function FDuiColumnStatus_onCellClick(event){
   var row = o._row;
   o._table.clickRow(row);
}
MO.FDuiColumnStatus_createCell = function FDuiColumnStatus_createCell(p){
   var o = this;
   var c = o.__base.FDuiColumnEditControl.createCell.call(o, p);
   if(p){
      p._statusCell = c;
   }
   return c;
}
MO.FDuiColumnStatus_setDataStatus = function FDuiColumnStatus_setDataStatus(r, s){
   var o = this;
   var t = o.table;
   var c = r.getStatus();
   var p = null;
   switch(s){
      case EDataStatus.Insert:
         p = 'Insert';
         break;
      case EDataStatus.Delete:
         p = 'Delete';
         break;
      default:
         if(r.isDataChanged()){
            p = 'Changed';
         }else{
            p = t.isFormLinked() ? 'NormalEnter' : 'Normal';
         }
         break;
   }
   c.setIcon(o.styleIconPath(p));
}
MO.FDuiColumnStatus_ohCellMdclk = function FDuiColumnStatus_ohCellMdclk(){
   var tab = this.lnkCol.table;
   tab.insertRow(this.lnkRow.rowIndex());
}
MO.FDuiColumnStatus_dispose = function FDuiColumnStatus_dispose(){
   var o = this;
   o.__base.FDuiColumnEditControl.dispose.call(o);
   o._hSelect = null;
}
MO.FDuiColumnText = function FDuiColumnText(o){
   o = MO.Class.inherits(this, o, MO.FDuiColumn);
   o._cellClass = MO.FDuiCellText;
   return o;
}
with(MO){
   MO.FDuiGrid = function FDuiGrid(o) {
      o = MO.Class.inherits(this, o, FDuiGridControl);
      o.onResizeAfter = FDuiGrid_onResizeAfter;
      o.onBuildData   = FDuiGrid_onBuildData;
      o.oeResize      = FDuiGrid_oeResize;
      o.oeRefresh     = FDuiGrid_oeRefresh;
      o.pushColumn    = FDuiGrid_pushColumn;
      return o;
   }
   MO.FDuiGrid_onResizeAfter = function FDuiGrid_onResizeAfter(){
      var o = this;
      var hdp = o.hDataPanel;
      var hfp = o.hFixPanel;
      var sw = RHtml.scrollWidth(hdp);
      var sh = RHtml.scrollHeight(hdp);
      o.hHeadPanel.style.pixelWidth = hdp.offsetWidth - hfp.offsetWidth - sw;
      o.hColumnPanel.style.pixelHeight = hdp.offsetHeight - hfp.offsetHeight - sh + 1;
   }
   MO.FDuiGrid_onBuildData = function FDuiGrid_onBuildData(){
      var hfp = o.hFixPanel = MO.Window.Builder.appendDiv(hbp);
      hfp.style.zIndex = 2;
      hfp.style.position = 'absolute';
      var hff = o.hFixForm = MO.Window.Builder.appendTable(hfp, null, 1);
      var hffb = MO.Window.Builder.append(hff, 'TBODY');
      hff.style.tableLayout = 'fixed';
      hff.frame = 'rhs';
      hff.borderColorLight = '#29BAD5';
      hff.borderColorDark = '#EEEEEE';
      o.hFixHead = MO.Window.Builder.append(hffb, 'TR');
      o.hFixSearch = MO.Window.Builder.append(hffb, 'TR');
      var hhp = o.hHeadPanel = MO.Window.Builder.appendDiv(hbp);
      hhp.style.zIndex = 1;
      hhp.style.position = 'absolute';
      hhp.style.overflowX = 'hidden';
      hhp.style.width = 1;
      var hhf = o.hHeadForm = MO.Window.Builder.appendTable(hhp, null, 1);
      hhf.frame = 'rhs';
      hhf.style.tableLayout = 'fixed';
      hhf.borderColorLight = '#29BAD5';
      hhf.borderColorDark = '#EEEEEE';
      o.hHead = hhf.insertRow();
      o.hSearch = hhf.insertRow();
      var hcp = o.hColumnPanel = MO.Window.Builder.appendDiv(hbp, o.style('DataPanel'));
      hcp.style.zIndex = 1;
      hcp.style.position = 'absolute';
      hcp.style.overflowY = 'hidden';
      var hcf = o.hColumnForm = MO.Window.Builder.appendTable(hcp, o.style('DataForm'), 0, 0, 1);
      o.hFixRows = MO.Window.Builder.append(hcf, 'TBODY');
      o.hFixRowLine = MO.Window.Builder.append(o.hFixRows, 'TR');
      var hdp = o.hDataPanel = MO.Window.Builder.appendDiv(hbp, o.style('DataPanel'));
      var hdf = o.hDataForm = MO.Window.Builder.appendTable(hdp, o.style('DataForm'), 0, 0, 1);
      o.hRows = MO.Window.Builder.append(hdf, 'TBODY');
      o.hRowLine = MO.Window.Builder.append(o.hRows, 'TR');
      o.attachEvent('onHeadMouseDown', o.hHeadForm, o.onHeadMouseDown);
      o.attachEvent('onHeadMouseMove', o.hHeadForm, o.onHeadMouseMove);
      o.attachEvent('onHeadMouseUp', o.hHeadForm, o.onHeadMouseUp);
      o.attachEvent('onDataScroll', o.hDataPanel, o.onDataScroll);
   }
   MO.FDuiGrid_oeResize = function FDuiGrid_oeResize(e){
      var o = this;
      var h = o.hPanel;
      if(!h.offsetWidth || !h.offsetHeight){
         return;
      }
      var hp = o.border.hPanel;
      var hcf = o.hTitleForm;
      var hfp = o.hFixPanel;
      var hhp = o.hHeadPanel;
      var hcp = o.hColumnPanel;
      var hdp = o.hDataPanel;
      hhp.style.display = hcp.style.display = hdp.style.display = 'none';
      var ow = o.hBorderPanel.offsetWidth;
      var oh = o.hBorderPanel.offsetHeight;
      hhp.style.display = hcp.style.display = hdp.style.display = 'block';
      hhp.style.pixelWidth = ow - hfp.offsetWidth;
      hcp.style.pixelHeight = oh - hfp.offsetHeight - 1 - hcf.offsetHeight;
      hdp.style.pixelWidth = ow;
      hdp.style.pixelHeight = oh - hcf.offsetHeight;
      if(o.dpScrollLeft){
         hdp.scrollLeft = o.dpScrollLeft;
         o.dpScrollLeft = null;
      }
      RConsole.find(FEventConsole).push(o.eventResizeAfter);
      return EEventStatus.Stop;
   }
   MO.FDuiGrid_oeRefresh = function FDuiGrid_oeRefresh(e){
      var o = this;
      o.base.FDuiGridControl.oeRefresh.call(o, e);
      if(e.isAfter()){
         var hcf = o.hTitleForm;
         var hfp = o.hFixPanel;
         var hhp = o.hHeadPanel;
         var hcp = o.hColumnPanel;
         var hdp = o.hDataPanel;
         var hcfh = hcf.offsetHeight;
         var hfpw = hfp.offsetWidth;
         var hfph = hfp.offsetHeight;
         hcp.style.display = hdp.style.display = 'none';
         var ow = o.hBorderPanel.offsetWidth;
         var oh = o.hBorderPanel.offsetHeight;
         hcp.style.display = hdp.style.display = 'block';
         hfp.style.pixelTop = hcfh;
         hhp.style.pixelTop = hcfh;
         hhp.style.pixelLeft = hfpw;
         hhp.style.pixelWidth = ow - hfpw;
         hhp.style.pixelHeight = hfph;
         o.hHead.style.pixelHeight = o.hFixHead.offsetHeight;
         o.hSearch.style.pixelHeight = o.hFixSearch.offsetHeight;
         hcp.style.pixelTop = hcfh + hfph;
         hcp.style.pixelHeight = oh - hcfh - hfph;
         hdp.style.paddingLeft = hfpw;
         hdp.style.paddingTop = hfph;
         hdp.style.pixelWidth = ow;
         hdp.style.pixelHeight = oh - hcfh;
         var ca = null;
         var aw = ow;
         var cs = o.columns;
         for(var n=0; n<cs.count; n++){
            var c = cs.value(n);
            if(c.isDisplay){
               if(c.dispAuto){
                  if(ca){
                     return RMessage.fatal(o, null, 'Too many auto column! (name1={0},name2={1})', ca.name, c.name);
                  }
                  ca = c;
               }else{
                  aw -= c.hPanel.offsetWidth;
               }
            }
         }
         if(ca){
            ca.setWidth(Math.max(aw - 2, ca.width ? ca.width : 120));
         }
      }
   }
   MO.FDuiGrid_pushColumn = function FDuiGrid_pushColumn(c){
      var o = this;
      if(c.dispFixed){
         o.hFixHead.appendChild(c.hPanel);
         o.hFixSearch.appendChild(c.hSearchPanel);
         o.hFixRowLine.appendChild(c.hFixPanel);
      }else{
         o.hHead.appendChild(c.hPanel);
         o.hSearch.appendChild(c.hSearchPanel);
         o.hRowLine.appendChild(c.hFixPanel);
      }
      o.push(c);
   }
}
MO.FDuiGridControl = function FDuiGridControl(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MUiDataContainer, MO.MUiDisplayContrainer, MO.MDuiDescribeFrame);
   o._displayCount             = MO.Class.register(o, new MO.APtyInteger('_displayCount'), 20);
   o._displayTitle             = true;
   o._displayColumnStatus      = true;
   o._displayColumnSelect      = true;
   o._optionColumnStatus       = true;
   o._optionColumnSelect       = true;
   o._rowHeight                = MO.Class.register(o, new MO.APtyInteger('_rowHeight'), 0);
   o._stylePanel               = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleTitlePanel          = MO.Class.register(o, new MO.AStyle('_styleTitlePanel'));
   o._styleTitleForm           = MO.Class.register(o, new MO.AStyle('_styleTitleForm'));
   o._styleCaption             = MO.Class.register(o, new MO.AStyle('_styleCaption'));
   o._styleContentPanel        = MO.Class.register(o, new MO.AStyle('_styleContentPanel'));
   o._styleContentForm         = MO.Class.register(o, new MO.AStyle('_styleContentForm'));
   o._styleHintPanel           = MO.Class.register(o, new MO.AStyle('_styleHintPanel'));
   o._styleHintForm            = MO.Class.register(o, new MO.AStyle('_styleHintForm'));
   o._styleHint                = MO.Class.register(o, new MO.AStyle('_styleHint'));
   o._stylePage                = MO.Class.register(o, new MO.AStyle('_stylePage'));
   o._styleButtonForm          = MO.Class.register(o, new MO.AStyle('_styleButtonForm'));
   o._styleButton              = MO.Class.register(o, new MO.AStyle('_styleButton'));
   o._dataset                  = null;
   o._minHeight                = 80;
   o._buttons                  = MO.Class.register(o, new MO.AGetter('_buttons'));
   o._columns                  = MO.Class.register(o, new MO.AGetter('_columns'));
   o._rowClass                 = MO.Class.register(o, new MO.AGetSet('_rowClass'), MO.FDuiGridRow);
   o._rows                     = MO.Class.register(o, new MO.AGetter('_rows'));
   o._rowPool                  = null;
   o._focusCell                = null;
   o._focusRow                 = null;
   o._loadEvent                = null;
   o._hTitlePanel              = null;
   o._hTitleForm               = null;
   o._hTitleLine               = null;
   o._hCaption                 = null;
   o._hContentPanel            = null;
   o._hHintPanel               = null;
   o._hHintForm                = null;
   o._hRows                    = null;
   o._listenersDataSearch      = MO.Class.register(o, new MO.AListener('_listenersDataSearch'));
   o._listenersCellClick       = MO.Class.register(o, new MO.AListener('_listenersCellClick'));
   o._listenersCellDoubleClick = MO.Class.register(o, new MO.AListener('_listenersCellDoubleClick'));
   o._listenersRowClick        = MO.Class.register(o, new MO.AListener('_listenersRowClick'));
   o._listenersRowDoubleClick  = MO.Class.register(o, new MO.AListener('_listenersRowDoubleClick'));
   o.onBuildTitle              = MO.FDuiGridControl_onBuildTitle;
   o.onBuildContent            = MO.Method.virtual(o, 'onBuildContent');
   o.onBuildHint               = MO.FDuiGridControl_onBuildHint;
   o.onBuildPanel              = MO.FDuiGridControl_onBuildPanel;
   o.onBuild                   = MO.FDuiGridControl_onBuild;
   o.onColumnSearchKeyDown     = MO.Class.register(o, new MO.AEventKeyDown('onColumnSearchKeyDown'), MO.FDuiGridControl_onColumnSearchKeyDown);
   o.onRowMouseEnter           = MO.Class.register(o, new MO.AEventMouseEnter('onRowMouseEnter'), MO.FDuiGridControl_onRowMouseEnter);
   o.onRowMouseLeave           = MO.Class.register(o, new MO.AEventMouseLeave('onRowMouseLeave'), MO.FDuiGridControl_onRowMouseLeave);
   o.onRowClick                = MO.Class.register(o, new MO.AEventClick('onRowClick'), MO.FDuiGridControl_onRowClick);
   o.onButtonMouseDown         = MO.Class.register(o, new MO.AEventMouseDown('onButtonMouseDown'), MO.FDuiGridControl_onButtonMouseDown);
   o.onDatasetLoadDelay        = MO.FDuiGridControl_onDatasetLoadDelay;
   o.onDatasetLoad             = MO.FDuiGridControl_onDatasetLoad;
   o.construct                 = MO.FDuiGridControl_construct;
   o.buildNavigatorButton      = MO.FDuiGridControl_buildNavigatorButton;
   o.createChild               = MO.FDuiGridControl_createChild;
   o.appendColumn              = MO.Method.virtual(o, 'appendColumn');
   o.appendChild               = MO.FDuiGridControl_appendChild;
   o.push                      = MO.FDuiGridControl_push;
   o.createRow                 = MO.FDuiGridControl_createRow;
   o.dropRow                   = MO.FDuiGridControl_dropRow;
   o.insertRow                 = MO.FDuiGridControl_insertRow;
   o.pushRow                   = MO.FDuiGridControl_pushRow;
   o.removeRow                 = MO.FDuiGridControl_removeRow;
   o.syncRow                   = MO.FDuiGridControl_syncRow;
   o.hideRows                  = MO.FDuiGridControl_hideRows;
   o.clearRows                 = MO.FDuiGridControl_clearRows;
   o.loadDataset               = MO.FDuiGridControl_loadDataset;
   o.clickCell                 = MO.FDuiGridControl_clickCell;
   o.doubleClickCell           = MO.FDuiGridControl_doubleClickCell;
   o.clickRow                  = MO.FDuiGridControl_clickRow;
   o.doubleClickRow            = MO.FDuiGridControl_doubleClickRow;
   o.hoverRow                  = MO.FDuiGridControl_hoverRow;
   o.selectRow                 = MO.FDuiGridControl_selectRow;
   o.resetSearch               = MO.FDuiGridControl_resetSearch;
   o.refreshHint               = MO.FDuiGridControl_refreshHint;
   o.dsMovePage                = MO.Method.empty;
   o.dsSearch                  = MO.Method.empty;
   o.dispose                   = MO.FDuiGridControl_dispose;
   return o;
}
MO.FDuiGridControl_onBuildPanel = function FDuiGridControl_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.Window.Builder.createTable(p, o.styleName('Panel'));
}
MO.FDuiGridControl_onBuildTitle = function FDuiGridControl_onBuildTitle(event){
   var o = this;
   var hTitleForm = o._hTitleForm = MO.Window.Builder.appendTable(o._hTitlePanel, o.styleName('TitleForm'));
   var hTitleLine = o._hTitleLine = MO.Window.Builder.appendTableRow(hTitleForm);
   var hc = o._hCaption = MO.Window.Builder.appendTableCell(hTitleLine, o.styleName('Caption'));
   hc.innerText = o.label();
   MO.Window.Html.displaySet(hTitleForm, o._displayTitle);
}
MO.FDuiGridControl_onBuildHint = function FDuiGridControl_onBuildHint(event){
   var o = this;
   var hHintLine = MO.Window.Builder.appendTableRow(o._hHintForm);
   var hCell = MO.Window.Builder.appendTableCell(hHintLine);
   hCell.width = 10;
   var hCell = MO.Window.Builder.appendTableCell(hHintLine);
   hCell.noWrap = true;
   o._hHint = MO.Window.Builder.appendText(hCell, o.styleName('Hint'))
   var hCell = MO.Window.Builder.appendTableCell(hHintLine);
   hCell.width = 70;
   o._hNavFirst = o.buildNavigatorButton(hCell, 'control.grid.first', '&nbsp;' + MO.Context.get('FDuiGridControl:First'));
   var hCell = MO.Window.Builder.appendTableCell(hHintLine);
   hCell.width = 70;
   o._hNavPrior = o.buildNavigatorButton(hCell, 'control.grid.prior', '&nbsp;' + MO.Context.get('FDuiGridControl:Prior'));
   o._hNavPrior.style.paddingRight = '20';
   var hCell = MO.Window.Builder.appendTableCell(hHintLine);
   hCell.width = 60;
   var hPage = o._hPage = MO.Window.Builder.appendEdit(hCell, o.styleName('Page'))
   hPage.style.textAlign = 'right';
   hPage.style.width = '40px';
   var hCell = MO.Window.Builder.appendTableCell(hHintLine);
   hCell.width = 70;
   o._hNavNext = o.buildNavigatorButton(hCell, null, MO.Context.get('FDuiGridControl:Next') + '&nbsp;', 'control.grid.next');
   var hCell = MO.Window.Builder.appendTableCell(hHintLine);
   hCell.width = 70;
   o._hNavLast = o.buildNavigatorButton(hCell, null, MO.Context.get('FDuiGridControl:Last') + '&nbsp;', 'control.grid.last');
}
MO.FDuiGridControl_onBuild = function FDuiGridControl_onBuild(event){
   var o = this;
   if(!o._size.height || o._size.height < 160){
      o.height = '100%';
   }
   o.__base.FDuiContainer.onBuild.call(o, event);
   var hc = o._hTitlePanel = MO.Window.Builder.appendTableRowCell(o._hPanel, o.styleName('TitlePanel'));
   o.onBuildTitle(event);
   o._hContentPanel = MO.Window.Builder.appendTableRowCell(o._hPanel, o.styleName('ContentPanel'));
   o.onBuildContent(event);
   o._hHintPanel = MO.Window.Builder.appendTableRowCell(o._hPanel, o.styleName('HintPanel'));
   o._hHintForm = MO.Window.Builder.appendTable(o._hHintPanel, o.styleName('HintForm'));
   o.onBuildHint(event);
   if(o._optionColumnStatus){
      var statusColumn = o._statusColumn = MO.Class.create(MO.FDuiColumnStatus);
      statusColumn.setTable(o);
      statusColumn.size().set(40, 0);
      statusColumn.build(event);
      o.push(statusColumn);
   }
   if(o._optionColumnSelect){
      var selectColumn = o._selectColumn = MO.Class.create(MO.FDuiColumnSelected);
      selectColumn.setTable(o);
      selectColumn.size().set(40, 0);
      selectColumn.build(event);
      o.push(selectColumn);
   }
}
MO.FDuiGridControl_onColumnSearchKeyDown = function FDuiGridControl_onColumnSearchKeyDown(event){
   var o = this;
   if(event.keyCode == MO.EKeyCode.Enter){
      o.processDataSearchListener(event);
      o.dsSearch();
   }
}
MO.FDuiGridControl_onRowMouseEnter = function FDuiGridControl_onRowMouseEnter(event){
   this.hoverRow(s, true);
}
MO.FDuiGridControl_onRowMouseLeave = function FDuiGridControl_onRowMouseLeave(event){
   this.hoverRow(s, false);
}
MO.FDuiGridControl_onRowClick = function FDuiGridControl_onRowClick(event){
}
MO.FDuiGridControl_onButtonMouseDown = function FDuiGridControl_onButtonMouseDown(event){
   var o = this;
   var dataset = o._dataset;
   if(!dataset){
      return;
   }
   var pageCount = dataset.pageCount();
   var page = dataset.page();
   var hSource = event.hSource;
   if(o._hInsertButton == hSource){
      o.onInsertButtonClick();
   }else if(o._hExtendButton == hSource){
      o.onExtendButtonClick();
   }else if (o._hNavFirst == hSource && (page != 0)){
      o.dsMovePage(MO.EUiDataAction.First);
   } else if (o._hNavPrior == hSource && (page != 0)){
      o.dsMovePage(MO.EUiDataAction.Prior);
   } else if (o._hNavNext == hSource && (page != pageCount - 1)){
      o.dsMovePage(MO.EUiDataAction.Next);
   } else if (o._hNavLast == hSource && (page != pageCount - 1)){
      o.dsMovePage(MO.EUiDataAction.Last);
   }
}
MO.FDuiGridControl_onDatasetLoadDelay = function FDuiGridControl_onDatasetLoadDelay(p){
   var o = this;
   var c = o._displayCount;
   var h = o._rowHeight;
   var d = p.dataset;
   var rc = d.count();
   var rb = p.index;
   var re = rb + p.acceleration;
   if(re > rc - 1){
      re = rc - 1;
   }
   if(o._hHeadPanel){
      o._hHeadPanel.scrollLeft = 0;
   }
   if(o._hColumnPanel){
      o._hColumnPanel.scrollTop = 0;
   }
   for(var i = rb; i <= re; i++){
      var r = o.syncRow(i);
      if(h > 0) {
         r._hFixPanel.height = h + 'px';
      }
      var dr = d.row(i);
      r.loadRow(dr);
      r.setVisible(true);
   }
   if(re == rc - 1){
      p.setValid(false);
      o.psRefresh();
      return;
   }
   p.index += a.acceleration;
}
MO.FDuiGridControl_onDatasetLoad = function FDuiGridControl_onDatasetLoad(p){
   var o = this;
   if(o._hColumnPanel){
      o._hColumnPanel.scrollTop = 0;
      o._hColumnPanel.scrollLeft = 0;
   }
   if(o._hDataPanel){
     o._hDataPanel.scrollTop = 0;
     o._hDataPanel.scrollLeft = 0;
   }
   if(p.isEmpty()){
      return;
   }
   var e = o._loadEvent;
   e.index = 0;
   e.acceleration = 5;
   e.dataset = o._dataset;
   e.setValid(true);
   RConsole.find(FEventConsole).push(o._loadEvent);
}
MO.FDuiGridControl_construct = function FDuiGridControl_construct() {
   var o = this;
   o.__base.FDuiContainer.construct.call(o);
   o.__base.MUiDisplayContrainer.construct.call(o);
   o._buttons = new MO.TDictionary();
   o._columns = new MO.TDictionary();
   o._rows = new MO.TObjects();
   o._rowPool = MO.Class.create(MO.FObjectPool);
   o.lsnsRowClick = new MO.TListeners();
   o.lsnsRowDblClick = new MO.TListeners();
   var event = o._loadEvent = new MO.SEvent(o);
}
MO.FDuiGridControl_buildNavigatorButton = function FDuiGridControl_buildNavigatorButton(hParent, iconBf, text, iconAf, name){
   var o = this;
   var hForm = MO.Window.Builder.appendTable(hParent, o.styleName('ButtonForm'));
   hForm.style.cursor = 'hand';
   hForm.style.paddingLeft = '10';
   var hLine = MO.Window.Builder.appendTableRow(hForm);
   o.attachEvent('onButtonMouseDown', hForm);
   if(iconBf){
      var hCell = MO.Window.Builder.appendTableCell(hLine);
      MO.Window.Builder.appendIcon(hCell, null, iconBf);
   }
   if(text){
      var hCell = MO.Window.Builder.appendTableCell(hLine);
      hCell.innerHTML = text;
   }
   if(iconAf){
      var hCell = MO.Window.Builder.appendTableCell(hLine);
      MO.Window.Builder.appendIcon(hCell, null, iconAf);
   }
   return hForm;
}
MO.FDuiGridControl_createChild = function FDuiGridControl_createChild(xconfig){
   var o = this;
   var control = o.__base.FDuiContainer.createChild.call(o, xconfig);
   if(MO.Class.isClass(control, MO.FDuiGridRowControl)){
      control.setTable(o);
      return null;
   }else if(MO.Class.isClass(control, MO.FDuiColumn)){
      control.setTable(o);
   }
   return control;
}
MO.FDuiGridControl_appendChild = function FDuiGridControl_appendChild(control){
   var o = this;
   o.__base.FDuiContainer.appendChild.call(o, control);
   if(MO.Class.isClass(control, MO.FDuiColumn)){
      o.appendColumn(control);
   }
}
MO.FDuiGridControl_push = function FDuiGridControl_push(component){
   var o = this;
   if(MO.Class.isClass(component, MO.FDuiColumn)){
      component._table = o;
      o._columns.set(component.name(), component);
   }else if(MO.Class.isClass(component, MO.FDuiGridRowControl)){
      component._table = o;
   }
   o.__base.FDuiContainer.push.call(o, component);
}
MO.FDuiGridControl_createRow = function FDuiGridControl_createRow(clazz){
   var o = this;
   var row = o._rowPool.alloc();
   if(!row){
      var rowClass = MO.Runtime.nvl(clazz, o._rowClass);
      row = MO.Class.create(rowClass);
      row._table = row._parent = o;
      row.build(o._hPanel);
   }
   return row;
}
MO.FDuiGridControl_dropRow = function FDuiGridControl_dropRow(row){
   var o = this;
   var hFixPanel = row._hFixPanel;
   if(hFixPanel){
      o._hFixRows.removeChild(hFixPanel);
   }
   o._hRows.removeChild(row._hPanel);
}
MO.FDuiGridControl_insertRow = function FDuiGridControl_insertRow(index, row){
   var o = this;
   row.index = index;
   row.build();
   if(row._hFixPanel){
      o._hFixRows.appendChild(row._hFixPanel);
      MO.Window.Html.tableMoveRow(o._hColumnForm, row._hFixPanel.rowIndex, index + 2);
   }
   o._hRows.appendChild(row._hPanel);
   MO.Window.Html.tableMoveRow(o._hContentForm, row._hPanel.rowIndex, index + 2);
   row.refreshStyle();
   o._rows.insert(index, row);
}
MO.FDuiGridControl_pushRow = function FDuiGridControl_pushRow(row){
   var o = this;
   var hFixPanel = row._hFixPanel;
   if(hFixPanel){
      o._hFixRows.appendChild(hFixPanel);
   }
   o._hRows.appendChild(row._hPanel);
   row._hPanel.style.height = hFixPanel.offsetHeight + 'px';
   row.refreshStyle();
   o._rows.push(row);
}
MO.FDuiGridControl_removeRow = function FDuiGridControl_removeRow(row){
   var o = this;
   o.dropRow(row);
   o._rows.remove(row);
}
MO.FDuiGridControl_syncRow = function FDuiGridControl_syncRow(p){
   var o = this;
   var rs = o._rows;
   var r = rs.get(p);
   if(!r){
      for(var i = rs.count(); i <= p; i++){
         r = o.createRow();
         r._index = i;
         r.build(o._hPanel);
         if(r._hFixPanel){
            o._hFixRows.appendChild(r._hFixPanel);
         }
         o._hRows.appendChild(r._hPanel);
         r._hPanel.style.height = r._hFixPanel.offsetHeight + 'px';
         rs.push(r);
      }
   }
   r._extended = false;
   if(r._childRows){
      r.hideChild();
      r._childRows.clear();
   }
   return r;
}
MO.FDuiGridControl_hideRows = function FDuiGridControl_hideRows(){
   var o = this;
   var rows = o._rows;
   var count = rows.count();
   for(var i = count - 1; i >= 0 ; i--){
      var row = rows.at(i);
      row.setVisible(false);
   }
}
MO.FDuiGridControl_clearRows = function FDuiGridControl_clearRows(){
   var o = this;
   var rows = o._rows;
   var rowPool = o._rowPool;
   var count = rows.count();
   for(var i = count - 1; i >= 0 ; i--){
      var row = rows.at(i);
      o.dropRow(row);
      rowPool.free(row);
   }
   rows.clear();
}
MO.FDuiGridControl_loadDataset = function FDuiGridControl_loadDataset(dataset){
   var o = this;
   o._dataset = dataset;
   var dataRows = dataset.rows();
   var count = dataRows.count();
   for(var i = 0; i < count ; i++){
      var dataRow = dataRows.at(i);
      var row = o.createRow();
      row.loadDataRow(dataRow);
      o.pushRow(row);
   }
   o.refreshHint();
}
MO.FDuiGridControl_clickCell = function FDuiGridControl_clickCell(cell){
   var o = this;
   var row = cell.row();
   o._focusCell = cell;
   var event = new MO.SEvent(o);
   event.grid = o;
   event.row = row;
   event.cell = cell;
   o.processCellClickListener(event);
   event.dispose();
   o.clickRow(row);
}
MO.FDuiGridControl_doubleClickCell = function FDuiGridControl_doubleClickCell(cell){
   var o = this;
   var row = cell.row();
   o._focusCell = cell;
   var event = new MO.SEvent(o);
   event.grid = o;
   event.row = row;
   event.cell = cell;
   o.processCellDoubleClickListener(event);
   event.dispose();
   o.doubleClickRow(row);
}
MO.FDuiGridControl_clickRow = function FDuiGridControl_clickRow(row){
   var o = this;
   o._focusRow = row;
   var event = new MO.SEvent(o);
   event.grid = o;
   event.row = row;
   o.processRowClickListener(event);
   event.dispose();
}
MO.FDuiGridControl_doubleClickRow = function FDuiGridControl_doubleClickRow(row){
   var o = this;
   o._focusRow = row;
   var event = new MO.SEvent(o);
   event.grid = o;
   event.row = row;
   o.processRowDoubleClickListener(event);
   event.dispose();
}
MO.FDuiGridControl_hoverRow = function FDuiGridControl_hoverRow(row, flag){
   var o = this;
   if(flag){
      o._hoverRow = row;
      row.refreshStyle();
   }else{
      if(o._hoverRow == row){
         o._hoverRow = null;
      }
      row.refreshStyle();
   }
}
MO.FDuiGridControl_selectRow = function FDuiGridControl_selectRow(row, reset, force) {
   var o = this;
   var has = false;
   if(reset){
      var rs = o._rows;
      var c = rs.count;
      for(var n=0; n<c; n++){
         var r = rs.get(n);
         if(r != row && r.isSelect){
            r.select(false);
            has = true;
         }
      }
   }
   row.select(has || !row.isSelect || force);
   o.refreshHint();
}
MO.FDuiGridControl_resetSearch = function FDuiGridControl_resetSearch(){
   this._columns.invoke('searchReset');
}
MO.FDuiGridControl_refreshHint = function FDuiGridControl_refreshHint(){
   var o = this;
   var hHint = o._hHint;
   var dataset = o._dataset;
   if(dataset){
      var total = dataset.total();
      var pageCount = dataset.pageCount();
      var page = dataset.page();
      hHint.innerHTML ='共' +"<FONT color='red'>" + pageCount + "</FONT>" + '页' + "<FONT color='red'>" + total + "</FONT>" + '条记录，' + "当前选中第<FONT color='red'>" + (page + 1) + "</FONT>" +'页';
      o._hPage.value = page + 1;
   }
}
MO.FDuiGridControl_dispose = function FDuiGridControl_dispose(){
   var o = this;
   o._rows = MO.Lang.Object.dispose(o._rows);
   o._rowPool = MO.Lang.Object.dispose(o._rowPool);
   o._hBorderPanel = null;
   o._hDelayPanel = null;
   o._hDelayForm = null;
   o._hFixPanel = null;
   o._hFixForm = null;
   o._hFixHead = null;
   o._hFixSearch = null;
   o._hHeadPanel = null;
   o._hHeadForm = null;
   o._hHead = null;
   o._hSearch = null;
   o._hColumnPanel = null;
   o._hColumnForm = null;
   o._hFixRows = null;
   o._hFixRowLine = null;
   o._hContentPanel = null;
   o._hContentForm = null;
   o._hRows = null;
   o._hRowLine = null;
   o._hHintForm = null;
   o._hInsertButton = null;
   o._hExtendButton = null;
   o._hExtendText = null;
   o.__base.MUiDisplayContrainer.dispose.call(o);
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiGridControl_pushButton = function FDuiGridControl_pushButton(b){
   var o = this;
   var hc  = o._hButtons.insertCell();
   hc.style.border = '0 solid #C6D7FF';
   hc.appendChild(b._hPanel);
   o.push(b);
}
MO.FDuiGridControl_onMouseDown = function FDuiGridControl_onMouseDown(e, he){
   var o = this;
}
MO.FDuiGridControl_onHeadMouseDown = function FDuiGridControl_onHeadMouseDown(e){
   var o = this;
   var m = o.getHeadMode(e);
   if(EGridColumn.Size == m){
      o.hoverMode = EGridColumn.Size;
      e.srcElement.status = EGridColumn.Size;
      o.hoverX = e.srcElement.offsetLeft + e.x;
      o.hoverDataCell = null;
      if(o._hContentForm._rows.length){
         o.hoverDataCell = o._hContentForm._rows[0].cells[o.hoverHead.index];
      }
      o._hHeadForm.setCapture();
   }
}
MO.FDuiGridControl_onHeadMouseMove = function FDuiGridControl_onHeadMouseMove(e){
   var o = this;
   if(EGridColumn.Size == o.hoverMode){
      var bl = o.hoverCellLength;
      var mx = e.srcElement.offsetLeft + e.x;
      var w =  mx - o.hoverX + bl;
      if(w > 0){
         o.hoverHead._hPanel.style.pixelWidth = w;
         o.hoverHead._hFixPanel.style.pixelWidth = w;
      }
   }else if(EGridColumn.None == o.hoverMode){
      var m = o.getHeadMode(e);
      var c = 'default';
      if(EGridColumn.Size == m){
         c = 'e-resize';
      }else if(EGridColumn.Drag == m){
         c = 'hand';
      }
      o._hHeadForm.style.cursor = c;
   }
}
MO.FDuiGridControl_onHeadMouseUp = function FDuiGridControl_onHeadMouseUp(e){
   var o = this;
   if(EGridColumn.Size == o.hoverMode){
      o._hHeadForm.releaseCapture();
   }
   o.hoverMode = EGridColumn.None;
}
MO.FDuiGridControl_onDataScroll = function FDuiGridControl_onDataScroll(){
   var o = this;
   o._hHeadPanel.scrollLeft = o._hContentPanel.scrollLeft;
   o._hColumnPanel.scrollTop = o._hContentPanel.scrollTop;
}
MO.FDuiGridControl_onCellKeyDown = function FDuiGridControl_onCellKeyDown(c, e, he){
   var o = this;
   var k = e.keyCode;
   var l = c.column;
   var r = c.row;
   if(EKey.Up == k) {
      l.moveCellFocus(r, EPosition.Top);
      RKey.eventClear(he);
   }else if(EKey.Down == k) {
      l.moveCellFocus(r, EPosition.Bottom);
      RKey.eventClear(he);
   }else if(EKey.Tab == k && e.shiftKey){
      l.moveCellFocus(r, EPosition.Before);
      RKey.eventClear(he);
   }else if(EKey.Tab == k){
      l.moveCellFocus(r, EPosition.After);
      RKey.eventClear(he);
   }
}
MO.FDuiGridControl_onRowClick = function FDuiGridControl_onRowClick(s, e){
   var o = this;
   o.selectRow(s, !e.ctrlKey, true);
   o.lsnsRowClick.process(s);
   var e = o._eventRowClick;
   if(!e){
      e = o._eventRowClick = new TEvent();
      e.source = o;
   }
   e.caller = s;
   e.handle = 'onTableRowClick';
   RConsole.find(FFormConsole).processEvent(e);
}
MO.FDuiGridControl_onPageCountDown = function FDuiGridControl_onPageCountDown(e){
   var o = this;
   var ds = o.dsViewer;
   if(MO.Lang.String.isEmpty(o.hPage.value) || !ds || 0 == ds.dataset.pageCount){
      return;
   }
   var n = RInt.parse(o.hPage.value);
   if(EKey.Enter == e.keyCode && n != ds.pageIndex + 1){
      if(n < 1){
         n = 1;
      }
      if(n > ds.pageCount){
         n = ds.pageCount;
      }
      o.dsMovePage(n - 1);
   }
}
MO.FDuiGridControl_onInsertButtonClick = function FDuiGridControl_onInsertButtonClick(){
   RFormSpace.doPrepare(this);
}
MO.FDuiGridControl_onExtendButtonClick = function FDuiGridControl_onExtendButtonClick(){
   var o = this;
   if(400 == o.dsPageSize){
      o.dsPageSize = o.dsPageSizeStore;
      o.hExtendText.innerText = ' 展开';
   }else{
      o.dsPageSizeStore = o.dsPageSize;
      o.dsPageSize = 400;
      o.hExtendText.innerText = ' 收缩';
   }
   o.dsSearch();
}
MO.FDuiGridControl_oeMode = function FDuiGridControl_oeMode(e){
   var o = this;
   o.dispUpdate = true;
   o.dispDelete = true;
   o.__base.FDuiContainer.oeMode.call(o, e);
   o.__base.MDisplay.oeMode.call(o, e);
   o._editable = o.canEdit(e.mode);
   return EEventStatus.Stop;
}
MO.FDuiGridControl_oeProgress = function FDuiGridControl_oeProgress(e){
   var o = this;
   if('none' == o._hPanel.currentStyle.display){
      return;
   }
   var hdp = o._hDelayPanel;
   if(!hdp){
      hdp = o._hDelayPanel = MO.Window.Builder.appendDiv(o.hBorderPanel);
      var st = hdp.style;
      st.position = 'absolute';
      st.zIndex = RLayer.next();
      st.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity=100)';
      st.backgroundColor = '#FFFFFF';
      st.top = 0;
      st.width = '100%';
      st.height = '100%';
      st.display = 'none';
      var hdf = o._hDelayForm = MO.Window.Builder.appendTable(hdp);
      hdf.style.width = '100%';
      hdf.style.height = '100%';
      var hc = hdf.insertRow().insertCell();
      hc.align = 'center';
      hc.vAlign = 'middle';
      MO.Window.Builder.appendIcon(hc, 'ctl.FDuiGridControl_Loading')
      var t = o._hDelayText = MO.Window.Builder.append(hc, 'SPAN');
      t.innerHTML = "<BR><BR><FONT color='red'><B>" + RContext.get('FDuiGridControl:Loading') + "</B></FONT>";
   }
   if(e.enable){
      RHtml.setRect(hdp, o.calculateDataSize());
      hdp.filters[0].opacity = 100;
      hdp.style.display = 'block';
   }else{
      if(o._loadFinish){
         hdp.style.display = 'none';
      }
   }
   o.refreshHint();
   return EEventStatus.Stop;
}
MO.FDuiGridControl_isFormLinked = function FDuiGridControl_isFormLinked(){
   return this._formLinked || this._formName;
}
MO.FDuiGridControl_isDataSelected = function FDuiGridControl_isDataSelected(){
   var rs = this._rows;
   for(var n=rs.count-1; n>=0; n--){
      if(rs.get(n).isSelect){
         return true;
      }
   }
}
MO.FDuiGridControl_isDataChanged = function FDuiGridControl_isDataChanged(){
   var rs = this._rows;
   for(var n=rs.count-1; n>=0; n--){
      if(rs.get(n).isDataChanged()){
         return true;
      }
   }
}
MO.FDuiGridControl_hasAction = function FDuiGridControl_hasAction(){
   var o = this;
   var cs = o.components;
   var ct = cs.count;
   for(var n = 0; n < ct; n++){
      var c = cs.value(n);
      if(MO.Class.isClass(c, FDataAction)){
         return o.isDataSelected();
      }
   }
}
MO.FDuiGridControl_getFormLink = function FDuiGridControl_getFormLink(t){
   var o = this;
   if(EFormLink.Form == t){
      return this._formName;
   }else if(EFormLink.Table == t){
      return this.name;
   }
   RMessage.fatal(o, null, 'Form link is invalid. (type={0})', t);
}
MO.FDuiGridControl_getHeadMode = function FDuiGridControl_getHeadMode(e){
   var o = this;
   var p = RHtml.point(o._hHeadForm);
   var x = e.srcElement.offsetLeft + e.x - p.x;
   var cs = o._columns;
   for(var n = 0; n<cs.count; n++){
      var c = cs.value(n);
      if(c.dispSize){
         var l = c._hPanel.offsetLeft + c._hPanel.offsetWidth - p.x;
         o.hoverCellLength = c._hPanel.offsetWidth;
         if(l - 6 <= x && x<=l){
            o.hoverHead = c;
            return EGridColumn.Size;
         }
      }
   }
   return EGridColumn.None;
}
MO.FDuiGridControl_getRowBar = function FDuiGridControl_getRowBar(){
   var o = this;
   var rb = o._rowBar;
   if(!rb){
      rb = o._rowBar = MO.Class.create(FDuiGridRowControlBar);
      rb.table = o;
      rb.psBuild(o.hBorderPanel);
   }
   return rb;
}
MO.FDuiGridControl_calculateDataSize = function FDuiGridControl_calculateDataSize(){
   var o = this;
   var r = o._dataRect;
   if(!r){
      r = o._dataRect = new TRect();
   }
   var hcfh = o.hTitleForm ? o.hTitleForm.offsetHeight : 0;
   var hfph = o._hFixPanel ? o._hFixPanel.offsetHeight : 0;
   r.left = 0;
   r.top = hfph + hcfh;
   r.setWidth(o.hBorderPanel.offsetWidth);
   r.setHeight(o.hBorderPanel.offsetHeight - hcfh - hfph);
   return r;
}
MO.FDuiGridControl_hasVisibleRow = function FDuiGridControl_hasVisibleRow() {
   var o = this;
   var rs = o._rows;
   for(var n = 0; n<rs.count; n++){
      var rt = rs.get(n);
      if(rt._visible){
         return true;
      }
   }
   return false;
}
MO.FDuiGridControl_getCurrentRow = function FDuiGridControl_getCurrentRow(){
   var c = this._focusCell;
   if(c){
      return c.row.saveRow();
   }
}
MO.FDuiGridControl_getSelectedRow = function FDuiGridControl_getSelectedRow(){
   var rs = this._rows;
   var c = rs.count;
   for(var n=0; n<c; n++){
      var r = rs.get(n);
      if(r.isSelect){
         return r;
      }
   }
}
MO.FDuiGridControl_getSelectedRows = function FDuiGridControl_getSelectedRows(){
   var ls = new TList();
   var rs = this._rows;
   var c = rs.count;
   for(var n=0; n<c; n++){
      var r = rs.get(n);
      if(r.isSelect && r.isVisible()){
         ls.push(r.saveRow());
      }
   }
   return ls;
}
MO.FDuiGridControl_getChangedRows = function FDuiGridControl_getChangedRows(){
   var ls = new TList();
   var rs = this._rows;
   var c = rs.count;
   for(var n=0; n<c; n++){
      var r = rs.get(n);
      if(r.isVisible()){
         if(r.isDataChanged()){
            ls.push(r.saveRow());
         }
      }
   }
   return ls;
}
MO.FDuiGridControl_getRows = function FDuiGridControl_getRows(){
   var ls = new TList();
   var rs = this._rows;
   var c = rs.count;
   for(var n=0; n<c; n++){
     var r = rs.get(n);
     if(r.isVisible()){
         ls.push(r.saveRow());
     }
   }
   return ls;
}
MO.FDuiGridControl_refreshSelected = function FDuiGridControl_refreshSelected(){
   var o = this;
   var cs = o._columns;
   var sc = cs.get('_select');
   sc.hSelected.checked = false;
   var rs = o._rows;
   var rc = rs.count;
   for(var n = 0; n < rc; n++){
      var r = rs.get(n);
      r.isSelect = false;
   }
}
MO.FDuiGridControl_clearSelectRow = function FDuiGridControl_clearSelectRow(row) {
   var o = this;
   row.select(false);
   o.refreshHint();
}
MO.FDuiGridControl_clearSelectRows = function FDuiGridControl_clearSelectRows() {
    var o = this;
    var rs = o._rows;
    for(var n = 0; n < rs.count; n++){
       rs.get(n).isSelect = false;
    }
    o.refreshHint();
}
MO.FDuiGridControl_setDataStatus = function FDuiGridControl_setDataStatus(r, s) {
   var o = this;
   r.dataStatus = s;
   o._statusColumn.setDataStatus(r, s);
}
MO.FDuiGridControl_dsInsert = function FDuiGridControl_dsInsert() {
}
MO.FDuiGridControl_dsUpdate = function FDuiGridControl_dsUpdate(r){
   var o = this;
   o.psMode(EMode.Update);
   o.dsFetch(true);
}
MO.FDuiGridControl_dsDelete = function FDuiGridControl_dsDelete() {
}
MO.FDuiGridControl_doSearch = function FDuiGridControl_doSearch(){
   var o = this;
   o.dsSearchs.clear();
   var cs = o._columns;
   for(var n=0; n<cs.count; n++){
      var c = cs.value(n);
      var v = c.searchValue();
      if(MO.Class.isClass(c, FColumnCalendar)){
         if(v){
            var si = new TSearchItem();
            si.set(c.dataName, v.value, ESearch.Date, v.format);
            o.dsSearchs.push(si);
         }
      }else{
         if(!MO.Lang.String.isEmpty(v)){
            var si = new TSearchItem();
            si.set(c.dataName, v, ESearch.Like);
            o.dsSearchs.push(si);
         }
      }
   }
   o.dsValues = o.toDeepAttributes();
   o.dsSearch();
}
MO.FDuiGridControl_focus = function FDuiGridControl_focus(){
   var o = this;
   RConsole.find(FFocusConsole).focusClass(MDataset, o);
}
MO.FDuiGridControl_pack = function FDuiGridControl_pack(){
   var o = this;
   var rfs = o._rows;
   var ct = rfs.count;
   var root = new TNode('Dataset');
   for(var n = 0; n < ct; n++){
      var r = rfs.get(n);
      if(r.isDataChanged()){
         var atts = r.toAttrs();
         var nd = new TNode('Row', atts)
         root.push(nd);
      }
   }
   return root;
}
MO.FDuiGridControl_setVisible = function FDuiGridControl_setVisible(v){
   var o = this;
   o.__base.FDuiContainer.setVisible.call(o, v);
   o.__base.MDuiHorizontal.setVisible.call(o, v);
}
MO.FDuiGridControl_setButtonVisible = function FDuiGridControl_setButtonVisible(n, v){
   var o = this;
   var b = o._buttons.get(n);
   if(b){
      b.setVisible(v);
   }
}
MO.FDuiGridControl_refreshStyle = function FDuiGridControl_refreshStyle(){
   var o = this;
   var rs = o._rows;
   var c = rs.count;
   for(var n=0; n<c; n++){
      rs.get(n).refreshStyle();
   }
}
MO.FDuiGridControl_dump = function FDuiGridControl_dump(s) {
   var o = this;
   s = RString.nvlStr(s);
   s.appendLine(RClass.name(o));
   var rs = o._rows;
   for(var n = 0; n < rs.count; n++) {
      s.appendLine(rs.get(n).dump());
   }
   return s;
}
MO.FDuiGridControl_storeValues = function FDuiGridControl_storeValues(a){
   var o = this;
   if(!a){
      a = new TAttributes();
   }
   var s = o.getSelectRows();
   if(s.count){
      if(1 != s.count){
         RMessage.fatal(o, 'Invalid selected rows. (count={0})', s.count);
      }
      s.get(0).toAttributes(a);
   }
   return a;
}
MO.FDuiGridControl_buildRows = function FDuiGridControl_buildRows(){
   var o = this;
   var rs = o._rows;
   if(!rs.count){
      var c = o._displayCount;
      for(var n = 0; n < c; n++){
         var r = MO.Class.create(FDuiGridRowControl);
         r.table = this;
         r.build();
         o._hRows.appendChild(r._hPanel);
         rs.push(r);
      }
   }
}
MO.FDuiGridControl_setStyleStatus = function FDuiGridControl_setStyleStatus(row, status) {
   var hRow = row._hPanel;
   if (hRow) {
      switch (status) {
         case EStyle.Normal:
            row.select(false);
            break;
         case EStyle.Select:
            row.select(true);
            break;
      }
   }
}
MO.FDuiGridControl_buildRow = function FDuiGridControl_buildRow(row) {
   var o = this;
   var cs = o._columns;
   for ( var n = 0; n < cs.count; n++) {
      var c = cs.value(n);
      var cell = c.createCell(row);
      if(c.dataName){
         cell.set(RString.nvl(row.get(c.dataName), c.dataDefault));
      }
      row.push(cell);
   }
   return row;
}
MO.FDuiGridControl_clearSelectAll = function FDuiGridControl_clearSelectAll() {
   var o = this;
   var cs = o._columns;
   var sc = cs.get('_select');
   sc.hSelected.checked = false;
}
MO.FDuiGridControl_appendRow = function FDuiGridControl_appendRow(row) {
   this._hRows.appendChild(row._hRow);
   this._rows.push(row);
}
MO.FDuiGridControl_deleteRow = function FDuiGridControl_deleteRow(r) {
   var o = this;
   r = RObject.nvl(r, o.selectedRow);
   if (!r) {
      return alert('Please select row.');
   }
   if (r.isExist()) {
      if (r.isDelete()) {
         r.doNormal();
         o.setDataStatus(r, EDataStatus.Unknown);
         o.setStyleStatus(r, EStyle.Select);
      } else {
         r.doDelete();
         o.setDataStatus(r, EDataStatus.Delete);
         o.setStyleStatus(r, EStyle.Delete);
      }
   } else {
      r.release();
   }
}
MO.FDuiGridControl_onColumnTreeService = function FDuiGridControl_onColumnTreeService(g){
   var o = this;
   var d = g.resultDatasets.get(g.path);
   var rs = d._rows;
   if(rs && rs.count > 0){
      var pr = o.focusRow;
      pr.extdStatus = true;
      pr.psResize();
      var idx = pr._hPanel.rowIndex + 1;
      for(var n = 0; n < rs.count; n++){
         var r = MO.Class.create(FDuiGridRowControl);
         r.table = o;
         pr.childRows.push(r);
         r.parentRow = pr;
         r.buildChild(o._hFixRows, o._hRows, idx + n);
         r.loadRow(rs.get(n));
      }
   }
}
MO.FDuiGridControl_getRowType = function FDuiGridControl_getRowType(){
   var o = this;
   var cs = o.components;
   var ct = cs.count;
   for(var n = 0; n < ct; n++){
      var c = cs.value(n);
      if(MO.Class.isClass(c, FDuiGridRowControlType)){
         return c;
      }
   }
}
MO.FDuiGridControl_onColumnTreeClick = function FDuiGridControl_onColumnTreeClick(s, e){
   var o = this;
   var c = o.getRowType();
   if(!c){
      return;
   }
   var r = s.row;
   if(r.childRows && r.childRows.count > 0){
      if(r.extended){
         r.hideChild();
      }else{
         r.showChild();
      }
      r.extended = !r.extended;
      if(r.extended){
         s.hImg.src = s.styleIconPath('Fold', FColumnTree);
      }else{
         s.hImg.src = s.styleIconPath('Expend', FColumnTree);
      }
   }else{
      o.focusRow = s.row;
      if(o.focusRow.row.get('ochd') == 'Y'){
         s.row.extended = true;
         s.hImg.src = s.styleIconPath('Fold', FColumnTree);
         var name = s.row.get('otyp');
         var tb = s.row.table;
         var rt = tb.component(name);
         var ds = o.topControl(MDataset);
         var g = new TDatasetFetchArg(ds.name, ds.formId, ds.dsPageSize, ds.dsPageIndex, null, null, o.fullPath(), rt.formResearch);
         ds.dsSearchs.clear();
         if(rt && rt.formWhere){
            var si = new TSearchItem();
            si.set(rt.dataName, rt.formWhere, ESearch.Source);
            ds.dsSearchs.push(si);
         }
         g.force = true;
         g.reset = true;
         g.searchs = ds.dsSearchs;
         var ats = new TAttributes();
         s.row.toDeepAttributes(ats);
         g.values = ats;
         g.callback = new TInvoke(o, o.onColumnTreeService);
         RConsole.find(FDatasetConsole).fetch(g);
      }
   }
}
MO.FDuiGridRow = function FDuiGridRow(o){
   o = MO.Class.inherits(this, o, MO.FDuiGridRowControl);
   o._hFixPanel   = null;
   o.onBuildPanel = MO.FDuiGridRow_onBuildPanel;
   o.setVisible   = MO.FDuiGridRow_setVisible;
   o.appendChild  = MO.FDuiGridRow_appendChild;
   o.dispose      = MO.FDuiGridRow_dispose;
   return o;
}
MO.FDuiGridRow_onBuildPanel = function FDuiGridRow_onBuildPanel(p){
   var o = this;
   o.__base.FDuiGridRowControl.onBuildPanel.call(o, p);
   o._hFixPanel = MO.Window.Builder.createTableRow(p, o.styleName('Panel'));
}
MO.FDuiGridRow_setVisible = function FDuiGridRow_setVisible(p){
   var o = this;
   o._visible = p;
   var h = o._hFixPanel;
   if(h){
      MO.Window.Html.displaySet(h, p);
   }
   var h = o._hPanel;
   if(h){
      MO.Window.Html.displaySet(h, p);
   }
}
MO.FDuiGridRow_appendChild = function FDuiGridRow_appendChild(p){
   var o = this;
   o.__base.FDuiGridRowControl.appendChild.call(o, p);
   var column = p._column;
   if(column._optionFixed){
      o._hFixPanel.appendChild(p._hPanel);
   }
}
MO.FDuiGridRow_dispose = function FDuiGridRow_dispose(){
   var o = this;
   o._hFixPanel = MO.Window.Html.free(o._hFixPanel);
   o.__base.FDuiGridRowControl.dispose.call(o);
}
MO.FDuiGridRow_select = function FDuiGridRow_select(v){
   var o = this;
   o.isSelect = v;
   var c = v ? EColor.RowSelect : EColor.Row;
   o._hFixPanel.style.backgroundColor = c;
   o.hPanel.style.backgroundColor = c;
   o.refreshStyle();
}
MO.FDuiGridRow_refreshSize = function FDuiGridRow_refreshSize(){
   this.hPanel.style.pixelHeight = this._hFixPanel.offsetHeight;
}
MO.FDuiGridRow_refreshStyle = function FDuiGridRow_refreshStyle(){
   var o = this;
   if(o.hPanel.offsetHeight > o._hFixPanel.offsetHeight){
      o._hFixPanel.style.pixelHeight = o.hPanel.offsetHeight;
   }else{
      o.hPanel.style.pixelHeight = o._hFixPanel.offsetHeight;
   }
   if(o.table.isLov){
      o._hFixPanel.style.cursor = 'hand';
   }
   o.__base.FDuiGridRowControl.refreshStyle.call(o);
}
MO.FDuiGridRowControl = function FDuiGridRowControl(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MUiDataContainer);
   o._table          = MO.Class.register(o, new MO.AGetSet('_table'));
   o._cells          = MO.Class.register(o, new MO.AGetter('_cells'));
   o._rows           = null;
   o._clearProcess   = null;
   o._resetProcess   = null;
   o._loadProcess    = null;
   o._saveProcess    = null;
   o._recordProcess  = null;
   o._statusCell     = null;
   o._statusSelect   = false;
   o.onBuildPanel    = MO.FDuiGridRowControl_onBuildPanel;
   o.onBuild         = MO.FDuiGridRowControl_onBuild;
   o.construct       = MO.FDuiGridRowControl_construct;
   o.testDataChanged = MO.FDuiGridRowControl_testDataChanged;
   o.setVisible      = MO.FDuiGridRowControl_setVisible;
   o.get             = MO.FDuiGridRowControl_get;
   o.set             = MO.FDuiGridRowControl_set;
   o.appendChild     = MO.FDuiGridRowControl_appendChild;
   o.cell            = MO.FDuiGridRowControl_cell;
   o.push            = MO.FDuiGridRowControl_push;
   o.select          = MO.FDuiGridRowControl_select;
   o.refreshStyle    = MO.FDuiGridRowControl_refreshStyle;
   o.loadDataRow     = MO.FDuiGridRowControl_loadDataRow;
   o.saveDataRow     = MO.FDuiGridRowControl_saveDataRow;
   return o;
}
MO.FDuiGridRowControl_onBuildPanel = function FDuiGridRowControl_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.Window.Builder.createTableRow(event, o.styleName('Panel'));
}
MO.FDuiGridRowControl_onBuild = function FDuiGridRowControl_onBuild(event){
   var o = this;
   o.__base.FDuiContainer.onBuild.call(o, event);
   var table = o._table;
   var hPanel = o._hPanel;
   var columns = table._columns;
   var columnCount = columns.count();
   for(var i = 0; i < columnCount; i++){
      var column = columns.at(i);
      var cell = column.createCell();
      o.push(cell);
   }
}
MO.FDuiGridRowControl_construct = function FDuiGridRowControl_construct(){
   var o = this;
   o.__base.FDuiContainer.construct.call(o);
   o._cells = new MO.TDictionary();
   o._rows = new MO.TObjects();
   o._clearProcess = new MO.TEventProcess(null, o, 'oeClearValue', MO.MUiEditValue);
   o._resetProcess = new MO.TEventProcess(null, o, 'oeResetValue', MO.MUiEditValue);
   o._loadProcess = new MO.TEventProcess(null, o, 'oeLoadValue', MO.MUiEditValue);
   o._saveProcess = new MO.TEventProcess(null, o, 'oeSaveValue', MO.MUiEditValue);
   o._recordProcess = new MO.TEventProcess(null, o, 'oeRecordValue', MO.MUiEditValue);
}
MO.FDuiGridRowControl_testDataChanged = function FDuiGridRowControl_testDataChanged(){
   var o = this;
   var cells = o._cells;
   var count = cells.count();
   for(var i = 0; i < count; i++){
      var cell = cells.at(i);
      if(cell.testDataChanged()){
         return true;
      }
   }
   return false;
}
MO.FDuiGridRowControl_setVisible = function FDuiGridRowControl_setVisible(visible){
   var o = this;
   o._visible = visible;
   var hPanel = o._hPanel;
   if(hPanel){
      MO.Window.Html.displaySet(hPanel, visible);
   }
}
MO.FDuiGridRowControl_get = function FDuiGridRowControl_get(name){
   return this._cells.get(name).get();
}
MO.FDuiGridRowControl_set = function FDuiGridRowControl_set(name, value){
   this._cells.get(name).set(value);
}
MO.FDuiGridRowControl_appendChild = function FDuiGridRowControl_appendChild(control){
   var o = this;
   o.__base.FDuiContainer.appendChild.call(o, control);
   var column = control.column();
   var fixed = column.optionFixed();
   if(!fixed){
      o._hPanel.appendChild(control._hPanel);
   }
}
MO.FDuiGridRowControl_cell = function FDuiGridRowControl_cell(index){
   return this._cells.value(index);
}
MO.FDuiGridRowControl_push = function FDuiGridRowControl_push(component){
   var o = this;
   o.__base.FDuiContainer.push.call(o, component);
   var column = component.column();
   component._row = o;
   o._cells.set(column._dataName, component);
   if(MO.Class.isClass(component, MO.FDuiCellStatus)){
      o._statusCell = component;
   }
}
MO.FDuiGridRowControl_select = function FDuiGridRowControl_select(value){
   var o = this;
   o._statusSelect = value;
   o._hPanel.style.backgroundColor = value ? EColor._rowselect : EColor.Row;
   o.refreshStyle();
}
MO.FDuiGridRowControl_refreshStyle = function FDuiGridRowControl_refreshStyle(){
   var o = this;
   var cells = o._cells;
   if(cells){
      var count = cells.count();
      for(var i = 0; i < count; i++){
         var cell = cells.at(i);
         cell.refreshStyle();
      }
   }
}
MO.FDuiGridRowControl_loadDataRow = function FDuiGridRowControl_loadDataRow(dataRow){
   var o = this;
   var event = new MO.SUiDispatchEvent(o, 'oeLoadDataRow', MO.FDuiCell);
   event.dataRow = dataRow;
   o.process(event);
   event.dispose();
}
MO.FDuiGridRowControl_saveDataRow = function FDuiGridRowControl_saveDataRow(dataRow){
   var o = this;
   var event = new MO.SUiDispatchEvent(o, 'oeSaveDataRow', MO.FDuiCell);
   event.dataRow = dataRow;
   o.process(event);
   event.dispose();
}
MO.FDuiGridRowControl_buildChildren = function FDuiGridRowControl_buildChildren(){
   var o = this;
   var t = o.table;
   var hfr = o.hFixPanel = hfp.insertRow(idx);
   hfr.className = o.style('Panel');
   var hr = o._hPanel = hp.insertRow(idx);
   hr.className = o.style('Panel');
   var cs = o.table.columns;
   var cc = cs.count;
   for(var n=0; n<cc; n++){
      var c = cs.value(n);
      var cl = c.createCell(o);
      if(c.dispFixed){
         hfr.appendChild(cl._hPanel);
      }else{
         hr.appendChild(cl._hPanel);
      }
      o._cells.set(c.dataName, cl);
   }
   o.doRefresh()
}
MO.FDuiGridRowControl_isVisible = function FDuiGridRowControl_isVisible(){
	var o = this;
	return o._visible;
}
MO.FDuiGridRowControl_getIndex = function FDuiGridRowControl_getIndex(){
   return this._hPanel.rowIndex;
}
MO.FDuiGridRowControl_getId = function FDuiGridRowControl_getId(){
   var c = this._cells.get('ouid');
   return c ? c.reget() : '';
}
MO.FDuiGridRowControl_getVersion = function FDuiGridRowControl_getVersion(){
   var c = this._cells.get('over');
   return c ? c.reget() : '';
}
MO.FDuiGridRowControl_getStatus = function FDuiGridRowControl_getStatus(){
   return this._statusCell;
}
MO.FDuiGridRowControl_reget = function FDuiGridRowControl_reget(n){
   return this._cells.get(n).reget();
}
MO.FDuiGridRowControl_loadValue = function FDuiGridRowControl_loadValue(v){
   this.loadRow(v);
}
MO.FDuiGridRowControl_saveValue = function FDuiGridRowControl_saveValue(v){
   this.saveRow(v);
}
MO.FDuiGridRowControl_recordValue = function FDuiGridRowControl_recordValue(){
   this.process(this._recordProcess);
}
MO.FDuiGridRowControl_toAttributes = function FDuiGridRowControl_toAttributes(v){
   this.saveRow(v);
}
MO.FDuiGridRowControl_toDeepAttributes = function FDuiGridRowControl_toDeepAttributes(r){
   var o = this;
   var ts = new TList();
   var p = o.table;
   while(p){
      if(p != o.table && MO.Class.isClass(p, MDataset)){
         ts.push(p);
      }
      if(!p.parent){
         break;
      }
      p = p.topControl(MDataset);
   }
   for(var n=ts.count-1; n>=0; n--){
      var m = ts.get(n);
      if(MO.Class.isClass(m, FForm)){
         m.toAttributes(r);
      }else if(MO.Class.isClass(m, FTable)){
         var rs = m.getSelectRows();
         if(1 != rs.count){
            return RMessage.fatal(o, 'Invalid selected rows. (count={0})', rs.count);
         }
         rs.get(0).toAttributes(r);
      }
   }
   o.toAttributes(r);
}
MO.FDuiGridRowControl_extend = function FDuiGridRowControl_extend(v){
   var o = this;
   var rs = o._rows;
   if(rs && rs.count){
      var rc = rs.count;
      for(var n=0; n<rc; n++){
         var r = rs.get(n);
         if(v){
            r.setVisible(true);
            r.extend(r.extended);
         }else{
            r.setVisible(false);
         }
         r.refresh();
      }
   }
   o.extended = v;
}
MO.FDuiGridRowControl_doInsert = function FDuiGridRowControl_doInsert(){
   var o = this;
   if(!o.row){
      o.row = new TRow();
   }
   o.status = ERowStatus.Insert;
   o.table.setDataStatus(o, ERowStatus.Insert);
}
MO.FDuiGridRowControl_doDelete = function FDuiGridRowControl_doDelete(){
   var o = this;
   o.status = ERowStatus.Delete;
   o.table.setDataStatus(o, ERowStatus.Delete);
}
MO.FDuiGridRowControl_refresh = function FDuiGridRowControl_refresh(){
   var o = this;
   o.table.setDataStatus(o, o.testDataChanged() ? ERowStatus.Changed : ERowStatus.Normal);
}
MO.FDuiTable = function FDuiTable(o) {
   o = MO.Class.inherits(this, o, MO.FDuiGridControl);
   o._detailFrameName  = MO.Class.register(o, new MO.APtyString('_detailFrameName'));
   o._styleFixPanel    = MO.Class.register(o, new MO.AStyle('_styleFixPanel'));
   o._styleFixForm     = MO.Class.register(o, new MO.AStyle('_styleFixForm'));
   o._styleHeadPanel   = MO.Class.register(o, new MO.AStyle('_styleHeadPanel'));
   o._styleHeadForm    = MO.Class.register(o, new MO.AStyle('_styleHeadForm'));
   o._styleColumnPanel = MO.Class.register(o, new MO.AStyle('_styleColumnPanel'));
   o._styleColumnForm  = MO.Class.register(o, new MO.AStyle('_styleColumnForm'));
   o._styleDataPanel   = MO.Class.register(o, new MO.AStyle('_styleDataPanel'));
   o._styleDataForm    = MO.Class.register(o, new MO.AStyle('_styleDataForm'));
   o._hFixPanel        = null;
   o._hFixForm         = null;
   o._hHeadPanel       = null;
   o._hHeadForm        = null;
   o._hColumnPanel     = null;
   o._hColumnForm      = null;
   o._hDataPanel       = null;
   o._hDataForm        = null;
   o.onBuildContent    = MO.FDuiTable_onBuildContent;
   o.oeRefresh         = MO.FDuiTable_oeRefresh;
   o.oeResize          = MO.FDuiTable_oeResize;
   o.appendColumn      = MO.FDuiTable_appendColumn;
   return o;
}
MO.FDuiTable_onBuildContent = function FDuiTable_onBuildContent(event){
   var o = this;
   var hContentPanel = o._hContentPanel;
   var hFixPanel = o._hFixPanel = MO.Window.Builder.appendDiv(hContentPanel, o.styleName('FixPanel'));
   var hFixForm = o._hFixForm = MO.Window.Builder.appendTable(hFixPanel, o.styleName('FixForm'));
   hFixForm.borderColorLight = '#D0D0D0';
   hFixForm.borderColorDark = '#EEEEEE';
   o._hFixHead =  MO.Window.Builder.appendTableRow(hFixForm);
   o._hFixHead.style.height = '28px';
   o._hFixSearch = MO.Window.Builder.appendTableRow(hFixForm);
   o._hFixSearch.style.height = '22px';
   o._hFixTotal = MO.Window.Builder.appendTableRow(hFixForm);
   o._hFixTotal.style.display = 'none';
   o._hFixTotal.style.height = '22px';
   var hHeadPanel = o._hHeadPanel = MO.Window.Builder.appendDiv(hContentPanel, o.styleName('HeadPanel'));
   var hHeadForm = o._hHeadForm = MO.Window.Builder.appendTable(hHeadPanel, o.styleName('HeadForm'));
   hHeadForm.borderColorLight = '#D0D0D0';
   hHeadForm.borderColorDark = '#EEEEEE';
   o._hHead = MO.Window.Builder.appendTableRow(hHeadForm);
   o._hSearch = MO.Window.Builder.appendTableRow(hHeadForm);
   o._hTotal = MO.Window.Builder.appendTableRow(hHeadForm);
   o._hTotal.style.display = 'none';
   var hColumnPanel = o._hColumnPanel = MO.Window.Builder.appendDiv(hContentPanel, o.styleName('ColumnPanel'));
   var hColumnForm = o._hColumnForm = MO.Window.Builder.appendTable(hColumnPanel, o.styleName('ColumnForm'));
   o._hFixRows = MO.Window.Builder.append(hColumnForm, 'TBODY');
   o._hFixRowLine = MO.Window.Builder.append(o._hFixRows, 'TR');
   var hDataPanel = o._hDataPanel = MO.Window.Builder.appendDiv(hContentPanel, o.styleName('DataPanel'));
   var hDataForm = o._hDataForm = MO.Window.Builder.appendTable(hDataPanel, o.styleName('DataForm'));
   o._hRows = MO.Window.Builder.append(hDataForm, 'TBODY');
   o._hRowLine = MO.Window.Builder.append(o._hRows, 'TR');
   o.panelNavigator = true;
}
MO.FDuiTable_oeRefresh = function FDuiTable_oeRefresh(event){
   var o = this;
   o.__base.FDuiGridControl.oeRefresh.call(o, event);
   if(event.isAfter()){
      var hFixPanel = o._hFixPanel;
      var hHeadPanel = o._hHeadPanel;
      var hColumnPanel = o._hColumnPanel;
      var hDataPanel = o._hDataPanel;
      var fixWidth = hFixPanel.offsetWidth;
      var fixHeight = hFixPanel.offsetHeight;
      hColumnPanel.style.display = hDataPanel.style.display = 'none';
      var contentWidth = o._hContentPanel.offsetWidth;
      var contentHeight = o._hContentPanel.offsetHeight;
      hColumnPanel.style.display = hDataPanel.style.display = 'block';
      var hFixStyle = hFixPanel.style;
      hFixStyle.left = '0px';
      hFixStyle.top = '0px';
      var hHeadStyle = hHeadPanel.style;
      hHeadStyle.left = fixWidth + 'px';
      hHeadStyle.top = '0px';
      hHeadStyle.width = (contentWidth - fixWidth) + 'px';
      o._hHead.style.height = o._hFixHead.offsetHeight + 'px';
      o._hSearch.style.height = o._hFixSearch.offsetHeight + 'px';
      var hColumnStyle = hColumnPanel.style;
      hColumnStyle.top = fixHeight + 'px';
      hColumnStyle.width = fixWidth + 'px';
      hColumnStyle.height = (contentHeight - fixHeight) + 'px';
      var hDataStyle = hDataPanel.style;
      hDataStyle.left = '0px';
      hDataStyle.top = '0px';
      hDataStyle.width = (contentWidth - fixWidth) + 'px';
      hDataStyle.height = (contentHeight - fixHeight) + 'px';
      hDataStyle.paddingLeft = fixWidth + 'px';
      hDataStyle.paddingTop = fixHeight + 'px';
      var columnAuto = null;
      var dataWidth = contentWidth;
      var columns = o._columns;
      var columnCount = columns.count();
      for(var i = 0; i < columnCount; i++){
         var column = columns.at(i);
         var columnVisible = column.visible();
         if(columnVisible){
            if(column.dispAuto){
               if(columnAuto){
                  return MO.Message.fatal(o, 'Too many autosize column. (name1={1}, name2={2})', columnAuto.name, column.name);
               }
               columnAuto = column;
            }else{
               dataWidth -= column._hPanel.offsetWidth;
            }
         }
      }
      var rows = o._rows;
      var count = rows.count();
      for(var i = 0; i < count; i++){
         var row = rows.at(i);
         row._hPanel.style.height = row._hFixPanel.offsetHeight + 'px';
      }
   }
}
MO.FDuiTable_oeResize = function FDuiTable_oeResize(e){
   var o = this;
   var hPanel = o._hPanel;
   if(!hPanel.offsetWidth || !hPanel.offsetHeight){
      return;
   }
   return;
   var hp = o.border.hPanel;
   var hcf = o._hTitleForm;
   var hfp = o._hFixPanel;
   var hhp = o._hHeadPanel;
   var hcp = o._hColumnPanel;
   var hdp = o._hDataPanel;
   hhp.style.display = hcp.style.display = hdp.style.display = 'none';
   var ow = o._hBorderPanel.offsetWidth;
   var oh = o._hBorderPanel.offsetHeight;
   hhp.style.display = hcp.style.display = hdp.style.display = 'block';
   hhp.style.pixelWidth = ow - hfp.offsetWidth;
   hcp.style.pixelHeight = oh - hfp.offsetHeight - 1 - hcf.offsetHeight;
   hdp.style.pixelWidth = ow;
   hdp.style.pixelHeight = oh - hcf.offsetHeight;
   var rowCount = o._rows.count();
   for(var n = 0; n < rowCount; n++){
      var row = o._rows.at(n);
      row.refreshSize();
   }
   if(o.dpScrollLeft){
      hdp.scrollLeft = o.dpScrollLeft;
      o.dpScrollLeft = null;
   }
   MO.Console.find(MO.FEventConsole).push(o.eventResizeAfter);
   return EEventStatus.Stop;
}
MO.FDuiTable_appendColumn = function FDuiTable_appendColumn(column){
   var o = this;
   if(column._optionFixed){
      o._hFixHead.appendChild(column._hPanel);
      o._hFixSearch.appendChild(column._hSearchPanel);
      o._hFixTotal.appendChild(column._hTotalPanel);
      o._hFixRowLine.appendChild(column._hFixPanel);
   }else{
      o._hHead.appendChild(column._hPanel);
      o._hSearch.appendChild(column._hSearchPanel);
      o._hTotal.appendChild(column._hTotalPanel);
      o._hRowLine.appendChild(column._hFixPanel);
   }
}
MO.FDuiTable_onResizeAfter = function FDuiTable_onResizeAfter(){
   var o = this;
   var hdp = o._hDataPanel;
   var hfp = o._hFixPanel;
   var sw = RHtml.scrollWidth(hdp);
   var sh = RHtml.scrollHeight(hdp);
   o._hHeadPanel.style.pixelWidth = hdp.offsetWidth - hfp.offsetWidth - sw;
   o._hColumnPanel.style.pixelHeight = hdp.offsetHeight - hfp.offsetHeight - sh + 1;
}
MO.FDuiHistoryBar = function FDuiHistoryBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MDuiDescribeFrame);
   o._stylePanel           = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleMenuPanel       = MO.Class.register(o, new MO.AStyle('_styleMenuPanel'));
   o._styleGroupPanel      = MO.Class.register(o, new MO.AStyle('_styleGroupPanel'));
   o._buttons              = null;
   o._buttonPool           = null;
   o._listenersButtonClick = MO.Class.register(o, new MO.AListener('_listenersButtonClick'));
   o._hLine                 = null;
   o.onBuildPanel           = MO.FDuiHistoryBar_onBuildPanel;
   o.onEnter                = MO.Method.empty;
   o.onLeave                = MO.Method.empty;
   o.construct              = MO.FDuiHistoryBar_construct;
   o.appendChild            = MO.FDuiHistoryBar_appendChild;
   o.removeChild            = MO.FDuiHistoryBar_removeChild;
   o.historyPush            = MO.FDuiHistoryBar_historyPush;
   o.historyPop             = MO.FDuiHistoryBar_historyPop;
   o.historyClear           = MO.FDuiHistoryBar_historyClear;
   o.dispose                = MO.FDuiHistoryBar_dispose;
   return o;
}
MO.FDuiHistoryBar_onBuildPanel = function FDuiHistoryBar_onBuildPanel(event){
   var o = this;
   var hPanel = o._hPanel = MO.Window.Builder.createTable(event, o.styleName('Panel'));
   o._hLine = MO.Window.Builder.appendTableRow(hPanel);
}
MO.FDuiHistoryBar_construct = function FDuiHistoryBar_construct(){
   var o = this;
   o.__base.FDuiContainer.construct.call(o);
   o._buttons = new MO.TObjects();
   o._buttonPool = MO.Class.create(MO.FObjectPool);
}
MO.FDuiHistoryBar_appendChild = function FDuiHistoryBar_appendChild(control){
   var o = this;
   o.__base.FDuiContainer.appendChild.call(o, control);
   if(MO.Class.isClass(control, MO.FDuiHistoryButton)){
      o._hLine.appendChild(control._hSplit);
      o._hLine.appendChild(control._hPanel);
   }
}
MO.FDuiHistoryBar_removeChild = function FDuiHistoryBar_removeChild(control){
   var o = this;
   if(MO.Class.isClass(control, MO.FDuiHistoryButton)){
      o._hLine.removeChild(control._hSplit);
      o._hLine.removeChild(control._hPanel);
   }
   o.__base.FDuiContainer.removeChild.call(o, control);
}
MO.FDuiHistoryBar_historyPush = function FDuiHistoryBar_historyPush(){
   var o = this;
   var button = o._buttonPool.alloc();
   if(!button){
      button = MO.Class.create(MO.FDuiHistoryButton);
      button.setParent(o);
      button.build(o);
   }
   o.appendChild(button);
   if(o._buttons.isEmpty()){
      button._hSplit.innerHTML = '';
   }else{
      button._hSplit.innerHTML = '>';
   }
   o._buttons.push(button);
   return button;
}
MO.FDuiHistoryBar_historyPop = function FDuiHistoryBar_historyPop(button){
   var o = this;
   var buttons = o._buttons;
   var count = buttons.count();
   if(count > 1){
      if(!button){
         button = buttons.last();
      }
      for(var i = count - 1; i >= 0; i--){
         var findButton = buttons.at(i);
         o.removeChild(button);
         buttons.remove(findButton);
         o._buttonPool.free(findButton);
         if(findButton == button){
            break;
         }
      }
   }
   return buttons.last();
}
MO.FDuiHistoryBar_historyClear = function FDuiHistoryBar_historyClear(){
   var o = this;
   var buttons = o._buttons;
   var count = buttons.count();
   for(var i = count - 1; i >= 0; i--){
      var button = buttons.at(i);
      o.removeChild(button);
      o._buttonPool.free(button);
   }
   buttons.clear();
}
MO.FDuiHistoryBar_dispose = function FDuiHistoryBar_dispose(){
   var o = this;
   o._buttons = MO.Lang.Object.dispose(o._buttons);
   o._buttonPool = MO.Lang.Object.dispose(o._buttonPool);
   o._hLine = MO.Window.Html.free(o._hLine);
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiHistoryButton = function FDuiHistoryButton(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MO.MUiMenuButton);
   o._icon            = MO.Class.register(o, [new MO.APtyString('_icon'), new MO.AGetter('_icon')]);
   o._iconDisable     = MO.Class.register(o, [new MO.APtyString('_iconDisable'), new MO.AGetter('_iconDisable')]);
   o._hotkey          = MO.Class.register(o, [new MO.APtyString('_hotkey'), new MO.AGetter('_hotkey')]);
   o._action          = MO.Class.register(o, [new MO.APtyString('_action'), new MO.AGetter('_action')]);
   o._styleNormal     = MO.Class.register(o, new MO.AStyle('_styleNormal'));
   o._styleHover      = MO.Class.register(o, new MO.AStyle('_styleHover'));
   o._stylePress      = MO.Class.register(o, new MO.AStyle('_stylePress'));
   o._styleDisable    = MO.Class.register(o, new MO.AStyle('_styleDisable'));
   o._styleIconPanel  = MO.Class.register(o, new MO.AStyle('_styleIconPanel'));
   o._styleSpacePanel = MO.Class.register(o, new MO.AStyle('_styleSpacePanel'));
   o._styleLabelPanel = MO.Class.register(o, new MO.AStyle('_styleLabelPanel'));
   o._disabled        = false;
   o._listenersClick  = MO.Class.register(o, new MO.AListener('_listenersClick', MO.EEvent.Click));
   o._hForm           = null;
   o._hLine           = null;
   o._hIconPanel      = null;
   o._hIcon           = null;
   o._hSpacePanel     = null;
   o._hLabelPanel     = null;
   o.onBuildPanel     = MO.FDuiHistoryButton_onBuildPanel
   o.onBuild          = MO.FDuiHistoryButton_onBuild;
   o.onEnter          = MO.FDuiHistoryButton_onEnter;
   o.onLeave          = MO.FDuiHistoryButton_onLeave;
   o.onMouseDown      = MO.Class.register(o, new MO.AEventMouseDown('onMouseDown'), MO.FDuiHistoryButton_onMouseDown);
   o.onMouseUp        = MO.Class.register(o, new MO.AEventMouseDown('onMouseUp'), MO.FDuiHistoryButton_onMouseUp);
   o.construct        = MO.FDuiHistoryButton_construct;
   o.setIcon          = MO.FDuiHistoryButton_setIcon;
   o.setLabel         = MO.FDuiHistoryButton_setLabel;
   o.setHint          = MO.FDuiHistoryButton_setHint;
   o.setEnable        = MO.FDuiHistoryButton_setEnable;
   o.click            = MO.FDuiHistoryButton_click;
   o.dispose          = MO.FDuiHistoryButton_dispose;
   return o;
}
MO.FDuiHistoryButton_onBuildPanel = function FDuiHistoryButton_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.Window.Builder.createTableCell(event, o.styleName('Normal'));
   var hSplit = o._hSplit = MO.Window.Builder.createTableCell(event);
   hSplit.innerHTML = '>';
   hSplit.style.fontSize = '22px';
}
MO.FDuiHistoryButton_onBuild = function FDuiHistoryButton_onBuild(event){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, event);
   var hPanel = o._hPanel;
   o.attachEvent('onMouseDown', hPanel);
   o.attachEvent('onMouseUp', hPanel);
   var hForm = o._hForm = MO.Window.Builder.appendTable(hPanel);
   var hLine = o._hLine = MO.Window.Builder.appendTableRow(hForm);
   if(o._icon){
      var hIconPanel = o._hIconPanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('IconPanel'));
      o._hIcon = MO.Window.Builder.appendIcon(hIconPanel, null, o._icon);
   }
   if(o._icon && o._label){
      o._hSpacePanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('SpacePanel'));
   }
   var hLabelPanel = o._hLabelPanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('LabelPanel'));
   hLabelPanel.noWrap = true;
   if(o._foreColor){
      hLabelPanel.style.color = o._foreColor;
   }
   o.setLabel(o._label);
   if(o._hotkey){
      MO.Console.find(MO.FKeyConsole).register(o._hotkey, o, o.onMouseDown);
   }
   if(o._hint){
      o.setHint(o._hint);
   }
}
MO.FDuiHistoryButton_onEnter = function FDuiHistoryButton_onEnter(p){
   var o = this;
   if(!o._disabled){
      o._hPanel.className = o.styleName('Hover');
   }
}
MO.FDuiHistoryButton_onLeave = function FDuiHistoryButton_onLeave(){
   var o = this;
   if(!o._disabled){
      o._hPanel.className = o.styleName('Normal');
   }
}
MO.FDuiHistoryButton_onMouseDown = function FDuiHistoryButton_onMouseDown(){
   var o = this;
   if(!o._disabled){
      o._hPanel.className = o.styleName('Press');
      o.click();
   }
}
MO.FDuiHistoryButton_onMouseUp = function FDuiHistoryButton_onMouseUp(){
   var o = this;
   if(!o._disabled){
      o._hPanel.className = o.styleName('Hover');
   }
}
MO.FDuiHistoryButton_construct = function FDuiHistoryButton_construct(){
   var o = this;
   o.__base.FDuiControl.construct.call(o);
   o._attributes = new MO.TAttributes();
}
MO.FDuiHistoryButton_setIcon = function FDuiHistoryButton_setIcon(icon){
   var o = this;
   o._icon = icon;
   if(o._hIcon){
      o._hIcon.src = o.styleIconPath(icon);
   }
}
MO.FDuiHistoryButton_setLabel = function FDuiHistoryButton_setLabel(label){
   var o = this;
   var text = MO.Lang.String.nvl(label);
   o._label = text;
   MO.Window.Html.textSet(o._hLabelPanel, text);
}
MO.FDuiHistoryButton_setHint = function FDuiHistoryButton_setHint(hint){
   var o = this;
   o._hint = hint;
   var text = MO.Lang.String.nvl(hint);
   if(o._hint){
      if(o._hotkey){
         text += ' [' + o._hotkey + ']';
      }
   }
   o._hPanel.title = text;
}
MO.FDuiHistoryButton_setEnable = function FDuiHistoryButton_setEnable(p){
   var o = this;
   o.__base.FDuiControl.setEnable.call(o, p);
   if(p){
      o._hPanel.className = o.style('Button');
      if(o._iconDisable && o._icon){
         o._hIcon.src = RRes._iconPath(o._icon);
      }
   }else{
      o._hPanel.className = o.style('Disable');
      if(o._iconDisable){
         o._hIcon.src = RRes._iconPath(o._iconDisable);
      }
   }
}
MO.FDuiHistoryButton_click = function FDuiHistoryButton_click(){
   var o = this;
   if(!o._disabled){
      var event = new MO.SEvent(o);
      o._parent.processButtonClickListener(event);
      event.dispose();
   }
}
MO.FDuiHistoryButton_dispose = function FDuiHistoryButton_dispose(){
   var o = this;
   o._hForm = MO.Window.Html.free(o._hForm);
   o._hLine = MO.Window.Html.free(o._hLine);
   o._hIconPanel = MO.Window.Html.free(o._hIconPanel);
   o._hIcon = MO.Window.Html.free(o._hIcon);
   o._hSpacePanel = MO.Window.Html.free(o._hSpacePanel);
   o._hLabelPanel = MO.Window.Html.free(o._hLabelPanel);
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiMenuBar = function FDuiMenuBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MDuiDescribeFrame);
   o._mergeCd          = MO.Class.register(o, new MO.APtyEnum('_mergeCd', null, MO.EUiMerge, MO.EUiMerge.Override));
   o._stylePanel       = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleButtonPanel = MO.Class.register(o, new MO.AStyle('_styleButtonPanel'));
   o._hLine            = null;
   o.onBuildPanel      = MO.FDuiMenuBar_onBuildPanel;
   o.onEnter           = MO.Method.empty;
   o.onLeave           = MO.Method.empty;
   o.appendChild       = MO.FDuiMenuBar_appendChild;
   o.removeChild       = MO.FDuiMenuBar_removeChild;
   o.dispose           = MO.FDuiMenuBar_dispose;
   return o;
}
MO.FDuiMenuBar_onBuildPanel = function FDuiMenuBar_onBuildPanel(p){
   var o = this;
   var h = o._hPanel = MO.Window.Builder.createTable(p, o.styleName('Panel'));
   o._hLine = MO.Window.Builder.appendTableRow(h);
}
MO.FDuiMenuBar_appendChild = function FDuiMenuBar_appendChild(control){
   var o = this;
   o.__base.FDuiContainer.appendChild.call(o, control);
   if(MO.Class.isClass(control, MO.MUiMenuButton)){
      var hLine = o._hLine;
      var hCell = MO.Window.Builder.appendTableCell(hLine, o.styleName('ButtonPanel'));
      hCell._hParentLine = hLine;
      control.setPanel(hCell);
   }
}
MO.FDuiMenuBar_removeChild = function FDuiMenuBar_removeChild(p){
   var o = this;
   if(MO.Class.isClass(p, FDuiMenuButton)){
      var hp = p._hParent;
      var hl = p._hParentLine;
      hl.removeChild(hp);
      p._hParentLine = null;
      p._hParent = null;
   }
   o.__base.FDuiContainer.removeChild.call(o, p);
}
MO.FDuiMenuBar_dispose = function FDuiMenuBar_dispose(){
   var o = this;
   o._hLine = MO.Window.Html.free(o._hLine);
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiMenuButton = function FDuiMenuButton(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MO.MUiMenuButton);
   o._icon            = MO.Class.register(o, new MO.APtyString('_icon'));
   o._iconDisable     = MO.Class.register(o, new MO.APtyString('_iconDisable'));
   o._hotkey          = MO.Class.register(o, new MO.APtyString('_hotkey'));
   o._action          = MO.Class.register(o, new MO.APtyString('_action'));
   o._styleNormal     = MO.Class.register(o, new MO.AStyle('_styleNormal'));
   o._styleHover      = MO.Class.register(o, new MO.AStyle('_styleHover'));
   o._stylePress      = MO.Class.register(o, new MO.AStyle('_stylePress'));
   o._styleDisable    = MO.Class.register(o, new MO.AStyle('_styleDisable'));
   o._styleIconPanel  = MO.Class.register(o, new MO.AStyle('_styleIconPanel'));
   o._styleSpacePanel = MO.Class.register(o, new MO.AStyle('_styleSpacePanel'));
   o._styleLabelPanel = MO.Class.register(o, new MO.AStyle('_styleLabelPanel'));
   o._disabled        = false;
   o._listenersClick  = MO.Class.register(o, new MO.AListener('_listenersClick', MO.EEvent.Click));
   o._hForm           = null;
   o._hLine           = null;
   o._hIconPanel      = null;
   o._hIcon           = null;
   o._hSpacePanel     = null;
   o._hLabelPanel     = null;
   o.onBuildPanel     = MO.FDuiMenuButton_onBuildPanel
   o.onBuild          = MO.FDuiMenuButton_onBuild;
   o.onEnter          = MO.FDuiMenuButton_onEnter;
   o.onLeave          = MO.FDuiMenuButton_onLeave;
   o.onMouseDown      = MO.Class.register(o, new MO.AEventMouseDown('onMouseDown'), MO.FDuiMenuButton_onMouseDown);
   o.onMouseUp        = MO.Class.register(o, new MO.AEventMouseDown('onMouseUp'), MO.FDuiMenuButton_onMouseUp);
   o.icon             = MO.FDuiMenuButton_icon;
   o.setIcon          = MO.FDuiMenuButton_setIcon;
   o.setLabel         = MO.FDuiMenuButton_setLabel;
   o.setHint          = MO.FDuiMenuButton_setHint;
   o.setEnable        = MO.FDuiMenuButton_setEnable;
   o.click            = MO.FDuiMenuButton_click;
   o.dispose          = MO.FDuiMenuButton_dispose;
   return o;
}
MO.FDuiMenuButton_onBuildPanel = function FDuiMenuButton_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.Window.Builder.createDiv(event, o.styleName('Normal'));
}
MO.FDuiMenuButton_onBuild = function FDuiMenuButton_onBuild(event){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, event);
   var hPanel = o._hPanel;
   o.attachEvent('onMouseDown', hPanel);
   o.attachEvent('onMouseUp', hPanel);
   var hForm = o._hForm = MO.Window.Builder.appendTable(hPanel);
   var hLine = o._hLine = MO.Window.Builder.appendTableRow(hForm);
   if(o._icon){
      var hc = o._hIconPanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('IconPanel'));
      o._hIcon = MO.Window.Builder.appendIcon(hc, null, o._icon);
   }
   if(o._icon && o._label){
      o._hSpacePanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('SpacePanel'));
   }
   if(o._label){
      var hLabelPanel = o._hLabelPanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('LabelPanel'));
      hLabelPanel.noWrap = true;
      o.setLabel(o._label);
   }
   if(o._hotkey){
   }
   if(o._hint){
      o.setHint(o._hint);
   }
}
MO.FDuiMenuButton_onEnter = function FDuiMenuButton_onEnter(p){
   var o = this;
   if(!o._disabled){
      o._hPanel.className = o.styleName('Hover');
   }
}
MO.FDuiMenuButton_onLeave = function FDuiMenuButton_onLeave(){
   var o = this;
   if(!o._disabled){
      o._hPanel.className = o.styleName('Normal');
   }
}
MO.FDuiMenuButton_onMouseDown = function FDuiMenuButton_onMouseDown(){
   var o = this;
   if(!o._disabled){
      o._hPanel.className = o.styleName('Press');
      o.click();
   }
}
MO.FDuiMenuButton_onMouseUp = function FDuiMenuButton_onMouseUp(){
   var o = this;
   if(!o._disabled){
      o._hPanel.className = o.styleName('Hover');
   }
}
MO.FDuiMenuButton_icon = function FDuiMenuButton_icon(){
   return this._icon;
}
MO.FDuiMenuButton_setIcon = function FDuiMenuButton_setIcon(icon){
   var o = this;
   o._icon = icon;
   if(o._hIcon){
      o._hIcon.src = o.styleIconPath(icon);
   }
}
MO.FDuiMenuButton_setLabel = function FDuiMenuButton_setLabel(label){
   var o = this;
   var text = MO.Lang.String.nvl(label);
   o._label = text;
   MO.Window.Html.textSet(o._hLabelPanel, text);
}
MO.FDuiMenuButton_setHint = function FDuiMenuButton_setHint(hint){
   var o = this;
   o._hint = hint;
   var text = MO.Lang.String.nvl(hint);
   if(o._hint){
      if(o._hotkey){
         text += ' [' + o._hotkey + ']';
      }
   }
   o._hPanel.title = text;
}
MO.FDuiMenuButton_setEnable = function FDuiMenuButton_setEnable(p){
   var o = this;
   o.__base.FDuiControl.setEnable.call(o, p);
   if(p){
      o._hPanel.className = o.style('Button');
      if(o._iconDisable && o._icon){
         o._hIcon.src = RRes._iconPath(o._icon);
      }
   }else{
      o._hPanel.className = o.style('Disable');
      if(o._iconDisable){
         o._hIcon.src = RRes._iconPath(o._iconDisable);
      }
   }
}
MO.FDuiMenuButton_click = function FDuiMenuButton_click(){
   var o = this;
   if(!o._disabled){
      MO.Console.find(MO.FDuiFocusConsole).blur();
      var event = new MO.SClickEvent(o);
      o.processClickListener(event);
      event.dispose();
      if(o._action){
         eval(o._action);
      }
   }
}
MO.FDuiMenuButton_dispose = function FDuiMenuButton_dispose(){
   var o = this;
   o._hForm = MO.Window.Html.free(o._hForm);
   o._hLine = MO.Window.Html.free(o._hLine);
   o._hIconPanel = MO.Window.Html.free(o._hIconPanel);
   o._hIcon = MO.Window.Html.free(o._hIcon);
   o._hSpacePanel = MO.Window.Html.free(o._hSpacePanel);
   o._hLabelPanel = MO.Window.Html.free(o._hLabelPanel);
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiMenuButtonMenu = function FDuiMenuButtonMenu(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl);
   o._action      = MO.Class.register(o, new MO.APtyString('action', null));
   o._target      = MO.Class.register(o, new MO.APtyString('target', null));
   o._page        = MO.Class.register(o, new MO.APtyString('page'));
   o._hotkey      = MO.Class.register(o, new MO.APtyString('hotkey'));
   o._method      = MO.Class.register(o, new MO.APtyString('method'));
   o._icon        = MO.Class.register(o, new MO.APtyString('icon', null));
   o._iconDisable = MO.Class.register(o, new MO.APtyString('iconDisable', null));
   o._attributes  = MO.Class.register(o, new MO.APtyString('attributes'));
   o._disabled    = false;
   o.hButton      = null;
   o.hButtonLine  = null;
   o.hButtonPanel = null;
   o.hIcon        = null;
   o.hText        = null;
   o.oeBuild      = MO.FDuiMenuButtonMenu_oeBuild;
   o.oeEnable     = MO.FDuiMenuButtonMenu_oeEnable;
   o.oeDisable    = MO.FDuiMenuButtonMenu_oeDisable;
   o.onBuildPanel = MO.FDuiMenuButtonMenu_onBuildPanel;
   o.onEnter      = MO.FDuiMenuButtonMenu_onEnter;
   o.onLeave      = MO.FDuiMenuButtonMenu_onLeave;
   o.onMouseDown  = MO.FDuiMenuButtonMenu_onMouseDown;
   o.onMouseUp    = MO.FDuiMenuButtonMenu_onMouseUp;
   o.onClick      = MO.FDuiMenuButtonMenu_onClick;
   o.construct    = MO.FDuiMenuButtonMenu_construct;
   o.dispose      = MO.FDuiMenuButtonMenu_dispose;
   return o;
}
MO.FDuiMenuButtonMenu_oeBuild = function FDuiMenuButtonMenu_oeBuild(event){
   var o = this;
   o.base.FDuiControl.oeBuild.call(o, event);
   var h = o.hPanel;
   o.hButton = MO.Window.Builder.appendTable(o.hPanel, o.style('Button'));
   o.linkClickEvent(o.hButton);
   var hLine = o.hButtonLine = o.hButton.insertRow();
   var hCel = hLine.insertCell();
   if(o._icon){
      o.hIcon = MO.Window.Builder.appendIcon(hCel, o._icon);
   }
   if(o.label){
      o.hLabel = MO.Window.Builder.appendText(hCel, (o.hIcon ? '&nbsp;' : '') + o.label);
      o.hLabel.className = o.style('Label');
   }
   return MO.EEventStatus.Stop;
}
MO.FDuiMenuButtonMenu_onBuildPanel = function FDuiMenuButtonMenu_onBuildPanel(){
   this.hPanel = MO.Window.Builder.create(null, 'DIV');
}
MO.FDuiMenuButtonMenu_oeEnable = function FDuiMenuButtonMenu_oeEnable(event){
   var o = this;
   o.base.FDuiControl.oeEnable.call(o, event);
   o.hPanel.className = o.style('Button');
   if(o._iconDisable && o._icon){
      o.hIcon.src = RRes._iconPath(o._icon);
   }
   return MO.EEventStatus.Stop;
}
MO.FDuiMenuButtonMenu_oeDisable = function FDuiMenuButtonMenu_oeDisable(event){
   var o = this;
   o.base.FDuiControl.oeDisable.call(o, event);
   o.hPanel.className = o.style('Disable');
   if(o._iconDisable){
      o.hIcon.src = RRes._iconPath(o._iconDisable);
   }
   return MO.EEventStatus.Stop;
}
MO.FDuiMenuButtonMenu_onEnter = function FDuiMenuButtonMenu_onEnter(){
   var o = this;
   if(!o._disabled){
      o.hPanel.className = o.style('Hover');
   }
}
MO.FDuiMenuButtonMenu_onLeave = function FDuiMenuButtonMenu_onLeave(){
   var o = this;
   if(!o._disabled){
      o.hPanel.className = o.style('Panel');
   }
}
MO.FDuiMenuButtonMenu_onMouseDown = function FDuiMenuButtonMenu_onMouseDown(){
   var o = this;
   if(!o._disabled){
      o.hPanel.className = o.style('Press');
   }
}
MO.FDuiMenuButtonMenu_onMouseUp = function FDuiMenuButtonMenu_onMouseUp(){
   var o = this;
   if(!o._disabled){
      o.hPanel.className = o.style('Hover');
   }
}
MO.FDuiMenuButtonMenu_onClick = function FDuiMenuButtonMenu_onClick(){
   var o = this;
   if(!o._disabled){
      MO.Console.find(MO.FFocusConsole).focus(o);
      if(o._action){
         eval(o._action);
      }
      if(o._page || o._method){
         var form = MO.Window.Html.form(o.hButton);
         var p = RPage.parse(o._page);
         if(o._method){
            p._action = o._method;
         }
         p.split(o._attributes);
         p.post(form, o._target);
      }
      o.processClick();
   }
}
MO.FDuiMenuButtonMenu_construct = function FDuiMenuButtonMenu_construct(){
   var o = this;
   o.base.FDuiControl.construct.call(o);
}
MO.FDuiMenuButtonMenu_dispose = function FDuiMenuButtonMenu_dispose(){
   var o = this;
   o.base.FDuiControl.dispose.call(o);
   o.hPanel = MO.Window.Html.free(o.hPanel);
   o.hButton = MO.Window.Html.free(o.hButton);
   o.hIcon = null;
   o.hButtonLine = null;
   o.hLabel = null;
}
MO.FDuiMenuButtonSplit = function FDuiMenuButtonSplit(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl);
   o._stylePanelHorizontal = MO.Class.register(o, new MO.AStyle('_stylePanelHorizontal'));
   o._stylePanelVertical   = MO.Class.register(o, new MO.AStyle('_stylePanelVertical'));
   o.onBuild               = MO.FDuiMenuButtonSplit_onBuild;
   return o;
}
MO.FDuiMenuButtonSplit_onBuild = function FDuiMenuButtonSplit_onBuild(event){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, event);
   var hPanel = o._hPanel;
   if(MO.Class.isClass(o._parent, MO.FDuiMenuBar)){
      hPanel.className = o.styleName('PanelVertical');
   }else{
      hPanel.className = o.styleName('PanelHorizontal');
   }
}
MO.FDuiPopupMenu = function FDuiPopupMenu(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MDuiPopup);
   o._stylePanel     = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleForm      = MO.Class.register(o, new MO.AStyle('_styleForm'));
   o._styleContainer = MO.Class.register(o, new MO.AStyle('_styleContainer'));
   o._styleLabel     = MO.Class.register(o, new MO.AStyle('_styleLabel'));
   o._styleButton    = MO.Class.register(o, new MO.AStyle('_styleButton'));
   o._opener         = null;
   o._visible        = false;
   o._statusVisible  = false;
   o._hContainer     = null;
   o._hLabel         = null;
   o._hButtonPanel   = null;
   o._hIcon          = null;
   o._hText          = null;
   o.onBuild         = MO.FDuiPopupMenu_onBuild;
   o.appendChild     = MO.FDuiPopupMenu_appendChild;
   o.show            = MO.FDuiPopupMenu_show;
   o.setVisible      = MO.FDuiPopupMenu_setVisible;
   o.testInRange     = MO.FDuiPopupMenu_testInRange;
   o.doBlur          = MO.FDuiPopupMenu_doBlur;
   o.dispose         = MO.FDuiPopupMenu_dispose;
   return o;
}
MO.FDuiPopupMenu_onBuild = function FDuiPopupMenu_onBuild(event){
   var o = this;
   o.__base.FDuiContainer.onBuild.call(o, event);
   var hPanel = o._hPanel;
   var hForm = o._hForm = MO.Window.Builder.appendTable(hPanel, o.styleName('Form'));
   var hLineTop = o._hLineTop = MO.Window.Builder.appendTableCell(hForm);
   hLineTop.bgColor = '#666666';
   hLineTop.height = '2px';
   var hContainerPanel = o._hContainerPanel = MO.Window.Builder.appendTableCell(hForm);
   var hLineBottom = o._hLineBottom = MO.Window.Builder.appendTableCell(hForm);
   hLineBottom.bgColor = '#666666';
   hLineBottom.height = '2px';
   var hContainer = o._hContainer = MO.Window.Builder.appendTable(hContainerPanel, o.styleName('Container'));
}
MO.FDuiPopupMenu_doBlur = function FDuiPopupMenu_doBlur(){
   var o = this;
}
MO.FDuiPopupMenu_appendChild = function FDuiPopupMenu_appendChild(control){
   var o = this;
   var hButtonPanel = MO.Window.Builder.appendTableRowCell(o._hContainer);
   hButtonPanel.className = o.styleName('Button');
   hButtonPanel.appendChild(control._hPanel);
}
MO.FDuiPopupMenu_show = function FDuiPopupMenu_show(h, positionCd, v){
   var o = this;
   var hPanel = o._hPanel;
   var opener = o._opener;
   o.setVisible(true);
   var hOpener = opener._hPanel;
   var openerWidth = hOpener.offsetWidth;
   var openerHeight = hOpener.offsetHeight;
   var width = hPanel.offsetWidth;
   var height = hPanel.offsetHeight;
   var style = hPanel.style;
   if(width < openerWidth){
      width = openerWidth;
   }
   if(height > 300){
      o._hContainerPanel.style.overflowY = 'scroll';
      style.height = height + 'px';
   }
   style.left = '3px';
   style.top = (openerHeight + 1) + 'px';
   style.width = width + 'px';
   style.zIndex = MO.RDuiLayer.next();
}
MO.FDuiPopupMenu_setVisible = function FDuiPopupMenu_setVisible(visible){
   var o = this;
   var opener = o._opener;
   o._statusVisible = visible;
   var hOpener = opener._hPanelCell;
   var hPanel = o.panel(MO.EPanel.Container);
   if(visible){
      hOpener.appendChild(hPanel);
   }else{
      hOpener.removeChild(hPanel);
   }
}
MO.FDuiPopupMenu_testInRange = function FDuiPopupMenu_testInRange(e){
   return this == RControl.htmlControl(e.srcElement, FDuiPopupMenu);
}
MO.FDuiPopupMenu_dispose = function FDuiPopupMenu_dispose(e){
   var o = this;
   o._hContainer = MO.Window.Html.free(o._hContainer);
   o._hPanel = MO.Window.Html.free(o._hPanel);
   o._hLabel = MO.Window.Html.free(o._hLabel);
   o._hLastRow = MO.Window.Html.free(o._hLastRow);
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiSliderButton = function FDuiSliderButton(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MO.MUiMenuButton);
   o._icon            = MO.Class.register(o, new MO.APtyString('_icon'));
   o._iconDisable     = MO.Class.register(o, new MO.APtyString('_iconDisable'));
   o._hotkey          = MO.Class.register(o, new MO.APtyString('_hotkey'));
   o._action          = MO.Class.register(o, new MO.APtyString('_action'));
   o._styleNormal     = MO.Class.register(o, new MO.AStyle('_styleNormal'));
   o._styleHover      = MO.Class.register(o, new MO.AStyle('_styleHover'));
   o._stylePress      = MO.Class.register(o, new MO.AStyle('_stylePress'));
   o._styleDisable    = MO.Class.register(o, new MO.AStyle('_styleDisable'));
   o._styleIconPanel  = MO.Class.register(o, new MO.AStyle('_styleIconPanel'));
   o._styleSpacePanel = MO.Class.register(o, new MO.AStyle('_styleSpacePanel'));
   o._styleLabelPanel = MO.Class.register(o, new MO.AStyle('_styleLabelPanel'));
   o._disabled        = false;
   o._listenersClick  = MO.Class.register(o, new MO.AListener('_listenersClick', MO.EEvent.Click));
   o._hForm           = null;
   o._hLine           = null;
   o._hIconPanel      = null;
   o._hIcon           = null;
   o._hSpacePanel     = null;
   o._hLabelPanel     = null;
   o.onBuildPanel     = MO.FDuiSliderButton_onBuildPanel
   o.onBuild          = MO.FDuiSliderButton_onBuild;
   o.onEnter          = MO.FDuiSliderButton_onEnter;
   o.onLeave          = MO.FDuiSliderButton_onLeave;
   o.onMouseDown      = MO.Class.register(o, new MO.AEventMouseDown('onMouseDown'), MO.FDuiSliderButton_onMouseDown);
   o.onMouseUp        = MO.Class.register(o, new MO.AEventMouseDown('onMouseUp'), MO.FDuiSliderButton_onMouseUp);
   o.icon             = MO.FDuiSliderButton_icon;
   o.setIcon          = MO.FDuiSliderButton_setIcon;
   o.setLabel         = MO.FDuiSliderButton_setLabel;
   o.setHint          = MO.FDuiSliderButton_setHint;
   o.setEnable        = MO.FDuiSliderButton_setEnable;
   o.click            = MO.FDuiSliderButton_click;
   o.dispose          = MO.FDuiSliderButton_dispose;
   return o;
}
MO.FDuiSliderButton_onBuildPanel = function FDuiSliderButton_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.Window.Builder.createDiv(event, o.styleName('Normal'));
}
MO.FDuiSliderButton_onBuild = function FDuiSliderButton_onBuild(event){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, event);
   var hPanel = o._hPanel;
   o.attachEvent('onMouseDown', hPanel);
   o.attachEvent('onMouseUp', hPanel);
   var hForm = o._hForm = MO.Window.Builder.appendTable(hPanel);
   var hLine = o._hLine = MO.Window.Builder.appendTableRow(hForm);
   if(o._icon){
      var hIconPanel = o._hIconPanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('IconPanel'));
      o._hIcon = MO.Window.Builder.appendIcon(hIconPanel, null, o._icon);
   }
   if(o._icon && o._label){
      o._hSpacePanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('SpacePanel'));
   }
   if(o._label){
      var hLabelPanel = o._hLabelPanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('LabelPanel'));
      hLabelPanel.noWrap = true;
      if(o._foreColor){
         hLabelPanel.style.color = o._foreColor;
      }
      o.setLabel(o._label);
   }
   if(o._hotkey){
      MO.Console.find(MO.FKeyConsole).register(o._hotkey, o, o.onMouseDown);
   }
   if(o._hint){
      o.setHint(o._hint);
   }
}
MO.FDuiSliderButton_onEnter = function FDuiSliderButton_onEnter(p){
   var o = this;
   if(!o._disabled){
      o._hPanel.className = o.styleName('Hover');
   }
}
MO.FDuiSliderButton_onLeave = function FDuiSliderButton_onLeave(){
   var o = this;
   if(!o._disabled){
      o._hPanel.className = o.styleName('Normal');
   }
}
MO.FDuiSliderButton_onMouseDown = function FDuiSliderButton_onMouseDown(){
   var o = this;
   if(!o._disabled){
      o._hPanel.className = o.styleName('Press');
      o.click();
   }
}
MO.FDuiSliderButton_onMouseUp = function FDuiSliderButton_onMouseUp(){
   var o = this;
   if(!o._disabled){
      o._hPanel.className = o.styleName('Hover');
   }
}
MO.FDuiSliderButton_icon = function FDuiSliderButton_icon(){
   return this._icon;
}
MO.FDuiSliderButton_setIcon = function FDuiSliderButton_setIcon(icon){
   var o = this;
   o._icon = icon;
   if(o._hIcon){
      o._hIcon.src = o.styleIconPath(icon);
   }
}
MO.FDuiSliderButton_setLabel = function FDuiSliderButton_setLabel(label){
   var o = this;
   var text = MO.Lang.String.nvl(label);
   o._label = text;
   MO.Window.Html.textSet(o._hLabelPanel, text);
}
MO.FDuiSliderButton_setHint = function FDuiSliderButton_setHint(hint){
   var o = this;
   o._hint = hint;
   var text = MO.Lang.String.nvl(hint);
   if(o._hint){
      if(o._hotkey){
         text += ' [' + o._hotkey + ']';
      }
   }
   o._hPanel.title = text;
}
MO.FDuiSliderButton_setEnable = function FDuiSliderButton_setEnable(p){
   var o = this;
   o.__base.FDuiControl.setEnable.call(o, p);
   if(p){
      o._hPanel.className = o.style('Button');
      if(o._iconDisable && o._icon){
         o._hIcon.src = RRes._iconPath(o._icon);
      }
   }else{
      o._hPanel.className = o.style('Disable');
      if(o._iconDisable){
         o._hIcon.src = RRes._iconPath(o._iconDisable);
      }
   }
}
MO.FDuiSliderButton_click = function FDuiSliderButton_click(){
   var o = this;
   if(!o._disabled){
      MO.Console.find(MO.FDuiFocusConsole).blur();
      var event = new MO.SClickEvent(o);
      o.processClickListener(event);
      event.dispose();
      if(o._action){
         eval(o._action);
      }
   }
}
MO.FDuiSliderButton_dispose = function FDuiSliderButton_dispose(){
   var o = this;
   o._hForm = MO.Window.Html.free(o._hForm);
   o._hLine = MO.Window.Html.free(o._hLine);
   o._hIconPanel = MO.Window.Html.free(o._hIconPanel);
   o._hIcon = MO.Window.Html.free(o._hIcon);
   o._hSpacePanel = MO.Window.Html.free(o._hSpacePanel);
   o._hLabelPanel = MO.Window.Html.free(o._hLabelPanel);
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiSliderGroup = function FDuiSliderGroup(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer);
   o._mergeCd          = MO.Class.register(o, new MO.APtyEnum('_mergeCd', null, MO.EUiMerge, MO.EUiMerge.Override));
   o._stylePanel       = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleButtonPanel = MO.Class.register(o, new MO.AStyle('_styleButtonPanel'));
   o._styleIconPanel   = MO.Class.register(o, new MO.AStyle('_styleIconPanel'));
   o._styleSpacePanel  = MO.Class.register(o, new MO.AStyle('_styleSpacePanel'));
   o._styleLabelPanel  = MO.Class.register(o, new MO.AStyle('_styleLabelPanel'));
   o._hLine            = null;
   o.onBuildPanel      = MO.FDuiSliderGroup_onBuildPanel;
   o.onBuild           = MO.FDuiSliderGroup_onBuild;
   o.onEnter           = MO.Method.empty;
   o.onLeave           = MO.Method.empty;
   o.setIcon           = MO.FDuiSliderGroup_setIcon;
   o.setLabel          = MO.FDuiSliderGroup_setLabel;
   o.appendChild       = MO.FDuiSliderGroup_appendChild;
   o.removeChild       = MO.FDuiSliderGroup_removeChild;
   o.dispose           = MO.FDuiSliderGroup_dispose;
   return o;
}
MO.FDuiSliderGroup_onBuildPanel = function FDuiSliderGroup_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.Window.Builder.createTable(p, o.styleName('Panel'));
}
MO.FDuiSliderGroup_onBuild = function FDuiSliderGroup_onBuild(event){
   var o = this;
   o.__base.FDuiContainer.onBuild.call(o, event);
   var hCell = MO.Window.Builder.appendTableRowCell(o._hPanel, o.styleName('ButtonPanel'));
   var hForm = o._hForm = MO.Window.Builder.appendTable(hCell);
   var hLine = o._hLine = MO.Window.Builder.appendTableRow(hForm);
   if(o._icon){
      var hc = o._hIconPanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('IconPanel'));
      o._hIcon = MO.Window.Builder.appendIcon(hc, null, o._icon);
   }
   if(o._icon && o._label){
      o._hSpacePanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('SpacePanel'));
   }
   if(o._label){
      var hLabelPanel = o._hLabelPanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('LabelPanel'));
      hLabelPanel.noWrap = true;
      if(o._foreColor){
         hLabelPanel.style.color = o._foreColor;
      }
      o.setLabel(o._label);
   }
   if(o._hotkey){
      MO.Console.find(MO.FKeyConsole).register(o._hotkey, o, o.onMouseDown);
   }
   if(o._hint){
      o.setHint(o._hint);
   }
}
MO.FDuiSliderGroup_setIcon = function FDuiSliderGroup_setIcon(icon){
   var o = this;
   o._icon = icon;
   if(o._hIcon){
      o._hIcon.src = o.styleIconPath(icon);
   }
}
MO.FDuiSliderGroup_setLabel = function FDuiSliderGroup_setLabel(label){
   var o = this;
   var text = MO.Lang.String.nvl(label);
   o._label = text;
   MO.Window.Html.textSet(o._hLabelPanel, text);
}
MO.FDuiSliderGroup_appendChild = function FDuiSliderGroup_appendChild(control){
   var o = this;
   o.__base.FDuiContainer.appendChild.call(o, control);
   if(MO.Class.isClass(control, MO.FDuiSliderButton)){
      var hCell = MO.Window.Builder.appendTableRowCell(o._hPanel, o.styleName('ButtonPanel'));
      control.setPanel(hCell);
   }
}
MO.FDuiSliderGroup_removeChild = function FDuiSliderGroup_removeChild(p){
   var o = this;
   if(MO.Class.isClass(p, FDuiSliderButton)){
      var hp = p._hParent;
      var hl = p._hParentLine;
      hl.removeChild(hp);
      p._hParentLine = null;
      p._hParent = null;
   }
   o.__base.FDuiContainer.removeChild.call(o, p);
}
MO.FDuiSliderGroup_dispose = function FDuiSliderGroup_dispose(){
   var o = this;
   o._hLine = MO.Window.Html.free(o._hLine);
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiSliderMenu = function FDuiSliderMenu(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MDuiDescribeFrame);
   o._mergeCd          = MO.Class.register(o, new MO.APtyEnum('_mergeCd', null, MO.EUiMerge, MO.EUiMerge.Override));
   o._stylePanel       = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleMenuPanel   = MO.Class.register(o, new MO.AStyle('_styleMenuPanel'));
   o._styleGroupPanel  = MO.Class.register(o, new MO.AStyle('_styleGroupPanel'));
   o._hLine            = null;
   o.onBuildPanel      = MO.FDuiSliderMenu_onBuildPanel;
   o.onEnter           = MO.Method.empty;
   o.onLeave           = MO.Method.empty;
   o.appendChild       = MO.FDuiSliderMenu_appendChild;
   o.removeChild       = MO.FDuiSliderMenu_removeChild;
   o.dispose           = MO.FDuiSliderMenu_dispose;
   return o;
}
MO.FDuiSliderMenu_onBuildPanel = function FDuiSliderMenu_onBuildPanel(event){
   var o = this;
   var hPanel = o._hPanel = MO.Window.Builder.createTable(event, o.styleName('Panel'));
   var hMenuPanel = o._hMenuPanel = MO.Window.Builder.appendTableRowCell(hPanel, o.styleName('MenuPanel'));
   hMenuPanel.align = 'center';
   MO.Window.Builder.appendIcon(hMenuPanel, null, 'editor.design.menuv|png');
}
MO.FDuiSliderMenu_appendChild = function FDuiSliderMenu_appendChild(control){
   var o = this;
   o.__base.FDuiContainer.appendChild.call(o, control);
   if(MO.Class.isClass(control, MO.FDuiSliderGroup)){
      var hLine = o._hLine;
      var hCell = MO.Window.Builder.appendTableRowCell(o._hPanel, o.styleName('GroupPanel'));
      control.setPanel(hCell);
   }
}
MO.FDuiSliderMenu_removeChild = function FDuiSliderMenu_removeChild(p){
   var o = this;
   if(MO.Class.isClass(p, MO.FDuiSliderGroup)){
      var hp = p._hParent;
      var hl = p._hParentLine;
      hl.removeChild(hp);
   }
   o.__base.FDuiContainer.removeChild.call(o, p);
}
MO.FDuiSliderMenu_dispose = function FDuiSliderMenu_dispose(){
   var o = this;
   o._hLine = MO.Window.Html.free(o._hLine);
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiToolBar = function FDuiToolBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MDuiDescribeFrame);
   o._alignCd          = MO.Class.register(o, new MO.APtyEnum('_alignCd', null, MO.EUiAlign, MO.EUiAlign.Left));
   o._directionCd      = MO.Class.register(o, new MO.APtyEnum('_directionCd', null, MO.EUiDirection, MO.EUiDirection.Horizontal));
   o._mergeCd          = MO.Class.register(o, new MO.APtyEnum('_mergeCd', null, MO.EUiMerge, MO.EUiMerge.Override));
   o._stylePanel       = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleButtonPanel = MO.Class.register(o, new MO.AStyle('_styleButtonPanel'));
   o._hLine            = null;
   o.onBuildPanel      = MO.FDuiToolBar_onBuildPanel;
   o.onEnter           = MO.Method.empty;
   o.onLeave           = MO.Method.empty;
   o.appendChild       = MO.FDuiToolBar_appendChild;
   o.removeChild       = MO.FDuiToolBar_removeChild;
   o.dispose           = MO.FDuiToolBar_dispose;
   return o;
}
MO.FDuiToolBar_onBuildPanel = function FDuiToolBar_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.Window.Builder.createTable(p, o.styleName('Panel'));
}
MO.FDuiToolBar_appendChild = function FDuiToolBar_appendChild(control){
   var o = this;
   o.__base.FDuiContainer.appendChild.call(o, control);
   if(MO.Class.isClass(control, MO.MUiToolButton)){
      var h = o._hPanel;
      var hl = o._hLine;
      if(o._directionCd == MO.EUiDirection.Horizontal){
         if(!hl){
            hl = o._hLine = MO.Window.Builder.appendTableRow(h);
         }
      }
      if(o._directionCd == MO.EUiDirection.Vertical){
         hl = o._hLine = MO.Window.Builder.appendTableRow(h);
      }
      var hc = MO.Window.Builder.appendTableCell(hl, o.styleName('ButtonPanel'));
      control._hPanelCell = hc;
      control.setPanel(hc);
   }
}
MO.FDuiToolBar_removeChild = function FDuiToolBar_removeChild(p){
   var o = this;
   if(MO.Class.isClass(p, MO.MUiToolButton)){
      var hp = p._hParent;
      var hl = p._hParentLine;
      hl.removeChild(hp);
      p._hParent = null;
      p._hParentLine = null;
   }
   o.__base.FDuiContainer.removeChild.call(o, p);
}
MO.FDuiToolBar_dispose = function FDuiToolBar_dispose(){
   var o = this;
   o._hLine = MO.Window.Html.free(o._hLine);
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiToolButton = function FDuiToolButton(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MO.MUiToolButton);
   o._icon            = MO.Class.register(o, [new MO.APtyString('_icon'), new MO.AGetter('_icon')]);
   o._iconDisable     = MO.Class.register(o, [new MO.APtyString('_iconDisable'), new MO.AGetter('_iconDisable')]);
   o._hotkey          = MO.Class.register(o, [new MO.APtyString('_hotkey'), new MO.AGetter('_hotkey')]);
   o._action          = MO.Class.register(o, [new MO.APtyString('_action'), new MO.AGetter('_action')]);
   o._stylePanel      = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleNormal     = MO.Class.register(o, new MO.AStyle('_styleNormal'));
   o._styleHover      = MO.Class.register(o, new MO.AStyle('_styleHover'));
   o._stylePress      = MO.Class.register(o, new MO.AStyle('_stylePress'));
   o._styleDisable    = MO.Class.register(o, new MO.AStyle('_styleDisable'));
   o._styleIconPanel  = MO.Class.register(o, new MO.AStyle('_styleIconPanel'));
   o._styleSpacePanel = MO.Class.register(o, new MO.AStyle('_styleSpacePanel'));
   o._styleLabelPanel = MO.Class.register(o, new MO.AStyle('_styleLabelPanel'));
   o._disabled        = false;
   o._listenersClick  = MO.Class.register(o, new MO.AListener('_listenersClick', MO.EEvent.Click));
   o._hForm           = null;
   o._hLine           = null;
   o._hIconPanel      = null;
   o._hIcon           = null;
   o._hSpacePanel     = null;
   o._hLabelPanel     = null;
   o.onBuildPanel     = MO.FDuiToolButton_onBuildPanel;
   o.onBuildButton    = MO.FDuiToolButton_onBuildButton;
   o.onBuild          = MO.FDuiToolButton_onBuild;
   o.onEnter          = MO.FDuiToolButton_onEnter;
   o.onLeave          = MO.FDuiToolButton_onLeave;
   o.onMouseDown      = MO.Class.register(o, new MO.AEventMouseDown('onMouseDown'), MO.FDuiToolButton_onMouseDown);
   o.onMouseUp        = MO.Class.register(o, new MO.AEventMouseDown('onMouseUp'), MO.FDuiToolButton_onMouseUp);
   o.icon             = MO.FDuiToolButton_icon;
   o.setIcon          = MO.FDuiToolButton_setIcon;
   o.setLabel         = MO.FDuiToolButton_setLabel;
   o.setHint          = MO.FDuiToolButton_setHint;
   o.setEnable        = MO.FDuiToolButton_setEnable;
   o.doClick          = MO.FDuiToolButton_doClick;
   o.dispose          = MO.FDuiToolButton_dispose;
   return o;
}
MO.FDuiToolButton_onBuildPanel = function FDuiToolButton_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.Window.Builder.createDiv(event, o.styleName('Panel'));
}
MO.FDuiToolButton_onBuildButton = function FDuiToolButton_onBuildButton(event){
   var o = this;
   var hPanel = o._hPanel;
   o.attachEvent('onMouseDown', hPanel);
   o.attachEvent('onMouseUp', hPanel);
   var hForm = o._hForm = MO.Window.Builder.appendTable(hPanel, o.styleName('Normal'));
   var hLine = o._hLine = MO.Window.Builder.appendTableRow(hForm);
   if(o._icon){
      var hc = o._hIconPanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('IconPanel'));
      o._hIcon = MO.Window.Builder.appendIcon(hc, null, o._icon);
   }
   if(o._icon && o._label){
      o.hSpacePanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('SpacePanel'));
   }
   if(o._label){
      var hLabelPanel = o._hLabelPanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('LabelPanel'));
      hLabelPanel.noWrap = true;
      o.setLabel(o._label);
   }
   if(o._hotkey){
   }
   if(o._hint){
      o.setHint(o._hint);
   }
}
MO.FDuiToolButton_onBuild = function FDuiToolButton_onBuild(event){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, event);
   o.onBuildButton(event);
}
MO.FDuiToolButton_onEnter = function FDuiToolButton_onEnter(e){
   var o = this;
   if(!o._disabled){
      o._hForm.className = o.styleName('Hover');
   }
}
MO.FDuiToolButton_onLeave = function FDuiToolButton_onLeave(e){
   var o = this;
   if(!o._disabled){
      o._hForm.className = o.styleName('Normal');
   }
}
MO.FDuiToolButton_onMouseDown = function FDuiToolButton_onMouseDown(){
   var o = this;
   if(!o._disabled){
      o._hForm.className = this.styleName('Press');
      o.doClick();
   }
}
MO.FDuiToolButton_onMouseUp = function FDuiToolButton_onMouseUp(h){
   var o = this;
   if(!o._disabled){
      o._hForm.className = o.styleName('Hover');
   }
}
MO.FDuiToolButton_icon = function FDuiToolButton_icon(){
   return this._icon;
}
MO.FDuiToolButton_setIcon = function FDuiToolButton_setIcon(icon){
   var o = this;
   o._icon = icon;
   if(o._hIcon){
      o._hIcon.src = o.styleIconPath(icon);
   }
}
MO.FDuiToolButton_setLabel = function FDuiToolButton_setLabel(label){
   var o = this;
   var text = MO.Lang.String.nvl(label);
   o._label = text;
   var hLabelPanel = o._hLabelPanel;
   if(hLabelPanel){
      MO.Window.Html.textSet(hLabelPanel, text);
   }
}
MO.FDuiToolButton_setHint = function FDuiToolButton_setHint(hint){
   var o = this;
   o._hint = hint;
   var text = MO.Lang.String.nvl(hint);
   if(o._hint){
      if(o._hotkey){
         text += ' [' + o._hotkey + ']';
      }
   }
   o._hPanel.title = o._hint;
}
MO.FDuiToolButton_setEnable = function FDuiToolButton_setEnable(value){
   var o = this;
   o.__base.FDuiControl.oeEnable.call(o, value);
   o._disabled = !e.enable;
   if(e.enable && o._icon){
      var is = MO.Window.Resource.iconPath(o._icon);
      if(o._hIcon.src != is){
         o._hIcon.src = is;
      }
   }else if(!e.enable && o._iconDisable){
      var is = MO.Window.Resource.iconPath(o._iconDisable);
      if(o._hIcon.src != is){
         o._hIcon.src = is;
      }
   }
   var css = o.styleName(e.enable ? 'Icon' : 'IconDisable');
   if(o._hIcon.className != css){
      o._hIcon.className = css;
   }
   var css = o.styleName(e.enable ? 'Button' : 'Disable');
   if(o._hPanel.className != css){
      o._hPanel.className = css;
   }
   var ci = o.styleIconPath(e.enable ? 'Button' : 'ButtonDisable');
   if(o._hButton.background != ci){
      o._hButton.background = ci;
   }
   return EEventStatus.Stop;
}
MO.FDuiToolButton_doClick = function FDuiToolButton_doClick(){
   var o = this;
   if(!o._disabled){
      MO.Console.find(MO.FDuiFocusConsole).blur();
      var event = new MO.SClickEvent(o);
      o.processClickListener(event);
      event.dispose();
      if(o._action){
         eval(o._action);
      }
   }
}
MO.FDuiToolButton_dispose = function FDuiToolButton_dispose(){
   var o = this;
   o._hForm = MO.Window.Html.free(o._hForm);
   o._hLine = MO.Window.Html.free(o._hLine);
   o._hIconPanel = MO.Window.Html.free(o._hIconPanel);
   o._hIcon = MO.Window.Html.free(o._hIcon);
   o._hSpacePanel = MO.Window.Html.free(o._hSpacePanel);
   o._hLabelPanel = MO.Window.Html.free(o._hLabelPanel);
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiToolButtonCheck = function FDuiToolButtonCheck(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolButton);
   o._optionChecked = MO.Class.register(o, [new MO.APtyBoolean('_optionChecked', 'check'), new MO.AGetSet('_optionChecked')]);
   o._groupName     = MO.Class.register(o, [new MO.APtyString('_groupName'), new MO.AGetSet('_groupName')]);
   o._groupDefault  = MO.Class.register(o, [new MO.APtyString('_groupDefault'), new MO.AGetSet('_groupDefault')]);
   o._statusChecked = false;
   o.onEnter        = MO.FDuiToolButtonCheck_onEnter;
   o.onLeave        = MO.FDuiToolButtonCheck_onLeave;
   o.onMouseDown    = MO.FDuiToolButtonCheck_onMouseDown;
   o.onMouseUp      = MO.FDuiToolButtonCheck_onMouseUp;
   o.innerCheck     = MO.FDuiToolButtonCheck_innerCheck;
   o.isCheck        = MO.FDuiToolButtonCheck_isCheck;
   o.check          = MO.FDuiToolButtonCheck_check;
   o.dispose        = MO.FDuiToolButtonCheck_dispose;
   return o;
}
MO.FDuiToolButtonCheck_onEnter = function FDuiToolButtonCheck_onEnter(p){
   var o = this;
   if(!o._statusChecked){
      o._hForm.className = this.styleName('Hover');
   }
}
MO.FDuiToolButtonCheck_onLeave = function FDuiToolButtonCheck_onLeave(p){
   var o = this;
   if(!o._statusChecked){
      o._hForm.className = this.styleName('Normal');
   }
}
MO.FDuiToolButtonCheck_onMouseDown = function FDuiToolButtonCheck_onMouseDown(p){
   var o = this;
   o.check(!o._statusChecked);
   var event = new MO.SClickEvent(o);
   event.checked = o._statusChecked;
   o.processClickListener(event, o._statusChecked);
   event.dispose();
}
MO.FDuiToolButtonCheck_onMouseUp = function FDuiToolButtonCheck_onMouseUp(){
   var o = this;
}
MO.FDuiToolButtonCheck_innerCheck = function FDuiToolButtonCheck_innerCheck(p){
   var o = this;
   if(o._statusChecked != p){
      o._statusChecked = p;
      if(p){
         o._hForm.className = o.styleName('Press');
      }else{
         o._hForm.className = o.styleName('Normal');
      }
   }
}
MO.FDuiToolButtonCheck_isCheck = function FDuiToolButtonCheck_isCheck(){
   return this._statusChecked;
}
MO.FDuiToolButtonCheck_check = function FDuiToolButtonCheck_check(p){
   var o = this;
   if(!p){
      if(o._groupDefault == o){
         return;
      }
   }
   o.innerCheck(p);
   if(!o._parent){
      return;
   }
   if(p){
      if(!MO.Lang.String.isEmpty(o._groupName)){
         var cs = o._parent.components();
         for(var i = cs.count() - 1; i >= 0; i--){
            var c = cs.value(i);
            if(c != o){
               if(MO.Class.isClass(c, FDuiToolButtonCheck)){
                  c.innerCheck(false);
               }
            }
         }
      }
   }else{
      if(!MO.Lang.String.isEmpty(o._groupDefault)){
         var components = o._parent.components();
         var control = components.get(o._groupDefault);
         if(control){
            control.innerCheck(true);
         }else{
            MO.Logger.error("Can't find group default control. (name={1})", o._groupDefault);
         }
      }
   }
}
MO.FDuiToolButtonCheck_dispose = function FDuiToolButtonCheck_dispose(){
   var o = this;
   o._statusChecked = null;
   o._groupName = null;
   o.__base.FDuiToolButton.dispose.call(o);
}
MO.FDuiToolButtonEdit = function FDuiToolButtonEdit(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolButton, MO.MListenerDataChanged);
   o._editSize      = MO.Class.register(o, new MO.APtySize2('_editSize'));
   o._hEdit         = null;
   o.onBuildButton  = MO.FDuiToolButtonEdit_onBuildButton;
   o.onEnter        = MO.Method.empty;
   o.onLeave        = MO.Method.empty;
   o.onInputEdit    = MO.Class.register(o, new MO.AEventInputChanged('onInputEdit'), MO.FDuiToolButtonEdit_onInputEdit);
   o.onInputKeyDown = MO.Class.register(o, new MO.AEventKeyDown('onInputKeyDown'), MO.FDuiToolButtonEdit_onInputKeyDown);
   o.construct      = MO.FDuiToolButtonEdit_construct;
   o.text           = MO.FDuiToolButtonEdit_text;
   o.setText        = MO.FDuiToolButtonEdit_setText;
   return o;
}
MO.FDuiToolButtonEdit_onBuildButton = function FDuiToolButtonEdit_onBuildButton(p){
   var o = this;
   var hPanel = o._hPanel;
   var hForm = o._hForm = MO.Window.Builder.appendTable(hPanel);
   var hLine = o._hLine = MO.Window.Builder.appendTableRow(hForm);
   var hEditPanel = o._hEditPanel = MO.Window.Builder.appendTableCell(hLine);
   var hEdit = o._hEdit = MO.Window.Builder.appendEdit(hEditPanel);
   hEdit.style.width = o._editSize.width +  'px';
   o.attachEvent('onInputEdit', hEdit, o.onInputEdit);
   o.attachEvent('onInputKeyDown', hEdit);
   o._hEditSpacePanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('SpacePanel'));
   if(o._icon){
      var hc = o._hIconPanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('IconPanel'));
      o._hIcon = MO.Window.Builder.appendIcon(hc, null, o._icon);
   }
   if(o._icon && o._label){
      o._hSpacePanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('SpacePanel'));
   }
   if(o._label){
      var hLabelPanel = o._hLabelPanel = MO.Window.Builder.appendTableCell(hLine, o.styleName('LabelPanel'));
      o.attachEvent('onMouseDown', hLabelPanel);
      o.attachEvent('onMouseUp', hLabelPanel);
      hLabelPanel.noWrap = true;
      o.setLabel(o._label);
   }
   if(o._hotkey){
      MO.Console.find(MO.FKeyConsole).register(o._hotkey, o, o.onMouseDown);
   }
   if(o._hint){
      o.setHint(o._hint);
   }
}
MO.FDuiToolButtonEdit_onInputEdit = function FDuiToolButtonEdit_onInputEdit(event){
   var o = this;
   o.processDataChangedListener(o);
}
MO.FDuiToolButtonEdit_onInputKeyDown = function FDuiToolButtonEdit_onInputKeyDown(event){
   var o = this;
   if(event.keyCode == MO.EKeyCode.Enter){
      o.doClick();
   }
}
MO.FDuiToolButtonEdit_construct = function FDuiToolButtonEdit_construct(){
   var o = this;
   o.__base.FDuiToolButton.construct.call(o);
   o._editSize = new MO.SSize2();
}
MO.FDuiToolButtonEdit_text = function FDuiToolButtonEdit_text(){
   return this._hEdit.value;
}
MO.FDuiToolButtonEdit_setText = function FDuiToolButtonEdit_setText(text){
   this._hEdit.value = text;
}
MO.FDuiToolButtonMenu = function FDuiToolButtonMenu(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolButton, MO.MUiContainer, MO.MDuiDropable, MO.MDuiFocus);
   o._menu           = null;
   o._statusDrop     = false;
   o._hDropPanel     = null;
   o._stylePanel     = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleDropHover = MO.Class.register(o, new MO.AStyleIcon('_styleDropHover'));
   o.onBuild         = MO.FDuiToolButtonMenu_onBuild;
   o.onEnter         = MO.FDuiToolButtonMenu_onEnter;
   o.onLeave         = MO.FDuiToolButtonMenu_onLeave;
   o.onMouseDown     = MO.FDuiToolButtonMenu_onMouseDown;
   o.onBlur          = MO.FDuiToolButtonMenu_onBlur;
   o.onMouseUp       = MO.Method.empty;
   o.construct       = MO.FDuiToolButtonMenu_construct;
   o.createChild     = MO.FDuiToolButtonMenu_createChild;
   o.push            = MO.FDuiToolButtonMenu_push;
   o.drop            = MO.FDuiToolButtonMenu_drop;
   o.doClick         = MO.FDuiToolButtonMenu_doClick;
   o.dispose         = MO.FDuiToolButtonMenu_dispose;
   return o;
}
MO.FDuiToolButtonMenu_onBuild = function FDuiToolButtonMenu_onBuild(event){
   var o = this;
   o.__base.FDuiToolButton.onBuild.call(o, event);
   var hDropPanel = o._hDropPanel = MO.Window.Builder.appendTableCell(o._hLine);
   o.onBuildDrop(hDropPanel);
   o._menu.onBuild(event);
}
MO.FDuiToolButtonMenu_onEnter = function FDuiToolButtonMenu_onEnter(event){
   var o = this;
   if(!o._statusDrop){
      o.__base.FDuiToolButton.onEnter.call(o, event);
   }
}
MO.FDuiToolButtonMenu_onLeave = function FDuiToolButtonMenu_onLeave(event){
   var o = this;
   if(!o._statusDrop){
      o.__base.FDuiToolButton.onLeave.call(o, event);
   }
}
MO.FDuiToolButtonMenu_onMouseDown = function FDuiToolButtonMenu_onMouseDown(){
   var o = this;
   if(!o._statusDrop){
      o._hForm.className = o.styleName('Press');
      o.doClick();
   }
}
MO.FDuiToolButtonMenu_onBlur = function FDuiToolButtonMenu_onBlur(e){
   var o = this;
}
MO.FDuiToolButtonMenu_construct = function FDuiToolButtonMenu_construct(){
   var o = this;
   o.__base.FDuiToolButton.construct.call(o);
   var menu = o._menu = MO.Class.create(MO.FDuiPopupMenu);
   menu._opener = o;
   o.push(menu);
}
MO.FDuiToolButtonMenu_createChild = function FDuiToolButtonMenu_createChild(xconfig){
   var control = MO.Dui.Control.newInstance(xconfig);
   control._parent = this;
   return control;
}
MO.FDuiToolButtonMenu_push = function FDuiToolButtonMenu_push(component){
   var o = this;
   if(MO.Class.isClass(component, MO.MUiMenuButton)){
      o._menu.push(component);
   }else{
      o.__base.FDuiToolButton.push.call(o, component);
   }
}
MO.FDuiToolButtonMenu_drop = function FDuiToolButtonMenu_drop(flag){
   var o = this;
   if(!o._disabled){
      o._statusDrop = !o._statusDrop;
      if(o._statusDrop){
         o._hForm.className = o.styleName('Press');
         o._menu.show(o._hDropPanel, MO.EUiAlign.BottomRight);
         MO.Console.find(MO.FDuiPopupConsole).show(o._menu);
      }else{
         o._hForm.className = o.styleName('Normal');
         o._menu.hide();
      }
   }
}
MO.FDuiToolButtonMenu_doClick = function FDuiToolButtonMenu_doClick(){
   var o = this;
   o.__base.FDuiToolButton.doClick.call(o);
   o.drop(!o._statusDrop);
}
MO.FDuiToolButtonMenu_dispose = function FDuiToolButtonMenu_dispose(){
   var o = this;
   o._hDropIcon = MO.Window.Html.free(o._hDropIcon);
   o._hDropPanel = MO.Window.Html.free(o._hDropPanel);
   o.__base.FControl.dispose.call(o);
}
MO.FDuiToolButtonSplit = function FDuiToolButtonSplit(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolButton, MO.MUiToolButton);
   o._stylePanel = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o.onBuild     = MO.FDuiToolButtonSplit_onBuild;
   return o;
}
MO.FDuiToolButtonSplit_onBuild = function FDuiToolButtonSplit_onBuild(p){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, p);
   o._hPanel.className = o.styleName('Panel');
}
MO.FDuiToolButtonText = function FDuiToolButtonText(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolButton);
   return o;
}
MO.RDuiToolBar = function RDuiToolBar(){
   var o = this;
   return o;
}
MO.RDuiToolBar.prototype.mergeNode = function RDuiToolBar_mergeNode(xtb, xNode, r){
   var ns = xNode.nodes;
   for(var j=0; j<ns.count; j++){
      var n = ns.get(j);
      if('ToolBar' == n.name){
         if(n.nodes){
            for(var i=0; i<n.nodes.count; i++){
               xtb.push(n.nodes.get(i));
            }
         }
      }
   }
   if(r){
      for(var j=ns.count-1; j>=0; j--){
         var n = ns.get(j);
         if('ToolBar' == n.name){
            ns.removeItem(n);
         }
      }
   }
   return xtb;
}
MO.RDuiToolBar.prototype.fromNode = function RDuiToolBar_fromNode(control, config, panel, r){
   if(config && config._nodes){
      var xtb = null;
      var ns = config._nodes;
      var jc = ns.count();
      for(var j = 0; j < jc; j++){
         var n = ns.getAt(j);
         if(n.isName('ToolBar')){
            if(!xtb){
               xtb = n;
            }else if(n.hasNode()){
               xtb.nodes().append(n.nodes());
            }
         }
      }
      if(r){
         for(var i = 0; i < ns.count(); i++){
            var n = ns.getAt(i);
            if(n.isName('ToolBar')){
               ns.erase(i--);
            }
         }
      }
      if(xtb){
         RControl.build(control, xtb, null, panel);
      }
   }
}
MO.RDuiToolBar = new MO.RDuiToolBar();
MO.Dui.ToolBar = MO.RDuiToolBar;
MO.FDuiPageControl = function FDuiPageControl(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer);
   o._sizeCd          = MO.EUiSize.Horizontal;
   o._stylePanel      = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleTitlePanel = MO.Class.register(o, new MO.AStyle('_styleTitlePanel'));
   o._styleTitleForm  = MO.Class.register(o, new MO.AStyle('_styleTitleForm'));
   o._styleDataPanel  = MO.Class.register(o, new MO.AStyle('_styleDataPanel'));
   o._styleDataForm   = MO.Class.register(o, new MO.AStyle('_styleDataForm'));
   o._styleTop        = MO.Class.register(o, new MO.AStyle('_styleTop'));
   o._styleBottom     = MO.Class.register(o, new MO.AStyle('_styleBottom'));
   o._styleForm       = MO.Class.register(o, new MO.AStyle('_styleForm'));
   o._sheets          = null;
   o._activeSheet     = null;
   o._esize           = MO.EUiSize.Both;
   o._hTop            = null;
   o._hLine           = null;
   o._hBottom         = null;
   o._hSheets         = null;
   o.onBuildPanel     = MO.FDuiPageControl_onBuildPanel;
   o.onBuild          = MO.FDuiPageControl_onBuild;
   o.oeRefresh        = MO.FDuiPageControl_oeRefresh;
   o.construct        = MO.FDuiPageControl_construct;
   o.appendChild      = MO.FDuiPageControl_appendChild;
   o.select           = MO.FDuiPageControl_select;
   o.selectByIndex    = MO.FDuiPageControl_selectByIndex;
   o.sheet            = MO.FDuiPageControl_sheet;
   o.push             = MO.FDuiPageControl_push;
   o.dispose          = MO.FDuiPageControl_dispose;
   return o;
}
MO.FDuiPageControl_onBuildPanel = function FDuiPageControl_onBuildPanel(event){
   var o = this;
   var h = o._hPanel = MO.Window.Builder.createTable(event, o.styleName('Panel'));
   h.width = '100%';
}
MO.FDuiPageControl_onBuild = function FDuiPageControl_onBuild(event){
   var o = this;
   o.__base.FDuiContainer.onBuild.call(o, event);
   var h = o._hPanel;
   var hc = MO.Window.Builder.appendTableRowCell(h, o.styleName('TitlePanel'));
   var hf = o.hTitleForm = MO.Window.Builder.appendTable(hc, o.styleName('TitleForm'));
   hf.width = '100%';
   var hr = o._hTop = MO.Window.Builder.appendTableRow(hf);
   hr.height = 1;
   o._hLine = MO.Window.Builder.appendTableRow(hf);
   var hr = o._hBottom = MO.Window.Builder.appendTableRow(hf);
   hr.height = 1;
   var hc = o._hFirstTop = MO.Window.Builder.appendTableCell(o._hTop);
   hc.width = 12;
   o._hFirst = MO.Window.Builder.appendTableCell(o._hLine);
   var hbc = o._hFirstBottom = MO.Window.Builder.appendTableCell(o._hBottom);
   hbc.className = o.styleName('Bottom', FDuiPageSheet);
   var hc = o._hLastTop = MO.Window.Builder.appendTableCell(o._hTop);
   o._hLast = MO.Window.Builder.appendTableCell(o._hLine);
   var hc = o._hLastBottom = MO.Window.Builder.appendTableCell(o._hBottom);
   hc.className = o.styleName('Bottom', FDuiPageSheet);
}
MO.FDuiPageControl_oeRefresh = function FDuiPageControl_oeRefresh(event){
   var o = this;
   var r = o.__base.FDuiContainer.oeRefresh.call(o, event);
   if(event.isBefore()){
      if(o._sheets.count()){
         if(o._activeSheet){
            o._activeSheet.oeRefresh(e);
         }else{
            var s = o._activeSheet = o._sheets.value(0);
            if(s){
               s.innerSelect(true);
            }
         }
      }
   }
   return r;
}
MO.FDuiPageControl_construct = function FDuiPageControl_construct(){
   var o = this;
   o.__base.FDuiContainer.construct.call(o);
   o._sheets = new MO.TDictionary();
}
MO.FDuiPageControl_appendChild = function FDuiPageControl_appendChild(control){
   var o = this;
   if(MO.Class.isClass(control, FDuiPageSheet)){
      var ci = o._hLast.cellIndex;
      var hc = control._hTopL = MO.Window.Builder.appendTableCell(o._hTop, null, ci);
      hc.width = 1;
      hc.className = control.styleName('Top');
      var hc = control._hTop = MO.Window.Builder.appendTableCell(o._hTop, null, ci + 1);
      hc.className = control.styleName('Top');
      var hc = control._hTopR = MO.Window.Builder.appendTableCell(o._hTop, null, ci + 2);
      hc.width = 1;
      hc.className = control.styleName('Top');
      var hc = control._hLeft = MO.Window.Builder.appendTableCell(o._hLine, null, ci);
      hc.width = 1;
      hc.className = control.styleName('Left');
      var hc = control._hButtonPanel = MO.Window.Builder.appendTableCell(o._hLine, null, ci + 1);
      control.attachEvent('onButtonEnter', hc);
      control.attachEvent('onButtonLeave', hc);
      control.attachEvent('onHeadMouseDown', hc);
      hc.width = 1;
      var hb = control._hButton = MO.Window.Builder.appendDiv(hc, control.styleName('Button'));
      if(control.icon){
         control._hIcon = MO.Window.Builder.appendIcon(hb, null, control.icon);
      }
      if(control.label){
         control._hText = MO.Window.Builder.appendSpan(hb, control.styleName('ButtonText'));
         control._hText.innerText = ' ' + control.label();
      }
      var hc = control._hRight = MO.Window.Builder.appendTableCell(o._hLine, null, ci + 2);
      hc.width = 1;
      hc.className = control.styleName('Right')
      var hc = control._hBottomL = MO.Window.Builder.appendTableCell(o._hBottom, null, ci);
      hc.width = 1;
      hc.className = control.styleName('Bottom');
      var hc = control._hBottom = MO.Window.Builder.appendTableCell(o._hBottom, null, ci + 1);
      hc.className = control.styleName('Bottom');
      var hc = control._hBottomR = MO.Window.Builder.appendTableCell(o._hBottom, null, ci + 2);
      hc.width = 1;
      hc.className = control.styleName('Bottom');
      var hr = MO.Window.Builder.appendTableRow(o._hPanel);
      if(control.index){
         hr.style.display = 'none';
      }
      var hc = MO.Window.Builder.appendTableCell(hr);
      control._hForm = hr;
      hc.style.verticalAlign = 'top';
      hc.appendChild(control._hPanel);
      o.selectByIndex(0);
   }
}
MO.FDuiPageControl_sheet = function FDuiPageControl_sheet(name){
   return this._sheets.get(name);
}
MO.FDuiPageControl_select = function FDuiPageControl_select(sheet){
   var o = this;
   o._activeSheet = sheet;
   var sheets = o._sheets;
   var count = sheets.count();
   for(var i = 0; i < count; i++){
      var findSheet = sheets.at(i);
      if(findSheet != sheet){
         findSheet.select(false);
      }
   }
   sheet.select(true);
}
MO.FDuiPageControl_selectByIndex = function FDuiPageControl_selectByIndex(n){
   var o = this;
   var sheet = o._sheets.value(n);
   if(sheet){
      o.select(sheet);
   }
}
MO.FDuiPageControl_push = function FDuiPageControl_push(component){
   var o = this;
   if(MO.Class.isClass(component, MO.FDuiPageSheet)){
      var sheets = o._sheets;
      component._pageControl = o;
      component._index = sheets.count();
      sheets.set(component.name(), component);
   }
   o.__base.FDuiContainer.push.call(o, component);
}
MO.FDuiPageControl_dispose = function FDuiPageControl_dispose(){
   var o = this;
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiPageSheet = function FDuiPageSheet(o){
   o = MO.Class.inherits(this, o, MO.FDuiLayout);
   o._icon              = MO.Class.register(o, new MO.APtyString('_icon'));
   o._formName          = MO.Class.register(o, new MO.APtyString('_formName'));
   o._formLink          = MO.Class.register(o, new MO.APtyString('_formLink'));
   o._formWhere         = MO.Class.register(o, new MO.APtyString('_formWhere'));
   o._formOrder         = MO.Class.register(o, new MO.APtyString('_formOrder'));
   o._stylePanel        = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleTop          = MO.Class.register(o, new MO.AStyle('_styleTop'));
   o._styleTopSelect    = MO.Class.register(o, new MO.AStyle('_styleTopSelect'));
   o._styleLeft         = MO.Class.register(o, new MO.AStyle('_styleLeft'));
   o._styleLeftSelect   = MO.Class.register(o, new MO.AStyle('_styleLeftSelect'));
   o._styleRight        = MO.Class.register(o, new MO.AStyle('_styleRight'));
   o._styleRightSelect  = MO.Class.register(o, new MO.AStyle('_styleRightSelect'));
   o._styleRightPrior   = MO.Class.register(o, new MO.AStyle('_styleRightPrior'));
   o._styleButtom       = MO.Class.register(o, new MO.AStyle('_styleBottom'));
   o._styleBottomSelect = MO.Class.register(o, new MO.AStyle('_styleBottomSelect'));
   o._styleButtonText   = MO.Class.register(o, new MO.AStyle('_styleButtonText'));
   o._styleButton       = MO.Class.register(o, new MO.AStyle('_styleButton'));
   o._styleButtonHover  = MO.Class.register(o, new MO.AStyle('_styleButtonHover'));
   o._styleButtonSelect = MO.Class.register(o, new MO.AStyle('_styleButtonSelect'));
   o._styleDataPanel    = MO.Class.register(o, new MO.AStyle('_styleDataPanel'));
   o._top               = 0;
   o._pages             = null;
   o._index             = null;
   o._selected          = false;
   o._hasBuilded        = false;
   o.lsnsSelect         = null;
   o._hTopL             = null;
   o._hTop              = null;
   o._hTopR             = null;
   o._hLeft             = null;
   o._hButton           = null;
   o._hIcon             = null;
   o._hText             = null;
   o._hBottomL          = null;
   o._hBottom           = null;
   o._hBottomR          = null;
   o._hRight            = null;
   o.onBuildPanel       = MO.FDuiPageSheet_onBuildPanel;
   o.onButtonEnter      = MO.Class.register(o, new MO.AEventMouseEnter('onButtonEnter'), MO.FDuiPageSheet_onButtonEnter);
   o.onButtonLeave      = MO.Class.register(o, new MO.AEventMouseLeave('onButtonLeave'), MO.FDuiPageSheet_onButtonLeave);
   o.onHeadMouseDown    = MO.Class.register(o, new MO.AEventMouseDown('onHeadMouseDown'), MO.FDuiPageSheet_onHeadMouseDown);
   o.construct          = MO.FDuiPageSheet_construct;
   o.innerSelect        = MO.FDuiPageSheet_innerSelect;
   o.select             = MO.FDuiPageSheet_select;
   o.setVisible         = MO.FDuiPageSheet_setVisible;
   o.dispose            = MO.FDuiPageSheet_dispose
   o.innerDump          = MO.FDuiPageSheet_innerDump;
   return o;
}
MO.FDuiPageSheet_onBuildPanel = function FDuiPageSheet_onBuildPanel(event){
   var o = this;
   var hPanel = o._hPanel = o._hContainer = MO.Window.Builder.createDiv(event, o.styleName('Panel'));
   hPanel.style.width = '100%';
   hPanel.style.height = '100%';
   var hForm = o._hPanelForm = MO.Window.Builder.appendTable(hPanel);
   hForm.style.width = '100%';
   hForm.style.height = '100%';
}
MO.FDuiPageSheet_onButtonEnter = function FDuiPageSheet_onButtonEnter(event){
   var o = this;
   if(!o._selected){
      o._hButton.className = o.styleName('ButtonHover');
   }
}
MO.FDuiPageSheet_onButtonLeave = function FDuiPageSheet_onButtonLeave(event){
   var o = this;
   if(!o._selected){
      o._hButton.className = o.styleName('Button');
   }
}
MO.FDuiPageSheet_onHeadMouseDown = function FDuiPageSheet_onHeadMouseDown(event){
   var o = this;
   o._parent.select(o);
}
MO.FDuiPageSheet_construct = function FDuiPageSheet_construct(){
   var o = this;
   o.__base.FDuiLayout.construct.call(o);
   o.lsnsSelect = new MO.TListeners();
}
MO.FDuiPageSheet_innerSelect = function FDuiPageSheet_innerSelect(flag){
   var o = this;
   var b = o._parent;
   if(flag && !o._hasBuilded){
      o._hasBuilded = true;
   }
   var first = (o._index == 0);
   var prior = (b._activeSheet._index - 1 == o._index);
   if(o._selected != flag){
      if(flag){
         o.lsnsSelect.process();
      }
      o._selected = flag;
   }
   o._hButton.className = flag ? o.styleName('ButtonSelect') : o.styleName('Button');
   o._hTop.className = flag ? o.styleName('TopSelect') : o.styleName('Top');
   o._hLeft.className = flag ? o.styleName('LeftSelect') : (first ? o.styleName('Right') : o.styleName('Left'));
   o._hBottomL.className = flag ? o.styleName('BottomSelect') : o.styleName('Bottom');
   o._hBottom.className = flag ? o.styleName('BottomSelect') : o.styleName('Bottom');
   o._hBottomR.className = flag ? o.styleName('BottomSelect') : o.styleName('Bottom');
   o._hRight.className = flag ? o.styleName('RightSelect') : (prior ? o.styleName('RightPrior') : o.styleName('Right'));
   MO.Window.Html.visibleSet(o._hForm, flag);
}
MO.FDuiPageSheet_select = function FDuiPageSheet_select(flag){
   var o = this;
   o.innerSelect(flag);
   if(flag){
      o.psRefresh();
      o.psResize();
   }
}
MO.FDuiPageSheet_setVisible = function FDuiPageSheet_setVisible(flag){
   var o = this;
   MO.Window.Html.displaySet(o._hPanel, flag);
}
MO.FDuiPageSheet_dispose = function FDuiPageSheet_dispose(){
   var o = this;
   o._hButton = MO.Window.Html.free(o._hButton);
   o._hTop = MO.Window.Html.free(o._hTop);
   o._hLeft = MO.Window.Html.free(o._hLeft);
   o._hBottomL = MO.Window.Html.free(o._hBottomL);
   o._hBottom = MO.Window.Html.free(o._hBottom);
   o._hBottomR = MO.Window.Html.free(o._hBottomR);
   o._hRight = MO.Window.Html.free(o._hRight);
   o.__base.FDuiLayout.dispose.call(o);
}
MO.FDuiPageSheet_innerDump = function FDuiPageSheet_innerDump(s, l){
   var o = this;
   s.append(l, MO.Class.dump(o), ' [');
   s.append('name=', o._name, ', ');
   s.append('icon=', o._icon, ', ');
   s.append('label=', o.label, ', ');
   s.append('action=', o.action, ']');
}
MO.FDuiTabBar = function FDuiTabBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MDuiDescribeFrame);
   o._sizeCd          = MO.EUiSize.Horizontal;
   o._stylePanel      = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleTitlePanel = MO.Class.register(o, new MO.AStyle('_styleTitlePanel'));
   o._styleTitleForm  = MO.Class.register(o, new MO.AStyle('_styleTitleForm'));
   o._styleDataPanel  = MO.Class.register(o, new MO.AStyle('_styleDataPanel'));
   o._styleDataForm   = MO.Class.register(o, new MO.AStyle('_styleDataForm'));
   o._styleTop        = MO.Class.register(o, new MO.AStyle('_styleTop'));
   o._styleBottom     = MO.Class.register(o, new MO.AStyle('_styleBottom'));
   o._styleForm       = MO.Class.register(o, new MO.AStyle('_styleForm'));
   o._buttons          = null;
   o._activeButton     = null;
   o._esize            = MO.EUiSize.Both;
   o._hTop             = null;
   o._hLine            = null;
   o._hBottom          = null;
   o._hSheets          = null;
   o.onBuildPanel      = MO.FDuiTabBar_onBuildPanel;
   o.onBuild           = MO.FDuiTabBar_onBuild;
   o.oeRefresh         = MO.FDuiTabBar_oeRefresh;
   o.construct         = MO.FDuiTabBar_construct;
   o.activeButton      = MO.FDuiTabBar_activeButton;
   o.appendChild       = MO.FDuiTabBar_appendChild;
   o.select            = MO.FDuiTabBar_select;
   o.selectByIndex     = MO.FDuiTabBar_selectByIndex;
   o.selectByName      = MO.FDuiTabBar_selectByName;
   o.sheet             = MO.FDuiTabBar_sheet;
   o.push              = MO.FDuiTabBar_push;
   o.dispose           = MO.FDuiTabBar_dispose;
   return o;
}
MO.FDuiTabBar_onBuildPanel = function FDuiTabBar_onBuildPanel(p){
   var o = this;
   var h = o._hPanel = MO.Window.Builder.createTable(p, o.styleName('Panel'));
   h.width = '100%';
}
MO.FDuiTabBar_onBuild = function FDuiTabBar_onBuild(p){
   var o = this;
   o.__base.FDuiContainer.onBuild.call(o, p);
   var h = o._hPanel;
   var hc = MO.Window.Builder.appendTableRowCell(h, o.styleName('TitlePanel'));
   hc.vAlign = 'bottom';
   var hf = o.hTitleForm = MO.Window.Builder.appendTable(hc, o.styleName('TitleForm'));
   hf.width = '100%';
   var hr = o._hTop = MO.Window.Builder.appendTableRow(hf);
   hr.height = 1;
   o._hLine = MO.Window.Builder.appendTableRow(hf);
   var hr = o._hBottom = MO.Window.Builder.appendTableRow(hf);
   hr.height = 1;
   var hc = o._hFirstTop = MO.Window.Builder.appendTableCell(o._hTop);
   hc.width = 20;
   o._hFirst = MO.Window.Builder.appendTableCell(o._hLine);
   var hbc = o._hFirstBottom = MO.Window.Builder.appendTableCell(o._hBottom);
   hbc.className = o.styleName('Bottom', MO.FDuiTabButton);
   var hc = o._hLastTop = MO.Window.Builder.appendTableCell(o._hTop);
   o._hLast = MO.Window.Builder.appendTableCell(o._hLine);
   var hc = o._hLastBottom = MO.Window.Builder.appendTableCell(o._hBottom);
   hc.className = o.styleName('Bottom', MO.FDuiTabButton);
}
MO.FDuiTabBar_oeRefresh = function FDuiTabBar_oeRefresh(p){
   var o = this;
   var r = o.__base.FDuiContainer.oeRefresh.call(o, p);
   if(p.isBefore()){
      if(o._buttons.count()){
         if(o._activeButton){
            o._activeButton.oeRefresh(e);
         }else{
            var s = o._activeButton = o._buttons.value(0);
            if(s){
               s.innerSelect(true);
            }
         }
      }
   }
   return r;
}
MO.FDuiTabBar_construct = function FDuiTabBar_construct(){
   var o = this;
   o.__base.FDuiContainer.construct.call(o);
   o._buttons = new MO.TDictionary();
}
MO.FDuiTabBar_activeButton = function FDuiTabBar_activeButton(){
   return this._activeButton;
}
MO.FDuiTabBar_appendChild = function FDuiTabBar_appendChild(p){
   var o = this;
   if(MO.Class.isClass(p, MO.FDuiTabButton)){
      var ci = o._hLast.cellIndex;
      var hc = p._hTopL = MO.Window.Builder.appendTableCell(o._hTop, null, ci);
      hc.width = 1;
      hc.className = p.styleName('Top');
      var hc = p._hTop = MO.Window.Builder.appendTableCell(o._hTop, null, ci + 1);
      hc.className = p.styleName('Top');
      var hc = p._hTopR = MO.Window.Builder.appendTableCell(o._hTop, null, ci + 2);
      hc.width = 1;
      hc.className = p.styleName('Top');
      var hc = p._hLeft = MO.Window.Builder.appendTableCell(o._hLine, null, ci);
      hc.width = 1;
      hc.className = p.styleName('Left');
      var hc = p._hButtonPanel = MO.Window.Builder.appendTableCell(o._hLine, null, ci + 1);
      p.attachEvent('onButtonEnter', hc);
      p.attachEvent('onButtonLeave', hc);
      p.attachEvent('onButtonClick', hc);
      hc.width = 1;
      var hb = p._hButton = MO.Window.Builder.append(hc, 'DIV', p.styleName('Button'));
      if(p.icon){
         p._hIcon = MO.Window.Builder.appendIcon(hb, null, p.icon);
      }
      if(p.label){
         p._hText = MO.Window.Builder.appendSpan(hb, p.styleName('ButtonText'));
         p._hText.innerText = ' ' + p.label();
      }
      var hc = p._hRight = MO.Window.Builder.appendTableCell(o._hLine, null, ci + 2);
      hc.width = 1;
      hc.className = p.styleName('Right')
      var hc = p._hBottomL = MO.Window.Builder.appendTableCell(o._hBottom, null, ci);
      hc.width = 1;
      hc.className = p.styleName('Bottom');
      var hc = p._hBottom = MO.Window.Builder.appendTableCell(o._hBottom, null, ci + 1);
      hc.className = p.styleName('Bottom');
      var hc = p._hBottomR = MO.Window.Builder.appendTableCell(o._hBottom, null, ci + 2);
      hc.width = 1;
      hc.className = p.styleName('Bottom');
      o.selectByIndex(0);
   }
}
MO.FDuiTabBar_sheet = function FDuiTabBar_sheet(p){
   return this._buttons.get(p);
}
MO.FDuiTabBar_select = function FDuiTabBar_select(p){
   var o = this;
   var ss = o._buttons;
   var c = ss.count();
   o._activeButton = p;
   for(var i = 0; i < c; i++){
      var s = o._buttons.value(i);
      if(s != p){
         s.select(false);
      }
   }
   p.select(true);
}
MO.FDuiTabBar_selectByIndex = function FDuiTabBar_selectByIndex(index){
   var o = this;
   var sheet = o._buttons.value(index);
   if(sheet){
      o.select(sheet);
   }
}
MO.FDuiTabBar_selectByName = function FDuiTabBar_selectByName(name){
   var o = this;
   var sheet = o.findControl(name);
   if(sheet){
      o.select(sheet);
   }
}
MO.FDuiTabBar_push = function FDuiTabBar_push(component){
   var o = this;
   if(MO.Class.isClass(component, MO.FDuiTabButton)){
      var buttons = o._buttons;
      component._index = buttons.count();
      buttons.set(component.name(), component);
   }
   o.__base.FDuiContainer.push.call(o, component);
}
MO.FDuiTabBar_dispose = function FDuiTabBar_dispose(){
   var o = this;
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiTabButton = function FDuiTabButton(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MO.MListenerClick);
   o._icon              = MO.Class.register(o, new MO.APtyString('_icon'));
   o._formName          = MO.Class.register(o, new MO.APtyString('_formName'));
   o._formLink          = MO.Class.register(o, new MO.APtyString('_formLink'));
   o._formWhere         = MO.Class.register(o, new MO.APtyString('_formWhere'));
   o._formOrder         = MO.Class.register(o, new MO.APtyString('_formOrder'));
   o._styleTop          = MO.Class.register(o, new MO.AStyle('_styleTop'));
   o._styleTopSelect    = MO.Class.register(o, new MO.AStyle('_styleTopSelect'));
   o._styleLeft         = MO.Class.register(o, new MO.AStyle('_styleLeft'));
   o._styleLeftSelect   = MO.Class.register(o, new MO.AStyle('_styleLeftSelect'));
   o._styleRight        = MO.Class.register(o, new MO.AStyle('_styleRight'));
   o._styleRightSelect  = MO.Class.register(o, new MO.AStyle('_styleRightSelect'));
   o._styleRightPrior   = MO.Class.register(o, new MO.AStyle('_styleRightPrior'));
   o._styleButtom       = MO.Class.register(o, new MO.AStyle('_styleBottom'));
   o._styleBottomSelect = MO.Class.register(o, new MO.AStyle('_styleBottomSelect'));
   o._styleButtonText   = MO.Class.register(o, new MO.AStyle('_styleButtonText'));
   o._styleButton       = MO.Class.register(o, new MO.AStyle('_styleButton'));
   o._styleButtonHover  = MO.Class.register(o, new MO.AStyle('_styleButtonHover'));
   o._styleButtonSelect = MO.Class.register(o, new MO.AStyle('_styleButtonSelect'));
   o._styleDataPanel    = MO.Class.register(o, new MO.AStyle('_styleDataPanel'));
   o._top               = 0;
   o._pages             = null;
   o._index             = null;
   o._selected          = false;
   o._hasBuilded        = false;
   o.lsnsSelect         = null;
   o._hTopL             = null;
   o._hTop              = null;
   o._hTopR             = null;
   o._hLeft             = null;
   o._hButton           = null;
   o._hIcon             = null;
   o._hText             = null;
   o._hBottomL          = null;
   o._hBottom           = null;
   o._hBottomR          = null;
   o._hRight            = null;
   o.onBuildPanel       = MO.FDuiTabButton_onBuildPanel;
   o.onButtonEnter      = MO.Class.register(o, new MO.AEventMouseEnter('onButtonEnter'), MO.FDuiTabButton_onButtonEnter);
   o.onButtonLeave      = MO.Class.register(o, new MO.AEventMouseLeave('onButtonLeave'), MO.FDuiTabButton_onButtonLeave);
   o.onButtonClick      = MO.Class.register(o, new MO.AEventClick('onButtonClick'), MO.FDuiTabButton_onButtonClick);
   o.construct          = MO.FDuiTabButton_construct;
   o.innerSelect        = MO.FDuiTabButton_innerSelect;
   o.select             = MO.FDuiTabButton_select;
   o.setVisible         = MO.FDuiTabButton_setVisible;
   o.doClick            = MO.FDuiTabButton_doClick;
   o.dispose            = MO.FDuiTabButton_dispose
   o.innerDump          = MO.FDuiTabButton_innerDump;
   return o;
}
MO.FDuiTabButton_onBuildPanel = function FDuiTabButton_onBuildPanel(p){
   var o = this;
   var hp = o._hContainer = o._hPanel = MO.Window.Builder.createDiv(p);
   hp.width = '100%';
   hp.height = '100%';
}
MO.FDuiTabButton_onButtonEnter = function FDuiTabButton_onButtonEnter(p){
   var o = this;
   if(!o._selected){
      o._hButton.className = o.styleName('ButtonHover');
   }
}
MO.FDuiTabButton_onButtonLeave = function FDuiTabButton_onButtonLeave(p){
   var o = this;
   if(!o._selected){
      o._hButton.className = o.styleName('Button');
   }
}
MO.FDuiTabButton_onButtonClick = function FDuiTabButton_onButtonClick(p){
   this.doClick();
}
MO.FDuiTabButton_construct = function FDuiTabButton_construct(){
   var o = this;
   o.__base.FDuiControl.construct.call(o);
   o.lsnsSelect = new MO.TListeners();
}
MO.FDuiTabButton_innerSelect = function FDuiTabButton_innerSelect(p){
   var o = this;
   var b = o._parent;
   if(p && !o._hasBuilded){
      o._hasBuilded = true;
   }
   var first = (o._index == 0);
   var prior = (b._activeButton._index - 1 == o._index);
   if(o._selected != p){
      if(p){
         o.lsnsSelect.process();
      }
      o._selected = p;
   }
   o._hButton.className = p ? o.styleName('ButtonSelect') : o.styleName('Button');
   o._hTop.className = p ? o.styleName('TopSelect') : o.styleName('Top');
   o._hLeft.className = p ? o.styleName('LeftSelect') : (first ? o.styleName('Right') : o.styleName('Left'));
   o._hBottomL.className = p ? o.styleName('BottomSelect') : o.styleName('Bottom');
   o._hBottom.className = p ? o.styleName('BottomSelect') : o.styleName('Bottom');
   o._hBottomR.className = p ? o.styleName('BottomSelect') : o.styleName('Bottom');
   o._hRight.className = p ? o.styleName('RightSelect') : (prior ? o.styleName('RightPrior') : o.styleName('Right'));
}
MO.FDuiTabButton_select = function FDuiTabButton_select(p){
   var o = this;
   o.innerSelect(p);
   if(p){
      o.psRefresh();
      o.psResize();
   }
}
MO.FDuiTabButton_setVisible = function FDuiTabButton_setVisible(p){
   var o = this;
   MO.Window.Html.displaySet(o._hPanel, p);
}
MO.FDuiTabButton_doClick = function FDuiTabButton_doClick(){
   var o = this;
   o._parent.select(o);
   var e = new MO.SClickEvent(o);
   o.processClickListener(e);
   e.dispose();
}
MO.FDuiTabButton_dispose = function FDuiTabButton_dispose(){
   var o = this;
   o._hButton = MO.Window.Html.free(o._hButton);
   o._hTop = MO.Window.Html.free(o._hTop);
   o._hLeft = MO.Window.Html.free(o._hLeft);
   o._hBottomL = MO.Window.Html.free(o._hBottomL);
   o._hBottom = MO.Window.Html.free(o._hBottom);
   o._hBottomR = MO.Window.Html.free(o._hBottomR);
   o._hRight = MO.Window.Html.free(o._hRight);
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiTabButton_innerDump = function FDuiTabButton_innerDump(s, l){
   var o = this;
   s.append(l, MO.Class.dump(o), ' [');
   s.append('name=', o._name, ', ');
   s.append('icon=', o._icon, ', ');
   s.append('label=', o.label, ', ');
   s.append('action=', o.action, ']');
}
MO.EDuiTreeNodeGroup = new function EDuiTreeNodeGroup(){
   var o = this;
   o.Container = 'container';
   o.Item      = 'item';
   return o;
}
MO.FDuiTreeColumn = function FDuiTreeColumn(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl);
   o._icon        = MO.Class.register(o, new MO.APtyString('_icon'));
   o._dataName    = MO.Class.register(o, new MO.APtyString('_dataName'));
   o._display     = MO.Class.register(o, new MO.APtyBoolean('_display'), MO.EBoolean.False);
   o._config      = MO.Class.register(o, new MO.APtyConfig('_config'));
   o.oeBuild      = MO.FDuiTreeColumn_oeBuild;
   o.onBuildPanel = MO.FDuiTreeColumn_onBuildPanel;
   return o;
}
MO.FDuiTreeColumn_oeBuild = function FDuiTreeColumn_oeBuild(event){
   var o = this;
   o.__base.FDuiControl.oeBuild.call(o, event);
   var hPanel = o._hPanel;
   hPanel.innerText = MO.Lang.String.nvl(o.label);
   hPanel.noWrap = true;
   if(!o.display){
      hPanel.style.display = 'block';
   }
   if(o.width){
      hPanel.width = o.width;
   }
   return MO.EEventStatus.Stop;
}
MO.FDuiTreeColumn_onBuildPanel = function FDuiTreeColumn_onBuildPanel(){
   this.hPanel = MO.Window.Builder.create(null, 'TD');
}
MO.FDuiTreeLevel = function FDuiTreeLevel(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl);
   o._id        = MO.Class.register(o, new MO.APtyString('_id'));
   o._color     = MO.Class.register(o, new MO.APtyString('_color'));
   o._backColor = MO.Class.register(o, new MO.APtyString('_backColor'));
   return o;
}
MO.FDuiTreeNode = function FDuiTreeNode(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MUiDataProperties);
   o._valid            = MO.Class.register(o, new MO.APtyBoolean('_valid', 'is_valid'), true);
   o._child            = MO.Class.register(o, new MO.APtyBoolean('_child', 'has_child'), false);
   o._typeGroup        = MO.Class.register(o, [new MO.APtyString('_typeGroup'), new MO.AGetSet('_typeGroup')]);
   o._typeCode         = MO.Class.register(o, [new MO.APtyString('_typeCode'), new MO.AGetter('_typeCode')]);
   o._icon             = MO.Class.register(o, new MO.APtyString('_icon'));
   o._checked          = MO.Class.register(o, new MO.APtyBoolean('_checked'), false);
   o._extended         = MO.Class.register(o, new MO.APtyBoolean('_extended'), false);
   o._note             = MO.Class.register(o, new MO.APtyString('_note'));
   o._styleNormal      = MO.Class.register(o, new MO.AStyle('_styleNormal'));
   o._styleHover       = MO.Class.register(o, new MO.AStyle('_styleHover'));
   o._styleSelect      = MO.Class.register(o, new MO.AStyle('_styleSelect'));
   o._styleImage       = MO.Class.register(o, new MO.AStyle('_styleImage'));
   o._styleIcon        = MO.Class.register(o, new MO.AStyle('_styleIcon'));
   o._styleIconDisable = MO.Class.register(o, new MO.AStyle('_styleIconDisable'));
   o._styleLabel       = MO.Class.register(o, new MO.AStyle('_styleLabel'));
   o._styleCell        = MO.Class.register(o, new MO.AStyle('_styleCell'));
   o._tree             = MO.Class.register(o, new MO.AGetSet('_tree'));
   o._level            = MO.Class.register(o, new MO.AGetter('_level'), 0);
   o._nodes            = MO.Class.register(o, new MO.AGetter('_nodes'));
   o._cells            = MO.Class.register(o, new MO.AGetter('_cells'));
   o._statusLinked     = false;
   o._statusDisplay    = true;
   o._statusSelected   = false;
   o._statusLoaded     = false;
   o._statusHover      = false;
   o._hNodePanel       = null;
   o._hCheck           = null;
   o._hImage           = null;
   o._hIcon            = null;
   o._hLabel           = null;
   o.onBuildPanel      = MO.FDuiTreeNode_onBuildPanel;
   o.onBuild           = MO.FDuiTreeNode_onBuild;
   o.onNodeEnter       = MO.Class.register(o, new MO.AEventMouseEnter('onNodeEnter'), MO.FDuiTreeNode_onNodeEnter);
   o.onNodeLeave       = MO.Class.register(o, new MO.AEventMouseLeave('onNodeLeave'), MO.FDuiTreeNode_onNodeLeave);
   o.onNodeClick       = MO.Class.register(o, new MO.AEventClick('onNodeClick'), MO.FDuiTreeNode_onNodeClick);
   o.construct         = MO.FDuiTreeNode_construct;
   o.type              = MO.FDuiTreeNode_type;
   o.setTypeCode       = MO.FDuiTreeNode_setTypeCode;
   o.setLabel          = MO.FDuiTreeNode_setLabel;
   o.setNote           = MO.FDuiTreeNode_setNote;
   o.setLevel          = MO.FDuiTreeNode_setLevel;
   o.cell              = MO.FDuiTreeNode_cell;
   o.check             = MO.FDuiTreeNode_check;
   o.setCheck          = MO.FDuiTreeNode_setCheck;
   o.setImage          = MO.FDuiTreeNode_setImage;
   o.calculateImage    = MO.FDuiTreeNode_calculateImage;
   o.setIcon           = MO.FDuiTreeNode_setIcon;
   o.get               = MO.FDuiTreeNode_get;
   o.set               = MO.FDuiTreeNode_set;
   o.isFolder          = MO.FDuiTreeNode_isFolder;
   o.hasChild          = MO.FDuiTreeNode_hasChild;
   o.topNode           = MO.FDuiTreeNode_topNode;
   o.topNodeByType     = MO.FDuiTreeNode_topNodeByType;
   o.nodeCount         = MO.FDuiTreeNode_nodeCount;
   o.show              = MO.FDuiTreeNode_show;
   o.hide              = MO.FDuiTreeNode_hide;
   o.select            = MO.FDuiTreeNode_select;
   o.extend            = MO.FDuiTreeNode_extend;
   o.extendAll         = MO.FDuiTreeNode_extendAll;
   o.searchLast        = MO.FDuiTreeNode_searchLast;
   o.createChild       = MO.FDuiTreeNode_createChild;
   o.appendChild       = MO.FDuiTreeNode_appendChild;
   o.appendNode        = MO.FDuiTreeNode_appendNode;
   o.push              = MO.FDuiTreeNode_push;
   o.remove            = MO.FDuiTreeNode_remove;
   o.removeSelf        = MO.FDuiTreeNode_removeSelf;
   o.removeChildren    = MO.FDuiTreeNode_removeChildren;
   o.reset             = MO.FDuiTreeNode_reset;
   o.click             = MO.FDuiTreeNode_click;
   o.refreshStyle      = MO.FDuiTreeNode_refreshStyle;
   o.propertyLoad      = MO.FDuiTreeNode_propertyLoad;
   o.propertySave      = MO.FDuiTreeNode_propertySave;
   o.loadConfig        = MO.FDuiTreeNode_loadConfig;
   o.dispose           = MO.FDuiTreeNode_dispose;
   o.innerDump         = MO.FDuiTreeNode_innerDump;
   return o;
}
MO.FDuiTreeNode_onBuildPanel = function FDuiTreeNode_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.Window.Builder.createTableRow(p, o.styleName('Panel'));
}
MO.FDuiTreeNode_onBuild = function FDuiTreeNode_onBuild(p){
   var o = this;
   var t = o._tree;
   var r = o.__base.FDuiContainer.onBuild.call(o, p);
   var hp = o._hPanel;
   o.attachEvent('onNodeEnter', hp, o.onNodeEnter);
   o.attachEvent('onNodeLeave', hp, o.onNodeLeave);
   o.attachEvent('onNodeClick', hp);
   var hnp = o._hNodePanel = MO.Window.Builder.appendTableCell(hp, o.styleName('Normal'));
   hnp.noWrap = true;
   var hi = o._hImage = MO.Window.Builder.appendIcon(hnp, o.styleName('Image'), null, 16, 16);
   hi._linkType = 'image';
   o.setImage();
   var hi = o._hIcon = MO.Window.Builder.appendIcon(hnp, null, null, 16, 16)
   hi._linkType = 'icon';
   o.setIcon(o._icon);
   if(t.dispChecked){
      var hc = o._hCheck = MO.Window.Builder.appendCheck(hnp);
      hc.width = 13;
      hc.height = 13;
      hc.style.borderWidth = 0;
      o.setCheck(o._checked);
      t.linkEvent(o, 'onNodeCheckClick', hc);
   }
   o._hLabel = MO.Window.Builder.appendText(hnp, o.styleName('Label'));
   o.setLabel(o._label);
   var cs = t._nodeColumns;
   if(cs){
      var cc = cs.count();
      for(var n = 0; n < cc; n++){
         var c = cs.value(n);
         var nc = MO.Class.create(MO.FDuiTreeNodeCell);
         nc._column = c;
         nc.build(p);
         o.push(nc);
      }
   }
}
MO.FDuiTreeNode_onNodeEnter = function FDuiTreeNode_onNodeEnter(e){
   var o = this;
   var tree = o._tree;
   if(!tree._focusNode || (tree._focusNode && (tree._focusNode != o))){
      o._statusHover = true;
      o.refreshStyle();
      var event = new MO.SEvent();
      event.tree = tree;
      event.node = o;
      tree.processNodeEnterListener(event);
      event.dispose();
   }
}
MO.FDuiTreeNode_onNodeLeave = function FDuiTreeNode_onNodeLeave(event){
   var o = this;
   var tree = o._tree;
   if(!tree._focusNode || (tree._focusNode && (tree._focusNode != o))){
      o._statusHover = false;
      o.refreshStyle();
      var event = new MO.SEvent();
      event.tree = tree;
      event.node = o;
      tree.processNodeLeaveListener(event);
      event.dispose();
   }
}
MO.FDuiTreeNode_onNodeClick = function FDuiTreeNode_onNodeClick(event){
   var o = this;
   var tree = o._tree;
   var esn = event.hSender.tagName;
   if('INPUT' == esn){
      return;
   }
   var isImg = false;
   if('IMG' == esn){
      isImg = ('image' == event.hSender._linkType);
   }
   var isParent = false;
   var find = tree._focusNode;
   while(find){
      if(find == o){
         isParent = true;
         break;
      }
      find = find.parent;
   }
   if(!isImg || (isImg && (isParent || !o._child))){
      tree.selectNode(o, true);
   }
   if(!o._statusLoaded && o._child){
      o.extend(true);
      if(!isImg){
         tree.nodeClick(o);
      }
   }else{
      if(o._child){
        if(o.isFolder()){
           o.extend(!o._extended);
        }else{
            if(isImg){
               o.extend(!o._extended);
            }else{
               o.extend(true);
            }
        }
      }
      if((isImg && isParent) || (isImg && !o._child) || !isImg){
         tree.nodeClick(o);
      }
   }
}
MO.FDuiTreeNode_construct = function FDuiTreeNode_construct(){
   var o = this;
   o.__base.FDuiContainer.construct.call(o);
}
MO.FDuiTreeNode_type = function FDuiTreeNode_type(){
   var o = this;
   var tree = o._tree;
   var typeCode = o._typeCode;
   var type = null;
   if(!MO.Lang.String.isEmpty(typeCode)){
      type = tree.findType(typeCode);
   }
   return type;
}
MO.FDuiTreeNode_setTypeCode = function FDuiTreeNode_setTypeCode(value){
   var o = this;
   o._typeCode = value;
   o.setIcon();
}
MO.FDuiTreeNode_setLabel = function FDuiTreeNode_setLabel(p){
   var o = this;
   o.__base.FDuiContainer.setLabel.call(o, p)
   var h = o._hLabel;
   if(h){
      var s = '';
      if(!MO.Lang.String.isEmpty(o._label)){
         s = '&nbsp;' + o._label;
      }
      if(!MO.Lang.String.isEmpty(o._tag)){
         s += '&nbsp;<FONT color=blue>(' + o._tag + ')</FONT>';
      }
      if(!MO.Lang.String.isEmpty(o._note)){
         s += '&nbsp;<FONT color=green>[ ' + o._note + ' ]</FONT>';
      }
      h.innerHTML = s;
   }
}
MO.FDuiTreeNode_setNote = function FDuiTreeNode_setNote(p){
   var o = this;
   o._note = MO.Lang.String.empty(p);
   o.setLabel(o._label);
}
MO.FDuiTreeNode_setLevel = function FDuiTreeNode_setLevel(level){
   var o = this;
   o._level = level;
   var hPanel = o._hNodePanel;
   if(hPanel){
      hPanel.style.paddingLeft = (o._tree._indent * level) + 'px';
   }
}
MO.FDuiTreeNode_cell = function FDuiTreeNode_cell(p){
   return this._cells.get(p);
}
MO.FDuiTreeNode_check = function FDuiTreeNode_check(){
   return this._checked;
}
MO.FDuiTreeNode_setCheck = function FDuiTreeNode_setCheck(p){
   var o = this;
   o._checked = p;
   var attributes = o._attributes;
   if(attributes){
      var value = attributes.get('checked');
      if(!MO.Lang.String.isEmpty(value)){
        o._checked = MO.Lang.Boolean.isTrue(value);
        if(o._hCheck){
            o._hCheck._checked = o._checked;
        }
      }
   }
}
MO.FDuiTreeNode_setImage = function FDuiTreeNode_setImage(){
   var o = this;
   var tree = o._tree;
   var hImage = o._hImage;
   var icon = o._child ? tree._iconPlus : tree._iconNode;
   hImage.src = MO.RResource.iconPath(icon);
}
MO.FDuiTreeNode_calculateImage = function FDuiTreeNode_calculateImage(){
   var o = this;
   var tree = o._tree;
   var hImage = o._hImage;
   var icon = null;
   var count = o.nodeCount();
   if(count){
      icon = o._extended ? tree._iconMinus : tree._iconPlus;
   }else{
      icon = tree._iconNode;
   }
   hImage.src = MO.RResource.iconPath(icon);
}
MO.FDuiTreeNode_setIcon = function FDuiTreeNode_setIcon(icon){
   var o = this;
   o._icon = icon;
   var hIcon = o._hIcon;
   if(hIcon){
      var iconPath = null;
      if(o._icon){
         iconPath = icon;
      }else{
         var type = o.type();
         if(type){
            iconPath = type.icon();
         }
      }
      if(iconPath){
         MO.Window.Html.displaySet(hIcon, true);
         hIcon.style.width = 16;
         hIcon.style.height = 16;
         hIcon.className = o._valid ? o.styleName('Icon') : o.styleName('IconDisable');
         hIcon.src = MO.RResource.iconPath(iconPath);
      }else{
         MO.Window.Html.displaySet(hIcon, false);
      }
   }
}
MO.FDuiTreeNode_get = function FDuiTreeNode_get(n){
   return this._attributes.get(n);
}
MO.FDuiTreeNode_set = function FDuiTreeNode_set(n, v){
   this._attributes.set(n, v);
}
MO.FDuiTreeNode_isFolder = function FDuiTreeNode_isFolder(){
   var o = this;
   var type = o.type();
   if(type){
      var storage = type.storage()
      return storage == 'collections';
   }
   return false;
}
MO.FDuiTreeNode_hasChild = function FDuiTreeNode_hasChild(){
   var o = this;
   if(o._child){
      var ns = o._nodes;
      if(ns){
         return !ns.isEmpty();
      }
   }
   return false;
}
MO.FDuiTreeNode_topNode = function FDuiTreeNode_topNode(){
   var r = this;
   while(r._parent){
      if(MO.Class.isClass(r._parent, FDuiTreeNode)){
         r = r._parent;
      }else{
         break;
      }
   }
   return r;
}
MO.FDuiTreeNode_topNodeByType = function FDuiTreeNode_topNodeByType(t){
   var r = this;
   while(r){
      if(r._typeCode == t){
         return r;
      }
      r = r._parent;
   }
   return null;
}
MO.FDuiTreeNode_nodeCount = function FDuiTreeNode_nodeCount(){
   var o = this;
   var nodes = o._nodes
   if(nodes){
      return nodes.count();
   }
   return 0;
}
MO.FDuiTreeNode_show = function FDuiTreeNode_show(){
   var o = this;
   var tree = o._tree;
   MO.Window.Html.visibleSet(o._hPanel, true);
   var nodes = o._nodes;
   if(nodes){
      var count = nodes.count();
      for(var i = 0; i < count; i++){
         var node = nodes.at(i);
         if(!node._statusLinked){
            tree.appendNode(node, o);
         }
         if(node._statusDisplay){
            MO.Window.Html.visibleSet(node._hPanel, true);
            if(node._extended){
               node.show();
            }
         }
      }
   }
}
MO.FDuiTreeNode_hide = function FDuiTreeNode_hide(){
   var o = this;
   var t = o._tree;
   if(o._hPanel){
      MO.Window.Html.visibleSet(o._hPanel, false);
   }
   var cs = o._components;
   if(cs){
      var c = cs.count();
      for(var i = 0; i < c; i++){
         var cv = cs.value(i);
         if(cv){
            cv.hide();
         }
      }
   }
}
MO.FDuiTreeNode_select = function FDuiTreeNode_select(v){
   var o = this;
   o._statusSelected = v;
   if(v){
      o._statusHover = false;
   }
   o.refreshStyle();
}
MO.FDuiTreeNode_extend = function FDuiTreeNode_extend(p){
   var o = this;
   var t = o._tree;
   if(!o._statusLoaded && o._child){
      if(t.__loading){
         return;
      }
      t.loadNode(o);
   }else{
      if(o._hImage && !o.hasChild()){
         o._hImage.src = MO.RResource.iconPath(t._iconNode);
         return false;
      }
      o._extended = p;
      if(o._child && o._hImage){
         o._hImage.src = MO.RResource.iconPath(p ? t._iconMinus : t._iconPlus);
      }
      var ns = o._nodes;
      if(p){
         o.show();
      }else if(ns){
         var nc = ns.count();
         for(var i = nc - 1; i >= 0; i--){
            ns.get(i).hide();
         }
      }
   }
   t.refresh();
}
MO.FDuiTreeNode_extendAll = function FDuiTreeNode_extendAll(p){
   var o = this;
   o.extend(p);
   var cs = o._components;
   if(cs){
      var cc = cs.count();
      for(var i = 0; i < cc; i++){
         var c = cs.value(i);
         c.extendAll(p);
      }
   }
}
MO.FDuiTreeNode_searchLast = function FDuiTreeNode_searchLast(){
   var o = this;
   var nodes = o._nodes;
   if(nodes){
      var count = nodes.count();
      for(var i = count - 1; i >= 0; i--){
         var node = nodes.at(i)
         if(node._statusLinked){
            return node.searchLast();
         }
      }
   }
   return o;
}
MO.FDuiTreeNode_createChild = function FDuiTreeNode_createChild(xconfig){
   var o = this;
   var instance = null;
   if(xconfig.isName('Node') || xconfig.isName('TreeNode')){
      instance = MO.Class.create(MO.FDuiTreeNode);
      instance._tree = o._tree;
   }
   return instance;
}
MO.FDuiTreeNode_appendChild = function FDuiTreeNode_appendChild(control){
   var o = this;
   if(MO.Class.isClass(control, MO.FDuiTreeNodeCell)){
      o._hPanel.appendChild(control._hPanel);
   }
}
MO.FDuiTreeNode_appendNode = function FDuiTreeNode_appendNode(ndoe){
   var o = this;
   var tree = o._tree;
   o.push(ndoe);
   tree.appendNode(ndoe, o);
   o.extend(true);
}
MO.FDuiTreeNode_push = function FDuiTreeNode_push(component){
   var o = this;
   var tree = o._tree;
   o.__base.FDuiContainer.push.call(o, component);
   if(MO.Class.isClass(component, MO.FDuiTreeNode)){
      o._child = true;
      o._statusLoaded = true;
      var nodes = o._nodes;
      if(!nodes){
         nodes = o._nodes = new MO.TObjects();
      }
      component._tree = tree;
      component._parent = o;
      nodes.push(component);
      tree._allNodes.pushUnique(component);
   }
   if(MO.Class.isClass(component, MO.FDuiTreeNodeCell)){
      var cells = o._cells;
      if(!cells){
         cells = o._cells = new MO.TDictionary();
      }
      component._parent = o;
      component._tree = tree;
      component._node = o;
      cells.set(component._column._name, component);
   }
}
MO.FDuiTreeNode_remove = function FDuiTreeNode_remove(component){
   var o = this;
   if(MO.Class.isClass(component, MO.FDuiTreeNode)){
      o._nodes.remove(component);
   }
   o.__base.FDuiContainer.remove.call(o, component);
}
MO.FDuiTreeNode_removeSelf = function FDuiTreeNode_removeSelf(){
   var o = this;
   o._statusSelected = false;
   if(o._statusLinked){
      o.removeChildren();
      var parent = o._parent;
      if(MO.Class.isClass(parent, MO.FDuiTreeNode)){
         parent.remove(o);
         parent.calculateImage();
      }
      o._tree.freeNode(o);
   }
}
MO.FDuiTreeNode_removeChildren = function FDuiTreeNode_removeChildren(){
   var nodes = this._nodes;
   if(nodes){
      var count = nodes.count();
      for(var i = count - 1; i >= 0; i--){
         var node = nodes.get(i);
         if(node){
            node.removeSelf();
         }
      }
      nodes.clear();
   }
}
MO.FDuiTreeNode_reset = function FDuiTreeNode_reset(){
   var o = this;
   o._typeCode = null;
   o._guid = null;
   o._valid = true;
   o._icon = null;
   o._tag = null;
   o._note = null;
   o._child = false;
   o._checked = false;
   o._extended = true;
   o._statusLinked = false;
   o._statusDisplay = true;
   o._statusHover = false;
   o._extended = false;
   o._statusSelected = false;
   o._statusLoaded = false;
   o._level = 0;
}
MO.FDuiTreeNode_click = function FDuiTreeNode_click(){
   var o = this;
   var tree = o._tree;
   tree.selectNode(o, true);
   tree.nodeClick(o);
}
MO.FDuiTreeNode_refreshStyle = function FDuiTreeNode_refreshStyle(){
   var o = this;
   var cs = o._hPanel.cells;
   var c = cs.length;
   if(o._statusSelected){
      for(var i = 0; i < c; i++){
         cs[i].className = o.styleName('Select');
      }
   }else{
      if(o._statusHover){
         for(var i = 0; i < c; i++){
            cs[i].className = o.styleName('Hover');
         }
      }else{
         for(var i = 0; i < c; i++){
            cs[i].className = o.styleName('Normal');
         }
      }
   }
}
MO.FDuiTreeNode_propertyLoad = function FDuiTreeNode_propertyLoad(x){
   var o = this;
   var t = o._tree;
   o.__base.FDuiContainer.propertyLoad.call(o, x);
   var attributes = o._attributes;
   if(attributes){
      attributes.append(x.attrs);
   }
   var ap = x.get('attributes')
   if(ap){
      o._attributes.unpack(ap);
   }
}
MO.FDuiTreeNode_propertySave = function FDuiTreeNode_propertySave(x){
   var o = this;
   o.__base.FDuiContainer.propertySave.call(o, x);
   var t = o.type();
   x.set('type_code', t._code);
   x.set('storage', t._storage);
}
MO.FDuiTreeNode_loadConfig = function FDuiTreeNode_loadConfig(x){
   var o = this;
   o.reset();
   o.propertyLoad(x);
   o.setLabel(o._label);
   o.setCheck(o._checked);
   o.setImage();
   o.setIcon(o._icon);
}
MO.FDuiTreeNode_dispose = function FDuiTreeNode_dispose(){
   var o = this;
   o._hNodePanel = null;
   o._hImage = null;
   o._hIcon = null;
   o._hCheck = null;
   o._hLabel = null;
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiTreeNode_innerDump = function FDuiTreeNode_innerDump(s){
   var o = this;
   s.append(RClass.name(o));
   s.append('[level=',  o._level);
   if(o._typeCode){
      s.append(' type=',  o._typeCode.name);
   }
   s.append(', icon=',  o._icon);
   s.append(', caption=', o._label);
   s.append(', child=', o._child);
   s.append(']');
}
MO.FDuiTreeNode_reload = function FDuiTreeNode_reload(t){
   var o = this;
   if(t){
      o._tree.reload();
   }else{
      o._tree.reloadNode(o);
   }
}
MO.FDuiTreeNode_reloadParent = function FDuiTreeNode_reloadParent(){
   var o = this;
   if(o.parentNode){
      o._tree.reloadNode(o.parentNode);
   }else{
      o._tree.reload();
   }
}
MO.FDuiTreeNode_loadQuery = function FDuiTreeNode_loadQuery(x){
   var o = this;
   var sl = MO.Lang.String.nvl(x.get('label'), o._label);
   var sn = MO.Lang.String.nvl(x.get('note'), o._note);
   var text = '&nbsp;' + sl;
   if(!MO.Lang.String.isEmpty(sn)){
      text += '&nbsp;<FONT color=green>[ ' + sn + ' ]</FONT>';
   }
   o._hLabel.innerHTML = text;
   if(x.contains('visible')){
      o._statusDisplay = RBool.isTrue(x.get('visible'));
      o.setVisible(o._statusDisplay);
   }
}
MO.FDuiTreeNode_findByName = function FDuiTreeNode_findByName(n){
   var o = this;
   if(o.name == n){
      return o;
   }
   var cs = o.components;
   if(cs){
      var cc = cs.count;
      for(var i=0; i<cc; i++){
         var c = cs.value(i);
         if(c){
            if(c.name == n){
               return c;
            }
            if(c.components){
               var f = c.findByName(n);
               if(f){
                  return f;
               }
            }
         }
      }
   }
   return null;
}
MO.FDuiTreeNode_findByUuid = function FDuiTreeNode_findByUuid(u){
   var o = this;
   if(o._guid == u){
      return o;
   }
   var cs = o.components;
   if(cs){
      for(var n=0; n<cs.count; n++){
         var c = cs.value(n);
         if(c){
            if(c._guid == u){
               return c;
            }
            if(c.components){
               var f = c.findByUuid(u);
               if(f){
                  return f;
               }
            }
         }
      }
   }
   return null;
}
MO.FDuiTreeNode_pushChanged = function FDuiTreeNode_pushChanged(trd){
   var o = this;
    var d = new MO.TNode();
    d.attrs = o._attributes;
    if(d.attrs){
         d.attrs.set('checked', MO.Lang.Boolean.toString(o.check()));
    }
    trd.push(d);
   if(o.components && o.components.count > 0){
      var cc = o.components.count;
      for(var n = 0; n < cc; n++){
         var c = o.components.value(n);
         if(MO.Class.isClass(c, FDuiTreeNode)){
            c.pushChanged(trd);
         }
      }
   }
}
MO.FDuiTreeNode_checkChanged = function FDuiTreeNode_checkChanged(){
   var o = this;
   if(o._checked != o.check()){
      return true;
   }
   return false;
}
MO.FDuiTreeNode_getFullPath = function FDuiTreeNode_getFullPath(){
   var o = this;
   var path = '';
   if(o._label){
       path = o._label;
   }
    if(o.parent){
       var s = o.parent.getFullPath();
       if(!MO.Lang.String.isEmpty(s)){
           path = s + "/" + path;
       }
    }
    return path;
}
MO.FDuiTreeNodeCell = function FDuiTreeNodeCell(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl);
   o._stylePanel           = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleCell            = MO.Class.register(o, new MO.AStyle('_styleCell', 'Cell'));
   o._tree                 = null;
   o._column               = null;
   o._level                = 0;
   o._node                 = null;
   o._listenersClick       = MO.Class.register(o, new MO.AListener('_listenersClick', MO.EEvent.Click));
   o._listenersDoubleClick = MO.Class.register(o, new MO.AListener('_listenersDoubleClick', MO.EEvent.DoubleClick));
   o._hImage               = null;
   o._hIcon                = null;
   o._hLabel               = null;
   o.onBuildPanel          = MO.FDuiTreeNodeCell_onBuildPanel;
   o.onBuild               = MO.FDuiTreeNodeCell_onBuild;
   o.onClick               = MO.Class.register(o, new MO.AEventClick('onClick'), MO.FDuiTreeNodeCell_onClick);
   o.onDoubleClick         = MO.Class.register(o, new MO.AEventDoubleClick('onDoubleClick'), MO.FDuiTreeNodeCell_onDoubleClick);
   o.construct             = MO.FDuiTreeNodeCell_construct;
   o.icon                  = MO.FDuiTreeNodeCell_icon;
   o.setIcon               = MO.FDuiTreeNodeCell_setIcon;
   o.get                   = MO.FDuiTreeNodeCell_get;
   o.set                   = MO.FDuiTreeNodeCell_set;
   return o;
}
MO.FDuiTreeNodeCell_onBuildPanel = function FDuiTreeNodeCell_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.Window.Builder.createTableCell(p, o.styleName('Panel'));
}
MO.FDuiTreeNodeCell_onBuild = function FDuiTreeNodeCell_onBuild(p){
   var o = this;
   var t = o._tree;
   var r = o.__base.FDuiControl.onBuild.call(o, p);
   var h = o._hPanel;
   o.attachEvent('onClick', h);
   o.attachEvent('onDoubleClick', h);
}
MO.FDuiTreeNodeCell_onClick = function FDuiTreeNodeCell_onClick(event){
   var o = this;
   event.treeNode = o._node;
   event.treeColumn = o._column;
   event.treeNodeCell = o;
   o.processClickListener(p);
}
MO.FDuiTreeNodeCell_onDoubleClick = function FDuiTreeNodeCell_onDoubleClick(event){
   var o = this;
   event.treeNode = o._node;
   event.treeColumn = o._column;
   event.treeNodeCell = o;
   o.processDoubleClickListener(p);
}
MO.FDuiTreeNodeCell_construct = function FDuiTreeNodeCell_construct(){
   var o = this;
   o.__base.FDuiControl.construct.call(o);
   o._attributes = new MO.TAttributes();
}
MO.FDuiTreeNodeCell_icon = function FDuiTreeNodeCell_icon(){
   return o._icon;
}
MO.FDuiTreeNodeCell_setIcon = function FDuiTreeNodeCell_setIcon(p){
   var o = this;
   var h = o._hIcon;
   if(!h){
      h = o._hIcon = MO.Window.Builder.appendIcon(o._hPanel, null, null, 16, 16)
   }
   h.src = MO.RResource.iconPath(p);
}
MO.FDuiTreeNodeCell_get = function FDuiTreeNodeCell_get(){
}
MO.FDuiTreeNodeCell_set = function FDuiTreeNodeCell_set(p){
}
MO.FDuiTreeNodeType = function FDuiTreeNodeType(o){
   o = MO.Class.inherits(this, o, MO.FDuiComponent);
   o._storage    = MO.Class.register(o, [new MO.APtyString('_storage'), new MO.AGetSet('_storage')]);
   o._icon       = MO.Class.register(o, [new MO.APtyString('_icon'), new MO.AGetSet('_icon')]);
   o._service    = MO.Class.register(o, [new MO.APtyString('_service'), new MO.AGetSet('_service')]);
   o._action     = MO.Class.register(o, [new MO.APtyString('_action'), new MO.AGetSet('_action')]);
   o.construct   = MO.FDuiTreeNodeType_construct;
   o.get         = MO.FDuiTreeNodeType_get;
   o.set         = MO.FDuiTreeNodeType_set;
   o.innerDump   = MO.FDuiTreeNodeType_innerDump;
   return o;
}
MO.FDuiTreeNodeType_construct = function FDuiTreeNodeType_construct(){
   var o = this;
   o.__base.FDuiComponent.construct.call(o);
}
MO.FDuiTreeNodeType_get = function FDuiTreeNodeType_get(name){
   var attributes = this._attributes;
   return attributes ? attributes.get(name) : null;
}
MO.FDuiTreeNodeType_set = function FDuiTreeNodeType_set(name, value){
   var attributes = this._attributes;
   if(attributes){
      attributes.set(name, value)
   }
}
MO.FDuiTreeNodeType_innerDump = function FDuiTreeNodeType_innerDump(info){
   var o = this;
   info.append(MO.Class.dump(o));
   info.append('[code=',  o._code);
   info.append(', icon=',  o._icon);
   info.append(', service=', o._service);
   info.append(', action=', o._action);
   info.append(']');
}
MO.FDuiTreeView = function FDuiTreeView(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer);
   o._optionCheck        = MO.Class.register(o, new MO.APtyBoolean('_optionCheck'), false);
   o._indent             = MO.Class.register(o, new MO.APtyInteger('_indent'), 16);
   o._stylePanel         = MO.Class.register(o, new MO.AStyle('_stylePanel', 'Panel'));
   o._styleNodePanel     = MO.Class.register(o, new MO.AStyle('_styleNodePanel', 'NodePanel'));
   o._styleNodeForm      = MO.Class.register(o, new MO.AStyle('_styleNodeForm', 'NodeForm'));
   o._attributes         = MO.Class.register(o, new MO.AGetter('_attributes'));
   o._nodeTypes          = MO.Class.register(o, new MO.AGetter('_nodeTypes'));
   o._nodeColumns        = MO.Class.register(o, new MO.AGetter('_nodeColumns'));
   o._nodeLevels         = MO.Class.register(o, new MO.AGetter('_nodeLevels'));
   o._nodes              = MO.Class.register(o, new MO.AGetter('_nodes'));
   o._allNodes           = null;
   o._defaultNodeType    = null;
   o._focusNode          = MO.Class.register(o, new MO.AGetter('_focusNode'));
   o._loadingNode        = null;
   o._freeNodes          = null;
   o._iconPlus           = 'control.treeview.plus';
   o._iconMinus          = 'control.treeview.minus';
   o._iconNode           = 'control.treeview.node';
   o._iconLoading        = 'control.treeview.loading';
   o._hNodePanel         = null;
   o._hNodeForm          = null;
   o._hHeadLine          = null;
   o._hNodeRows          = null;
   o._listenersNodeEnter = MO.Class.register(o, new MO.AListener('_listenersNodeEnter'));
   o._listenersNodeLeave = MO.Class.register(o, new MO.AListener('_listenersNodeLeave'));
   o._listenersNodeClick = MO.Class.register(o, new MO.AListener('_listenersNodeClick'));
   o.onBuildPanel        = MO.FDuiTreeView_onBuildPanel;
   o.onBuild             = MO.FDuiTreeView_onBuild;
   o.onNodeClick         = MO.FDuiTreeView_onNodeClick;
   o.onClick             = MO.Class.register(o, new MO.AEventClick('onClick'), MO.FDuiTreeView_onClick);
   o.onNodeCheckClick    = MO.Class.register(o, new MO.AEventClick('onNodeCheckClick'), MO.FDuiTreeView_onNodeCheckClick);
   o.construct           = MO.FDuiTreeView_construct;
   o.hasNode             = MO.FDuiTreeView_hasNode;
   o.findType            = MO.FDuiTreeView_findType;
   o.findByName          = MO.FDuiTreeView_findByName;
   o.findByGuid          = MO.FDuiTreeView_findByGuid;
   o.createChild         = MO.FDuiTreeView_createChild;
   o.createNode          = MO.FDuiTreeView_createNode;
   o.appendChild         = MO.FDuiTreeView_appendChild;
   o.appendNode          = MO.FDuiTreeView_appendNode;
   o.appendNodes         = MO.FDuiTreeView_appendNodes;
   o.selectNode          = MO.FDuiTreeView_selectNode;
   o.push                = MO.FDuiTreeView_push;
   o.removeNode          = MO.FDuiTreeView_removeNode;
   o.removeNodes         = MO.FDuiTreeView_removeNodes;
   o.freeNode            = MO.FDuiTreeView_freeNode;
   o.clearNodes          = MO.FDuiTreeView_clearNodes;
   o.nodeClick           = MO.FDuiTreeView_nodeClick;
   o.calculateHeight     = MO.FDuiTreeView_calculateHeight;
   o.fetchChangedChecks  = MO.FDuiTreeView_fetchChangedChecks;
   o.extendAuto          = MO.FDuiTreeView_extendAuto;
   o.extendAll           = MO.FDuiTreeView_extendAll;
   o.loadNode            = MO.Method.empty;
   o.refresh             = MO.FDuiTreeView_refresh;
   o.filterNode          = MO.FDuiTreeView_filterNode;
   o.clearAllNodes       = MO.FDuiTreeView_clearAllNodes;
   o.clear               = MO.FDuiTreeView_clear;
   o.dispose             = MO.FDuiTreeView_dispose;
   return o;
}
MO.FDuiTreeView_onBuildPanel = function FDuiTreeView_onBuildPanel(e){
   var o = this;
   o._hPanel = MO.Window.Builder.createTable(e.hDocument, o.styleName('Panel'));
}
MO.FDuiTreeView_onBuild = function FDuiTreeView_onBuild(event){
   var o = this;
   o.__base.FDuiContainer.onBuild.call(o, event);
   var hPanel = o._hPanel;
   o.attachEvent('onClick', hPanel);
   var hr = MO.Window.Builder.appendTableRow(o._hPanel);
   var hc = MO.Window.Builder.appendTableCell(hr);
   var hnp = o._hNodePanel = MO.Window.Builder.appendDiv(hc, o.styleName('NodePanel'));
   var hnf = o._hNodeForm = MO.Window.Builder.appendTable(hnp, o.styleName('NodeForm'));
   hnf.width = '100%';
   o._hHeadLine = MO.Window.Builder.appendTableRow(hnf);
   o._hNodeRows = hnf.children[0];
   var node = o._loadingNode = MO.Class.create(MO.FDuiTreeNode);
   node._tree = o;
   node._label = MO.RContext.get('FDuiTreeView:loading');
   node._icon = o._iconLoading;
   node.build(event);
   var ns = o._nodes;
   if(!ns.isEmpty()){
      var nc = ns.count();
      for(var i = 0; i < nc; i++){
         o.appendNode(ns.get(i));
      }
   }
   o.extendAuto();
}
MO.FDuiTreeView_onNodeClick = function FDuiTreeView_onNodeClick(event){
   var o = this;
}
MO.FDuiTreeView_onClick = function FDuiTreeView_onClick(s, e){
   var o = this;
   if(s.hSender == o._hNodePanel){
      var node = o._focusNode;
      if(node){
         node.select(false);
         o._focusNode = null;
      }
   }
}
MO.FDuiTreeView_onNodeCheckClick = function FDuiTreeView_onNodeCheckClick(s, e){
   var o = this;
   if(s && MO.Class.isClass(s, FDuiTreeNode)){
      var f = s.check();
      var cs = s.controls;
      if(cs){
         for(var n = 0; n < cs.count; n++){
            var nd = cs.value(n);
            if(nd && MO.Class.isClass(nd, FDuiTreeNode)){
               nd.setCheck(f);
            }
         }
      }
      var p = s.parentNode;
      while(p){
         if(f){
            p.setCheck(f);
            p = p.parentNode;
         }else{
            var pcs = p.controls;
            var pcc = pcs.count;
            for(var n = 0; n < pcc; n++){
              var pnd = pcs.value(n);
               if(pnd && MO.Class.isClass(pnd, FDuiTreeNode)){
                  if(pnd.check()){
                     return;
                  }
               }
            }
            p.setCheck(false);
            p = p.parentNode;
         }
      }
   }
}
MO.FDuiTreeView_construct = function FDuiTreeView_construct(){
   var o = this;
   o.__base.FDuiContainer.construct.call(o);
   o._attributes = new MO.TAttributes();
   o._nodeTypes = new MO.TDictionary();
   o._nodeColumns = new MO.TDictionary();
   o._nodeLevels = new MO.TDictionary();
   o._nodes = new MO.TObjects();
   o._allNodes = new MO.TObjects();
   o._freeNodes = new MO.TObjects();
   o._defaultNodeType = MO.Class.create(MO.FDuiTreeNodeType);
}
MO.FDuiTreeView_hasNode = function FDuiTreeView_hasNode(){
   return this._rootNode.hasChild();
}
MO.FDuiTreeView_findType = function FDuiTreeView_findType(p){
   return this._nodeTypes.get(p);
}
MO.FDuiTreeView_findByName = function FDuiTreeView_findByName(p){
   var o = this;
   var ns = o._allNodes;
   var c = ns.count();
   if(c){
      for(var i = 0; i < c; i++){
         var n = ns.get(i);
         if(n._name == p){
            return n;
         }
      }
   }
}
MO.FDuiTreeView_findByGuid = function FDuiTreeView_findByGuid(guid){
   var o = this;
   var nodes = o._allNodes;
   var count = nodes.count();
   if(count){
      for(var i = 0; i < count; i++){
         var node = nodes.getAt(i);
         if(node._guid == guid){
            return node;
         }
      }
   }
}
MO.FDuiTreeView_createChild = function FDuiTreeView_createChild(x){
   var o = this;
   var r = null;
   var n = x.name();
   switch(n){
      case 'TreeColumn':
         r = MO.Class.create(MO.FDuiTreeColumn);
         break;
      case 'TreeLevel':
         r = MO.Class.create(MO.FDuiTreeLevel);
         break;
      case 'TreeNodeType':
         r = MO.Class.create(MO.FDuiTreeNodeType);
         break;
      case 'TreeNode':
         r = MO.Class.create(MO.FDuiTreeNode);
         break;
      default:
         throw new MO.TError(o, 'Unknown child type. (config={1})', x.xml());
   }
   r._tree = o;
   return r;
}
MO.FDuiTreeView_appendChild = function FDuiTreeView_appendChild(child){
   var o = this;
}
MO.FDuiTreeView_createNode = function FDuiTreeView_createNode(){
   var o = this;
   var node = o._freeNodes.pop();
   if(!node){
      node = MO.Class.create(MO.FDuiTreeNode);
      node._tree = o;
      node.build(o._hPanel);
   }
   MO.Window.Html.visibleSet(node._hPanel, true);
   o._allNodes.push(node);
   return node;
}
MO.FDuiTreeView_appendNode = function FDuiTreeView_appendNode(node, parent){
   var o = this;
   if(node._statusLinked){
      return;
   }
   var hPanel = node._hPanel;
   if(parent){
      var nl = parent.searchLast();
      var nr = nl._hPanel.rowIndex;
      if(hPanel.parentElement){
         if(hPanel.rowIndex > nr){
            nr++;
         }
         MO.Window.Html.tableMoveRow(o._hNodeForm, hPanel.rowIndex, nr);
      }else{
         o._hNodeRows.appendChild(hPanel);
         MO.Window.Html.tableMoveRow(o._hNodeForm, hPanel.rowIndex, nr+1);
      }
      node.setLevel(parent._level + 1);
   }else{
      o._hNodeRows.appendChild(hPanel);
      node.setLevel(0);
   }
   node._statusLinked = true;
}
MO.FDuiTreeView_appendNodes = function FDuiTreeView_appendNodes(parent, config){
   parent = MO.RObject.nvl(parent, this.workNode, this.rootNode);
   if(config && config._nodes){
      var count = config._nodes.count;
      if(count > 0){
         parent.child = true;
         parent.loaded = true;
         for(var n = 0; n < count; n++){
            var nc = config._nodes.get(n);
            if(nc && (nc.isName('Node') || nc.isName('TreeNode'))){
               var tn = MO.Class.create(FDuiTreeNode);
               tn.parent = parent;
               tn._tree = this;
               tn.loadConfig(nc);
               if(nc._nodes){
                  tn.icon = 'ctl.FBrowser_Folder';
               }else{
                  tn.icon = 'ctl.FBrowser_Txt';
               }
               tn.build(0);
               tn.hide();
               if(nc._nodes){
                  this.tempAppendNodes(tn, nc);
               }
               parent.push(tn);
               this._allNodes.push(tn);
            }
         }
      }
   }
   this.rootNode.extend(true);
}
MO.FDuiTreeView_selectNode = function FDuiTreeView_selectNode(n, s){
   var o = this;
   var fn = o._focusNode;
   if(s){
      if(n){
         if(fn){
            if(fn == n){
               return;
            }
            if(n.isFolder()){
               fn.select(true);
            }else{
               fn.select(false);
            }
         }
         if(!n.isFolder()){
            n.select(true);
            o._focusNode = n;
         }
      }
   }else{
      if(n){
         n.select(false);
      }
      if(fn){
         fn.select(false);
      }
   }
}
MO.FDuiTreeView_push = function FDuiTreeView_push(control){
   var o = this;
   o.__base.FDuiContainer.push.call(o, control);
   control._tree = o;
   if(MO.Class.isClass(control, MO.FDuiTreeColumn)){
      var columnName = control.name();
      o._nodeColumns.set(columnName, control);
   }else if(MO.Class.isClass(control, MO.FDuiTreeLevel)){
      var levelId = control.id();
      o._nodeLevels.set(levelId, control);
   }else if(MO.Class.isClass(control, MO.FDuiTreeNodeType)){
      var typeCode = control.code();
      o._nodeTypes.set(typeCode, control);
   }else if(MO.Class.isClass(control, MO.FDuiTreeNode)){
      o._nodes.push(control);
      o._allNodes.push(control);
      o.appendNode(control);
   }
}
MO.FDuiTreeView_removeNode = function FDuiTreeView_removeNode(oNode){
   var o = this;
   if(oNode){
      var nodes = new Array();
      var oLoopNode = null;
      var nCount = this._allNodes.length;
      for(var n=0; n<nCount; n++){
         oLoopNode = this._allNodes[n];
         if(oLoopNode != oNode){
            nodes[nodes.length] = oLoopNode;
         }
      }
      o._allNodes = nodes;
      var oParent = oNode.parent;
      if(oParent){
         nodes = new Array();
         nCount = oParent._nodes.length;
         for(var n=0; n<nCount; n++){
            oLoopNode = oParent._nodes[n];
            if(oLoopNode != oNode){
               nodes[nodes.length] = oLoopNode;
            }
         }
         oParent._nodes = nodes;
         oNode.parent.childrenHTML.removeChild(oNode.ownerHTML);
      }
      if(oParent._nodes.length == 0){
         oParent.imageHTML.src = o.imgEmpty;
      }
      return true;
   }
   return false;
}
MO.FDuiTreeView_removeNodes = function FDuiTreeView_removeNodes(node){
   var o = this;
   node = MO.RObject.nvl(node, o.workNode, o.rootNode);
   if(node.hasChild()){
      node.removeChildren();
   }
   node.remove();
}
MO.FDuiTreeView_freeNode = function FDuiTreeView_freeNode(node){
   var o = this;
   if(node._statusLinked){
      node._statusLinked = false;
      o._hNodeRows.removeChild(node._hPanel);
      var cells = node.cells();
      if(cells){
         var cellCount = cells.count();
         for(var i = 0; i < cellCount; i++){
            var cell = cells.at(i);
            cell.clearAllListeners();
         }
      }
      o._allNodes.remove(node);
      o._freeNodes.push(node);
   }
}
MO.FDuiTreeView_clearNodes = function FDuiTreeView_clearNodes(node){
   var o = this;
   if(node){
      node.removeChildren();
   }
   var nodes = new Array();
   var oLoopNode = null;
   var nCount = o._allNodes.length;
   for(var n = 0; n < nCount; n++){
      oLoopNode = o._allNodes[n];
      if(oLoopNode.parent != oNode){
         nodes[nodes.length] = oLoopNode;
      }else{
      oNode.childrenHTML.removeChild(oLoopNode.ownerHTML);
      }
   }
   oNode.imageHTML.src = o.imgEmpty ;
   o._allNodes = nodes;
   return true;
}
MO.FDuiTreeView_nodeClick = function FDuiTreeView_nodeClick(node){
   var o = this;
   var event = new MO.SEvent();
   event.tree = o;
   event.node = node;
   o.onNodeClick(event);
   o.processNodeClickListener(event);
   event.dispose();
}
MO.FDuiTreeView_calculateHeight = function FDuiTreeView_calculateHeight(){
   var o = this;
   var ns = o._allNodes;
   var c = ns.count();
   for(var i = 0; i < c; i++){
      var n = ns.get(i);
      if(MO.RHtml.displayGet(n._hPanel)){
         c++;
      }
   }
   return c * 29;
}
MO.FDuiTreeView_fetchChangedChecks = function FDuiTreeView_fetchChangedChecks(){
   var o = this;
   var treeView = new MO.TNode('TreeView');
   treeView.set('name', o.name);
   var rnd = MO.RObject.nvl(o.rootNode, o);
   var cs = rnd.controls;
   for(var n = 0; n < cs.count; n++){
      var c = cs.value(n);
      c.pushChanged(treeView);
   }
   return treeView;
}
MO.FDuiTreeView_extendAuto = function FDuiTreeView_extendAuto(n){
   var o = this;
   var ns = n ? n._nodes : o._nodes;
   if(ns){
      var nc = ns.count;
      if(nc){
         for(var i = 0; i < nc; i++){
            var fn = ns.get(i);
            fn.extend(fn._extended);
            if(fn._extended){
               o.extendAuto(fn);
            }
         }
      }
   }
}
MO.FDuiTreeView_extendAll = function FDuiTreeView_extendAll(n, f){
   var o = this;
   var ns = n ? n._nodes : o._nodes;
   if(ns){
      var nc = ns.count();
      if(nc){
         for(var i = 0; i < nc; i++){
            var fn = ns.get(i);
            fn.extend(f);
            o.extendAll(fn, f);
         }
      }
   }
}
MO.FDuiTreeView_refresh = function FDuiTreeView_refresh(){
   var o = this;
   if(o.parentObj){
      o.parentObj.style.height = o.calculateHeight();
   }
}
MO.FDuiTreeView_filterNode = function FDuiTreeView_filterNode(pl, pa){
   var o = this;
   var nc = o._allNodes.count();
   var nl = null;
   var na = null;
   if(!pl){
      for(var i = 0; i < nc; i++){
         var n = o._allNodes.get(i);
         if(!n.isDelete){
            n.show(true);
         }
      }
   }else{
      label = label.toLowerCase();
      var arAttr = null;
      var nAttrCount = 0;
      if(pa){
         pa = pa.toLowerCase();
         arAttr = pa.split("|");
         nAttrCount = arAttr.length;
      }
      for(var i = 0; i < nc; i++){
         var n = o._allNodes.get(i);
         if(!n.isDelete){
            nl = n.label.toLowerCase();
            if(arAttr){
               na = n.linkAttr.toLowerCase();
               for(var s = 0; s < nAttrCount; s++){
                  if(na.indexOf(arAttr[s]) != -1){
                     n.show((nl.indexOf(label) != -1));
                     break;
                  }
               }
            }else{
               n.show((nl.indexOf(label) != -1));
            }
         }
      }
   }
}
MO.FDuiTreeView_clearAllNodes = function FDuiTreeView_clearAllNodes(){
   var o = this;
   var nodes = o._nodes;
   if(nodes){
      var count = nodes.count();
      for(var i = count - 1; i >= 0; i--){
         nodes.get(i).removeSelf();
      }
      nodes.clear();
   }
   o._allNodes.clear();
   o._focusNode = null;
}
MO.FDuiTreeView_clear = function FDuiTreeView_clear(){
   var o = this;
   o.clearAllNodes();
}
MO.FDuiTreeView_dispose = function FDuiTreeView_dispose(){
   var o = this;
   o._nodes = MO.Lang.Object.dispose(o._nodes);
   o._allNodes = MO.Lang.Object.dispose(o._nodes);
   o._hNodePanel = null;
   o._hNodeForm = null;
   o._hHeadLine = null;
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiDialog = function FDuiDialog(o){
   o = MO.Class.inherits(this, o, MO.FDuiWindow, MO.MDuiDescribeFrame);
   o.construct = MO.FDuiDialog_construct;
   return o;
}
MO.FDuiDialog_construct = function FDuiDialog_construct(){
   var o = this;
   o.__base.FDuiWindow.construct.call(o);
}
MO.FDuiFormFrame = function FDuiFormFrame(o) {
   o = MO.Class.inherits(this, o, MO.FDuiForm, MO.MUiDataset);
   return o;
}
MO.FDuiFramePage = function FDuiFramePage(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer);
   o._styleContainer = MO.Class.register(o, new MO.AStyle('_styleContainer'));
   o._hContainer     = null;
   o.onBuildPanel    = MO.FDuiFramePage_onBuildPanel;
   o.onBuild         = MO.FDuiFramePage_onBuild;
   o.oeResize        = MO.FDuiFramePage_oeResize;
   o.appendChild     = MO.FDuiFramePage_appendChild;
   o.removeChild     = MO.FDuiFramePage_removeChild;
   return o;
}
MO.FDuiFramePage_onBuildPanel = function FDuiFramePage_onBuildPanel(p){
   var o = this;
   var hPanel = o._hPanel = MO.Window.Builder.createTableCell(p, o.styleName('Panel'));
   hPanel.vAlign = 'top';
   hPanel.height = '100%';
   if(o._backColor){
      hPanel.bgColor = o._backColor;
   }
}
MO.FDuiFramePage_onBuild = function FDuiFramePage_onBuild(p){
   var o = this;
   o.__base.FDuiContainer.onBuild.call(o, p);
   var h = o._hPanel;
   if(o._scrollCd != MO.EUiScroll.None){
      var hc = o._hContainer = MO.Window.Builder.appendDiv(h, o.styleName('Container'));
      MO.Dui.Control.setStyleScroll(hc, o._scrollCd);
   }else{
      o._hContainer = h;
   }
}
MO.FDuiFramePage_oeResize = function FDuiFramePage_oeResize(p){
   var o = this;
   var p = o._parent;
   if(p._directionCd == MO.EUiDirection.Horizontal){
   }else if(p._directionCd == MO.EUiDirection.Vertical){
   }else{
      throw new MO.TError(o, 'Unknown direcion type. (direction_cd={1})', o._directionCd);
   }
   return MO.EEventStatus.Continue;
}
MO.FDuiFramePage_appendChild = function FDuiFramePage_appendChild(control){
   var o = this;
   if(control._hPanel){
      o._hContainer.appendChild(control._hPanel);
   }
}
MO.FDuiFramePage_removeChild = function FDuiFramePage_removeChild(control){
   var o = this;
   o._hContainer.removeChild(control._hPanel);
}
MO.FDuiFrameSet = function FDuiFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FDuiContainer, MO.MDuiDescribeFrame);
   o._sizeCd       = MO.EUiSize.Fill;
   o._directionCd  = MO.Class.register(o, new MO.APtyEnum('_directionCd', null, MO.EUiDirection), MO.EUiDirection.Vertical);
   o._stylePanel   = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._frames       = null;
   o._hLine        = null;
   o.onBuildPanel  = MO.FDuiFrameSet_onBuildPanel;
   o.construct     = MO.FDuiFrameSet_construct;
   o.appendFrame   = MO.FDuiFrameSet_appendFrame;
   o.appendSpliter = MO.FDuiFrameSet_appendSpliter;
   o.appendChild   = MO.FDuiFrameSet_appendChild;
   o.dispose       = MO.FDuiFrameSet_dispose;
   return o;
}
MO.FDuiFrameSet_onBuildPanel = function FDuiFrameSet_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.Window.Builder.createTable(p, o.styleName('Panel'));
}
MO.FDuiFrameSet_construct = function FDuiFrameSet_construct(){
   var o = this;
   o.__base.FDuiContainer.construct.call(o);
   o._frames = new MO.TObjects();
}
MO.FDuiFrameSet_appendFrame = function FDuiFrameSet_appendFrame(frame){
   var o = this;
   if(o._directionCd == MO.EUiDirection.Horizontal){
      var hLine = o._hLine;
      if(!hLine){
         hLine = o._hLine = MO.Window.Builder.appendTableRow(o._hPanel);
      }
      frame.setPanel(hLine);
      var sizeWidth = frame._size.width;
      if(sizeWidth){
         frame._hPanel.width = sizeWidth;
      }
   }else if(o._directionCd == MO.EUiDirection.Vertical){
      var hLine = MO.Window.Builder.appendTableRow(o._hPanel);
      frame.setPanel(hLine);
      var sizeHeight = frame._size.height;
      if(sizeHeight){
         frame._hPanel.height = sizeHeight;
      }
   }else{
      throw new MO.TError(o, 'Unknown direcion type. (direction_cd={1})', o._directionCd);
   }
   o._frames.push(frame);
}
MO.FDuiFrameSet_appendSpliter = function FDuiFrameSet_appendSpliter(p){
   var o = this;
   var sp = null;
   if(p){
      sp = p;
   }else{
      sp = MO.Class.create(MO.FDuiFrameSpliter);
      sp.build(o._hPanel);
   }
   if(o._directionCd == MO.EUiDirection.Horizontal){
      o._hLine.appendChild(sp._hPanel);
      sp._hPanel.style.width = '4px';
   }else if(o._directionCd == MO.EUiDirection.Vertical){
      var hr = MO.Window.Builder.appendTableRow(o._hPanel);
      hr.appendChild(sp._hPanel);
      sp._hPanel.style.height = '4px';
   }else{
      throw new MO.TError(o, 'Unknown direcion type. (direction_cd={1})', o._directionCd);
   }
   o._frames.push(sp);
   return sp;
}
MO.FDuiFrameSet_appendChild = function FDuiFrameSet_appendChild(p){
   var o = this;
   p._frameset = o;
   if(MO.Class.isClass(p, MO.FDuiFramePage)){
      o.appendFrame(p);
      return;
   }else if(MO.Class.isClass(p, MO.FDuiFrameSpliter)){
      o.appendSpliter(p);
      return;
   }
   o.__base.FDuiContainer.appendChild.call(o, p);
}
MO.FDuiFrameSet_dispose = function FDuiFrameSet_dispose(){
   var o = this;
   o.__base.FDuiContainer.dispose.call(o);
}
MO.FDuiFrameSpliter = function FDuiFrameSpliter(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MO.MUiDragable);
   o._styleNormal  = MO.Class.register(o, new MO.AStyle('_styleNormal', 'Normal'));
   o._styleHover   = MO.Class.register(o, new MO.AStyle('_styleHover', 'Hover'));
   o._styleDraging = MO.Class.register(o, new MO.AStyle('_styleDraging', 'Draging'));
   o._directionCd  = MO.EUiDirection.Horizontal;
   o._alignCd      = MO.EUiAlign.Left;
   o._dragClientX  = 0;
   o._dragClientY  = 0;
   o._dragPanelX   = 0;
   o._dragPanelY   = 0;
   o._dragSizeX    = 0;
   o._dragSizeY    = 0;
   o._sizeMin      = 40;
   o._hDrag        = null;
   o._hSize        = null;
   o._hIcon        = null;
   o.onBuildPanel  = MO.FDuiFrameSpliter_onBuildPanel
   o.onBuild       = MO.FDuiFrameSpliter_onBuild;
   o.onMouseEnter  = MO.Class.register(o, new MO.AEventMouseEnter('onMouseEnter'), MO.FDuiFrameSpliter_onMouseEnter);
   o.onMouseLeave  = MO.Class.register(o, new MO.AEventMouseLeave('onMouseLeave'), MO.FDuiFrameSpliter_onMouseLeave);
   o.onDoubleClick = MO.Class.register(o, new MO.AEventDoubleClick('onDoubleClick'), MO.FDuiFrameSpliter_onDoubleClick);
   o.onDragStart   = MO.FDuiFrameSpliter_onDragStart;
   o.onDragMove    = MO.FDuiFrameSpliter_onDragMove;
   o.onDragStop    = MO.FDuiFrameSpliter_onDragStop;
   o.construct     = MO.FDuiFrameSpliter_construct;
   o.alignCd       = MO.FDuiFrameSpliter_alignCd;
   o.setAlignCd    = MO.FDuiFrameSpliter_setAlignCd;
   o.sizeHtml      = MO.FDuiFrameSpliter_sizeHtml;
   o.setSizeHtml   = MO.FDuiFrameSpliter_setSizeHtml;
   o.changeVisible = MO.FDuiFrameSpliter_changeVisible;
   o.dispose       = MO.FDuiFrameSpliter_dispose;
   return o;
}
MO.FDuiFrameSpliter_onBuildPanel = function FDuiFrameSpliter_onBuildPanel(p){
   var o = this;
   o._hPanel = MO.Window.Builder.createTableCell(p, o.styleName('Normal'));
}
MO.FDuiFrameSpliter_onBuild = function FDuiFrameSpliter_onBuild(p){
   var o = this;
   o.__base.FDuiControl.onBuild.call(o, p)
   var fs = o._frameset;
   var h = o._hPanel;
   h.style.zIndex = MO.EUiLayer.Drap;
   h.__linker = o;
   var hd = o._hDrag = MO.Window.Builder.createDiv(p, o.styleName('Draging'));
   hd.__linker = o;
   hd.style.position = 'absolute';
   MO.Window.Html.displaySet(hd, false);
   h.appendChild(hd);
   h.style.cursor = 'e-resize';
   h._plinker = o;
   o.attachEvent('onMouseEnter', h, o.onMouseEnter);
   o.attachEvent('onMouseLeave', h, o.onMouseLeave);
   o.attachEvent('onDoubleClick', h);
   o._hIcon = MO.Window.Builder.appendIcon(h, null, 'control.FSpliter_Left');
   MO.Console.find(MO.FDragConsole).register(o);
}
MO.FDuiFrameSpliter_onMouseEnter = function FDuiFrameSpliter_onMouseEnter(p){
   var o = this;
   var hc = o._hPanel;
   hc.className = o.styleName('Hover');
}
MO.FDuiFrameSpliter_onMouseLeave = function FDuiFrameSpliter_onMouseLeave(p){
   var o = this;
   var hc = o._hPanel;
   hc.className = o.styleName('Normal');
}
MO.FDuiFrameSpliter_onDoubleClick = function FDuiFrameSpliter_onDoubleClick(p){
   this.changeVisible();
}
MO.FDuiFrameSpliter_onDragStart = function FDuiFrameSpliter_onDragStart(e){
   var o = this;
   var hc = o._hPanel;
   var hd = o._hDrag;
   var hds = hd.style;
   if(o._directionCd == MO.EUiDirection.Horizontal){
      o._dragClientX = e.clientX;
      o._dragPanelX = MO.Window.Html.clientX(hc);
      o._dragSizeX = o._hSize.offsetWidth;
      hds.cursor = MO.EMouseCursor.HSize;
   }else if(o._directionCd == MO.EUiDirection.Vertical){
      o._dragClientY = e.clientY;
      o._dragPanelY = MO.Window.Html.clientY(hc);
      o._sizeY = o._hSize.offsetHeight;
      hds.cursor = MO.EMouseCursor.VSize;
   }else{
      throw new MO.TError(o, 'Unknown direction type. (direction_cd={1})', o._directionCd);
   }
   hds.left = MO.Window.Html.clientX(hc) + 'px';
   hds.top = MO.Window.Html.clientY(hc) + 'px';
   hds.width = hc.offsetWidth + 'px';
   hds.height = hc.offsetHeight + 'px';
   MO.Window.Html.visibleSet(hd, true);
   MO.Window.setOptionSelect(false);
   MO.Window.disable();
}
MO.FDuiFrameSpliter_onDragMove = function FDuiFrameSpliter_onDragMove(e){
   var o = this;
   var hd = o._hDrag;
   if(o._directionCd == MO.EUiDirection.Horizontal){
      var x = e.clientX - o._dragClientX;
      var cx = o._dragPanelX + x;
      if(cx > o._sizeMin){
         hd.style.left = cx + 'px';
      }
   }else if(o._directionCd == MO.EUiDirection.Vertical){
      var y = e.clientY - o._dragClientY;
      var cy = o._dragPanelY + y;
      if(cy > o._sizeMin){
         hd.style.top = cy + 'px';
      }
   }else{
      throw new MO.TError(o, 'Unknown direction type. (direction_cd={1})', o._directionCd);
   }
}
MO.FDuiFrameSpliter_onDragStop = function FDuiFrameSpliter_onDragStop(e){
   var o = this;
   var hd = o._hDrag;
   if(o._directionCd == MO.EUiDirection.Horizontal){
      var x = e.clientX - o._dragClientX;
      var cx = 0;
      if(o._alignCd === MO.EUiAlign.Left){
         cx = o._dragSizeX + x;
      }else if(o._alignCd === MO.EUiAlign.Right){
         cx = o._dragSizeX - x;
      }else{
         throw new MO.TError(o, 'Unknown align type. (align_cd={1})', o._alignCd);
      }
      if(cx > o._sizeMin){
         o._hSize.style.width = cx + 'px';
      }
   }else if(o._directionCd == MO.EUiDirection.Vertical){
      var y = e.clientY - o._dragClientY;
      var cy = o._dragSizeY + y;
      if(o._alignCd === MO.EUiAlign.Top){
         cy = o._dragSizeY + y;
      }else if(o._alignCd === MO.EUiAlign.Bottom){
         cy = o._dragSizeY - y;
      }else{
         throw new MO.TError(o, 'Unknown align type. (align_cd={1})', o._alignCd);
      }
      if(cy > o._sizeMin){
         o._hSize.style.width = cy + 'px';
      }
   }else{
      throw new MO.TError(o, 'Unknown direction type. (direction_cd={1})', o._directionCd);
   }
   MO.Window.Html.visibleSet(hd, false);
   MO.Window.enable();
   MO.Window.setOptionSelect(true);
}
MO.FDuiFrameSpliter_construct = function FDuiFrameSpliter_construct(){
   var o = this;
   o.__base.FDuiControl.construct.call(o);
}
MO.FDuiFrameSpliter_alignCd = function FDuiFrameSpliter_alignCd(){
   return this._alignCd;
}
MO.FDuiFrameSpliter_setAlignCd = function FDuiFrameSpliter_setAlignCd(alignCd){
   var o = this;
   if(alignCd == MO.EUiAlign.Left){
      o._hIcon.src = MO.RResource.iconPath('control.FSpliter_Left');
   }else if(alignCd == MO.EUiAlign.Right){
      o._hIcon.src = MO.RResource.iconPath('control.FSpliter_Right');
   }else{
      throw new MO.TError(o, 'Align type is invalid.');
   }
   o._alignCd = alignCd;
}
MO.FDuiFrameSpliter_sizeHtml = function FDuiFrameSpliter_sizeHtml(){
   return this._hSize;
}
MO.FDuiFrameSpliter_setSizeHtml = function FDuiFrameSpliter_setSizeHtml(p){
   this._hSize = p;
}
MO.FDuiFrameSpliter_changeVisible = function FDuiFrameSpliter_changeVisible(){
   var o = this;
   var hs = o._hSize;
   if(!hs){
      return;
   }
   var c = null;
   var v = MO.Window.Html.visibleGet(hs);
   if(v){
      MO.Window.Html.visibleSet(hs, false);
      if(o._alignCd == MO.EUiAlign.Left){
         c = MO.EUiAlign.Right;
      }else if(o._alignCd == MO.EUiAlign.Right){
         c = MO.EUiAlign.Left;
      }
   }else{
      RHtml.visibleSet(hs, true);
      if(o._alignCd == MO.EUiAlign.Left){
         c = MO.EUiAlign.Left;
      }else if(o._alignCd == MO.EUiAlign.Right){
         c = MO.EUiAlign.Right;
      }
   }
   if(c == MO.EUiAlign.Left){
      o._hIcon.src = MO.RResource.iconPath('control.FSpliter_Left');
   }else if(c == MO.EUiAlign.Right){
      o._hIcon.src = MO.RResource.iconPath('control.FSpliter_Right');
   }
   MO.Console.find(MO.FDuiWorkspaceConsole).resize();
}
MO.FDuiFrameSpliter_dispose = function FDuiFrameSpliter_dispose(){
   var o = this;
   o._hDrag = MO.Window.Html.free(o._hDrag);
   o._hSize = MO.Window.Html.free(o._hSize);
   o.__base.FDuiControl.dispose.call(o);
}
MO.FDuiPickerFrame = function FDuiPickerFrame(o) {
   o = MO.Class.inherits(this, o, MO.FDuiWindow, MO.MUiDataset);
   o._table      = null;
   o.onBuild     = MO.FDuiPickerFrame_onBuild;
   o.construct   = MO.FDuiPickerFrame_construct;
   o.createChild = MO.FDuiPickerFrame_createChild;
   o.push        = MO.FDuiPickerFrame_push;
   return o;
}
MO.FDuiPickerFrame_onBuild = function FDuiPickerFrame_onBuild(event){
   var o = this;
   o.__base.FDuiWindow.onBuild.call(o, event);
   var table = o._table;
   table.build(o);
   table._hPanel.style.width = '100%';
   table._hPanel.style.height = '100%';
   table._hDataPanel.style.backgound = '#CCCCCC';
   table.setPanel(o._hPanelForm);
   table.psRefresh();
}
MO.FDuiPickerFrame_construct = function FDuiPickerFrame_construct(){
   var o = this;
   o.__base.FDuiWindow.construct.call(o);
   var table = o._table = MO.Class.create(MO.FDuiTable);
   table._displayTitle = false;
   table._optionColumnSelect = false;
}
MO.FDuiPickerFrame_createChild = function FDuiPickerFrame_createChild(xconfig){
   var o = this;
   var control = o._table.createChild(xconfig);
   return control;
}
MO.FDuiPickerFrame_push = function FDuiPickerFrame_push(control){
   var o = this;
   o._table.push(control);
}
MO.FDuiTableFrame = function FDuiTableFrame(o) {
   o = MO.Class.inherits(this, o, MO.FDuiTable, MO.MUiDataset);
   o._unitFrameName = MO.Class.register(o, [new MO.APtyString('_unitFrameName'), new MO.AGetSet('_unitFrameName')]);
   o._unitWhere     = MO.Class.register(o, [new MO.APtyString('_unitWhere'), new MO.AGetSet('_unitWhere')]);
   return o;
}
MO.FDuiWindow = function FDuiWindow(o){
   o = MO.Class.inherits(this, o, MO.FDuiLayout, MO.MMouseCapture);
   o._statusVisible      = false;
   o._stylePanel         = MO.Class.register(o, new MO.AStyle('_stylePanel'));
   o._styleBodyForm      = MO.Class.register(o, new MO.AStyle('_styleBodyForm'));
   o._styleTitleForm     = MO.Class.register(o, new MO.AStyle('_styleTitleForm'));
   o._styleTitlePanel    = MO.Class.register(o, new MO.AStyle('_styleTitlePanel'));
   o._styleBodyPanel     = MO.Class.register(o, new MO.AStyle('_styleBodyPanel'));
   o._styleStatusPanel   = MO.Class.register(o, new MO.AStyle('_styleStatusPanel'));
   o._mousePosition      = null;
   o._mouseControl       = null;
   o.onBuildPanel        = MO.FDuiWindow_onBuildPanel;
   o.onBuild             = MO.FDuiWindow_onBuild;
   o.onCloseClick        = MO.Class.register(o, new MO.AEventClick('onCloseClick'), MO.FDuiWindow_onCloseClick);
   o.onMouseCaptureStart = MO.FDuiWindow_onMouseCaptureStart;
   o.onMouseCapture      = MO.FDuiWindow_onMouseCapture;
   o.onMouseCaptureStop  = MO.FDuiWindow_onMouseCaptureStop;
   o.construct      = MO.FDuiWindow_construct;
   o.setVisible     = MO.FDuiWindow_setVisible;
   o.setLabel       = MO.FDuiWindow_setLabel;
   o.showPosition   = MO.FDuiWindow_showPosition;
   return o;
}
MO.FDuiWindow_onBuildPanel = function FDuiWindow_onBuildPanel(event){
   var o = this;
   o._hPanel = MO.Window.Builder.createDiv(event, o.styleName('Panel'));
   var hForm = o._hPanelForm = MO.Window.Builder.createTable(event, o.styleName('Form'), null, 0, 1);
   hForm.style.width = '100%';
   hForm.style.height = '100%';
}
MO.FDuiWindow_onBuild = function FDuiWindow_onBuild(event){
   var o = this;
   o.__base.FDuiLayout.onBuild.call(o, event);
   var hPanel = o._hPanel;
   var hBodyForm = o._hBodyForm = MO.Window.Builder.appendTable(hPanel, o.styleName('BodyForm'));
   var hTitlePanel = o._hTitlePanel = MO.Window.Builder.appendTableRowCell(hBodyForm, o.styleName('TitlePanel'));
   hTitlePanel.__linker = o;
   var hBodyPanel = o._hBodyPanel = MO.Window.Builder.appendTableRowCell(hBodyForm, o.styleName('BodyPanel'));
   hBodyPanel.vAlign = 'top'
   o._hStatusPanel = MO.Window.Builder.appendTableRowCell(hBodyForm, o.styleName('StatusPanel'));
   var hTitleForm = o._hTitleForm = MO.Window.Builder.appendTable(hTitlePanel, o.styleName('TitleForm'));
   var hTitleLine = MO.Window.Builder.appendTableRow(hTitleForm);
   var hTitle = o._hTitle = MO.Window.Builder.appendTableCell(hTitleLine);
   hTitle.align = 'center';
   MO.Window.Html.textSet(hTitle, o._label);
   var hTitleButton = MO.Window.Builder.appendTableCell(hTitleLine);
   hTitleButton.width = 20;
   hTitleButton.style.cursor = 'pointer';
   MO.Window.Builder.appendIcon(hTitleButton, null, 'editor.common.close');
   o.attachEvent('onCloseClick', hTitleButton);
   hBodyPanel.appendChild(o._hPanelForm);
   o.refreshSize();
}
MO.FDuiWindow_onCloseClick = function FDuiWindow_onCloseClick(event){
   this.hide();
}
MO.FDuiWindow_onMouseCaptureStart = function FDuiWindow_onMouseCaptureStart(event){
   var o = this;
   var hPanel = o._hPanel;
   o._mouseDraging = true;
   o._mousePosition.set(event.x, event.y);
   o._mouseControl.set(hPanel.offsetLeft, hPanel.offsetTop);
   MO.Window.Html.cursorSet(hPanel, MO.EUiCursor.Move);
}
MO.FDuiWindow_onMouseCapture = function FDuiWindow_onMouseCapture(event){
   var o = this;
   var hPanel = o._hPanel;
   if(o._mouseDraging){
      var cx = event.x - o._mousePosition.x;
      var cy = event.y - o._mousePosition.y;
      hPanel.style.left = (o._mouseControl.x + cx) + 'px';
      hPanel.style.top = (o._mouseControl.y + cy) + 'px';
   }
}
MO.FDuiWindow_onMouseCaptureStop = function FDuiWindow_onMouseCaptureStop(event){
   var o = this;
   var hPanel = o._hPanel;
   o._mouseDraging = false;
   MO.Window.Html.cursorSet(hPanel, MO.EUiCursor.Auto);
}
MO.FDuiWindow_construct = function FDuiWindow_construct(){
   var o = this;
   o.__base.FDuiLayout.construct.call(o);
   o._mousePosition = new MO.SPoint2();
   o._mouseControl = new MO.SPoint2();
   MO.Console.find(MO.FMouseConsole).register(o);
}
MO.FDuiWindow_setVisible = function FDuiWindow_setVisible(visible){
   var o = this;
   if(o._statusVisible == visible){
      return;
   }
   var hPanel = o.panel(MO.EPanel.Container);
   if(visible){
      MO.Window._hContainer.appendChild(hPanel);
   }else{
      MO.Window._hContainer.removeChild(hPanel);
   }
   o._statusVisible = visible;
}
MO.FDuiWindow_setLabel = function FDuiWindow_setLabel(label){
   var o = this;
   o.__base.FDuiLayout.setLabel.call(o, label)
   MO.RHtml.textSet(o._hTitle, o._label);
}
MO.FDuiWindow_showPosition = function FDuiWindow_showPosition(positionCd){
   var o = this;
   var hPanel = o._hPanel;
   o.show();
   if(positionCd == MO.EUiPosition.Center){
      var width = o._hPanel.offsetWidth;
      var height = o._hPanel.offsetHeight;
      var left = (window.document.body.offsetWidth - width) / 2;
      var top = (window.document.body.offsetHeight - height) / 2;
      o._hPanel.style.left = left + 'px';
      o._hPanel.style.top = top + 'px';
   }else{
      throw new MO.TError(o, 'Invalid position.');
   }
}
MO.FDuiWindow_doFocus = function FDuiWindow_doFocus(){
   var o = this;
   if(o.searchControls && o.searchControls.count > 0){
      var cs = o.searchControls;
      for(var n = 0; n < cs.count; n++){
         var c = o.searchControls.get(0)
         if(MO.Class.isClass(c, MEditValue)){
            c.focus();
         }
      }
   }
}
MO.FDuiWindow_oeVisible = function FDuiWindow_oeVisible(e){
   var o = this;
   o.__base.FDuiLayout.oeVisible.call(o, e);
   if(e.isAfter()){
      o.hPanel.style.zIndex = RLayer.next(ELayer.Window);
      o.hPanel.style.display = 'block';
   }
}
MO.FDuiWindow_panel = function FDuiWindow_panel(t){
   var o = this;
   if(EPanel.Display == t || EPanel._border == t || EPanel.Size == t){
      return o.hPanel;
   }else if(EPanel.Move == t){
      return o.hTitleForm;
   }
   return o.__base.FDuiLayout.panel.call(o, t);
}
MO.FDuiWindow_dump = function FDuiWindow_dump(oCtl, sLeft){
   var sDump = '';
   if(!oCtl){
      oCtl = this;
   }
   if(!sLeft){
      sLeft = '   ';
   }
   sDump += oCtl.className + '\n';
   if(oCtl.children){
      var arChildren = oCtl.children;
      for(var n=0; n<arChildren.length; n++){
         sDump += sLeft + this.dump(arChildren[n], sLeft + '   ');
      }
   }
   return sDump;
}
MO.FDuiWindow_pushAllControl = function FDuiWindow_pushAllControl(oCtl){
   if(!this.allControls){this.allControls = new Array();}
   this.allControls.push(oCtl);
}
MO.FDuiWindow_control = function FDuiWindow_control(sName){
   if(this.allControls){
      for(var n=0; n<this.allControls.length; n++){
         if(this.allControls[n].name == sName){
            return this.allControls[n];
         }
      }
   }
   return null;
}
MO.FDuiWindow_restore = function FDuiWindow_restore(){
   this.max(true);
}
MO.FDuiWindow_processResize = function FDuiWindow_processResize(){
   if(!SystemManager.runMode){
      var oRect = this.rect()
      this.width = oRect.width();
      this.height = oRect.height();
   }
   this.processEvent(this, IWindowEvent.RESIZE);
}
MO.FDuiWindow_fillAllControl = function FDuiWindow_fillAllControl(){
   var oControl = null;
   var nCount = this.controls.size();
   for(var n=0; n<nCount; n++){
      oControl = this.controls.value(n);
      if(oControl.fill){
         oControl.fill();
      }
   }
}
MO.FDuiWindow_refresh = function FDuiWindow_refresh(bConfig){
   if(this.loadConfig){this.loadConfig();}
   this.setCaption(this.label);
   this.setWidth(this.width);
   this.setHeight(this.height);
   if(this.allControls){
      for(var n=0; n<this.allControls.length; n++){
         var oCtl = this.allControls[n];
         if(oCtl.refresh){
            if(bConfig && oCtl.reloadConfig){
               oCtl.reloadConfig();
            }
            oCtl.refresh();
         }
      }
   }
}
MO.FDuiWindow_initialize = function FDuiWindow_initialize(){
   if(this.allControls){
      for(var n=0; n<this.allControls.length; n++){
         var oCtl = this.allControls[n];
         if(oCtl.initialize){oCtl.initialize();}
         if(oCtl.initializeControl){oCtl.initializeControl();}
      }
   }
}
MO.FDuiWindow_release = function FDuiWindow_release(){
   if(this.allControls){
      for(var n=0; n<this.allControls.length; n++){
         var oCtl = this.allControls[n];
         if(oCtl.releaseControl){oCtl.releaseControl();}
         if(oCtl.release){oCtl.release();}
      }
   }
   this.htmlBorder.removeNode(true);
   DatasetManager.focus(null, true);
   WindowManager.releaseWindow(this);
}
MO.FDuiWindow_stopDropExecute = function FDuiWindow_stopDropExecute(oSource){
   if(oSource.config && oSource.rect){
      var oRect = oSource.rect();
      oSource.config.setAttribute('left', oRect.left);
      oSource.config.setAttribute('top', oRect.top);
      oSource.config.setAttribute('width', oRect.width());
      oSource.config.setAttribute('height', oRect.height());
   }
   if(this.owner.onStopDrop){
      this.owner.onStopDrop(oSource);
   }
}
MO.FDuiWindow_selectDsExecute = function FDuiWindow_selectDsExecute(oSource){
   if(oSource && oSource.constructor == FDatasetCtl){
      var bRefresh = (DatasetManager.activeDsCtl != oSource);
      DatasetManager.activeDsCtl = oSource;
      if(bRefresh){
         DatasetManager.refreshToolbar();
      }
   }
}
MO.FDuiWindow_dispose = function FDuiWindow_dispose(){
   var o = this;
   o.__base.FDuiLayout.dispose.call(o);
   o.__base.MWinBorder.dispose.call(o);
   o.hBorderForm = null;
}
MO.EUiDataService = new function EUiDataService(){
   var o = this;
   o.Dataset    = 'database.dataset';
   o.List       = 'design.list';
   o.WebForm    = 'design.webform';
   o.Translate  = 'design.translate';
   o.WebDataset = 'logic.dataset';
   return o;
}
MO.EUiDataStore = new function EUiDataStore(){
   var o = this;
   o.Full     = 0;
   o.Sort     = 1;
   o.Config   = 2;
   o.Value    = 3;
   o.Name     = 4;
   o.DataName = 5;
   o.DataNvl  = 6;
   o.Reset    = 7;
   o.Prepare  = 8;
   return o;
}
with(MO){
   MO.MUiDataAction = function MUiDataAction(o){
      o = MO.Class.inherits(this, o);
      o.doAction = MUiDataAction_doAction
      return o;
   }
   MO.MUiDataAction_doAction = function MUiDataAction_doAction(n){
      var o = this;
      var c = o.findComponent(n);
      if(MO.Class.isClass(c, MInvoke)){
         c.invoke(this);
      }else{
         throw new TError(o, 'Component is invalid.');
      }
   }
}
with(MO){
   MO.RUiDataEvent = function RUiDataEvent(){
      var o = this;
      o.clearEvent  = null;
      o.resetEvent  = null;
      o.loadEvent   = null;
      o.saveEvent   = null;
      o.recordEvent = null;
      o.codeEvent   = null;
      o.construct   = RUiDataEvent_construct;
      o.construct();
      return o;
   }
   MO.RUiDataEvent_construct = function RUiDataEvent_construct(p){
      var o = this;
      o.clearEvent = new TEventProcess(o, 'oeClearValue', MUiDataValue);
      o.resetEvent = new TEventProcess(o, 'oeResetValue', MUiDataValue);
      o.loadEvent = new TEventProcess(o, 'oeLoadValue', MUiDataValue);
      o.saveEvent = new TEventProcess(o, 'oeSaveValue', MUiDataValue);
      o.recordEvent = new TEventProcess(o, 'oeRecordValue', MUiDataValue);
      o.codeEvent = new TEventProcess(o, 'oeSaveCode', MUiDataValue);
   }
   MO.RUiDataEvent = new RUiDataEvent();
}
with(MO){
   MO.FDatasetConsole = function FDatasetConsole(o){
      o = MO.Class.inherits(this, o, FConsole);
      o._scopeCd = EScope.Local;
      o._service = 'cloud.data.frame';
      o._datasets        = null;
      o.onFetch  = FDatasetConsole_onFetch;
      o.construct        = FDatasetConsole_construct;
      o.loadDataset      = FDatasetConsole_loadDataset;
      o.loadDatasets     = FDatasetConsole_loadDatasets;
      o.fetch    = FDatasetConsole_fetch;
      return o;
   }
   MO.FDatasetConsole_onFetch = function FDatasetConsole_onFetch(p){
      var o = this;
      var g = p.parameter;
      var x = p.outputNode;
      if(x.hasNode()){
         o.loadDatasets(x);
         var dss = g.datasets;
         var xns = x.nodes();
         var xnc = xns.count();
         for(var i = 0; i < xnc; i++){
            var xn = xns.get(i);
            var n = xn.get('name');
            var d = o._datasets.get(n);
            dss.set(n, d);
         }
      }
      g.process();
   }
   MO.FDatasetConsole_construct = function FDatasetConsole_construct(){
      var o = this;
      o.__base.FConsole.construct.call(o);
      o._datasets = new TDictionary();
   }
   MO.FDatasetConsole_loadDataset = function FDatasetConsole_loadDataset(x){
      var o = this;
      var n = x.get('name');
      if(MO.Lang.String.isEmpty(n)){
         throw new TError('Unknown dataset name.');
      }
      var d = o._datasets.get(n);
      if(!d){
         d = new TDataset();
         d.name = n;
         o._datasets.set(n, d);
      }
      d.clear();
      d.loadConfig(x);
      return d;
   }
   MO.FDatasetConsole_loadDatasets = function FDatasetConsole_loadDatasets(p){
      var o = this;
      if(p.hasNode()){
         var xs = p.nodes();
         var c = xs.count();
         for(var i = 0; i < c; i++){
            var x = xs.get(i);
            if(x.isName('Dataset')){
               o.loadDataset(x);
            }
         }
      }
   }
   MO.FDatasetConsole_fetch = function FDatasetConsole_fetch(p){
      var o = this;
      var xd = new TXmlDocument();
      var xr = xd.root();
      xr.set('action', 'fetch');
      p.saveConfig(xr.create('Frame'));
      var e = new SXmlEvent();
      e.owner = o;
      e.url = RService.url(o._service);
      e.action = EDataAction.Fetch;
      e.parameter = p;
      e.inputDocument = xd;
      e.callback = o.onFetch;
      RConsole.find(FXmlConsole).process(e);
   }
   MO.FDatasetConsole_onScalarLoaded = function FDatasetConsole_onScalarLoaded(g, r){
      var o = this;
      if(r.hasNode()){
         var rc = g.resultConfig = r.find('Control');
         if(rc){
            g.result = rc.get('result');
         }
      }
      g.invoke();
   }
   MO.FDatasetConsole_scalar = function FDatasetConsole_scalar(g){
      var o = this;
      var doc = new TXmlDocument();
      var r = doc.root();
      r.set('action', EDataAction.Scalar);
      r.push(g.toNode());
      var e = new TEvent(o, EXmlEvent.Send, o.onLoaded);
      e.url = RService.url('logic.webform.dataset');
      e.action = EDataAction.Scalar;
      e.argument = g;
      e.document = doc;
      RConsole.find(FXmlConsole).process(e);
   }
   MO.FDatasetConsole_onCompleteLoaded = function FDatasetConsole_onCompleteLoaded(g, root){
      var o = this;
      if(root.hasNode()){
         var nc = root.find('Control');
         if(nc){
            g.resultConfig = nc;
         }
      }
      g.invoke();
   }
   MO.FDatasetConsole_onLovLoadeded = function FDatasetConsole_onLovLoadeded(arg, root){
      var o = this;
      arg.lovNode = root;
      arg.invoke();
   }
   MO.FDatasetConsole_onPrepareLoaded = function FDatasetConsole_onPrepareLoaded(g, x){
      var o = this;
      var rds = g.resultDatasets;
      if(x.hasNode()){
         var xfs = x.nodes;
         var xfc = xfs.count;
         for(var n = 0; n < xfc; n ++){
            var xf = xfs.get(n);
            var fd = xf.get('id');
            if(!MO.Lang.String.isEmpty(fd)){
               o.loadDatasets(rds, fd, xf);
            }
         }
      }
      if(!rds.isEmpty()){
         var c = rds.count;
         for(var n=0; n<c; n++){
            var rd = rds.value(n);
            if('/' == rd.name){
               g.resultRow = rd.row(0);
               break;
            }
         }
      }
      g.invoke();
   }
   MO.FDatasetConsole_onUpdateLoaded = function FDatasetConsole_onUpdateLoaded(g, x){
      var o = this;
      var xf = x.find('Form');
      if(!xf){
         return;
      }
      var fd = xf.get('id');
      var xd = xf.find('Dataset');
      if(!xd){
         return;
      }
      var ds = g.resultDataset = o.loadDataset(fd, xd);
      g.resultRow = ds.row(0);
      g.invoke();
      RWindow.setEnable(true);
   }
   MO.FDatasetConsole_onLoaded = function FDatasetConsole_onLoaded(e){
      var o = this;
      var r = e.document.root();
      var g = e.argument;
      if(!e.messageChecked){
         var m = new TMessageArg();
         m.argument = g;
         m.form = g.form;
         m.config = r;
         m.invokeCaller = new TInvoke(o, o.onLoaded);
         m.invokeParam = e;
         m.event = e;
         if(!RConsole.find(FMessageConsole).checkResult(m)){
            return;
         }
      }
      g.configResult = r;
      switch(e.action){
         case EDataAction.Fetch:
            o.onFetchLoaded(g, r);
            break;
         case EDataAction.Prepare:
            o.onPrepareLoaded(g, r);
            break;
         case EDataAction.Update:
            o.onUpdateLoaded(g, r);
            break;
         case EDataAction.Lov:
            o.onLovLoaded(g, r);
            break;
         case EDataAction.Scalar:
            o.onScalarLoaded(g, r);
            break;
         case EDataAction.Complete:
            o.onCompleteLoaded(g, r);
            break;
      }
      RConsole.find(FListenerConsole).process(MDataset, EAction.Changed, e, e)
   }
   MO.FDatasetConsole_complete = function FDatasetConsole_complete(g){
      var o = this;
      var doc = new TXmlDocument();
      var root = doc.root();
      root.set('action', 'complete');
      root.push(g.toNode());
      var e = new TEvent(o, EXmlEvent.Send, o.onLoaded);
      e.url = RService.url('logic.webform.dataset');
      e.action = EDataAction.Complete;
      e.argument = g;
      e.document = doc;
      RConsole.find(FXmlConsole).process(e);
   }
   MO.FDatasetConsole_lov = function FDatasetConsole_lov(g){
      var o = this;
      var doc = new TXmlDocument();
      var root = doc.root();
      root.set('action', 'lov');
      root.push(g.toNode());
      var e = new TEvent(o, EXmlEvent.Send, o.onLoaded);
      e.url = RService.url('logic.webform.dataset');
      e.action = EDataAction.Lov;
      e.argument = g;
      e.document = doc;
      RConsole.find(FXmlConsole).process(e);
   }
   MO.FDatasetConsole_prepare = function FDatasetConsole_prepare(g){
      var o = this;
      var doc = new TXmlDocument();
      var root = doc.root();
      root.set('action', 'prepare');
      root.push(g.toNode());
      var e = new TEvent(o, EXmlEvent.Send, o.onLoaded);
      e.url = RService.url('logic.webform.dataset');
      e.action = EDataAction.Prepare;
      e.argument = g;
      e.document = doc;
      RConsole.find(FXmlConsole).process(e);
   }
   MO.FDatasetConsole_update = function FDatasetConsole_update(g){
      var o = this;
      var doc = new TXmlDocument();
      var root = doc.root();
      root.set('action', 'update');
      if(g.checked){
         root.set('checked', g.checked);
      }
      root.push(g.toNode());
      var e = new TEvent(o, EXmlEvent.Send, o.onLoaded);
      e.url = RService.url('logic.webform.dataset');
      e.action = EDataAction.Update;
      e.argument = g;
      e.document = doc;
      RConsole.find(FXmlConsole).process(e);
   }
   MO.FDatasetConsole_get = function FDatasetConsole_get(id){
      var o = this;
      var ds = o.forms.get(id);
      return ds;
   }
   MO.FDatasetConsole_getById = function FDatasetConsole_getById(id){
      var o = this;
      var d = o._datasets.get(id);
      return d;
   }
   MO.FDatasetConsole_getByPath = function FDatasetConsole_getByPath(formId, path){
      var o = this;
      var ds = o.get(formId);
      return ds ? ds.get(path) : null;
   }
   MO.FDatasetConsole_onTreeLoaded = function FDatasetConsole_onTreeLoaded(g){
      var o = this;
      alert(1);
   }
   MO.FDatasetConsole_onColumnFetch = function FDatasetConsole_onColumnFetch(e){
      var o = this;
      var root = e.document.root();
      var mc = RConsole.find(FMessageConsole);
      var r = mc.checkResult(root);
      if(r){
         var g = e.arg;
         if(root.hasNode()){
            var fs = root.nodes;
            var ct = fs.count;
            for(var k = 0; k < ct; k++){
               var f = fs.get(k);
               if(f.hasNode()){
                  var ns = f.nodes;
                  var nt = ns.count;
                  for( n = 0; n < nt; n++){
                     var d = ns.get(n);
                     if(d.name == 'Data'){
                        g.resultConfig = d;
                        break;
                     }
                  }
               }
            }
         }
         g.invoke();
      }
   }
   MO.FDatasetConsole_columnNodeFetch = function FDatasetConsole_columnNodeFetch(g){
      var o = this;
      var doc = new TXmlDocument();
      var root = doc.root();
      root.set('action', g.action);
      var nd = g.toNode();
      root.push(nd);
      var url = RService.url(g.service);
      var e = new TEvent(o, EXmlEvent.Send, o.onColumnFetch);
      e.url = url;
      e.document = doc;
      e.arg = g;
      e.action = EDataAction.Fetch;
      RConsole.find(FXmlConsole).process(e);
   }
   MO.FDatasetConsole_treeUpdate = function FDatasetConsole_treeUpdate(g){
      var o = this;
      var doc = new TXmlDocument();
      var root = doc.root();
      root.set('action', g.action);
      var nd = g.toNode();
      root.push(nd);
      var url = RService.url(g.service);
      var e = new TEvent(o, EXmlEvent.Send, o.onTreeLoaded);
      e.url = url;
      e.document = doc;
      e.arg = g;
      e.action = EDataAction.TreeUpdate;
      RConsole.find(FXmlConsole).process(e);
   }
}
with(MO){
   MO.FUiDataAction = function FUiDataAction(o){
      o = MO.Class.inherits(this, o, FDuiComponent, MInvoke);
      o._action        = MO.Class.register(o, new MO.APtyString('_action'));
      o._service       = MO.Class.register(o, new MO.APtyString('_service'));
      o._execute       = MO.Class.register(o, new MO.APtyString('_execute'));
      o._loading       = false;
      o._dataContainer = null;
      o.onLoaded       = FUiDataAction_onLoaded;
      o.invoke         = FUiDataAction_invoke;
      return o;
   }
   MO.FUiDataAction_onLoaded = function FUiDataAction_onLoaded(p){
      var o = this;
      RWindow.setEnable(true);
      o._loading = false;
   }
   MO.FUiDataAction_invoke = function FUiDataAction_invoke(p){
      var o = this;
      var svc = RService.parse(o._service);
      if(!svc){
         throw new TError(o, 'Unknown service.');
      }
      RWindow.setEnable(false);
      var xdocument = new TXmlDocument();
      var root = xdocument.root();
      root.set('action', svc.action);
      RConsole.find(FEnvironmentConsole).build(root);
      p.dsSaveValue(root.create('Data'));
      o._loading = true;
      o._dataContainer = p;
      var connection = RConsole.find(FXmlConsole).sendAsync(svc.url, xdocument);
      connection.addLoadListener(o, o.onLoaded);
   }
}
with(MO){
   MO.FUiDataCheck = function FUiDataCheck(o){
      o = MO.Class.inherits(this, o, FDuiCheck, MUiDataField);
      return o;
   }
}
with(MO){
   MO.FUiDataColorPicker = function FUiDataColorPicker(o){
      o = MO.Class.inherits(this, o, FDuiEdit, MUiDataField);
      return o;
   }
   MO.FUiDataColorPicker_onDataKeyDown = function FUiDataColorPicker_onDataKeyDown(s, e){
      var o = this;
      o.__base.FDuiEdit.onDataKeyDown.call(o, s, e);
      if(o.editCase){
         RKey.fixCase(e, o.editCase);
      }
      if(o._editable){
         if(o.editComplete){
            if( 16 != e.keyCode && 17 != e.keyCode && 18 != e.keyCode && 20 != e.keyCode ){
               var ed = o.findEditor();
               if(ed){
                  ed.onEditKeyDown(s, e);
               }
            }
         }
      }
   }
   MO.FUiDataColorPicker_formatValue = function FUiDataColorPicker_formatValue(v){
      var o = this;
      var r = MO.Lang.String.nvl(v);
      if(ECase.Upper == o.editCase){
         r = RString.toUpper(r);
      }else if(ECase.Lower == o.editCase){
         r = RString.toLower(r);
      }
      return r;
   }
   MO.FUiDataColorPicker_setText = function FUiDataColorPicker_setText(t){
      var o = this;
      if(!o.hEdit){
         return;
      }
      if('U'== o.editCase){
         o.hEdit.value = RString.toUpper(t);
      }else if('L'== o.editCase){
            o.hEdit.value = RString.toLower(t);
      }else{
         o.hEdit.value = t;
      }
      if('right' == o.editAlign){
         o.hEdit.style.textAlign = 'right';
      }else if('left' == o.editAlign ){
         o.hEdit.style.textAlign = 'left';
      }else{
         o.hEdit.style.textAlign = 'center';
      }
   }
   MO.FUiDataColorPicker_validText = function FUiDataColorPicker_validText(t){
      var o = this;
      var r = o.__base.FDuiEdit.validText.call(o, t);
      if(!r){
         if(o.validLenmin){
            if(o.validLenmin > t.length){
               return RContext.get('MDescEdit:ValidMinLength', o.validLenmin);
            }
         }
         if(o.validLenmax){
            if(o.validLenmax < t.length){
               return RContext.get('MDescEdit:ValidMaxLength', o.validLenmax);
            }
         }
      }
      return r;
   }
   MO.FUiDataColorPicker_findEditor = function FUiDataColorPicker_findEditor(){
      var o = this;
      if(o.editComplete){
         var de = o.editor;
         if(!de){
            o.dsControl = o.topControl(MDataset);
            if(o.dsControl){
               de = o.editor = RConsole.find(FUiDataColorPickerConsole).focus(o, FUiDataColorPickerEditor);
            }
         }
         if(de){
            de.linkControl(o);
         }
         return o.editor;
      }
   }
   MO.FUiDataColorPicker_drop = function FUiDataColorPicker_drop(){
      var o = this;
      var de = o.findEditor();
      if(de){
         var t = o.reget();
         if(t.length > 0){
            if(o.finded != t){
               if(de.source != o){
                  de.linkControl(o);
               }
               de.search(t);
            }
            o.finded = t;
         }
      }
   }
}
MO.FUiDataEdit = function FUiDataEdit(o){
   o = MO.Class.inherits(this, o, MO.FDuiEdit, MO.MUiDataField);
   return o;
}
MO.FUiDataEdit_onDataKeyDown = function FUiDataEdit_onDataKeyDown(s, e){
   var o = this;
   o.__base.FDuiEdit.onDataKeyDown.call(o, s, e);
   if(o.editCase){
      RKey.fixCase(e, o.editCase);
   }
}
MO.FUiDataEdit_formatValue = function FUiDataEdit_formatValue(v){
   var o = this;
   var r = MO.Lang.String.nvl(v);
   if(ECase.Upper == o.editCase){
      r = RString.toUpper(r);
   }else if(ECase.Lower == o.editCase){
      r = RString.toLower(r);
   }
   return r;
}
MO.FUiDataEdit_setText = function FUiDataEdit_setText(t){
   var o = this;
   if(!o.hEdit){
      return;
   }
   if('U'== o.editCase){
      o.hEdit.value = RString.toUpper(t);
   }else if('L'== o.editCase){
         o.hEdit.value = RString.toLower(t);
   }else{
      o.hEdit.value = t;
   }
   if('right' == o.editAlign){
      o.hEdit.style.textAlign = 'right';
   }else if('left' == o.editAlign ){
      o.hEdit.style.textAlign = 'left';
   }else{
      o.hEdit.style.textAlign = 'center';
   }
}
MO.FUiDataEdit_validText = function FUiDataEdit_validText(t){
   var o = this;
   var r = o.__base.FDuiEdit.validText.call(o, t);
   if(!r){
      if(o.validLenmin){
         if(o.validLenmin > t.length){
            return RContext.get('MDescEdit:ValidMinLength', o.validLenmin);
         }
      }
      if(o.validLenmax){
         if(o.validLenmax < t.length){
            return RContext.get('MDescEdit:ValidMaxLength', o.validLenmax);
         }
      }
   }
   return r;
}
MO.FUiDataEdit_findEditor = function FUiDataEdit_findEditor(){
   var o = this;
   if(o.editComplete){
      var de = o.editor;
      if(!de){
         o.dsControl = o.topControl(MDataset);
         if(o.dsControl){
            de = o.editor = RConsole.find(FUiDataEditConsole).focus(o, FUiDataEditEditor);
         }
      }
      if(de){
         de.linkControl(o);
      }
      return o.editor;
   }
}
MO.FUiDataEdit_drop = function FUiDataEdit_drop(){
   var o = this;
   var de = o.findEditor();
   if(de){
      var t = o.reget();
      if(t.length > 0){
         if(o.finded != t){
            if(de.source != o){
               de.linkControl(o);
            }
            de.search(t);
         }
         o.finded = t;
      }
   }
}
with(MO){
   MO.FUiDataEditControl = function FUiDataEditControl(o){
      o = MO.Class.inherits(this, o, FDuiEditControl, MUiEditValue, MDuiEditChange, MDuiEditDrop);
      o._labelModeCd      = MO.Class.register(o, new MO.APtyString('_labelModeCd'), EUiLabelMode.All);
      o._labelPositionCd  = MO.Class.register(o, new MO.APtyString('_labelPositionCd'), EUiLabelPosition.Left);
      o._labelSize        = MO.Class.register(o, new MO.APtySize2('_labelSize'));
      o._labelAlignCd     = MO.Class.register(o, new MO.APtyString('_labelAlignCd'), EUiAlign.Left);
      o._labelColor       = MO.Class.register(o, new MO.APtyString('_labelColor'));
      o._editSize         = MO.Class.register(o, new MO.APtySize2('_editSize'));
      o._editColor        = MO.Class.register(o, new MO.APtyString('_editColor'));
      o._styleLabelPanel  = MO.Class.register(o, new MO.AStyle('_styleLabelPanel'));
      o._styleEditPanel   = MO.Class.register(o, new MO.AStyle('_styleEditPanel'));
      o._progressing      = false;
      o._hLabelPanel      = null;
      o._hLabelForm       = null;
      o._hIconPanel       = null;
      o._hIcon            = null;
      o._hTextPanel       = null;
      o._hText            = null;
      o._hEditPanel       = null;
      o._hEditForm        = null;
      o._hValuePanel      = null;
      o.onBuildLabelIcon  = FUiDataEditControl_onBuildLabelIcon;
      o.onBuildLabelText  = FUiDataEditControl_onBuildLabelText;
      o.onBuildLabel      = FUiDataEditControl_onBuildLabel;
      o.onBuildEditValue  = RMethod.virtual(o, 'onBuildEditValue');
      o.onBuildEdit       = FUiDataEditControl_onBuildEdit;
      o.onBuildPanel      = FUiDataEditControl_onBuildPanel;
      o.onBuild           = FUiDataEditControl_onBuild;
      o.oeMode            = FUiDataEditControl_oeMode;
      o.oeProgress        = FUiDataEditControl_oeProgress;
      o.construct         = FUiDataEditControl_construct;
      o.panel             = FUiDataEditControl_panel;
      o.label             = FUiDataEditControl_label;
      o.setLabel          = FUiDataEditControl_setLabel;
      o.text              = FUiDataEditControl_text;
      o.setText           = FUiDataEditControl_setText;
      o.getValueRectangle = FUiDataEditControl_getValueRectangle;
      o.dispose           = FUiDataEditControl_dispose;
      return o;
   }
   MO.FUiDataEditControl_onBuildLabelIcon = function FUiDataEditControl_onBuildLabelIcon(p){
      var o = this;
      if(o._labelIcon){
         o._hIcon = MO.Window.Builder.appendIcon(o._hIconPanel, null, o._labelIcon);
      }else{
         o._hIcon = MO.Window.Builder.appendIcon(o._hIconPanel, null, 'n', 16, 16);
      }
   }
   MO.FUiDataEditControl_onBuildLabelText = function FUiDataEditControl_onBuildLabelText(p){
      var o = this;
      o._hText = MO.Window.Builder.appendSpan(o._hTextPanel, null, o._label);
   }
   MO.FUiDataEditControl_onBuildLabel = function FUiDataEditControl_onBuildLabel(p){
      var o = this;
      var h = o._hLabelForm = MO.Window.Builder.appendTable(o._hLabelPanel, o.styleName('LabelPanel'));
      var hr = MO.Window.Builder.appendTableRow(h);
      var hip = o._hIconPanel = MO.Window.Builder.appendTableCell(hr);
      hip.width = '20px';
      o.onBuildLabelIcon(p);
      var htp = o._hTextPanel = MO.Window.Builder.appendTableCell(hr);
      htp.noWrap = true;
      o.onBuildLabelText(p);
      RHtml.setSize(h, o._labelSize);
      if(o._labelAlignCd){
         htp.align = o._labelAlignCd;
         htp.style.paddingRight = 4;
      }
      if(o._labelColor){
         o._hLabel.style.color = o._labelColor;
      }
   }
   MO.FUiDataEditControl_onBuildEdit = function FUiDataEditControl_onBuildEdit(p){
      var o = this;
      var h = o._hEditForm = MO.Window.Builder.appendTable(o._hEditPanel, o.styleName('EditPanel'));
      var hr = o._hEditLine = MO.Window.Builder.appendTableRow(h);
      o._hValuePanel = MO.Window.Builder.appendTableCell(hr);
      o.onBuildEditValue(p);
      RHtml.setSize(h, o._editSize);
   }
   MO.FUiDataEditControl_onBuildPanel = function FUiDataEditControl_onBuildPanel(p){
      var o = this;
      o._hPanel = MO.Window.Builder.createTable(p, o.styleName('Panel'));
   }
   MO.FUiDataEditControl_onBuild = function FUiDataEditControl_onBuild(p){
      var o = this;
      o.__base.FDuiEditControl.onBuild.call(o, p);
      var hc = o._hPanel;
      var hlp = null;
      var hep = null;
      var lmc = o._labelModeCd;
      if(lmc == EUiLabelMode.Label){
         hlp = MO.Window.Builder.appendTableCell(RBuilder.appendTableRow(hc));
      }else if(lmc == EUiLabelMode.Hidden){
         hep = MO.Window.Builder.appendTableCell(RBuilder.appendTableRow(hc));
      }else{
         var lpc = o._labelPositionCd;
         if(lpc == EUiLabelPosition.Top){
            hlp = MO.Window.Builder.appendTableRowCell(hc);
            hep = MO.Window.Builder.appendTableRowCell(hc);
         }else if(lpc == EUiLabelPosition.Right){
            var hr = MO.Window.Builder.appendTableRow(hc);
            hep = MO.Window.Builder.appendTableCell(hr);
            hlp = MO.Window.Builder.appendTableCell(hr);
         }else if(lpc == EUiLabelPosition.Bottom){
            hep = MO.Window.Builder.appendTableRowCell(hc);
            hlp = MO.Window.Builder.appendTableRowCell(hc);
         }else{
            var hr = MO.Window.Builder.appendTableRow(hc);
            hlp = MO.Window.Builder.appendTableCell(hr);
            hep = MO.Window.Builder.appendTableCell(hr);
         }
      }
      o._hLabelPanel = hlp;
      o._hEditPanel = hep;
      if(hlp){
         o.onBuildLabel(p);
         hlp.appendChild(o._hLabelForm);
         o.setLabel(o._label);
      }
      if(hep){
         o.onBuildEdit(p);
      }
   }
   MO.FUiDataEditControl_oeMode = function FUiDataEditControl_oeMode(e){
      var o = this;
      o.__base.FDuiEditControl.oeMode.call(o, e);
      o.__base.MDisplay.oeMode.call(o, e);
      o._editable = o.canEdit(e.mode);
      o._validable = o.canValid(e.mode);
      if(!o._progressing){
         o.setEditable(o._editable);
      }
      return EEventStatus.Stop;
   }
   MO.FUiDataEditControl_oeProgress = function FUiDataEditControl_oeProgress(e){
      var o = this;
      if(o._progressing && e.enable){
         return EEventStatus.Stop;
      }
      o._progressing = e.enable;
      if(e.enable){
         var ea = o._editable;
         o.setEditable(false);
         o._editable = ea;
      }else{
         o.setEditable(o._editable);
      }
      return EEventStatus.Stop;
   }
   MO.FUiDataEditControl_construct = function FUiDataEditControl_construct(){
      var o = this;
      o.__base.FDuiEditControl.construct.call(o);
      o.__base.MDuiEditChange.construct.call(o);
      o.__base.MDuiEditDrop.construct.call(o);
      o._labelSize = new SSize2(100, 20);
      o._editSize = new SSize2(200, 20);
   }
   MO.FUiDataEditControl_panel = function FUiDataEditControl_panel(t){
      var o = this;
      if(EPanel.Edit == t){
         return o.hEdit;
      }else if(EPanel.Focus == t){
         return o.hEdit;
      }
      return o.__base.FDuiEditControl.panel.call(o, t);
   }
   MO.FUiDataEditControl_label = function FUiDataEditControl_label(p){
      return this._label;
   }
   MO.FUiDataEditControl_setLabel = function FUiDataEditControl_setLabel(p){
      var o = this;
      o._label = p;
      if(o._hText){
         o._hText.innerHTML = MO.Lang.String.nvl(p);
      }
   }
   MO.FUiDataEditControl_text = function FUiDataEditControl_text(){
      throw new TUnsupportError(o, 'text');
   }
   MO.FUiDataEditControl_setText = function FUiDataEditControl_setText(value){
      throw new TUnsupportError(o, 'setText');
   }
   MO.FUiDataEditControl_getValueRectangle = function FUiDataEditControl_getValueRectangle(r){
      var o = this;
      if(!r){
         r = new SRectangle();
      }
      var h = o._hValuePanel;
      var p = RHtml.clientPosition(h);
      r.position.assign(p);
      r.setSize(h.offsetWidth, h.offsetHeight);
      return r;
   }
   MO.FUiDataEditControl_dispose = function FUiDataEditControl_dispose(){
      var o = this;
      o._labelModeCd = null;
      o._labelPositionCd = null;
      o._labelAlignCd = null;
      o._dataTypeCd = null;
      o._labelSize = MO.Lang.Object.dispose(o._labelSize);
      o._editSize = MO.Lang.Object.dispose(o._editSize);
      o._hLabelPanel = MO.Window.Html.free(o._hLabelPanel);
      o._hLabelForm = MO.Window.Html.free(o._hLabelForm);
      o._hIconPanel = MO.Window.Html.free(o._hIconPanel);
      o._hIcon = MO.Window.Html.free(o._hIcon);
      o._hTextPanel = MO.Window.Html.free(o._hTextPanel);
      o._hText = MO.Window.Html.free(o._hText);
      o._hEditPanel = MO.Window.Html.free(o._hEditPanel);
      o._hEditForm = MO.Window.Html.free(o._hEditForm);
      o._hValuePanel = MO.Window.Html.free(o._hValuePanel);
      o._hDropPanel = MO.Window.Html.free(o._hDropPanel);
      o.__base.MDuiEditDrop.dispose.call(o);
      o.__base.MDuiEditChange.dispose.call(o);
      o.__base.FDuiEditControl.dispose.call(o);
   }
   MO.FUiDataEditControl_onScalar = function FUiDataEditControl_onScalar(g){
      var o = this;
      o.set(g.result);
   }
   MO.FUiDataEditControl_scalar = function FUiDataEditControl_scalar(a){
      var o = this;
      var g = new TDatasetScalarArg(o, null, a);
      g.callback = new TInvoke(o, o.onScalar);
      RConsole.find(FDatasetConsole).scalar(g);
   }
   MO.FUiDataEditControl_onDataDoubleClick = function FUiDataEditControl_onDataDoubleClick(){
      var o = this;
      if(MO.Class.isClass(o, MDropable)){
         o.onDropDoubleClick();
      }
      if(MO.Class.isClass(o, MListView)){
         o.onListClick();
      }
   }
   MO.FUiDataEditControl_onDataKeyDown = function FUiDataEditControl_onDataKeyDown(s, e){
      var o = this;
      o.__base.MEditDescriptor.onDataKeyDown.call(o, s, e);
      var hci = o.hChangeIcon;
      if(hci){
         hci.style.display = o.isDataChanged() ? 'block' : 'none';
      }
      if(MO.Class.isClass(o, MDropable) && EKey.Down==e.keyCode){
         o.drop();
      }else if(e.ctrlKey && (EKey.Enter==e.keyCode) && o.editSearch){
         var dc = o.dsControl;
         if(dc){
            if(!o.isValid){
               var sn = new TNode('Search');
               var n = sn.create('Item');
               n.set('name', o.name);
               n.set('data_name', o.dataName);
               n.set('data_value', o.dataValue);
               n.set('search_type', ESearch.Equals);
               n.set('search_order', EOrder.None);
               RConsole.find(FDatasetConsole).fetch(dc, sn);
            }
         }
      }
   }
   MO.FUiDataEditControl_onDesignBegin = function FUiDataEditControl_onDesignBegin(){
      var o = this;
      o.__base.MDesign.onDesignBegin.call(o);
      o._disbaled = true;
      o.hEdit.disbaled = true;
   }
   MO.FUiDataEditControl_onDesignEnd = function FUiDataEditControl_onDesignEnd(){
      var o = this;
      o.__base.MDesign.onDesignEnd.call(o);
      o._disbaled = false;
      o.hEdit.disbaled = false;
   }
   MO.FUiDataEditControl_oeDataLoad = function FUiDataEditControl_oeDataLoad(p){
      var o = this;
      var ds = p.source;
      var r = ds.currentRow();
      var v = r.get(o._dataName);
      o.set(v);
      return EEventStatus.Stop;
   }
   MO.FUiDataEditControl_oeDataSave = function FUiDataEditControl_oeDataSave(p){
      var o = this;
      var ds = p.source;
      var r = ds.currentRow();
      var v = o.get();
      r.set(o._dataName, v);
      return EEventStatus.Stop;
   }
   MO.FUiDataEditControl_oeDesign = function FUiDataEditControl_oeDesign(p){
      var o = this;
      o.__base.MDesign.oeDesign.call(o, e);
      var hlf = o.hLabelForm;
      var hef = o.hEditForm;
      switch(e.mode){
         case EDesign.Move:
            if(e.flag){
               o.hForm.border = 1;
               if(hlf){
                  hlf.cellPadding = 1;
               }
               if(o.hEdit){
                  o.hEdit.disabled = true;
               }
            }else{
               o.hForm.border = 0;
               if(hlf){
                  hlf.border = 0;
                  hlf.cellPadding = 0;
               }
               if(o.hEdit){
                  o.hEdit.disabled = false;
               }
            }
            break;
         case EDesign.Border:
            if(e.flag){
               o.hForm.border = 1;
               if(hef){
                  hef.border = 1;
               }
            }else{
               o.hForm.border = 0;
               if(hef){
                  hef.border = 0;
               }
            }
            break;
      }
      return EEventStatus.Stop;
   }
   MO.FUiDataEditControl_oeLoadValue = function FUiDataEditControl_oeLoadValue(e){
      var o = this;
      var r = o.__base.MUiEditValue.oeLoadValue.call(o, e);
      var hci = o.hChangeIcon;
      if(hci){
         hci.style.display = 'none';
      }
      return r;
   }
   MO.FUiDataEditControl_doFocus = function FUiDataEditControl_doFocus(e){
      var o = this;
      o.__base.MDuiFocus.doFocus.call(o, e);
      o.__base.MUiEditValue.doFocus.call(o, e);
   }
   MO.FUiDataEditControl_doBlur = function FUiDataEditControl_doBlur(e){
      var o = this;
      o.__base.MDuiFocus.doBlur.call(o, e);
      o.__base.MUiEditValue.doBlur.call(o, e);
   }
   MO.FUiDataEditControl_testFocus = function FUiDataEditControl_testFocus(){
      return this._visible && this._editable && !this._disbaled;
   }
   MO.FUiDataEditControl_setEditable = function FUiDataEditControl_setEditable(v){
      var o = this;
      o.__base.MUiEditValue.setEditable.call(o, v);
      if(o.hEdit){
         o.hEdit.readOnly = !v;
      }
      var hl = o.hLabel;
      if(hl){
         if(o.validRequire){
            o.hLabel.style.color = v ? EUiColor.Require : EUiColor.Text;
         }
         if(MO.Class.isClass(o, MListView) && o.canListView()){
            hl.style.cursor = v ? 'hand' : 'normal';
            hl.className = v ? 'RLine_Underline' : '';
         }
      }
   }
   MO.FUiDataEditControl_setVisible = function FUiDataEditControl_setVisible(v){
      var o = this;
      o.__base.FDuiEditControl.setVisible.call(o, v);
      o.refreshStyle();
   }
   MO.FUiDataEditControl_focus = function FUiDataEditControl_focus(){
      var o = this;
      o.__base.MDuiFocus.focus.call(o);
      if(o.hEdit){
         try{
            o.hEdit.focus();
         }catch(e){
         }
      }
   }
   MO.FUiDataEditControl_refreshStyle = function FUiDataEditControl_refreshStyle(){
      var o = this;
      if(!o._visible){
         return;
      }
      var tc = EUiColor.TextReadonly;
      var bc = EUiColor.Readonly;
      var cr = 'normal';
      if(o._editable){
         tc = EUiColor.TextEdit;
         bc = EUiColor.Edit;
         cr = 'hand';
         if(!MO.Lang.String.isEmpty(o.editTip) && o.hEdit.innerText == o.editTip){
            tc = '#CCCCCC';
         }
      }
      if(o._invalidText){
         if(!MO.Lang.String.isEmpty(o.text())){
            tc = EUiColor.TextInvalid;
            bc = EUiColor.Invalid;
         }
      }
      o._textColor = tc;
      o._backColor = bc;
      var he = o.hEdit;
      var hd = o.hDrop;
      if(he){
         he.style.color = tc;
         he.style.backgroundColor = bc;
      }
      if(hd){
         if(he){
            he.style.cursor = cr;
         }
         hd.style.cursor = cr;
      }
      if(o.editBorder){
         var bs = EUiBorderStyle.Readonly;
         if(o._editable){
            bs = EUiBorderStyle.Edit;
         }
         if(o._hover){
            bs = EUiBorderStyle.Hover;
         }
         o.setEditBorderStyle(bs, bc);
      }
   }
}
with(MO){
   MO.FUiDataFrame = function FUiDataFrame(o){
      o = MO.Class.inherits(this, o, FDuiFrame, MUiDataset, MUiDataContainer, MUiDataAction);
      return o;
   }
}
with(MO){
   MO.FUiDataIconPicker = function FUiDataIconPicker(o){
      o = MO.Class.inherits(this, o, FDuiEdit, MUiDataField);
      return o;
   }
   MO.FUiDataIconPicker_onDataKeyDown = function FUiDataIconPicker_onDataKeyDown(s, e){
      var o = this;
      o.__base.FDuiEdit.onDataKeyDown.call(o, s, e);
      if(o.editCase){
         RKey.fixCase(e, o.editCase);
      }
   }
   MO.FUiDataIconPicker_formatValue = function FUiDataIconPicker_formatValue(v){
      var o = this;
      var r = MO.Lang.String.nvl(v);
      if(ECase.Upper == o.editCase){
         r = RString.toUpper(r);
      }else if(ECase.Lower == o.editCase){
         r = RString.toLower(r);
      }
      return r;
   }
   MO.FUiDataIconPicker_setText = function FUiDataIconPicker_setText(t){
      var o = this;
      if(!o.hEdit){
         return;
      }
      if('U'== o.editCase){
         o.hEdit.value = RString.toUpper(t);
      }else if('L'== o.editCase){
            o.hEdit.value = RString.toLower(t);
      }else{
         o.hEdit.value = t;
      }
      if('right' == o.editAlign){
         o.hEdit.style.textAlign = 'right';
      }else if('left' == o.editAlign ){
         o.hEdit.style.textAlign = 'left';
      }else{
         o.hEdit.style.textAlign = 'center';
      }
   }
   MO.FUiDataIconPicker_validText = function FUiDataIconPicker_validText(t){
      var o = this;
      var r = o.__base.FDuiEdit.validText.call(o, t);
      if(!r){
         if(o.validLenmin){
            if(o.validLenmin > t.length){
               return RContext.get('MDescEdit:ValidMinLength', o.validLenmin);
            }
         }
         if(o.validLenmax){
            if(o.validLenmax < t.length){
               return RContext.get('MDescEdit:ValidMaxLength', o.validLenmax);
            }
         }
      }
      return r;
   }
   MO.FUiDataIconPicker_findEditor = function FUiDataIconPicker_findEditor(){
      var o = this;
      if(o.editComplete){
         var de = o.editor;
         if(!de){
            o.dsControl = o.topControl(MDataset);
            if(o.dsControl){
               de = o.editor = RConsole.find(FUiDataIconPickerConsole).focus(o, FUiDataIconPickerEditor);
            }
         }
         if(de){
            de.linkControl(o);
         }
         return o.editor;
      }
   }
   MO.FUiDataIconPicker_drop = function FUiDataIconPicker_drop(){
      var o = this;
      var de = o.findEditor();
      if(de){
         var t = o.reget();
         if(t.length > 0){
            if(o.finded != t){
               if(de.source != o){
                  de.linkControl(o);
               }
               de.search(t);
            }
            o.finded = t;
         }
      }
   }
}
with(MO){
   MO.FUiDataMemo = function FUiDataMemo(o){
      o = MO.Class.inherits(this, o, FDuiMemo, MUiDataField);
      return o;
   }
}
with(MO){
   MO.FUiDataNumber = function FUiDataNumber(o){
      o = MO.Class.inherits(this, o, FDuiNumber);
      return o;
   }
   MO.FUiDataNumber_onEditFocus = function FUiDataNumber_onEditFocus(e){
      var o = this;
      o.setText(o.formatValue(o.text()));
   }
   MO.FUiDataNumber_onEditBlur = function FUiDataNumber_onEditBlur(e){
      var o = this;
      o.setText(o.formatText(o.text()));
   }
   MO.FUiDataNumber_onBuildEdit = function FUiDataNumber_onBuildEdit(b){
      var o = this;
      var htb = MO.Window.Builder.appendTable(b.hPanel);
      htb.style.tableLayout = 'fixed';
      var hr = o.hEdit = htb.insertRow();
      o.onBuildChange(hr.insertCell());
      if(o.canZoom()){
         var hc = hr.insertCell();
         o.hZoom = MO.Window.Builder.appendIcon(hc, 'ctl.zooms');
         hc.width = 16;
      }
      var hc = hr.insertCell();
      hc.style.width = '100%';
      var he = o.hEdit = MO.Window.Builder.appendEdit(hc, o.style('Edit'));
      o.attachEvent('onEditFocus', he, o.onEditFocus);
      o.attachEvent('onEditKeyPress', he, o.onEditKeyPress);
      o.attachEvent('onEditBlur', he, o.onEditBlur);
      o.attachEvent('onDataKeyUp', he, o.ohEditKeyUp);
      if(o.editLength){
         he.maxLength = o.editLength;
      }
      o.buildAdjustForm(b.hDrop);
   }
   MO.FUiDataNumber_setUnitIcon = function FUiDataNumber_setUnitIcon(i){
      var o = this;
      var hui = o.hUnit;
      hui.innerHTML = '<IMG src='+i+'>';
   }
   MO.FUiDataNumber_onDataKeyDown = function FUiDataNumber_onDataKeyDown(s, e){
      var o = this;
      if(o.canEdit){
         if(EKey.Up == e.keyCode){
            o.adjustValue(true);
         }else if(EKey.Down == e.keyCode){
            o.adjustValue(false);
         }
      }
      o.base.FDuiNumber.onDataKeyDown.call(o, s, e);
   }
   MO.FUiDataNumber_ohEditKeyUp = function FUiDataNumber_ohEditKeyUp(s, e){
      var o = this;
      if(EKey.Up == e.keyCode && o.canEdit){
         o.hUpIcon.src = o.styleIconPath('UpSelect');
      }else if(EKey.Down == e.keyCode && o.canEdit){
         o.hDownIcon.src = o.styleIconPath('DownSelect');
      }
   }
   MO.FUiDataNumber_onEditKeyDown = function FUiDataNumber_onEditKeyDown(e) {
      var o = this;
      if(o.canEdit){
         if (EKey.Up == e.keyCode) {
            e.source.hUpIcon.src = o.styleIconPath('up');
            o.changeValue(e, 'Y');
         }else if (EKey.Down == e.keyCode){
            e.source.hDownIcon.src = o.styleIconPath('down');
            o.changeValue(e, 'N');
         }
      }
   }
   MO.FUiDataNumber_onEditKeyUp = function FUiDataNumber_onEditKeyUp(e) {
      var o = this;
      if(o.canEdit){
         if (EKey.Up == e.keyCode){
            e.source.hUpIcon.src = o.styleIconPath('upSelect');
         }else if (EKey.Down == e.keyCode){
            e.source.hDownIcon.src = o.styleIconPath('downSelect');
         }
      }
   }
   MO.FUiDataNumber_onEditDoubleClick = function FUiDataNumber_onEditDoubleClick(){
      var o = this;
      this.onListClick();
   }
   MO.FUiDataNumber_validPattern = function FUiDataNumber_validPattern(s) {
      var o = this;
      var flag = true;
      var s = MO.Lang.String.nvl(s);
      if(!RRegExp.test(ERegExp.NUMBER,s)){
         return false;
      }
      var r = null;
      if (o.dataType) {
         for (n in ERegExp) {
            if (RString.equals(n, o.dataType)) {
               r = ERegExp[n];
               break;
            }
         }
         if (RString.equals(RClass.name(r), "RegExp")) {
            flag = RRegExp.test(r, s) ? flag & true : flag & false;
         }
      }
      if (o.editMaxvalue) {
         flag = parseFloat(s) <= parseFloat(o.editMaxvalue) ? flag & true : flag & false;
      }
      if (o.editMinvalue) {
         flag = parseFloat(s) >= parseFloat(o.editMinvalue) ? flag & true : flag & false;
      }
      return flag;
   }
   MO.FUiDataNumber_refreshStyle = function FUiDataNumber_refreshStyle(){
      var o = this;
      o.base.FDuiNumber.refreshStyle.call(o);
      o.hUpIcon.src = o.styleIconPath(o._hover ? 'UpSelect' : 'Up');
      o.hDownIcon.src = o.styleIconPath(o._hover ? 'DownSelect' : 'Down');
   }
   MO.FUiDataNumber_splitValue = function FUiDataNumber_splitValue(v){
      var o = this;
      var s = MO.Lang.String.nvl(v.toString());
      var j = RString.findChars(s,"-");
      var b = RString.findChars(s,"%");
      s = RString.removeChars(s, "'");
      s = RString.removeChars(s, " ");
      s = RString.removeChars(s, "%");
      s = RString.removeChars(s, "-");
      if (!MO.Lang.String.isEmpty(s)) {
         var sc = '';
         var c = '';
         var n = 0;
         for(var i = s.length; i > -1; i--){
            if(i != 0 && n != 0 && n % 3 == 0){
               sc = "'" + s.charAt(i) + sc;
            }else{
               sc = s.charAt(i) + sc;
            }
            n++;
         }
         if(-1 != j){
             sc = "-" + sc ;
          }
         if(-1 != b){
            sc = sc +"%";
         }
         return sc;
      }
      return s;
   }
   MO.FUiDataNumber_removeSplit = function FUiDataNumber_removeSplit(s){
      var o = this;
      var s = MO.Lang.String.nvl(s);
      s = RString.removeChars(s,"'");
      s = RString.removeChars(s,"%");
      return s;
   }
   MO.FUiDataNumber_precisionValue = function FUiDataNumber_precisionValue(v){
      var o = this;
      if(MO.Lang.String.isEmpty(v)){
         return v;
      }
      var l1,l2;
      var p = MO.Lang.String.nvl(o.editPrecision);
      v = MO.Lang.String.nvl(v);
      if(RString.contains(p,'.')){
         var sp = p.split('.')
         l2 = sp[1].length;
      }else{
        l1 = p.length;
      }
      if(RString.contains(v, '.')){
         var vs = v.split('.');
         if(l2){
            if(l2 > vs[1].length){
               vs[1] = RString.rpad(vs[1],l2 - vs[1].length,'0');
            }else if(l2 <= vs[1].length){
               vs[1] = vs[1].substring(0, l2);
            }
         }
         if(l1){
            if(l1 > vs[0].length){
               alert(l1);
            }else if(l1 < vs[0].length){
               vs[0] = vs[0].substring(0, vs[0].length - l1);
               vs[0] = RString.rpad(vs[0],l1,'0');
            }
            vs[1] = null;
         }
         if(vs[1]){
            v = vs[0] + '.' + RString.nvl(vs[1]);
         }else{
            v = vs[0];
         }
      }else{
         if(l1){
            if(l1 <= v.length){
               v = v.substring(0, v.length - l1 + 1);
               for(var n = 0; n < l1 - 1;n++){
                  v = v.concat('0');
               }
            }
            else if(l1 > v.length){
               v = 0;
            }
         }
         if(l2){
            v = v + '.';
            for(var n = 0; n < l2;n++){
               v = v.concat('0');
            }
         }
      }
      return v;
   }
   MO.FUiDataNumber_dispose = function FUiDataNumber_dispose(){
      var o = this;
      o.base.FDuiNumber.dispose.call(o);
      o.hLabel = null;
      o.hUpIcon = null;
      o.hDownIcon = null;
      o.hChgIic = null;
   }
}
with(MO){
   MO.FUiDataNumber2 = function FUiDataNumber2(o){
      o = MO.Class.inherits(this, o, FDuiNumber2);
      return o;
   }
   MO.FUiDataNumber2_onEditFocus = function FUiDataNumber2_onEditFocus(e){
      var o = this;
      o.setText(o.formatValue(o.text()));
   }
   MO.FUiDataNumber2_onEditBlur = function FUiDataNumber2_onEditBlur(e){
      var o = this;
      o.setText(o.formatText(o.text()));
   }
   MO.FUiDataNumber2_onBuildEdit = function FUiDataNumber2_onBuildEdit(b){
      var o = this;
      var htb = MO.Window.Builder.appendTable(b.hPanel);
      htb.style.tableLayout = 'fixed';
      var hr = o.hEdit = htb.insertRow();
      o.onBuildChange(hr.insertCell());
      if(o.canZoom()){
         var hc = hr.insertCell();
         o.hZoom = MO.Window.Builder.appendIcon(hc, 'ctl.zooms');
         hc.width = 16;
      }
      var hc = hr.insertCell();
      hc.style.width = '100%';
      var he = o.hEdit = MO.Window.Builder.appendEdit(hc, o.style('Edit'));
      o.attachEvent('onEditFocus', he, o.onEditFocus);
      o.attachEvent('onEditKeyPress', he, o.onEditKeyPress);
      o.attachEvent('onEditBlur', he, o.onEditBlur);
      o.attachEvent('onDataKeyUp', he, o.ohEditKeyUp);
      if(o.editLength){
         he.maxLength = o.editLength;
      }
      o.buildAdjustForm(b.hDrop);
   }
   MO.FUiDataNumber2_setUnitIcon = function FUiDataNumber2_setUnitIcon(i){
      var o = this;
      var hui = o.hUnit;
      hui.innerHTML = '<IMG src='+i+'>';
   }
   MO.FUiDataNumber2_onDataKeyDown = function FUiDataNumber2_onDataKeyDown(s, e){
      var o = this;
      if(o.canEdit){
         if(EKey.Up == e.keyCode){
            o.adjustValue(true);
         }else if(EKey.Down == e.keyCode){
            o.adjustValue(false);
         }
      }
      o.base.FDuiNumber2.onDataKeyDown.call(o, s, e);
   }
   MO.FUiDataNumber2_ohEditKeyUp = function FUiDataNumber2_ohEditKeyUp(s, e){
      var o = this;
      if(EKey.Up == e.keyCode && o.canEdit){
         o.hUpIcon.src = o.styleIconPath('UpSelect');
      }else if(EKey.Down == e.keyCode && o.canEdit){
         o.hDownIcon.src = o.styleIconPath('DownSelect');
      }
   }
   MO.FUiDataNumber2_onEditKeyDown = function FUiDataNumber2_onEditKeyDown(e) {
      var o = this;
      if(o.canEdit){
         if (EKey.Up == e.keyCode) {
            e.source.hUpIcon.src = o.styleIconPath('up');
            o.changeValue(e, 'Y');
         }else if (EKey.Down == e.keyCode){
            e.source.hDownIcon.src = o.styleIconPath('down');
            o.changeValue(e, 'N');
         }
      }
   }
   MO.FUiDataNumber2_onEditKeyUp = function FUiDataNumber2_onEditKeyUp(e) {
      var o = this;
      if(o.canEdit){
         if (EKey.Up == e.keyCode){
            e.source.hUpIcon.src = o.styleIconPath('upSelect');
         }else if (EKey.Down == e.keyCode){
            e.source.hDownIcon.src = o.styleIconPath('downSelect');
         }
      }
   }
   MO.FUiDataNumber2_onEditDoubleClick = function FUiDataNumber2_onEditDoubleClick(){
      var o = this;
      this.onListClick();
   }
   MO.FUiDataNumber2_validPattern = function FUiDataNumber2_validPattern(s) {
      var o = this;
      var flag = true;
      var s = MO.Lang.String.nvl(s);
      if(!RRegExp.test(ERegExp.NUMBER,s)){
         return false;
      }
      var r = null;
      if (o.dataType) {
         for (n in ERegExp) {
            if (RString.equals(n, o.dataType)) {
               r = ERegExp[n];
               break;
            }
         }
         if (RString.equals(RClass.name(r), "RegExp")) {
            flag = RRegExp.test(r, s) ? flag & true : flag & false;
         }
      }
      if (o.editMaxvalue) {
         flag = parseFloat(s) <= parseFloat(o.editMaxvalue) ? flag & true : flag & false;
      }
      if (o.editMinvalue) {
         flag = parseFloat(s) >= parseFloat(o.editMinvalue) ? flag & true : flag & false;
      }
      return flag;
   }
   MO.FUiDataNumber2_refreshStyle = function FUiDataNumber2_refreshStyle(){
      var o = this;
      o.base.FDuiNumber2.refreshStyle.call(o);
      o.hUpIcon.src = o.styleIconPath(o._hover ? 'UpSelect' : 'Up');
      o.hDownIcon.src = o.styleIconPath(o._hover ? 'DownSelect' : 'Down');
   }
   MO.FUiDataNumber2_splitValue = function FUiDataNumber2_splitValue(v){
      var o = this;
      var s = MO.Lang.String.nvl(v.toString());
      var j = RString.findChars(s,"-");
      var b = RString.findChars(s,"%");
      s = RString.removeChars(s, "'");
      s = RString.removeChars(s, " ");
      s = RString.removeChars(s, "%");
      s = RString.removeChars(s, "-");
      if (!MO.Lang.String.isEmpty(s)) {
         var sc = '';
         var c = '';
         var n = 0;
         for(var i = s.length; i > -1; i--){
            if(i != 0 && n != 0 && n % 3 == 0){
               sc = "'" + s.charAt(i) + sc;
            }else{
               sc = s.charAt(i) + sc;
            }
            n++;
         }
         if(-1 != j){
             sc = "-" + sc ;
          }
         if(-1 != b){
            sc = sc +"%";
         }
         return sc;
      }
      return s;
   }
   MO.FUiDataNumber2_removeSplit = function FUiDataNumber2_removeSplit(s){
      var o = this;
      var s = MO.Lang.String.nvl(s);
      s = RString.removeChars(s,"'");
      s = RString.removeChars(s,"%");
      return s;
   }
   MO.FUiDataNumber2_precisionValue = function FUiDataNumber2_precisionValue(v){
      var o = this;
      if(MO.Lang.String.isEmpty(v)){
         return v;
      }
      var l1,l2;
      var p = MO.Lang.String.nvl(o.editPrecision);
      v = MO.Lang.String.nvl(v);
      if(RString.contains(p,'.')){
         var sp = p.split('.')
         l2 = sp[1].length;
      }else{
        l1 = p.length;
      }
      if(RString.contains(v, '.')){
         var vs = v.split('.');
         if(l2){
            if(l2 > vs[1].length){
               vs[1] = RString.rpad(vs[1],l2 - vs[1].length,'0');
            }else if(l2 <= vs[1].length){
               vs[1] = vs[1].substring(0, l2);
            }
         }
         if(l1){
            if(l1 > vs[0].length){
               alert(l1);
            }else if(l1 < vs[0].length){
               vs[0] = vs[0].substring(0, vs[0].length - l1);
               vs[0] = RString.rpad(vs[0],l1,'0');
            }
            vs[1] = null;
         }
         if(vs[1]){
            v = vs[0] + '.' + RString.nvl(vs[1]);
         }else{
            v = vs[0];
         }
      }else{
         if(l1){
            if(l1 <= v.length){
               v = v.substring(0, v.length - l1 + 1);
               for(var n = 0; n < l1 - 1;n++){
                  v = v.concat('0');
               }
            }
            else if(l1 > v.length){
               v = 0;
            }
         }
         if(l2){
            v = v + '.';
            for(var n = 0; n < l2;n++){
               v = v.concat('0');
            }
         }
      }
      return v;
   }
   MO.FUiDataNumber2_dispose = function FUiDataNumber2_dispose(){
      var o = this;
      o.base.FDuiNumber2.dispose.call(o);
      o.hLabel = null;
      o.hUpIcon = null;
      o.hDownIcon = null;
      o.hChgIic = null;
   }
}
with(MO){
   MO.FUiDataNumber3 = function FUiDataNumber3(o){
      o = MO.Class.inherits(this, o, FDuiNumber3);
      return o;
   }
   MO.FUiDataNumber3_onEditFocus = function FUiDataNumber3_onEditFocus(e){
      var o = this;
      o.setText(o.formatValue(o.text()));
   }
   MO.FUiDataNumber3_onEditBlur = function FUiDataNumber3_onEditBlur(e){
      var o = this;
      o.setText(o.formatText(o.text()));
   }
   MO.FUiDataNumber3_onBuildEdit = function FUiDataNumber3_onBuildEdit(b){
      var o = this;
      var htb = MO.Window.Builder.appendTable(b.hPanel);
      htb.style.tableLayout = 'fixed';
      var hr = o.hEdit = htb.insertRow();
      o.onBuildChange(hr.insertCell());
      if(o.canZoom()){
         var hc = hr.insertCell();
         o.hZoom = MO.Window.Builder.appendIcon(hc, 'ctl.zooms');
         hc.width = 16;
      }
      var hc = hr.insertCell();
      hc.style.width = '100%';
      var he = o.hEdit = MO.Window.Builder.appendEdit(hc, o.style('Edit'));
      o.attachEvent('onEditFocus', he, o.onEditFocus);
      o.attachEvent('onEditKeyPress', he, o.onEditKeyPress);
      o.attachEvent('onEditBlur', he, o.onEditBlur);
      o.attachEvent('onDataKeyUp', he, o.ohEditKeyUp);
      if(o.editLength){
         he.maxLength = o.editLength;
      }
      o.buildAdjustForm(b.hDrop);
   }
   MO.FUiDataNumber3_setUnitIcon = function FUiDataNumber3_setUnitIcon(i){
      var o = this;
      var hui = o.hUnit;
      hui.innerHTML = '<IMG src='+i+'>';
   }
   MO.FUiDataNumber3_onDataKeyDown = function FUiDataNumber3_onDataKeyDown(s, e){
      var o = this;
      if(o.canEdit){
         if(EKey.Up == e.keyCode){
            o.adjustValue(true);
         }else if(EKey.Down == e.keyCode){
            o.adjustValue(false);
         }
      }
      o.base.FDuiNumber3.onDataKeyDown.call(o, s, e);
   }
   MO.FUiDataNumber3_ohEditKeyUp = function FUiDataNumber3_ohEditKeyUp(s, e){
      var o = this;
      if(EKey.Up == e.keyCode && o.canEdit){
         o.hUpIcon.src = o.styleIconPath('UpSelect');
      }else if(EKey.Down == e.keyCode && o.canEdit){
         o.hDownIcon.src = o.styleIconPath('DownSelect');
      }
   }
   MO.FUiDataNumber3_onEditKeyDown = function FUiDataNumber3_onEditKeyDown(e) {
      var o = this;
      if(o.canEdit){
         if (EKey.Up == e.keyCode) {
            e.source.hUpIcon.src = o.styleIconPath('up');
            o.changeValue(e, 'Y');
         }else if (EKey.Down == e.keyCode){
            e.source.hDownIcon.src = o.styleIconPath('down');
            o.changeValue(e, 'N');
         }
      }
   }
   MO.FUiDataNumber3_onEditKeyUp = function FUiDataNumber3_onEditKeyUp(e) {
      var o = this;
      if(o.canEdit){
         if (EKey.Up == e.keyCode){
            e.source.hUpIcon.src = o.styleIconPath('upSelect');
         }else if (EKey.Down == e.keyCode){
            e.source.hDownIcon.src = o.styleIconPath('downSelect');
         }
      }
   }
   MO.FUiDataNumber3_onEditDoubleClick = function FUiDataNumber3_onEditDoubleClick(){
      var o = this;
      this.onListClick();
   }
   MO.FUiDataNumber3_validPattern = function FUiDataNumber3_validPattern(s) {
      var o = this;
      var flag = true;
      var s = MO.Lang.String.nvl(s);
      if(!RRegExp.test(ERegExp.NUMBER,s)){
         return false;
      }
      var r = null;
      if (o.dataType) {
         for (n in ERegExp) {
            if (RString.equals(n, o.dataType)) {
               r = ERegExp[n];
               break;
            }
         }
         if (RString.equals(RClass.name(r), "RegExp")) {
            flag = RRegExp.test(r, s) ? flag & true : flag & false;
         }
      }
      if (o.editMaxvalue) {
         flag = parseFloat(s) <= parseFloat(o.editMaxvalue) ? flag & true : flag & false;
      }
      if (o.editMinvalue) {
         flag = parseFloat(s) >= parseFloat(o.editMinvalue) ? flag & true : flag & false;
      }
      return flag;
   }
   MO.FUiDataNumber3_refreshStyle = function FUiDataNumber3_refreshStyle(){
      var o = this;
      o.base.FDuiNumber3.refreshStyle.call(o);
      o.hUpIcon.src = o.styleIconPath(o._hover ? 'UpSelect' : 'Up');
      o.hDownIcon.src = o.styleIconPath(o._hover ? 'DownSelect' : 'Down');
   }
   MO.FUiDataNumber3_splitValue = function FUiDataNumber3_splitValue(v){
      var o = this;
      var s = MO.Lang.String.nvl(v.toString());
      var j = RString.findChars(s,"-");
      var b = RString.findChars(s,"%");
      s = RString.removeChars(s, "'");
      s = RString.removeChars(s, " ");
      s = RString.removeChars(s, "%");
      s = RString.removeChars(s, "-");
      if (!MO.Lang.String.isEmpty(s)) {
         var sc = '';
         var c = '';
         var n = 0;
         for(var i = s.length; i > -1; i--){
            if(i != 0 && n != 0 && n % 3 == 0){
               sc = "'" + s.charAt(i) + sc;
            }else{
               sc = s.charAt(i) + sc;
            }
            n++;
         }
         if(-1 != j){
             sc = "-" + sc ;
          }
         if(-1 != b){
            sc = sc +"%";
         }
         return sc;
      }
      return s;
   }
   MO.FUiDataNumber3_removeSplit = function FUiDataNumber3_removeSplit(s){
      var o = this;
      var s = MO.Lang.String.nvl(s);
      s = RString.removeChars(s,"'");
      s = RString.removeChars(s,"%");
      return s;
   }
   MO.FUiDataNumber3_precisionValue = function FUiDataNumber3_precisionValue(v){
      var o = this;
      if(MO.Lang.String.isEmpty(v)){
         return v;
      }
      var l1,l2;
      var p = MO.Lang.String.nvl(o.editPrecision);
      v = MO.Lang.String.nvl(v);
      if(RString.contains(p,'.')){
         var sp = p.split('.')
         l2 = sp[1].length;
      }else{
        l1 = p.length;
      }
      if(RString.contains(v, '.')){
         var vs = v.split('.');
         if(l2){
            if(l2 > vs[1].length){
               vs[1] = RString.rpad(vs[1],l2 - vs[1].length,'0');
            }else if(l2 <= vs[1].length){
               vs[1] = vs[1].substring(0, l2);
            }
         }
         if(l1){
            if(l1 > vs[0].length){
               alert(l1);
            }else if(l1 < vs[0].length){
               vs[0] = vs[0].substring(0, vs[0].length - l1);
               vs[0] = RString.rpad(vs[0],l1,'0');
            }
            vs[1] = null;
         }
         if(vs[1]){
            v = vs[0] + '.' + RString.nvl(vs[1]);
         }else{
            v = vs[0];
         }
      }else{
         if(l1){
            if(l1 <= v.length){
               v = v.substring(0, v.length - l1 + 1);
               for(var n = 0; n < l1 - 1;n++){
                  v = v.concat('0');
               }
            }
            else if(l1 > v.length){
               v = 0;
            }
         }
         if(l2){
            v = v + '.';
            for(var n = 0; n < l2;n++){
               v = v.concat('0');
            }
         }
      }
      return v;
   }
   MO.FUiDataNumber3_dispose = function FUiDataNumber3_dispose(){
      var o = this;
      o.base.FDuiNumber3.dispose.call(o);
      o.hLabel = null;
      o.hUpIcon = null;
      o.hDownIcon = null;
      o.hChgIic = null;
   }
}
with(MO){
   MO.FUiDataNumber4 = function FUiDataNumber4(o){
      o = MO.Class.inherits(this, o, FDuiNumber4);
      return o;
   }
   MO.FUiDataNumber4_onEditFocus = function FUiDataNumber4_onEditFocus(e){
      var o = this;
      o.setText(o.formatValue(o.text()));
   }
   MO.FUiDataNumber4_onEditBlur = function FUiDataNumber4_onEditBlur(e){
      var o = this;
      o.setText(o.formatText(o.text()));
   }
   MO.FUiDataNumber4_onBuildEdit = function FUiDataNumber4_onBuildEdit(b){
      var o = this;
      var htb = MO.Window.Builder.appendTable(b.hPanel);
      htb.style.tableLayout = 'fixed';
      var hr = o.hEdit = htb.insertRow();
      o.onBuildChange(hr.insertCell());
      if(o.canZoom()){
         var hc = hr.insertCell();
         o.hZoom = MO.Window.Builder.appendIcon(hc, 'ctl.zooms');
         hc.width = 16;
      }
      var hc = hr.insertCell();
      hc.style.width = '100%';
      var he = o.hEdit = MO.Window.Builder.appendEdit(hc, o.style('Edit'));
      o.attachEvent('onEditFocus', he, o.onEditFocus);
      o.attachEvent('onEditKeyPress', he, o.onEditKeyPress);
      o.attachEvent('onEditBlur', he, o.onEditBlur);
      o.attachEvent('onDataKeyUp', he, o.ohEditKeyUp);
      if(o.editLength){
         he.maxLength = o.editLength;
      }
      o.buildAdjustForm(b.hDrop);
   }
   MO.FUiDataNumber4_setUnitIcon = function FUiDataNumber4_setUnitIcon(i){
      var o = this;
      var hui = o.hUnit;
      hui.innerHTML = '<IMG src='+i+'>';
   }
   MO.FUiDataNumber4_onDataKeyDown = function FUiDataNumber4_onDataKeyDown(s, e){
      var o = this;
      if(o.canEdit){
         if(EKey.Up == e.keyCode){
            o.adjustValue(true);
         }else if(EKey.Down == e.keyCode){
            o.adjustValue(false);
         }
      }
      o.base.FDuiNumber4.onDataKeyDown.call(o, s, e);
   }
   MO.FUiDataNumber4_ohEditKeyUp = function FUiDataNumber4_ohEditKeyUp(s, e){
      var o = this;
      if(EKey.Up == e.keyCode && o.canEdit){
         o.hUpIcon.src = o.styleIconPath('UpSelect');
      }else if(EKey.Down == e.keyCode && o.canEdit){
         o.hDownIcon.src = o.styleIconPath('DownSelect');
      }
   }
   MO.FUiDataNumber4_onEditKeyDown = function FUiDataNumber4_onEditKeyDown(e) {
      var o = this;
      if(o.canEdit){
         if (EKey.Up == e.keyCode) {
            e.source.hUpIcon.src = o.styleIconPath('up');
            o.changeValue(e, 'Y');
         }else if (EKey.Down == e.keyCode){
            e.source.hDownIcon.src = o.styleIconPath('down');
            o.changeValue(e, 'N');
         }
      }
   }
   MO.FUiDataNumber4_onEditKeyUp = function FUiDataNumber4_onEditKeyUp(e) {
      var o = this;
      if(o.canEdit){
         if (EKey.Up == e.keyCode){
            e.source.hUpIcon.src = o.styleIconPath('upSelect');
         }else if (EKey.Down == e.keyCode){
            e.source.hDownIcon.src = o.styleIconPath('downSelect');
         }
      }
   }
   MO.FUiDataNumber4_onEditDoubleClick = function FUiDataNumber4_onEditDoubleClick(){
      var o = this;
      this.onListClick();
   }
   MO.FUiDataNumber4_validPattern = function FUiDataNumber4_validPattern(s) {
      var o = this;
      var flag = true;
      var s = MO.Lang.String.nvl(s);
      if(!RRegExp.test(ERegExp.NUMBER,s)){
         return false;
      }
      var r = null;
      if (o.dataType) {
         for (n in ERegExp) {
            if (RString.equals(n, o.dataType)) {
               r = ERegExp[n];
               break;
            }
         }
         if (RString.equals(RClass.name(r), "RegExp")) {
            flag = RRegExp.test(r, s) ? flag & true : flag & false;
         }
      }
      if (o.editMaxvalue) {
         flag = parseFloat(s) <= parseFloat(o.editMaxvalue) ? flag & true : flag & false;
      }
      if (o.editMinvalue) {
         flag = parseFloat(s) >= parseFloat(o.editMinvalue) ? flag & true : flag & false;
      }
      return flag;
   }
   MO.FUiDataNumber4_refreshStyle = function FUiDataNumber4_refreshStyle(){
      var o = this;
      o.base.FDuiNumber4.refreshStyle.call(o);
      o.hUpIcon.src = o.styleIconPath(o._hover ? 'UpSelect' : 'Up');
      o.hDownIcon.src = o.styleIconPath(o._hover ? 'DownSelect' : 'Down');
   }
   MO.FUiDataNumber4_splitValue = function FUiDataNumber4_splitValue(v){
      var o = this;
      var s = MO.Lang.String.nvl(v.toString());
      var j = RString.findChars(s,"-");
      var b = RString.findChars(s,"%");
      s = RString.removeChars(s, "'");
      s = RString.removeChars(s, " ");
      s = RString.removeChars(s, "%");
      s = RString.removeChars(s, "-");
      if (!MO.Lang.String.isEmpty(s)) {
         var sc = '';
         var c = '';
         var n = 0;
         for(var i = s.length; i > -1; i--){
            if(i != 0 && n != 0 && n % 3 == 0){
               sc = "'" + s.charAt(i) + sc;
            }else{
               sc = s.charAt(i) + sc;
            }
            n++;
         }
         if(-1 != j){
             sc = "-" + sc ;
          }
         if(-1 != b){
            sc = sc +"%";
         }
         return sc;
      }
      return s;
   }
   MO.FUiDataNumber4_removeSplit = function FUiDataNumber4_removeSplit(s){
      var o = this;
      var s = MO.Lang.String.nvl(s);
      s = RString.removeChars(s,"'");
      s = RString.removeChars(s,"%");
      return s;
   }
   MO.FUiDataNumber4_precisionValue = function FUiDataNumber4_precisionValue(v){
      var o = this;
      if(MO.Lang.String.isEmpty(v)){
         return v;
      }
      var l1,l2;
      var p = MO.Lang.String.nvl(o.editPrecision);
      v = MO.Lang.String.nvl(v);
      if(RString.contains(p,'.')){
         var sp = p.split('.')
         l2 = sp[1].length;
      }else{
        l1 = p.length;
      }
      if(RString.contains(v, '.')){
         var vs = v.split('.');
         if(l2){
            if(l2 > vs[1].length){
               vs[1] = RString.rpad(vs[1],l2 - vs[1].length,'0');
            }else if(l2 <= vs[1].length){
               vs[1] = vs[1].substring(0, l2);
            }
         }
         if(l1){
            if(l1 > vs[0].length){
               alert(l1);
            }else if(l1 < vs[0].length){
               vs[0] = vs[0].substring(0, vs[0].length - l1);
               vs[0] = RString.rpad(vs[0],l1,'0');
            }
            vs[1] = null;
         }
         if(vs[1]){
            v = vs[0] + '.' + RString.nvl(vs[1]);
         }else{
            v = vs[0];
         }
      }else{
         if(l1){
            if(l1 <= v.length){
               v = v.substring(0, v.length - l1 + 1);
               for(var n = 0; n < l1 - 1;n++){
                  v = v.concat('0');
               }
            }
            else if(l1 > v.length){
               v = 0;
            }
         }
         if(l2){
            v = v + '.';
            for(var n = 0; n < l2;n++){
               v = v.concat('0');
            }
         }
      }
      return v;
   }
   MO.FUiDataNumber4_dispose = function FUiDataNumber4_dispose(){
      var o = this;
      o.base.FDuiNumber4.dispose.call(o);
      o.hLabel = null;
      o.hUpIcon = null;
      o.hDownIcon = null;
      o.hChgIic = null;
   }
}
with(MO){
   MO.FUiDataSelect = function FUiDataSelect(o){
      o = MO.Class.inherits(this, o, FDuiSelect, MUiDataField);
      return o;
   }
}
with(MO){
   MO.FUiDataColumn = function FUiDataColumn(o){
      o = MO.Class.inherits(this, o, FControl, MDataField);
      o._displayList       = true;
      o._styleLabel        = MO.Class.register(o, new MO.AStyle('_styleLabel'));
      o._styleSearchPanel  = MO.Class.register(o, new MO.AStyle('_styleSearchPanel'));
      o._styleSearchEdit   = MO.Class.register(o, new MO.AStyle('_styleSearchEdit'));
      o._styleIconSortUp   = MO.Class.register(o, new MO.AStyleIcon('_styleIconSortUp'));
      o._styleIconSortDown = MO.Class.register(o, new MO.AStyleIcon('_styleIconSortDown'));
      o._cellClass         = FCell;
      o._hForm             = null;
      o._hFormLine         = null;
      o._hIconPanel        = null;
      o._hIcon             = null;
      o._hLabel            = null;
      o._hSortPanel        = null;
      o._hSortUp           = null;
      o._hSortDown         = null;
      o._hSearchEditPanel  = null;
      o._hSearchEdit       = null;
      o.onBuildLabel       = FUiDataColumn_onBuildLabel;
      o.onBuildSearchIcon  = RMethod.empty;
      o.onBuildSearchEdit  = FUiDataColumn_onBuildSearchEdit;
      o.onBuildSearchDrop  = RMethod.empty;
      o.onBuildSearchForm  = FUiDataColumn_onBuildSearchForm;
      o.onBuildSearch      = FUiDataColumn_onBuildSearch;
      o.onBuildTotal       = FUiDataColumn_onBuildTotal;
      o.onBuildPanel       = FUiDataColumn_onBuildPanel;
      o.onBuild            = FUiDataColumn_onBuild;
      o.onSearchEnter      = MO.Class.register(o, new MO.AEventMouseEnter('onSearchEnter'));
      o.onSearchClick      = MO.Class.register(o, new MO.AEventClick('onSearchClick'));
      o.onSearchLeave      = MO.Class.register(o, new MO.AEventMouseLeave('onSearchLeave'));
      o.onSearchKeyDown    = MO.Class.register(o, new MO.AEventKeyDown('onSearchKeyDown'));
      o.createCell         = FUiDataColumn_createCell;
      return o;
   }
   MO.FUiDataColumn_onBuildLabel = function FUiDataColumn_onBuildLabel(p){
      var o = this;
      var hr = o._hFormLine;
      if (o._icon) {
         var hip = o._hIconPanel = MO.Window.Builder.appendTableCell(hr);
         o._hIcon = MO.Window.Builder.appendIcon(hip, o.icon);
      }
      var hl = o._hLabel = MO.Window.Builder.appendTableCell(hr);
      hl.innerHTML = MO.Lang.String.nvl(o.label());
      var hsp = o._hSortPanel = MO.Window.Builder.appendTableCell(hr);
      var hsu = o._hSortUp = MO.Window.Builder.appendIcon(hsp, o.styleIcon('SortUp', FUiDataColumn));
      hsu.style.display = 'none';
      var hsu = o._hSortDown = MO.Window.Builder.appendIcon(hsp, o.styleIcon('SortDown', FUiDataColumn));
      hsu.style.display = 'none';
   }
   MO.FUiDataColumn_onBuildSearchEdit = function FUiDataColumn_onBuildSearchEdit(p){
      var o = this;
      var hc = o._hSearchEditPanel = MO.Window.Builder.appendTableCell(o._hSearchFormLine, o.styleName('SearchPanel'));
      var he = o._hSearchEdit = MO.Window.Builder.appendEdit(hc, o.styleName('SearchEdit'));
   }
   MO.FUiDataColumn_onBuildSearchForm = function FUiDataColumn_onBuildSearchForm(p){
      var o = this;
      var hf = o._hSearchForm = MO.Window.Builder.appendTable(o._hSearchPanel);
      hf.width = '100%';
      hf.style.backgroundColor = '#FFFFFF';
      var hfl = o._hSearchFormLine = hf.insertRow();
      if(MO.Class.isClass(o, FUiDataColumnButton)){
         o._hSearchPanel.style.backgroundColor = '#EEEFF1';
         o._hSearchPanel.style.borderLeft='1 solid #808080';
         o._hSearchPanel.style.borderTop='1 solid #808080';
         o._hSearchPanel.style.borderBottom = '1 solid #9EC4EB';
         return;
      }
      o.onBuildSearchIcon();
      o.onBuildSearchEdit();
      o.onBuildSearchDrop();
   }
   MO.FUiDataColumn_onBuildSearch = function FUiDataColumn_onBuildSearch(p){
      var o = this;
      var h = o._hSearchPanel = MO.Window.Builder.create(p, 'TD', o.styleName('SearchPanel'));
      h.style.backgroundColor = "#FFFFFF";
      h.style.borderBottom = '1 solid #9EC4EB';
      RHtml.linkSet(h, 'control', o);
     o.attachEvent('onSearchEnter', h);
     o.attachEvent('onSearchLeave', h);
     o.onBuildSearchForm(p);
   }
   MO.FUiDataColumn_onBuildTotal = function FUiDataColumn_onBuildTotal(p){
      var o = this;
      var h = o._hTotalPanel = MO.Window.Builder.create(p, 'TD');
      RHtml.linkSet(h, 'control', o);
      h.align = 'right';
      h.style.color = '#686860';
      h.style.backgroundColor = '#F8F8F0';
      h.style.borderBottom = '1 solid #B8B8B0';
      h.innerText = ' ';
   }
   MO.FUiDataColumn_onBuildPanel = function FUiDataColumn_onBuildPanel(p) {
      var o = this;
      o._hPanel = MO.Window.Builder.create(p, 'TD', o.styleName('Label'));
   }
   MO.FUiDataColumn_onBuild = function FUiDataColumn_onBuild(p) {
      var o = this;
      var t = o.table;
      o._absEdit = o._editInsert || o._editUpdate || o._editDelete;
      if(!o._absEdit){
         if(!MO.Lang.String.isEmpty(o._lovReference)){
            o._hasDropArea = true;
         }else{
            o._hasDropArea = false;
         }
      }
      if (!MO.Lang.String.isEmpty(o._viewIcons)) {
         var im = o.iconMap = new TAttributes();
         im.split(o._viewIcons.replace(/\n/g, ';'), '=', ';');
         o.hasIconArea = im.count > 0;
      }
      o.__base.FControl.onBuild.call(o, p);
      var hp = o._hPanel;
      hp.style.padding = 4;
      var hf = o._hForm = MO.Window.Builder.appendTable(hp);
      if (!o._orderAble) {
        hf.style.cursor = 'hand';
      }
      var hr = o._hFormLine = MO.Window.Builder.appendTableRow(o._hForm);
      o.onBuildLabel(p);
      o.onBuildSearch(p);
      o.onBuildTotal(p);
      var h = o._hFixPanel = MO.Window.Builder.create(p, 'TD');
      h.height = 1;
      h.bgColor = '#FFFFFF'
      if(o._size.width < 40){
         o._size.width = 40;
      }
      RHtml.setSize(h, o._size);
      o._hPanel.style.pixelWidth = o.width;
      o._hFixPanel.style.pixelWidth = o.width;
   }
   MO.FUiDataColumn_createCell = function FUiDataColumn_createCell(p) {
      var o = this;
      var c = MO.Class.create(o._cellClass);
      var t = c._table = o._table;
      c._name = o._name;
      c._column = o;
      c.build(t._hPanel);
      c.setVisible(o._displayList);
      return c;
   }
   MO.FUiDataColumn_onCellMouseEnter = function FUiDataColumn_onCellMouseEnter(s, e){
      this.table.hoverRow(s.row, true);
   }
   MO.FUiDataColumn_onCellMouseLeave = function FUiDataColumn_onCellMouseLeave(s, e){
      this.table.hoverRow(s.row, false);
   }
   MO.FUiDataColumn_onCellMouseDown = function FUiDataColumn_onCellMouseDown(s, e){
      var o = this;
      var t = s.table;
      var r = s.row;
      t.__focusCell = s;
      t.selectRow(r, !e.ctrlKey, true);
      var fc = RConsole.find(FFocusConsole);
      var c = fc.focusControl;
      if(MO.Class.isClass(c, FDropEditor)){
         if(c.source == s){
            return;
         }
      }
      RConsole.find(FFocusConsole).focus(s);
   }
   MO.FUiDataColumn_onCellClick = function FUiDataColumn_onCellClick(s, e){
      this.table.clickRow(s.row);
   }
   MO.FUiDataColumn_onCellDoubleClick = function FUiDataColumn_onCellDoubleClick(s, e){
      var o = this;
      var r = s.row;
      if(!o.isEditAble(r)){
         o.table.doubleClickRow(r);
      }
   }
   MO.FUiDataColumn_onCellKeyDown = function FUiDataColumn_onCellKeyDown(s, e, he){
      var o = this;
      if(he){
         o.table.onCellKeyDown(s, e, he);
      }
   }
   MO.FUiDataColumn_oeMode = function FUiDataColumn_oeMode(e){
      var o = this;
      if(e.isAfter()){
         var d = false;
         if(EAction.Design == e.mode){
            d = o.dispDesign;
         }else{
            d = o._displayList;
         }
         o.inModeDisplay = d;
         o.setVisible(d);
      }
      return EEventStatus.Continue;
   }
   MO.FUiDataColumn_oeRefresh = function FUiDataColumn_oeRefresh(e) {
      var o = this;
      if(e.isBefore()){
         o.setVisible(o._displayList);
      }
   }
   MO.FUiDataColumn_onDataKeyDown = function FUiDataColumn_onDataKeyDown(s, e) {
      var o = this;
      o.__base.MEditDescriptor.onDataKeyDown.call(o, s, e);
   }
   MO.FUiDataColumn_onDataChanged = function FUiDataColumn_onDataChanged(s, e) {
      var o = this;
      o.table.setDataStatus(s.row, EDataStatus.Update);
   }
   MO.FUiDataColumn_onEditBegin = function FUiDataColumn_onEditBegin(editor) {
      var o = this;
      var row = editor.row;
      o.editor = editor;
      o.table.editRow = row;
      o.table.editColumn = o;
      o.table.select(row, true);
   }
   MO.FUiDataColumn_onEditEnd = function FUiDataColumn_onEditEnd(e) {
      var o = this;
      var row = editor.row;
      var text = editor.text();
      o.setValue(row, o.formatValue(text));
      o.setText(row, text);
      o.table.setDataStatus(row, row.isChanged() ? EDataStatus.Update : EDataStatus.Unknown)
      o.editor = null;
   }
   MO.FUiDataColumn_onEditChanged = function FUiDataColumn_onEditChanged(cell) {
      cell.row.refresh();
   }
   MO.FUiDataColumn_onHeadMouseDown = function FUiDataColumn_onHeadMouseDown(e) {
      var o = this;
      var tbl = o.table;
      var ct = tbl.dsViewer.count;
      var x = e.x;
      if(!MO.Class.isClass(o, FUiDataColumnButton)){
   	   var l = o._hPanel.offsetWidth;
   	   var r = l - 6;
   	   if (x > 0 && x < r) {
   	      if (ct > 0 && !MO.Class.isClass(e.source, FUiDataColumnStatus)) {
   	         var cs = tbl.columns;
   	         var len = cs.count;
   	         for ( var n = 0; n < len; n++) {
   	            var c = cs.value(n);
   	            c._hSortUp.style.display = 'none';
   	            c._hSortDown.style.display = 'none';
   	         }
   	         tbl.dsOrders.clear();
   	         var oi = new TOrderItem();
   	         var n = o.dataName;
   	         if (o.sortType) {
   	            oi.set(n, EOrder.Desc);
   	            o._hSortUp.style.display = 'none';
   	            o._hSortDown.style.display = 'block';
   	         } else {
   	            o._hSortUp.style.display = 'block';
   	            o._hSortDown.style.display = 'none';
   	            oi.set(n, EOrder.Asc);
   	         }
   	         o.sortType = !o.sortType;
   	         tbl.dsOrders.push(oi);
   	         tbl.dsSearch();
   	      }
      }
      }
   }
   MO.FUiDataColumn_onRowClick = function FUiDataColumn_onRowClick(s, e){
      RConsole.find(FListenerConsole).process(FGridControl, EGridAction.RowClick, s.row, s.row);
   }
   MO.FUiDataColumn_createMoveable = function FUiDataColumn_createMoveable(p) {
      var o = this;
      var r = o.cloneMove;
      if (!r) {
         r = MO.Class.create(o.constructor);
         r.buildMode = EColumnMode.Drag;
         r.assign(o, EAssign.Property);
         r.build();
         o.cloneMove = r;
      }
      var hc = o.panel(EPanel.Move);
      var hr = r.panel(EPanel.Move);
      RHtml.setPixelRect(hr, RHtml.rect(hc));
      hr.className = r.styleName('DesignMove');
      hr.style.pixelLeft = hc.offsetLeft;
      r.show();
      return r;
   }
   MO.FUiDataColumn_searchValue = function FUiDataColumn_searchValue() {
      var o = this;
      if(o._hSearchEdit){
         return o._hSearchEdit.value;
      }
   }
   MO.FUiDataColumn_setStyleStatus = function FUiDataColumn_setStyleStatus(row, status) {
      var o = this;
      var h = o.cell(row);
      if (h) {
         var s = h.style;
         switch (status) {
         case EStyle.Normal:
            if (row.isDelete()) {
               s.backgroundColor = EColor.Delete;
            } else {
               if (o.isEditAble(row)) {
                  s.backgroundColor = EColor.Edit;
               } else {
                  s.backgroundColor = EColor.Readonly;
               }
            }
            break;
         case EStyle.Select:
            if (row.isDelete()) {
               s.backgroundColor = EColor.Select;
            } else {
               s.textDecoration = 'none';
               if (o.isEditAble(row)) {
                  s.backgroundColor = EColor.RowEditSelect;
               } else {
                  s.backgroundColor = EColor.Select;
               }
            }
            break;
         case EStyle.Delete:
            s.textDecoration = 'line-through';
            s.backgroundColor = EColor.Select;
            break;
         }
      }
   }
   MO.FUiDataColumn_cell = function FUiDataColumn_cell(r){
      return r.cell(this.index);
   }
   MO.FUiDataColumn_equalsValue = function FUiDataColumn_equalsValue(s, t) {
      return RString.nvl(s).replace(/\n/g, '\\n').replace(/\r/g, '\\r') == MO.Lang.String.nvl(t).replace(/\n/g, '\\n').replace(/\r/g, '\\r');
   }
   MO.FUiDataColumn_setWidth = function FUiDataColumn_setWidth(w){
      var o = this;
      o._hPanel.style.pixelWidth = w;
      o._hFixPanel.style.pixelWidth = w;
   }
   MO.FUiDataColumn_setVisible = function FUiDataColumn_setVisible(v){
      var o = this;
      o.isDisplay = v;
      var s = v ? 'block' : 'none';
      o._hPanel.style.display = s;
      o._hSearchPanel.style.display = s;
      o._hTotalPanel.style.display = s;
      o._hFixPanel.style.display = s;
   }
   MO.FUiDataColumn_moveCellFocus = function FUiDataColumn_moveCellFocus(row, p) {
      var o = this;
      var t = o.table;
      var mt = null;
      var mr = null;
      var mc = null;
      if(EPosition.Top == p){
         mt = o;
         mr = t.rows.get(t.rows.indexOf(row) - 1);
         if(mr){
            mc = mr.cell(mt.index);
         }
      }else if(EPosition.Bottom == p){
         mt = o;
         mr = t.rows.get(t.rows.indexOf(row) + 1);
         if(mr){
            mc = mr.cell(mt.index);
         }
      }else if (EPosition.Before == p){
         var fi = o.index - 1;
         var ri = t.rows.indexOf(row);
         for(var n = ri; n >= 0; n--){
            var fr = t.rows.get(n);
            for( var i = fi; i >= 0; i--){
               var ft = t.columns.value(i);
               if(MO.Class.isClass(ft, FUiDataColumn) && ft._displayList){
                  mt = ft;
                  mr = fr;
                  mc = mr.cell(mt.index);
                  break;
               }
            }
            if(mt){
               break;
            }
            fi = t.columns.count - 1;
         }
      }else if(EPosition.After == p){
         var fi = o.index + 1;
         var ri = t.rows.indexOf(row);
         var cc = t.columns.count;
         var rc = t.rows.count;
         for(var n = ri; n < rc; n++){
            var fr = t.rows.get(n);
            for(var i = fi; i < cc; i++){
               var ft = t.columns.value(i);
               if(MO.Class.isClass(ft, FUiDataColumn) && ft._displayList){
                  mt = ft;
                  mr = fr;
                  mc = mr.cell(mt.index);
                  break;
               }
            }
            if(mt){
               break;
            }
            fi = 0;
         }
      }
      if(mt && mr && mc){
         mc.focus(true);
         RConsole.find(FFocusConsole).focus(mc);
      }
   }
   MO.FUiDataColumn_getEditRange = function FUiDataColumn_getEditRange(){
      var o = this;
      var hc = o._hSearchPanel;
      var p = RHtml.offsetPosition(hc);
      var w = hc.offsetWidth;
      var h = hc.offsetHeight;
      return new TRange(p.x, p.y, w, h);
   }
   MO.FUiDataColumn_dispose = function FUiDataColumn_dispose(){
      var o = this;
      o.__base.FControl.dispose.call(o);
      RMemory.freeHtml(o._hSearchPanel);
      RMemory.freeHtml(o._hFixPanel);
      o._hForm = null;
      o._hFormLine = null;
      o._hIconPanel = null;
      o._hIcon = null;
      o._hHeadPanel = null;
      o._hLabel = null;
      o._hSortPanel = null;
      o._hSortUp = null;
      o._hSortDown = null;
      o._hSearchPanel = null;
      o._hSearchForm = null;
      o._hSearchFormLine = null;
      o._hSearchIconPanel = null;
      o._hSearchIcon = null;
      o._hSearchEditPanel = null;
      o._hSearchEdit = null;
      o._hSearchDropPanel = null;
      o._hSearchDrop = null;
      o._hFixPanel = null;
   }
   MO.FUiDataColumn_dump = function FUiDataColumn_dump(s) {
      var o = this;
      s = RString.nvlStr(s);
      s.append(RClass.dump(o), '[');
      s.append('name=', o.name);
      s.appendIf(o.icon, ',icon=', o.icon);
      s.appendIf(o.label, ',label=', o.label);
      s.appendIf(o.align, ',align=', o.align);
      s.appendIf(o.valign, ',valign=', o.valign);
      s.appendIf(o.dataName, ',dataName=', o.dataName);
      s.appendIf(o.dataDefault, ',dataDefault=', o.dataDefault);
      s.appendIf(o.index, ',index=', o.index);
      s.append(']');
      s.append(' [editAccess=');
      s.append(o.editInsert ? 'I' : '_');
      s.append(o.editUpdate ? 'U' : '_');
      s.append(']');
      return s;
   }
}
with(MO){
   MO.FUiDataToolBar = function FUiDataToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      return o;
   }
}
with(MO){
   MO.FUiDataToolButton = function FUiDataToolButton(o){
      o = MO.Class.inherits(this, o, FDuiToolButton);
      o._serviceName     = MO.Class.register(o, new MO.APtyString('_serviceName'));
      return o;
   }
   MO.FUiDataToolButton_click = function FUiDataToolButton_click(){
      var o = this;
         o.processClickListener(o);
   }
   MO.FUiDataToolButton_onShowHint = function FUiDataToolButton_onShowHint(a){
      var o = this;
      a.status = EActive.Finish;
      if(o.hintBox){
         o.hintBox.show();
      }
   }
}
MO.FDuiDataTreeView = function FDuiDataTreeView(o){
   o = MO.Class.inherits(this, o, MO.FDuiTreeView);
   o._serviceDefine       = null;
   o._serviceCode         = MO.Class.register(o, new MO.APtyString('_serviceCode', 'service'));
   o._statusLoading       = false;
   o._listenersDefineLoad = MO.Class.register(o, new MO.AListener('_listenersDefineLoad'));
   o._listenersNodeLoad   = MO.Class.register(o, new MO.AListener('_listenersNodeLoad'));
   o.onDefineLoad         = MO.FDuiDataTreeView_onDefineLoad;
   o.onNodeLoaded         = MO.FDuiDataTreeView_onNodeLoaded;
   o.construct            = MO.FDuiDataTreeView_construct;
   o.buildNode            = MO.FDuiDataTreeView_buildNode;
   o.loadDefine           = MO.FDuiDataTreeView_loadDefine;
   o.loadService          = MO.FDuiDataTreeView_loadService;
   o.loadNode             = MO.FDuiDataTreeView_loadNode;
   o.reload               = MO.FDuiDataTreeView_reload;
   o.reloadNode           = MO.FDuiDataTreeView_reloadNode;
   o.reloadParentNode     = MO.FDuiDataTreeView_reloadParentNode;
   o.dispose              = MO.FDuiDataTreeView_dispose;
   return o;
}
MO.FDuiDataTreeView_onDefineLoad = function FDuiDataTreeView_onDefineLoad(event){
   var o = this;
   var xroot = event.root;
   if(xroot == null){
      throw new MO.TError(o, 'Load tree data failure.');
   }
   var xtree = event.xtree = xroot.find('TreeView');
   MO.Dui.Control.build(o, xtree, null, o._hPanel);
   o.processDefineLoadListener(event);
}
MO.FDuiDataTreeView_onNodeLoaded = function FDuiDataTreeView_onNodeLoaded(event){
   var o = this;
   var xroot = event.root;
   if(!xroot){
      throw new MO.TError(o, 'Load tree data failure.');
   }
   var parentNode = event.connection.parentNode;
   var ln = o._loadingNode;
   if(ln._hPanel.parentElement){
      o._hNodeRows.removeChild(ln._hPanel);
   }
   o._statusLoading = false;
   o.buildNode(parentNode, xroot);
   o.processNodeLoadListener(event);
}
MO.FDuiDataTreeView_construct = function FDuiDataTreeView_construct(){
   var o = this;
   o.__base.FDuiTreeView.construct.call(o);
}
MO.FDuiDataTreeView_buildNode = function FDuiDataTreeView_buildNode(parent, xconfig){
   var o = this;
   var xnodes = xconfig._nodes;
   if(xnodes){
      var count = xnodes.count();
      for(var i = 0; i < count; i++){
         var xnode = xnodes.get(i);
         if(xnode.isName('TreeNode')){
            var node = o.createNode();
            node.loadConfig(xnode);
            if(parent){
               parent.push(node);
            }else{
               o.push(node);
            }
            o.appendNode(node, parent);
            if(xnode.hasNode()){
               o.innerBuildNode(node, xnode);
               node.extend(false);
            }
         }
      }
   }
   if(parent){
      parent.calculateImage();
   }
}
MO.FDuiDataTreeView_loadDefine = function FDuiDataTreeView_loadDefine(code){
   var o = this;
   var url = MO.Lang.String.format('/{1}.ws?action=query&code={2}', o._serviceDefine, code);
   var connection = MO.Console.find(MO.FXmlConsole).sendAsync(url);
   connection.addLoadListener(o, o.onDefineLoad);
}
MO.FDuiDataTreeView_loadService = function FDuiDataTreeView_loadService(serviceCode, attributes){
   var o = this;
   o._serviceCode = serviceCode;
   o.clear();
   var service = MO.RDuiService.parse(serviceCode);
   if(!service){
      throw new MO.TError(o, 'Invalid service code.');
   }
   attributes = MO.Lang.Object.nvl(attributes, o._attributes);
   var xdocument = new MO.TXmlDocument();
   var xroot = xdocument.root();
   xroot.set('action', service.action);
   MO.Console.find(MO.FDuiEnvironmentConsole).build(xroot);
   if(!attributes.isEmpty()){
      if(MO.Class.isClass(attributes, MO.TNode)){
         xroot.push(attributes);
      }if(MO.Class.isClass(attributes, MO.TAttributes)){
         xroot.create('Tree').attributes = attributes;
         xroot.create('Attributes').attributes = attributes;
      }else{
         xroot.create('Tree').value = attributes;
         xroot.create('Attributes').value = attributes;
      }
   }
   o._focusNode = null;
   var connection = MO.Console.find(MO.FXmlConsole).sendAsync(service.url, xdocument);
   connection.addLoadListener(o, o.onNodeLoaded);
}
MO.FDuiDataTreeView_loadNode = function FDuiDataTreeView_loadNode(node, refresh){
   var o = this;
   o._statusLoading = true;
   node.removeChildren();
   var type = null;
   var findNode = node;
   var serviceCode = o._serviceCode;
   while(MO.Class.isClass(findNode, MO.FDuiTreeNode)){
      type = findNode.type();
      if(type && type._service){
         serviceCode = type._service;
         break;
      }
      findNode = findNode._parent;
   }
   if(!serviceCode){
      throw new MO.TError(o, 'Unknown service code.');
   }
   var service = MO.RDuiService.parse(serviceCode);
   if(!service){
      throw new MO.TError(o, 'Unknown service.');
   }
   var findNode = node;
   while(MO.Class.isClass(fn, MO.FDuiTreeNode)){
      type = findNode.type();
      if(type && type._action){
         break;
      }
      findNode = findNode._parent;
   }
   var action = MO.Lang.String.nvl(type._action, service.action);
   if(!action){
      throw new MO.TError(o, 'Unknown service action.');
   }
   var event = new MO.SEvent();
   event.tree = o;
   event.node = node;
   o.processNodeLoadListener(event);
   event.dispose();
   var xd = new MO.TXmlDocument();
   var x = xd.root();
   x.set('action', action);
   x.set('type', type._linker);
   x.create('Attributes', o._attributes);
   var fn = node;
   while(MO.Class.isClass(fn, MO.FDuiTreeNode)){
      x = x.create('TreeNode');
      fn.propertySave(x);
      fn = fn._parent;
   }
   node._extended = true;
   if(node._child && node._hImage){
      node._hImage.src = MO.RResource.iconPath(o._iconMinus);
   }
   var ln = o._loadingNode;
   var lastNode = node.searchLast();
   var nr = lastNode._hPanel.rowIndex;
   o._hNodeRows.appendChild(ln._hPanel);
   MO.Window.Html.tableMoveRow(o._hNodeForm, ln._hPanel.rowIndex, nr + 1);
   ln.setLevel(node.level() + 1);
   var url = MO.RDuiService.makeUrl(service.service, action);
   var connection = MO.Console.find(MO.FXmlConsole).sendAsync(url, xd);
   connection.parentNode = node;
   connection.addLoadListener(o, o.onNodeLoaded);
}
MO.FDuiDataTreeView_reload = function FDuiDataTreeView_reload(){
   var o = this;
   o.clear();
   o.loadService(o._serviceCode);
}
MO.FDuiDataTreeView_reloadNode = function FDuiDataTreeView_reloadNode(node){
   var o = this;
   var selectNode = MO.Runtime.nvl(node, o._focusNode);
   if(!selectNode){
      o.reload();
   }else{
      selectNode.removeChildren();
      o.loadNode(selectNode);
   }
}
MO.FDuiDataTreeView_reloadParentNode = function FDuiDataTreeView_reloadParentNode(node){
   var o = this;
   var selectNode = MO.Runtime.nvl(node, o._focusNode);
   if(selectNode){
      var parentNode = selectNode.parent();
      if(MO.Class.isClass(parentNode, MO.FDuiTreeNode)){
         selectNode = selectNode.parent();
      }else{
         selectNode = null;
      }
   }
   if(!selectNode){
      o.reload();
   }else{
      selectNode.removeChildren();
      o.loadNode(selectNode);
   }
}
MO.FDuiDataTreeView_dispose = function FDuiDataTreeView_dispose(){
   var o = this;
   o.__base.FDuiTreeView.dispose.call(o);
}
MO.EDsCanvasDrag = new function EDsCanvasDrag(){
   var o = this;
   o.Unknown = 0;
   o.X       = 1;
   o.Y       = 2;
   o.Z       = 3;
   o.All     = 4;
   return o;
}
MO.EDsCanvasMode = new function EDsCanvasMode(){
   var o = this;
   o.Unknown   = 0;
   o.Drop      = 1;
   o.Select    = 2;
   o.Translate = 3;
   o.Rotation  = 4;
   o.Scale     = 5;
   return o;
}
MO.EDsFrame = new function EDsFrame(){
   var o = this;
   o.CommonSpacePropertyFrame      = 'resource.common.property.SpaceFrame';
   o.CommonTechniquePropertyFrame  = 'resource.common.property.TechniqueFrame';
   o.CommonRegionPropertyFrame     = 'resource.common.property.RegionFrame';
   o.CommonCameraPropertyFrame     = 'resource.common.property.CameraFrame';
   o.CommonLightPropertyFrame      = 'resource.common.property.LightFrame';
   o.CommonMaterialPropertyFrame   = 'resource.common.property.MaterialFrame';
   o.CommonLayerPropertyFrame      = 'resource.common.property.LayerFrame';
   o.CommonDisplayPropertyFrame    = 'resource.common.property.DisplayFrame';
   o.CommonAnimationPropertyFrame  = 'resource.common.property.AnimationFrame';
   o.CommonMoviePropertyFrame      = 'resource.common.property.MovieFrame';
   o.CommonRenderablePropertyFrame = 'resource.common.property.RenderableFrame';
   o.SolutionProjectPropertyFrame  = 'resource.solution.property.ProjectFrame';
   o.ResourcePropertyFrame         = 'resource.resource.property.SpaceFrame';
   o.BitmapPropertyFrame           = 'resource.bitmap.property.Frame';
   o.MaterialPropertyFrame         = 'resource.material.property.Frame';
   o.MeshSpacePropertyFrame        = 'resource.mesh.property.SpaceFrame';
   o.MeshLayerPropertyFrame        = 'resource.mesh.property.LayerFrame';
   o.MeshDisplayPropertyFrame      = 'resource.mesh.property.DisplayFrame';
   o.MeshRenderablePropertyFrame   = 'resource.mesh.property.RenderableFrame';
   o.ModelSpacePropertyFrame       = 'resource.model.property.SpaceFrame';
   o.ModelLayerPropertyFrame       = 'resource.model.property.LayerFrame';
   o.ModelDisplayPropertyFrame     = 'resource.model.property.DisplayFrame';
   o.ModelRenderablePropertyFrame  = 'resource.model.property.RenderableFrame';
   o.SceneSpacePropertyFrame       = 'resource.scene.property.SpaceFrame';
   o.SceneDisplayPropertyFrame     = 'resource.scene.property.DisplayFrame';
   o.SceneMoviePropertyFrame       = 'resource.scene.property.MovieFrame';
   o.SceneRenderablePropertyFrame  = 'resource.scene.property.RenderableFrame';
   return o;
}
MO.EDsFrameSet = new function EDsFrameSet(){
   var o = this;
   o.PrivateSolutionFrameSet         = 'resource.private.solution.FrameSet';
   o.PrivateProjectFrameSet          = 'resource.private.project.FrameSet';
   o.PrivateResourceFrameSet         = 'resource.private.resource.FrameSet';
   o.PrivateBitmapFrameSet           = 'resource.private.bitmap.FrameSet';
   o.PrivateMaterialFrameSet         = 'resource.private.material.FrameSet';
   o.PrivateModelFrameSet            = 'resource.private.model.FrameSet';
   o.PrivateTemplateFrameSet         = 'resource.private.template.FrameSet';
   o.PrivateSceneFrameSet            = 'resource.private.scene.FrameSet';
   o.ShareResourceFrameSet           = 'resource.share.resource.FrameSet';
   o.ShareBitmapFrameSet             = 'resource.share.bitmap.FrameSet';
   o.ShareMaterialFrameSet           = 'resource.share.material.FrameSet';
   o.ShareModelFrameSet              = 'resource.share.model.FrameSet';
   o.ShareTemplateFrameSet           = 'resource.share.template.FrameSet';
   o.ShareSceneFrameSet              = 'resource.share.scene.FrameSet';
   o.SystemDesignPersistenceFrameSet = 'system.design.persistence.FrameSet';
   o.SystemDesignListFrameSet        = 'system.design.list.FrameSet';
   o.SystemDesignTreeFrameSet        = 'system.design.tree.FrameSet';
   o.SystemDesignFrameFrameSet       = 'system.design.frame.FrameSet';
   return o;
}
with(MO){
   MO.MDsBoundBox = function MDsBoundBox(o){
      o = MO.Class.inherits(this, o);
      o._boundVisible = false;
      o._boundBox     = null;
      o.boundBox      = MDsBoundBox_boundBox;
      o.showBoundBox  = MDsBoundBox_showBoundBox;
      o.hideBoundBox  = MDsBoundBox_hideBoundBox;
      return o;
   }
   MO.MDsBoundBox_boundBox = function MDsBoundBox_boundBox(){
      var o = this;
      var boundBox = o._boundBox;
      if(!boundBox){
         boundBox = o._boundBox = MO.Class.create(FE3dBoundBox);
         boundBox.linkGraphicContext(o);
         boundBox._drawable = o;
         boundBox._parent = o;
         boundBox.setup();
      }
      return boundBox;
   }
   MO.MDsBoundBox_showBoundBox = function MDsBoundBox_showBoundBox(){
      var o = this;
      var boundBox = o.boundBox();
      var resource = o.resource();
      var meshResource = resource.mesh();
      var outline = meshResource.outline();
      boundBox.outline().assign(outline);
      boundBox.upload();
      o._boundVisible = true;
   }
   MO.MDsBoundBox_hideBoundBox = function MDsBoundBox_hideBoundBox(){
      var o = this;
      var boundBox = o._boundBox;
      o._boundVisible = false;
   }
}
with(MO){
   MO.FDsApplication = function FDsApplication(o){
      o = MO.Class.inherits(this, o, FObject);
      o._name             = null;
      o._matrix           = null;
      o._location         = null;
      o._rotation         = null;
      o._scale            = null;
      o._visible          = true;
      o._renderables      = null;
      o.construct         = FDsApplication_construct;
      o.isName            = FDsApplication_isName;
      o.name              = FDsApplication_name;
      o.matrix            = FDsApplication_matrix;
      o.location          = FDsApplication_location;
      o.rotation          = FDsApplication_rotation;
      o.scale             = FDsApplication_scale;
      o.hasRenderable     = FDsApplication_hasRenderable;
      o.filterRenderables = FDsApplication_filterRenderables;
      o.renderables       = FDsApplication_renderables;
      o.pushRenderable    = FDsApplication_pushRenderable;
      o.process           = FDsApplication_process;
      o.update            = FDsApplication_update;
      o.dispose           = FDsApplication_dispose;
      return o;
   }
   MO.FDsApplication_construct = function FDsApplication_construct(){
      var o = this;
      o.__base.FObject.construct.call(o);
      o._matrix = new MO.SMatrix3d();
      o._location = new MO.SPoint3();
      o._rotation = new MO.SVector3();
      o._scale = new MO.SVector3();
      o._scale.set(1, 1, 1);
   }
   MO.FDsApplication_isName = function FDsApplication_isName(p){
      return this._name == p;
   }
   MO.FDsApplication_name = function FDsApplication_name(){
      return this._name;
   }
   MO.FDsApplication_matrix = function FDsApplication_matrix(){
      return this._matrix;
   }
   MO.FDsApplication_location = function FDsApplication_location(){
      return this._location;
   }
   MO.FDsApplication_rotation = function FDsApplication_rotation(){
      return this._rotation;
   }
   MO.FDsApplication_scale = function FDsApplication_scale(){
      return this._scale;
   }
   MO.FDsApplication_hasRenderable = function FDsApplication_hasRenderable(){
      var r = this._renderables;
      if(r != null){
         return !r.isEmpty();
      }
      return false;
   }
   MO.FDsApplication_filterRenderables = function FDsApplication_filterRenderables(p){
      var o = this;
      if(!o._visible){
         return false;
      }
      var rs = o._renderables;
      if(rs != null){
         var c = rs.count();
         for(var n = 0; n < c; n++){
            var r = rs.get(n);
            if(r.testVisible()){
               p.pushRenderable(r);
            }
         }
      }
      return true;
   }
   MO.FDsApplication_renderables = function FDsApplication_renderables(){
      var o = this;
      var r = o._renderables;
      if(r == null){
         r = o._renderables = new MO.TObjects();
      }
      return r;
   }
   MO.FDsApplication_pushRenderable = function FDsApplication_pushRenderable(p){
      this.renderables().push(p);
   }
   MO.FDsApplication_update = function FDsApplication_update(){
      var o = this;
      var m = o._matrix;
      m.set(o._location, o._rotation, o._scale);
      m.update();
   }
   MO.FDsApplication_process = function FDsApplication_process(){
      var o = this;
      var rs = o._renderables;
      if(rs != null){
         var c = rs.count();
         for(var i = 0; i < c; i++){
            rs.get(i).process();
         }
      }
   }
   MO.FDsApplication_dispose = function FDsApplication_dispose(){
      var o = this;
      o._matrix = null;
      o._position = null;
      o._direction = null;
      o._scale = null;
      var rs = o._renderables;
      if(rs != null){
         rs.dispose();
         o._renderables = null
      }
      o.__base.FObject.dispose.call(o);
   }
}
with(MO){
   MO.FDsBitmapCanvas = function FDsBitmapCanvas(o){
      o = MO.Class.inherits(this, o, FDsCanvas);
      o._activeBitmap        = null;
      o._capturePosition     = null;
      o._captureMatrix       = null;
      o._templateMatrix      = null;
      o._templateRenderable  = null;
      o._templateFace        = null;
      o._templateTranslation = null;
      o._templateRotation    = null;
      o._templateScale       = null;
      o._templateViewScale   = 0.05;
      o.onBuild              = FDsBitmapCanvas_onBuild;
      o.onMouseCaptureStart  = FDsBitmapCanvas_onMouseCaptureStart;
      o.onMouseCapture       = FDsBitmapCanvas_onMouseCapture;
      o.onMouseCaptureStop   = FDsBitmapCanvas_onMouseCaptureStop;
      o.onMouseWheel         = FDsBitmapCanvas_onMouseWheel;
      o.onLoaded             = FDsBitmapCanvas_onLoaded;
      o.oeResize             = FDsBitmapCanvas_oeResize;
      o.oeRefresh            = FDsBitmapCanvas_oeRefresh;
      o.construct            = FDsBitmapCanvas_construct;
      o.loadByGuid           = FDsBitmapCanvas_loadByGuid;
      o.dispose              = FDsBitmapCanvas_dispose;
      return o;
   }
   MO.FDsBitmapCanvas_onBuild = function FDsBitmapCanvas_onBuild(p){
      var o = this;
      o.__base.FDsCanvas.onBuild.call(o, p);
      var hPanel = o._hPanel;
      var space = o._activeSpace = MO.Class.create(FE3dFlatStage);
      space.linkGraphicContext(o);
      space.selectTechnique(o, FE3dGeneralTechnique);
      space.region().backgroundColor().set(1, 1, 1, 1);
      space.region().linkGraphicContext(o);
      RStage.register('space.bitmap', space);
      var camera = space.camera();
      camera.setPosition(0, 0, -10);
      camera.lookAt(0, 0, 0);
      camera.update();
      var projection = camera.projection();
      projection._angle = 45;
      projection.size().set(hPanel.width, hPanel.height);
      projection.update();
      RWindow.lsnsMouseWheel.register(o, o.onMouseWheel);
   }
   MO.FDsBitmapCanvas_onMouseCaptureStart = function FDsBitmapCanvas_onMouseCaptureStart(event){
      var o = this;
      var space = o._activeSpace;
      if(!space){
         return;
      }
      var bitmap = o._activeBitmap;
      if(!bitmap){
         return;
      }
      o._capturePosition.set(event.clientX, event.clientY);
      o._captureMatrix.assign(bitmap.matrix());
      RHtml.cursorSet(o._hPanel, EUiCursor.Pointer);
   }
   MO.FDsBitmapCanvas_onMouseCapture = function FDsBitmapCanvas_onMouseCapture(event){
      var o = this;
      var space = o._activeSpace;
      if(!space){
         return;
      }
      var bitmap = o._activeBitmap;
      if(!bitmap){
         return;
      }
      var matrix = bitmap.matrix();
      var cx = event.clientX - o._capturePosition.x;
      var cy = event.clientY - o._capturePosition.y;
      var captureMatrix = o._captureMatrix;
      matrix.tx = captureMatrix.tx + cx;
      matrix.ty = captureMatrix.ty + cy;
      matrix.updateForce();
   }
   MO.FDsBitmapCanvas_onMouseCaptureStop = function FDsBitmapCanvas_onMouseCaptureStop(event){
      var o = this;
      RHtml.cursorSet(o._hPanel, EUiCursor.Auto);
   }
   MO.FDsBitmapCanvas_onMouseWheel = function FDsBitmapCanvas_onMouseWheel(event){
      var o = this;
      var bitmap = o._activeBitmap;
      if(!bitmap){
         return;
      }
      var scale = 1.0;
      if(event.deltaY < 0){
         scale = 1.1;
      }else if(event.deltaY > 0){
         scale = 0.9;
      }
      var matrix = bitmap.matrix();
      matrix.sx *= scale;
      matrix.sy *= scale;
      matrix.updateForce();
   }
   MO.FDsBitmapCanvas_onLoaded = function FDsBitmapCanvas_onLoaded(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsBitmapCanvas_oeResize = function FDsBitmapCanvas_oeResize(event){
      var o = this;
      o.__base.FDsCanvas.oeResize.call(o, event);
      return EEventStatus.Stop;
   }
   MO.FDsBitmapCanvas_oeRefresh = function FDsBitmapCanvas_oeRefresh(p){
      return EEventStatus.Stop;
   }
   MO.FDsBitmapCanvas_construct = function FDsBitmapCanvas_construct(){
      var o = this;
      o.__base.FDsCanvas.construct.call(o);
      o._captureMatrix = new MO.SMatrix3d();
   }
   MO.FDsBitmapCanvas_loadByGuid = function FDsBitmapCanvas_loadByGuid(guid){
      var o = this;
      var size = o._graphicContext.size();
      MO.Console.find(FDuiDesktopConsole).showLoading();
      var resource = o._activeResource = MO.Console.find(FDrBitmapConsole).query(guid);
      var url = '/cloud.resource.bitmap.wv?do=view&guid=' + guid;
      var bitmap = o._activeBitmap = MO.Console.find(FE3dBitmapConsole).loadByGuid(o, guid);
      bitmap.material().info().effectCode = 'flat';
      bitmap.setLoadListener(o, o.onLoaded);
      bitmap.loadUrl(url);
      var matrix = bitmap.matrix();
      var left = Math.max((size.width - resource.sizeWidth()) / 2, 0);
      var top = Math.max((size.height - resource.sizeHeight()) / 2, 0);
      matrix.setTranslate(left, top);
      matrix.setScale(resource.sizeWidth(), resource.sizeHeight());
      matrix.update();
      var space = o._activeSpace;
      var layer = space.layer();
      layer.clearRenderables();
      layer.pushRenderable(bitmap);
   }
   MO.FDsBitmapCanvas_dispose = function FDsBitmapCanvas_dispose(){
      var o = this;
      o.__base.FDsCanvas.dispose.call(o);
   }
}
MO.FDsCanvas = function FDsCanvas(o){
   o = MO.Class.inherits(this, o, MO.FDuiCanvas, MO.MGraphicObject, MO.MListenerLoad, MO.MMouseCapture);
   o._servicePreview      = 'cloud.resource.preview';
   o._resourceTypeCd      = null;
   o._optionRotation      = false;
   o._activeSpace         = null;
   o._canvasModeCd        = MO.EDsCanvasMode.Drop;
   o._canvasMoveCd        = MO.EDsCanvasDrag.Unknown;
   o._switchWidth         = '*';
   o._switchHeight        = '*';
   o._capturePosition     = null;
   o._captureMatrix       = null;
   o._captureRotation     = null;
   o._cameraMoveRate      = 8;
   o._cameraKeyRotation   = 3;
   o._cameraMouseRotation = 0.005;
   o._dimensional         = null;
   o._rotation            = null;
   o.onBuild              = MO.FDsCanvas_onBuild;
   o.onMouseCaptureStart  = MO.FDsCanvas_onMouseCaptureStart;
   o.onMouseCapture       = MO.FDsCanvas_onMouseCapture;
   o.onMouseCaptureStop   = MO.FDsCanvas_onMouseCaptureStop;
   o.onEnterFrame         = MO.FDsCanvas_onEnterFrame;
   o.oeResize             = MO.FDsCanvas_oeResize;
   o.oeRefresh            = MO.FDsCanvas_oeRefresh;
   o.construct            = MO.FDsCanvas_construct;
   o.activeSpace          = MO.FDsCanvas_activeSpace;
   o.switchSize           = MO.FDsCanvas_switchSize;
   o.switchRotation       = MO.FDsCanvas_switchRotation;
   o.reloadRegion         = MO.FDsCanvas_reloadRegion;
   o.capture              = MO.FDsCanvas_capture;
   o.dispose              = MO.FDsCanvas_dispose;
   return o;
}
MO.FDsCanvas_onBuild = function FDsCanvas_onBuild(event){
   var o = this;
   o.__base.FDuiCanvas.onBuild.call(o, event);
   var hPanel = o._hPanel;
   hPanel.__linker = o;
   hPanel.style.width = '100%';
   hPanel.style.height = '100%';
   var parameters = new Object();
   parameters.alpha = false;
   parameters.antialias = true;
   var context = o._graphicContext = MO.REngine3d.createContext(MO.FWglContext, hPanel, parameters);
   var dimensional = o._dimensional = MO.Class.create(MO.FE3dDimensional);
   dimensional.linkGraphicContext(context);
   dimensional.setup();
   MO.RStage.lsnsEnterFrame.register(o, o.onEnterFrame);
   MO.RStage.start(1000 / 60);
   MO.Console.find(MO.FMouseConsole).register(o);
}
MO.FDsCanvas_onMouseCaptureStart = function FDsCanvas_onMouseCaptureStart(event){
   var o = this;
   var space = o._activeSpace;
   if(!space){
      return;
   }
   var camera = space.camera();
   o._capturePosition.set(event.clientX, event.clientY);
   o._captureRotation.assign(camera._rotation);
   MO.RHtml.cursorSet(o._hPanel, MO.EUiCursor.Pointer);
}
MO.FDsCanvas_onMouseCapture = function FDsCanvas_onMouseCapture(event){
   var o = this;
   var space = o._activeSpace;
   if(!space){
      return;
   }
   var camera = space.camera();
   var cx = event.clientX - o._capturePosition.x;
   var cy = event.clientY - o._capturePosition.y;
   var mc = o._canvasModeCd;
   var toolbar = o._frameSet._canvasToolBar;
   switch(toolbar._canvasModeCd){
      case EDsCanvasMode.Drop:
         var rotation = camera.rotation();
         var captureRotation = o._captureRotation;
         rotation.x = captureRotation.x - cy * o._cameraMouseRotation;
         rotation.y = captureRotation.y - cx * o._cameraMouseRotation;
         break;
      case EDsCanvasMode.Select:
         break;
      case EDsCanvasMode.Translate:
         break;
      case EDsCanvasMode.Rotation:
         break;
      case EDsCanvasMode.Scale:
         break;
   }
}
MO.FDsCanvas_onMouseCaptureStop = function FDsCanvas_onMouseCaptureStop(event){
   var o = this;
   MO.RHtml.cursorSet(o._hPanel, EUiCursor.Auto);
}
MO.FDsCanvas_onEnterFrame = function FDsCanvas_onEnterFrame(){
   var o = this;
   var space = o._activeSpace;
   if(!space){
      return;
   }
   var camera = space.camera();
   var timer = space.timer();
   var span = timer.spanSecond();
   var moveRate = o._cameraMoveRate * span;
   var rotationRate = o._cameraKeyRotation * span;
   var keyForward = MO.Window.Keyboard.isPress(MO.EStageKey.Forward);
   var keyBack = MO.Window.Keyboard.isPress(MO.EStageKey.Back);
   if(keyForward && !keyBack){
      camera.doWalk(moveRate);
   }
   if(!keyForward && keyBack){
      camera.doWalk(-moveRate);
   }
   var keyUp = MO.Window.Keyboard.isPress(MO.EStageKey.Up);
   var keyDown = MO.Window.Keyboard.isPress(MO.EStageKey.Down);
   if(keyUp && !keyDown){
      camera.doFly(moveRate);
   }
   if(!keyUp && keyDown){
      camera.doFly(-moveRate);
   }
   var keyRleft = MO.Window.Keyboard.isPress(MO.EStageKey.RotationLeft);
   var keyRright = MO.Window.Keyboard.isPress(MO.EStageKey.RotationRight);
   if(keyRleft && !keyRright){
      camera.doYaw(rotationRate);
   }
   if(!keyRleft && keyRright){
      camera.doYaw(-rotationRate);
   }
   var keyRup = MO.Window.Keyboard.isPress(MO.EStageKey.RotationUp);
   var keyDown = MO.Window.Keyboard.isPress(MO.EStageKey.RotationDown);
   if(keyRup && !keyDown){
      camera.doPitch(rotationRate);
   }
   if(!keyRup && keyDown){
      camera.doPitch(-rotationRate);
   }
   camera.update();
   if(o._optionRotation){
      var rotation = o._rotation;
      var layers = space.layers();
      var count = layers.count();
      for(var i = 0; i < count; i++){
         var layer = layers.at(i);
         var matrix = layer.matrix();
         matrix.setRotation(0, rotation.y, 0);
         matrix.update();
      }
      rotation.y += 0.01;
   }
}
MO.FDsCanvas_oeResize = function FDsCanvas_oeResize(p){
   var o = this;
   o.__base.FDuiCanvas.oeResize.call(o, p);
   var hp = o._hPanel;
   var w = hp.offsetWidth;
   var h = hp.offsetHeight - 6;
   hp.width = w;
   hp.height = h;
   o._graphicContext.setViewport(0, 0, w, h);
   return MO.EEventStatus.Stop;
}
MO.FDsCanvas_oeRefresh = function FDsCanvas_oeRefresh(p){
   return MO.EEventStatus.Stop;
}
MO.FDsCanvas_construct = function FDsCanvas_construct(){
   var o = this;
   o.__base.FDuiCanvas.construct.call(o);
   o._capturePosition = new MO.SPoint2();
   o._captureMatrix = new MO.SMatrix3d();
   o._rotation = new MO.SVector3();
   o._captureRotation = new MO.SVector3();
}
MO.FDsCanvas_activeSpace = function FDsCanvas_activeSpace(){
   return this._activeSpace;
}
MO.FDsCanvas_switchSize = function FDsCanvas_switchSize(width, height){
   var o = this;
   o._switchWidth = width;
   o._switchHeight = height;
   var hCanvas = o._hPanel;
   var hParent = o._hParent;
   if(width == '*'){
      width = hParent.offsetWidth;
   }
   if(height == '*'){
      height = hParent.offsetHeight;
   }
   hCanvas.width = width;
   hCanvas.style.width = width + 'px';
   hCanvas.height = height;
   hCanvas.style.height = height + 'px';
   o._graphicContext.setViewport(0, 0, width, height);
   var space = o._activeSpace;
   if(space){
      var projection = space.camera().projection();
      projection.size().set(width, height);
      projection.update();
   }
}
MO.FDsCanvas_switchRotation = function FDsCanvas_switchRotation(flag){
   this._optionRotation = flag;
}
MO.FDsCanvas_reloadRegion = function FDsCanvas_reloadRegion(){
   var o = this;
   var space = o._activeSpace;
   var region = space.region();
   var resource = region.resource();
   o._cameraMoveRate = resource.moveSpeed();
   o._cameraKeyRotation = resource.rotationKeySpeed();
   o._cameraMouseRotation = resource.rotationMouseSpeed();
}
MO.FDsCanvas_capture = function FDsCanvas_capture(){
   var o = this;
   var space = o._activeSpace;
   var resource = space.resource();
   var guid = resource.guid();
   var switchWidth = o._switchWidth;
   var switchHeight = o._switchHeight;
   o.switchSize(200, 150);
   MO.RStage.process();
   var context = o._graphicContext;
   var size = context.size();
   var width = size.width;
   var height = size.height;
   var data = context.readPixels(0, 0, width, height);
   o.switchSize(switchWidth, switchHeight);
   MO.RStage.process();
   var url = '/' + o._servicePreview + '.wv?do=upload&type_cd=' + o._resourceTypeCd + '&guid=' + guid + '&width=' + width + '&height=' + height;
   return MO.Console.find(MO.FHttpConsole).send(url, data.buffer);
}
MO.FDsCanvas_dispose = function FDsCanvas_dispose(){
   var o = this;
   o._rotation = MO.Lang.Object.dispose(o._rotation);
   o.__base.FDuiCanvas.dispose.call(o);
}
with(MO){
   MO.FDsCatalog = function FDsCatalog(o){
      o = MO.Class.inherits(this, o, MO.FDuiDataTreeView, MO.MListenerSelected);
      o._iconView             = 'resource.scene.view';
      o._iconViewNot          = 'resource.scene.viewno';
      o._displayNodes         = null;
      o._renderableNodes      = null;
      o._materialNodes        = null;
      o.onBuild               = MO.FDsCatalog_onBuild;
      o.onLoadDisplay         = MO.FDsCatalog_onLoadDisplay;
      o.onNodeClick           = MO.FDsCatalog_onNodeClick;
      o.onNodeViewClick       = MO.FDsCatalog_onNodeViewClick;
      o.onNodeViewDoubleClick = MO.FDsCatalog_onNodeViewDoubleClick;
      o.construct             = MO.FDsCatalog_construct;
      o.buildNodeView         = MO.FDsCatalog_buildNodeView;
      o.buildTechnique        = MO.FDsCatalog_buildTechnique;
      o.buildRegion           = MO.FDsCatalog_buildRegion;
      o.buildRenderable       = MO.FDsCatalog_buildRenderable;
      o.buildDisplay          = MO.FDsCatalog_buildDisplay;
      o.buildLayer            = MO.FDsCatalog_buildLayer;
      o.buildSpace            = MO.FDsCatalog_buildSpace;
      o.selectObject          = MO.FDsCatalog_selectObject;
      o.showObject            = MO.FDsCatalog_showObject;
      o.dispose               = MO.FDsCatalog_dispose;
      return o;
   }
   MO.FDsCatalog_onBuild = function FDsCatalog_onBuild(p){
      var o = this;
      o.__base.FDuiDataTreeView.onBuild.call(o, p);
      o.addNodeClickListener(o, o.onNodeClick);
   }
   MO.FDsCatalog_onLoadDisplay = function FDsCatalog_onLoadDisplay(p){
      var o = this;
      var n = p._linkNode;
      o.buildRenderable(n, p);
   }
   MO.FDsCatalog_onNodeClick = function FDsCatalog_onNodeClick(event){
      var o = this;
      var node = event.node;
      var linker = node.dataPropertyGet('linker');
      if(linker){
         o.selectObject(linker);
      }
   }
   MO.FDsCatalog_onNodeViewClick = function FDsCatalog_onNodeViewClick(event){
      var o = this;
      var cell = event.treeNodeCell;
      var linker = event.treeNode.dataPropertyGet('linker');
      if(MO.Class.isClass(linker, FDisplay)){
         if(event.ctrlKey){
            var displayNodes = o._displayNodes;
            var displayCount = displayNodes.count()
            for(var i = 0; i < displayCount; i++){
               var displayNode = displayNodes.at(i);
               var display = displayNode.dataPropertyGet('linker');
               display._visible = false;
               displayNode.cell('view').setIcon(o._iconViewNot);
            }
            linker.setVisible(true);
            cell.setIcon(o._iconView);
         }else{
            linker.setVisible(!linker.visible());
            cell.setIcon(linker.visible() ? o._iconView : o._iconViewNot);
         }
      }
      if(MO.Class.isClass(linker, FDrawable)){
         if(event.ctrlKey){
            var renderableNodes = o._renderableNodes;
            var renderableCount = renderableNodes.count();
            for(var i = 0; i < renderableCount; i++){
               var renderableNode = renderableNodes.at(i);
               var renderable = renderableNode.dataPropertyGet('linker');
               renderable._visible = false;
               renderableNode.cell('view').setIcon(o._iconViewNot);
            }
            linker.setVisible(true);
            cell.setIcon(o._iconView);
         }else{
            linker.setVisible(!linker.visible());
            cell.setIcon(linker.visible() ? o._iconView : o._iconViewNot);
         }
      }
      if(MO.Class.isClass(linker, FG3dMaterial)){
         if(event.ctrlKey){
            var materialNodes = o._materialNodes;
            var materialCount = materialNodes.count();
            for(var i = 0; i < materialCount; i++){
               var materialNode = materialNodes.at(i);
               var material = materialNode.dataPropertyGet('linker');
               material.setVisible(false);
               materialNode.cell('view').setIcon(o._iconViewNot);
            }
            linker.setVisible(true);
            cell.setIcon(o._iconView);
         }else{
            linker.setVisible(!linker.visible());
            cell.setIcon(linker.visible() ? o._iconView : o._iconViewNot);
         }
      }
   }
   MO.FDsCatalog_onNodeViewDoubleClick = function FDsCatalog_onNodeViewDoubleClick(event){
      var o = this;
      var node = event.treeNode;
      var linker = node.dataPropertyGet('linker');
      if(MO.Class.isClass(linker, FDisplay)){
         var displayNodes = o._displayNodes;
         var displayCount = displayNodes.count()
         for(var i = 0; i < displayCount; i++){
            var displayNode = displayNodes.at(i);
            var display = displayNode.dataPropertyGet('linker');
            display.setVisible(true);
            displayNode.cell('view').setIcon(o._iconView);
         }
      }
      if(MO.Class.isClass(linker, FDrawable)){
         var renderableNodes = o._renderableNodes;
         var renderableCount = renderableNodes.count();
         for(var i = 0; i < renderableCount; i++){
            var renderableNode = renderableNodes.at(i);
            var renderable = renderableNode.dataPropertyGet('linker');
            renderable.setVisible(true);
            renderableNode.cell('view').setIcon(o._iconView);
         }
      }
      if(MO.Class.isClass(linker, FG3dMaterial)){
         var materialNodes = o._materialNodes;
         var materialCount = materialNodes.count();
         for(var i = 0; i < materialCount; i++){
            var materialNode = materialNodes.at(i);
            var material = materialNode.dataPropertyGet('linker');
            material.setVisible(true);
            materialNode.cell('view').setIcon(o._iconView);
         }
      }
   }
   MO.FDsCatalog_construct = function FDsCatalog_construct(){
      var o = this;
      o.__base.FDuiDataTreeView.construct.call(o);
      o._displayNodes = new MO.TObjects();
      o._renderableNodes = new MO.TObjects();
      o._materialNodes = new MO.TObjects();
   }
   MO.FDsCatalog_buildNodeView = function FDsCatalog_buildNodeView(pn, pv){
      var o = this;
      var c = pn.cell('view');
      c.setIcon(o._iconView);
      c.addClickListener(o, o.onNodeViewClick);
      c.addDoubleClickListener(o, o.onNodeViewDoubleClick);
   }
   MO.FDsCatalog_buildTechnique = function FDsCatalog_buildTechnique(parentNode, technique){
      var o = this;
      var node = o.createNode();
      node.setTypeCode('technique');
      node.setLabel('Technique');
      node.dataPropertySet('linker', technique);
      parentNode.appendNode(node);
   }
   MO.FDsCatalog_buildRegion = function FDsCatalog_buildRegion(parentNode, region){
      var o = this;
      var regionNode = o.createNode();
      regionNode.setTypeCode('Region');
      regionNode.setLabel('Region');
      regionNode.dataPropertySet('linker', region);
      parentNode.appendNode(regionNode);
      var cameraNode = o.createNode();
      cameraNode.setTypeCode('Camera');
      cameraNode.setLabel('Camera');
      cameraNode.dataPropertySet('linker', region.camera());
      regionNode.appendNode(cameraNode);
      var lightNode = o.createNode();
      lightNode.setTypeCode('Light');
      lightNode.setLabel('Light');
      lightNode.dataPropertySet('linker', region.directionalLight());
      regionNode.appendNode(lightNode);
   }
   MO.FDsCatalog_buildRenderable = function FDsCatalog_buildRenderable(n, p){
      var o = this;
      var s = p.materials();
      if(s){
         var c = s.count();
         for(var i = 0; i < c; i++){
            var m = s.value(i);
            var mr = m.resource();
            var dn = o.createNode();
            dn.setLabel(mr.code());
            dn.setNote(mr.label());
            dn.setTypeCode('material');
            dn.dataPropertySet('linker', m);
            o.buildNodeView(dn, true);
            o._materialNodes.push(dn);
            n.appendNode(dn);
         }
      }
      var s = p.animations();
      if(s){
         var c = s.count();
         for(var i = 0; i < c; i++){
            var m = s.value(i);
            var mr = m.resource();
            var dn = o.createNode();
            dn.setLabel(mr.code());
            dn.setNote(mr.label());
            dn.setTypeCode('animation');
            dn.dataPropertySet('linker', m);
            o.buildNodeView(dn, true);
            n.appendNode(dn);
         }
      }
      var s = p.meshRenderables();
      if(s){
         var c = s.count();
         for(var i = 0; i < c; i++){
            var r = s.get(i);
            var rr = r.resource();
            var rd = rr.model();
            var rm = rr.mesh();
            var dn = o.createNode();
            dn.setLabel(rm.code());
            dn.setTypeCode('renderable');
            dn.dataPropertySet('linker', r);
            o.buildNodeView(dn, true);
            o._renderableNodes.push(dn);
            n.appendNode(dn);
         }
      }
   }
   MO.FDsCatalog_buildDisplay = function FDsCatalog_buildDisplay(n, p){
      var o = this;
      var s = p.displays();
      if(s){
         var c = s.count();
         for(var i = 0; i < c; i++){
            var d = s.get(i);
            var dr = d.resourceScene();
            var dn = o.createNode();
            dn.setLabel(dr.code());
            dn.setNote(dr.label());
            dn.setTypeCode('display');
            dn.dataPropertySet('linker', d);
            o.buildNodeView(dn, true);
            o._displayNodes.push(dn);
            n.appendNode(dn);
            d.addLoadListener(o, o.onLoadDisplay);
            d._linkNode = dn;
         }
      }
   }
   MO.FDsCatalog_buildLayer = function FDsCatalog_buildLayer(n, p){
      var o = this;
      var ns = o.createNode();
      ns.setLabel('Layers');
      ns.setTypeCode('layers');
      ns.dataPropertySet('linker', 'layers');
      o.buildNodeView(ns, true);
      n.appendNode(ns);
      var ds = p.layers();
      var c = ds.count();
      for(var i = 0; i < c; i++){
         var l = ds.value(i);
         if(MO.Class.isClass(l, FDisplayUiLayer)){
            continue;
         }
         var lr = l.resource();
         var nl = o.createNode();
         nl.setLabel('Layer:' + lr.code());
         nl.setTypeCode('layer');
         nl.dataPropertySet('linker', l);
         o.buildNodeView(nl, true);
         ns.appendNode(nl);
         o.buildDisplay(nl, l)
      }
   }
   MO.FDsCatalog_buildSpace = function FDsCatalog_buildSpace(p){
      var o = this;
      var r = p._resource;
      var nr = o.createNode();
      nr.setLabel(r.code());
      nr.setNote(r.label());
      nr.setTypeCode('scene');
      nr.dataPropertySet('linker', p);
      o.appendNode(nr);
      o.buildTechnique(nr, p.technique())
      o.buildRegion(nr, p.region());
      o.buildLayer(nr, p);
      nr.click();
   }
   MO.FDsCatalog_selectObject = function FDsCatalog_selectObject(item){
      var o = this;
      if(item){
         o.processSelectedListener(item, true);
      }
   }
   MO.FDsCatalog_showObject = function FDsCatalog_showObject(item){
      var o = this;
      if(MO.Class.isClass(item, FDsSceneRenderable)){
         var renderableNodes = o._renderableNodes;
         var renderableCount = renderableNodes.count();
         for(var i = 0; i < renderableCount; i++){
            var renderableNode = renderableNodes.at(i);
            var renderable = renderableNode.dataPropertyGet('linker');
            if(renderable == item){
               o.processSelectedListener(item, false);
            }
         }
      }
   }
   MO.FDsCatalog_dispose = function FDsCatalog_dispose(){
      var o = this;
      o._displayNodes = MO.Lang.Object.dispose(o._displayNodes);
      o._renderableNodes = MO.Lang.Object.dispose(o._renderableNodes);
      o._materialNodes = MO.Lang.Object.dispose(o._materialNodes);
      o.__base.FDuiDataTreeView.dispose.call(o);
   }
}
with(MO){
   MO.FDsFrameSet = function FDsFrameSet(o){
      o = MO.Class.inherits(this, o, FDuiFrameSet);
      o._styleToolBarGround   = MO.Class.register(o, new MO.AStyle('_styleToolBarGround', 'ToolBar_Ground'));
      o._styleCatalogContent  = MO.Class.register(o, new MO.AStyle('_styleCatalogContent', 'Catalog_Content'));
      o._styleCanvasContent   = MO.Class.register(o, new MO.AStyle('_styleCanvasContent', 'Canvas_Content'));
      o._stylePropertyContent = MO.Class.register(o, new MO.AStyle('_stylePropertyContent', 'Property_Content'));
      o._activeGuid           = null;
      o._activeCode           = null;
      o._activeSpace          = null;
      o._propertyFrames       = null;
      o.construct             = FDsFrameSet_construct;
      o.findPropertyFrame     = FDsFrameSet_findPropertyFrame;
      o.propertyFrames        = FDsFrameSet_propertyFrames;
      o.hidePropertyFrames    = FDsFrameSet_hidePropertyFrames;
      o.dispose               = FDsFrameSet_dispose;
      return o;
   }
   MO.FDsFrameSet_construct = function FDsFrameSet_construct(){
      var o = this;
      o.__base.FDuiFrameSet.construct.call(o);
      o._propertyFrames = new MO.TDictionary();
   }
   MO.FDsFrameSet_findPropertyFrame = function FDsFrameSet_findPropertyFrame(code){
      var o = this;
      var frame = o._propertyFrames.get(code);
      if(!frame){
         frame = MO.Console.find(FDuiFrameConsole).get(o, code, o._framePropertyContent._hContainer);
         frame._frameSet = o;
         o._propertyFrames.set(code, frame);
      }
      return frame;
   }
   MO.FDsFrameSet_propertyFrames = function FDsFrameSet_propertyFrames(){
      return this._propertyFrames;
   }
   MO.FDsFrameSet_hidePropertyFrames = function FDsFrameSet_hidePropertyFrames(){
      var o = this;
      var frames = o._propertyFrames;
      var count = frames.count();
      for(var i = 0; i < count; i++){
         var frame = frames.at(i);
         frame.hide();
      }
   }
   MO.FDsFrameSet_dispose = function FDsFrameSet_dispose(){
      var o = this;
      o._activeSpace = null;
      var frames = o._propertyFrames;
      var count = frames.count();
      for(var i = 0; i < count; i++){
         var frame = frames.at(i);
         frame.dispose();
      }
      o._propertyFrames = MO.Lang.Object.dispose(o._propertyFrames);
      o.__base.FDuiFrameSet.dispose.call(o);
   }
}
with(MO){
   MO.FDsMainCanvas = function FDsMainCanvas(o){
      o = MO.Class.inherits(this, o, FCanvas);
      o._context   = null;
      o._stage     = null;
      o._layer     = null;
      o._activeModel = null;
      o._rotationX = 0;
      o._rotationY = 0;
      o._rotationZ = 0;
      o.onBuild      = FDsMainCanvas_onBuild;
      o.onEnterFrame = FDsMainCanvas_onEnterFrame;
      o.onThemeLoad  = FDsMainCanvas_onThemeLoad;
      o.oeRefresh    = FDsMainCanvas_oeRefresh;
      o.construct    = FDsMainCanvas_construct;
      o.selectModel  = FDsMainCanvas_selectModel;
      o.dispose      = FDsMainCanvas_dispose;
      return o;
   }
   MO.FDsMainCanvas_onEnterFrame= function FDsMainCanvas_onEnterFrame(){
      var o = this;
      var m = o._activeModel;
      if(m){
         m.location().set(0, -6.0, 0);
         m.rotation().set(0, o._rotationY, 0);
         m.scale().set(2, 2, 2);
         m.update();
         o._rotationX += 0.01;
         o._rotationY += 0.01;
         o._rotationZ += 0.03;
      }
   }
   MO.FDsMainCanvas_onThemeLoad = function FDsMainCanvas_onThemeLoad(){
      var o = this;
      var hCanvas = o._hPanel;
      hCanvas.width = o._hParent.offsetWidth;
      hCanvas.height = o._hParent.offsetHeight;
      o._context = REngine3d.createContext(FWglContext, hCanvas);
      var g = o._stage = MO.Class.create(FSimpleStage3d);
      g.backgroundColor().set(0.5, 0.5, 0.5, 1);
      g.selectTechnique(o._context, FG3dGeneralTechnique);
      o._layer = o._stage.spriteLayer();
      RStage.register('stage3d', o._stage);
      var rc = o._stage.camera();
      rc.setPosition(0, 3, -20);
      rc.lookAt(0, 0, 0);
      rc.update();
      o._stage.directionalLight().direction().set(0.7, -0.7, 0);
      var rp = o._stage.camera().projection();
      rp.size().set(hCanvas.width, hCanvas.height);
      rp.update();
      RStage.lsnsEnterFrame.register(o, o.onEnterFrame);
      RStage.start();
   }
   MO.FDsMainCanvas_onBuild = function FDsMainCanvas_onBuild(p){
      var o = this;
      o.__base.FCanvas.onBuild.call(o, p);
      var tc = MO.Console.find(FE3sThemeConsole);
      var m = tc.select('color');
      m.loadListener().register(o, o.onThemeLoad);
   }
   MO.FDsMainCanvas_oeRefresh = function FDsMainCanvas_oeRefresh(p){
      var o = this;
      o.__base.FCanvas.oeRefresh.call(o, p);
      return EEventStatus.Stop;
   }
   MO.FDsMainCanvas_construct = function FDsMainCanvas_construct(){
      var o = this;
      o.__base.FCanvas.construct.call(o);
   }
   MO.FDsMainCanvas_selectModel = function FDsMainCanvas_selectModel(p){
      var o = this;
      var rmc = MO.Console.find(FModel3dConsole);
      if(o._activeModel != null){
         rmc.free(o._activeModel);
      }
      var m = rmc.alloc(o._context, p);
      o._layer.pushDisplay(m);
      o._activeModel = m;
   }
   MO.FDsMainCanvas_dispose = function FDsMainCanvas_dispose(){
      var o = this;
      o.__base.FCanvas.dispose.call(o);
   }
}
with(MO){
   MO.FDsMainCatalog = function FDsMainCatalog(o){
      o = MO.Class.inherits(this, o, FDataTreeView);
      o.onBuild     = FDsMainCatalog_onBuild;
      o.onNodeClick = FDsMainCatalog_onNodeClick;
      o.construct   = FDsMainCatalog_construct;
      o.dispose     = FDsMainCatalog_dispose;
      return o;
   }
   MO.FDsMainCatalog_onBuild = function FDsMainCatalog_onBuild(p){
      var o = this;
      o.__base.FDataTreeView.onBuild.call(o, p);
      o.lsnsClick.register(o, o.onNodeClick);
   }
   MO.FDsMainCatalog_onNodeClick = function FDsMainCatalog_onNodeClick(t, n){
      var o = this;
      var c = o._worksapce._canvas;
      c.selectModel(n.name());
   }
   MO.FDsMainCatalog_construct = function FDsMainCatalog_construct(){
      var o = this;
      o.__base.FDataTreeView.construct.call(o);
   }
   MO.FDsMainCatalog_dispose = function FDsMainCatalog_dispose(){
      var o = this;
      o.__base.FDataTreeView.dispose.call(o);
   }
}
with(MO){
   MO.FDsMainMenuBar = function FDsMainMenuBar(o){
      o = MO.Class.inherits(this, o, FMenuBar);
      o.onBuild   = FDsMainMenuBar_onBuild;
      o.construct = FDsMainMenuBar_construct;
      o.dispose   = FDsMainMenuBar_dispose;
      return o;
   }
   MO.FDsMainMenuBar_onBuild = function FDsMainMenuBar_onBuild(p){
      var o = this;
      o.__base.FMenuBar.onBuild.call(o, p);
      var b = o._framesetMain = MO.Class.create(FMenuButton);
      b.setLabel('文件');
      b.setIcon('design.menu.build');
      b.build(p);
      o.appendButton(b);
      var b = o._framesetMain = MO.Class.create(FMenuButton);
      b.setLabel('保存');
      b.setIcon('design.menu.save');
      b.build(p);
      o.appendButton(b);
      var b = o._framesetMain = MO.Class.create(FMenuButton);
      b.setLabel('帮助');
      b.setIcon('design.menu.help');
      b.build(p);
      o.appendButton(b);
   }
   MO.FDsMainMenuBar_construct = function FDsMainMenuBar_construct(){
      var o = this;
      o.__base.FMenuBar.construct.call(o);
   }
   MO.FDsMainMenuBar_dispose = function FDsMainMenuBar_dispose(){
      var o = this;
      o.__base.FMenuBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsMainToolBar = function FDsMainToolBar(o){
      o = MO.Class.inherits(this, o, FToolBar);
      o.onPersistenceClick   = FDsMainToolBar_onPersistenceClick;
      o.onBuild   = FDsMainToolBar_onBuild;
      o.construct = FDsMainToolBar_construct;
      o.dispose   = FDsMainToolBar_dispose;
      return o;
   }
   MO.FDsMainToolBar_onPersistenceClick = function FDsMainToolBar_onPersistenceClick(p){
      var o = this;
      var catalog = o._worksapce._catalog;
      catalog.loadUrl('/cloud.describe.tree.ws?action=query&code=resource3d.model');
   }
   MO.FDsMainToolBar_onBuild = function FDsMainToolBar_onBuild(p){
      var o = this;
      o.__base.FToolBar.onBuild.call(o, p);
      var b = o._persistenceButton  = MO.Class.create(FToolButton);
      b.setLabel('模型管理');
      b.build(p);
      b.lsnsClick.register(o, o.onPersistenceClick);
      o.appendButton(b);
      var b = o._framesetMain = MO.Class.create(FToolButton);
      b.setLabel('材质管理');
      b.build(p);
      o.appendButton(b);
      var b = o._framesetMain = MO.Class.create(FToolButton);
      b.setLabel('模板管理');
      b.build(p);
      o.appendButton(b);
      var b = o._framesetMain = MO.Class.create(FToolButton);
      b.setLabel('场景管理');
      b.build(p);
      o.appendButton(b);
   }
   MO.FDsMainToolBar_construct = function FDsMainToolBar_construct(){
      var o = this;
      o.__base.FToolBar.construct.call(o);
   }
   MO.FDsMainToolBar_dispose = function FDsMainToolBar_dispose(){
      var o = this;
      o.__base.FToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsMainWindow = function FDsMainWindow(o){
      o = MO.Class.inherits(this, o, FObject);
      o._name             = null;
      o._matrix           = null;
      o._location         = null;
      o._rotation         = null;
      o._scale            = null;
      o._visible          = true;
      o._renderables      = null;
      o.construct         = FDsMainWindow_construct;
      o.isName            = FDsMainWindow_isName;
      o.name              = FDsMainWindow_name;
      o.matrix            = FDsMainWindow_matrix;
      o.location          = FDsMainWindow_location;
      o.rotation          = FDsMainWindow_rotation;
      o.scale             = FDsMainWindow_scale;
      o.hasRenderable     = FDsMainWindow_hasRenderable;
      o.filterRenderables = FDsMainWindow_filterRenderables;
      o.renderables       = FDsMainWindow_renderables;
      o.pushRenderable    = FDsMainWindow_pushRenderable;
      o.process           = FDsMainWindow_process;
      o.update            = FDsMainWindow_update;
      o.dispose           = FDsMainWindow_dispose;
      return o;
   }
   MO.FDsMainWindow_construct = function FDsMainWindow_construct(){
      var o = this;
      o.__base.FObject.construct.call(o);
      o._matrix = new MO.SMatrix3d();
      o._location = new MO.SPoint3();
      o._rotation = new MO.SVector3();
      o._scale = new MO.SVector3();
      o._scale.set(1, 1, 1);
   }
   MO.FDsMainWindow_isName = function FDsMainWindow_isName(p){
      return this._name == p;
   }
   MO.FDsMainWindow_name = function FDsMainWindow_name(){
      return this._name;
   }
   MO.FDsMainWindow_matrix = function FDsMainWindow_matrix(){
      return this._matrix;
   }
   MO.FDsMainWindow_location = function FDsMainWindow_location(){
      return this._location;
   }
   MO.FDsMainWindow_rotation = function FDsMainWindow_rotation(){
      return this._rotation;
   }
   MO.FDsMainWindow_scale = function FDsMainWindow_scale(){
      return this._scale;
   }
   MO.FDsMainWindow_hasRenderable = function FDsMainWindow_hasRenderable(){
      var r = this._renderables;
      if(r != null){
         return !r.isEmpty();
      }
      return false;
   }
   MO.FDsMainWindow_filterRenderables = function FDsMainWindow_filterRenderables(p){
      var o = this;
      if(!o._visible){
         return false;
      }
      var rs = o._renderables;
      if(rs != null){
         var c = rs.count();
         for(var n = 0; n < c; n++){
            var r = rs.get(n);
            if(r.testVisible()){
               p.pushRenderable(r);
            }
         }
      }
      return true;
   }
   MO.FDsMainWindow_renderables = function FDsMainWindow_renderables(){
      var o = this;
      var r = o._renderables;
      if(r == null){
         r = o._renderables = new MO.TObjects();
      }
      return r;
   }
   MO.FDsMainWindow_pushRenderable = function FDsMainWindow_pushRenderable(p){
      this.renderables().push(p);
   }
   MO.FDsMainWindow_update = function FDsMainWindow_update(){
      var o = this;
      var m = o._matrix;
      m.set(o._location, o._rotation, o._scale);
      m.update();
   }
   MO.FDsMainWindow_process = function FDsMainWindow_process(){
      var o = this;
      var rs = o._renderables;
      if(rs != null){
         var c = rs.count();
         for(var i = 0; i < c; i++){
            rs.get(i).process();
         }
      }
   }
   MO.FDsMainWindow_dispose = function FDsMainWindow_dispose(){
      var o = this;
      o._matrix = null;
      o._position = null;
      o._direction = null;
      o._scale = null;
      var rs = o._renderables;
      if(rs != null){
         rs.dispose();
         o._renderables = null
      }
      o.__base.FObject.dispose.call(o);
   }
}
with(MO){
   MO.FDsMainWorkspace = function FDsMainWorkspace(o){
      o = MO.Class.inherits(this, o, FWorkspace);
      o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleStatusbarGround = MO.Class.register(o, new MO.AStyle('_styleStatusbarGround', 'Statusbar_Ground'));
      o._styleCatalogGround   = MO.Class.register(o, new MO.AStyle('_styleCatalogGround', 'Catalog_Ground'));
      o._styleWorkspaceGround = MO.Class.register(o, new MO.AStyle('_styleWorkspaceGround', 'Workspace_Ground'));
      o._stylePropertyGround  = MO.Class.register(o, new MO.AStyle('_stylePropertyGround', 'Property_Ground'));
      o._framesetMain         = null;
      o._framesetBody         = null;
      o._frameToolBar         = null;
      o._frameBody            = null;
      o._frameProperty        = null;
      o._frameCatalog         = null;
      o._frameWorkspace       = null;
      o._frameStatusBar       = null;
      o.onBuild               = FDsMainWorkspace_onBuild;
      o.construct             = FDsMainWorkspace_construct;
      o.dispose               = FDsMainWorkspace_dispose;
      return o;
   }
   MO.FDsMainWorkspace_construct = function FDsMainWorkspace_construct(){
      var o = this;
      o.__base.FWorkspace.construct.call(o);
   }
   MO.FDsMainWorkspace_onBuild = function FDsMainWorkspace_onBuild(p){
      var o = this;
      o.__base.FWorkspace.onBuild.call(o, p);
      o._hPanel.style.width = '100%';
      o._hPanel.style.height = '100%';
      var fs = o._framesetMain = MO.Class.create(FFrameSet);
      fs.build(p);
      var f = o._frameToolBar = MO.Class.create(FFrame);
      f.setHeight(26);
      f.build(p);
      f._hPanel.className = o.styleName('Toolbar_Ground');
      fs.appendFrame(f);
      var f = o._frameBody = MO.Class.create(FFrame);
      f.build(p);
      fs.appendFrame(f);
      var f = o._frameProperty = MO.Class.create(FFrame);
      f.setHeight(18);
      f.build(p);
      f._hPanel.className = o.styleName('Statusbar_Ground');
      fs.appendFrame(f);
      fs.setPanel(o._hPanel);
      var fs = MO.Class.create(FFrameSet);
      fs._directionCd = EDirection.Horizontal;
      fs.build(p);
      var f = o._frameCatalog = MO.Class.create(FFrame);
      f.setWidth(300);
      f.build(p);
      f._hPanel.className = o.styleName('Catalog_Ground');
      fs.appendFrame(f);
      var sp1 = fs.appendSpliter();
      var f = o._frameWorkspace = MO.Class.create(FFrame);
      f.build(p);
      f._hPanel.className = o.styleName('Workspace_Ground');
      fs.appendFrame(f);
      var sp2 = fs.appendSpliter();
      var f = o._frameStatusBar = MO.Class.create(FFrame);
      f.setWidth(360);
      f.build(p);
      f._hPanel.className = o.styleName('Property_Ground');
      fs.appendFrame(f);
      fs.setPanel(o._frameBody._hPanel);
      sp1._alignCd = EAlign.Left;
      sp1._hSize = o._frameCatalog._hPanel;
      sp2._alignCd = EAlign.Right;
      sp2._hSize = o._frameStatusBar._hPanel;
      var c = o._catalog = MO.Class.create(FDsMainCatalog);
      c._worksapce = o;
      c.build(p);
      c.setPanel(o._frameCatalog._hPanel);
      o.push(c);
      var c = o._toolbar = MO.Class.create(FDsMainToolBar);
      c._worksapce = o;
      c.build(p);
      c.setPanel(o._frameToolBar._hPanel);
      c._persistenceButton.click();
      o.push(c);
      var c = o._canvas = MO.Class.create(FDsMainCanvas);
      c._worksapce = o;
      c.build(p);
      c.setPanel(o._frameWorkspace._hPanel);
      o.push(c);
   }
   MO.FDsMainWorkspace_dispose = function FDsMainWorkspace_dispose(){
      var o = this;
      o.__base.FWorkspace.dispose.call(o);
   }
}
with(MO){
   MO.FDsSpaceCanvas = function FDsSpaceCanvas(o){
      o = MO.Class.inherits(this, o, FDsCanvas);
      o._rotation             = null;
      o._optionRotation       = false;
      o._capturePosition      = null;
      o._captureMatrix        = null;
      o._captureRotation      = null;
      o._selectObject         = null;
      o._selectRenderables    = null;
      o._templateMatrix       = null;
      o._templateRenderable   = null;
      o.onBuild               = FDsSpaceCanvas_onBuild;
      o.onMouseCaptureStart   = FDsSpaceCanvas_onMouseCaptureStart;
      o.onMouseCapture        = FDsSpaceCanvas_onMouseCapture;
      o.onMouseCaptureStop    = FDsSpaceCanvas_onMouseCaptureStop;
      o.oeResize              = FDsSpaceCanvas_oeResize;
      o.oeRefresh             = FDsSpaceCanvas_oeRefresh;
      o.construct             = FDsSpaceCanvas_construct;
      o.innerSelectRenderable = FDsSpaceCanvas_innerSelectRenderable;
      o.innerSelectDisplay    = FDsSpaceCanvas_innerSelectDisplay;
      o.innerSelectLayer      = FDsSpaceCanvas_innerSelectLayer;
      o.selectNone            = FDsSpaceCanvas_selectNone;
      o.selectLayers          = FDsSpaceCanvas_selectLayers;
      o.selectLayer           = FDsSpaceCanvas_selectLayer;
      o.selectDisplay         = FDsSpaceCanvas_selectDisplay;
      o.selectMaterial        = FDsSpaceCanvas_selectMaterial;
      o.selectRenderable      = FDsSpaceCanvas_selectRenderable;
      o.switchPlay            = FDsSpaceCanvas_switchPlay;
      o.switchMovie           = FDsSpaceCanvas_switchMovie;
      o.dispose               = FDsSpaceCanvas_dispose;
      return o;
   }
   MO.FDsSpaceCanvas_onBuild = function FDsSpaceCanvas_onBuild(p){
      var o = this;
      o.__base.FDsCanvas.onBuild.call(o, p);
   }
   MO.FDsSpaceCanvas_onMouseCaptureStart = function FDsSpaceCanvas_onMouseCaptureStart(event){
      var o = this;
      o.__base.FDsCanvas.onMouseCaptureStart.call(o, event)
      var space = o._activeSpace;
      if(!space){
         return;
      }
      var region = space.region();
      var selectTechnique = MO.Console.find(FG3dTechniqueConsole).find(o._graphicContext, FG3dSelectTechnique);
      var renderable = selectTechnique.test(region, event.offsetX, event.offsetY);
      o.selectRenderable(renderable);
      if(renderable){
         var display = renderable.display();
         o._captureMatrix.assign(display.matrix());
      }
   }
   MO.FDsSpaceCanvas_onMouseCapture = function FDsSpaceCanvas_onMouseCapture(event){
      var o = this;
      o.__base.FDsCanvas.onMouseCapture.call(o, event);
   }
   MO.FDsSpaceCanvas_onMouseCaptureStop = function FDsSpaceCanvas_onMouseCaptureStop(event){
      var o = this;
      o.__base.FDsCanvas.onMouseCaptureStop.call(o, event);
   }
   MO.FDsSpaceCanvas_oeResize = function FDsSpaceCanvas_oeResize(p){
      var o = this;
      o.__base.FDsCanvas.oeResize.call(o, p);
      var hp = o._hPanel;
      var w = hp.offsetWidth;
      var h = hp.offsetHeight;
      var s = o._activeSpace;
      if(s){
         var cp = s.camera().projection();
         cp.size().set(w, h);
         cp.update();
      }
      return EEventStatus.Stop;
   }
   MO.FDsSpaceCanvas_oeRefresh = function FDsSpaceCanvas_oeRefresh(p){
      return EEventStatus.Stop;
   }
   MO.FDsSpaceCanvas_construct = function FDsSpaceCanvas_construct(){
      var o = this;
      o.__base.FDsCanvas.construct.call(o);
      o._capturePosition = new MO.SPoint2();
      o._captureMatrix = new MO.SMatrix3d();
      o._templateMatrix = new MO.SMatrix3d();
      o._templateFaceMatrix = new MO.SMatrix3d();
      o._rotation = new MO.SVector3();
      o._captureRotation = new MO.SVector3();
      o._selectRenderables = new MO.TObjects();
   }
   MO.FDsSpaceCanvas_innerSelectRenderable = function FDsSpaceCanvas_innerSelectRenderable(renderable){
      var o = this;
      renderable._optionSelected = true;
      if(MO.Class.isClass(renderable, MDsBoundBox)){
         renderable.showBoundBox();
      }
      o._selectRenderables.push(renderable);
   }
   MO.FDsSpaceCanvas_innerSelectDisplay = function FDsSpaceCanvas_innerSelectDisplay(select){
      var o = this;
      var displays = select.displays();
      var count = displays.count();
      for(var i = 0; i < count; i++){
         var display = displays.at(i);
         o.innerSelectDisplay(display);
      }
      var renderables = select.renderables();
      var count = renderables.count();
      for(var i = 0; i < count; i++){
         var renderable = renderables.at(i);
         if(MO.Class.isClass(renderable, FDsSceneRenderable)){
            o.innerSelectRenderable(renderable);
         }
      }
   }
   MO.FDsSpaceCanvas_innerSelectLayer = function FDsSpaceCanvas_innerSelectLayer(layer){
      var o = this;
      var displays = layer.displays();
      var count = displays.count();
      for(var i = 0; i < count; i++){
         var display = displays.at(i);
         o.innerSelectDisplay(display)
      }
   }
   MO.FDsSpaceCanvas_selectNone = function FDsSpaceCanvas_selectNone(){
      var o = this;
      var renderables = o._selectRenderables;
      var count = renderables.count();
      for(var i = 0; i < count; i++){
         var renderable = renderables.at(i);
         renderable._optionSelected = false;
         if(MO.Class.isClass(renderable, MDsBoundBox)){
            renderable.hideBoundBox();
         }
      }
      o._selectObject = null;
      o._selectRenderables.clear();
   }
   MO.FDsSpaceCanvas_selectLayers = function FDsSpaceCanvas_selectLayers(){
      var o = this;
      o.selectNone();
      var layers = o._activeSpace.layers();
      var layerCount = layers.count();
      for(var i = 0; i < layerCount; i++){
         var layer = layers.at(i);
         o.innerSelectLayer(layer);
      }
   }
   MO.FDsSpaceCanvas_selectLayer = function FDsSpaceCanvas_selectLayer(layer){
      var o = this;
      o.selectNone();
      o._selectObject = layer;
      o.innerSelectLayer(layer);
   }
   MO.FDsSpaceCanvas_selectDisplay = function FDsSpaceCanvas_selectDisplay(display){
      var o = this;
      o.selectNone();
      o._selectObject = display;
      o.innerSelectDisplay(display);
   }
   MO.FDsSpaceCanvas_selectMaterial = function FDsSpaceCanvas_selectMaterial(material){
      var o = this;
      o.selectNone();
      o._selectObject = material;
      var display = material._display;
      var sprite = display._sprite;
      var renderables = sprite.renderables();
      var count = renderables.count();
      for(var i = 0; i < count; i++){
         var renderable = renderables.at(i);
         if(renderable.material() == material){
            o.innerSelectRenderable(renderable);
         }
      }
   }
   MO.FDsSpaceCanvas_selectRenderable = function FDsSpaceCanvas_selectRenderable(renderable){
      var o = this;
      o.selectNone();
      if(renderable){
         o.innerSelectRenderable(renderable);
         o._frameSet._catalogContent.showObject(renderable);
      }
   }
   MO.FDsSpaceCanvas_switchPlay = function FDsSpaceCanvas_switchPlay(flag){
      var o = this;
      var space = o._activeSpace;
      var displays = space.allDisplays();
      var count = displays.count();
      for(var i = 0; i < count; i++){
         var display = displays.at(i);
         if(MO.Class.isClass(display, FE3dSceneDisplay)){
            var sprite = display._sprite;
            sprite._optionPlay = flag;
            display._optionPlay = flag;
         }
      }
   }
   MO.FDsSpaceCanvas_switchMovie = function FDsSpaceCanvas_switchMovie(flag){
      var o = this;
      var space = o._activeSpace;
      var displays = space.allDisplays();
      var count = displays.count();
      for(var i = 0; i < count; i++){
         var display = displays.at(i);
         if(MO.Class.isClass(display, FE3dSceneDisplay)){
            var sprite = display._sprite;
            if(sprite){
               sprite._optionMovie = flag;
            }
            display._optionMovie = flag;
         }
      }
   }
   MO.FDsSpaceCanvas_dispose = function FDsSpaceCanvas_dispose(){
      var o = this;
      o._rotation = MO.Lang.Object.dispose(o._rotation);
      o.__base.FDsCanvas.dispose.call(o);
   }
}
with(MO){
   MO.FDsSpaceDesignCanvas = function FDsSpaceDesignCanvas(o){
      o = MO.Class.inherits(this, o, FDsSpaceCanvas);
      o._templateMatrix       = null;
      o._templateRenderable   = null;
      o._templateFace         = null;
      o._templateTranslation  = null;
      o._templateRotation     = null;
      o._templateScale        = null;
      o._templateViewScale    = 0.05;
      o.onBuild               = FDsSpaceDesignCanvas_onBuild;
      o.onDataLoaded          = FDsSpaceDesignCanvas_onDataLoaded;
      o.construct             = FDsSpaceDesignCanvas_construct;
      o.selectRenderable      = FDsSpaceDesignCanvas_selectRenderable;
      o.refreshOperationFace  = FDsSpaceDesignCanvas_refreshOperationFace;
      o.switchMode            = FDsSpaceDesignCanvas_switchMode;
      o.dispose               = FDsSpaceDesignCanvas_dispose;
      return o;
   }
   MO.FDsSpaceDesignCanvas_onBuild = function FDsSpaceDesignCanvas_onBuild(p){
      var o = this;
      o.__base.FDsSpaceCanvas.onBuild.call(o, p);
      var templateConsole = MO.Console.find(FE3dTemplateConsole);
      var templateTranslation = o._templateTranslation = templateConsole.allocByCode(o, 'com.design.translation');
      templateTranslation.addLoadListener(o, o.onDataLoaded);
      var templateRotation = o._templateRotation = templateConsole.allocByCode(o, 'com.design.rotation');
      templateRotation.addLoadListener(o, o.onDataLoaded);
      var templateScale = o._templateScale = templateConsole.allocByCode(o, 'com.design.scale');
      templateScale.addLoadListener(o, o.onDataLoaded);
   }
   MO.FDsSpaceDesignCanvas_onDataLoaded = function FDsSpaceDesignCanvas_onDataLoaded(p){
      var o = this;
      var context = o._graphicContext;
      var space = o._activeSpace;
      var templateTranslation = o._templateTranslation;
      if(!templateTranslation.testReady()){
         return;
      }
      var templateRotation = o._templateRotation;
      if(!templateRotation.testReady()){
         return;
      }
      var templateScale = o._templateScale;
      if(!templateScale.testReady()){
         return;
      }
      if(!space.testReady()){
         return;
      }
      var translationSprite = o._translationSprite = o._templateTranslation.sprite();
      translationSprite.setVisible(false);
      var rotationSprite = o._rotationSprite = o._templateRotation.sprite();
      rotationSprite.setVisible(false);
      var scaleSprite = o._scaleSprite = o._templateScale.sprite();
      scaleSprite.setVisible(false);
      var layer = o._uiLayer = MO.Class.create(FDisplayUiLayer);
      layer.selectTechnique(context, FE3dControlTechnique);
      layer.pushDisplay(translationSprite);
      layer.pushDisplay(rotationSprite);
      layer.pushDisplay(scaleSprite);
      space.registerLayer('ui', layer);
      o.reloadRegion()
      o.processLoadListener(o);
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsSpaceDesignCanvas_onMouseCaptureStart = function FDsSpaceDesignCanvas_onMouseCaptureStart(event){
      var o = this;
      o.__base.FDsSpaceCanvas.onMouseCaptureStart.call(o, event)
      var space = o._activeSpace;
      if(!space){
         return;
      }
      var region = space.region();
      var selectTechnique = MO.Console.find(FG3dTechniqueConsole).find(o._graphicContext, FG3dSelectTechnique);
      var renderable = selectTechnique.test(region, event.offsetX, event.offsetY);
      o.selectRenderable(renderable);
      if(renderable){
         var display = renderable.display();
         o._captureMatrix.assign(display.matrix());
      }
   }
   MO.FDsSpaceDesignCanvas_onMouseCapture = function FDsSpaceDesignCanvas_onMouseCapture(event){
      var o = this;
      o.__base.FDsSpaceCanvas.onMouseCapture.call(o, event);
   }
   MO.FDsSpaceDesignCanvas_onMouseCaptureStop = function FDsSpaceDesignCanvas_onMouseCaptureStop(event){
      var o = this;
      o.__base.FDsSpaceCanvas.onMouseCaptureStop.call(o, event);
   }
   MO.FDsSpaceDesignCanvas_oeResize = function FDsSpaceDesignCanvas_oeResize(p){
      var o = this;
      o.__base.FDsSpaceCanvas.oeResize.call(o, p);
      var hp = o._hPanel;
      var w = hp.offsetWidth;
      var h = hp.offsetHeight;
      var s = o._activeSpace;
      if(s){
         var cp = s.camera().projection();
         cp.size().set(w, h);
         cp.update();
      }
      return EEventStatus.Stop;
   }
   MO.FDsSpaceDesignCanvas_oeRefresh = function FDsSpaceDesignCanvas_oeRefresh(p){
      return EEventStatus.Stop;
   }
   MO.FDsSpaceDesignCanvas_construct = function FDsSpaceDesignCanvas_construct(){
      var o = this;
      o.__base.FDsSpaceCanvas.construct.call(o);
      o._templateMatrix = new MO.SMatrix3d();
      o._templateFaceMatrix = new MO.SMatrix3d();
   }
   MO.FDsSpaceDesignCanvas_selectRenderable = function FDsSpaceDesignCanvas_selectRenderable(renderable){
      var o = this;
      var space = o._activeSpace;
      if(!space){
         return;
      }
      o.selectNone();
      if(renderable){
         o.innerSelectRenderable(renderable);
         o._frameSet._catalogContent.showObject(renderable);
      }
   }
   MO.FDsSpaceDesignCanvas_refreshOperationFace = function FDsSpaceDesignCanvas_refreshOperationFace(){
      var o = this;
      var modeCd = o._canvasModeCd;
      var hasRenderable = !o._selectRenderables.isEmpty();
      var templateTranslation = o._translationSprite;
      var templateRotation = o._rotationSprite;
      var templateScale = o._scaleSprite;
      o._templateFace = null;
      switch(modeCd){
         case EDsCanvasMode.Translate:
            templateTranslation.setVisible(hasRenderable);
            templateRotation.setVisible(false);
            templateScale.setVisible(false);
            o._templateFace = templateTranslation;
            break;
         case EDsCanvasMode.Rotation:
            templateTranslation.setVisible(false);
            templateRotation.setVisible(hasRenderable);
            templateScale.setVisible(false);
            o._templateFace = templateScale;
            break;
         case EDsCanvasMode.Scale:
            templateTranslation.setVisible(false);
            templateRotation.setVisible(false);
            templateScale.setVisible(hasRenderable);
            o._templateFace = templateScale;
            break;
      }
      var templateFace = o._templateFace;
      if(hasRenderable && templateFace){
         var renderable = o._selectRenderables.first();
         var display = renderable.display();
         var matrix = templateFace.matrix();
         matrix.assign(display.matrix());
         matrix.update();
      }
   }
   MO.FDsSpaceDesignCanvas_switchMode = function FDsSpaceDesignCanvas_switchMode(modeCd){
      var o = this;
      o._canvasModeCd = modeCd;
   }
   MO.FDsSpaceDesignCanvas_dispose = function FDsSpaceDesignCanvas_dispose(){
      var o = this;
      o._rotation = MO.Lang.Object.dispose(o._rotation);
      o.__base.FDsSpaceCanvas.dispose.call(o);
   }
}
with(MO){
   MO.FDsStage = function FDsStage(o){
      o = MO.Class.inherits(this, o, FE3dStage);
      o._mapLayer    = MO.Class.register(o, new AGetter('_mapLayer'));
      o._spriteLayer = MO.Class.register(o, new AGetter('_spriteLayer'));
      o._faceLayer   = MO.Class.register(o, new AGetter('_faceLayer'));
      o.construct    = FDsStage_construct;
      o.active       = FDsStage_active;
      o.deactive     = FDsStage_deactive;
      return o;
   }
   MO.FDsStage_construct = function FDsStage_construct(){
      var o = this;
      o.__base.FE3dStage.construct.call(o);
      var layer = o._mapLayer = MO.Class.create(FDisplayLayer);
      o.registerLayer('MapLayer', layer);
      var layer = o._spriteLayer = MO.Class.create(FDisplayLayer);
      o.registerLayer('SpriteLayer', layer);
      var layer = o._faceLayer = MO.Class.create(FDisplayLayer);
      o.registerLayer('FaceLayer', layer);
   }
   MO.FDsStage_active = function FDsStage_active(){
      var o = this;
      o.__base.FE3dStage.active.call(o);
   }
   MO.FDsStage_deactive = function FDsStage_deactive(){
      var o = this;
      o.__base.FE3dStage.deactive.call(o);
   }
}
with(MO){
   MO.FDsModelRenderable = function FDsModelRenderable(o){
      o = MO.Class.inherits(this, o, FE3dModelRenderable, MDsBoundBox);
      o._optionSelected = false;
      o.filterDrawables = FDsModelRenderable_filterDrawables;
      return o;
   }
   MO.FDsModelRenderable_filterDrawables = function FDsModelRenderable_filterDrawables(region){
      var o = this;
      var result = o.__base.FE3dSceneDisplayRenderable.filterDrawables.call(o, region);
      if(result){
         if(o._boundVisible){
            region.pushRenderable(o._boundBox);
         }
      }
      return result;
   }
}
with(MO){
   MO.FDsSceneDisplay = function FDsSceneDisplay(o){
      o = MO.Class.inherits(this, o, FE3dSceneDisplay);
      return o;
   }
}
with(MO){
   MO.FDsSceneLayer = function FDsSceneLayer(o){
      o = MO.Class.inherits(this, o, FE3dSceneLayer);
      return o;
   }
}
with(MO){
   MO.FDsSceneRenderable = function FDsSceneRenderable(o){
      o = MO.Class.inherits(this, o, FE3dSceneDisplayRenderable, MDsBoundBox);
      o._optionSelected = false;
      o.filterDrawables = FDsSceneRenderable_filterDrawables;
      return o;
   }
   MO.FDsSceneRenderable_filterDrawables = function FDsSceneRenderable_filterDrawables(region){
      var o = this;
      var result = o.__base.FE3dSceneDisplayRenderable.filterDrawables.call(o, region);
      if(result){
         if(o._boundVisible){
            region.pushRenderable(o._boundBox);
         }
      }
      return result;
   }
}
with(MO){
   MO.FDrAbsResourceConsole = function FDrAbsResourceConsole(o){
      o = MO.Class.inherits(this, o, FConsole);
      o._scopeCd       = EScope.Local;
      o._serviceCode   = null;
      o._classUnit     = null;
      o._resources     = null;
      o.construct      = FDrAbsResourceConsole_construct;
      o.makeServiceUrl = FDrAbsResourceConsole_makeServiceUrl;
      o.loadResource   = FDrAbsResourceConsole_loadResource;
      o.doList         = FDrAbsResourceConsole_doList;
      o.doQuery        = FDrAbsResourceConsole_doQuery;
      o.doCreate       = FDrAbsResourceConsole_doCreate;
      o.doUpdate       = FDrAbsResourceConsole_doUpdate;
      o.doDelete       = FDrAbsResourceConsole_doDelete;
      return o;
   }
   MO.FDrAbsResourceConsole_construct = function FDrAbsResourceConsole_construct(){
      var o = this;
      o.__base.FConsole.construct.call(o);
      o._resources = new TDictionary();
   }
   MO.FDrAbsResourceConsole_makeServiceUrl = function FDrAbsResourceConsole_makeServiceUrl(action){
      var o = this;
      var url = RBrowser.hostPath('/' + o._serviceCode + '.ws?action=' + action);
      if(MO.Runtime.isDebug()){
         url += '&date=' + RDate.format();
      }
      return url;
   }
   MO.FDrAbsResourceConsole_loadResource = function FDrAbsResourceConsole_loadResource(xconfig){
      var o = this;
      var guid = xconfig.get('guid');
      var resource = o._resources.get(guid);
      if(!resource){
         resource = MO.Class.create(o._classUnit);
         o._resources.set(guid, resource);
      }
      resource.loadConfig(xconfig);
      return resource;
   }
   MO.FDrAbsResourceConsole_doList = function FDrAbsResourceConsole_doList(search, order, pageSize, page){
      var o = this;
      var url = '/' + o._serviceCode + '.ws?action=list';
      if(!MO.Lang.String.isEmpty(search)){
         url += '&search=' + search;
      }
      if(!MO.Lang.String.isEmpty(order)){
         url += '&order=' + order;
      }
      if(pageSize >= 0){
         url += '&page_size=' + pageSize;
      }
      if(page >= 0){
         url += '&page=' + page;
      }
      return MO.Console.find(FXmlConsole).sendAsync(url);
   }
   MO.FDrAbsResourceConsole_doQuery = function FDrAbsResourceConsole_doQuery(guid){
      var o = this;
      var url = '/' + o._serviceCode + '.ws?action=query&guid=' + guid;
      return MO.Console.find(FXmlConsole).sendAsync(url);
   }
   MO.FDrAbsResourceConsole_doCreate = function FDrAbsResourceConsole_doCreate(resource){
      var o = this;
      var xdocument = new TXmlDocument();
      var xroot = xdocument.root();
      xroot.set('action', 'create');
      var xdata = xroot.create(resource.classCode());
      resource.saveConfig(xdata);
      return MO.Console.find(FXmlConsole).sendAsync('/' + o._serviceCode + '.ws', xdocument);
   }
   MO.FDrAbsResourceConsole_doUpdate = function FDrAbsResourceConsole_doUpdate(resource){
      var o = this;
      var xdocument = new TXmlDocument();
      var xroot = xdocument.root();
      xroot.set('action', 'update');
      var xdata = xroot.create(resource.classCode());
      resource.saveConfig(xdata);
      return MO.Console.find(FXmlConsole).sendAsync('/' + o._serviceCode + '.ws', xdocument);
   }
   MO.FDrAbsResourceConsole_doDelete = function FDrAbsResourceConsole_doDelete(guid){
      var o = this;
      var url = '/' + o._serviceCode + '.ws?action=delete&guid=' + guid;
      return MO.Console.find(FXmlConsole).sendAsync(url);
   }
}
with(MO){
   MO.FDrBitmap = function FDrBitmap(o){
      o = MO.Class.inherits(this, o, FDrResource);
      o._classCode    = 'Bitmap';
      o._sizeWidth    = 0;
      o._sizeHeight   = 0;
      o.sizeWidth     = FDrBitmap_sizeWidth;
      o.setSizeWidth  = FDrBitmap_setSizeWidth;
      o.sizeHeight    = FDrBitmap_sizeHeight;
      o.setSizeHeight = FDrBitmap_setSizeHeight;
      o.loadConfig    = FDrBitmap_loadConfig;
      o.saveConfig    = FDrBitmap_saveConfig;
      return o;
   }
   MO.FDrBitmap_sizeWidth = function FDrBitmap_sizeWidth(){
      return this._sizeWidth;
   }
   MO.FDrBitmap_setSizeWidth = function FDrBitmap_setSizeWidth(width){
      this._sizeWidth = width;
   }
   MO.FDrBitmap_sizeHeight = function FDrBitmap_sizeHeight(){
      return this._sizeHeight;
   }
   MO.FDrBitmap_setSizeHeight = function FDrBitmap_setSizeHeight(height){
      this._sizeHeight = height;
   }
   MO.FDrBitmap_loadConfig = function FDrBitmap_loadConfig(xconfig){
      var o = this;
      o.__base.FDrResource.loadConfig.call(o, xconfig);
      o._sizeWidth = xconfig.getInteger('size_width');
      o._sizeHeight = xconfig.getInteger('size_height');
   }
   MO.FDrBitmap_saveConfig = function FDrBitmap_saveConfig(xconfig){
      var o = this;
      o.__base.FDrResource.saveConfig.call(o, xconfig);
      xconfig.set('size_width', o._sizeWidth);
      xconfig.set('size_height', o._sizeHeight);
   }
}
with(MO){
   MO.FDrBitmapConsole = function FDrBitmapConsole(o){
      o = MO.Class.inherits(this, o, FDrAbsResourceConsole);
      o._serviceCode = 'cloud.resource.bitmap';
      o._classUnit   = FDrBitmap;
      o.query        = FDrBitmapConsole_query;
      o.update       = FDrBitmapConsole_update;
      return o;
   }
   MO.FDrBitmapConsole_query = function FDrBitmapConsole_query(guid){
      var o = this;
      var uri = '/' + o._serviceCode + '.ws?action=query&guid=' + guid;
      var url = RBrowser.hostPath(uri);
      var xroot = MO.Console.find(FXmlConsole).send(url);
      var nodeCount = xroot.nodeCount();
      for(var n = 0; n < nodeCount; n++){
         var xbitmap = xroot.node(n);
         if(xbitmap.isName('Bitmap')){
            o.loadResource(xbitmap);
         }
      }
      return o._resources.get(guid);
   }
   MO.FDrBitmapConsole_update = function FDrBitmapConsole_update(xconfig){
      var o = this;
      var uri = '/' + o._serviceCode + '.ws?action=update';
      var url = RBrowser.hostPath(uri);
      return MO.Console.find(FXmlConsole).sendAsync(url, xconfig);
   }
}
with(MO){
   MO.FDrMaterial = function FDrMaterial(o){
      o = MO.Class.inherits(this, o, FDrResource);
      o._classCode = 'Material';
      o.loadConfig = FDrMaterial_loadConfig;
      o.saveConfig = FDrMaterial_saveConfig;
      return o;
   }
   MO.FDrMaterial_loadConfig = function FDrMaterial_loadConfig(xconfig){
      var o = this;
      o.__base.FDrResource.loadConfig.call(o, xconfig);
   }
   MO.FDrMaterial_saveConfig = function FDrMaterial_saveConfig(xconfig){
      var o = this;
      o.__base.FDrResource.saveConfig.call(o, xconfig);
   }
}
with(MO){
   MO.FDrMaterialConsole = function FDrMaterialConsole(o){
      o = MO.Class.inherits(this, o, FDrAbsResourceConsole);
      o._serviceCode = 'cloud.resource.material';
      o._classUnit   = FDrMaterial;
      o.query        = FDrMaterialConsole_query;
      o.update       = FDrMaterialConsole_update;
      o.deleteBitmap = FDrMaterialConsole_deleteBitmap;
      return o;
   }
   MO.FDrMaterialConsole_query = function FDrMaterialConsole_query(guid){
      var o = this;
      var uri = '/' + o._serviceCode + '.ws?action=query&guid=' + guid;
      var url = RBrowser.hostPath(uri);
      var xroot = MO.Console.find(FXmlConsole).send(url);
      var nodeCount = xroot.nodeCount();
      for(var n = 0; n < nodeCount; n++){
         var xbitmap = xroot.node(n);
         if(xbitmap.isName('Material')){
            o.loadResource(xbitmap);
         }
      }
      return o._resources.get(guid);
   }
   MO.FDrMaterialConsole_update = function FDrMaterialConsole_update(xconfig){
      var o = this;
      var uri = '/' + o._serviceCode + '.ws?action=update';
      var url = RBrowser.hostPath(uri);
      return MO.Console.find(FXmlConsole).sendAsync(url, xconfig);
   }
   MO.FDrMaterialConsole_deleteBitmap = function FDrMaterialConsole_deleteBitmap(guid){
      var o = this;
      var uri = '/' + o._serviceCode + '.ws?action=deleteBitmap&guid=' + guid;
      var url = RBrowser.hostPath(uri);
      return MO.Console.find(FXmlConsole).sendAsync(url);
   }
}
with(MO){
   MO.FDrMesh = function FDrMesh(o){
      o = MO.Class.inherits(this, o, FDrResource);
      o._classCode = 'Mesh';
      return o;
   }
}
with(MO){
   MO.FDrMeshConsole = function FDrMeshConsole(o){
      o = MO.Class.inherits(this, o, FDrAbsResourceConsole);
      o._serviceCode = 'cloud.resource.mesh';
      o.update       = FDrMeshConsole_update;
      return o;
   }
   MO.FDrMeshConsole_update = function FDrMeshConsole_update(config){
      var o = this;
      var url = RBrowser.hostPath('/' + o._serviceCode + '.ws?action=update&date=' + RDate.format());
      return MO.Console.find(FXmlConsole).sendAsync(url, config);
   }
}
with(MO){
   MO.FDrModel = function FDrModel(o){
      o = MO.Class.inherits(this, o, FDrResource);
      o._classCode = 'Model';
      return o;
   }
}
with(MO){
   MO.FDrModelConsole = function FDrModelConsole(o){
      o = MO.Class.inherits(this, o, FDrAbsResourceConsole);
      o._serviceCode = 'cloud.resource.model';
      o.update       = FDrModelConsole_update;
      return o;
   }
   MO.FDrModelConsole_update = function FDrModelConsole_update(config){
      var o = this;
      var url = RBrowser.hostPath('/' + o._serviceCode + '.ws?action=updateContent&date=' + RDate.format());
      return MO.Console.find(FXmlConsole).sendAsync(url, config);
   }
}
with(MO){
   MO.FDrObject = function FDrObject(o){
      o = MO.Class.inherits(this, o, FObject);
      o._guid       = null;
      o._code       = null;
      o._label      = null;
      o.guid        = FDrObject_guid;
      o.code        = FDrObject_code;
      o.setCode     = FDrObject_setCode;
      o.label       = FDrObject_label;
      o.setLabel    = FDrObject_setLabel;
      o.unserialize = FDrObject_unserialize;
      o.saveConfig  = FDrObject_saveConfig;
      return o;
   }
   MO.FDrObject_guid = function FDrObject_guid(){
      return this._guid;
   }
   MO.FDrObject_code = function FDrObject_code(){
      return this._code;
   }
   MO.FDrObject_setCode = function FDrObject_setCode(p){
      this._code = p;
   }
   MO.FDrObject_label = function FDrObject_label(){
      return this._label;
   }
   MO.FDrObject_setLabel = function FDrObject_setLabel(p){
      this._label = p;
   }
   MO.FDrObject_unserialize = function FDrObject_unserialize(p){
      var o = this;
      o._guid = p.readString();
      o._code = p.readString();
      o._label = p.readString();
   }
   MO.FDrObject_saveConfig = function FDrObject_saveConfig(xconfig){
      var o = this;
      xconfig.setNvl('guid', o._guid);
      xconfig.setNvl('code', o._code);
      xconfig.setNvl('label', o._label);
   }
}
with(MO){
   MO.FDrProject = function FDrProject(o){
      o = MO.Class.inherits(this, o, FDrResource);
      o._classCode   = 'Project';
      o._projectGuid = null;
      o.saveConfig   = FDrProject_saveConfig;
      return o;
   }
   MO.FDrProject_saveConfig = function FDrProject_saveConfig(xconfig){
      var o = this;
      o.__base.FDrResource.saveConfig.call(o, xconfig);
      xconfig.setNvl('project_guid', o._projectGuid);
   }
}
with(MO){
   MO.FDrProjectConsole = function FDrProjectConsole(o){
      o = MO.Class.inherits(this, o, FDrAbsResourceConsole);
      o._serviceCode = 'cloud.solution.project';
      return o;
   }
}
with(MO){
   MO.FDrResource = function FDrResource(o){
      o = MO.Class.inherits(this, o, FDrObject);
      o._classCode = MO.Class.register(o, new AGetter('_classCode'));
      o._guid      = MO.Class.register(o, new AGetSet('_guid'));
      o._code      = MO.Class.register(o, new AGetSet('_code'));
      o._label     = MO.Class.register(o, new AGetSet('_label'));
      o.loadConfig = FDrResource_loadConfig;
      o.saveConfig = FDrResource_saveConfig;
      return o;
   }
   MO.FDrResource_loadConfig = function FDrResource_loadConfig(xconfig){
      var o = this;
      o._guid = xconfig.get('guid');
      o._code = xconfig.get('code');
      o._label = xconfig.get('label');
   }
   MO.FDrResource_saveConfig = function FDrResource_saveConfig(xconfig){
      var o = this;
      xconfig.setName(o._classCode);
      xconfig.set('guid', o._guid);
      xconfig.set('code', o._code);
      xconfig.set('label', o._label);
   }
}
with(MO){
   MO.FDrResourceConsole = function FDrResourceConsole(o){
      o = MO.Class.inherits(this, o, FDrAbsResourceConsole);
      o._serviceCode   = 'cloud.resource';
      o._catalogCode   = 'cloud.resource.catalog';
      o._resources     = null;
      o.construct      = FDrResourceConsole_construct;
      o.doList         = FDrResourceConsole_doList;
      o.doShare        = FDrResourceConsole_doShare;
      o.doDelete       = FDrResourceConsole_doDelete;
      o.doListShare    = FDrResourceConsole_doListShare;
      o.doFolderCreate = FDrResourceConsole_doFolderCreate;
      o.doFolderUpdate = FDrResourceConsole_doFolderUpdate;
      o.doFolderDelete = FDrResourceConsole_doFolderDelete;
      return o;
   }
   MO.FDrResourceConsole_construct = function FDrResourceConsole_construct(){
      var o = this;
      o.__base.FDrAbsResourceConsole.construct.call(o);
      o._resources = new TDictionary();
   }
   MO.FDrResourceConsole_doList = function FDrResourceConsole_doList(typeCd, search, order, pageSize, page){
      var o = this;
      var url = '/' + o._serviceCode + '.ws?action=list&type_cd=' + typeCd + '&serach=' + search + '&order=' + order + '&page_size=' + pageSize + '&page=' + page;
      return MO.Console.find(FXmlConsole).sendAsync(url);
   }
   MO.FDrResourceConsole_doShare = function FDrResourceConsole_doShare(guid, shareCd){
      var o = this;
      var url = o.makeServiceUrl('share') + '&guid=' + guid + '&share_cd=' + shareCd;
      return MO.Console.find(FXmlConsole).sendAsync(url);
   }
   MO.FDrResourceConsole_doDelete = function FDrResourceConsole_doDelete(typeCd, guid){
      var o = this;
      var url = '/' + o._serviceCode + '.ws?action=delete&type_cd=' + typeCd + '&guid=' + guid;
      return MO.Console.find(FXmlConsole).sendAsync(url);
   }
   MO.FDrResourceConsole_doListShare = function FDrResourceConsole_doListShare(typeCd, search, order, pageSize, page){
      var o = this;
      var url = '/' + o._serviceCode + '.ws?action=listShare&type_cd=' + typeCd + '&serach=' + search + '&order=' + order + '&page_size=' + pageSize + '&page=' + page;
      return MO.Console.find(FXmlConsole).sendAsync(url);
   }
   MO.FDrResourceConsole_doFolderCreate = function FDrResourceConsole_doFolderCreate(parentGuid, code, label){
      var o = this;
      var xdocument = new TXmlDocument();
      var xroot = xdocument.root();
      xroot.set('action', 'create');
      var xfolder = xroot.create('Folder');
      xfolder.set('parent_guid', parentGuid);
      xfolder.set('code', code);
      xfolder.set('label', label);
      return MO.Console.find(FXmlConsole).sendAsync('/' + o._catalogCode + '.ws', xdocument);
   }
   MO.FDrResourceConsole_doFolderUpdate = function FDrResourceConsole_doFolderUpdate(guid, code, label){
      var o = this;
      var xdocument = new TXmlDocument();
      var xroot = xdocument.root();
      xroot.set('action', 'update');
      var xfolder = xroot.create('Folder');
      xfolder.set('guid', guid);
      xfolder.set('code', code);
      xfolder.set('label', label);
      return MO.Console.find(FXmlConsole).sendAsync('/' + o._catalogCode + '.ws', xdocument);
   }
   MO.FDrResourceConsole_doFolderDelete = function FDrResourceConsole_doFolderDelete(guid){
      var o = this;
      var url = '/' + o._catalogCode + '.ws?action=delete&guid=' + guid;
      return MO.Console.find(FXmlConsole).sendAsync(url);
   }
}
with(MO){
   MO.FDrScene = function FDrScene(o){
      o = MO.Class.inherits(this, o, FDrResource);
      o._classCode   = 'Scene';
      o._projectGuid = null;
      o.saveConfig   = FDrScene_saveConfig;
      return o;
   }
   MO.FDrScene_saveConfig = function FDrScene_saveConfig(xconfig){
      var o = this;
      o.__base.FDrResource.saveConfig.call(o, xconfig);
      xconfig.setNvl('project_guid', o._projectGuid);
   }
}
with(MO){
   MO.FDrSceneConsole = function FDrSceneConsole(o){
      o = MO.Class.inherits(this, o, FDrAbsResourceConsole);
      o._serviceCode = 'cloud.resource.scene';
      o.createCamera = FDrSceneConsole_createCamera;
      o.createLayer  = FDrSceneConsole_createLayer;
      o.createSprite = FDrSceneConsole_createSprite;
      o.createMovie  = FDrSceneConsole_createMovie;
      o.copyNode     = FDrSceneConsole_copyNode;
      o.deleteNode   = FDrSceneConsole_deleteNode;
      o.update       = FDrSceneConsole_update;
      return o;
   }
   MO.FDrSceneConsole_createCamera = function FDrSceneConsole_createCamera(xconfig){
      var o = this;
      var url = o.makeServiceUrl('createCamera');
      return MO.Console.find(FXmlConsole).sendAsync(url, xconfig);
   }
   MO.FDrSceneConsole_createLayer = function FDrSceneConsole_createLayer(xconfig){
      var o = this;
      var url = o.makeServiceUrl('createLayer');
      return MO.Console.find(FXmlConsole).sendAsync(url, xconfig);
   }
   MO.FDrSceneConsole_createSprite = function FDrSceneConsole_createSprite(xconfig){
      var o = this;
      var url = o.makeServiceUrl('createSprite');
      return MO.Console.find(FXmlConsole).sendAsync(url, xconfig);
   }
   MO.FDrSceneConsole_createMovie = function FDrSceneConsole_createMovie(xconfig){
      var o = this;
      var url = o.makeServiceUrl('createMovie');
      return MO.Console.find(FXmlConsole).sendAsync(url, xconfig);
   }
   MO.FDrSceneConsole_copyNode = function FDrSceneConsole_copyNode(sceneGuid, nodeGuid){
      var o = this;
      var url = o.makeServiceUrl('copyNode') + '&space_guid=' + sceneGuid + '&node_guid=' + nodeGuid;
      return MO.Console.find(FXmlConsole).sendAsync(url);
   }
   MO.FDrSceneConsole_deleteNode = function FDrSceneConsole_deleteNode(sceneGuid, nodeGuid){
      var o = this;
      var url = o.makeServiceUrl('deleteNode') + '&space_guid=' + sceneGuid + '&node_guid=' + nodeGuid;
      return MO.Console.find(FXmlConsole).sendAsync(url);
   }
   MO.FDrSceneConsole_update = function FDrSceneConsole_update(p){
      var o = this;
      var url = RBrowser.hostPath('/' + o._serviceCode + '.ws?action=updateContent&date=' + RDate.format());
      return MO.Console.find(FXmlConsole).sendAsync(url, p);
   }
}
with(MO){
   MO.FDrTemplate = function FDrTemplate(o){
      o = MO.Class.inherits(this, o, FDrResource);
      o._classCode = 'Template';
      return o;
   }
}
with(MO){
   MO.FDrTemplateConsole = function FDrTemplateConsole(o){
      o = MO.Class.inherits(this, o, FDrAbsResourceConsole);
      o._serviceCode   = 'cloud.resource.template';
      o.selectMaterial = FDrTemplateConsole_selectMaterial;
      o.createDisplay  = FDrTemplateConsole_createDisplay;
      o.update         = FDrTemplateConsole_update;
      return o;
   }
   MO.FDrTemplateConsole_selectMaterial = function FDrTemplateConsole_selectMaterial(xconfig){
      var o = this;
      var url = o.makeServiceUrl('createMaterial');
      return MO.Console.find(FXmlConsole).sendAsync(url, xconfig);
   }
   MO.FDrTemplateConsole_createDisplay = function FDrTemplateConsole_createDisplay(xconfig){
      var o = this;
      var url = o.makeServiceUrl('createDisplay');
      return MO.Console.find(FXmlConsole).sendAsync(url, xconfig);
   }
   MO.FDrTemplateConsole_update = function FDrTemplateConsole_update(config){
      var o = this;
      var url = RBrowser.hostPath('/' + o._serviceCode + '.ws?action=updateContent&date=' + RDate.format());
      return MO.Console.find(FXmlConsole).sendAsync(url, config);
   }
}
with(MO){
   MO.FDsCommonAnimationPropertyFrame = function FDsCommonAnimationPropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._visible         = false;
      o._activeSpace     = null;
      o._activeAnimation = null;
      o._controlGuid     = null;
      o._controlCode     = null;
      o._controlLabel    = null;
      o.onBuilded        = FDsCommonAnimationPropertyFrame_onBuilded;
      o.onDataChanged    = FDsCommonAnimationPropertyFrame_onDataChanged;
      o.construct        = FDsCommonAnimationPropertyFrame_construct;
      o.loadObject       = FDsCommonAnimationPropertyFrame_loadObject;
      o.dispose          = FDsCommonAnimationPropertyFrame_dispose;
      return o;
   }
   MO.FDsCommonAnimationPropertyFrame_construct = function FDsCommonAnimationPropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonAnimationPropertyFrame_onBuilded = function FDsCommonAnimationPropertyFrame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlCode.addDataChangedListener(o, o.onDataChanged);
      o._controlLabel.addDataChangedListener(o, o.onDataChanged);
      o._controlPlayRate.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsCommonAnimationPropertyFrame_onDataChanged = function FDsCommonAnimationPropertyFrame_onDataChanged(p){
      var o = this;
      var animation = o._activeAnimation;
      var resource = animation.resource();
      resource.setCode(o._controlCode.get());
      resource.setLabel(o._controlLabel.get());
      resource._playRate = o._controlPlayRate.get();
      animation.reloadResource();
   }
   MO.FDsCommonAnimationPropertyFrame_loadObject = function FDsCommonAnimationPropertyFrame_loadObject(space, animation){
      var o = this;
      var resource = animation.resource();
      o._activeSpace = space;
      o._activeAnimation = animation;
      o._controlGuid.set(resource.guid());
      o._controlCode.set(resource.code());
      o._controlLabel.set(resource.label());
      o._controlPlayRate.set(resource.playRate());
   }
   MO.FDsCommonAnimationPropertyFrame_dispose = function FDsCommonAnimationPropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonCameraFrame = function FDsCommonCameraFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._workspace        = null;
      o._camera           = null;
      o._controlPosition  = null;
      o._controlDirection = null;
      o.construct         = FDsCommonCameraFrame_construct;
      o.loadObject        = FDsCommonCameraFrame_loadObject;
      o.dispose           = FDsCommonCameraFrame_dispose;
      return o;
   }
   MO.FDsCommonCameraFrame_construct = function FDsCommonCameraFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonCameraFrame_loadObject = function FDsCommonCameraFrame_loadObject(s, c){
      var o = this;
      var r = c._resource;
      o._camera = c;
      o._controlPosition.set(c.position());
      o._controlDirection.set(c.direction());
   }
   MO.FDsCommonCameraFrame_dispose = function FDsCommonCameraFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonCameraPropertyFrame = function FDsCommonCameraPropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._visible          = false;
      o._workspace        = null;
      o._activeSpace      = null;
      o._activeCamera     = null;
      o._controlGuid      = null;
      o._controlCode      = null;
      o._controlLabel     = null;
      o._controlPosition  = null;
      o._controlDirection = null;
      o.onBuilded         = FDsCommonCameraPropertyFrame_onBuilded;
      o.onDataChanged     = FDsCommonCameraPropertyFrame_onDataChanged;
      o.construct         = FDsCommonCameraPropertyFrame_construct;
      o.loadObject        = FDsCommonCameraPropertyFrame_loadObject;
      o.dispose           = FDsCommonCameraPropertyFrame_dispose;
      return o;
   }
   MO.FDsCommonCameraPropertyFrame_onBuilded = function FDsCommonCameraPropertyFrame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlPosition.addDataChangedListener(o, o.onDataChanged);
      o._controlDirection.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsCommonCameraPropertyFrame_onDataChanged = function FDsCommonCameraPropertyFrame_onDataChanged(p){
      var o = this;
      var camera = o._activeCamera;
      var resource = camera.resource();
      resource.position().assign(o._controlPosition.get());
      resource.direction().assign(o._controlDirection.get());
      camera.position().assign(resource.position());
      camera.direction().assign(resource.direction());
      camera.update();
   }
   MO.FDsCommonCameraPropertyFrame_construct = function FDsCommonCameraPropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonCameraPropertyFrame_loadObject = function FDsCommonCameraPropertyFrame_loadObject(space, camera){
      var o = this;
      var resource = camera.resource();
      o._activeSpace = space;
      o._activeCamera = camera;
      o._controlGuid.set(resource.guid());
      o._controlCode.set(resource.code());
      o._controlLabel.set(resource.label());
      o._controlPosition.set(camera.position());
      o._controlDirection.set(camera.direction());
      resource.position().assign(camera.position());
      resource.direction().assign(camera.direction());
   }
   MO.FDsCommonCameraPropertyFrame_dispose = function FDsCommonCameraPropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonDisplayDialog = function FDsCommonDisplayDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.common.dialog.DisplayDialog';
      o._displayModeCd        = null;
      o._controlLayerLabel    = null;
      o._controlDisplayLabel  = null;
      o._controlCode          = null;
      o._controlLabel         = null;
      o._controlTemplateCode  = null;
      o._controlConfirmButton = null;
      o._controlCancelButton  = null;
      o.onBuilded             = FDsCommonDisplayDialog_onBuilded;
      o.onConfirmLoad         = FDsCommonDisplayDialog_onConfirmLoad;
      o.onConfirmClick        = FDsCommonDisplayDialog_onConfirmClick;
      o.onCancelClick         = FDsCommonDisplayDialog_onCancelClick;
      o.construct             = FDsCommonDisplayDialog_construct;
      o.setSpace              = FDsCommonDisplayDialog_setSpace;
      o.setDisplayLabel       = FDsCommonDisplayDialog_setDisplayLabel;
      o.setContentCode        = FDsCommonDisplayDialog_setContentCode;
      o.setContentLabel       = FDsCommonDisplayDialog_setContentLabel;
      o.dispose               = FDsCommonDisplayDialog_dispose;
      return o;
   }
   MO.FDsCommonDisplayDialog_onBuilded = function FDsCommonDisplayDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlSpaceGuid.setEditAble(false);
      o._controlSpaceLabel.setEditAble(false);
      o._controlConfirm.addClickListener(o, o.onConfirmClick);
      o._controlCancel.addClickListener(o, o.onCancelClick);
   }
   MO.FDsCommonDisplayDialog_onConfirmLoad = function FDsCommonDisplayDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
   }
   MO.FDsCommonDisplayDialog_onConfirmClick = function FDsCommonDisplayDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var xaction = new TXmlNode('Action');
      var xsprite = xaction.create('Display');
      xsprite.set('space_guid', o._spaceGuid);
      xsprite.set('code', o._controlCode.get());
      xsprite.set('label', o._controlLabel.get());
      xsprite.set('model_guid', o._controlModelGuid.get());
      xsprite.set('model_code', o._controlModelCode.get());
      var connection = MO.Console.find(FDrTemplateConsole).createDisplay(xaction);
      connection.addLoadListener(o, o.onConfirmLoad);
   }
   MO.FDsCommonDisplayDialog_onCancelClick = function FDsCommonDisplayDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsCommonDisplayDialog_construct = function FDsCommonDisplayDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsCommonDisplayDialog_setSpace = function FDsCommonDisplayDialog_setSpace(space){
      var o = this;
      var resource = space.resource();
      o._controlSpaceGuid.set(resource.guid());
      o._controlSpaceLabel.set(resource.makeLabel());
   }
   MO.FDsCommonDisplayDialog_setDisplayLabel = function FDsCommonDisplayDialog_setDisplayLabel(label){
      this._controlDisplayLabel.set(label);
   }
   MO.FDsCommonDisplayDialog_setContentCode = function FDsCommonDisplayDialog_setContentCode(label){
      this._controlCode.set(label);
   }
   MO.FDsCommonDisplayDialog_setContentLabel = function FDsCommonDisplayDialog_setContentLabel(label){
      this._controlLabel.set(label);
   }
   MO.FDsCommonDisplayDialog_dispose = function FDsCommonDisplayDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonDisplayFrame = function FDsCommonDisplayFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._activeSpace   = null;
      o._activeDisplay = null;
      o.onBuilded      = FDsCommonDisplayFrame_onBuilded;
      o.onDataChanged  = FDsCommonDisplayFrame_onDataChanged;
      o.construct      = FDsCommonDisplayFrame_construct;
      o.loadObject     = FDsCommonDisplayFrame_loadObject;
      o.dispose        = FDsCommonDisplayFrame_dispose;
      return o;
   }
   MO.FDsCommonDisplayFrame_onBuilded = function FDsCommonDisplayFrame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlTranslate.addDataChangedListener(o, o.onDataChanged);
      o._controlRotation.addDataChangedListener(o, o.onDataChanged);
      o._controlScale.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsCommonDisplayFrame_onDataChanged = function FDsCommonDisplayFrame_onDataChanged(p){
      var o = this;
      var display = o._activeDisplay;
      var resource = display.resource();
      var matrix = resource.matrix();
      var value = o._controlTranslate.get();
      matrix.setTranslate(value.x, value.y, value.z);
      var value = o._controlRotation.get();
      matrix.setRotation(value.x, value.y, value.z);
      var value = o._controlScale.get();
      matrix.setScale(value.x, value.y, value.z);
      matrix.update();
      display.matrix().assign(matrix);
   }
   MO.FDsCommonDisplayFrame_construct = function FDsCommonDisplayFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonDisplayFrame_loadObject = function FDsCommonDisplayFrame_loadObject(space, display){
      var o = this;
      var resource = display.resource();
      o._activeSpace = space;
      o._activeDisplay = display;
      var matrix = resource.matrix();
      o._controlTranslate.set(matrix.tx, matrix.ty, matrix.tz);
      o._controlRotation.set(matrix.rx, matrix.ry, matrix.rz);
      o._controlScale.set(matrix.sx, matrix.sy, matrix.sz);
   }
   MO.FDsCommonDisplayFrame_dispose = function FDsCommonDisplayFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonDisplayPropertyFrame = function FDsCommonDisplayPropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._visible        = false;
      o._workspace      = null;
      o._activeDisplay  = null;
      o._activeResource = null;
      o._controlGuid    = null;
      o._controlCode    = null;
      o._controlLabel   = null;
      o._displayFrame   = null;
      o._materialFrame  = null;
      o.onBuilded       = FDsCommonDisplayPropertyFrame_onBuilded;
      o.onDataChanged   = FDsCommonDisplayPropertyFrame_onDataChanged;
      o.construct       = FDsCommonDisplayPropertyFrame_construct;
      o.loadObject      = FDsCommonDisplayPropertyFrame_loadObject;
      o.dispose         = FDsCommonDisplayPropertyFrame_dispose;
      return o;
   }
   MO.FDsCommonDisplayPropertyFrame_onBuilded = function FDsCommonDisplayPropertyFrame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlCode.addDataChangedListener(o, o.onDataChanged);
      o._controlLabel.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsCommonDisplayPropertyFrame_onDataChanged = function FDsCommonDisplayPropertyFrame_onDataChanged(p){
      var o = this;
      var r = o._activeResource;
      r._code = o._controlCode.get();
      r._label = o._controlLabel.get();
   }
   MO.FDsCommonDisplayPropertyFrame_construct = function FDsCommonDisplayPropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonDisplayPropertyFrame_loadObject = function FDsCommonDisplayPropertyFrame_loadObject(space, display){
      var o = this;
      var resource = display._resource;
      o._activeSpace = space;
      o._activeDisplay = display;
      o._controlGuid.set(resource.guid());
      o._controlCode.set(resource.code());
      o._controlLabel.set(resource.label());
      o._frameDisplay.loadObject(space, display);
   }
   MO.FDsCommonDisplayPropertyFrame_dispose = function FDsCommonDisplayPropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonLayerDialog = function FDsCommonLayerDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.common.dialog.LayerDialog';
      o._displayModeCd        = null;
      o._controlSpaceGuid     = null;
      o._controlSpaceLabel    = null;
      o._controlCode          = null;
      o._controlLabel         = null;
      o._controlConfirmButton = null;
      o._controlCancelButton  = null;
      o.onBuilded             = FDsCommonLayerDialog_onBuilded;
      o.onConfirmLoad         = FDsCommonLayerDialog_onConfirmLoad;
      o.onConfirmClick        = FDsCommonLayerDialog_onConfirmClick;
      o.onCancelClick         = FDsCommonLayerDialog_onCancelClick;
      o.construct             = FDsCommonLayerDialog_construct;
      o.setSpace              = FDsCommonLayerDialog_setSpace;
      o.setDisplayLabel       = FDsCommonLayerDialog_setDisplayLabel;
      o.setContentCode        = FDsCommonLayerDialog_setContentCode;
      o.setContentLabel       = FDsCommonLayerDialog_setContentLabel;
      o.dispose               = FDsCommonLayerDialog_dispose;
      return o;
   }
   MO.FDsCommonLayerDialog_onBuilded = function FDsCommonLayerDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlSpaceGuid.setEditAble(false);
      o._controlSpaceLabel.setEditAble(false);
      o._controlConfirm.addClickListener(o, o.onConfirmClick);
      o._controlCancel.addClickListener(o, o.onCancelClick);
   }
   MO.FDsCommonLayerDialog_onConfirmLoad = function FDsCommonLayerDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
   }
   MO.FDsCommonLayerDialog_onConfirmClick = function FDsCommonLayerDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var xaction = new TXmlNode('Action');
      var xsprite = xaction.create('Layer');
      xsprite.set('space_guid', o._spaceGuid);
      xsprite.set('code', o._controlCode.get());
      xsprite.set('label', o._controlLabel.get());
      var connection = MO.Console.find(FDrSceneConsole).createLayer(xaction);
      connection.addLoadListener(o, o.onConfirmLoad);
   }
   MO.FDsCommonLayerDialog_onCancelClick = function FDsCommonLayerDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsCommonLayerDialog_construct = function FDsCommonLayerDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsCommonLayerDialog_setSpace = function FDsCommonLayerDialog_setSpace(space){
      var o = this;
      var resource = space.resource();
      o._controlSpaceGuid.set(resource.guid());
      o._controlSpaceLabel.set(resource.makeLabel());
   }
   MO.FDsCommonLayerDialog_setDisplayLabel = function FDsCommonLayerDialog_setDisplayLabel(label){
      this._controlDisplayLabel.set(label);
   }
   MO.FDsCommonLayerDialog_setContentCode = function FDsCommonLayerDialog_setContentCode(label){
      this._controlCode.set(label);
   }
   MO.FDsCommonLayerDialog_setContentLabel = function FDsCommonLayerDialog_setContentLabel(label){
      this._controlLabel.set(label);
   }
   MO.FDsCommonLayerDialog_dispose = function FDsCommonLayerDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonLayerPropertyFrame = function FDsCommonLayerPropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._visible       = false;
      o._workspace     = null;
      o._layer         = null;
      o._layerResource = null;
      o._controlGuid   = null;
      o._controlCode   = null;
      o._controlLabel  = null;
      o.onBuilded      = FDsCommonLayerPropertyFrame_onBuilded;
      o.onDataChanged  = FDsCommonLayerPropertyFrame_onDataChanged;
      o.construct      = FDsCommonLayerPropertyFrame_construct;
      o.loadObject     = FDsCommonLayerPropertyFrame_loadObject;
      o.dispose        = FDsCommonLayerPropertyFrame_dispose;
      return o;
   }
   MO.FDsCommonLayerPropertyFrame_construct = function FDsCommonLayerPropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonLayerPropertyFrame_onBuilded = function FDsCommonLayerPropertyFrame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlCode.addDataChangedListener(o, o.onDataChanged);
      o._controlLabel.addDataChangedListener(o, o.onDataChanged);
      o._controlTypeCd.addDataChangedListener(o, o.onDataChanged);
      o._controlTransformCd.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsCommonLayerPropertyFrame_onDataChanged = function FDsCommonLayerPropertyFrame_onDataChanged(p){
      var o = this;
      var r = o._layerResource;
      r.setCode(o._controlCode.get());
      r.setLabel(o._controlLabel.get());
      r.setTypeCd(o._controlTypeCd.get());
      r.setTransformCd(o._controlTransformCd.get());
   }
   MO.FDsCommonLayerPropertyFrame_loadObject = function FDsCommonLayerPropertyFrame_loadObject(s, l){
      var o = this;
      var r = l.resource();
      o._layer = l;
      o._layerResource = r;
      o._controlGuid.set(r.guid());
      o._controlCode.set(r.code());
      o._controlLabel.set(r.label());
      o._controlTypeCd.set(r.typeCd());
      o._controlTransformCd.set(r.transformCd());
   }
   MO.FDsCommonLayerPropertyFrame_dispose = function FDsCommonLayerPropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonLightPropertyFrame = function FDsCommonLightPropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._visible      = false;
      o._workspace    = null;
      o._activeSpace  = null;
      o._activeLight  = null;
      o._controlGuid  = null;
      o._controlCode  = null;
      o._controlLabel = null;
      o.construct     = FDsCommonLightPropertyFrame_construct;
      o.loadObject    = FDsCommonLightPropertyFrame_loadObject;
      o.dispose       = FDsCommonLightPropertyFrame_dispose;
      return o;
   }
   MO.FDsCommonLightPropertyFrame_construct = function FDsCommonLightPropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonLightPropertyFrame_loadObject = function FDsCommonLightPropertyFrame_loadObject(space, light){
      var o = this;
      var resource = light.resource();
      o._activeSpace = space;
      o._activeLight = light;
      o._controlGuid.set(resource.guid());
      o._controlCode.set(resource.code());
      o._controlLabel.set(resource.label());
   }
   MO.FDsCommonLightPropertyFrame_dispose = function FDsCommonLightPropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonMaterial1Frame = function FDsCommonMaterial1Frame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._activeSpace           = null;
      o._activeMaterial        = null;
      o._controlOptionDouble   = null;
      o._controlEffectCode     = null;
      o._controlOptionAlpha    = null;
      o._controlAlphaBase      = null;
      o._controlAlphaRate      = null;
      o._controlOptionColor    = null;
      o._controlColorMin       = null;
      o._controlColorMax       = null;
      o._controlColorBalance   = null;
      o._controlColorRate      = null;
      o._controlOptionVertex   = null;
      o._controlVertexColor    = null;
      o._controlOptionAmbient  = null;
      o._controlAmbientColor   = null;
      o._controlOptionDiffuse  = null;
      o._controlDiffuseColor   = null;
      o._controlOptionSpecular = null;
      o._controlSpecularColor  = null;
      o._controlSpecularBase   = null;
      o._controlSpecularLevel  = null;
      o._controlOptionReflect  = null;
      o._controlReflectColor   = null;
      o._controlReflectMerge   = null;
      o._controlOptionEmissive = null;
      o._controlEmissiveColor  = null;
      o.onBuilded              = FDsCommonMaterial1Frame_onBuilded;
      o.onOptionChanged        = FDsCommonMaterial1Frame_onOptionChanged;
      o.onDataChanged          = FDsCommonMaterial1Frame_onDataChanged;
      o.construct              = FDsCommonMaterial1Frame_construct;
      o.loadObject             = FDsCommonMaterial1Frame_loadObject;
      o.dispose                = FDsCommonMaterial1Frame_dispose;
      return o;
   }
   MO.FDsCommonMaterial1Frame_onBuilded = function FDsCommonMaterial1Frame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlOptionDouble.addDataChangedListener(o, o.onDataChanged);
      o._controlEffectCode.addDataChangedListener(o, o.onDataChanged);
      o._controlOptionAlpha.addDataChangedListener(o, o.onDataChanged);
      o._controlAlphaBase.addDataChangedListener(o, o.onDataChanged);
      o._controlAlphaRate.addDataChangedListener(o, o.onDataChanged);
      o._controlOptionColor.addDataChangedListener(o, o.onOptionChanged);
      o._controlColorMin.addDataChangedListener(o, o.onDataChanged);
      o._controlColorMax.addDataChangedListener(o, o.onDataChanged);
      o._controlColorBalance.addDataChangedListener(o, o.onDataChanged);
      o._controlColorRate.addDataChangedListener(o, o.onDataChanged);
      o._controlOptionVertex.addDataChangedListener(o, o.onOptionChanged);
      o._controlVertexColor.addDataChangedListener(o, o.onDataChanged);
      o._controlOptionAmbient.addDataChangedListener(o, o.onOptionChanged);
      o._controlAmbientColor.addDataChangedListener(o, o.onDataChanged);
      o._controlOptionDiffuse.addDataChangedListener(o, o.onOptionChanged);
      o._controlDiffuseColor.addDataChangedListener(o, o.onDataChanged);
      o._controlOptionSpecular.addDataChangedListener(o, o.onOptionChanged);
      o._controlSpecularColor.addDataChangedListener(o, o.onDataChanged);
      o._controlSpecularBase.addDataChangedListener(o, o.onDataChanged);
      o._controlSpecularLevel.addDataChangedListener(o, o.onDataChanged);
      o._controlOptionReflect.addDataChangedListener(o, o.onOptionChanged);
      o._controlReflectColor.addDataChangedListener(o, o.onDataChanged);
      o._controlReflectMerge.addDataChangedListener(o, o.onDataChanged);
      o._controlOptionEmissive.addDataChangedListener(o, o.onOptionChanged);
      o._controlEmissiveColor.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsCommonMaterial1Frame_onOptionChanged = function FDsCommonMaterial1Frame_onOptionChanged(p){
      var o = this;
      var space = o._activeSpace;
      var material = o._activeMaterial;
   }
   MO.FDsCommonMaterial1Frame_onDataChanged = function FDsCommonMaterial1Frame_onDataChanged(p){
      var o = this;
      var space = o._activeSpace;
      var material = o._activeMaterial;
      var materialResource = material.resource();
      var infoResource = materialResource.info();
      infoResource.optionDouble = o._controlOptionDouble.get();
      infoResource.effectCode = o._controlEffectCode.get();
      infoResource.optionAlpha = o._controlOptionAlpha.get();
      infoResource.alphaBase = o._controlAlphaBase.get();
      infoResource.alphaRate = o._controlAlphaRate.get();
      infoResource.colorMin = o._controlColorMin.get();
      infoResource.colorMax = o._controlColorMax.get();
      infoResource.colorBalance = o._controlColorBalance.get();
      infoResource.colorRate = o._controlColorRate.get();
      infoResource.vertexColor.assign(o._controlVertexColor.get());
      infoResource.ambientColor.assign(o._controlAmbientColor.get());
      infoResource.diffuseColor.assign(o._controlDiffuseColor.get());
      infoResource.specularColor.assign(o._controlSpecularColor.get());
      infoResource.specularBase = o._controlSpecularBase.get();
      infoResource.specularLevel = o._controlSpecularLevel.get();
      infoResource.reflectColor.assign(o._controlReflectColor.get());
      infoResource.reflectMerge = o._controlReflectMerge.get();
      infoResource.emissiveColor.assign(o._controlEmissiveColor.get());
      material.reloadResource();
   }
   MO.FDsCommonMaterial1Frame_construct = function FDsCommonMaterial1Frame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonMaterial1Frame_loadObject = function FDsCommonMaterial1Frame_loadObject(space, material){
      var o = this;
      o._activeSpace = space;
      o._activeMaterial = material;
      var resource = material.resource();
      if(!resource){
         return;
      }
      var infoResource = resource.info();
      o._controlOptionDouble.set(infoResource.optionDouble);
      o._controlEffectCode.set(infoResource.effectCode);
      o._controlOptionAlpha.set(infoResource.optionAlpha);
      o._controlAlphaBase.set(infoResource.alphaBase);
      o._controlAlphaRate.set(infoResource.alphaRate);
      o._controlOptionColor.set(infoResource.optionColor);
      o._controlColorMin.set(infoResource.colorMin);
      o._controlColorMax.set(infoResource.colorMax);
      o._controlColorBalance.set(infoResource.colorBalance);
      o._controlColorRate.set(infoResource.colorRate);
      o._controlOptionVertex.set(infoResource.optionVertex);
      o._controlVertexColor.set(infoResource.vertexColor);
      o._controlOptionAmbient.set(infoResource.optionAmbient);
      o._controlAmbientColor.set(infoResource.ambientColor);
      o._controlOptionDiffuse.set(infoResource.optionDiffuse);
      o._controlDiffuseColor.set(infoResource.diffuseColor);
      o._controlOptionSpecular.set(infoResource.optionSpecular);
      o._controlSpecularColor.set(infoResource.specularColor);
      o._controlSpecularBase.set(infoResource.specularBase);
      o._controlSpecularLevel.set(infoResource.specularLevel);
      o._controlOptionReflect.set(infoResource.optionReflect);
      o._controlReflectColor.set(infoResource.reflectColor);
      o._controlReflectMerge.set(infoResource.reflectMerge);
      o._controlOptionEmissive.set(infoResource.optionEmissive);
      o._controlEmissiveColor.set(infoResource.emissiveColor);
   }
   MO.FDsCommonMaterial1Frame_dispose = function FDsCommonMaterial1Frame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonMaterial2Frame = function FDsCommonMaterial2Frame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._activeSpace              = null;
      o._activeMaterial           = null;
      o._controlDiffuseViewColor  = null;
      o._controlSpecularViewColor = null;
      o._controlSpecularViewBase  = null;
      o._controlSpecularViewLevel = null;
      o.onBuilded                 = FDsCommonMaterial2Frame_onBuilded;
      o.onDataChanged             = FDsCommonMaterial2Frame_onDataChanged;
      o.construct                 = FDsCommonMaterial2Frame_construct;
      o.loadObject                = FDsCommonMaterial2Frame_loadObject;
      o.dispose                   = FDsCommonMaterial2Frame_dispose;
      return o;
   }
   MO.FDsCommonMaterial2Frame_onBuilded = function FDsCommonMaterial2Frame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlOptionView.addDataChangedListener(o, o.onDataChanged);
      o._controlOptionNormalInvert.addDataChangedListener(o, o.onDataChanged);
      o._controlOptionShadow.addDataChangedListener(o, o.onDataChanged);
      o._controlOptionShadowSelf.addDataChangedListener(o, o.onDataChanged);
      o._controlDiffuseViewColor.addDataChangedListener(o, o.onDataChanged);
      o._controlSpecularViewColor.addDataChangedListener(o, o.onDataChanged);
      o._controlSpecularViewBase.addDataChangedListener(o, o.onDataChanged);
      o._controlSpecularViewLevel.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsCommonMaterial2Frame_onDataChanged = function FDsCommonMaterial2Frame_onDataChanged(p){
      var o = this;
      var t = o._activeSpace;
      var m = o._activeMaterial;
      var mr = m.resource();
      var mi = mr.info();
      mi.optionView = o._controlOptionView.get();
      mi.optionNormalInvert = o._controlOptionNormalInvert.get();
      mi.optionShadow = o._controlOptionShadow.get();
      mi.optionShadowSelf = o._controlOptionShadowSelf.get();
      var v = o._controlDiffuseViewColor.get();
      mi.diffuseViewColor.assign(v);
      var v = o._controlSpecularViewColor.get();
      mi.specularViewColor.assign(v);
      mi.specularViewBase = o._controlSpecularViewBase.get();
      mi.specularViewLevel = o._controlSpecularViewLevel.get();
      m.reloadResource();
   }
   MO.FDsCommonMaterial2Frame_construct = function FDsCommonMaterial2Frame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonMaterial2Frame_loadObject = function FDsCommonMaterial2Frame_loadObject(space, material){
      var o = this;
      o._activeSpace = space;
      o._activeMaterial = material;
      var resource = material.resource();
      if(!resource){
         return;
      }
      var info = resource.info();
      o._controlOptionView.set(info.optionView);
      o._controlOptionNormalInvert.set(info.optionNormalInvert);
      o._controlOptionShadow.set(info.optionShadow);
      o._controlOptionShadowSelf.set(info.optionShadowSelf);
      o._controlDiffuseViewColor.set(info.diffuseViewColor);
      o._controlSpecularViewColor.set(info.specularViewColor);
      o._controlSpecularViewBase.set(info.specularViewBase);
      o._controlSpecularViewLevel.set(info.specularViewLevel);
   }
   MO.FDsCommonMaterial2Frame_dispose = function FDsCommonMaterial2Frame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonMaterialDialog = function FDsCommonMaterialDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.common.dialog.MaterialDialog';
      o._displayModeCd        = null;
      o._controlLayerLabel    = null;
      o._controlDisplayLabel  = null;
      o._controlCode          = null;
      o._controlLabel         = null;
      o._controlTemplateCode  = null;
      o._controlConfirmButton = null;
      o._controlCancelButton  = null;
      o.onBuilded             = FDsCommonMaterialDialog_onBuilded;
      o.onConfirmLoad         = FDsCommonMaterialDialog_onConfirmLoad;
      o.onConfirmClick        = FDsCommonMaterialDialog_onConfirmClick;
      o.onCancelClick         = FDsCommonMaterialDialog_onCancelClick;
      o.construct             = FDsCommonMaterialDialog_construct;
      o.setSpace              = FDsCommonMaterialDialog_setSpace;
      o.setDisplayLabel       = FDsCommonMaterialDialog_setDisplayLabel;
      o.setContentCode        = FDsCommonMaterialDialog_setContentCode;
      o.setContentLabel       = FDsCommonMaterialDialog_setContentLabel;
      o.dispose               = FDsCommonMaterialDialog_dispose;
      return o;
   }
   MO.FDsCommonMaterialDialog_onBuilded = function FDsCommonMaterialDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlSpaceGuid.setEditAble(false);
      o._controlSpaceLabel.setEditAble(false);
      o._controlConfirm.addClickListener(o, o.onConfirmClick);
      o._controlCancel.addClickListener(o, o.onCancelClick);
   }
   MO.FDsCommonMaterialDialog_onConfirmLoad = function FDsCommonMaterialDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
   }
   MO.FDsCommonMaterialDialog_onConfirmClick = function FDsCommonMaterialDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var xaction = new TXmlNode('Action');
      var xsprite = xaction.create('Material');
      xsprite.set('space_guid', o._spaceGuid);
      xsprite.set('code', o._controlCode.get());
      xsprite.set('label', o._controlLabel.get());
      xsprite.set('material_guid', o._controlMaterialGuid.get());
      xsprite.set('material_code', o._controlMaterialCode.get());
      var connection = MO.Console.find(FDrTemplateConsole).selectMaterial(xaction);
      connection.addLoadListener(o, o.onConfirmLoad);
   }
   MO.FDsCommonMaterialDialog_onCancelClick = function FDsCommonMaterialDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsCommonMaterialDialog_construct = function FDsCommonMaterialDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsCommonMaterialDialog_setSpace = function FDsCommonMaterialDialog_setSpace(space){
      var o = this;
      var resource = space.resource();
      o._controlSpaceGuid.set(resource.guid());
      o._controlSpaceLabel.set(resource.makeLabel());
   }
   MO.FDsCommonMaterialDialog_setDisplayLabel = function FDsCommonMaterialDialog_setDisplayLabel(label){
      this._controlDisplayLabel.set(label);
   }
   MO.FDsCommonMaterialDialog_setContentCode = function FDsCommonMaterialDialog_setContentCode(label){
      this._controlCode.set(label);
   }
   MO.FDsCommonMaterialDialog_setContentLabel = function FDsCommonMaterialDialog_setContentLabel(label){
      this._controlLabel.set(label);
   }
   MO.FDsCommonMaterialDialog_dispose = function FDsCommonMaterialDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonMaterialPropertyFrame = function FDsCommonMaterialPropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._visible        = false;
      o._workspace      = null;
      o._activeMaterial       = null;
      o._controlGuid    = null;
      o._controlCode    = null;
      o._controlLabel   = null;
      o._frameMaterial1 = null;
      o._frameMaterial2 = null;
      o.onBuilded       = FDsCommonMaterialPropertyFrame_onBuilded;
      o.onDataChanged   = FDsCommonMaterialPropertyFrame_onDataChanged;
      o.construct       = FDsCommonMaterialPropertyFrame_construct;
      o.loadObject      = FDsCommonMaterialPropertyFrame_loadObject;
      o.dispose         = FDsCommonMaterialPropertyFrame_dispose;
      return o;
   }
   MO.FDsCommonMaterialPropertyFrame_onBuilded = function FDsCommonMaterialPropertyFrame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlLabel.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsCommonMaterialPropertyFrame_onDataChanged = function FDsCommonMaterialPropertyFrame_onDataChanged(p){
      var o = this;
      var m = o._activeMaterial;
      var mr = m.resource();
      mr.setLabel(o._controlLabel.get());
   }
   MO.FDsCommonMaterialPropertyFrame_construct = function FDsCommonMaterialPropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonMaterialPropertyFrame_loadObject = function FDsCommonMaterialPropertyFrame_loadObject(space, material){
      var o = this;
      var resource = material.resource();
      o._activeSpace = space;
      o._activeMaterial = material;
      o._controlGuid.set(resource.guid());
      o._controlCode.set(resource.code());
      o._controlLabel.set(resource.label());
      o._frameMaterial1.loadObject(space, material);
      o._frameMaterial2.loadObject(space, material);
   }
   MO.FDsCommonMaterialPropertyFrame_dispose = function FDsCommonMaterialPropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonMaterialReferDialog = function FDsCommonMaterialReferDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName      = 'resource.common.dialog.MaterialReferDialog';
      o._displayModeCd  = null;
      o._controlGuid    = null;
      o._controlCode    = null;
      o._controlLabel   = null;
      o._controlConfirm = null;
      o._controlCancel  = null;
      o.onBuilded       = FDsCommonMaterialReferDialog_onBuilded;
      o.onConfirmLoad   = FDsCommonMaterialReferDialog_onConfirmLoad;
      o.onConfirmClick  = FDsCommonMaterialReferDialog_onConfirmClick;
      o.onCancelClick   = FDsCommonMaterialReferDialog_onCancelClick;
      o.construct       = FDsCommonMaterialReferDialog_construct;
      o.setContentGuid  = FDsCommonMaterialReferDialog_setContentGuid;
      o.setContentCode  = FDsCommonMaterialReferDialog_setContentCode;
      o.setContentLabel = FDsCommonMaterialReferDialog_setContentLabel;
      o.dispose         = FDsCommonMaterialReferDialog_dispose;
      return o;
   }
   MO.FDsCommonMaterialReferDialog_onBuilded = function FDsCommonMaterialReferDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlConfirm.addClickListener(o, o.onConfirmClick);
      o._controlCancel.addClickListener(o, o.onCancelClick);
   }
   MO.FDsCommonMaterialReferDialog_onConfirmLoad = function FDsCommonMaterialReferDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
   }
   MO.FDsCommonMaterialReferDialog_onConfirmClick = function FDsCommonMaterialReferDialog_onConfirmClick(event){
      var o = this;
      o._materialRefer._guid = o._controlGuid.get();
      o.hide();
   }
   MO.FDsCommonMaterialReferDialog_onCancelClick = function FDsCommonMaterialReferDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsCommonMaterialReferDialog_construct = function FDsCommonMaterialReferDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsCommonMaterialReferDialog_setContentGuid = function FDsCommonMaterialReferDialog_setContentGuid(guid){
      this._controlGuid.set(guid);
   }
   MO.FDsCommonMaterialReferDialog_setContentCode = function FDsCommonMaterialReferDialog_setContentCode(code){
      this._controlCode.set(code);
   }
   MO.FDsCommonMaterialReferDialog_setContentLabel = function FDsCommonMaterialReferDialog_setContentLabel(label){
      this._controlLabel.set(label);
   }
   MO.FDsCommonMaterialReferDialog_dispose = function FDsCommonMaterialReferDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonMovieDialog = function FDsCommonMovieDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.common.dialog.MovieDialog';
      o._displayModeCd        = null;
      o._controlLayerLabel    = null;
      o._controlDisplayLabel  = null;
      o._controlCode          = null;
      o._controlLabel         = null;
      o._controlTemplateCode  = null;
      o._controlConfirmButton = null;
      o._controlCancelButton  = null;
      o.onBuilded             = FDsCommonMovieDialog_onBuilded;
      o.onConfirmLoad         = FDsCommonMovieDialog_onConfirmLoad;
      o.onConfirmClick        = FDsCommonMovieDialog_onConfirmClick;
      o.onCancelClick         = FDsCommonMovieDialog_onCancelClick;
      o.construct             = FDsCommonMovieDialog_construct;
      o.setLayerLabel         = FDsCommonMovieDialog_setLayerLabel;
      o.setDisplayLabel       = FDsCommonMovieDialog_setDisplayLabel;
      o.setContentCode        = FDsCommonMovieDialog_setContentCode;
      o.setContentLabel       = FDsCommonMovieDialog_setContentLabel;
      o.dispose               = FDsCommonMovieDialog_dispose;
      return o;
   }
   MO.FDsCommonMovieDialog_onBuilded = function FDsCommonMovieDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlLayerLabel.setEditAble(false);
      o._controlDisplayLabel.setEditAble(false);
      o._controlConfirmButton.addClickListener(o, o.onConfirmClick);
      o._controlCancelButton.addClickListener(o, o.onCancelClick);
   }
   MO.FDsCommonMovieDialog_onConfirmLoad = function FDsCommonMovieDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
   }
   MO.FDsCommonMovieDialog_onConfirmClick = function FDsCommonMovieDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var xaction = new TXmlNode('Action');
      var xmovie = xaction.create('Movie');
      xmovie.set('space_guid', o._spaceGuid);
      xmovie.set('layer_guid', o._layerGuid);
      xmovie.set('display_guid', o._displayGuid);
      xmovie.set('code', o._controlCode.get());
      xmovie.set('label', o._controlLabel.get());
      xmovie.set('interval', o._controlInterval.get());
      xmovie.set('rotation', o._controlRotation.get());
      var console = MO.Console.find(FDrSceneConsole);
      var connection = null;
      connection = console.createMovie(xaction);
      connection.addLoadListener(o, o.onConfirmLoad);
   }
   MO.FDsCommonMovieDialog_onCancelClick = function FDsCommonMovieDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsCommonMovieDialog_construct = function FDsCommonMovieDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsCommonMovieDialog_setLayerLabel = function FDsCommonMovieDialog_setLayerLabel(label){
      this._controlLayerLabel.set(label);
   }
   MO.FDsCommonMovieDialog_setDisplayLabel = function FDsCommonMovieDialog_setDisplayLabel(label){
      this._controlDisplayLabel.set(label);
   }
   MO.FDsCommonMovieDialog_setContentCode = function FDsCommonMovieDialog_setContentCode(label){
      this._controlCode.set(label);
   }
   MO.FDsCommonMovieDialog_setContentLabel = function FDsCommonMovieDialog_setContentLabel(label){
      this._controlLabel.set(label);
   }
   MO.FDsCommonMovieDialog_dispose = function FDsCommonMovieDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonMoviePropertyFrame = function FDsCommonMoviePropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._visible         = false;
      o._activeSpace     = null;
      o._activeMovie = null;
      o._controlGuid     = null;
      o._controlCode     = null;
      o._controlLabel    = null;
      o.onBuilded        = FDsCommonMoviePropertyFrame_onBuilded;
      o.onDataChanged    = FDsCommonMoviePropertyFrame_onDataChanged;
      o.construct        = FDsCommonMoviePropertyFrame_construct;
      o.loadObject       = FDsCommonMoviePropertyFrame_loadObject;
      o.dispose          = FDsCommonMoviePropertyFrame_dispose;
      return o;
   }
   MO.FDsCommonMoviePropertyFrame_construct = function FDsCommonMoviePropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonMoviePropertyFrame_onBuilded = function FDsCommonMoviePropertyFrame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlCode.addDataChangedListener(o, o.onDataChanged);
      o._controlLabel.addDataChangedListener(o, o.onDataChanged);
      o._controlInterval.addDataChangedListener(o, o.onDataChanged);
      o._controlRotation.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsCommonMoviePropertyFrame_onDataChanged = function FDsCommonMoviePropertyFrame_onDataChanged(p){
      var o = this;
      var movie = o._activeMovie;
      var resource = movie.resource();
      resource.setCode(o._controlCode.get());
      resource.setLabel(o._controlLabel.get());
      resource.setInterval(o._controlInterval.get());
      resource.rotation().assign(o._controlRotation.get());
      movie.reloadResource();
   }
   MO.FDsCommonMoviePropertyFrame_loadObject = function FDsCommonMoviePropertyFrame_loadObject(space, movie){
      var o = this;
      var resource = movie.resource();
      o._activeSpace = space;
      o._activeMovie = movie;
      o._controlGuid.set(resource.guid());
      o._controlCode.set(resource.code());
      o._controlLabel.set(resource.label());
      o._controlInterval.set(resource.interval());
      o._controlRotation.set(resource.rotation());
   }
   MO.FDsCommonMoviePropertyFrame_dispose = function FDsCommonMoviePropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonProgramDialog = function FDsCommonProgramDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.common.dialog.ProgramDialog';
      o._displayModeCd        = null;
      o._controlLayerLabel    = null;
      o._controlDisplayLabel  = null;
      o._controlCode          = null;
      o._controlLabel         = null;
      o._controlTemplateCode  = null;
      o._controlConfirmButton = null;
      o._controlCancelButton  = null;
      o.onBuilded             = FDsCommonProgramDialog_onBuilded;
      o.onConfirmClick        = FDsCommonProgramDialog_onConfirmClick;
      o.construct             = FDsCommonProgramDialog_construct;
      o.setProgramCode        = FDsCommonProgramDialog_setProgramCode;
      o.setVertexSource       = FDsCommonProgramDialog_setVertexSource;
      o.setFragmentSource     = FDsCommonProgramDialog_setFragmentSource;
      o.dispose               = FDsCommonProgramDialog_dispose;
      return o;
   }
   MO.FDsCommonProgramDialog_onBuilded = function FDsCommonProgramDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlConfirm.addClickListener(o, o.onConfirmClick);
   }
   MO.FDsCommonProgramDialog_onConfirmClick = function FDsCommonProgramDialog_onConfirmClick(event){
      var o = this;
      o.hide();
   }
   MO.FDsCommonProgramDialog_construct = function FDsCommonProgramDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsCommonProgramDialog_setProgramCode = function FDsCommonProgramDialog_setProgramCode(value){
      this._controlCode.set(value);
   }
   MO.FDsCommonProgramDialog_setVertexSource = function FDsCommonProgramDialog_setVertexSource(source, targetSource){
      var o = this;
      o._controlVertexSource.set(source);
      o._controlVertexTargetSource.set(targetSource);
   }
   MO.FDsCommonProgramDialog_setFragmentSource = function FDsCommonProgramDialog_setFragmentSource(source, targetSource){
      var o = this;
      o._controlFragmentSource.set(source);
      o._controlFragmentTargetSource.set(targetSource);
   }
   MO.FDsCommonProgramDialog_dispose = function FDsCommonProgramDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonRegionPropertyFrame = function FDsCommonRegionPropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._visible                   = false;
      o._workspace                 = null;
      o._activeSpace               = null;
      o._activeRegion              = null;
      o._controlMoveSpeed          = null;
      o._controlRotationKeySpeed   = null;
      o._controlRotationMouseSpeed = null;
      o._controlOptionBackground   = null;
      o._controlBackgroundColor    = null;
      o.onBuilded                  = FDsCommonRegionPropertyFrame_onBuilded;
      o.onDataChanged              = FDsCommonRegionPropertyFrame_onDataChanged;
      o.construct                  = FDsCommonRegionPropertyFrame_construct;
      o.loadObject                 = FDsCommonRegionPropertyFrame_loadObject;
      o.dispose                    = FDsCommonRegionPropertyFrame_dispose;
      return o;
   }
   MO.FDsCommonRegionPropertyFrame_onBuilded = function FDsCommonRegionPropertyFrame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlMoveSpeed.addDataChangedListener(o, o.onDataChanged);
      o._controlRotationKeySpeed.addDataChangedListener(o, o.onDataChanged);
      o._controlRotationMouseSpeed.addDataChangedListener(o, o.onDataChanged);
      o._controlOptionBackground.addDataChangedListener(o, o.onDataChanged);
      o._controlBackgroundColor.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsCommonRegionPropertyFrame_onDataChanged = function FDsCommonRegionPropertyFrame_onDataChanged(p){
      var o = this;
      var region = o._activeRegion;
      var resource = region.resource();
      resource.setOptionBackground(o._controlOptionBackground.get());
      resource.backgroundColor().assign(o._controlBackgroundColor.get());
      resource.setMoveSpeed(o._controlMoveSpeed.get());
      resource.setRotationKeySpeed(o._controlRotationKeySpeed.get());
      resource.setRotationMouseSpeed(o._controlRotationMouseSpeed.get());
      region.reloadResource();
      var canvasContent = o._frameSet._canvasContent;
      canvasContent.reloadRegion(region);
   }
   MO.FDsCommonRegionPropertyFrame_construct = function FDsCommonRegionPropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonRegionPropertyFrame_loadObject = function FDsCommonRegionPropertyFrame_loadObject(space, region){
      var o = this;
      var resource = region.resource();
      o._activeSpace = space;
      o._activeRegion = region;
      o._controlMoveSpeed.set(resource.moveSpeed());
      o._controlRotationKeySpeed.set(resource.rotationKeySpeed());
      o._controlRotationMouseSpeed.set(resource.rotationMouseSpeed());
      o._controlOptionBackground.set(resource.optionBackground());
      o._controlBackgroundColor.set(resource.backgroundColor());
   }
   MO.FDsCommonRegionPropertyFrame_dispose = function FDsCommonRegionPropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonRenderableFrame = function FDsCommonRenderableFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._activeSpace      = null;
      o._activeRenderable = null;
      o.onBuilded         = FDsCommonRenderableFrame_onBuilded;
      o.onDataChanged     = FDsCommonRenderableFrame_onDataChanged;
      o.onMaterialClick   = FDsCommonRenderableFrame_onMaterialClick;
      o.onEffectClick     = FDsCommonRenderableFrame_onEffectClick;
      o.construct         = FDsCommonRenderableFrame_construct;
      o.loadObject        = FDsCommonRenderableFrame_loadObject;
      o.dispose           = FDsCommonRenderableFrame_dispose;
      return o;
   }
   MO.FDsCommonRenderableFrame_onBuilded = function FDsCommonRenderableFrame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlTranslate.addDataChangedListener(o, o.onDataChanged);
      o._controlRotation.addDataChangedListener(o, o.onDataChanged);
      o._controlScale.addDataChangedListener(o, o.onDataChanged);
      o._controlMaterials.addClickListener(o, o.onMaterialClick);
      o._controlEffects.addClickListener(o, o.onEffectClick);
   }
   MO.FDsCommonRenderableFrame_onDataChanged = function FDsCommonRenderableFrame_onDataChanged(p){
      var o = this;
      var r = o._activeRenderable;
      var m = r.matrix();
      var v = o._controlTranslate.get();
      m.setTranslate(v.x, v.y, v.z);
      var v = o._controlRotation.get();
      m.setRotation(v.x, v.y, v.z);
      var v = o._controlScale.get();
      m.setScale(v.x, v.y, v.z);
      m.update();
   }
   MO.FDsCommonRenderableFrame_onMaterialClick = function FDsCommonRenderableFrame_onMaterialClick(event){
      var o = this;
      var item = event.item;
      var materialRefer = item.tag();
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsCommonMaterialReferDialog);
      dialog._frame = o;
      dialog._materialRefer = materialRefer;
      dialog.setContentCode('');
      dialog.setContentLabel('');
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsCommonRenderableFrame_onEffectClick = function FDsCommonRenderableFrame_onEffectClick(event){
      var o = this;
      var item = event.item;
      var effect = item.tag();
      var program = effect._program;
      var vertexShader = program.vertexShader();
      var fragmentShader = program.fragmentShader();
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsCommonProgramDialog);
      dialog._frameSet = o._frameSet;
      dialog.setProgramCode(effect._code);
      dialog.setVertexSource(vertexShader.source(), vertexShader.targetSource());
      dialog.setFragmentSource(fragmentShader.source(), fragmentShader.targetSource());
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsCommonRenderableFrame_construct = function FDsCommonRenderableFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonRenderableFrame_loadObject = function FDsCommonRenderableFrame_loadObject(space, renderable){
      var o = this;
      o._activeSpace = space;
      o._activeRenderable = renderable;
      var resource = renderable.resource();
      var matrix = renderable.matrix();
      o._controlTranslate.set(matrix.tx, matrix.ty, matrix.tz);
      o._controlRotation.set(matrix.rx, matrix.ry, matrix.rz);
      o._controlScale.set(matrix.sx, matrix.sy, matrix.sz);
      if(resource){
         var materialBox = o._controlMaterials;
         materialBox.clear();
         var indexBuffers = renderable.indexBuffers();
         var count = indexBuffers.count();
         for(var i = 0; i < count; i++){
            var materialRefer = resource.syncMaterialRefer(i);
            var item = materialBox.createItem(null, i + ': ' + materialRefer.guid());
            item.setTag(materialRefer);
            materialBox.push(item);
         }
      }
      var effectBox = o._controlEffects;
      effectBox.clear();
      var infos = renderable.infos();
      var count = infos.count();
      for(var i = 0; i < count; i++){
         var effect = infos.at(i).effect;
         if(effect){
            var item = effectBox.createItem(null, effect.code());
            item.setTag(effect);
            effectBox.push(item);
         }
      }
   }
   MO.FDsCommonRenderableFrame_dispose = function FDsCommonRenderableFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonRenderablePropertyFrame = function FDsCommonRenderablePropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._visible          = false;
      o._activeRenderable = null;
      o._activeMaterial   = null;
      o._controlGuid      = null;
      o._controlCode      = null;
      o._controlLabel     = null;
      o._frameRenderable  = null;
      o._frameMaterial1   = null;
      o._frameMaterial2   = null;
      o.construct         = FDsCommonRenderablePropertyFrame_construct;
      o.loadObject        = FDsCommonRenderablePropertyFrame_loadObject;
      o.dispose           = FDsCommonRenderablePropertyFrame_dispose;
      return o;
   }
   MO.FDsCommonRenderablePropertyFrame_construct = function FDsCommonRenderablePropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonRenderablePropertyFrame_loadObject = function FDsCommonRenderablePropertyFrame_loadObject(space, renderable){
      var o = this;
      var material = renderable.material();
      var resource = renderable.renderable().resource();
      o._activeRenderable = renderable;
      o._activeMaterial = material;
      o._controlGuid.set(resource.guid());
      o._controlCode.set(resource.code());
      o._controlLabel.set(resource.label());
      o._frameRenderable.loadObject(space, renderable);
      o._frameMaterial1.loadObject(space, material);
      o._frameMaterial2.loadObject(space, material);
   }
   MO.FDsCommonRenderablePropertyFrame_dispose = function FDsCommonRenderablePropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonShaderDialog = function FDsCommonShaderDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.common.dialog.ShaderDialog';
      o._displayModeCd        = null;
      o._controlLayerLabel    = null;
      o._controlDisplayLabel  = null;
      o._controlCode          = null;
      o._controlLabel         = null;
      o._controlTemplateCode  = null;
      o._controlConfirmButton = null;
      o._controlCancelButton  = null;
      o.onBuilded             = FDsCommonShaderDialog_onBuilded;
      o.onConfirmLoad         = FDsCommonShaderDialog_onConfirmLoad;
      o.onConfirmClick        = FDsCommonShaderDialog_onConfirmClick;
      o.onCancelClick         = FDsCommonShaderDialog_onCancelClick;
      o.construct             = FDsCommonShaderDialog_construct;
      o.setSpace              = FDsCommonShaderDialog_setSpace;
      o.setDisplayLabel       = FDsCommonShaderDialog_setDisplayLabel;
      o.setVertexSource       = FDsCommonShaderDialog_setVertexSource;
      o.setFragmentSource     = FDsCommonShaderDialog_setFragmentSource;
      o.dispose               = FDsCommonShaderDialog_dispose;
      return o;
   }
   MO.FDsCommonShaderDialog_onBuilded = function FDsCommonShaderDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlConfirm.addClickListener(o, o.onConfirmClick);
   }
   MO.FDsCommonShaderDialog_onConfirmClick = function FDsCommonShaderDialog_onConfirmClick(event){
      var o = this;
      o.hide();
   }
   MO.FDsCommonShaderDialog_construct = function FDsCommonShaderDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsCommonShaderDialog_setSpace = function FDsCommonShaderDialog_setSpace(space){
      var o = this;
   }
   MO.FDsCommonShaderDialog_setDisplayLabel = function FDsCommonShaderDialog_setDisplayLabel(label){
   }
   MO.FDsCommonShaderDialog_setVertexSource = function FDsCommonShaderDialog_setVertexSource(label){
   }
   MO.FDsCommonShaderDialog_setFragmentSource = function FDsCommonShaderDialog_setFragmentSource(label){
   }
   MO.FDsCommonShaderDialog_dispose = function FDsCommonShaderDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonSpacePropertyFrame = function FDsCommonSpacePropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._visible      = false;
      o._workspace    = null;
      o._activeSpace  = null;
      o._controlGuid  = null;
      o._controlCode  = null;
      o._controlLabel = null;
      o.onBuilded     = FDsCommonSpacePropertyFrame_onBuilded;
      o.onDataChanged = FDsCommonSpacePropertyFrame_onDataChanged;
      o.construct     = FDsCommonSpacePropertyFrame_construct;
      o.loadObject    = FDsCommonSpacePropertyFrame_loadObject;
      o.dispose       = FDsCommonSpacePropertyFrame_dispose;
      return o;
   }
   MO.FDsCommonSpacePropertyFrame_onBuilded = function FDsCommonSpacePropertyFrame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlLabel.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsCommonSpacePropertyFrame_onDataChanged = function FDsCommonSpacePropertyFrame_onDataChanged(p){
      var o = this;
      var space = o._activeSpace;
      var resource = space.resource();
      resource.setLabel(o._controlLabel.get());
   }
   MO.FDsCommonSpacePropertyFrame_construct = function FDsCommonSpacePropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsCommonSpacePropertyFrame_loadObject = function FDsCommonSpacePropertyFrame_loadObject(space){
      var o = this;
      var resource = space.resource();
      o._activeSpace = space;
      o._controlGuid.set(resource.guid());
      o._controlCode.set(resource.code());
      o._controlLabel.set(resource.label());
   }
   MO.FDsCommonSpacePropertyFrame_dispose = function FDsCommonSpacePropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonSpriteDialog = function FDsCommonSpriteDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.common.dialog.SpriteDialog';
      o._displayModeCd        = null;
      o._controlLayerLabel    = null;
      o._controlDisplayLabel  = null;
      o._controlCode          = null;
      o._controlLabel         = null;
      o._controlTemplateCode  = null;
      o._controlConfirmButton = null;
      o._controlCancelButton  = null;
      o.onBuilded             = FDsCommonSpriteDialog_onBuilded;
      o.onConfirmLoad         = FDsCommonSpriteDialog_onConfirmLoad;
      o.onConfirmClick        = FDsCommonSpriteDialog_onConfirmClick;
      o.onCancelClick         = FDsCommonSpriteDialog_onCancelClick;
      o.construct             = FDsCommonSpriteDialog_construct;
      o.setLayerLabel         = FDsCommonSpriteDialog_setLayerLabel;
      o.setDisplayLabel       = FDsCommonSpriteDialog_setDisplayLabel;
      o.setContentCode        = FDsCommonSpriteDialog_setContentCode;
      o.setContentLabel       = FDsCommonSpriteDialog_setContentLabel;
      o.dispose               = FDsCommonSpriteDialog_dispose;
      return o;
   }
   MO.FDsCommonSpriteDialog_onBuilded = function FDsCommonSpriteDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlLayerLabel.setEditAble(false);
      o._controlDisplayLabel.setEditAble(false);
      o._controlConfirmButton.addClickListener(o, o.onConfirmClick);
      o._controlCancelButton.addClickListener(o, o.onCancelClick);
   }
   MO.FDsCommonSpriteDialog_onConfirmLoad = function FDsCommonSpriteDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
      var catalog = o._frameSet._catalogContent;
      if(o._displayModeCd == EUiDataMode.Insert){
         if(o._parentGuid){
            var node = catalog.findByGuid(o._parentGuid);
            catalog.loadNode(node);
         }else{
            catalog.loadService();
         }
      }else{
         var label = o._controlLabel.get();
         var node = catalog.focusNode();
         node.setLabel(label);
      }
   }
   MO.FDsCommonSpriteDialog_onConfirmClick = function FDsCommonSpriteDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var xaction = new TXmlNode('Action');
      var xsprite = xaction.create('Sprite');
      xsprite.set('space_guid', o._spaceGuid);
      xsprite.set('layer_guid', o._layerGuid);
      xsprite.set('display_guid', o._displayGuid);
      xsprite.set('code', o._controlCode.get());
      xsprite.set('label', o._controlLabel.get());
      xsprite.set('template_guid', o._controlTemplateGuid.get());
      xsprite.set('template_code', o._controlTemplateCode.get());
      var console = MO.Console.find(FDrSceneConsole);
      var connection = null;
      connection = console.createSprite(xaction);
      connection.addLoadListener(o, o.onConfirmLoad);
   }
   MO.FDsCommonSpriteDialog_onCancelClick = function FDsCommonSpriteDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsCommonSpriteDialog_construct = function FDsCommonSpriteDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsCommonSpriteDialog_setLayerLabel = function FDsCommonSpriteDialog_setLayerLabel(label){
      this._controlLayerLabel.set(label);
   }
   MO.FDsCommonSpriteDialog_setDisplayLabel = function FDsCommonSpriteDialog_setDisplayLabel(label){
      this._controlDisplayLabel.set(label);
   }
   MO.FDsCommonSpriteDialog_setContentCode = function FDsCommonSpriteDialog_setContentCode(label){
      this._controlCode.set(label);
   }
   MO.FDsCommonSpriteDialog_setContentLabel = function FDsCommonSpriteDialog_setContentLabel(label){
      this._controlLabel.set(label);
   }
   MO.FDsCommonSpriteDialog_dispose = function FDsCommonSpriteDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonTechniquePropertyFrame = function FDsCommonTechniquePropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._visible              = false;
      o._workspace            = null;
      o._activeSpace          = null;
      o._activeTechnique      = null;
      o._controlTriangleCount = null;
      o._controlDrawCount     = null;
      o._thread               = null;
      o._interval             = 2000;
      o.onBuilded             = FDsCommonTechniquePropertyFrame_onBuilded;
      o.onDataChanged         = FDsCommonTechniquePropertyFrame_onDataChanged;
      o.onModeClick           = FDsCommonTechniquePropertyFrame_onModeClick;
      o.onRefresh             = FDsCommonTechniquePropertyFrame_onRefresh;
      o.construct             = FDsCommonTechniquePropertyFrame_construct;
      o.loadObject            = FDsCommonTechniquePropertyFrame_loadObject;
      o.dispose               = FDsCommonTechniquePropertyFrame_dispose;
      return o;
   }
   MO.FDsCommonTechniquePropertyFrame_onBuilded = function FDsCommonTechniquePropertyFrame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlRenderModes.addClickListener(o, o.onModeClick);
   }
   MO.FDsCommonTechniquePropertyFrame_onDataChanged = function FDsCommonTechniquePropertyFrame_onDataChanged(p){
      var o = this;
      var r = o._activeTechnique;
      r._code = o._controlCode.get();
      r._label = o._controlLabel.get();
      r._activeTechniqueCode = o._controlTechniqueCode.get();
   }
   MO.FDsCommonTechniquePropertyFrame_onModeClick = function FDsCommonTechniquePropertyFrame_onModeClick(ps, pi){
      var o = this;
      var m = pi.tag();
      o._activeTechnique._activeMode = m;
      o._activeSpace.dirty();
   }
   MO.FDsCommonTechniquePropertyFrame_onRefresh = function FDsCommonTechniquePropertyFrame_onRefresh(){
      var o = this;
      if(!o._statusVisible){
         return;
      }
      var s = o._activeSpace;
      var ss = s.statistics();
      var gs = s._graphicContext.statistics();
      o._controlFrameTick.set(ss._frame.toString());
      o._controlProcessTick.set(ss._frameProcess.toString() + ' | ' + ss._frameDrawRenderable.toString());
      o._controlDrawTick.set(ss._frameDraw.toString() + ' | ' + ss._frameDrawSort.toString());
      o._controlClearCount.set(gs._frameClearCount);
      o._controlModeInfo.set(
         'FIL:' + gs._frameFillModeCount +
         ' | DEP:' + gs._frameDepthModeCount +
         ' | CUL:' + gs._frameCullModeCount +
         ' | BLD:' + gs._frameBlendModeCount);
      o._controlProgramCount.set(gs._frameProgramCount);
      o._controlConstInfo.set(gs._frameConstCount + ' : length=' + gs._frameConstLength);
      o._controlBufferCount.set(gs._frameBufferCount);
      o._controlTextureCount.set(gs._frameTextureCount);
      o._controlTargetCount.set(gs._frameTargetCount);
      o._controlDrawInfo.set(gs._frameDrawCount + ' : triangle=' + gs._frameTriangleCount);
      o._controlProgramTotal.set(gs._programTotal);
      o._controlLayoutTotal.set(gs._layoutTotal);
      o._controlBufferInfo.set('Vertex:' + gs._vertexBufferTotal + ' Index:' + gs._indexBufferTotal);
      o._controlTextureInfo.set('Flat:' + gs._flatTextureTotal + ' Cube:' + gs._cubeTextureTotal);
      o._controlTargetTotal.set(gs._targetTotal);
   }
   MO.FDsCommonTechniquePropertyFrame_construct = function FDsCommonTechniquePropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
      var t = o._thread = MO.Class.create(FThread);
      t.setInterval(o._interval);
      t.addProcessListener(o, o.onRefresh);
      MO.Console.find(FThreadConsole).start(t);
   }
   MO.FDsCommonTechniquePropertyFrame_loadObject = function FDsCommonTechniquePropertyFrame_loadObject(space, technique){
      var o = this;
      o._activeSpace = space;
      o._activeTechnique = technique;
      var ctlModes = o._controlRenderModes;
      ctlModes.clear();
      var modes = technique.modes();
      var c = modes.count();
      for(var i = 0; i < c; i++){
         var mode = modes.getAt(i);
         var item = ctlModes.createItem(null, mode.code());
         item.setTag(mode);
         ctlModes.push(item);
      }
      o.onRefresh();
   }
   MO.FDsCommonTechniquePropertyFrame_dispose = function FDsCommonTechniquePropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsCommonTemplateDialog = function FDsCommonTemplateDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.common.dialog.TemplateDialog';
      o._displayModeCd        = null;
      o._controlLayerLabel    = null;
      o._controlDisplayLabel  = null;
      o._controlCode          = null;
      o._controlLabel         = null;
      o._controlTemplateCode  = null;
      o._controlConfirmButton = null;
      o._controlCancelButton  = null;
      o.onBuilded             = FDsCommonTemplateDialog_onBuilded;
      o.onConfirmLoad         = FDsCommonTemplateDialog_onConfirmLoad;
      o.onConfirmClick        = FDsCommonTemplateDialog_onConfirmClick;
      o.onCancelClick         = FDsCommonTemplateDialog_onCancelClick;
      o.construct             = FDsCommonTemplateDialog_construct;
      o.setSpace              = FDsCommonTemplateDialog_setSpace;
      o.setDisplayLabel       = FDsCommonTemplateDialog_setDisplayLabel;
      o.setContentCode        = FDsCommonTemplateDialog_setContentCode;
      o.setContentLabel       = FDsCommonTemplateDialog_setContentLabel;
      o.dispose               = FDsCommonTemplateDialog_dispose;
      return o;
   }
   MO.FDsCommonTemplateDialog_onBuilded = function FDsCommonTemplateDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlConfirm.addClickListener(o, o.onConfirmClick);
      o._controlCancel.addClickListener(o, o.onCancelClick);
   }
   MO.FDsCommonTemplateDialog_onConfirmLoad = function FDsCommonTemplateDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
   }
   MO.FDsCommonTemplateDialog_onConfirmClick = function FDsCommonTemplateDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var xaction = new TXmlNode('Action');
      var xsprite = xaction.create('Display');
      xsprite.set('space_guid', o._spaceGuid);
      xsprite.set('code', o._controlCode.get());
      xsprite.set('label', o._controlLabel.get());
      xsprite.set('model_guid', o._controlModelGuid.get());
      xsprite.set('model_code', o._controlModelCode.get());
      var connection = MO.Console.find(FDrTemplateConsole).createDisplay(xaction);
      connection.addLoadListener(o, o.onConfirmLoad);
   }
   MO.FDsCommonTemplateDialog_onCancelClick = function FDsCommonTemplateDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsCommonTemplateDialog_construct = function FDsCommonTemplateDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsCommonTemplateDialog_setSpace = function FDsCommonTemplateDialog_setSpace(space){
      var o = this;
      var resource = space.resource();
      o._controlSpaceGuid.set(resource.guid());
      o._controlSpaceLabel.set(resource.makeLabel());
   }
   MO.FDsCommonTemplateDialog_setDisplayLabel = function FDsCommonTemplateDialog_setDisplayLabel(label){
      this._controlDisplayLabel.set(label);
   }
   MO.FDsCommonTemplateDialog_setContentCode = function FDsCommonTemplateDialog_setContentCode(label){
      this._controlCode.set(label);
   }
   MO.FDsCommonTemplateDialog_setContentLabel = function FDsCommonTemplateDialog_setContentLabel(label){
      this._controlLabel.set(label);
   }
   MO.FDsCommonTemplateDialog_dispose = function FDsCommonTemplateDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsSolutionCatalogContent = function FDsSolutionCatalogContent(o){
      o = MO.Class.inherits(this, o, FDuiDataTreeView, MListenerSelected);
      o._iconView             = 'resource.solution.view';
      o._iconViewNot          = 'resource.solution.viewno';
      o._activeSpace          = null;
      o._materials            = null;
      o.onLoaded              = FDsSolutionCatalogContent_onLoaded;
      o.onBuild               = FDsSolutionCatalogContent_onBuild;
      o.onLoadDisplay         = FDsSolutionCatalogContent_onLoadDisplay;
      o.onNodeClick           = FDsSolutionCatalogContent_onNodeClick;
      o.onNodeViewClick       = FDsSolutionCatalogContent_onNodeViewClick;
      o.onNodeViewDoubleClick = FDsSolutionCatalogContent_onNodeViewDoubleClick;
      o.lsnsSelect            = null;
      o.construct             = FDsSolutionCatalogContent_construct;
      o.buildPrivate          = FDsSolutionCatalogContent_buildPrivate;
      o.buildRecommend        = FDsSolutionCatalogContent_buildRecommend;
      o.buildGroup            = FDsSolutionCatalogContent_buildGroup;
      o.buildCatalog          = FDsSolutionCatalogContent_buildCatalog;
      o.selectObject          = FDsSolutionCatalogContent_selectObject;
      o.showObject            = FDsSolutionCatalogContent_showObject;
      o.dispose               = FDsSolutionCatalogContent_dispose;
      return o;
   }
   MO.FDsSolutionCatalogContent_onLoaded = function FDsSolutionCatalogContent_onLoaded(p){
      var o = this;
      o.__base.FDuiDataTreeView.onLoaded.call(o, p);
      this.buildCatalog();
   }
   MO.FDsSolutionCatalogContent_onBuild = function FDsSolutionCatalogContent_onBuild(p){
      var o = this;
      o.__base.FDuiDataTreeView.onBuild.call(o, p);
      o.addNodeClickListener(o, o.onNodeClick);
      o.loadUrl('/cloud.describe.tree.ws?action=query&code=resource.solution');
   }
   MO.FDsSolutionCatalogContent_onLoadDisplay = function FDsSolutionCatalogContent_onLoadDisplay(p){
      var o = this;
      var n = p._linkNode;
      o.buildRecommend(n, p);
   }
   MO.FDsSolutionCatalogContent_onNodeClick = function FDsSolutionCatalogContent_onNodeClick(t, n){
      var o = this;
      var s = n.dataPropertyGet('linker');
      o.selectObject(s);
   }
   MO.FDsSolutionCatalogContent_onNodeViewClick = function FDsSolutionCatalogContent_onNodeViewClick(p){
      var o = this;
      var c = p.treeNodeCell;
      var s = p.treeNode.dataPropertyGet('linker');
      if(MO.Class.isClass(s, FDisplay)){
         if(p.ctrlKey){
            var ds = o._displays;
            for(var i = ds.count() - 1; i >= 0; i--){
               var nd = ds.get(i);
               var d = nd.dataPropertyGet('linker');
               d._visible = false;
               nd.cell('view').setIcon(o._iconViewNot);
            }
            s._visible = true;
            c.setIcon(o._iconView);
         }else{
            s._visible = !s._visible;
            c.setIcon(s._visible ? o._iconView : o._iconViewNot);
         }
      }
      if(MO.Class.isClass(s, FDrawable)){
         if(p.ctrlKey){
            var rs = o._renderables;
            for(var i = rs.count() - 1; i >= 0; i--){
               var nr = rs.get(i);
               var r = nr.dataPropertyGet('linker');
               r._visible = false;
               nr.cell('view').setIcon(o._iconViewNot);
            }
            s._visible = true;
            c.setIcon(o._iconView);
         }else{
            s._visible = !s._visible;
            c.setIcon(s._visible ? o._iconView : o._iconViewNot);
         }
      }
      if(MO.Class.isClass(s, FG3dMaterial)){
         if(p.ctrlKey){
            var ms = o._materials;
            for(var i = ms.count() - 1; i >= 0; i--){
               var nm = ms.get(i);
               var m = nm.dataPropertyGet('linker');
               m._visible = false;
               nm.cell('view').setIcon(o._iconViewNot);
            }
            s._visible = true;
            c.setIcon(o._iconView);
         }else{
            s._visible = !s._visible;
            c.setIcon(s._visible ? o._iconView : o._iconViewNot);
         }
      }
   }
   MO.FDsSolutionCatalogContent_onNodeViewDoubleClick = function FDsSolutionCatalogContent_onNodeViewDoubleClick(p){
      var o = this;
      var n = p.treeNode;
      var c = p.treeNodeCell;
      var s = n.dataPropertyGet('linker');
      if(MO.Class.isClass(s, FDisplay)){
         var s = o._displays;
         for(var i = s.count() - 1; i >= 0; i--){
            var n = s.get(i);
            var d = n.dataPropertyGet('linker');
            d._visible = true;
            n.cell('view').setIcon(o._iconView);
         }
      }
      if(MO.Class.isClass(s, FDrawable)){
         var s = o._renderables;
         for(var i = s.count() - 1; i >= 0; i--){
            var n = s.get(i);
            var r = n.dataPropertyGet('linker');
            r._visible = true;
            n.cell('view').setIcon(o._iconView);
         }
      }
      if(MO.Class.isClass(s, FG3dMaterial)){
         var s = o._materials;
         for(var i = s.count() - 1; i >= 0; i--){
            var n = s.get(i);
            var m = n.dataPropertyGet('linker');
            m._visible = true;
            n.cell('view').setIcon(o._iconView);
         }
      }
   }
   MO.FDsSolutionCatalogContent_construct = function FDsSolutionCatalogContent_construct(){
      var o = this;
      o.__base.FDuiDataTreeView.construct.call(o);
      o._renderables = new TObjects();
      o._materials = new TObjects();
   }
   MO.FDsSolutionCatalogContent_buildTechnique = function FDsSolutionCatalogContent_buildTechnique(n, p){
      var o = this;
      var nt = o.createNode();
      nt.setLabel('Technique');
      nt.setTypeCode('technique');
      nt.dataPropertySet('linker', p);
      n.appendNode(nt);
   }
   MO.FDsSolutionCatalogContent_buildPrivate = function FDsSolutionCatalogContent_buildPrivate(parent){
      var o = this;
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel('全部项目');
      parent.appendNode(node);
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel('收藏项目');
      parent.appendNode(node);
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel('最近使用');
      parent.appendNode(node);
   }
   MO.FDsSolutionCatalogContent_buildRecommend = function FDsSolutionCatalogContent_buildRecommend(parent){
      var o = this;
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel('本周排行');
      parent.appendNode(node);
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel('本月排行');
      parent.appendNode(node);
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel('全部排行');
      parent.appendNode(node);
   }
   MO.FDsSolutionCatalogContent_buildGroup = function FDsSolutionCatalogContent_buildGroup(parent){
      var o = this;
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel('汽车');
      parent.appendNode(node);
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel('教育');
      parent.appendNode(node);
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel('人物');
      parent.appendNode(node);
   }
   MO.FDsSolutionCatalogContent_buildCatalog = function FDsSolutionCatalogContent_buildCatalog(){
      var o = this;
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel('我的项目');
      o.appendNode(node);
      o.buildPrivate(node);
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel('推荐项目');
      o.appendNode(node);
      o.buildRecommend(node);
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel('项目分类');
      o.appendNode(node);
      o.buildGroup(node)
   }
   MO.FDsSolutionCatalogContent_selectObject = function FDsSolutionCatalogContent_selectObject(p){
      var o = this;
      if(p != null){
         o.processSelectedListener(p, true);
      }
   }
   MO.FDsSolutionCatalogContent_showObject = function FDsSolutionCatalogContent_showObject(p){
      var o = this;
      if(MO.Class.isClass(p, FDsSceneRenderable)){
         var s = o._renderables;
         var c = s.count();
         for(var i = 0; i < c; i++){
            var nr = s.getAt(i);
            var r = nr.dataPropertyGet('linker');
            if(r == p){
               o.processSelectedListener(p, false);
            }
         }
      }
   }
   MO.FDsSolutionCatalogContent_dispose = function FDsSolutionCatalogContent_dispose(){
      var o = this;
      o._displays = MO.Lang.Object.dispose(o._displays);
      o._renderables = MO.Lang.Object.dispose(o._renderables);
      o._materials = MO.Lang.Object.dispose(o._materials);
      o.__base.FDuiDataTreeView.dispose.call(o);
   }
}
with(MO){
   MO.FDsSolutionCatalogToolBar = function FDsSolutionCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName       = 'resource.private.solution.CatalogToolBar';
      o._canvasModeCd    = EDsCanvasMode.Drop;
      o._dropButton      = null;
      o._selectButton    = null;
      o._translateButton = null;
      o._rotationButton  = null;
      o._scaleButton     = null;
      o._lookFrontButton = null;
      o._lookUpButton    = null;
      o._lookLeftButton  = null;
      o._playButton      = null;
      o._viewButton      = null;
      o.onBuilded        = FDsSolutionCatalogToolBar_onBuilded;
      o.onModeClick      = FDsSolutionCatalogToolBar_onModeClick;
      o.onRotationClick  = FDsSolutionCatalogToolBar_onRotationClick;
      o.construct        = FDsSolutionCatalogToolBar_construct;
      o.dispose          = FDsSolutionCatalogToolBar_dispose;
      return o;
   }
   MO.FDsSolutionCatalogToolBar_onBuilded = function FDsSolutionCatalogToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
   }
   MO.FDsSolutionCatalogToolBar_onModeClick = function FDsSolutionCatalogToolBar_onModeClick(p){
      var o = this;
      o._canvasModeCd = p._canvasModeCd;
      o._workspace._canvas.switchMode(p._canvasModeCd);
   }
   MO.FDsSolutionCatalogToolBar_onRotationClick = function FDsSolutionCatalogToolBar_onRotationClick(p, v){
      var o = this;
      var c = o._workspace._canvas;
      c.switchRotation(v);
   }
   MO.FDsSolutionCatalogToolBar_construct = function FDsSolutionCatalogToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsSolutionCatalogToolBar_dispose = function FDsSolutionCatalogToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsSolutionFrameSet = function FDsSolutionFrameSet(o){
      o = MO.Class.inherits(this, o, FDuiFrameSet, MUiStorage);
      o._frameName            = 'resource.private.solution.FrameSet';
      o._storageCode          = o._frameName;
      o._styleCatalogGround   = MO.Class.register(o, new MO.AStyle('_styleCatalogGround', 'Catalog_Ground'));
      o._styleCatalogToolbar  = MO.Class.register(o, new MO.AStyle('_styleCatalogToolbar', 'Catalog_Toolbar'));
      o._styleSearchGround    = MO.Class.register(o, new MO.AStyle('_styleSearchGround', 'List_Ground'));
      o._styleSearchToolbar   = MO.Class.register(o, new MO.AStyle('_styleCatalogToolbar', 'List_Toolbar'));
      o._stylePreviewGround   = MO.Class.register(o, new MO.AStyle('_stylePreviewGround', 'Property_Ground'));
      o._stylePreviewToolbar  = MO.Class.register(o, new MO.AStyle('_stylePreviewToolbar', 'Property_Toolbar'));
      o._stylePropertyGround  = MO.Class.register(o, new MO.AStyle('_stylePropertyGround', 'Property_Ground'));
      o._pageSize             = 40;
      o._activeResourceCd     = 'private';
      o._activeProjectGuid    = null;
      o._frameCatalog         = null;
      o._frameCatalogToolbar  = null;
      o._frameCatalogContent  = null;
      o._frameList            = null;
      o._frameListToolbar     = null;
      o._frameListContent     = null;
      o._frameProperty        = null;
      o._framePropertyToolbar = null;
      o._framePropertyContent = null;
      o._propertyFrames       = null;
      o.onBuilded             = FDsSolutionFrameSet_onBuilded;
      o.construct             = FDsSolutionFrameSet_construct;
      o.findPropertyFrame     = FDsSolutionFrameSet_findPropertyFrame;
      o.selectObject          = FDsSolutionFrameSet_selectObject;
      o.switchContent         = FDsSolutionFrameSet_switchContent;
      o.load                  = FDsSolutionFrameSet_load;
      o.dispose               = FDsSolutionFrameSet_dispose;
      return o;
   }
   MO.FDsSolutionFrameSet_onBuilded = function FDsSolutionFrameSet_onBuilded(p){
      var o = this;
      o.__base.FDuiFrameSet.onBuilded.call(o, p);
      var frame = o._frameCatalog = o.searchControl('catalogFrame');
      frame._hPanel.className = o.styleName('Catalog_Ground');
      var frame = o._frameCatalogToolbar = o.searchControl('catalogToolbarFrame');
      frame._hPanel.className = o.styleName('Catalog_Toolbar');
      var frame = o._frameCatalogContent = o.searchControl('catalogContentFrame');
      var frame = o._frameList = o.searchControl('listFrame');
      frame._hPanel.className = o.styleName('List_Ground');
      var frame = o._frameListToolbar = o.searchControl('listToolbarFrame');
      frame._hPanel.className = o.styleName('List_Toolbar');
      var frame = o._frameListContent = o.searchControl('listContentFrame');
      var spliter = o._catalogSplitter = o.searchControl('catalogSpliter');
      spliter.setAlignCd(EUiAlign.Left);
      spliter.setSizeHtml(o._frameCatalog._hPanel);
      var control = o._catalogToolbar = MO.Class.create(FDsSolutionCatalogToolBar);
      control._frameSet = o;
      control.buildDefine(p);
      o._frameCatalogToolbar.push(control);
      var control = o._catalogContent = MO.Class.create(FDsSolutionCatalogContent);
      control._frameSet = o;
      control.build(p);
      o._frameCatalogContent.push(control);
      var control = o._listToolbar = MO.Class.create(FDsSolutionListToolBar);
      control._frameSet = o;
      control.buildDefine(p);
      o._frameListToolbar.push(control);
      var control = o._listContent = MO.Class.create(FDsSolutionListContent);
      control._frameSet = o;
      control.build(p);
      o._frameListContent.push(control);
      o.switchContent('private');
   }
   MO.FDsSolutionFrameSet_construct = function FDsSolutionFrameSet_construct(){
      var o = this;
      o.__base.FDuiFrameSet.construct.call(o);
      o._propertyFrames = new TDictionary();
   }
   MO.FDsSolutionFrameSet_findPropertyFrame = function FDsSolutionFrameSet_findPropertyFrame(p){
      var o = this;
      var f = o._propertyFrames.get(p);
      if(!f){
         var fc = MO.Console.find(FFrameConsole);
         f = fc.get(o, p, o._framePropertyProperty._hContainer);
         f._workspace = o;
         o._propertyFrames.set(p, f);
      }
      return f;
   }
   MO.FDsSolutionFrameSet_selectObject = function FDsSolutionFrameSet_selectObject(control){
      var o = this;
      var space = o._activeSpace;
      var fs = o._propertyFrames;
      var c = fs.count();
      for(var i = 0; i < c; i++){
         var f = fs.value(i);
         f.hide();
      }
      if(MO.Class.isClass(control, FDsSolutionListItem)){
         var f = o.findPropertyFrame(EDsFrame.SolutionProjectPropertyFrame);
         f.show();
         f.loadObject(control);
         o._activeProjectGuid = control._guid;
      }else{
         throw new TError('Unknown select object type. (value={1})', p);
      }
   }
   MO.FDsSolutionFrameSet_switchContent = function FDsSolutionFrameSet_switchContent(typeCd){
      var o = this;
      o._activeResourceCd = typeCd;
      o._listContent.serviceSearch(typeCd, '', o._pageSize, 0);
   }
   MO.FDsSolutionFrameSet_load = function FDsSolutionFrameSet_load(){
      var o = this;
      o._listContent.serviceSearch('private', '', o._pageSize, 0);
   }
   MO.FDsSolutionFrameSet_dispose = function FDsSolutionFrameSet_dispose(){
      var o = this;
      o.__base.FDuiFrameSet.dispose.call(o);
      o._propertyFrames.dispose();
      o._propertyFrames = null;
   }
}
with(MO){
   MO.FDsSolutionListContent = function FDsSolutionListContent(o){
      o = MO.Class.inherits(this, o, FDuiListView);
      o._activeControl    = null;
      o._activeGuid       = null;
      o._refreshButton    = null;
      o._saveButton       = null;
      o._runButton        = null;
      o.onBuilded         = FDsSolutionListContent_onBuilded;
      o.onServiceLoad     = FDsSolutionListContent_onServiceLoad;
      o.construct         = FDsSolutionListContent_construct;
      o.doClickItem       = FDsSolutionListContent_doClickItem;
      o.doDoubleClickItem = FDsSolutionListContent_doDoubleClickItem;
      o.serviceSearch     = FDsSolutionListContent_serviceSearch;
      o.serviceResearch   = FDsSolutionListContent_serviceResearch;
      o.dispose           = FDsSolutionListContent_dispose;
      return o;
   }
   MO.FDsSolutionListContent_onBuilded = function FDsSolutionListContent_onBuilded(p){
      var o = this;
      o.__base.FDuiListView.onBuilded.call(o, p);
   }
   MO.FDsSolutionListContent_onServiceLoad = function FDsSolutionListContent_onServiceLoad(p){
      var o = this;
      var xprojects = p.root.findNode('ProjectCollection');
      var pageSize = xprojects.getInteger('page_size');
      var pageCount = xprojects.getInteger('page_count');
      var page = xprojects.getInteger('page');
      o._frameSet._listToolbar.setNavigator(pageSize, pageCount, page);
      o.clear();
      var xnodes = xprojects.nodes();
      var count = xnodes.count();
      for(var i = 0; i < count; i++){
         var xnode = xnodes.getAt(i);
         if(xnode.isName('Project')){
            var item = o.createItem(FDsSolutionListItem);
            item.propertyLoad(xnode);
            item._typeCd = xnode.get('type');
            item._guid = xnode.get('guid');
            item.setLabel(MO.Lang.String.nvl(xnode.get('label'), xnode.get('code')));
            item.refreshStyle();
            o.push(item);
         }
      }
      RWindow.enable();
   }
   MO.FDsSolutionListContent_construct = function FDsSolutionListContent_construct(){
      var o = this;
      o.__base.FDuiListView.construct.call(o);
   }
   MO.FDsSolutionListContent_doClickItem = function FDsSolutionListContent_doClickItem(control){
      var o = this;
      o.__base.FDuiListView.doClickItem.call(o, control);
      o._activeControl = control;
      o._activeGuid = control._guid;
   }
   MO.FDsSolutionListContent_doDoubleClickItem = function FDsSolutionListContent_doDoubleClickItem(control){
      var o = this;
      o.__base.FDuiListView.doDoubleClickItem.call(o, control);
      var guid = control._guid;
      o._activeControl = control;
      o._activeGuid = guid;
      var workspace = o._frameSet._workspace;
      workspace.selectFrameSet(EDsFrameSet.PrivateProjectFrameSet, guid);
   }
   MO.FDsSolutionListContent_serviceSearch = function FDsSolutionListContent_serviceSearch(typeCd, serach, pageSize, page){
      var o = this;
      o._typeCd = typeCd;
      o._serach = serach;
      o._pageSize = pageSize;
      o._page = page;
      RWindow.disable();
      var connection = MO.Console.find(FDrProjectConsole).doList(serach, null, pageSize, page);
      connection.addLoadListener(o, o.onServiceLoad);
   }
   MO.FDsSolutionListContent_serviceResearch = function FDsSolutionListContent_serviceResearch(){
      var o = this;
      o.serviceSearch(o._typeCd, o._serach, o._pageSize, o._page);
   }
   MO.FDsSolutionListContent_dispose = function FDsSolutionListContent_dispose(){
      var o = this;
      o.__base.FDuiListView.dispose.call(o);
   }
}
with(MO){
   MO.FDsSolutionListItem = function FDsSolutionListItem(o){
      o = MO.Class.inherits(this, o, FDuiListViewItem);
      o.onBuild      = FDsSolutionListItem_onBuild;
      o.refreshStyle = FDsSolutionListItem_refreshStyle;
      return o;
   }
   MO.FDsSolutionListItem_onBuild = function FDsSolutionListItem_onBuild(p){
      var o = this;
      o.__base.FDuiListViewItem.onBuild.call(o, p);
      var h = o._hPanel;
      h.style.width = '200px';
      h.style.height = '150px';
   }
   MO.FDsSolutionListItem_refreshStyle = function FDsSolutionListItem_refreshStyle(){
      var o = this;
      var url = '/cloud.content.resource.preview.wv?type_cd=' + o._typeCd + '&guid=' + o._guid;
      o._hForm.style.backgroundImage = 'url("' + url + '")';
   }
}
with(MO){
   MO.FDsSolutionListToolBar = function FDsSolutionListToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName       = 'resource.private.solution.ListToolBar';
      o._pageCount       = 0;
      o._page            = 0;
      o._serach          = null;
      o._resourceTypeCd  = null;
      o._dropButton      = null;
      o._selectButton    = null;
      o._translateButton = null;
      o._rotationButton  = null;
      o._scaleButton     = null;
      o._lookFrontButton = null;
      o._lookUpButton    = null;
      o._lookLeftButton  = null;
      o._playButton      = null;
      o._viewButton      = null;
      o.onBuilded        = FDsSolutionListToolBar_onBuilded;
      o.onSearchClick    = FDsSolutionListToolBar_onSearchClick;
      o.onNavigatorClick = FDsSolutionListToolBar_onNavigatorClick;
      o.construct        = FDsSolutionListToolBar_construct;
      o.setNavigator     = FDsSolutionListToolBar_setNavigator;
      o.doNavigator      = FDsSolutionListToolBar_doNavigator;
      o.dispose          = FDsSolutionListToolBar_dispose;
      return o;
   }
   MO.FDsSolutionListToolBar_onBuilded = function FDsSolutionListToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlSearchEdit.addClickListener(o, o.onSearchClick);
      o._controlFirstButton.addClickListener(o, o.onNavigatorClick);
      o._controlPriorButton.addClickListener(o, o.onNavigatorClick);
      o._controlNextButton.addClickListener(o, o.onNavigatorClick);
      o._controlLastButton.addClickListener(o, o.onNavigatorClick);
   }
   MO.FDsSolutionListToolBar_onSearchClick = function FDsSolutionListToolBar_onSearchClick(p){
      this.doNavigator(0);
   }
   MO.FDsSolutionListToolBar_onNavigatorClick = function FDsSolutionListToolBar_onNavigatorClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      var page = o._page;
      switch(name){
         case 'firstButton':
            page = 0;
            break;
         case 'priorButton':
            page--;
            break;
         case 'nextButton':
            page++;
            break;
         case 'lastButton':
            page = o._pageCount;
            break;
      }
      o.doNavigator(page);
   }
   MO.FDsSolutionListToolBar_construct = function FDsSolutionListToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsSolutionListToolBar_setNavigator = function FDsSolutionListToolBar_setNavigator(pageSize, pageCount, page){
      var o = this;
      o._pageSize = pageSize;
      o._pageCount = pageCount;
      o._page = page;
      o._controlPageEdit.setText(page);
   }
   MO.FDsSolutionListToolBar_doNavigator = function FDsSolutionListToolBar_doNavigator(page){
      var o = this;
      page = RInteger.toRange(page, 0, o._pageCount);
      var search = o._controlSearchEdit.text();
      var typeCd = o._frameSet._resourceTypeCd;
      if((o._resourceTypeCd != typeCd) || (o._serach != search) || (o._page != page)){
         o._frameSet._searchContent.serviceSearch(typeCd, search, o._pageSize, page)
      }
      o._resourceTypeCd = typeCd;
      o._serach = search;
   }
   MO.FDsSolutionListToolBar_dispose = function FDsSolutionListToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsSolutionMenuBar = function FDsSolutionMenuBar(o){
      o = MO.Class.inherits(this, o, FDuiMenuBar);
      o._frameName      = 'resource.private.solution.MenuBar';
      o._refreshButton  = null;
      o._saveButton     = null;
      o._runButton      = null;
      o.onBuilded       = FDsSolutionMenuBar_onBuilded;
      o.onCreateClick   = FDsSolutionMenuBar_onCreateClick;
      o.onDeleteLoad    = FDsSolutionMenuBar_onDeleteLoad;
      o.onDeleteExecute = FDsSolutionMenuBar_onDeleteExecute;
      o.onDeleteClick   = FDsSolutionMenuBar_onDeleteClick;
      o.construct       = FDsSolutionMenuBar_construct;
      o.dispose         = FDsSolutionMenuBar_dispose;
      return o;
   }
   MO.FDsSolutionMenuBar_onBuilded = function FDsSolutionMenuBar_onBuilded(p){
      var o = this;
      o.__base.FDuiMenuBar.onBuilded.call(o, p);
      o._controlCreateButton.addClickListener(o, o.onCreateClick);
      o._controlDeleteButton.addClickListener(o, o.onDeleteClick);
   }
   MO.FDsSolutionMenuBar_onCreateClick = function FDsSolutionMenuBar_onCreateClick(event){
      var o = this;
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsSolutionProjectDialog);
      dialog._frameSet = o._frameSet;
      dialog._workspace = o._workspace;
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsSolutionMenuBar_onDeleteLoad = function FDsSolutionMenuBar_onDeleteLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      var frame = o._frameSet._listContent;
      frame.serviceResearch();
   }
   MO.FDsSolutionMenuBar_onDeleteExecute = function FDsSolutionMenuBar_onDeleteExecute(event){
      var o = this;
      if(event.resultCd != EResult.Success){
         MO.Console.find(FDuiDesktopConsole).hide();
         return
      }
      var listContent = o._frameSet._listContent;
      var guid = listContent._activeGuid;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = MO.Console.find(FDrProjectConsole).doDelete(guid);
      connection.addLoadListener(o, o.onDeleteLoad);
   }
   MO.FDsSolutionMenuBar_onDeleteClick = function FDsSolutionMenuBar_onDeleteClick(event){
      var o = this;
      var item = o._frameSet._listContent.focusItem();
      if(!item){
         return alert('请选中后再点击删除');
      }
      var dialog = MO.Console.find(FDuiMessageConsole).showConfirm('请确认是否删除当前项目？');
      dialog.addResultListener(o, o.onDeleteExecute);
   }
   MO.FDsSolutionMenuBar_construct = function FDsSolutionMenuBar_construct(){
      var o = this;
      o.__base.FDuiMenuBar.construct.call(o);
   }
   MO.FDsSolutionMenuBar_dispose = function FDsSolutionMenuBar_dispose(){
      var o = this;
      o.__base.FDuiMenuBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsSolutionProjectDialog = function FDsSolutionProjectDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.private.solution.ProjectDialog';
      o._resourceTypeCd       = 'private';
      o._controlPrivateButton = null;
      o._controlTeamButton    = null;
      o._controlShareButton   = null;
      o.onBuilded             = FDsSolutionProjectDialog_onBuilded;
      o.onConfirmLoad         = FDsSolutionProjectDialog_onConfirmLoad;
      o.onConfirmClick        = FDsSolutionProjectDialog_onConfirmClick;
      o.onCancelClick         = FDsSolutionProjectDialog_onCancelClick;
      o.construct             = FDsSolutionProjectDialog_construct;
      o.dispose               = FDsSolutionProjectDialog_dispose;
      return o;
   }
   MO.FDsSolutionProjectDialog_onBuilded = function FDsSolutionProjectDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlConfirmButton.addClickListener(o, o.onConfirmClick);
      o._controlCancelButton.addClickListener(o, o.onCancelClick);
   }
   MO.FDsSolutionProjectDialog_onConfirmLoad = function FDsSolutionProjectDialog_onConfirmLoad(event){
      var o = this;
      var frame = o._frameSet._listContent;
      frame.serviceResearch();
      o.hide();
      RWindow.enable();
   }
   MO.FDsSolutionProjectDialog_onConfirmClick = function FDsSolutionProjectDialog_onConfirmClick(event){
      var o = this;
      RWindow.disable();
      var code = o._controlCode.get();
      var label = o._controlLabel.get();
      var project = MO.Class.create(FDrProject);
      project.setCode(code);
      project.setLabel(label);
      var connection = MO.Console.find(FDrProjectConsole).doCreate(project);
      connection.addLoadListener(o, o.onConfirmLoad);
   }
   MO.FDsSolutionProjectDialog_onCancelClick = function FDsSolutionProjectDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsSolutionProjectDialog_construct = function FDsSolutionProjectDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsSolutionProjectDialog_dispose = function FDsSolutionProjectDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsSolutionProjectProperty = function FDsSolutionProjectProperty(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._visible          = false;
      o._workspace        = null;
      o._activeSpace      = null;
      o._activeCamera     = null;
      o._controlGuid      = null;
      o._controlCode      = null;
      o._controlLabel     = null;
      o._controlPosition  = null;
      o._controlDirection = null;
      o.onBuilded         = FDsSolutionProjectProperty_onBuilded;
      o.onDataChanged     = FDsSolutionProjectProperty_onDataChanged;
      o.onLoadProject     = FDsSolutionProjectProperty_onLoadProject;
      o.construct         = FDsSolutionProjectProperty_construct;
      o.loadObject        = FDsSolutionProjectProperty_loadObject;
      o.dispose           = FDsSolutionProjectProperty_dispose;
      return o;
   }
   MO.FDsSolutionProjectProperty_onBuilded = function FDsSolutionProjectProperty_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
   }
   MO.FDsSolutionProjectProperty_onDataChanged = function FDsSolutionProjectProperty_onDataChanged(p){
      var o = this;
      var camera = o._activeCamera;
      var resource = camera.resource();
      resource.position().assign(o._controlPosition.get());
      resource.direction().assign(o._controlDirection.get());
      camera.position().assign(resource.position());
      camera.direction().assign(resource.direction());
      camera.update();
   }
   MO.FDsSolutionProjectProperty_onLoadProject = function FDsSolutionProjectProperty_onLoadProject(event){
      var o = this;
      var xproject = event.root.findNode('Project');
      o._controlCode.set(xproject.get('code'));
      o._controlLabel.set(xproject.get('label'));
   }
   MO.FDsSolutionProjectProperty_construct = function FDsSolutionProjectProperty_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsSolutionProjectProperty_loadObject = function FDsSolutionProjectProperty_loadObject(control){
      var o = this;
      var guid = control._guid;
      o._controlGuid.set(guid);
      var connection = MO.Console.find(FDrProjectConsole).doQuery(guid);
      connection.addLoadListener(o, o.onLoadProject);
   }
   MO.FDsSolutionProjectProperty_dispose = function FDsSolutionProjectProperty_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsSolutionPropertyContent = function FDsSolutionPropertyContent(o){
      o = MO.Class.inherits(this, o, FDsCanvas);
      o._activeSpace         = null;
      o._canvasModeCd        = EDsCanvasMode.Drop;
      o._canvasMoveCd        = EDsCanvasDrag.Unknown;
      o._optionRotation      = false;
      o._rotation            = null;
      o._capturePosition     = null;
      o._captureMatrix       = null;
      o._captureRotation     = null;
      o._dimensional         = null;
      o._selectObject        = null;
      o._selectBoundBox      = null;
      o._selectRenderables   = null;
      o._cameraMoveRate      = 8;
      o._cameraKeyRotation   = 3;
      o._cameraMouseRotation = 0.005;
      o._templateMatrix      = null;
      o._templateRenderable  = null;
      o._templateFace        = null;
      o._templateTranslation = null;
      o._templateRotation    = null;
      o._templateScale       = null;
      o._templateViewScale   = 0.05;
      o.onBuild              = FDsSolutionPropertyContent_onBuild;
      o.onMouseCaptureStart  = FDsSolutionPropertyContent_onMouseCaptureStart;
      o.onMouseCapture       = FDsSolutionPropertyContent_onMouseCapture;
      o.onMouseCaptureStop   = FDsSolutionPropertyContent_onMouseCaptureStop;
      o.onEnterFrame         = FDsSolutionPropertyContent_onEnterFrame;
      o.onMeshLoad           = FDsSolutionPropertyContent_onMeshLoad;
      o.oeResize             = FDsSolutionPropertyContent_oeResize;
      o.oeRefresh            = FDsSolutionPropertyContent_oeRefresh;
      o.construct            = FDsSolutionPropertyContent_construct;
      o.innerSelectDisplay   = FDsSolutionPropertyContent_innerSelectDisplay;
      o.innerSelectLayer     = FDsSolutionPropertyContent_innerSelectLayer;
      o.switchRotation       = FDsSolutionPropertyContent_switchRotation;
      o.reloadRegion         = FDsSolutionPropertyContent_reloadRegion;
      o.loadMeshByGuid       = FDsSolutionPropertyContent_loadMeshByGuid;
      o.loadMeshByCode       = FDsSolutionPropertyContent_loadMeshByCode;
      o.dispose              = FDsSolutionPropertyContent_dispose;
      return o;
   }
   MO.FDsSolutionPropertyContent_onBuild = function FDsSolutionPropertyContent_onBuild(p){
      var o = this;
      o.__base.FDsCanvas.onBuild.call(o, p);
   }
   MO.FDsSolutionPropertyContent_onMouseCaptureStart = function FDsSolutionPropertyContent_onMouseCaptureStart(p){
      var o = this;
      var s = o._activeSpace;
      if(!s){
         return;
      }
      var r = o._activeSpace.region();
      var st = MO.Console.find(FG3dTechniqueConsole).find(o._graphicContext, FG3dSelectTechnique);
      var r = st.test(r, p.offsetX, p.offsetY);
      o.selectRenderable(r);
      o._capturePosition.set(p.clientX, p.clientY);
      o._captureRotation.assign(s.camera()._rotation);
      if(r){
         var d = r.display();
         o._captureMatrix.assign(d.matrix());
      }
      o._templateMatrix.identity();
      if(o._templateFace){
         o._templateFaceMatrix.assign(o._templateFace.matrix());
         var rs = o._selectRenderables;
         for(var i = rs.count() - 1; i >= 0; i--){
            var r = rs.getAt(i);
            if(!r._dragMatrix){
               r._dragMatrix = new MO.SMatrix3d();
            }
            r._dragMatrix.assign(r.matrix());
         }
      }
      RHtml.cursorSet(o._hPanel, EUiCursor.Pointer);
   }
   MO.FDsSolutionPropertyContent_onMouseCapture = function FDsSolutionPropertyContent_onMouseCapture(p){
      var o = this;
      var s = o._activeSpace;
      if(!s){
         return;
      }
      var cx = p.clientX - o._capturePosition.x;
      var cy = p.clientY - o._capturePosition.y;
      var mc = o._canvasModeCd;
      var mv = o._canvasMoveCd;
      var cm = o._captureMatrix;
      var sm = null;
      var tf = o._templateFace;
      var tm = o._templateMatrix;
      switch(mc){
         case EDsCanvasMode.Drop:
            var c = o._activeSpace.camera();
            var r = c.rotation();
            var cr = o._captureRotation;
            r.x = cr.x - cy * o._cameraMouseRotation;
            r.y = cr.y - cx * o._cameraMouseRotation;
            break;
         case EDsCanvasMode.Select:
            break;
         case EDsCanvasMode.Translate:
            if(tf){
               if(mv == EDsCanvasDrag.X){
                  tm.tx = cx / 10;
               }else if(mv == EDsCanvasDrag.Y){
                  tm.ty = -cy / 10;
               }else if(mv == EDsCanvasDrag.Z){
                  tm.tz = cx / 10;
               }
            }
            break;
         case EDsCanvasMode.Rotation:
            if(tf){
               if(mv == EDsCanvasDrag.X){
                  tm.rx = cx / 10;
               }else if(mv == EDsCanvasDrag.Y){
                  tm.ry = -cy / 10;
               }else if(mv == EDsCanvasDrag.Z){
                  tm.rz = cx / 10;
               }
            }
            break;
         case EDsCanvasMode.Scale:
            if(tf){
               if(mv == EDsCanvasDrag.X){
                  tm.sx = cx / 10;
               }else if(mv == EDsCanvasDrag.Y){
                  tm.sy = -cy / 10;
               }else if(mv == EDsCanvasDrag.Z){
                  tm.sz = cx / 10;
               }else if(mv == EDsCanvasDrag.All){
                  tm.sx = cx / 10;
                  tm.sy = cx / 10;
                  tm.sz = cx / 10;
               }
            }
            break;
      }
      if(tf){
         tf.matrix().merge(o._templateFaceMatrix, tm);
         var rs = o._selectRenderables;
         for(var i = rs.count() - 1; i >= 0; i--){
            var r = rs.getAt(i);
            r._matrix.merge(r._dragMatrix, tm);
         }
      }
   }
   MO.FDsSolutionPropertyContent_onMouseCaptureStop = function FDsSolutionPropertyContent_onMouseCaptureStop(p){
      var o = this;
      RHtml.cursorSet(o._hPanel, EUiCursor.Auto);
   }
   MO.FDsSolutionPropertyContent_onEnterFrame = function FDsSolutionPropertyContent_onEnterFrame(){
      var o = this;
      var s = o._activeSpace;
      if(!s){
         return;
      }
      var st = s.timer();
      var ss = st.spanSecond();
      var c = s.camera();
      var d = o._cameraMoveRate * ss;
      var r = o._cameraKeyRotation * ss;
      var kf = RKeyboard.isPress(EStageKey.Forward);
      var kb = RKeyboard.isPress(EStageKey.Back);
      if(kf && !kb){
         c.doWalk(d);
      }
      if(!kf && kb){
         c.doWalk(-d);
      }
      var kq = RKeyboard.isPress(EStageKey.Up);
      var ke = RKeyboard.isPress(EStageKey.Down);
      if(kq && !ke){
         c.doFly(d);
      }
      if(!kq && ke){
         c.doFly(-d);
      }
      var ka = RKeyboard.isPress(EStageKey.RotationLeft);
      var kd = RKeyboard.isPress(EStageKey.RotationRight);
      if(ka && !kd){
         c.doYaw(r);
      }
      if(!ka && kd){
         c.doYaw(-r);
      }
      var kz = RKeyboard.isPress(EStageKey.RotationUp);
      var kw = RKeyboard.isPress(EStageKey.RotationDown);
      if(kz && !kw){
         c.doPitch(r);
      }
      if(!kz && kw){
         c.doPitch(-r);
      }
      c.update();
      if(o._optionRotation){
         var r = o._rotation;
         var display = o._activeSpace._display;
         var matrix = display.matrix();
         matrix.setRotation(matrix.rx, matrix.ry + r.y, matrix.rz);
         matrix.update();
         r.y = 0.01;
      }
   }
   MO.FDsSolutionPropertyContent_onMeshLoad = function FDsSolutionPropertyContent_onMeshLoad(p){
      var o = this;
      var m = o._activeSpace;
      var g = m.region();
      var rc = g.camera();
      rc.setPosition(0, 3, -10);
      rc.lookAt(0, 3, 0);
      rc.update();
      var h = o._hPanel;
      var rp = rc.projection();
      rp.size().set(h.width, h.height);
      rp._angle = 45;
      rp.update();
      var l = g.directionalLight();
      var lc = l.camera();
      lc.setPosition(10, 10, 0);
      lc.lookAt(0, 0, 0);
      lc.update();
      o.processLoadListener(o);
   }
   MO.FDsSolutionPropertyContent_oeResize = function FDsSolutionPropertyContent_oeResize(p){
      var o = this;
      o.__base.FDsCanvas.oeResize.call(o, p);
      var hp = o._hPanel;
      var w = hp.offsetWidth;
      var h = hp.offsetHeight;
      var s = o._activeSpace;
      if(s){
         var cp = s.camera().projection();
         cp.size().set(w, h);
         cp.update();
      }
      return EEventStatus.Stop;
   }
   MO.FDsSolutionPropertyContent_oeRefresh = function FDsSolutionPropertyContent_oeRefresh(p){
      return EEventStatus.Stop;
   }
   MO.FDsSolutionPropertyContent_construct = function FDsSolutionPropertyContent_construct(){
      var o = this;
      o.__base.FDsCanvas.construct.call(o);
      o._capturePosition = new MO.SPoint2();
      o._captureMatrix = new MO.SMatrix3d();
      o._templateMatrix = new MO.SMatrix3d();
      o._templateFaceMatrix = new MO.SMatrix3d();
      o._rotation = new MO.SVector3();
      o._captureRotation = new MO.SVector3();
      o._selectRenderables = new TObjects();
   }
   MO.FDsSolutionPropertyContent_innerSelectDisplay = function FDsSolutionPropertyContent_innerSelectDisplay(p){
      var o = this;
      var s = p.renderables();
      var c = s.count();
      for(var i = 0; i < c; i++){
         var r = s.getAt(i);
         if(MO.Class.isClass(r, FDsSceneRenderable)){
            o._selectRenderables.push(r);
            r.showBoundBox();
         }
      }
   }
   MO.FDsSolutionPropertyContent_innerSelectLayer = function FDsSolutionPropertyContent_innerSelectLayer(p){
      var o = this;
      var s = p.displays();
      var c = s.count();
      for(var i = 0; i < c; i++){
         var d = s.getAt(i);
         o.innerSelectDisplay(d)
      }
   }
   MO.FDsSolutionPropertyContent_switchMode = function FDsSolutionPropertyContent_switchMode(p){
      var o = this;
      o._canvasModeCd = p;
   }
   MO.FDsSolutionPropertyContent_switchRotation = function FDsSolutionPropertyContent_switchRotation(p){
      this._optionRotation = p;
   }
   MO.FDsSolutionPropertyContent_reloadRegion = function FDsSolutionPropertyContent_reloadRegion(region){
      var o = this;
      var resource = region.resource();
      o._cameraMoveRate = resource.moveSpeed();
      o._cameraKeyRotation = resource.rotationKeySpeed();
      o._cameraMouseRotation = resource.rotationMouseSpeed();
   }
   MO.FDsSolutionPropertyContent_loadMeshByGuid = function FDsSolutionPropertyContent_loadMeshByGuid(p){
      var o = this;
      var rmc = MO.Console.find(FE3dMeshConsole);
      if(o._activeSpace != null){
         rmc.free(o._activeSpace);
      }
      var space = o._activeSpace = rmc.allocByGuid(o, p);
      space.addLoadListener(o, o.onMeshLoad);
      space._layer.pushRenderable(o._dimensional);
      RStage.register('mesh3d', space);
   }
   MO.FDsSolutionPropertyContent_loadMeshByCode = function FDsSolutionPropertyContent_loadMeshByCode(p){
      var o = this;
      var rmc = MO.Console.find(FE3dMeshConsole);
      if(o._activeSpace != null){
         rmc.free(o._activeSpace);
      }
      var space = o._activeSpace = rmc.allocByCode(o, p);
      space.addLoadListener(o, o.onMeshLoad);
      space._layer.pushRenderable(o._dimensional);
      RStage.register('mesh3d', space);
   }
   MO.FDsSolutionPropertyContent_dispose = function FDsSolutionPropertyContent_dispose(){
      var o = this;
      o._rotation = MO.Lang.Object.dispose(o._rotation);
      o.__base.FDsCanvas.dispose.call(o);
   }
}
with(MO){
   MO.FDsSolutionPropertyToolBar = function FDsSolutionPropertyToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName           = 'resource.solution.PropertyToolBar';
      o._controlInsertButton = null;
      o._controlUpdateButton = null;
      o._controlDeleteButton = null;
      o.onBuilded            = FDsSolutionPropertyToolBar_onBuilded;
      o.onUpdateClick        = FDsSolutionPropertyToolBar_onUpdateClick;
      o.construct            = FDsSolutionPropertyToolBar_construct;
      o.dispose              = FDsSolutionPropertyToolBar_dispose;
      return o;
   }
   MO.FDsSolutionPropertyToolBar_onBuilded = function FDsSolutionPropertyToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlUpdateButton.addClickListener(o, o.onUpdateClick);
   }
   MO.FDsSolutionPropertyToolBar_onUpdateClick = function FDsSolutionPropertyToolBar_onUpdateClick(event){
      var o = this;
      var guid = o._workspace._activeProjectGuid;
      window.location = 'Project.wa?do=detail&guid=' + guid;
   }
   MO.FDsSolutionPropertyToolBar_construct = function FDsSolutionPropertyToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsSolutionPropertyToolBar_dispose = function FDsSolutionPropertyToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectCanvasContent = function FDsProjectCanvasContent(o){
      o = MO.Class.inherits(this, o, FDuiListView);
      o._refreshButton = null;
      o._saveButton    = null;
      o._runButton     = null;
      o.onBuilded      = FDsProjectCanvasContent_onBuilded;
      o.onServiceLoad  = FDsProjectCanvasContent_onServiceLoad;
      o.construct      = FDsProjectCanvasContent_construct;
      o.clickItem      = FDsProjectCanvasContent_clickItem;
      o.serviceSearch  = FDsProjectCanvasContent_serviceSearch;
      o.dispose        = FDsProjectCanvasContent_dispose;
      return o;
   }
   MO.FDsProjectCanvasContent_onBuilded = function FDsProjectCanvasContent_onBuilded(p){
      var o = this;
      o.__base.FDuiListView.onBuilded.call(o, p);
   }
   MO.FDsProjectCanvasContent_onServiceLoad = function FDsProjectCanvasContent_onServiceLoad(p){
      var o = this;
      var xprojects = p.root.findNode('ProjectCollection');
      var pageSize = xprojects.getInteger('page_size');
      var pageCount = xprojects.getInteger('page_count');
      var page = xprojects.getInteger('page');
      o._workspace._searchToolbar.setNavigator(pageSize, pageCount, page);
      o.clear();
      var xnodes = xitems.nodes();
      var count = xnodes.count();
      for(var i = 0; i < count; i++){
         var xnode = xnodes.getAt(i);
         if(xnode.isName('Project')){
            var item = o.createItem(FDsProjectSearchItem);
            item.propertyLoad(xnode);
            item._typeCd = xnode.get('type');
            item._guid = xnode.get('guid');
            item.setLabel(MO.Lang.String.nvl(xnode.get('label'), xnode.get('code')));
            item.refreshStyle();
            o.push(item);
         }
      }
      RWindow.enable();
   }
   MO.FDsProjectCanvasContent_construct = function FDsProjectCanvasContent_construct(){
      var o = this;
      o.__base.FDuiListView.construct.call(o);
   }
   MO.FDsProjectCanvasContent_clickItem = function FDsProjectCanvasContent_clickItem(p){
      var o = this;
      var frame = o._workspace._previewContent;
      frame._activeItem = p;
      frame.loadMeshByGuid(p._guid);
   }
   MO.FDsProjectCanvasContent_serviceSearch = function FDsProjectCanvasContent_serviceSearch(typeCd, serach, pageSize, page){
      var o = this;
      RWindow.disable();
      var connection = MO.Console.find(FDrResourceConsole).fetch(typeCd, serach, null, pageSize, page);
      connection.addLoadListener(o, o.onServiceLoad);
   }
   MO.FDsProjectCanvasContent_dispose = function FDsProjectCanvasContent_dispose(){
      var o = this;
      o.__base.FDuiListView.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectCanvasPreviewToolBar = function FDsProjectCanvasPreviewToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName       = 'resource.project.CanvasPreviewToolBar';
      o._pageCount       = 0;
      o._page            = 0;
      o._serach          = null;
      o._resourceTypeCd  = null;
      o._dropButton      = null;
      o._selectButton    = null;
      o._translateButton = null;
      o._rotationButton  = null;
      o._scaleButton     = null;
      o._lookFrontButton = null;
      o._lookUpButton    = null;
      o._lookLeftButton  = null;
      o._playButton      = null;
      o._viewButton      = null;
      o.onBuilded        = FDsProjectCanvasPreviewToolBar_onBuilded;
      o.onSearchClick    = FDsProjectCanvasPreviewToolBar_onSearchClick;
      o.onNavigatorClick = FDsProjectCanvasPreviewToolBar_onNavigatorClick;
      o.construct        = FDsProjectCanvasPreviewToolBar_construct;
      o.setNavigator     = FDsProjectCanvasPreviewToolBar_setNavigator;
      o.doNavigator      = FDsProjectCanvasPreviewToolBar_doNavigator;
      o.dispose          = FDsProjectCanvasPreviewToolBar_dispose;
      return o;
   }
   MO.FDsProjectCanvasPreviewToolBar_onBuilded = function FDsProjectCanvasPreviewToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
   }
   MO.FDsProjectCanvasPreviewToolBar_onSearchClick = function FDsProjectCanvasPreviewToolBar_onSearchClick(p){
      this.doNavigator(0);
   }
   MO.FDsProjectCanvasPreviewToolBar_onNavigatorClick = function FDsProjectCanvasPreviewToolBar_onNavigatorClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      var page = o._page;
      switch(name){
         case 'firstButton':
            page = 0;
            break;
         case 'priorButton':
            page--;
            break;
         case 'nextButton':
            page++;
            break;
         case 'lastButton':
            page = o._pageCount;
            break;
      }
      o.doNavigator(page);
   }
   MO.FDsProjectCanvasPreviewToolBar_construct = function FDsProjectCanvasPreviewToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsProjectCanvasPreviewToolBar_setNavigator = function FDsProjectCanvasPreviewToolBar_setNavigator(pageSize, pageCount, page){
      var o = this;
      o._pageSize = pageSize;
      o._pageCount = pageCount;
      o._page = page;
      o._controlPageEdit.setText(page);
   }
   MO.FDsProjectCanvasPreviewToolBar_doNavigator = function FDsProjectCanvasPreviewToolBar_doNavigator(page){
      var o = this;
      page = RInteger.toRange(page, 0, o._pageCount);
      var search = o._controlSearchEdit.text();
      var typeCd = o._workspace._resourceTypeCd;
      if((o._resourceTypeCd != typeCd) || (o._serach != search) || (o._page != page)){
         o._workspace._searchContent.serviceSearch(typeCd, search, o._pageSize, page)
      }
      o._resourceTypeCd = typeCd;
      o._serach = search;
   }
   MO.FDsProjectCanvasPreviewToolBar_dispose = function FDsProjectCanvasPreviewToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectCanvasSpaceToolBar = function FDsProjectCanvasSpaceToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName       = 'resource.project.CanvasSpaceToolBar';
      o._pageCount       = 0;
      o._page            = 0;
      o._serach          = null;
      o._resourceTypeCd  = null;
      o._dropButton      = null;
      o._selectButton    = null;
      o._translateButton = null;
      o._rotationButton  = null;
      o._scaleButton     = null;
      o._lookFrontButton = null;
      o._lookUpButton    = null;
      o._lookLeftButton  = null;
      o._playButton      = null;
      o._viewButton      = null;
      o.onBuilded        = FDsProjectCanvasSpaceToolBar_onBuilded;
      o.onSearchClick    = FDsProjectCanvasSpaceToolBar_onSearchClick;
      o.onNavigatorClick = FDsProjectCanvasSpaceToolBar_onNavigatorClick;
      o.construct        = FDsProjectCanvasSpaceToolBar_construct;
      o.setNavigator     = FDsProjectCanvasSpaceToolBar_setNavigator;
      o.doNavigator      = FDsProjectCanvasSpaceToolBar_doNavigator;
      o.dispose          = FDsProjectCanvasSpaceToolBar_dispose;
      return o;
   }
   MO.FDsProjectCanvasSpaceToolBar_onBuilded = function FDsProjectCanvasSpaceToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
   }
   MO.FDsProjectCanvasSpaceToolBar_onSearchClick = function FDsProjectCanvasSpaceToolBar_onSearchClick(p){
      this.doNavigator(0);
   }
   MO.FDsProjectCanvasSpaceToolBar_onNavigatorClick = function FDsProjectCanvasSpaceToolBar_onNavigatorClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      var page = o._page;
      switch(name){
         case 'firstButton':
            page = 0;
            break;
         case 'priorButton':
            page--;
            break;
         case 'nextButton':
            page++;
            break;
         case 'lastButton':
            page = o._pageCount;
            break;
      }
      o.doNavigator(page);
   }
   MO.FDsProjectCanvasSpaceToolBar_construct = function FDsProjectCanvasSpaceToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsProjectCanvasSpaceToolBar_setNavigator = function FDsProjectCanvasSpaceToolBar_setNavigator(pageSize, pageCount, page){
      var o = this;
      o._pageSize = pageSize;
      o._pageCount = pageCount;
      o._page = page;
      o._controlPageEdit.setText(page);
   }
   MO.FDsProjectCanvasSpaceToolBar_doNavigator = function FDsProjectCanvasSpaceToolBar_doNavigator(page){
      var o = this;
      page = RInteger.toRange(page, 0, o._pageCount);
      var search = o._controlSearchEdit.text();
      var typeCd = o._workspace._resourceTypeCd;
      if((o._resourceTypeCd != typeCd) || (o._serach != search) || (o._page != page)){
         o._workspace._searchContent.serviceSearch(typeCd, search, o._pageSize, page)
      }
      o._resourceTypeCd = typeCd;
      o._serach = search;
   }
   MO.FDsProjectCanvasSpaceToolBar_dispose = function FDsProjectCanvasSpaceToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectCatalogContent = function FDsProjectCatalogContent(o){
      o = MO.Class.inherits(this, o, FDuiDataTreeView, MListenerSelected);
      o._iconView             = 'design3d.mesh.view';
      o._iconViewNot          = 'design3d.mesh.viewno';
      o._activeSpace          = null;
      o._materials            = null;
      o.onBuild               = FDsProjectCatalogContent_onBuild;
      o.onLoadDisplay         = FDsProjectCatalogContent_onLoadDisplay;
      o.onNodeClick           = FDsProjectCatalogContent_onNodeClick;
      o.onNodeViewClick       = FDsProjectCatalogContent_onNodeViewClick;
      o.onNodeViewDoubleClick = FDsProjectCatalogContent_onNodeViewDoubleClick;
      o.lsnsSelect            = null;
      o.construct             = FDsProjectCatalogContent_construct;
      o.buildTechnique        = FDsProjectCatalogContent_buildTechnique;
      o.buildRegion           = FDsProjectCatalogContent_buildRegion;
      o.buildRenderable       = FDsProjectCatalogContent_buildRenderable;
      o.buildDisplay          = FDsProjectCatalogContent_buildDisplay;
      o.buildSpace            = FDsProjectCatalogContent_buildSpace;
      o.selectObject          = FDsProjectCatalogContent_selectObject;
      o.showObject            = FDsProjectCatalogContent_showObject;
      o.dispose               = FDsProjectCatalogContent_dispose;
      return o;
   }
   MO.FDsProjectCatalogContent_onBuild = function FDsProjectCatalogContent_onBuild(p){
      var o = this;
      o.__base.FDuiDataTreeView.onBuild.call(o, p);
      o.lsnsClick.register(o, o.onNodeClick);
      o.loadUrl('/cloud.describe.tree.ws?action=query&code=resource.project');
   }
   MO.FDsProjectCatalogContent_onLoadDisplay = function FDsProjectCatalogContent_onLoadDisplay(p){
      var o = this;
      var n = p._linkNode;
      o.buildRenderable(n, p);
   }
   MO.FDsProjectCatalogContent_onNodeClick = function FDsProjectCatalogContent_onNodeClick(t, n){
      var o = this;
      var s = n.dataPropertyGet('linker');
      o.selectObject(s);
   }
   MO.FDsProjectCatalogContent_onNodeViewClick = function FDsProjectCatalogContent_onNodeViewClick(p){
      var o = this;
      var c = p.treeNodeCell;
      var s = p.treeNode.dataPropertyGet('linker');
      if(MO.Class.isClass(s, FDisplay)){
         if(p.ctrlKey){
            var ds = o._displays;
            for(var i = ds.count() - 1; i >= 0; i--){
               var nd = ds.get(i);
               var d = nd.dataPropertyGet('linker');
               d._visible = false;
               nd.cell('view').setIcon(o._iconViewNot);
            }
            s._visible = true;
            c.setIcon(o._iconView);
         }else{
            s._visible = !s._visible;
            c.setIcon(s._visible ? o._iconView : o._iconViewNot);
         }
      }
      if(MO.Class.isClass(s, FDrawable)){
         if(p.ctrlKey){
            var rs = o._renderables;
            for(var i = rs.count() - 1; i >= 0; i--){
               var nr = rs.get(i);
               var r = nr.dataPropertyGet('linker');
               r._visible = false;
               nr.cell('view').setIcon(o._iconViewNot);
            }
            s._visible = true;
            c.setIcon(o._iconView);
         }else{
            s._visible = !s._visible;
            c.setIcon(s._visible ? o._iconView : o._iconViewNot);
         }
      }
      if(MO.Class.isClass(s, FG3dMaterial)){
         if(p.ctrlKey){
            var ms = o._materials;
            for(var i = ms.count() - 1; i >= 0; i--){
               var nm = ms.get(i);
               var m = nm.dataPropertyGet('linker');
               m._visible = false;
               nm.cell('view').setIcon(o._iconViewNot);
            }
            s._visible = true;
            c.setIcon(o._iconView);
         }else{
            s._visible = !s._visible;
            c.setIcon(s._visible ? o._iconView : o._iconViewNot);
         }
      }
   }
   MO.FDsProjectCatalogContent_onNodeViewDoubleClick = function FDsProjectCatalogContent_onNodeViewDoubleClick(p){
      var o = this;
      var n = p.treeNode;
      var c = p.treeNodeCell;
      var s = n.dataPropertyGet('linker');
      if(MO.Class.isClass(s, FDisplay)){
         var s = o._displays;
         for(var i = s.count() - 1; i >= 0; i--){
            var n = s.get(i);
            var d = n.dataPropertyGet('linker');
            d._visible = true;
            n.cell('view').setIcon(o._iconView);
         }
      }
      if(MO.Class.isClass(s, FDrawable)){
         var s = o._renderables;
         for(var i = s.count() - 1; i >= 0; i--){
            var n = s.get(i);
            var r = n.dataPropertyGet('linker');
            r._visible = true;
            n.cell('view').setIcon(o._iconView);
         }
      }
      if(MO.Class.isClass(s, FG3dMaterial)){
         var s = o._materials;
         for(var i = s.count() - 1; i >= 0; i--){
            var n = s.get(i);
            var m = n.dataPropertyGet('linker');
            m._visible = true;
            n.cell('view').setIcon(o._iconView);
         }
      }
   }
   MO.FDsProjectCatalogContent_construct = function FDsProjectCatalogContent_construct(){
      var o = this;
      o.__base.FDuiDataTreeView.construct.call(o);
      o._renderables = new TObjects();
      o._materials = new TObjects();
   }
   MO.FDsProjectCatalogContent_buildTechnique = function FDsProjectCatalogContent_buildTechnique(n, p){
      var o = this;
      var nt = o.createNode();
      nt.setLabel('Technique');
      nt.setTypeCode('technique');
      nt.dataPropertySet('linker', p);
      n.appendNode(nt);
   }
   MO.FDsProjectCatalogContent_buildRegion = function FDsProjectCatalogContent_buildRegion(n, p){
      var o = this;
      var nr = o.createNode();
      nr.setLabel('Region');
      nr.setTypeCode('region');
      nr.dataPropertySet('linker', p);
      n.appendNode(nr);
      var nc = o.createNode();
      nc.setLabel('Camera');
      nc.setTypeCode('camera');
      nc.dataPropertySet('linker', p.camera());
      nr.appendNode(nc);
      var nl = o.createNode();
      nl.setLabel('Light');
      nl.setTypeCode('light');
      nl.dataPropertySet('linker', p.directionalLight());
      nr.appendNode(nl);
   }
   MO.FDsProjectCatalogContent_buildRenderable = function FDsProjectCatalogContent_buildRenderable(n, p){
      var o = this;
      var m = p._renderable._material;
      var dn = o.createNode();
      dn.setTypeCode('material');
      dn.setLabel('Material');
      dn.dataPropertySet('linker', m);
      o._materials.push(dn);
      n.appendNode(dn);
      var r = p._renderable;
      var dn = o.createNode();
      dn.setTypeCode('renderable');
      dn.setLabel('Renderable');
      dn.dataPropertySet('linker', r);
      o._renderables.push(dn);
      n.appendNode(dn);
   }
   MO.FDsProjectCatalogContent_buildDisplay = function FDsProjectCatalogContent_buildDisplay(n, p){
      var o = this;
      var node = o.createNode();
      node.setTypeCode('display');
      node.setLabel('Mesh');
      node.dataPropertySet('linker', p);
      n.appendNode(node);
      o.buildRenderable(node, p);
   }
   MO.FDsProjectCatalogContent_buildSpace = function FDsProjectCatalogContent_buildSpace(space){
      var o = this;
      var resource = space.resource();
      o._activeSpace = space;
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel(resource.code());
      node.setNote(resource.label());
      node.dataPropertySet('linker', space);
      o.appendNode(node);
      o.buildTechnique(node, space.technique())
      o.buildRegion(node, space.region());
      o.buildDisplay(node, space._display);
      node.click();
   }
   MO.FDsProjectCatalogContent_selectObject = function FDsProjectCatalogContent_selectObject(p){
      var o = this;
      if(p != null){
         o.processSelectedListener(p, true);
      }
   }
   MO.FDsProjectCatalogContent_showObject = function FDsProjectCatalogContent_showObject(p){
      var o = this;
      if(MO.Class.isClass(p, FDsSceneRenderable)){
         var s = o._renderables;
         var c = s.count();
         for(var i = 0; i < c; i++){
            var nr = s.getAt(i);
            var r = nr.dataPropertyGet('linker');
            if(r == p){
               o.processSelectedListener(p, false);
            }
         }
      }
   }
   MO.FDsProjectCatalogContent_dispose = function FDsProjectCatalogContent_dispose(){
      var o = this;
      o._displays = MO.Lang.Object.dispose(o._displays);
      o._renderables = MO.Lang.Object.dispose(o._renderables);
      o._materials = MO.Lang.Object.dispose(o._materials);
      o.__base.FDuiDataTreeView.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectCatalogToolBar = function FDsProjectCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName       = 'resource.project.CatalogToolBar';
      o._canvasModeCd    = EDsCanvasMode.Drop;
      o._dropButton      = null;
      o._selectButton    = null;
      o._translateButton = null;
      o._rotationButton  = null;
      o._scaleButton     = null;
      o._lookFrontButton = null;
      o._lookUpButton    = null;
      o._lookLeftButton  = null;
      o._playButton      = null;
      o._viewButton      = null;
      o.onBuilded        = FDsProjectCatalogToolBar_onBuilded;
      o.onModeClick      = FDsProjectCatalogToolBar_onModeClick;
      o.onRotationClick  = FDsProjectCatalogToolBar_onRotationClick;
      o.construct        = FDsProjectCatalogToolBar_construct;
      o.dispose          = FDsProjectCatalogToolBar_dispose;
      return o;
   }
   MO.FDsProjectCatalogToolBar_onBuilded = function FDsProjectCatalogToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
   }
   MO.FDsProjectCatalogToolBar_onModeClick = function FDsProjectCatalogToolBar_onModeClick(p){
      var o = this;
      o._canvasModeCd = p._canvasModeCd;
      o._workspace._canvas.switchMode(p._canvasModeCd);
   }
   MO.FDsProjectCatalogToolBar_onRotationClick = function FDsProjectCatalogToolBar_onRotationClick(p, v){
      var o = this;
      var c = o._workspace._canvas;
      c.switchRotation(v);
   }
   MO.FDsProjectCatalogToolBar_construct = function FDsProjectCatalogToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsProjectCatalogToolBar_dispose = function FDsProjectCatalogToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectFrameSet = function FDsProjectFrameSet(o){
      o = MO.Class.inherits(this, o, FDuiFrameSet);
      o._frameName            = 'resource.project.FrameSet';
      o._stylePageControl     = MO.Class.register(o, new MO.AStyle('_stylePageControl', 'PageControl'));
      o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleStatusbarGround = MO.Class.register(o, new MO.AStyle('_styleStatusbarGround', 'Statusbar_Ground'));
      o._styleCatalogGround   = MO.Class.register(o, new MO.AStyle('_styleCatalogGround', 'Catalog_Ground'));
      o._styleCatalogContent  = MO.Class.register(o, new MO.AStyle('_styleCatalogContent', 'Catalog_Content'));
      o._styleCanvasGround    = MO.Class.register(o, new MO.AStyle('_styleCanvasGround', 'Canvas_Ground'));
      o._styleCanvasContent   = MO.Class.register(o, new MO.AStyle('_styleCanvasContent', 'Canvas_Content'));
      o._stylePropertyGround  = MO.Class.register(o, new MO.AStyle('_stylePropertyGround', 'Property_Ground'));
      o._stylePropertyContent = MO.Class.register(o, new MO.AStyle('_stylePropertyContent', 'Property_Content'));
      o._activeSpace          = null;
      o._activeMesh           = null;
      o._framesetMain         = null;
      o._framesetBody         = null;
      o._frameToolBar         = null;
      o._frameBody            = null;
      o._frameProperty        = null;
      o._frameCatalog         = null;
      o._frameCanvas          = null;
      o._frameStatusBar       = null;
      o._propertyFrames       = null;
      o.onBuilded             = FDsProjectFrameSet_onBuilded;
      o.onMeshLoad            = FDsProjectFrameSet_onMeshLoad;
      o.onCatalogSelected     = FDsProjectFrameSet_onCatalogSelected;
      o.construct             = FDsProjectFrameSet_construct;
      o.findPropertyFrame     = FDsProjectFrameSet_findPropertyFrame;
      o.loadByGuid            = FDsProjectFrameSet_loadByGuid;
      o.dispose               = FDsProjectFrameSet_dispose;
      return o;
   }
   MO.FDsProjectFrameSet_onBuilded = function FDsProjectFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDuiFrameSet.onBuilded.call(o, event);
      var frame = o._frameCatalog = o.searchControl('catalogFrame');
      frame._hPanel.className = o.styleName('Catalog_Ground');
      var control = o._frameCatalogPageControl = o.searchControl('catalogPageControl');
      control._hPanel.className = o.styleName('PageControl');
      var frame = o._frameSceneListToolBar = o.searchControl('sceneListToolbarFrame');
      frame._hPanel.className = o.styleName('Toolbar_Ground');
      var frame = o._frameSceneListContent = o.searchControl('sceneListContentFrame');
      frame._hPanel.className = o.styleName('Catalog_Content');
      var frame = o._frameSceneCatalogToolBar = o.searchControl('sceneCatalogToolbarFrame');
      frame._hPanel.className = o.styleName('Toolbar_Ground');
      var frame = o._frameSceneCatalogContent = o.searchControl('sceneCatalogContentFrame');
      frame._hPanel.className = o.styleName('Catalog_Content');
      var frame = o._frameCanvas = o.searchControl('canvasFrame');
      frame._hPanel.className = o.styleName('Canvas_Ground');
      var control = o._frameCanvasPageControl = o.searchControl('canvasPageControl');
      control._hPanel.className = o.styleName('PageControl');
      var frame = o._frameCanvasSpaceToolBar = o.searchControl('canvasSpaceToolbarFrame');
      frame._hPanel.className = o.styleName('Toolbar_Ground');
      var frame = o._frameCanvasSpaceContent = o.searchControl('canvasSpaceContentFrame');
      frame._hPanel.className = o.styleName('Canvas_Content');
      var frame = o._frameCanvasPreviewToolBar = o.searchControl('canvasPreviewToolbarFrame');
      frame._hPanel.className = o.styleName('Toolbar_Ground');
      var frame = o._frameCanvasPreviewContent = o.searchControl('canvasPreviewContentFrame');
      frame._hPanel.className = o.styleName('Canvas_Content');
      var frame = o._frameProperty = o.searchControl('propertyFrame');
      frame._hPanel.className = o.styleName('Property_Ground');
      var control = o._framePropertyPageControl = o.searchControl('propertyPageControl');
      control._hPanel.className = o.styleName('PageControl');
      var frame = o._framePropertyAttributeToolBar = o.searchControl('propertyAttributeToolbarFrame');
      frame._hPanel.className = o.styleName('Toolbar_Ground');
      var frame = o._framePropertyAttributeContent = o.searchControl('propertyAttributeContentFrame');
      frame._hPanel.className = o.styleName('Property_Content');
      var f = o._catalogSplitter = o.searchControl('catalogSpliter');
      f.setAlignCd(EUiAlign.Left);
      f.setSizeHtml(o._frameCatalog._hPanel);
      var f = o._propertySpliter = o.searchControl('propertySpliter');
      f.setAlignCd(EUiAlign.Right);
      f.setSizeHtml(o._frameProperty._hPanel);
   }
   MO.FDsProjectFrameSet_onMeshLoad = function FDsProjectFrameSet_onMeshLoad(p){
      var o = this;
      o._activeSpace = p._activeSpace;
      o._catalog.buildSpace(o._activeSpace);
   }
   MO.FDsProjectFrameSet_onCatalogSelected = function FDsProjectFrameSet_onCatalogSelected(p, pc){
      var o = this;
      var space = o._activeSpace;
      var fs = o._propertyFrames;
      var c = fs.count();
      for(var i = 0; i < c; i++){
         var f = fs.value(i);
         f.hide();
      }
      if(MO.Class.isClass(p, FE3dStage)){
         var f = o.findPropertyFrame(EDsFrame.MeshSpacePropertyFrame);
         f.show();
         f.loadObject(space, space);
      }else if(MO.Class.isClass(p, FG3dTechnique)){
         var f = o.findPropertyFrame(EDsFrame.MeshTechniquePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dRegion)){
         var f = o.findPropertyFrame(EDsFrame.MeshRegionPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dCamera)){
         var f = o.findPropertyFrame(EDsFrame.MeshCameraPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dDirectionalLight)){
         var f = o.findPropertyFrame(EDsFrame.MeshLightPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshDisplay)){
         var f = o.findPropertyFrame(EDsFrame.MeshDisplayPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dMaterial)){
         var f = o.findPropertyFrame(EDsFrame.MeshMaterialPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshRenderable)){
         var f = o.findPropertyFrame(EDsFrame.MeshRenderablePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else{
         throw new TError('Unknown select object type. (value={1})', p);
      }
   }
   MO.FDsProjectFrameSet_construct = function FDsProjectFrameSet_construct(){
      var o = this;
      o.__base.FDuiFrameSet.construct.call(o);
      o._propertyFrames = new TDictionary();
   }
   MO.FDsProjectFrameSet_findPropertyFrame = function FDsProjectFrameSet_findPropertyFrame(p){
      var o = this;
      var f = o._propertyFrames.get(p);
      if(!f){
         var fc = MO.Console.find(FFrameConsole);
         f = fc.get(o, p, o._frameProperty._hContainer);
         f._workspace = o;
         o._propertyFrames.set(p, f);
      }
      return f;
   }
   MO.FDsProjectFrameSet_loadByGuid = function FDsProjectFrameSet_loadByGuid(guid){
      var o = this;
      o._activeGuid = guid;
      o._sceneListContent.serviceList(guid);
   }
   MO.FDsProjectFrameSet_dispose = function FDsProjectFrameSet_dispose(){
      var o = this;
      o.__base.FDuiFrameSet.dispose.call(o);
      o._propertyFrames.dispose();
      o._propertyFrames = null;
   }
}
with(MO){
   MO.FDsProjectMenuBar = function FDsProjectMenuBar(o){
      o = MO.Class.inherits(this, o, FDuiMenuBar);
      o._refreshButton = null;
      o._saveButton    = null;
      o._runButton     = null;
      o.onBuilded      = FDsProjectMenuBar_onBuilded;
      o.onSaveClick    = FDsProjectMenuBar_onSaveClick;
      o.construct      = FDsProjectMenuBar_construct;
      o.dispose        = FDsProjectMenuBar_dispose;
      return o;
   }
   MO.FDsProjectMenuBar_onBuilded = function FDsProjectMenuBar_onBuilded(p){
      var o = this;
      o.__base.FDuiMenuBar.onBuilded.call(o, p);
      o._controlSave.addClickListener(o, o.onSaveClick);
   }
   MO.FDsProjectMenuBar_onSaveClick = function FDsProjectMenuBar_onSaveClick(p){
      var o = this;
      var space = o._workspace._activeSpace;
      var resource = space.resource();
      var xconfig = new TXmlNode();
      resource.saveConfig(xconfig);
      MO.Console.find(FE3sMeshConsole).update(xconfig);
   }
   MO.FDsProjectMenuBar_construct = function FDsProjectMenuBar_construct(){
      var o = this;
      o.__base.FDuiMenuBar.construct.call(o);
   }
   MO.FDsProjectMenuBar_dispose = function FDsProjectMenuBar_dispose(){
      var o = this;
      o.__base.FDuiMenuBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectPropertyContent = function FDsProjectPropertyContent(o){
      o = MO.Class.inherits(this, o, FDsCanvas);
      o._activeSpace         = null;
      o._canvasModeCd        = EDsCanvasMode.Drop;
      o._canvasMoveCd        = EDsCanvasDrag.Unknown;
      o._optionRotation      = false;
      o._rotation            = null;
      o._capturePosition     = null;
      o._captureMatrix       = null;
      o._captureRotation     = null;
      o._dimensional         = null;
      o._selectObject        = null;
      o._selectBoundBox      = null;
      o._selectRenderables   = null;
      o._cameraMoveRate      = 8;
      o._cameraKeyRotation   = 3;
      o._cameraMouseRotation = 0.005;
      o._templateMatrix      = null;
      o._templateRenderable  = null;
      o._templateFace        = null;
      o._templateTranslation = null;
      o._templateRotation    = null;
      o._templateScale       = null;
      o._templateViewScale   = 0.05;
      o.onBuild              = FDsProjectPropertyContent_onBuild;
      o.onMouseCaptureStart  = FDsProjectPropertyContent_onMouseCaptureStart;
      o.onMouseCapture       = FDsProjectPropertyContent_onMouseCapture;
      o.onMouseCaptureStop   = FDsProjectPropertyContent_onMouseCaptureStop;
      o.onEnterFrame         = FDsProjectPropertyContent_onEnterFrame;
      o.onMeshLoad           = FDsProjectPropertyContent_onMeshLoad;
      o.oeResize             = FDsProjectPropertyContent_oeResize;
      o.oeRefresh            = FDsProjectPropertyContent_oeRefresh;
      o.construct            = FDsProjectPropertyContent_construct;
      o.innerSelectDisplay   = FDsProjectPropertyContent_innerSelectDisplay;
      o.innerSelectLayer     = FDsProjectPropertyContent_innerSelectLayer;
      o.selectNone           = FDsProjectPropertyContent_selectNone;
      o.selectDisplay        = FDsProjectPropertyContent_selectDisplay;
      o.selectMaterial       = FDsProjectPropertyContent_selectMaterial;
      o.selectRenderable     = FDsProjectPropertyContent_selectRenderable;
      o.switchRotation       = FDsProjectPropertyContent_switchRotation;
      o.reloadRegion         = FDsProjectPropertyContent_reloadRegion;
      o.loadMeshByGuid       = FDsProjectPropertyContent_loadMeshByGuid;
      o.loadMeshByCode       = FDsProjectPropertyContent_loadMeshByCode;
      o.dispose              = FDsProjectPropertyContent_dispose;
      return o;
   }
   MO.FDsProjectPropertyContent_onBuild = function FDsProjectPropertyContent_onBuild(p){
      var o = this;
      o.__base.FDsCanvas.onBuild.call(o, p);
   }
   MO.FDsProjectPropertyContent_onMouseCaptureStart = function FDsProjectPropertyContent_onMouseCaptureStart(p){
      var o = this;
      var s = o._activeSpace;
      if(!s){
         return;
      }
      var r = o._activeSpace.region();
      var st = MO.Console.find(FG3dTechniqueConsole).find(o._graphicContext, FG3dSelectTechnique);
      var r = st.test(r, p.offsetX, p.offsetY);
      o.selectRenderable(r);
      o._capturePosition.set(p.clientX, p.clientY);
      o._captureRotation.assign(s.camera()._rotation);
      if(r){
         var d = r.display();
         o._captureMatrix.assign(d.matrix());
      }
      o._templateMatrix.identity();
      if(o._templateFace){
         o._templateFaceMatrix.assign(o._templateFace.matrix());
         var rs = o._selectRenderables;
         for(var i = rs.count() - 1; i >= 0; i--){
            var r = rs.getAt(i);
            if(!r._dragMatrix){
               r._dragMatrix = new MO.SMatrix3d();
            }
            r._dragMatrix.assign(r.matrix());
         }
      }
      RHtml.cursorSet(o._hPanel, EUiCursor.Pointer);
   }
   MO.FDsProjectPropertyContent_onMouseCapture = function FDsProjectPropertyContent_onMouseCapture(p){
      var o = this;
      var s = o._activeSpace;
      if(!s){
         return;
      }
      var cx = p.clientX - o._capturePosition.x;
      var cy = p.clientY - o._capturePosition.y;
      var mc = o._canvasModeCd;
      var mv = o._canvasMoveCd;
      var cm = o._captureMatrix;
      var sm = null;
      var tf = o._templateFace;
      var tm = o._templateMatrix;
      switch(mc){
         case EDsCanvasMode.Drop:
            var c = o._activeSpace.camera();
            var r = c.rotation();
            var cr = o._captureRotation;
            r.x = cr.x - cy * o._cameraMouseRotation;
            r.y = cr.y - cx * o._cameraMouseRotation;
            break;
         case EDsCanvasMode.Select:
            break;
         case EDsCanvasMode.Translate:
            if(tf){
               if(mv == EDsCanvasDrag.X){
                  tm.tx = cx / 10;
               }else if(mv == EDsCanvasDrag.Y){
                  tm.ty = -cy / 10;
               }else if(mv == EDsCanvasDrag.Z){
                  tm.tz = cx / 10;
               }
            }
            break;
         case EDsCanvasMode.Rotation:
            if(tf){
               if(mv == EDsCanvasDrag.X){
                  tm.rx = cx / 10;
               }else if(mv == EDsCanvasDrag.Y){
                  tm.ry = -cy / 10;
               }else if(mv == EDsCanvasDrag.Z){
                  tm.rz = cx / 10;
               }
            }
            break;
         case EDsCanvasMode.Scale:
            if(tf){
               if(mv == EDsCanvasDrag.X){
                  tm.sx = cx / 10;
               }else if(mv == EDsCanvasDrag.Y){
                  tm.sy = -cy / 10;
               }else if(mv == EDsCanvasDrag.Z){
                  tm.sz = cx / 10;
               }else if(mv == EDsCanvasDrag.All){
                  tm.sx = cx / 10;
                  tm.sy = cx / 10;
                  tm.sz = cx / 10;
               }
            }
            break;
      }
      if(tf){
         tf.matrix().merge(o._templateFaceMatrix, tm);
         var rs = o._selectRenderables;
         for(var i = rs.count() - 1; i >= 0; i--){
            var r = rs.getAt(i);
            r._matrix.merge(r._dragMatrix, tm);
         }
      }
   }
   MO.FDsProjectPropertyContent_onMouseCaptureStop = function FDsProjectPropertyContent_onMouseCaptureStop(p){
      var o = this;
      RHtml.cursorSet(o._hPanel, EUiCursor.Auto);
   }
   MO.FDsProjectPropertyContent_onEnterFrame = function FDsProjectPropertyContent_onEnterFrame(){
      var o = this;
      var s = o._activeSpace;
      if(!s){
         return;
      }
      var st = s.timer();
      var ss = st.spanSecond();
      var c = s.camera();
      var d = o._cameraMoveRate * ss;
      var r = o._cameraKeyRotation * ss;
      var kf = RKeyboard.isPress(EStageKey.Forward);
      var kb = RKeyboard.isPress(EStageKey.Back);
      if(kf && !kb){
         c.doWalk(d);
      }
      if(!kf && kb){
         c.doWalk(-d);
      }
      var kq = RKeyboard.isPress(EStageKey.Up);
      var ke = RKeyboard.isPress(EStageKey.Down);
      if(kq && !ke){
         c.doFly(d);
      }
      if(!kq && ke){
         c.doFly(-d);
      }
      var ka = RKeyboard.isPress(EStageKey.RotationLeft);
      var kd = RKeyboard.isPress(EStageKey.RotationRight);
      if(ka && !kd){
         c.doYaw(r);
      }
      if(!ka && kd){
         c.doYaw(-r);
      }
      var kz = RKeyboard.isPress(EStageKey.RotationUp);
      var kw = RKeyboard.isPress(EStageKey.RotationDown);
      if(kz && !kw){
         c.doPitch(r);
      }
      if(!kz && kw){
         c.doPitch(-r);
      }
      c.update();
      if(o._optionRotation){
         var r = o._rotation;
         var display = o._activeSpace._display;
         var matrix = display.matrix();
         matrix.setRotation(matrix.rx, matrix.ry + r.y, matrix.rz);
         matrix.update();
         r.y = 0.01;
      }
   }
   MO.FDsProjectPropertyContent_onMeshLoad = function FDsProjectPropertyContent_onMeshLoad(p){
      var o = this;
      var m = o._activeSpace;
      var g = m.region();
      var rc = g.camera();
      rc.setPosition(0, 3, -10);
      rc.lookAt(0, 3, 0);
      rc.update();
      var h = o._hPanel;
      var rp = rc.projection();
      rp.size().set(h.width, h.height);
      rp._angle = 45;
      rp.update();
      var l = g.directionalLight();
      var lc = l.camera();
      lc.setPosition(10, 10, 0);
      lc.lookAt(0, 0, 0);
      lc.update();
      o.processLoadListener(o);
   }
   MO.FDsProjectPropertyContent_oeResize = function FDsProjectPropertyContent_oeResize(p){
      var o = this;
      o.__base.FDsCanvas.oeResize.call(o, p);
      var hp = o._hPanel;
      var w = hp.offsetWidth;
      var h = hp.offsetHeight;
      var s = o._activeSpace;
      if(s){
         var cp = s.camera().projection();
         cp.size().set(w, h);
         cp.update();
      }
      return EEventStatus.Stop;
   }
   MO.FDsProjectPropertyContent_oeRefresh = function FDsProjectPropertyContent_oeRefresh(p){
      return EEventStatus.Stop;
   }
   MO.FDsProjectPropertyContent_construct = function FDsProjectPropertyContent_construct(){
      var o = this;
      o.__base.FDsCanvas.construct.call(o);
      o._capturePosition = new MO.SPoint2();
      o._captureMatrix = new MO.SMatrix3d();
      o._templateMatrix = new MO.SMatrix3d();
      o._templateFaceMatrix = new MO.SMatrix3d();
      o._rotation = new MO.SVector3();
      o._captureRotation = new MO.SVector3();
      o._selectRenderables = new TObjects();
   }
   MO.FDsProjectPropertyContent_innerSelectDisplay = function FDsProjectPropertyContent_innerSelectDisplay(p){
      var o = this;
      var s = p.renderables();
      var c = s.count();
      for(var i = 0; i < c; i++){
         var r = s.getAt(i);
         if(MO.Class.isClass(r, FDsSceneRenderable)){
            o._selectRenderables.push(r);
            r.showBoundBox();
         }
      }
   }
   MO.FDsProjectPropertyContent_innerSelectLayer = function FDsProjectPropertyContent_innerSelectLayer(p){
      var o = this;
      var s = p.displays();
      var c = s.count();
      for(var i = 0; i < c; i++){
         var d = s.getAt(i);
         o.innerSelectDisplay(d)
      }
   }
   MO.FDsProjectPropertyContent_selectNone = function FDsProjectPropertyContent_selectNone(){
      var o = this;
      o._selectObject = null;
      var s = o._selectRenderables;
      var c = s.count();
      for(var i = 0; i < c; i++){
         var r = s.get(i);
         r.hideBoundBox();
      }
      o._selectRenderables.clear();
   }
   MO.FDsProjectPropertyContent_selectDisplay = function FDsProjectPropertyContent_selectDisplay(p){
      var o = this;
      o.selectNone();
      o._selectObject = p;
      o.innerSelectDisplay(p);
   }
   MO.FDsProjectPropertyContent_selectMaterial = function FDsProjectPropertyContent_selectMaterial(p){
      var o = this;
      o.selectNone();
      o._selectObject = p;
      var d = p._display;
      var s = d.renderables();
      var c = s.count();
      for(var i = 0; i < c; i++){
         var r = s.get(i);
         if(r._materialReference == p){
            o._selectRenderables.push(r);
            r._optionSelected = true;
            r.showBoundBox();
         }
      }
   }
   MO.FDsProjectPropertyContent_selectRenderable = function FDsProjectPropertyContent_selectRenderable(p){
      var o = this;
      var sr = p;
      if(sr){
         var n = sr._renderable._resource._code;
         switch(n){
            case 'ms_translation_x':
               o._canvasMoveCd = EDsCanvasDrag.X;
               o._templateRenderable = sr;
               return;
            case 'ms_translation_y':
               o._canvasMoveCd = EDsCanvasDrag.Y;
               o._templateRenderable = sr;
               return;
            case 'ms_translation_z':
               o._canvasMoveCd = EDsCanvasDrag.Z;
               o._templateRenderable = sr;
               return;
            case 'ms_rotation_x':
               o._canvasMoveCd = EDsCanvasDrag.X;
               o._templateRenderable = sr;
               return;
            case 'ms_rotation_y':
               o._canvasMoveCd = EDsCanvasDrag.Y;
               o._templateRenderable = sr;
               return;
            case 'ms_rotation_z':
               o._canvasMoveCd = EDsCanvasDrag.Z;
               o._templateRenderable = sr;
               return;
            case 'ms_scale_x':
               o._canvasMoveCd = EDsCanvasDrag.X;
               o._templateRenderable = sr;
               return;
            case 'ms_scale_y':
               o._canvasMoveCd = EDsCanvasDrag.Y;
               o._templateRenderable = sr;
               return;
            case 'ms_scale_z':
               o._canvasMoveCd = EDsCanvasDrag.Z;
               o._templateRenderable = sr;
               return;
            case 'ms_scale_all':
               o._canvasMoveCd = EDsCanvasDrag.All;
               o._templateRenderable = sr;
               return;
            default:
               o._canvasMoveCd = EDsCanvasDrag.Unknown;
               o._templateRenderable = null;
         }
      }
      o.selectNone();
      if(p){
         o._selectRenderables.push(p);
         p._optionSelected = true;
         p.showBoundBox();
         o._workspace._catalog.showObject(p);
      }
      var t = o._templateTranslation;
      var r = o._templateRotation;
      var s = o._templateScale;
      var mc = o._canvasModeCd;
      switch(mc){
         case EDsCanvasMode.Drop:
            break;
         case EDsCanvasMode.Select:
            break;
         case EDsCanvasMode.Translate:
            t.setVisible(sr != null);
            r.hide();
            s.hide();
            o._templateFace = t;
            break;
         case EDsCanvasMode.Rotation:
            t.hide();
            r.setVisible(sr != null);
            s.hide();
            o._templateFace = r;
            break;
         case EDsCanvasMode.Scale:
            t.hide();
            r.hide();
            s.setVisible(sr != null);
            o._templateFace = s;
            break;
      }
      var st = o._templateFace;
      if(sr && st){
         var d = sr.display();
         var m = st.matrix();
         m.assign(d.matrix());
         m.setScaleAll(o._templateViewScale);
         m.update();
      }
   }
   MO.FDsProjectPropertyContent_switchMode = function FDsProjectPropertyContent_switchMode(p){
      var o = this;
      o._canvasModeCd = p;
      o.selectRenderable(o._selectRenderable);
   }
   MO.FDsProjectPropertyContent_switchRotation = function FDsProjectPropertyContent_switchRotation(p){
      this._optionRotation = p;
   }
   MO.FDsProjectPropertyContent_reloadRegion = function FDsProjectPropertyContent_reloadRegion(region){
      var o = this;
      var resource = region.resource();
      o._cameraMoveRate = resource.moveSpeed();
      o._cameraKeyRotation = resource.rotationKeySpeed();
      o._cameraMouseRotation = resource.rotationMouseSpeed();
   }
   MO.FDsProjectPropertyContent_loadMeshByGuid = function FDsProjectPropertyContent_loadMeshByGuid(p){
      var o = this;
      var rmc = MO.Console.find(FE3dMeshConsole);
      if(o._activeSpace != null){
         rmc.free(o._activeSpace);
      }
      var space = o._activeSpace = rmc.allocByGuid(o, p);
      space.addLoadListener(o, o.onMeshLoad);
      space._layer.pushRenderable(o._dimensional);
      RStage.register('mesh3d', space);
   }
   MO.FDsProjectPropertyContent_loadMeshByCode = function FDsProjectPropertyContent_loadMeshByCode(p){
      var o = this;
      var rmc = MO.Console.find(FE3dMeshConsole);
      if(o._activeSpace != null){
         rmc.free(o._activeSpace);
      }
      var space = o._activeSpace = rmc.allocByCode(o, p);
      space.addLoadListener(o, o.onMeshLoad);
      space._layer.pushRenderable(o._dimensional);
      RStage.register('mesh3d', space);
   }
   MO.FDsProjectPropertyContent_dispose = function FDsProjectPropertyContent_dispose(){
      var o = this;
      o._rotation = MO.Lang.Object.dispose(o._rotation);
      o.__base.FDsCanvas.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectPropertyToolBar = function FDsProjectPropertyToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName             = 'resource.project.PropertyToolBar';
      o._controlInsertButton   = null;
      o._controlUpdateButton   = null;
      o._controlDeleteButton   = null;
      o._controlRotationButton = null;
      o.onBuilded              = FDsProjectPropertyToolBar_onBuilded;
      o.onInsertClick          = FDsProjectPropertyToolBar_onInsertClick;
      o.onUpdateClick          = FDsProjectPropertyToolBar_onUpdateClick;
      o.onDeleteClick          = FDsProjectPropertyToolBar_onDeleteClick;
      o.onRotationClick        = FDsProjectPropertyToolBar_onRotationClick;
      o.construct              = FDsProjectPropertyToolBar_construct;
      o.dispose                = FDsProjectPropertyToolBar_dispose;
      return o;
   }
   MO.FDsProjectPropertyToolBar_onBuilded = function FDsProjectPropertyToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
   }
   MO.FDsProjectPropertyToolBar_onInsertClick = function FDsProjectPropertyToolBar_onInsertClick(event){
   }
   MO.FDsProjectPropertyToolBar_onUpdateClick = function FDsProjectPropertyToolBar_onUpdateClick(event){
      var o = this;
      var frame = o._workspace._previewContent;
      var item = frame._activeItem;
      var url = '/script/design/mesh.html?guid=' + item._guid;
      window.open(url, '_blank', '');
   }
   MO.FDsProjectPropertyToolBar_onDeleteClick = function FDsProjectPropertyToolBar_onDeleteClick(event){
   }
   MO.FDsProjectPropertyToolBar_onRotationClick = function FDsProjectPropertyToolBar_onRotationClick(event){
      var o = this;
      var previewContent = o._workspace._previewContent;
      previewContent.switchRotation(event.checked);
   }
   MO.FDsProjectPropertyToolBar_construct = function FDsProjectPropertyToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsProjectPropertyToolBar_dispose = function FDsProjectPropertyToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectSceneCatalogContent = function FDsProjectSceneCatalogContent(o){
      o = MO.Class.inherits(this, o, FDuiDataTreeView, MListenerSelected);
      o._iconView             = 'design3d.mesh.view';
      o._iconViewNot          = 'design3d.mesh.viewno';
      o._activeSpace          = null;
      o._materials            = null;
      o.onBuild               = FDsProjectSceneCatalogContent_onBuild;
      o.onLoadDisplay         = FDsProjectSceneCatalogContent_onLoadDisplay;
      o.onNodeClick           = FDsProjectSceneCatalogContent_onNodeClick;
      o.onNodeViewClick       = FDsProjectSceneCatalogContent_onNodeViewClick;
      o.onNodeViewDoubleClick = FDsProjectSceneCatalogContent_onNodeViewDoubleClick;
      o.lsnsSelect            = null;
      o.construct             = FDsProjectSceneCatalogContent_construct;
      o.buildTechnique        = FDsProjectSceneCatalogContent_buildTechnique;
      o.buildRegion           = FDsProjectSceneCatalogContent_buildRegion;
      o.buildRenderable       = FDsProjectSceneCatalogContent_buildRenderable;
      o.buildDisplay          = FDsProjectSceneCatalogContent_buildDisplay;
      o.buildSpace            = FDsProjectSceneCatalogContent_buildSpace;
      o.selectObject          = FDsProjectSceneCatalogContent_selectObject;
      o.showObject            = FDsProjectSceneCatalogContent_showObject;
      o.dispose               = FDsProjectSceneCatalogContent_dispose;
      return o;
   }
   MO.FDsProjectSceneCatalogContent_onBuild = function FDsProjectSceneCatalogContent_onBuild(p){
      var o = this;
      o.__base.FDuiDataTreeView.onBuild.call(o, p);
      o.lsnsClick.register(o, o.onNodeClick);
      o.loadUrl('/cloud.describe.tree.ws?action=query&code=resource.project');
   }
   MO.FDsProjectSceneCatalogContent_onLoadDisplay = function FDsProjectSceneCatalogContent_onLoadDisplay(p){
      var o = this;
      var n = p._linkNode;
      o.buildRenderable(n, p);
   }
   MO.FDsProjectSceneCatalogContent_onNodeClick = function FDsProjectSceneCatalogContent_onNodeClick(t, n){
      var o = this;
      var s = n.dataPropertyGet('linker');
      o.selectObject(s);
   }
   MO.FDsProjectSceneCatalogContent_onNodeViewClick = function FDsProjectSceneCatalogContent_onNodeViewClick(p){
      var o = this;
      var c = p.treeNodeCell;
      var s = p.treeNode.dataPropertyGet('linker');
      if(MO.Class.isClass(s, FDisplay)){
         if(p.ctrlKey){
            var ds = o._displays;
            for(var i = ds.count() - 1; i >= 0; i--){
               var nd = ds.get(i);
               var d = nd.dataPropertyGet('linker');
               d._visible = false;
               nd.cell('view').setIcon(o._iconViewNot);
            }
            s._visible = true;
            c.setIcon(o._iconView);
         }else{
            s._visible = !s._visible;
            c.setIcon(s._visible ? o._iconView : o._iconViewNot);
         }
      }
      if(MO.Class.isClass(s, FDrawable)){
         if(p.ctrlKey){
            var rs = o._renderables;
            for(var i = rs.count() - 1; i >= 0; i--){
               var nr = rs.get(i);
               var r = nr.dataPropertyGet('linker');
               r._visible = false;
               nr.cell('view').setIcon(o._iconViewNot);
            }
            s._visible = true;
            c.setIcon(o._iconView);
         }else{
            s._visible = !s._visible;
            c.setIcon(s._visible ? o._iconView : o._iconViewNot);
         }
      }
      if(MO.Class.isClass(s, FG3dMaterial)){
         if(p.ctrlKey){
            var ms = o._materials;
            for(var i = ms.count() - 1; i >= 0; i--){
               var nm = ms.get(i);
               var m = nm.dataPropertyGet('linker');
               m._visible = false;
               nm.cell('view').setIcon(o._iconViewNot);
            }
            s._visible = true;
            c.setIcon(o._iconView);
         }else{
            s._visible = !s._visible;
            c.setIcon(s._visible ? o._iconView : o._iconViewNot);
         }
      }
   }
   MO.FDsProjectSceneCatalogContent_onNodeViewDoubleClick = function FDsProjectSceneCatalogContent_onNodeViewDoubleClick(p){
      var o = this;
      var n = p.treeNode;
      var c = p.treeNodeCell;
      var s = n.dataPropertyGet('linker');
      if(MO.Class.isClass(s, FDisplay)){
         var s = o._displays;
         for(var i = s.count() - 1; i >= 0; i--){
            var n = s.get(i);
            var d = n.dataPropertyGet('linker');
            d._visible = true;
            n.cell('view').setIcon(o._iconView);
         }
      }
      if(MO.Class.isClass(s, FDrawable)){
         var s = o._renderables;
         for(var i = s.count() - 1; i >= 0; i--){
            var n = s.get(i);
            var r = n.dataPropertyGet('linker');
            r._visible = true;
            n.cell('view').setIcon(o._iconView);
         }
      }
      if(MO.Class.isClass(s, FG3dMaterial)){
         var s = o._materials;
         for(var i = s.count() - 1; i >= 0; i--){
            var n = s.get(i);
            var m = n.dataPropertyGet('linker');
            m._visible = true;
            n.cell('view').setIcon(o._iconView);
         }
      }
   }
   MO.FDsProjectSceneCatalogContent_construct = function FDsProjectSceneCatalogContent_construct(){
      var o = this;
      o.__base.FDuiDataTreeView.construct.call(o);
      o._renderables = new TObjects();
      o._materials = new TObjects();
   }
   MO.FDsProjectSceneCatalogContent_buildTechnique = function FDsProjectSceneCatalogContent_buildTechnique(n, p){
      var o = this;
      var nt = o.createNode();
      nt.setLabel('Technique');
      nt.setTypeCode('technique');
      nt.dataPropertySet('linker', p);
      n.appendNode(nt);
   }
   MO.FDsProjectSceneCatalogContent_buildRegion = function FDsProjectSceneCatalogContent_buildRegion(n, p){
      var o = this;
      var nr = o.createNode();
      nr.setLabel('Region');
      nr.setTypeCode('region');
      nr.dataPropertySet('linker', p);
      n.appendNode(nr);
      var nc = o.createNode();
      nc.setLabel('Camera');
      nc.setTypeCode('camera');
      nc.dataPropertySet('linker', p.camera());
      nr.appendNode(nc);
      var nl = o.createNode();
      nl.setLabel('Light');
      nl.setTypeCode('light');
      nl.dataPropertySet('linker', p.directionalLight());
      nr.appendNode(nl);
   }
   MO.FDsProjectSceneCatalogContent_buildRenderable = function FDsProjectSceneCatalogContent_buildRenderable(n, p){
      var o = this;
      var m = p._renderable._material;
      var dn = o.createNode();
      dn.setTypeCode('material');
      dn.setLabel('Material');
      dn.dataPropertySet('linker', m);
      o._materials.push(dn);
      n.appendNode(dn);
      var r = p._renderable;
      var dn = o.createNode();
      dn.setTypeCode('renderable');
      dn.setLabel('Renderable');
      dn.dataPropertySet('linker', r);
      o._renderables.push(dn);
      n.appendNode(dn);
   }
   MO.FDsProjectSceneCatalogContent_buildDisplay = function FDsProjectSceneCatalogContent_buildDisplay(n, p){
      var o = this;
      var node = o.createNode();
      node.setTypeCode('display');
      node.setLabel('Mesh');
      node.dataPropertySet('linker', p);
      n.appendNode(node);
      o.buildRenderable(node, p);
   }
   MO.FDsProjectSceneCatalogContent_buildSpace = function FDsProjectSceneCatalogContent_buildSpace(space){
      var o = this;
      var resource = space.resource();
      o._activeSpace = space;
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel(resource.code());
      node.setNote(resource.label());
      node.dataPropertySet('linker', space);
      o.appendNode(node);
      o.buildTechnique(node, space.technique())
      o.buildRegion(node, space.region());
      o.buildDisplay(node, space._display);
      node.click();
   }
   MO.FDsProjectSceneCatalogContent_selectObject = function FDsProjectSceneCatalogContent_selectObject(p){
      var o = this;
      if(p != null){
         o.processSelectedListener(p, true);
      }
   }
   MO.FDsProjectSceneCatalogContent_showObject = function FDsProjectSceneCatalogContent_showObject(p){
      var o = this;
      if(MO.Class.isClass(p, FDsSceneRenderable)){
         var s = o._renderables;
         var c = s.count();
         for(var i = 0; i < c; i++){
            var nr = s.getAt(i);
            var r = nr.dataPropertyGet('linker');
            if(r == p){
               o.processSelectedListener(p, false);
            }
         }
      }
   }
   MO.FDsProjectSceneCatalogContent_dispose = function FDsProjectSceneCatalogContent_dispose(){
      var o = this;
      o._displays = MO.Lang.Object.dispose(o._displays);
      o._renderables = MO.Lang.Object.dispose(o._renderables);
      o._materials = MO.Lang.Object.dispose(o._materials);
      o.__base.FDuiDataTreeView.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectSceneCatalogToolBar = function FDsProjectSceneCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName       = 'resource.project.SceneCatalogToolBar';
      o._canvasModeCd    = EDsCanvasMode.Drop;
      o._dropButton      = null;
      o._selectButton    = null;
      o._translateButton = null;
      o._rotationButton  = null;
      o._scaleButton     = null;
      o._lookFrontButton = null;
      o._lookUpButton    = null;
      o._lookLeftButton  = null;
      o._playButton      = null;
      o._viewButton      = null;
      o.onBuilded        = FDsProjectSceneCatalogToolBar_onBuilded;
      o.onModeClick      = FDsProjectSceneCatalogToolBar_onModeClick;
      o.onRotationClick  = FDsProjectSceneCatalogToolBar_onRotationClick;
      o.construct        = FDsProjectSceneCatalogToolBar_construct;
      o.dispose          = FDsProjectSceneCatalogToolBar_dispose;
      return o;
   }
   MO.FDsProjectSceneCatalogToolBar_onBuilded = function FDsProjectSceneCatalogToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
   }
   MO.FDsProjectSceneCatalogToolBar_onModeClick = function FDsProjectSceneCatalogToolBar_onModeClick(p){
      var o = this;
      o._canvasModeCd = p._canvasModeCd;
      o._workspace._canvas.switchMode(p._canvasModeCd);
   }
   MO.FDsProjectSceneCatalogToolBar_onRotationClick = function FDsProjectSceneCatalogToolBar_onRotationClick(p, v){
      var o = this;
      var c = o._workspace._canvas;
      c.switchRotation(v);
   }
   MO.FDsProjectSceneCatalogToolBar_construct = function FDsProjectSceneCatalogToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsProjectSceneCatalogToolBar_dispose = function FDsProjectSceneCatalogToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectCatalogToolBar = function FDsProjectCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName       = 'resource.project.CatalogToolBar';
      o._canvasModeCd    = EDsCanvasMode.Drop;
      o._dropButton      = null;
      o._selectButton    = null;
      o._translateButton = null;
      o._rotationButton  = null;
      o._scaleButton     = null;
      o._lookFrontButton = null;
      o._lookUpButton    = null;
      o._lookLeftButton  = null;
      o._playButton      = null;
      o._viewButton      = null;
      o.onBuilded        = FDsProjectCatalogToolBar_onBuilded;
      o.onModeClick      = FDsProjectCatalogToolBar_onModeClick;
      o.onRotationClick  = FDsProjectCatalogToolBar_onRotationClick;
      o.construct        = FDsProjectCatalogToolBar_construct;
      o.dispose          = FDsProjectCatalogToolBar_dispose;
      return o;
   }
   MO.FDsProjectCatalogToolBar_onBuilded = function FDsProjectCatalogToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
   }
   MO.FDsProjectCatalogToolBar_onModeClick = function FDsProjectCatalogToolBar_onModeClick(p){
      var o = this;
      o._canvasModeCd = p._canvasModeCd;
      o._workspace._canvas.switchMode(p._canvasModeCd);
   }
   MO.FDsProjectCatalogToolBar_onRotationClick = function FDsProjectCatalogToolBar_onRotationClick(p, v){
      var o = this;
      var c = o._workspace._canvas;
      c.switchRotation(v);
   }
   MO.FDsProjectCatalogToolBar_construct = function FDsProjectCatalogToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsProjectCatalogToolBar_dispose = function FDsProjectCatalogToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectSceneDialog = function FDsProjectSceneDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'design3d.project.SceneDialog';
      o._dataModeCd           = null;
      o._controlParentLabel   = null;
      o._controlLabel         = null;
      o._controlConfirmButton = null;
      o._controlCancelButton  = null;
      o.onBuilded             = FDsProjectSceneDialog_onBuilded;
      o.onConfirmLoad         = FDsProjectSceneDialog_onConfirmLoad;
      o.onConfirmClick        = FDsProjectSceneDialog_onConfirmClick;
      o.onCancelClick         = FDsProjectSceneDialog_onCancelClick;
      o.construct             = FDsProjectSceneDialog_construct;
      o.setDataCode           = FDsProjectSceneDialog_setDataCode;
      o.setDataLabel          = FDsProjectSceneDialog_setDataLabel;
      o.switchDataMode        = FDsProjectSceneDialog_switchDataMode;
      o.dispose               = FDsProjectSceneDialog_dispose;
      return o;
   }
   MO.FDsProjectSceneDialog_onBuilded = function FDsProjectSceneDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlConfirmButton.addClickListener(o, o.onConfirmClick);
      o._controlCancelButton.addClickListener(o, o.onCancelClick);
   }
   MO.FDsProjectSceneDialog_onConfirmLoad = function FDsProjectSceneDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
      var listContent = o._frameSet._sceneListContent;
      listContent.serviceRelist();
   }
   MO.FDsProjectSceneDialog_onConfirmClick = function FDsProjectSceneDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var code = o._controlCode.get();
      var label = o._controlLabel.get();
      var sceneConsole = MO.Console.find(FDrSceneConsole);
      var connection = null;
      if(o._dataModeCd == EUiDataMode.Insert){
         var scene = MO.Class.create(FDrScene);
         scene._projectGuid = o._projectGuid;
         scene._code = code;
         scene._label = label;
         connection = sceneConsole.doCreate(scene);
         scene.dispose();
      }else{
         throw new TError(o, 'Unknown mode.');
      }
      connection.addLoadListener(o, o.onConfirmLoad);
   }
   MO.FDsProjectSceneDialog_onCancelClick = function FDsProjectSceneDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsProjectSceneDialog_construct = function FDsProjectSceneDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsProjectSceneDialog_setDataCode = function FDsProjectSceneDialog_setDataCode(code){
      this._controlCode.set(code);
   }
   MO.FDsProjectSceneDialog_setDataLabel = function FDsProjectSceneDialog_setDataLabel(label){
      this._controlLabel.set(label);
   }
   MO.FDsProjectSceneDialog_switchDataMode = function FDsProjectSceneDialog_switchDataMode(modeCd){
      var o = this;
      o._dataModeCd = modeCd;
      if(modeCd == EUiDataMode.Insert){
         o.setLabel('新建场景');
      }else if(modeCd == EUiDataMode.Update){
         o.setLabel('场景属性');
      }
   }
   MO.FDsProjectSceneDialog_dispose = function FDsProjectSceneDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectSceneListContent = function FDsProjectSceneListContent(o){
      o = MO.Class.inherits(this, o, FDuiListView);
      o._activeItem       = null;
      o._activeGuid       = null;
      o._refreshButton    = null;
      o._saveButton       = null;
      o._runButton        = null;
      o.onBuilded         = FDsProjectSceneListContent_onBuilded;
      o.onServiceLoad     = FDsProjectSceneListContent_onServiceLoad;
      o.construct         = FDsProjectSceneListContent_construct;
      o.doClickItem       = FDsProjectSceneListContent_doClickItem;
      o.doDoubleClickItem = FDsProjectSceneListContent_doDoubleClickItem;
      o.serviceList       = FDsProjectSceneListContent_serviceList;
      o.serviceRelist     = FDsProjectSceneListContent_serviceRelist;
      o.dispose           = FDsProjectSceneListContent_dispose;
      return o;
   }
   MO.FDsProjectSceneListContent_onBuilded = function FDsProjectSceneListContent_onBuilded(p){
      var o = this;
      o.__base.FDuiListView.onBuilded.call(o, p);
   }
   MO.FDsProjectSceneListContent_onServiceLoad = function FDsProjectSceneListContent_onServiceLoad(event){
      var o = this;
      var xitems = event.root.findNode('SceneCollection');
      o.clear();
      var xnodes = xitems.nodes();
      var count = xnodes.count();
      for(var i = 0; i < count; i++){
         var xnode = xnodes.getAt(i);
         if(xnode.isName('Scene')){
            var item = o.createItem(FDsProjectSceneListItem);
            item.propertyLoad(xnode);
            item._guid = xnode.get('guid');
            item._code = xnode.get('code');
            item._updateDate = xnode.get('update_date');
            item.setLabel(MO.Lang.String.nvl(xnode.get('label'), xnode.get('code')));
            item.refreshStyle();
            o.push(item);
         }
      }
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsProjectSceneListContent_construct = function FDsProjectSceneListContent_construct(){
      var o = this;
      o.__base.FDuiListView.construct.call(o);
   }
   MO.FDsProjectSceneListContent_doClickItem = function FDsProjectSceneListContent_doClickItem(control){
      var o = this;
      o.__base.FDuiListView.doClickItem.call(o, control);
      var guid = control._guid;
      o._activeItem = control;
   }
   MO.FDsProjectSceneListContent_doDoubleClickItem = function FDsProjectSceneListContent_doDoubleClickItem(control){
      var o = this;
      o.__base.FDuiListView.doDoubleClickItem.call(o, control)
      var guid = control._guid;
      o._activeItem = control;
      o._activeGuid = control._guid;
   }
   MO.FDsProjectSceneListContent_serviceList = function FDsProjectSceneListContent_serviceList(guid){
      var o = this;
      o._activeGuid = guid;
      MO.Console.find(FDuiDesktopConsole).showLoading();
      var url = '/cloud.solution.project.ws?action=listProject&project_guid=' + guid;
      var connection = MO.Console.find(FXmlConsole).sendAsync(url);
      connection.addLoadListener(o, o.onServiceLoad);
      return connection;
   }
   MO.FDsProjectSceneListContent_serviceRelist = function FDsProjectSceneListContent_serviceRelist(){
      var o = this;
      return o.serviceList(o._activeGuid);
   }
   MO.FDsProjectSceneListContent_dispose = function FDsProjectSceneListContent_dispose(){
      var o = this;
      o.__base.FDuiListView.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectSceneListItem = function FDsProjectSceneListItem(o){
      o = MO.Class.inherits(this, o, FDuiListViewItem);
      o.onBuild      = FDsProjectSceneListItem_onBuild;
      o.refreshStyle = FDsProjectSceneListItem_refreshStyle;
      return o;
   }
   MO.FDsProjectSceneListItem_onBuild = function FDsProjectSceneListItem_onBuild(p){
      var o = this;
      o.__base.FDuiListViewItem.onBuild.call(o, p);
      var h = o._hPanel;
      h.style.width = '260px';
      h.style.height = '150px';
   }
   MO.FDsProjectSceneListItem_refreshStyle = function FDsProjectSceneListItem_refreshStyle(){
      var o = this;
      var url = '/cloud.content.scene.wv?do=preview&guid=' + o._guid;
      o._hForm.style.backgroundImage = 'url("' + url + '")';
   }
}
with(MO){
   MO.FDsProjectSceneListToolBar = function FDsProjectSceneListToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName           = 'resource.project.SceneListToolBar';
      o._controlSceneCreate  = null;
      o._controlSceneDelete  = null;
      o.onBuilded            = FDsProjectSceneListToolBar_onBuilded;
      o.onSceneCreateClick   = FDsProjectSceneListToolBar_onSceneCreateClick;
      o.onSceneDeleteLoad    = FDsProjectSceneListToolBar_onSceneDeleteLoad;
      o.onSceneDeleteExecute = FDsProjectSceneListToolBar_onSceneDeleteExecute;
      o.onSceneDeleteClick   = FDsProjectSceneListToolBar_onSceneDeleteClick;
      o.construct            = FDsProjectSceneListToolBar_construct;
      o.dispose              = FDsProjectSceneListToolBar_dispose;
      return o;
   }
   MO.FDsProjectSceneListToolBar_onBuilded = function FDsProjectSceneListToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlSceneCreate.addClickListener(o, o.onSceneCreateClick);
      o._controlSceneDelete.addClickListener(o, o.onSceneDeleteClick);
   }
   MO.FDsProjectSceneListToolBar_onSceneCreateClick = function FDsProjectSceneListToolBar_onSceneCreateClick(event){
      var o = this;
      var projectGuid = o._frameSet._activeGuid;
      if(MO.Lang.String.isEmpty(projectGuid)){
         throw new TError(o, 'Project guid is empty.');
      }
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsProjectSceneDialog);
      dialog._frameSet = o._frameSet;
      dialog._projectGuid = projectGuid;
      dialog.setDataCode('');
      dialog.setDataLabel('');
      dialog.switchDataMode(EUiDataMode.Insert);
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsProjectSceneListToolBar_onSceneDeleteLoad = function FDsProjectSceneListToolBar_onSceneDeleteLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      var listContent = o._frameSet._sceneListContent;
      listContent.serviceRelist();
   }
   MO.FDsProjectSceneListToolBar_onSceneDeleteExecute = function FDsProjectSceneListToolBar_onSceneDeleteExecute(event){
      var o = this;
      if(event.resultCd != EResult.Success){
         return;
      }
      var listContent = o._frameSet._sceneListContent;
      var item = listContent.focusItem();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = MO.Console.find(FDrSceneConsole).doDelete(item._guid);
      connection.addLoadListener(o, o.onSceneDeleteLoad);
   }
   MO.FDsProjectSceneListToolBar_onSceneDeleteClick = function FDsProjectSceneListToolBar_onSceneDeleteClick(event){
      var o = this;
      var listContent = o._frameSet._sceneListContent;
      var item = listContent.focusItem();
      if(!item){
         return MO.Console.find(FDuiMessageConsole).showInfo('请选中场景后，再点击操作。');
      }
      var dialog = MO.Console.find(FDuiMessageConsole).showConfirm('请确认是否删除当前场景？');
      dialog.addResultListener(o, o.onSceneDeleteExecute);
   }
   MO.FDsProjectSceneListToolBar_construct = function FDsProjectSceneListToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsProjectSceneListToolBar_dispose = function FDsProjectSceneListToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectTabBar = function FDsProjectTabBar(o){
      o = MO.Class.inherits(this, o, FDuiTabBar);
      o._frameName             = 'design3d.project.TabBar';
      o._resourceTypeCd        = 'mesh';
      o._controlProjectButton  = null;
      o._controlResourceButton = null;
      o.onBuilded              = FDsProjectTabBar_onBuilded;
      o.onButtonClick          = FDsProjectTabBar_onButtonClick;
      o.construct              = FDsProjectTabBar_construct;
      o.dispose                = FDsProjectTabBar_dispose;
      return o;
   }
   MO.FDsProjectTabBar_onBuilded = function FDsProjectTabBar_onBuilded(p){
      var o = this;
      o.__base.FDuiTabBar.onBuilded.call(o, p);
      o._controlProjectButton.addClickListener(o, o.onButtonClick);
      o._controlResourceButton.addClickListener(o, o.onButtonClick);
   }
   MO.FDsProjectTabBar_onButtonClick = function FDsProjectTabBar_onButtonClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      if(name == 'project'){
         o._workspace.selectFrameSet(EDsFrameSet.ProjectFrameSet);
      }else if(name == 'resource'){
         o._workspace.selectFrameSet(EDsFrameSet.ResourceFrameSet);
      }
   }
   MO.FDsProjectTabBar_construct = function FDsProjectTabBar_construct(){
      var o = this;
      o.__base.FDuiTabBar.construct.call(o);
   }
   MO.FDsProjectTabBar_dispose = function FDsProjectTabBar_dispose(){
      var o = this;
      o.__base.FDuiTabBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsProjectWorkspace = function FDsProjectWorkspace(o){
      o = MO.Class.inherits(this, o, FDuiWorkspace);
      o._frameName            = 'design3d.project.Workspace';
      o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleStatusbarGround = MO.Class.register(o, new MO.AStyle('_styleStatusbarGround', 'Statusbar_Ground'));
      o._styleCatalogGround   = MO.Class.register(o, new MO.AStyle('_styleCatalogGround', 'Catalog_Ground'));
      o._styleCatalogToolbar  = MO.Class.register(o, new MO.AStyle('_styleCatalogToolbar', 'Catalog_Toolbar'));
      o._styleSearchGround    = MO.Class.register(o, new MO.AStyle('_styleSearchGround', 'Search_Ground'));
      o._styleSearchToolbar   = MO.Class.register(o, new MO.AStyle('_styleCatalogToolbar', 'Search_Toolbar'));
      o._stylePropertyGround  = MO.Class.register(o, new MO.AStyle('_stylePropertyGround', 'Property_Ground'));
      o._stylePropertyToolbar = MO.Class.register(o, new MO.AStyle('_stylePropertyToolbar', 'Property_Toolbar'));
      o._stylePropertyContent = MO.Class.register(o, new MO.AStyle('_stylePropertyContent', 'Property_Content'));
      o._styleWorkspaceGround = MO.Class.register(o, new MO.AStyle('_styleWorkspaceGround', 'Workspace_Ground'));
      o._resourceTypeCd       = 'project';
      o._frameToolBar         = null;
      o._frameStatusBar       = null;
      o._frameCatalog         = null;
      o._frameCatalogToolbar  = null;
      o._frameCatalogContent  = null;
      o._frameSearch          = null;
      o._frameSearchToolbar   = null;
      o._frameSearchContent   = null;
      o._framePreview         = null;
      o._framePreviewToolbar  = null;
      o._framePreviewContent  = null;
      o._activeFrameSet       = null;
      o._frameSets            = null;
      o._propertyFrames       = null;
      o.onBuilded             = FDsProjectWorkspace_onBuilded;
      o.onMeshLoad            = FDsProjectWorkspace_onMeshLoad;
      o.onCatalogSelected     = FDsProjectWorkspace_onCatalogSelected;
      o.construct             = FDsProjectWorkspace_construct;
      o.selectFrameSet        = FDsProjectWorkspace_selectFrameSet;
      o.findPropertyFrame     = FDsProjectWorkspace_findPropertyFrame;
      o.switchContent         = FDsProjectWorkspace_switchContent;
      o.load                  = FDsProjectWorkspace_load;
      o.dispose               = FDsProjectWorkspace_dispose;
      return o;
   }
   MO.FDsProjectWorkspace_onBuilded = function FDsProjectWorkspace_onBuilded(p){
      var o = this;
      o.__base.FDuiWorkspace.onBuilded.call(o, p);
      var frame = o._frameToolBar = o.searchControl('toolbarFrame');
      frame._hPanel.className = o.styleName('Toolbar_Ground');
      o._frameBody = o.searchControl('bodyFrame');
      var frame = o._frameStatusBar = o.searchControl('statusFrame');
      frame._hPanel.className = o.styleName('Statusbar_Ground');
      var hTable = MO.Window.Builder.createTable(p);
      hTable.width = '100%';
      var hRow = MO.Window.Builder.appendTableRow(hTable);
      o._hMenuPanel = MO.Window.Builder.appendTableCell(hRow);
      var c = o._tabBar = MO.Class.create(FDsProjectTabBar);
      c._workspace = o;
      c.buildDefine(p);
      var hCell = MO.Window.Builder.appendTableCell(hRow);
      hCell.width = '150px';
      hCell.align = 'right';
      hCell.vAlign = 'bottom';
      hCell.appendChild(c._hPanel);
      o._frameToolBar._hPanel.appendChild(hTable);
      o.selectFrameSet(EDsFrameSet.ProjectFrameSet);
   }
   MO.FDsProjectWorkspace_onMeshLoad = function FDsProjectWorkspace_onMeshLoad(p){
      var o = this;
      o._activeSpace = p._activeSpace;
      o._catalog.buildSpace(o._activeSpace);
   }
   MO.FDsProjectWorkspace_onCatalogSelected = function FDsProjectWorkspace_onCatalogSelected(p, pc){
      var o = this;
      var space = o._activeSpace;
      var fs = o._propertyFrames;
      var c = fs.count();
      for(var i = 0; i < c; i++){
         var f = fs.value(i);
         f.hide();
      }
      if(MO.Class.isClass(p, FE3dStage)){
         var f = o.findPropertyFrame(EDsFrame.MeshSpacePropertyFrame);
         f.show();
         f.loadObject(space, space);
      }else if(MO.Class.isClass(p, FG3dTechnique)){
         var f = o.findPropertyFrame(EDsFrame.MeshTechniquePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dRegion)){
         var f = o.findPropertyFrame(EDsFrame.MeshRegionPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dCamera)){
         var f = o.findPropertyFrame(EDsFrame.MeshCameraPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dDirectionalLight)){
         var f = o.findPropertyFrame(EDsFrame.MeshLightPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshDisplay)){
         var f = o.findPropertyFrame(EDsFrame.MeshDisplayPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dMaterial)){
         var f = o.findPropertyFrame(EDsFrame.MeshMaterialPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshRenderable)){
         var f = o.findPropertyFrame(EDsFrame.MeshRenderablePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else{
         throw new TError('Unknown select object type. (value={1})', p);
      }
   }
   MO.FDsProjectWorkspace_construct = function FDsProjectWorkspace_construct(){
      var o = this;
      o.__base.FDuiWorkspace.construct.call(o);
      o._frameSets = new TDictionary();
      o._propertyFrames = new TDictionary();
   }
   MO.FDsProjectWorkspace_selectFrameSet = function FDsProjectWorkspace_selectFrameSet(name, guid){
      var o = this;
      var frameSet = o._frameSets.get(name);
      if(!frameSet){
         if(name == EDsFrameSet.ProjectFrameSet){
            var menuBar = MO.Class.create(FDsProjectMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FFrameConsole).findByClass(o, FDsProjectFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.ResourceFrameSet){
            var menuBar = MO.Class.create(FDsResourceMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FFrameConsole).findByClass(o, FDsResourceFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.MeshFrameSet){
            var menuBar = MO.Class.create(FDsMeshMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FFrameConsole).findByClass(o, FDsMeshFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else{
            throw new TError('Unknown frameset. (name={1})', name);
         }
         o._frameSets.set(name, frameSet);
      }
      var activeFrameSet = o._activeFrameSet;
      if(activeFrameSet != frameSet){
         if(activeFrameSet){
            o._hMenuPanel.removeChild(activeFrameSet._menuBar._hPanel);
            o._frameBody.remove(activeFrameSet);
         }
         o._hMenuPanel.appendChild(frameSet._menuBar._hPanel);
         o._frameBody.push(frameSet);
         frameSet.psResize();
      }
      o._activeFrameSet = frameSet;
      if(name == EDsFrameSet.ProjectFrameSet){
      }else if(name == EDsFrameSet.ResourceFrameSet){
         frameSet.load();
      }else if(name == EDsFrameSet.MeshFrameSet){
         frameSet.loadByGuid(guid);
      }else{
         throw new TError('Unknown frameset. (name={1})', name);
      }
      return frameSet;
   }
   MO.FDsProjectWorkspace_findPropertyFrame = function FDsProjectWorkspace_findPropertyFrame(p){
      var o = this;
      var f = o._propertyFrames.get(p);
      if(!f){
         var fc = MO.Console.find(FFrameConsole);
         f = fc.get(o, p, o._framePreview._hContainer);
         f._workspace = o;
         o._propertyFrames.set(p, f);
      }
      return f;
   }
   MO.FDsProjectWorkspace_switchContent = function FDsProjectWorkspace_switchContent(typeCd){
      var o = this;
      o._resourceTypeCd = typeCd;
      o._searchContent.serviceSearch(typeCd, '', 40, 0);
   }
   MO.FDsProjectWorkspace_load = function FDsProjectWorkspace_load(){
      var o = this;
   }
   MO.FDsProjectWorkspace_dispose = function FDsProjectWorkspace_dispose(){
      var o = this;
      o.__base.FDuiWorkspace.dispose.call(o);
      o._propertyFrames.dispose();
      o._propertyFrames = null;
   }
}
with(MO){
   MO.FDsResourceCatalogContent = function FDsResourceCatalogContent(o){
      o = MO.Class.inherits(this, o, FDuiDataTreeView, MListenerSelected);
      o._activeSpace          = null;
      o._materials            = null;
      o.onBuild               = FDsResourceCatalogContent_onBuild;
      o.onLoadDisplay         = FDsResourceCatalogContent_onLoadDisplay;
      o.onNodeClick           = FDsResourceCatalogContent_onNodeClick;
      o.onNodeViewClick       = FDsResourceCatalogContent_onNodeViewClick;
      o.onNodeViewDoubleClick = FDsResourceCatalogContent_onNodeViewDoubleClick;
      o.lsnsSelect            = null;
      o.construct             = FDsResourceCatalogContent_construct;
      o.selectObject          = FDsResourceCatalogContent_selectObject;
      o.showObject            = FDsResourceCatalogContent_showObject;
      o.dispose               = FDsResourceCatalogContent_dispose;
      return o;
   }
   MO.FDsResourceCatalogContent_onBuild = function FDsResourceCatalogContent_onBuild(p){
      var o = this;
      o.__base.FDuiDataTreeView.onBuild.call(o, p);
      o.addNodeClickListener(o, o.onNodeClick);
      o.loadUrl('/cloud.describe.tree.ws?action=query&code=resource.catalog');
   }
   MO.FDsResourceCatalogContent_onLoadDisplay = function FDsResourceCatalogContent_onLoadDisplay(p){
      var o = this;
      var n = p._linkNode;
      o.buildRenderable(n, p);
   }
   MO.FDsResourceCatalogContent_onNodeClick = function FDsResourceCatalogContent_onNodeClick(t, n){
      var o = this;
   }
   MO.FDsResourceCatalogContent_onNodeViewClick = function FDsResourceCatalogContent_onNodeViewClick(p){
      var o = this;
   }
   MO.FDsResourceCatalogContent_onNodeViewDoubleClick = function FDsResourceCatalogContent_onNodeViewDoubleClick(p){
      var o = this;
   }
   MO.FDsResourceCatalogContent_construct = function FDsResourceCatalogContent_construct(){
      var o = this;
      o.__base.FDuiDataTreeView.construct.call(o);
      o._renderables = new TObjects();
      o._materials = new TObjects();
   }
   MO.FDsResourceCatalogContent_selectObject = function FDsResourceCatalogContent_selectObject(p){
      var o = this;
      if(p != null){
         o.processSelectedListener(p, true);
      }
   }
   MO.FDsResourceCatalogContent_showObject = function FDsResourceCatalogContent_showObject(p){
      var o = this;
   }
   MO.FDsResourceCatalogContent_dispose = function FDsResourceCatalogContent_dispose(){
      var o = this;
      o.__base.FDuiDataTreeView.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceCatalogToolBar = function FDsResourceCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName                   = 'resource.resource.CatalogToolBar';
      o._controlFolderCreateButton   = null;
      o._controlFolderDeleteButton   = null;
      o._controlFolderPropertyButton  = null;
      o._controlFolderOpenButton     = null;
      o._controlFolderCloseButton    = null;
      o._activeNodeGuid              = null;
      o.onBuilded                    = FDsResourceCatalogToolBar_onBuilded;
      o.onFolderCreateClick          = FDsResourceCatalogToolBar_onFolderCreateClick;
      o.onFolderDeleteLoad           = FDsResourceCatalogToolBar_onFolderDeleteLoad;
      o.onFolderDeleteExcute         = FDsResourceCatalogToolBar_onFolderDeleteExcute;
      o.onFolderDeleteClick          = FDsResourceCatalogToolBar_onFolderDeleteClick;
      o.onFolderPropertyClick        = FDsResourceCatalogToolBar_onFolderPropertyClick;
      o.onFolderOpenClick            = FDsResourceCatalogToolBar_onFolderOpenClick;
      o.onFolderCloseClick           = FDsResourceCatalogToolBar_onFolderCloseClick;
      o.construct                    = FDsResourceCatalogToolBar_construct;
      o.dispose                      = FDsResourceCatalogToolBar_dispose;
      return o;
   }
   MO.FDsResourceCatalogToolBar_onBuilded = function FDsResourceCatalogToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlFolderCreateButton.addClickListener(o, o.onFolderCreateClick);
      o._controlFolderDeleteButton.addClickListener(o, o.onFolderDeleteClick);
      o._controlFolderPropertyButton.addClickListener(o, o.onFolderPropertyClick);
      o._controlFolderOpenButton.addClickListener(o, o.onFolderOpenClick);
      o._controlFolderCloseButton.addClickListener(o, o.onFolderCloseClick);
   }
   MO.FDsResourceCatalogToolBar_onFolderCreateClick = function FDsResourceCatalogToolBar_onFolderCreateClick(event){
      var o = this;
      var parentGuid = null;
      var parentLabel = null;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(node){
         parentGuid = node.guid();
         parentLabel = node.label();
      }
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsResourceFolderDialog);
      dialog._workspace = o._workspace;
      dialog._frameSet = o._frameSet;
      dialog._parentGuid = parentGuid;
      dialog.setNodeParentLabel(parentLabel);
      dialog.setNodeLabel('');
      dialog.switchDataMode(EUiDataMode.Insert);
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsResourceCatalogToolBar_onFolderDeleteLoad = function FDsResourceCatalogToolBar_onFolderDeleteLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      var catalog = o._frameSet._catalogContent;
      var guid = o._activeNodeGuid;
      if(guid){
         var node = catalog.findByGuid(guid);
         node.removeSelf();
      }
      o._activeNodeGuid = null;
   }
   MO.FDsResourceCatalogToolBar_onFolderDeleteExcute = function FDsResourceCatalogToolBar_onFolderDeleteExcute(event){
      var o = this;
      if(event.resultCd != EResult.Success){
         return;
      }
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      o._activeNodeGuid = node._guid;
      var connection = MO.Console.find(FDrResourceConsole).doFolderDelete(node._guid);
      connection.addLoadListener(o, o.onFolderDeleteLoad);
   }
   MO.FDsResourceCatalogToolBar_onFolderDeleteClick = function FDsResourceCatalogToolBar_onFolderDeleteClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return MO.Console.find(FDuiMessageConsole).showInfo('请选中目录节点后，再点击操作。');
      }
      var dialog = MO.Console.find(FDuiMessageConsole).showConfirm('请确认是否删除当前目录？');
      dialog.addResultListener(o, o.onFolderDeleteExcute);
   }
   MO.FDsResourceCatalogToolBar_onFolderPropertyClick = function FDsResourceCatalogToolBar_onFolderPropertyClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return MO.Console.find(FDuiMessageConsole).showInfo('请选中目录节点后，再点击操作。');
      }
      var parentLabel = null;
      if(node._parent){
         parentLabel = node._parent.label();
      }
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsResourceFolderDialog);
      dialog._workspace = o._workspace;
      dialog._frameSet = o._frameSet;
      dialog._nodeGuid = node._guid;
      dialog.setNodeParentLabel(parentLabel);
      dialog.setNodeLabel(node.label());
      dialog.switchDataMode(EUiDataMode.Update);
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsResourceCatalogToolBar_onFolderOpenClick = function FDsResourceCatalogToolBar_onFolderOpenClick(event){
   }
   MO.FDsResourceCatalogToolBar_onFolderCloseClick = function FDsResourceCatalogToolBar_onFolderCloseClick(event){
   }
   MO.FDsResourceCatalogToolBar_construct = function FDsResourceCatalogToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsResourceCatalogToolBar_dispose = function FDsResourceCatalogToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceCreateDialog = function FDsResourceCreateDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName        = 'resource.resource.CreateDialog';
      o._nodeGuid         = null;
      o._controlNodeLabel = null;
      o._controlCode      = null;
      o._controlLabel     = null;
      o._controlConfirm   = null;
      o._controlCancel    = null;
      o.onBuilded         = FDsResourceCreateDialog_onBuilded;
      o.onConfirmLoad     = FDsResourceCreateDialog_onConfirmLoad;
      o.onConfirmClick    = FDsResourceCreateDialog_onConfirmClick;
      o.onCancelClick     = FDsResourceCreateDialog_onCancelClick;
      o.construct         = FDsResourceCreateDialog_construct;
      o.setNodeLabel      = FDsResourceCreateDialog_setNodeLabel;
      o.switchMode        = FDsResourceCreateDialog_switchMode;
      o.dispose           = FDsResourceCreateDialog_dispose;
      return o;
   }
   MO.FDsResourceCreateDialog_onBuilded = function FDsResourceCreateDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlNodeLabel.setEditAble(false);
      o._controlConfirm.addClickListener(o, o.onConfirmClick);
      o._controlCancel.addClickListener(o, o.onCancelClick);
   }
   MO.FDsResourceCreateDialog_onConfirmLoad = function FDsResourceCreateDialog_onConfirmLoad(event){
      var o = this;
      o.hide();
      MO.Console.find(FDuiDesktopConsole).hide();
      if(MO.Console.find(FDuiResultConsole).checkEvent(event)){
         var frame = o._frameSet._listContent;
         frame.serviceResearch();
      }
   }
   MO.FDsResourceCreateDialog_onConfirmClick = function FDsResourceCreateDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var code = o._controlCode.get();
      var label = o._controlLabel.get();
      var connection = null;
      switch(o._modeCd){
         case EE3sResource.Material:
            var material = MO.Class.create(FDrMaterial);
            material.setCode(code);
            material.setLabel(label);
            connection = MO.Console.find(FDrMaterialConsole).doCreate(material);
            break;
         case EE3sResource.Template:
            var template = MO.Class.create(FDrTemplate);
            template.setCode(code);
            template.setLabel(label);
            connection = MO.Console.find(FDrTemplateConsole).doCreate(template);
            break;
         case EE3sResource.Scene:
            var scene = MO.Class.create(FDrScene);
            scene.setCode(code);
            scene.setLabel(label);
            connection = MO.Console.find(FDrSceneConsole).doCreate(scene);
            break;
         default:
            throw new TError(o, 'Unknown mode. (mode_cd={1})', modeCd);
      }
      connection.addLoadListener(o, o.onConfirmLoad);
   }
   MO.FDsResourceCreateDialog_onCancelClick = function FDsResourceCreateDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsResourceCreateDialog_construct = function FDsResourceCreateDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsResourceCreateDialog_setNodeLabel = function FDsResourceCreateDialog_setNodeLabel(label){
      var o = this;
      o._controlNodeLabel.set(label);
   }
   MO.FDsResourceCreateDialog_switchMode = function FDsResourceCreateDialog_switchMode(modeCd){
      var o = this;
      o._modeCd = modeCd;
      switch(modeCd){
         case EE3sResource.Material:
            o.setLabel('创建材质');
            break;
         case EE3sResource.Template:
            o.setLabel('创建模板');
            break;
         case EE3sResource.Scene:
            o.setLabel('创建场景');
            break;
         default:
            throw new TError(o, 'Unknown mode. (mode_cd={1})', modeCd);
      }
      o._controlCode.set('');
      o._controlLabel.set('');
   }
   MO.FDsResourceCreateDialog_dispose = function FDsResourceCreateDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceFolderDialog = function FDsResourceFolderDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.resource.FolderDialog';
      o._dataModeCd           = null;
      o._controlParentLabel   = null;
      o._controlLabel         = null;
      o._controlConfirmButton = null;
      o._controlCancelButton  = null;
      o.onBuilded             = FDsResourceFolderDialog_onBuilded;
      o.onConfirmLoad         = FDsResourceFolderDialog_onConfirmLoad;
      o.onConfirmClick        = FDsResourceFolderDialog_onConfirmClick;
      o.onCancelClick         = FDsResourceFolderDialog_onCancelClick;
      o.construct             = FDsResourceFolderDialog_construct;
      o.setNodeParentLabel    = FDsResourceFolderDialog_setNodeParentLabel;
      o.setNodeLabel          = FDsResourceFolderDialog_setNodeLabel;
      o.switchDataMode        = FDsResourceFolderDialog_switchDataMode;
      o.dispose               = FDsResourceFolderDialog_dispose;
      return o;
   }
   MO.FDsResourceFolderDialog_onBuilded = function FDsResourceFolderDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlParentLabel.setEditAble(false);
      o._controlConfirmButton.addClickListener(o, o.onConfirmClick);
      o._controlCancelButton.addClickListener(o, o.onCancelClick);
   }
   MO.FDsResourceFolderDialog_onConfirmLoad = function FDsResourceFolderDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
      var catalog = o._frameSet._catalogContent;
      if(o._dataModeCd == EUiDataMode.Insert){
         if(o._parentGuid){
            var node = catalog.findByGuid(o._parentGuid);
            catalog.loadNode(node);
         }else{
            catalog.loadService();
         }
      }else{
         var label = o._controlLabel.get();
         var node = catalog.focusNode();
         node.setLabel(label);
      }
   }
   MO.FDsResourceFolderDialog_onConfirmClick = function FDsResourceFolderDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var label = o._controlLabel.get();
      var resourceConsole = MO.Console.find(FDrResourceConsole);
      var connection = null;
      if(o._dataModeCd == EUiDataMode.Insert){
         connection = resourceConsole.doFolderCreate(o._parentGuid, null, label);
      }else{
         connection = resourceConsole.doFolderUpdate(o._nodeGuid, null, label);
      }
      connection.addLoadListener(o, o.onConfirmLoad);
   }
   MO.FDsResourceFolderDialog_onCancelClick = function FDsResourceFolderDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsResourceFolderDialog_construct = function FDsResourceFolderDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsResourceFolderDialog_setNodeParentLabel = function FDsResourceFolderDialog_setNodeParentLabel(label){
      this._controlParentLabel.set(label);
   }
   MO.FDsResourceFolderDialog_setNodeLabel = function FDsResourceFolderDialog_setNodeLabel(label){
      this._controlLabel.set(label);
   }
   MO.FDsResourceFolderDialog_switchDataMode = function FDsResourceFolderDialog_switchDataMode(modeCd){
      var o = this;
      o._dataModeCd = modeCd;
      if(modeCd == EUiDataMode.Insert){
         o.setLabel('新建资源目录');
      }else if(modeCd == EUiDataMode.Update){
         o.setLabel('资源目录属性');
      }
   }
   MO.FDsResourceFolderDialog_dispose = function FDsResourceFolderDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceFrameSet = function FDsResourceFrameSet(o){
      o = MO.Class.inherits(this, o, FDsFrameSet);
      o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleCatalogContent  = MO.Class.register(o, new MO.AStyle('_styleCatalogContent', 'Catalog_Content'));
      o._styleListContent     = MO.Class.register(o, new MO.AStyle('_styleListContent', 'List_Content'));
      o._stylePropertyContent = MO.Class.register(o, new MO.AStyle('_stylePropertyContent', 'Property_Content'));
      o._resourceTypeCd       = 'picture';
      o._frameCatalog         = null;
      o._frameCatalogToolbar  = null;
      o._frameCatalogContent  = null;
      o._frameSearch          = null;
      o._frameSearchToolbar   = null;
      o._frameSearchContent   = null;
      o._framePreview         = null;
      o._framePreviewToolbar  = null;
      o._framePreviewContent  = null;
      o.onBuilded             = FDsResourceFrameSet_onBuilded;
      o.onCatalogSelected     = FDsResourceFrameSet_onCatalogSelected;
      o.construct             = FDsResourceFrameSet_construct;
      o.switchContent         = FDsResourceFrameSet_switchContent;
      o.load                  = FDsResourceFrameSet_load;
      o.dispose               = FDsResourceFrameSet_dispose;
      return o;
   }
   MO.FDsResourceFrameSet_onBuilded = function FDsResourceFrameSet_onBuilded(p){
      var o = this;
      o.__base.FDsFrameSet.onBuilded.call(o, p);
   }
   MO.FDsResourceFrameSet_onCatalogSelected = function FDsResourceFrameSet_onCatalogSelected(select, flag){
      var o = this;
      var space = o._activeSpace;
      if(!space){
         return;
      }
      o.hidePropertyFrames();
      if(MO.Class.isClass(select, FE3dStage)){
         var frame = o.findPropertyFrame(EDsFrame.MeshSpacePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dTechnique)){
         var frame = o.findPropertyFrame(EDsFrame.MeshTechniquePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dRegion)){
         var frame = o.findPropertyFrame(EDsFrame.MeshRegionPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dCamera)){
         var frame = o.findPropertyFrame(EDsFrame.MeshCameraPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dDirectionalLight)){
         var frame = o.findPropertyFrame(EDsFrame.MeshLightPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dMeshDisplay)){
         var frame = o.findPropertyFrame(EDsFrame.MeshDisplayPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dMaterial)){
         var frame = o.findPropertyFrame(EDsFrame.MeshMaterialPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dMeshRenderable)){
         var frame = o.findPropertyFrame(EDsFrame.MeshRenderablePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else{
         throw new TError('Unknown select object type. (select={1})', select);
      }
   }
   MO.FDsResourceFrameSet_construct = function FDsResourceFrameSet_construct(){
      var o = this;
      o.__base.FDsFrameSet.construct.call(o);
   }
   MO.FDsResourceFrameSet_switchContent = function FDsResourceFrameSet_switchContent(typeCd){
      var o = this;
      o._resourceTypeCd = typeCd;
      o._listContent.serviceSearch(typeCd, '', '', 40, 0);
   }
   MO.FDsResourceFrameSet_load = function FDsResourceFrameSet_load(){
      var o = this;
      o._listToolBar.storageLoad();
   }
   MO.FDsResourceFrameSet_dispose = function FDsResourceFrameSet_dispose(){
      var o = this;
      o.__base.FDsFrameSet.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceImportDialog = function FDsResourceImportDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.resource.ImportDialog';
      o._nodeGuid             = null;
      o._controlPrivateButton = null;
      o._controlTeamButton    = null;
      o._controlShareButton   = null;
      o.onBuilded             = FDsResourceImportDialog_onBuilded;
      o.onFileChange          = FDsResourceImportDialog_onFileChange;
      o.onFileLoaded          = FDsResourceImportDialog_onFileLoaded;
      o.onConfirmLoad         = FDsResourceImportDialog_onConfirmLoad;
      o.onConfirmClick        = FDsResourceImportDialog_onConfirmClick;
      o.onCancelClick         = FDsResourceImportDialog_onCancelClick;
      o.construct             = FDsResourceImportDialog_construct;
      o.setNodeLabel          = FDsResourceImportDialog_setNodeLabel;
      o.switchMode            = FDsResourceImportDialog_switchMode;
      o.dispose               = FDsResourceImportDialog_dispose;
      return o;
   }
   MO.FDsResourceImportDialog_onBuilded = function FDsResourceImportDialog_onBuilded(p){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, p);
      o._controlNodeLabel.setEditAble(false);
      o._controlFile.addDataChangedListener(o, o.onFileChange);
      o._controlConfirmButton.addClickListener(o, o.onConfirmClick);
      o._controlCancelButton.addClickListener(o, o.onCancelClick);
   }
   MO.FDsResourceImportDialog_onFileChange = function FDsResourceImportDialog_onFileChange(event){
      var o = this;
      var name = o._controlFile.get();
      var code = RFile.name(name);
      if(MO.Lang.String.isEmpty(o._controlCode.get())){
         o._controlCode.set(code);
      }
      if(MO.Lang.String.isEmpty(o._controlLabel.get())){
         o._controlLabel.set(code);
      }
   }
   MO.FDsResourceImportDialog_onFileLoaded = function FDsResourceImportDialog_onFileLoaded(event){
      var o = this;
      var reader = o._fileReader;
      var code = o._controlCode.get();
      var label = o._controlLabel.get();
      var url = null;
      if(o._modeCd == EE3sResource.Bitmap){
         url = '/cloud.resource.bitmap.wv?do=importData';
      }else if(o._modeCd == EE3sResource.Model){
         url = '/cloud.resource.model.wv?do=importData';
      }else{
         throw new TError(o, 'Type is invalid.');
      }
      if(o._nodeGuid){
         url += '&node_guid=' + o._nodeGuid;
      }
      url += '&code=' + code + '&label=' + label + '&data_length=' + reader.length() + '&file_name=' + reader.fileName();
      url = RBrowser.urlEncode(url);
      var connection = MO.Console.find(FHttpConsole).send(url, reader.data());
      connection.addLoadListener(o, o.onConfirmLoad);
      o._fileReader = MO.Lang.Object.dispose(reader);
   }
   MO.FDsResourceImportDialog_onConfirmLoad = function FDsResourceImportDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
      var frame = o._frameSet._listContent;
      frame.serviceResearch();
   }
   MO.FDsResourceImportDialog_onConfirmClick = function FDsResourceImportDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var file = o._controlFile._hInput.files[0];
      var reader = o._fileReader = MO.Class.create(FFileReader);
      reader.addLoadListener(o, o.onFileLoaded);
      reader.loadFile(file);
   }
   MO.FDsResourceImportDialog_onCancelClick = function FDsResourceImportDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsResourceImportDialog_construct = function FDsResourceImportDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsResourceImportDialog_setNodeLabel = function FDsResourceImportDialog_setNodeLabel(label){
      var o = this;
      o._controlNodeLabel.set(label);
   }
   MO.FDsResourceImportDialog_switchMode = function FDsResourceImportDialog_switchMode(modeCd){
      var o = this;
      o._modeCd = modeCd;
      switch(modeCd){
         case EE3sResource.Bitmap:
            o.setLabel('导入图片资源');
            break;
         case EE3sResource.Model:
            o.setLabel('导入模型资源');
            break;
         default:
            throw new TError(o, 'Unknown mode. (mode_cd={1})', modeCd);
      }
      o._controlCode.set('');
      o._controlLabel.set('');
   }
   MO.FDsResourceImportDialog_dispose = function FDsResourceImportDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceListContent = function FDsResourceListContent(o){
      o = MO.Class.inherits(this, o, FDuiListView);
      o._contentFlag      = null;
      o._contentTypeCd    = EE3sResource.All;
      o._contentSerach    = '';
      o._contentOrder     = '';
      o._contentPageSize  = 40;
      o._contentPageCount = 0;
      o._contentPage      = 0;
      o._activeItem       = null;
      o._activeGuid       = null;
      o._refreshButton    = null;
      o._saveButton       = null;
      o._runButton        = null;
      o.onServiceLoad     = FDsResourceListContent_onServiceLoad;
      o.construct         = FDsResourceListContent_construct;
      o.doClickItem       = FDsResourceListContent_doClickItem;
      o.doDoubleClickItem = FDsResourceListContent_doDoubleClickItem;
      o.serviceSearch     = FDsResourceListContent_serviceSearch;
      o.serviceResearch   = FDsResourceListContent_serviceResearch;
      o.dispose           = FDsResourceListContent_dispose;
      return o;
   }
   MO.FDsResourceListContent_onServiceLoad = function FDsResourceListContent_onServiceLoad(p){
      var o = this;
      var xitems = p.root.findNode('ResourceCollection');
      var pageSize = xitems.getInteger('page_size');
      var pageCount = xitems.getInteger('page_count');
      var page = xitems.getInteger('page');
      o._frameSet._listToolBar.setNavigator(pageSize, pageCount, page);
      o.clear();
      var xnodes = xitems.nodes();
      var count = xnodes.count();
      for(var i = 0; i < count; i++){
         var xnode = xnodes.getAt(i);
         if(xnode.isName('Resource')){
            var item = o.createItem(FDsResourceListItem);
            item.propertyLoad(xnode);
            item._guid = xnode.get('guid');
            item._typeCd = xnode.get('type_cd');
            item._shareCd = xnode.get('share_cd');
            item._code = xnode.get('code');
            item._updateDate = xnode.get('update_date');
            item.setTypeLabel(item._typeCd);
            item.setLabel(xnode.get('code') + ' - ' + xnode.get('label'));
            item.refreshStyle();
            o.push(item);
         }
      }
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsResourceListContent_construct = function FDsResourceListContent_construct(){
      var o = this;
      o.__base.FDuiListView.construct.call(o);
   }
   MO.FDsResourceListContent_doClickItem = function FDsResourceListContent_doClickItem(control){
      var o = this;
      o.__base.FDuiListView.doClickItem.call(o, control);
   }
   MO.FDsResourceListContent_doDoubleClickItem = function FDsResourceListContent_doDoubleClickItem(control){
      var o = this;
      o.__base.FDuiListView.doDoubleClickItem.call(o, control)
      var guid = control._guid;
      o._activeItem = control;
      o._activeGuid = control._guid;
      var workspace = o._frameSet._workspace;
      var typeCd = control._typeCd;
      if(typeCd == EE3sResource.Bitmap){
         workspace.selectFrameSet(EDsFrameSet.PrivateBitmapFrameSet, guid);
      }else if(typeCd == EE3sResource.Material){
         workspace.selectFrameSet(EDsFrameSet.PrivateMaterialFrameSet, guid);
      }else if(typeCd == EE3sResource.Model){
         workspace.selectFrameSet(EDsFrameSet.PrivateModelFrameSet, guid);
      }else if(typeCd == EE3sResource.Template){
         workspace.selectFrameSet(EDsFrameSet.PrivateTemplateFrameSet, guid);
      }else if(typeCd == EE3sResource.Scene){
         workspace.selectFrameSet(EDsFrameSet.PrivateSceneFrameSet, guid);
      }else{
         throw new TError(o, 'Unsupport resource format.');
      }
   }
   MO.FDsResourceListContent_serviceSearch = function FDsResourceListContent_serviceSearch(typeCd, search, order, pageSize, page, force){
      var o = this;
      if(typeCd == null){
         typeCd = o._contentTypeCd;
      }
      if(search == null){
         search = o._contentSerach;
      }
      if(order == null){
         order = o._contentOrder;
      }
      if(pageSize == null){
         pageSize = o._contentPageSize;
      }
      if(page == null){
         page = o._contentPage;
      }
      if(!force){
         var flag = typeCd + '|' + search + '|' + order + '|' + pageSize + '|' + page;
         if(o._contentFlag == flag){
            return;
         }
      }
      o._contentFlag = flag;
      o._contentTypeCd = typeCd;
      o._contentSerach = search;
      o._contentOrder = order;
      o._contentPageSize = pageSize;
      o._contentPage = page;
      MO.Console.find(FDuiDesktopConsole).showLoading();
      var connection = MO.Console.find(FDrResourceConsole).doList(o._contentTypeCd, o._contentSerach, o._contentOrder, o._contentPageSize, o._contentPage);
      connection.addLoadListener(o, o.onServiceLoad);
   }
   MO.FDsResourceListContent_serviceResearch = function FDsResourceListContent_serviceResearch(){
      var o = this;
      o.serviceSearch(o._contentTypeCd, o._contentSerach, o._contentOrder, o._contentPageSize, o._contentPage, true);
   }
   MO.FDsResourceListContent_dispose = function FDsResourceListContent_dispose(){
      var o = this;
      o.__base.FDuiListView.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceListItem = function FDsResourceListItem(o){
      o = MO.Class.inherits(this, o, FDuiListViewItem);
      o._styleTypePanel        = MO.Class.register(o, new MO.AStyle('_styleTypePanel'));
      o._styleTypePrivateLabel = MO.Class.register(o, new MO.AStyle('_styleTypePublicLabel'));
      o._styleTypePublicLabel  = MO.Class.register(o, new MO.AStyle('_styleTypePrivateLabel'));
      o.onBuild         = FDsResourceListItem_onBuild;
      o.setTypeLabel    = FDsResourceListItem_setTypeLabel;
      o.refreshStyle    = FDsResourceListItem_refreshStyle;
      return o;
   }
   MO.FDsResourceListItem_onBuild = function FDsResourceListItem_onBuild(p){
      var o = this;
      o.__base.FDuiListViewItem.onBuild.call(o, p);
      var h = o._hPanel;
      h.style.width = '200px';
      h.style.height = '150px';
      o._hLine1.className = o.styleName('TypePanel');
      o._hLine1.vAlign = 'top';
      o._hTypeLabel = MO.Window.Builder.appendDiv(o._hLine1, o.styleName('TypePrivateLabel'));
   }
   MO.FDsResourceListItem_setTypeLabel = function FDsResourceListItem_setTypeLabel(label){
      this._hTypeLabel.innerHTML = label;
   }
   MO.FDsResourceListItem_refreshStyle = function FDsResourceListItem_refreshStyle(){
      var o = this;
      if(o._shareCd == 'Public'){
         o._hTypeLabel.className = o.styleName('TypePublicLabel');
      }else{
         o._hTypeLabel.className = o.styleName('TypePrivateLabel');
      }
      var url = '/cloud.resource.preview.wv?type_cd=' + o._typeCd + '&guid=' + o._guid + '&update_date=' + o._updateDate;
      o._hForm.style.backgroundImage = 'url("' + url + '")';
   }
}
with(MO){
   MO.FDsResourceListToolBar = function FDsResourceListToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar, MUiStorage);
      o._dropButton       = null;
      o._selectButton     = null;
      o._translateButton  = null;
      o._rotationButton   = null;
      o._scaleButton      = null;
      o._lookFrontButton  = null;
      o._lookUpButton     = null;
      o._lookLeftButton   = null;
      o._playButton       = null;
      o._viewButton       = null;
      o.onBuilded         = FDsResourceListToolBar_onBuilded;
      o.onSearchClick     = FDsResourceListToolBar_onSearchClick;
      o.onNavigatorClick  = FDsResourceListToolBar_onNavigatorClick;
      o.onTypeClick       = FDsResourceListToolBar_onTypeClick;
      o.construct         = FDsResourceListToolBar_construct;
      o.makeTypeCd        = FDsResourceListToolBar_makeTypeCd;
      o.setNavigator      = FDsResourceListToolBar_setNavigator;
      o.doNavigator       = FDsResourceListToolBar_doNavigator;
      o.storageLoad       = FDsResourceListToolBar_storageLoad;
      o.dispose           = FDsResourceListToolBar_dispose;
      return o;
   }
   MO.FDsResourceListToolBar_onBuilded = function FDsResourceListToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlSearchEdit.addClickListener(o, o.onSearchClick);
      o._controlFirstButton.addClickListener(o, o.onNavigatorClick);
      o._controlPriorButton.addClickListener(o, o.onNavigatorClick);
      o._controlNextButton.addClickListener(o, o.onNavigatorClick);
      o._controlLastButton.addClickListener(o, o.onNavigatorClick);
      o._controlTypeAll.addClickListener(o, o.onTypeClick);
      o._controlTypeNone.addClickListener(o, o.onTypeClick);
      o._controlTypeBitmap.addClickListener(o, o.onTypeClick);
      o._controlTypeBitmap.check(true);
      o._controlTypeMaterial.addClickListener(o, o.onTypeClick);
      o._controlTypeMaterial.check(true);
      o._controlTypeModel.addClickListener(o, o.onTypeClick);
      o._controlTypeModel.check(true);
      o._controlTypeTemplate.addClickListener(o, o.onTypeClick);
      o._controlTypeTemplate.check(true);
      o._controlTypeScene.addClickListener(o, o.onTypeClick);
      o._controlTypeScene.check(true);
   }
   MO.FDsResourceListToolBar_onSearchClick = function FDsResourceListToolBar_onSearchClick(p){
      this.doNavigator(0);
   }
   MO.FDsResourceListToolBar_onNavigatorClick = function FDsResourceListToolBar_onNavigatorClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      var page = o._contentPage;
      switch(name){
         case 'firstButton':
            page = 0;
            break;
         case 'priorButton':
            page--;
            break;
         case 'nextButton':
            page++;
            break;
         case 'lastButton':
            page = o._contentPageCount - 1;
            break;
      }
      o.doNavigator(page);
   }
   MO.FDsResourceListToolBar_onTypeClick = function FDsResourceListToolBar_onTypeClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      var page = o._contentPage;
      switch(name){
         case 'typeAll':
            o._controlTypeBitmap.check(true);
            o._controlTypeMaterial.check(true);
            o._controlTypeModel.check(true);
            o._controlTypeTemplate.check(true);
            o._controlTypeScene.check(true);
            break;
         case 'typeNone':
            o._controlTypeBitmap.check(false);
            o._controlTypeMaterial.check(false);
            o._controlTypeModel.check(false);
            o._controlTypeTemplate.check(false);
            o._controlTypeScene.check(false);
            break;
         case 'typeBitmap':
            page = 0;
            break;
         case 'typeMaterial':
            page--;
            break;
         case 'typeMesh':
            page++;
            break;
         case 'typeTemplate':
            page = o._contentPageCount - 1;
            break;
         case 'typeScene':
            page = o._contentPageCount - 1;
            break;
      }
      var typeCd = o.makeTypeCd();
      var search = o._controlSearchEdit.text();
      o._frameSet._listContent.serviceSearch(typeCd, search, '', o._contentPageSize, 0)
      o.storageSet('resource_type_cd', typeCd);
      o.storageSet('control_type_bitmap:check', RBoolean.toString(o._controlTypeBitmap.isCheck()))
      o.storageSet('control_type_material:check', RBoolean.toString(o._controlTypeMaterial.isCheck()))
      o.storageSet('control_type_model:check', RBoolean.toString(o._controlTypeModel.isCheck()))
      o.storageSet('control_type_template:check', RBoolean.toString(o._controlTypeTemplate.isCheck()))
      o.storageSet('control_type_scene:check', RBoolean.toString(o._controlTypeScene.isCheck()))
      o.storageUpdate();
   }
   MO.FDsResourceListToolBar_construct = function FDsResourceListToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsResourceListToolBar_makeTypeCd = function FDsResourceListToolBar_makeTypeCd(){
      var o = this;
      var types = '';
      if(o._controlTypeBitmap.isCheck()){
         types += '|Bitmap';
      }
      if(o._controlTypeMaterial.isCheck()){
         types += '|Material';
      }
      if(o._controlTypeModel.isCheck()){
         types += '|Model';
      }
      if(o._controlTypeTemplate.isCheck()){
         types += '|Template';
      }
      if(o._controlTypeScene.isCheck()){
         types += '|Scene';
      }
      if(types != ''){
         types = types.substring(1);
      }
      if(MO.Lang.String.isEmpty(types)){
         types = 'All';
      }
      return types;
   }
   MO.FDsResourceListToolBar_setNavigator = function FDsResourceListToolBar_setNavigator(pageSize, pageCount, page){
      var o = this;
      o._contentPageSize = pageSize;
      o._contentPageCount = pageCount;
      o._contentPage = page;
      o._controlPageEdit.setText(page);
   }
   MO.FDsResourceListToolBar_doNavigator = function FDsResourceListToolBar_doNavigator(page){
      var o = this;
      var typeCd = o.makeTypeCd();
      var search = o._controlSearchEdit.text();
      page = RInteger.toRange(page, 0, o._contentPageCount);
      if((o._contentTypeCd != typeCd) || (o._contentSerach != search) || (o._contentPage != page)){
         o._frameSet._listContent.serviceSearch(typeCd, search, '', o._contentPageSize, page)
      }
      o._contentTypeCd = typeCd;
      o._contentSerach = search;
   }
   MO.FDsResourceListToolBar_storageLoad = function FDsResourceListToolBar_storageLoad(){
      var o = this;
      o._controlTypeBitmap.check(o.storageGetBoolean('control_type_bitmap:check', true));
      o._controlTypeMaterial.check(o.storageGetBoolean('control_type_material:check', true));
      o._controlTypeModel.check(o.storageGetBoolean('control_type_model:check', true));
      o._controlTypeTemplate.check(o.storageGetBoolean('control_type_template:check', true));
      o._controlTypeScene.check(o.storageGetBoolean('control_type_scene:check', true));
      var typeCd = o.makeTypeCd();
      var types = o.storageGet('resource_type_cd', 'All');
      var search = o._controlSearchEdit.text();
      o._frameSet._listContent.serviceSearch(types, search, '', o._contentPageSize, 0)
   }
   MO.FDsResourceListToolBar_dispose = function FDsResourceListToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceMenuBar = function FDsResourceMenuBar(o){
      o = MO.Class.inherits(this, o, FDuiMenuBar);
      o._controlImportPicture  = null;
      o._controlImportModel    = null;
      o._controlCreateMaterial = null;
      o._controlCreateTemplate = null;
      o._controlCreateScene    = null;
      o._controlDelete         = null;
      o._controlShareOpen      = null;
      o._controlShareClose     = null;
      o.onImportPictureClick   = FDsResourceMenuBar_onImportPictureClick;
      o.onImportModelClick     = FDsResourceMenuBar_onImportModelClick;
      o.onCreateMaterialClick  = FDsResourceMenuBar_onCreateMaterialClick;
      o.onCreateTemplateClick  = FDsResourceMenuBar_onCreateTemplateClick;
      o.onCreateSceneClick     = FDsResourceMenuBar_onCreateSceneClick;
      o.onDeleteLoad           = FDsResourceMenuBar_onDeleteLoad;
      o.onDeleteExecute        = FDsResourceMenuBar_onDeleteExecute;
      o.onDeleteClick          = FDsResourceMenuBar_onDeleteClick;
      o.onShareLoad            = FDsResourceMenuBar_onShareLoad;
      o.onShareClick           = FDsResourceMenuBar_onShareClick;
      o.construct              = FDsResourceMenuBar_construct;
      o.dispose                = FDsResourceMenuBar_dispose;
      return o;
   }
   MO.FDsResourceMenuBar_onImportPictureClick = function FDsResourceMenuBar_onImportPictureClick(p){
      var o = this;
      var frameSet = o._workspace._activeFrameSet;
      var catalog = frameSet._catalogContent;
      var node = catalog.focusNode();
      var nodeGuid = null;
      var nodeLabel = null;
      if(node){
         nodeGuid = node.guid();
         nodeLabel = node.label();
      }
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsResourceImportDialog);
      dialog._frameSet = o._frameSet;
      dialog._workspace = o._workspace;
      dialog._nodeGuid = nodeGuid;
      dialog.setNodeLabel(nodeLabel);
      dialog.switchMode(EE3sResource.Bitmap);
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsResourceMenuBar_onImportModelClick = function FDsResourceMenuBar_onImportModelClick(p){
      var o = this;
      var frameSet = o._workspace._activeFrameSet;
      var catalog = frameSet._catalogContent;
      var node = catalog.focusNode();
      var nodeGuid = null;
      var nodeLabel = null;
      if(node){
         nodeGuid = node.guid();
         nodeLabel = node.label();
      }
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsResourceImportDialog);
      dialog._frameSet = o._frameSet;
      dialog._workspace = o._workspace;
      dialog._nodeGuid = nodeGuid;
      dialog.setNodeLabel(nodeLabel);
      dialog.switchMode(EE3sResource.Model);
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsResourceMenuBar_onCreateMaterialClick = function FDsResourceMenuBar_onCreateMaterialClick(){
      var o = this;
      var frameSet = o._workspace._activeFrameSet;
      var catalog = frameSet._catalogContent;
      var node = catalog.focusNode();
      var nodeGuid = null;
      var nodeLabel = null;
      if(node){
         nodeGuid = node.guid();
         nodeLabel = node.label();
      }
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsResourceCreateDialog);
      dialog._frameSet = o._frameSet;
      dialog._workspace = o._workspace;
      dialog._nodeGuid = nodeGuid;
      dialog.setNodeLabel(nodeLabel);
      dialog.switchMode(EE3sResource.Material);
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsResourceMenuBar_onCreateTemplateClick = function FDsResourceMenuBar_onCreateTemplateClick(){
      var o = this;
      var frameSet = o._workspace._activeFrameSet;
      var catalog = frameSet._catalogContent;
      var node = catalog.focusNode();
      var nodeGuid = null;
      var nodeLabel = null;
      if(node){
         nodeGuid = node.guid();
         nodeLabel = node.label();
      }
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsResourceCreateDialog);
      dialog._frameSet = o._frameSet;
      dialog._workspace = o._workspace;
      dialog._nodeGuid = nodeGuid;
      dialog.setNodeLabel(nodeLabel);
      dialog.switchMode(EE3sResource.Template);
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsResourceMenuBar_onCreateSceneClick = function FDsResourceMenuBar_onCreateSceneClick(){
      var o = this;
      var frameSet = o._workspace._activeFrameSet;
      var catalog = frameSet._catalogContent;
      var node = catalog.focusNode();
      var nodeGuid = null;
      var nodeLabel = null;
      if(node){
         nodeGuid = node.guid();
         nodeLabel = node.label();
      }
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsResourceCreateDialog);
      dialog._frameSet = o._frameSet;
      dialog._workspace = o._workspace;
      dialog._nodeGuid = nodeGuid;
      dialog.setNodeLabel(nodeLabel);
      dialog.switchMode(EE3sResource.Scene);
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsResourceMenuBar_onDeleteLoad = function FDsResourceMenuBar_onDeleteLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      var frame = o._frameSet._listContent;
      frame.serviceResearch();
   }
   MO.FDsResourceMenuBar_onDeleteExecute = function FDsResourceMenuBar_onDeleteExecute(event){
      var o = this;
      if(event.resultCd != EResult.Success){
         MO.Console.find(FDuiDesktopConsole).hide();
         return
      }
      var item = o._frameSet._listContent.focusItem();
      var typeCd = item._typeCd;
      var guid = item._guid;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = MO.Console.find(FDrResourceConsole).doDelete(typeCd, guid);
      connection.addLoadListener(o, o.onDeleteLoad);
   }
   MO.FDsResourceMenuBar_onDeleteClick = function FDsResourceMenuBar_onDeleteClick(event){
      var o = this;
      var item = o._frameSet._listContent.focusItem();
      if(!item){
         return alert('请选中后再点击删除');
      }
      var dialog = MO.Console.find(FDuiMessageConsole).showConfirm('请确认是否删除当前资源？');
      dialog.addResultListener(o, o.onDeleteExecute);
   }
   MO.FDsResourceMenuBar_onShareLoad = function FDsResourceMenuBar_onShareLoad(){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsResourceMenuBar_onShareClick = function FDsResourceMenuBar_onShareClick(event){
      var o = this;
      var item = o._frameSet._listContent.focusItem();
      if(!item){
         return alert('请选中后再点击删除');
      }
      var sender = event.sender;
      var name = sender.name();
      var shareCd = null;
      if(name == 'shareOpen'){
         shareCd = 'Public';
      }else{
         shareCd = 'Private';
      }
      var guid = item._guid;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = MO.Console.find(FDrResourceConsole).doShare(guid, shareCd);
      connection.addLoadListener(o, o.onShareLoad);
   }
   MO.FDsResourceMenuBar_construct = function FDsResourceMenuBar_construct(){
      var o = this;
      o.__base.FDuiMenuBar.construct.call(o);
   }
   MO.FDsResourceMenuBar_dispose = function FDsResourceMenuBar_dispose(){
      var o = this;
      o.__base.FDuiMenuBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourcePropertyContent = function FDsResourcePropertyContent(o){
      o = MO.Class.inherits(this, o, FDsCanvas);
      o._activeSpace         = null;
      o._canvasModeCd        = EDsCanvasMode.Drop;
      o._canvasMoveCd        = EDsCanvasDrag.Unknown;
      o._optionRotation      = false;
      o._rotation            = null;
      o._capturePosition     = null;
      o._captureMatrix       = null;
      o._captureRotation     = null;
      o._dimensional         = null;
      o._selectObject        = null;
      o._selectBoundBox      = null;
      o._selectRenderables   = null;
      o._cameraMoveRate      = 8;
      o._cameraKeyRotation   = 3;
      o._cameraMouseRotation = 0.005;
      o._templateMatrix      = null;
      o._templateRenderable  = null;
      o._templateFace        = null;
      o._templateTranslation = null;
      o._templateRotation    = null;
      o._templateScale       = null;
      o._templateViewScale   = 0.05;
      o.onBuild              = FDsResourcePropertyContent_onBuild;
      o.onMouseCaptureStart  = FDsResourcePropertyContent_onMouseCaptureStart;
      o.onMouseCapture       = FDsResourcePropertyContent_onMouseCapture;
      o.onMouseCaptureStop   = FDsResourcePropertyContent_onMouseCaptureStop;
      o.onEnterFrame         = FDsResourcePropertyContent_onEnterFrame;
      o.onMeshLoad           = FDsResourcePropertyContent_onMeshLoad;
      o.oeResize             = FDsResourcePropertyContent_oeResize;
      o.oeRefresh            = FDsResourcePropertyContent_oeRefresh;
      o.construct            = FDsResourcePropertyContent_construct;
      o.innerSelectDisplay   = FDsResourcePropertyContent_innerSelectDisplay;
      o.innerSelectLayer     = FDsResourcePropertyContent_innerSelectLayer;
      o.selectNone           = FDsResourcePropertyContent_selectNone;
      o.selectDisplay        = FDsResourcePropertyContent_selectDisplay;
      o.selectMaterial       = FDsResourcePropertyContent_selectMaterial;
      o.selectRenderable     = FDsResourcePropertyContent_selectRenderable;
      o.switchRotation       = FDsResourcePropertyContent_switchRotation;
      o.reloadRegion         = FDsResourcePropertyContent_reloadRegion;
      o.loadMeshByGuid       = FDsResourcePropertyContent_loadMeshByGuid;
      o.loadMeshByCode       = FDsResourcePropertyContent_loadMeshByCode;
      o.dispose              = FDsResourcePropertyContent_dispose;
      return o;
   }
   MO.FDsResourcePropertyContent_onBuild = function FDsResourcePropertyContent_onBuild(p){
      var o = this;
      o.__base.FDsCanvas.onBuild.call(o, p);
   }
   MO.FDsResourcePropertyContent_onMouseCaptureStart = function FDsResourcePropertyContent_onMouseCaptureStart(p){
      var o = this;
      var s = o._activeSpace;
      if(!s){
         return;
      }
      var r = o._activeSpace.region();
      var st = MO.Console.find(FG3dTechniqueConsole).find(o._graphicContext, FG3dSelectTechnique);
      var r = st.test(r, p.offsetX, p.offsetY);
      o.selectRenderable(r);
      o._capturePosition.set(p.clientX, p.clientY);
      o._captureRotation.assign(s.camera()._rotation);
      if(r){
         var d = r.display();
         o._captureMatrix.assign(d.matrix());
      }
      o._templateMatrix.identity();
      if(o._templateFace){
         o._templateFaceMatrix.assign(o._templateFace.matrix());
         var rs = o._selectRenderables;
         for(var i = rs.count() - 1; i >= 0; i--){
            var r = rs.getAt(i);
            if(!r._dragMatrix){
               r._dragMatrix = new MO.SMatrix3d();
            }
            r._dragMatrix.assign(r.matrix());
         }
      }
      RHtml.cursorSet(o._hPanel, EUiCursor.Pointer);
   }
   MO.FDsResourcePropertyContent_onMouseCapture = function FDsResourcePropertyContent_onMouseCapture(p){
      var o = this;
      var s = o._activeSpace;
      if(!s){
         return;
      }
      var cx = p.clientX - o._capturePosition.x;
      var cy = p.clientY - o._capturePosition.y;
      var mc = o._canvasModeCd;
      var mv = o._canvasMoveCd;
      var cm = o._captureMatrix;
      var sm = null;
      var tf = o._templateFace;
      var tm = o._templateMatrix;
      switch(mc){
         case EDsCanvasMode.Drop:
            var c = o._activeSpace.camera();
            var r = c.rotation();
            var cr = o._captureRotation;
            r.x = cr.x - cy * o._cameraMouseRotation;
            r.y = cr.y - cx * o._cameraMouseRotation;
            break;
         case EDsCanvasMode.Select:
            break;
         case EDsCanvasMode.Translate:
            if(tf){
               if(mv == EDsCanvasDrag.X){
                  tm.tx = cx / 10;
               }else if(mv == EDsCanvasDrag.Y){
                  tm.ty = -cy / 10;
               }else if(mv == EDsCanvasDrag.Z){
                  tm.tz = cx / 10;
               }
            }
            break;
         case EDsCanvasMode.Rotation:
            if(tf){
               if(mv == EDsCanvasDrag.X){
                  tm.rx = cx / 10;
               }else if(mv == EDsCanvasDrag.Y){
                  tm.ry = -cy / 10;
               }else if(mv == EDsCanvasDrag.Z){
                  tm.rz = cx / 10;
               }
            }
            break;
         case EDsCanvasMode.Scale:
            if(tf){
               if(mv == EDsCanvasDrag.X){
                  tm.sx = cx / 10;
               }else if(mv == EDsCanvasDrag.Y){
                  tm.sy = -cy / 10;
               }else if(mv == EDsCanvasDrag.Z){
                  tm.sz = cx / 10;
               }else if(mv == EDsCanvasDrag.All){
                  tm.sx = cx / 10;
                  tm.sy = cx / 10;
                  tm.sz = cx / 10;
               }
            }
            break;
      }
      if(tf){
         tf.matrix().merge(o._templateFaceMatrix, tm);
         var rs = o._selectRenderables;
         for(var i = rs.count() - 1; i >= 0; i--){
            var r = rs.getAt(i);
            r._matrix.merge(r._dragMatrix, tm);
         }
      }
   }
   MO.FDsResourcePropertyContent_onMouseCaptureStop = function FDsResourcePropertyContent_onMouseCaptureStop(p){
      var o = this;
      RHtml.cursorSet(o._hPanel, EUiCursor.Auto);
   }
   MO.FDsResourcePropertyContent_onEnterFrame = function FDsResourcePropertyContent_onEnterFrame(){
      var o = this;
      var s = o._activeSpace;
      if(!s){
         return;
      }
      var st = s.timer();
      var ss = st.spanSecond();
      var c = s.camera();
      var d = o._cameraMoveRate * ss;
      var r = o._cameraKeyRotation * ss;
      var kf = RKeyboard.isPress(EStageKey.Forward);
      var kb = RKeyboard.isPress(EStageKey.Back);
      if(kf && !kb){
         c.doWalk(d);
      }
      if(!kf && kb){
         c.doWalk(-d);
      }
      var kq = RKeyboard.isPress(EStageKey.Up);
      var ke = RKeyboard.isPress(EStageKey.Down);
      if(kq && !ke){
         c.doFly(d);
      }
      if(!kq && ke){
         c.doFly(-d);
      }
      var ka = RKeyboard.isPress(EStageKey.RotationLeft);
      var kd = RKeyboard.isPress(EStageKey.RotationRight);
      if(ka && !kd){
         c.doYaw(r);
      }
      if(!ka && kd){
         c.doYaw(-r);
      }
      var kz = RKeyboard.isPress(EStageKey.RotationUp);
      var kw = RKeyboard.isPress(EStageKey.RotationDown);
      if(kz && !kw){
         c.doPitch(r);
      }
      if(!kz && kw){
         c.doPitch(-r);
      }
      c.update();
      if(o._optionRotation){
         var r = o._rotation;
         var display = o._activeSpace._display;
         var matrix = display.matrix();
         matrix.setRotation(matrix.rx, matrix.ry + r.y, matrix.rz);
         matrix.update();
         r.y = 0.01;
      }
   }
   MO.FDsResourcePropertyContent_onMeshLoad = function FDsResourcePropertyContent_onMeshLoad(p){
      var o = this;
      var m = o._activeSpace;
      var g = m.region();
      var rc = g.camera();
      rc.setPosition(0, 3, -10);
      rc.lookAt(0, 3, 0);
      rc.update();
      var h = o._hPanel;
      var rp = rc.projection();
      rp.size().set(h.width, h.height);
      rp._angle = 45;
      rp.update();
      var l = g.directionalLight();
      var lc = l.camera();
      lc.setPosition(10, 10, 0);
      lc.lookAt(0, 0, 0);
      lc.update();
      o.processLoadListener(o);
   }
   MO.FDsResourcePropertyContent_oeResize = function FDsResourcePropertyContent_oeResize(p){
      var o = this;
      o.__base.FDsCanvas.oeResize.call(o, p);
      var hp = o._hPanel;
      var w = hp.offsetWidth;
      var h = hp.offsetHeight;
      var s = o._activeSpace;
      if(s){
         var cp = s.camera().projection();
         cp.size().set(w, h);
         cp.update();
      }
      return EEventStatus.Stop;
   }
   MO.FDsResourcePropertyContent_oeRefresh = function FDsResourcePropertyContent_oeRefresh(p){
      return EEventStatus.Stop;
   }
   MO.FDsResourcePropertyContent_construct = function FDsResourcePropertyContent_construct(){
      var o = this;
      o.__base.FDsCanvas.construct.call(o);
      o._capturePosition = new MO.SPoint2();
      o._captureMatrix = new MO.SMatrix3d();
      o._templateMatrix = new MO.SMatrix3d();
      o._templateFaceMatrix = new MO.SMatrix3d();
      o._rotation = new MO.SVector3();
      o._captureRotation = new MO.SVector3();
      o._selectRenderables = new TObjects();
   }
   MO.FDsResourcePropertyContent_innerSelectDisplay = function FDsResourcePropertyContent_innerSelectDisplay(p){
      var o = this;
      var s = p.renderables();
      var c = s.count();
      for(var i = 0; i < c; i++){
         var r = s.getAt(i);
         if(MO.Class.isClass(r, FDsSceneRenderable)){
            o._selectRenderables.push(r);
            r.showBoundBox();
         }
      }
   }
   MO.FDsResourcePropertyContent_innerSelectLayer = function FDsResourcePropertyContent_innerSelectLayer(p){
      var o = this;
      var s = p.displays();
      var c = s.count();
      for(var i = 0; i < c; i++){
         var d = s.getAt(i);
         o.innerSelectDisplay(d)
      }
   }
   MO.FDsResourcePropertyContent_selectNone = function FDsResourcePropertyContent_selectNone(){
      var o = this;
      o._selectObject = null;
      var s = o._selectRenderables;
      var c = s.count();
      for(var i = 0; i < c; i++){
         var r = s.get(i);
         r.hideBoundBox();
      }
      o._selectRenderables.clear();
   }
   MO.FDsResourcePropertyContent_selectDisplay = function FDsResourcePropertyContent_selectDisplay(p){
      var o = this;
      o.selectNone();
      o._selectObject = p;
      o.innerSelectDisplay(p);
   }
   MO.FDsResourcePropertyContent_selectMaterial = function FDsResourcePropertyContent_selectMaterial(p){
      var o = this;
      o.selectNone();
      o._selectObject = p;
      var d = p._display;
      var s = d.renderables();
      var c = s.count();
      for(var i = 0; i < c; i++){
         var r = s.get(i);
         if(r._materialReference == p){
            o._selectRenderables.push(r);
            r._optionSelected = true;
            r.showBoundBox();
         }
      }
   }
   MO.FDsResourcePropertyContent_selectRenderable = function FDsResourcePropertyContent_selectRenderable(p){
      var o = this;
      var sr = p;
      if(sr){
         var n = sr._renderable._resource._code;
         switch(n){
            case 'ms_translation_x':
               o._canvasMoveCd = EDsCanvasDrag.X;
               o._templateRenderable = sr;
               return;
            case 'ms_translation_y':
               o._canvasMoveCd = EDsCanvasDrag.Y;
               o._templateRenderable = sr;
               return;
            case 'ms_translation_z':
               o._canvasMoveCd = EDsCanvasDrag.Z;
               o._templateRenderable = sr;
               return;
            case 'ms_rotation_x':
               o._canvasMoveCd = EDsCanvasDrag.X;
               o._templateRenderable = sr;
               return;
            case 'ms_rotation_y':
               o._canvasMoveCd = EDsCanvasDrag.Y;
               o._templateRenderable = sr;
               return;
            case 'ms_rotation_z':
               o._canvasMoveCd = EDsCanvasDrag.Z;
               o._templateRenderable = sr;
               return;
            case 'ms_scale_x':
               o._canvasMoveCd = EDsCanvasDrag.X;
               o._templateRenderable = sr;
               return;
            case 'ms_scale_y':
               o._canvasMoveCd = EDsCanvasDrag.Y;
               o._templateRenderable = sr;
               return;
            case 'ms_scale_z':
               o._canvasMoveCd = EDsCanvasDrag.Z;
               o._templateRenderable = sr;
               return;
            case 'ms_scale_all':
               o._canvasMoveCd = EDsCanvasDrag.All;
               o._templateRenderable = sr;
               return;
            default:
               o._canvasMoveCd = EDsCanvasDrag.Unknown;
               o._templateRenderable = null;
         }
      }
      o.selectNone();
      if(p){
         o._selectRenderables.push(p);
         p._optionSelected = true;
         p.showBoundBox();
         o._workspace._catalog.showObject(p);
      }
      var t = o._templateTranslation;
      var r = o._templateRotation;
      var s = o._templateScale;
      var mc = o._canvasModeCd;
      switch(mc){
         case EDsCanvasMode.Drop:
            break;
         case EDsCanvasMode.Select:
            break;
         case EDsCanvasMode.Translate:
            t.setVisible(sr != null);
            r.hide();
            s.hide();
            o._templateFace = t;
            break;
         case EDsCanvasMode.Rotation:
            t.hide();
            r.setVisible(sr != null);
            s.hide();
            o._templateFace = r;
            break;
         case EDsCanvasMode.Scale:
            t.hide();
            r.hide();
            s.setVisible(sr != null);
            o._templateFace = s;
            break;
      }
      var st = o._templateFace;
      if(sr && st){
         var d = sr.display();
         var m = st.matrix();
         m.assign(d.matrix());
         m.setScaleAll(o._templateViewScale);
         m.update();
      }
   }
   MO.FDsResourcePropertyContent_switchMode = function FDsResourcePropertyContent_switchMode(p){
      var o = this;
      o._canvasModeCd = p;
      o.selectRenderable(o._selectRenderable);
   }
   MO.FDsResourcePropertyContent_switchRotation = function FDsResourcePropertyContent_switchRotation(p){
      this._optionRotation = p;
   }
   MO.FDsResourcePropertyContent_reloadRegion = function FDsResourcePropertyContent_reloadRegion(region){
      var o = this;
      var resource = region.resource();
      o._cameraMoveRate = resource.moveSpeed();
      o._cameraKeyRotation = resource.rotationKeySpeed();
      o._cameraMouseRotation = resource.rotationMouseSpeed();
   }
   MO.FDsResourcePropertyContent_loadMeshByGuid = function FDsResourcePropertyContent_loadMeshByGuid(p){
      var o = this;
      var rmc = MO.Console.find(FE3dMeshConsole);
      if(o._activeSpace != null){
         rmc.free(o._activeSpace);
      }
      var space = o._activeSpace = rmc.allocByGuid(o, p);
      space.addLoadListener(o, o.onMeshLoad);
      space._layer.pushRenderable(o._dimensional);
      RStage.register('mesh3d', space);
   }
   MO.FDsResourcePropertyContent_loadMeshByCode = function FDsResourcePropertyContent_loadMeshByCode(p){
      var o = this;
      var rmc = MO.Console.find(FE3dMeshConsole);
      if(o._activeSpace != null){
         rmc.free(o._activeSpace);
      }
      var space = o._activeSpace = rmc.allocByCode(o, p);
      space.addLoadListener(o, o.onMeshLoad);
      space._layer.pushRenderable(o._dimensional);
      RStage.register('mesh3d', space);
   }
   MO.FDsResourcePropertyContent_dispose = function FDsResourcePropertyContent_dispose(){
      var o = this;
      o._rotation = MO.Lang.Object.dispose(o._rotation);
      o.__base.FDsCanvas.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourcePropertyToolBar = function FDsResourcePropertyToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName             = 'resource.resource.PropertyToolBar';
      o._controlInsertButton   = null;
      o._controlUpdateButton   = null;
      o._controlDeleteButton   = null;
      o._controlRotationButton = null;
      o.onBuilded              = FDsResourcePropertyToolBar_onBuilded;
      o.onUpdateClick          = FDsResourcePropertyToolBar_onUpdateClick;
      o.onRotationClick        = FDsResourcePropertyToolBar_onRotationClick;
      o.construct              = FDsResourcePropertyToolBar_construct;
      o.dispose                = FDsResourcePropertyToolBar_dispose;
      return o;
   }
   MO.FDsResourcePropertyToolBar_onBuilded = function FDsResourcePropertyToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlUpdateButton.addClickListener(o, o.onUpdateClick);
      o._controlRotationButton.addClickListener(o, o.onRotationClick);
   }
   MO.FDsResourcePropertyToolBar_onUpdateClick = function FDsResourcePropertyToolBar_onUpdateClick(event){
      var o = this;
   }
   MO.FDsResourcePropertyToolBar_onRotationClick = function FDsResourcePropertyToolBar_onRotationClick(event){
      var o = this;
      var previewContent = o._workspace._previewContent;
      previewContent.switchRotation(event.checked);
   }
   MO.FDsResourcePropertyToolBar_construct = function FDsResourcePropertyToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsResourcePropertyToolBar_dispose = function FDsResourcePropertyToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceSelectCatalogToolBar = function FDsResourceSelectCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName          = 'resource.resource.SelectCatalogToolBar';
      o._controlFolderOpen  = null;
      o._controlFolderClose = null;
      o._activeNodeGuid     = null;
      o.onBuilded           = FDsResourceSelectCatalogToolBar_onBuilded;
      o.onFolderOpenClick   = FDsResourceSelectCatalogToolBar_onFolderOpenClick;
      o.onFolderCloseClick  = FDsResourceSelectCatalogToolBar_onFolderCloseClick;
      o.construct           = FDsResourceSelectCatalogToolBar_construct;
      o.dispose             = FDsResourceSelectCatalogToolBar_dispose;
      return o;
   }
   MO.FDsResourceSelectCatalogToolBar_onBuilded = function FDsResourceSelectCatalogToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlFolderOpen.addClickListener(o, o.onFolderOpenClick);
      o._controlFolderClose.addClickListener(o, o.onFolderCloseClick);
   }
   MO.FDsResourceSelectCatalogToolBar_onFolderOpenClick = function FDsResourceSelectCatalogToolBar_onFolderOpenClick(event){
   }
   MO.FDsResourceSelectCatalogToolBar_onFolderCloseClick = function FDsResourceSelectCatalogToolBar_onFolderCloseClick(event){
   }
   MO.FDsResourceSelectCatalogToolBar_construct = function FDsResourceSelectCatalogToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsResourceSelectCatalogToolBar_dispose = function FDsResourceSelectCatalogToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceSelectDialog = function FDsResourceSelectDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.resource.SelectDialog';
      o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleCatalogContent  = MO.Class.register(o, new MO.AStyle('_styleCatalogContent', 'Catalog_Content'));
      o._styleListContent     = MO.Class.register(o, new MO.AStyle('_styleListContent', 'List_Content'));
      o._dataModeCd           = null;
      o._controlParentLabel   = null;
      o._controlLabel         = null;
      o._controlConfirmButton = null;
      o._controlCancelButton  = null;
      o.onBuilded             = FDsResourceSelectDialog_onBuilded;
      o.onConfirmLoad         = FDsResourceSelectDialog_onConfirmLoad;
      o.onConfirmClick        = FDsResourceSelectDialog_onConfirmClick;
      o.onCancelClick         = FDsResourceSelectDialog_onCancelClick;
      o.construct             = FDsResourceSelectDialog_construct;
      o.setNodeParentLabel    = FDsResourceSelectDialog_setNodeParentLabel;
      o.setNodeLabel          = FDsResourceSelectDialog_setNodeLabel;
      o.switchDataMode        = FDsResourceSelectDialog_switchDataMode;
      o.dispose               = FDsResourceSelectDialog_dispose;
      return o;
   }
   MO.FDsResourceSelectDialog_onBuilded = function FDsResourceSelectDialog_onBuilded(event){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, event);
      o._controlConfirm.addClickListener(o, o.onConfirmClick);
      o._controlCancel.addClickListener(o, o.onCancelClick);
      o._frameCatalogToolBar._hPanel.className = o.styleName('Toolbar_Ground');
      o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
      o._frameListToolBar._hPanel.className = o.styleName('Toolbar_Ground');
      o._frameListContent._hPanel.className = o.styleName('List_Content');
      var splitterCatalog = o._catalogSplitter = o.searchControl('catalogSpliter');
      splitterCatalog.setAlignCd(EUiAlign.Left);
      splitterCatalog.setSizeHtml(o._frameCatalog._hPanel);
      var control = o._catalogToolbar = MO.Class.create(FDsResourceSelectCatalogToolBar);
      control._workspace = o._workspace;
      control._frameSet = o;
      control.buildDefine(event);
      o._frameCatalogToolBar.push(control);
      var control = o._catalogContent = MO.Class.create(FDsResourceCatalogContent);
      control._workspace = o._workspace;
      control._frameSet = o;
      control.build(event);
      o._frameCatalogContent.push(control);
      var control = o._listToolBar = MO.Class.create(FDsResourceSelectListToolBar);
      control._workspace = o._workspace;
      control._frameSet = o;
      control.buildDefine(event);
      o._frameListToolBar.push(control);
      var control = o._listContent = MO.Class.create(FDsResourceListContent);
      control._workspace = o._workspace;
      control._frameSet = o;
      control.build(event);
      o._frameListContent.push(control);
      o._listContent.serviceSearch();
   }
   MO.FDsResourceSelectDialog_onConfirmLoad = function FDsResourceSelectDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
      var catalog = o._frameSet._catalogContent;
      if(o._dataModeCd == EUiDataMode.Insert){
         if(o._parentGuid){
            var node = catalog.findByGuid(o._parentGuid);
            catalog.loadNode(node);
         }else{
            catalog.loadService();
         }
      }else{
         var label = o._controlLabel.get();
         var node = catalog.focusNode();
         node.setLabel(label);
      }
   }
   MO.FDsResourceSelectDialog_onConfirmClick = function FDsResourceSelectDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var label = o._controlLabel.get();
      var resourceConsole = MO.Console.find(FDrResourceConsole);
      var connection = null;
      if(o._dataModeCd == EUiDataMode.Insert){
         connection = resourceConsole.doFolderCreate(o._parentGuid, null, label);
      }else{
         connection = resourceConsole.doFolderUpdate(o._nodeGuid, null, label);
      }
      connection.addLoadListener(o, o.onConfirmLoad);
   }
   MO.FDsResourceSelectDialog_onCancelClick = function FDsResourceSelectDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsResourceSelectDialog_construct = function FDsResourceSelectDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsResourceSelectDialog_setNodeParentLabel = function FDsResourceSelectDialog_setNodeParentLabel(label){
      this._controlParentLabel.set(label);
   }
   MO.FDsResourceSelectDialog_setNodeLabel = function FDsResourceSelectDialog_setNodeLabel(label){
      this._controlLabel.set(label);
   }
   MO.FDsResourceSelectDialog_switchDataMode = function FDsResourceSelectDialog_switchDataMode(modeCd){
      var o = this;
      o._dataModeCd = modeCd;
      if(modeCd == EUiDataMode.Insert){
         o.setLabel('新建资源目录');
      }else if(modeCd == EUiDataMode.Update){
         o.setLabel('资源目录属性');
      }
   }
   MO.FDsResourceSelectDialog_dispose = function FDsResourceSelectDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceSelectListToolBar = function FDsResourceSelectListToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar, MUiStorage);
      o._frameName        = 'resource.resource.SelectListToolBar';
      o._storageCode      = o._frameName;
      o._dropButton       = null;
      o._selectButton     = null;
      o._translateButton  = null;
      o._rotationButton   = null;
      o._scaleButton      = null;
      o._lookFrontButton  = null;
      o._lookUpButton     = null;
      o._lookLeftButton   = null;
      o._playButton       = null;
      o._viewButton       = null;
      o.onBuilded         = FDsResourceSelectListToolBar_onBuilded;
      o.onSearchClick     = FDsResourceSelectListToolBar_onSearchClick;
      o.onNavigatorClick  = FDsResourceSelectListToolBar_onNavigatorClick;
      o.onTypeClick       = FDsResourceSelectListToolBar_onTypeClick;
      o.construct         = FDsResourceSelectListToolBar_construct;
      o.makeTypeCd        = FDsResourceSelectListToolBar_makeTypeCd;
      o.setNavigator      = FDsResourceSelectListToolBar_setNavigator;
      o.doNavigator       = FDsResourceSelectListToolBar_doNavigator;
      o.storageLoad       = FDsResourceSelectListToolBar_storageLoad;
      o.dispose           = FDsResourceSelectListToolBar_dispose;
      return o;
   }
   MO.FDsResourceSelectListToolBar_onBuilded = function FDsResourceSelectListToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlSearchEdit.addClickListener(o, o.onSearchClick);
      o._controlFirstButton.addClickListener(o, o.onNavigatorClick);
      o._controlPriorButton.addClickListener(o, o.onNavigatorClick);
      o._controlNextButton.addClickListener(o, o.onNavigatorClick);
      o._controlLastButton.addClickListener(o, o.onNavigatorClick);
   }
   MO.FDsResourceSelectListToolBar_onSearchClick = function FDsResourceSelectListToolBar_onSearchClick(p){
      this.doNavigator(0);
   }
   MO.FDsResourceSelectListToolBar_onNavigatorClick = function FDsResourceSelectListToolBar_onNavigatorClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      var page = o._contentPage;
      switch(name){
         case 'firstButton':
            page = 0;
            break;
         case 'priorButton':
            page--;
            break;
         case 'nextButton':
            page++;
            break;
         case 'lastButton':
            page = o._contentPageCount - 1;
            break;
      }
      o.doNavigator(page);
   }
   MO.FDsResourceSelectListToolBar_onTypeClick = function FDsResourceSelectListToolBar_onTypeClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      var page = o._contentPage;
      switch(name){
         case 'typeAll':
            o._controlTypeBitmap.check(true);
            o._controlTypeMaterial.check(true);
            o._controlTypeModel.check(true);
            o._controlTypeTemplate.check(true);
            break;
         case 'typeNone':
            o._controlTypeBitmap.check(false);
            o._controlTypeMaterial.check(false);
            o._controlTypeModel.check(false);
            o._controlTypeTemplate.check(false);
            break;
         case 'typeBitmap':
            page = 0;
            break;
         case 'typeMaterial':
            page--;
            break;
         case 'typeMesh':
            page++;
            break;
         case 'typeTemplate':
            page = o._contentPageCount - 1;
            break;
         case 'typeScene':
            page = o._contentPageCount - 1;
            break;
      }
      var typeCd = o.makeTypeCd();
      var search = o._controlSearchEdit.text();
      o._frameSet._listContent.serviceSearch(typeCd, search, '', o._contentPageSize, 0)
      o.storageSet('resource_type_cd', typeCd);
      o.storageSet('control_type_bitmap:check', RBoolean.toString(o._controlTypeBitmap.isCheck()))
      o.storageSet('control_type_material:check', RBoolean.toString(o._controlTypeMaterial.isCheck()))
      o.storageSet('control_type_model:check', RBoolean.toString(o._controlTypeModel.isCheck()))
      o.storageSet('control_type_template:check', RBoolean.toString(o._controlTypeTemplate.isCheck()))
      o.storageSet('control_type_scene:check', RBoolean.toString(o._controlTypeScene.isCheck()))
      o.storageUpdate();
   }
   MO.FDsResourceSelectListToolBar_construct = function FDsResourceSelectListToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsResourceSelectListToolBar_makeTypeCd = function FDsResourceSelectListToolBar_makeTypeCd(){
      var o = this;
      var types = '';
      if(o._controlTypeBitmap.isCheck()){
         types += '|Bitmap';
      }
      if(o._controlTypeMaterial.isCheck()){
         types += '|Material';
      }
      if(o._controlTypeModel.isCheck()){
         types += '|Model';
      }
      if(o._controlTypeTemplate.isCheck()){
         types += '|Template';
      }
      if(o._controlTypeScene.isCheck()){
         types += '|Scene';
      }
      if(types != ''){
         types = types.substring(1);
      }
      if(MO.Lang.String.isEmpty(types)){
         types = 'All';
      }
      return 'All';
   }
   MO.FDsResourceSelectListToolBar_setNavigator = function FDsResourceSelectListToolBar_setNavigator(pageSize, pageCount, page){
      var o = this;
      o._contentPageSize = pageSize;
      o._contentPageCount = pageCount;
      o._contentPage = page;
      o._controlPageEdit.setText(page);
   }
   MO.FDsResourceSelectListToolBar_doNavigator = function FDsResourceSelectListToolBar_doNavigator(page){
      var o = this;
      var typeCd = o.makeTypeCd();
      var search = o._controlSearchEdit.text();
      page = RInteger.toRange(page, 0, o._contentPageCount);
      if((o._contentTypeCd != typeCd) || (o._contentSerach != search) || (o._contentPage != page)){
         o._frameSet._listContent.serviceSearch(typeCd, search, '', o._contentPageSize, page)
      }
      o._contentTypeCd = typeCd;
      o._contentSerach = search;
   }
   MO.FDsResourceSelectListToolBar_storageLoad = function FDsResourceSelectListToolBar_storageLoad(){
      var o = this;
      o._controlTypeBitmap.check(o.storageGetBoolean('control_type_bitmap:check', true));
      o._controlTypeMaterial.check(o.storageGetBoolean('control_type_material:check', true));
      o._controlTypeModel.check(o.storageGetBoolean('control_type_model:check', true));
      o._controlTypeTemplate.check(o.storageGetBoolean('control_type_template:check', true));
      o._controlTypeScene.check(o.storageGetBoolean('control_type_scene:check', true));
      var typeCd = o.makeTypeCd();
      var types = o.storageGet('resource_type_cd', 'All');
      var search = o._controlSearchEdit.text();
      o._frameSet._listContent.serviceSearch(types, search, '', o._contentPageSize, 0)
   }
   MO.FDsResourceSelectListToolBar_dispose = function FDsResourceSelectListToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceTabBar = function FDsResourceTabBar(o){
      o = MO.Class.inherits(this, o, FDuiTabBar);
      o._frameName             = 'design3d.resource.TabBar';
      o._resourceTypeCd        = 'mesh';
      o._controlPictureButton  = null;
      o._controlSoundButton    = null;
      o._controlVidioButton    = null;
      o._controlTextureButton  = null;
      o._controlMaterialButton = null;
      o._controlMeshButton     = null;
      o._controlModelButton    = null;
      o._controlTemplateButton = null;
      o._controlSceneButton    = null;
      o.onBuilded              = FDsResourceTabBar_onBuilded;
      o.onButtonClick          = FDsResourceTabBar_onButtonClick;
      o.construct              = FDsResourceTabBar_construct;
      o.dispose                = FDsResourceTabBar_dispose;
      return o;
   }
   MO.FDsResourceTabBar_onBuilded = function FDsResourceTabBar_onBuilded(p){
      var o = this;
      o.__base.FDuiTabBar.onBuilded.call(o, p);
      o._controlPictureButton.addClickListener(o, o.onButtonClick);
      o._controlSoundButton.addClickListener(o, o.onButtonClick);
      o._controlVidioButton.addClickListener(o, o.onButtonClick);
      o._controlTextureButton.addClickListener(o, o.onButtonClick);
      o._controlMaterialButton.addClickListener(o, o.onButtonClick);
      o._controlMeshButton.addClickListener(o, o.onButtonClick);
      o._controlModelButton.addClickListener(o, o.onButtonClick);
      o._controlTemplateButton.addClickListener(o, o.onButtonClick);
      o._controlSceneButton.addClickListener(o, o.onButtonClick);
   }
   MO.FDsResourceTabBar_onButtonClick = function FDsResourceTabBar_onButtonClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      o._resourceTypeCd = name;
   }
   MO.FDsResourceTabBar_construct = function FDsResourceTabBar_construct(){
      var o = this;
      o.__base.FDuiTabBar.construct.call(o);
   }
   MO.FDsResourceTabBar_dispose = function FDsResourceTabBar_dispose(){
      var o = this;
      o.__base.FDuiTabBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsResourceWorkspace = function FDsResourceWorkspace(o){
      o = MO.Class.inherits(this, o, FDuiWorkspace);
      o._frameName            = 'resource.resource.Workspace';
      o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleStatusbarGround = MO.Class.register(o, new MO.AStyle('_styleStatusbarGround', 'Statusbar_Ground'));
      o._styleCatalogGround   = MO.Class.register(o, new MO.AStyle('_styleCatalogGround', 'Catalog_Ground'));
      o._styleCatalogToolbar  = MO.Class.register(o, new MO.AStyle('_styleCatalogToolbar', 'Catalog_Toolbar'));
      o._styleSearchGround    = MO.Class.register(o, new MO.AStyle('_styleSearchGround', 'Search_Ground'));
      o._styleSearchToolbar   = MO.Class.register(o, new MO.AStyle('_styleCatalogToolbar', 'Search_Toolbar'));
      o._stylePreviewGround   = MO.Class.register(o, new MO.AStyle('_stylePreviewGround', 'Preview_Ground'));
      o._stylePreviewToolbar  = MO.Class.register(o, new MO.AStyle('_stylePreviewToolbar', 'Preview_Toolbar'));
      o._stylePropertyGround  = MO.Class.register(o, new MO.AStyle('_stylePropertyGround', 'Property_Ground'));
      o._styleWorkspaceGround = MO.Class.register(o, new MO.AStyle('_styleWorkspaceGround', 'Workspace_Ground'));
      o._resourceTypeCd       = 'picture';
      o._frameToolBar         = null;
      o._frameStatusBar       = null;
      o._frameCatalog         = null;
      o._frameCatalogToolbar  = null;
      o._frameCatalogContent  = null;
      o._frameSearch          = null;
      o._frameSearchToolbar   = null;
      o._frameSearchContent   = null;
      o._framePreview         = null;
      o._framePreviewToolbar  = null;
      o._framePreviewContent  = null;
      o._propertyFrames       = null;
      o.onBuilded             = FDsResourceWorkspace_onBuilded;
      o.onMeshLoad            = FDsResourceWorkspace_onMeshLoad;
      o.onCatalogSelected     = FDsResourceWorkspace_onCatalogSelected;
      o.construct             = FDsResourceWorkspace_construct;
      o.findPropertyFrame     = FDsResourceWorkspace_findPropertyFrame;
      o.switchContent         = FDsResourceWorkspace_switchContent;
      o.load                  = FDsResourceWorkspace_load;
      o.dispose               = FDsResourceWorkspace_dispose;
      return o;
   }
   MO.FDsResourceWorkspace_onBuilded = function FDsResourceWorkspace_onBuilded(p){
      var o = this;
      o.__base.FDuiWorkspace.onBuilded.call(o, p);
      var frame = o._frameToolBar = o.searchControl('toolbarFrame');
      frame._hPanel.className = o.styleName('Toolbar_Ground');
      var frame = o._frameBody = o.searchControl('bodyFrame');
      frame._hPanel.className = o.styleName('Catalog_Ground');
      var frame = o._frameStatusBar = o.searchControl('statusFrame');
      frame._hPanel.className = o.styleName('Statusbar_Ground');
      var hTable = MO.Window.Builder.createTable(p);
      hTable.width = '100%';
      var hRow = MO.Window.Builder.appendTableRow(hTable);
      var c = o._toolbar = MO.Class.create(FDsResourceMenuBar);
      c._workspace = o;
      c.buildDefine(p);
      var hCell = MO.Window.Builder.appendTableCell(hRow);
      hCell.appendChild(c._hPanel);
      var c = o._tabBar = MO.Class.create(FDsResourceTabBar);
      c._workspace = o;
      c.buildDefine(p);
      var hCell = MO.Window.Builder.appendTableCell(hRow);
      hCell.width = '450px';
      hCell.align = 'right';
      hCell.vAlign = 'bottom';
      hCell.appendChild(c._hPanel);
      o._frameToolBar._hPanel.appendChild(hTable);
      var frameSet = o._frameSet = MO.Class.create(FDsResourceFrameSet);
      frameSet._workspace = o;
      frameSet.buildDefine(p);
      o._frameBody.push(frameSet);
      frameSet.switchContent(o._resourceTypeCd);
   }
   MO.FDsResourceWorkspace_onMeshLoad = function FDsResourceWorkspace_onMeshLoad(p){
      var o = this;
      o._activeSpace = p._activeSpace;
      o._catalog.buildSpace(o._activeSpace);
   }
   MO.FDsResourceWorkspace_onCatalogSelected = function FDsResourceWorkspace_onCatalogSelected(p, pc){
      var o = this;
      var space = o._activeSpace;
      var fs = o._propertyFrames;
      var c = fs.count();
      for(var i = 0; i < c; i++){
         var f = fs.value(i);
         f.hide();
      }
      if(MO.Class.isClass(p, FE3dStage)){
         var f = o.findPropertyFrame(EDsFrame.MeshSpacePropertyFrame);
         f.show();
         f.loadObject(space, space);
      }else if(MO.Class.isClass(p, FG3dTechnique)){
         var f = o.findPropertyFrame(EDsFrame.MeshTechniquePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dRegion)){
         var f = o.findPropertyFrame(EDsFrame.MeshRegionPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dCamera)){
         var f = o.findPropertyFrame(EDsFrame.MeshCameraPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dDirectionalLight)){
         var f = o.findPropertyFrame(EDsFrame.MeshLightPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshDisplay)){
         var f = o.findPropertyFrame(EDsFrame.MeshDisplayPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dMaterial)){
         var f = o.findPropertyFrame(EDsFrame.MeshMaterialPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshRenderable)){
         var f = o.findPropertyFrame(EDsFrame.MeshRenderablePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else{
         throw new TError('Unknown select object type. (value={1})', p);
      }
   }
   MO.FDsResourceWorkspace_construct = function FDsResourceWorkspace_construct(){
      var o = this;
      o.__base.FDuiWorkspace.construct.call(o);
      o._propertyFrames = new TDictionary();
   }
   MO.FDsResourceWorkspace_findPropertyFrame = function FDsResourceWorkspace_findPropertyFrame(p){
      var o = this;
      var f = o._propertyFrames.get(p);
      if(!f){
         var fc = MO.Console.find(FFrameConsole);
         f = fc.get(o, p, o._framePreview._hContainer);
         f._workspace = o;
         o._propertyFrames.set(p, f);
      }
      return f;
   }
   MO.FDsResourceWorkspace_switchContent = function FDsResourceWorkspace_switchContent(typeCd){
      this._frameSet.switchContent(typeCd);
   }
   MO.FDsResourceWorkspace_load = function FDsResourceWorkspace_load(){
      var o = this;
   }
   MO.FDsResourceWorkspace_dispose = function FDsResourceWorkspace_dispose(){
      var o = this;
      o.__base.FDuiWorkspace.dispose.call(o);
      o._propertyFrames.dispose();
      o._propertyFrames = null;
   }
}
with(MO){
   MO.FDsBitmapCanvasContent = function FDsBitmapCanvasContent(o){
      o = MO.Class.inherits(this, o, FDsBitmapCanvas);
      return o;
   }
}
with(MO){
   MO.FDsBitmapCanvasToolBar = function FDsBitmapCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._canvasModeCd      = EDsCanvasMode.Drop;
      o._controlSize1      = null;
      o._controlSize2      = null;
      o._controlSize3      = null;
      o._controlSize4      = null;
      o._controlSizeWidth  = null;
      o._controlSizeHeight = null;
      o.onBuilded          = FDsBitmapCanvasToolBar_onBuilded;
      o.onSizeClick        = FDsBitmapCanvasToolBar_onSizeClick;
      o.construct          = FDsBitmapCanvasToolBar_construct;
      o.dispose            = FDsBitmapCanvasToolBar_dispose;
      return o;
   }
   MO.FDsBitmapCanvasToolBar_onBuilded = function FDsBitmapCanvasToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
   }
   MO.FDsBitmapCanvasToolBar_onSizeClick = function FDsBitmapCanvasToolBar_onSizeClick(event){
      var o = this;
      var button = event.sender;
      var width = '*';
      var height = '*';
      var name = button.name();
      var label = button.label();
      if(name != 'sizeAuto'){
         var size = label.split('x');
         width = parseInt(size[0]);
         height = parseInt(size[1]);
      }
      o._controlSizeWidth.setText(width);
      o._controlSizeHeight.setText(height);
      o._frameSet._canvas.switchSize(width, height);
   }
   MO.FDsBitmapCanvasToolBar_construct = function FDsBitmapCanvasToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsBitmapCanvasToolBar_dispose = function FDsBitmapCanvasToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsBitmapFrameSet = function FDsBitmapFrameSet(o){
      o = MO.Class.inherits(this, o, FDsFrameSet);
      o._frameCanvas          = null;
      o._frameCanvasToolBar   = null;
      o._frameCanvasContent   = null;
      o._frameProperty        = null;
      o._framePropertyToolBar = null;
      o._framePropertyContent = null;
      o.onBuilded             = FDsBitmapFrameSet_onBuilded;
      o.onDataLoaded          = FDsBitmapFrameSet_onDataLoaded;
      o.construct             = FDsBitmapFrameSet_construct;
      o.loadByGuid            = FDsBitmapFrameSet_loadByGuid;
      o.loadByCode            = FDsBitmapFrameSet_loadByCode;
      o.reload                = FDsBitmapFrameSet_reload;
      o.dispose               = FDsBitmapFrameSet_dispose;
      return o;
   }
   MO.FDsBitmapFrameSet_onBuilded = function FDsBitmapFrameSet_onBuilded(p){
      var o = this;
      o.__base.FDsFrameSet.onBuilded.call(o, p);
      o._frameCanvasToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._frameCanvasContent._hPanel.className = o.styleName('Canvas_Content');
      o._framePropertyToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._framePropertyContent._hPanel.className = o.styleName('Property_Content');
      var spliterProperty = o._spliterProperty;
      spliterProperty.setAlignCd(EUiAlign.Right);
      spliterProperty.setSizeHtml(o._frameProperty._hPanel);
   }
   MO.FDsBitmapFrameSet_onDataLoaded = function FDsBitmapFrameSet_onDataLoaded(event){
      var o = this;
      debugger
      o._activeSpace = event._activeSpace;
   }
   MO.FDsBitmapFrameSet_construct = function FDsBitmapFrameSet_construct(){
      var o = this;
      o.__base.FDsFrameSet.construct.call(o);
   }
   MO.FDsBitmapFrameSet_loadByGuid = function FDsBitmapFrameSet_loadByGuid(guid){
      var o = this;
      o._activeGuid = guid;
      var bitmap = o._activeResource = MO.Console.find(FDrBitmapConsole).query(guid);
      var canvas = o._canvasContent;
      canvas.loadByGuid(guid);
      var frame = o.findPropertyFrame(EDsFrame.BitmapPropertyFrame);
      frame.loadObject(bitmap);
   }
   MO.FDsBitmapFrameSet_loadByCode = function FDsBitmapFrameSet_loadByCode(code){
      var o = this;
      o._activeCode = code;
      var connection = MO.Console.find(FDrBitmapConsole).query(code);
      connection.addLoadListener(o, o.onDataLoaded);
   }
   MO.FDsBitmapFrameSet_reload = function FDsBitmapFrameSet_reload(){
      var o = this;
   }
   MO.FDsBitmapFrameSet_dispose = function FDsBitmapFrameSet_dispose(){
      var o = this;
      o.__base.FDsFrameSet.dispose.call(o);
   }
}
with(MO){
   MO.FDsBitmapImportDialog = function FDsBitmapImportDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.bitmap.ImportDialog';
      o._nodeGuid             = null;
      o._controlPrivateButton = null;
      o._controlTeamButton    = null;
      o._controlShareButton   = null;
      o.onBuilded             = FDsBitmapImportDialog_onBuilded;
      o.onFileLoaded          = FDsBitmapImportDialog_onFileLoaded;
      o.onConfirmLoad         = FDsBitmapImportDialog_onConfirmLoad;
      o.onConfirmClick        = FDsBitmapImportDialog_onConfirmClick;
      o.onCancelClick         = FDsBitmapImportDialog_onCancelClick;
      o.construct             = FDsBitmapImportDialog_construct;
      o.dispose               = FDsBitmapImportDialog_dispose;
      return o;
   }
   MO.FDsBitmapImportDialog_onBuilded = function FDsBitmapImportDialog_onBuilded(event){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, event);
      o._controlConfirmButton.addClickListener(o, o.onConfirmClick);
      o._controlCancelButton.addClickListener(o, o.onCancelClick);
   }
   MO.FDsBitmapImportDialog_onFileLoaded = function FDsBitmapImportDialog_onFileLoaded(event){
      var o = this;
      var reader = o._fileReader;
      var resource = o._resource;
      var guid = resource.guid();
      var url = '/cloud.resource.bitmap.wv?do=updateData&guid=' + guid + '&data_length=' + reader.length() + '&file_name=' + reader.fileName();
      url = RBrowser.urlEncode(url);
      var connection = MO.Console.find(FHttpConsole).send(url, reader.data());
      connection.addLoadListener(o, o.onConfirmLoad);
      o._fileReader = MO.Lang.Object.dispose(reader);
   }
   MO.FDsBitmapImportDialog_onConfirmLoad = function FDsBitmapImportDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
      o._frameSet.reload();
   }
   MO.FDsBitmapImportDialog_onConfirmClick = function FDsBitmapImportDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var file = o._controlFile._hInput.files[0];
      var reader = o._fileReader = MO.Class.create(FFileReader);
      reader.addLoadListener(o, o.onFileLoaded);
      reader.loadFile(file);
   }
   MO.FDsBitmapImportDialog_onCancelClick = function FDsBitmapImportDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsBitmapImportDialog_construct = function FDsBitmapImportDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsBitmapImportDialog_dispose = function FDsBitmapImportDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsBitmapMenuBar = function FDsBitmapMenuBar(o){
      o = MO.Class.inherits(this, o, FDuiMenuBar);
      o._controlBack    = null;
      o._controlSave    = null;
      o._controlCapture = null;
      o.onBuilded       = FDsBitmapMenuBar_onBuilded;
      o.onSaveLoad      = FDsBitmapMenuBar_onSaveLoad;
      o.onSaveClick     = FDsBitmapMenuBar_onSaveClick;
      o.onImportClick   = FDsBitmapMenuBar_onImportClick;
      o.construct       = FDsBitmapMenuBar_construct;
      o.dispose         = FDsBitmapMenuBar_dispose;
      return o;
   }
   MO.FDsBitmapMenuBar_onBuilded = function FDsBitmapMenuBar_onBuilded(event){
      var o = this;
      o.__base.FDuiMenuBar.onBuilded.call(o, event);
   }
   MO.FDsBitmapMenuBar_onSaveLoad = function FDsBitmapMenuBar_onSaveLoad(event){
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsBitmapMenuBar_onSaveClick = function FDsBitmapMenuBar_onSaveClick(event){
      var o = this;
      var bitmap = o._frameSet._activeResource;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = MO.Console.find(FDrBitmapConsole).doUpdate(bitmap);
      connection.addLoadListener(o, o.onSaveLoad);
   }
   MO.FDsBitmapMenuBar_onImportClick = function FDsBitmapMenuBar_onImportClick(event){
      var o = this;
      var resource = o._frameSet._activeResource;
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsBitmapImportDialog);
      dialog._resource = resource;
      dialog._frameSet = o._frameSet;
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsBitmapMenuBar_construct = function FDsBitmapMenuBar_construct(){
      var o = this;
      o.__base.FDuiMenuBar.construct.call(o);
   }
   MO.FDsBitmapMenuBar_dispose = function FDsBitmapMenuBar_dispose(){
      var o = this;
      o.__base.FDuiMenuBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsBitmapPropertyFrame = function FDsBitmapPropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._activeBitmap      = null;
      o._controlGuid       = null;
      o._controlCode       = null;
      o._controlLabel      = null;
      o._controlSizeWidth  = null;
      o._controlSizeHeight = null;
      o.onBuilded          = FDsBitmapPropertyFrame_onBuilded;
      o.onDataChanged      = FDsBitmapPropertyFrame_onDataChanged;
      o.construct          = FDsBitmapPropertyFrame_construct;
      o.loadObject         = FDsBitmapPropertyFrame_loadObject;
      o.dispose            = FDsBitmapPropertyFrame_dispose;
      return o;
   }
   MO.FDsBitmapPropertyFrame_construct = function FDsBitmapPropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsBitmapPropertyFrame_onBuilded = function FDsBitmapPropertyFrame_onBuilded(p){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, p);
      o._controlCode.addDataChangedListener(o, o.onDataChanged);
      o._controlLabel.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsBitmapPropertyFrame_onDataChanged = function FDsBitmapPropertyFrame_onDataChanged(p){
      var o = this;
      var bitmap = o._activeBitmap;
      bitmap.setCode(o._controlCode.get());
      bitmap.setLabel(o._controlLabel.get());
   }
   MO.FDsBitmapPropertyFrame_loadObject = function FDsBitmapPropertyFrame_loadObject(bitmap){
      var o = this;
      o._activeBitmap = bitmap;
      o._controlGuid.set(bitmap.guid());
      o._controlCode.set(bitmap.code());
      o._controlLabel.set(bitmap.label());
      o._controlSizeWidth.set(bitmap.sizeWidth());
      o._controlSizeHeight.set(bitmap.sizeHeight());
   }
   MO.FDsBitmapPropertyFrame_dispose = function FDsBitmapPropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsBitmapPropertyToolBar = function FDsBitmapPropertyToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName      = 'resource.bitmap.PropertyToolBar';
      o._controlRefresh = null;
      o.onBuilded       = FDsBitmapPropertyToolBar_onBuilded;
      o.onRefreshClick  = FDsBitmapPropertyToolBar_onRefreshClick;
      o.construct       = FDsBitmapPropertyToolBar_construct;
      o.dispose         = FDsBitmapPropertyToolBar_dispose;
      return o;
   }
   MO.FDsBitmapPropertyToolBar_onBuilded = function FDsBitmapPropertyToolBar_onBuilded(event){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, event);
      o._controlRefresh.addClickListener(o, o.onRefreshClick);
   }
   MO.FDsBitmapPropertyToolBar_onRefreshClick = function FDsBitmapPropertyToolBar_onRefreshClick(event){
      var o = this;
   }
   MO.FDsBitmapPropertyToolBar_construct = function FDsBitmapPropertyToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsBitmapPropertyToolBar_dispose = function FDsBitmapPropertyToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsBitmapWorkspace = function FDsBitmapWorkspace(o){
      o = MO.Class.inherits(this, o, FDuiWorkspace);
      o._frameName            = 'design2d.bitmap.Workspace';
      o._styleWorkspaceGround = MO.Class.register(o, new MO.AStyle('_styleWorkspaceGround', 'Workspace_Ground'));
      o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleBodyGround      = MO.Class.register(o, new MO.AStyle('_styleBodyGround', 'Body_Ground'));
      o._styleStatusbarGround = MO.Class.register(o, new MO.AStyle('_styleStatusbarGround', 'Statusbar_Ground'));
      o._activeSpace          = null;
      o._activeMesh           = null;
      o._framesetMain         = null;
      o._framesetBody         = null;
      o._frameToolBar         = null;
      o._frameBody            = null;
      o._frameProperty        = null;
      o._frameSet             = null;
      o._propertyFrames       = null;
      o.onBuilded             = FDsBitmapWorkspace_onBuilded;
      o.onMeshLoad            = FDsBitmapWorkspace_onMeshLoad;
      o.onCatalogSelected     = FDsBitmapWorkspace_onCatalogSelected;
      o.construct             = FDsBitmapWorkspace_construct;
      o.findPropertyFrame     = FDsBitmapWorkspace_findPropertyFrame;
      o.loadByGuid            = FDsBitmapWorkspace_loadByGuid;
      o.loadByCode            = FDsBitmapWorkspace_loadByCode;
      o.dispose               = FDsBitmapWorkspace_dispose;
      return o;
   }
   MO.FDsBitmapWorkspace_onBuilded = function FDsBitmapWorkspace_onBuilded(p){
      var o = this;
      o.__base.FDuiWorkspace.onBuilded.call(o, p);
      var frame = o._frameToolBar = o.searchControl('toolbarFrame');
      frame._hPanel.className = o.styleName('Toolbar_Ground');
      var frame = o._frameBody = o.searchControl('bodyFrame');
      frame._hPanel.className = o.styleName('Body_Ground');
      var frame = o._frameStatusBar = o.searchControl('statusFrame');
      frame._hPanel.className = o.styleName('Statusbar_Ground');
      var menuBar = o._menuBar = MO.Class.create(FDsBitmapMenuBar);
      menuBar._workspace = o;
      menuBar.buildDefine(p);
      o._frameToolBar.push(menuBar);
      var frameSet = o._frameSet = MO.Class.create(FDsBitmapFrameSet);
      frameSet._workspace = o;
      frameSet.buildDefine(p);
      o._frameBody.push(frameSet);
      menuBar._frameSet = frameSet;
   }
   MO.FDsBitmapWorkspace_onMeshLoad = function FDsBitmapWorkspace_onMeshLoad(p){
      var o = this;
      o._activeSpace = p._activeSpace;
      o._catalog.buildSpace(o._activeSpace);
   }
   MO.FDsBitmapWorkspace_onCatalogSelected = function FDsBitmapWorkspace_onCatalogSelected(p, pc){
      var o = this;
      var space = o._activeSpace;
      var fs = o._propertyFrames;
      var c = fs.count();
      for(var i = 0; i < c; i++){
         var f = fs.value(i);
         f.hide();
      }
      if(MO.Class.isClass(p, FE3dStage)){
         var f = o.findPropertyFrame(EDsFrame.MeshSpacePropertyFrame);
         f.show();
         f.loadObject(space, space);
      }else if(MO.Class.isClass(p, FG3dTechnique)){
         var f = o.findPropertyFrame(EDsFrame.MeshTechniquePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dRegion)){
         var f = o.findPropertyFrame(EDsFrame.MeshRegionPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dCamera)){
         var f = o.findPropertyFrame(EDsFrame.MeshCameraPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dDirectionalLight)){
         var f = o.findPropertyFrame(EDsFrame.MeshLightPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshDisplay)){
         var f = o.findPropertyFrame(EDsFrame.MeshDisplayPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dMaterial)){
         var f = o.findPropertyFrame(EDsFrame.MeshMaterialPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshRenderable)){
         var f = o.findPropertyFrame(EDsFrame.MeshRenderablePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else{
         throw new TError('Unknown select object type. (value={1})', p);
      }
   }
   MO.FDsBitmapWorkspace_construct = function FDsBitmapWorkspace_construct(){
      var o = this;
      o.__base.FDuiWorkspace.construct.call(o);
      o._propertyFrames = new TDictionary();
   }
   MO.FDsBitmapWorkspace_findPropertyFrame = function FDsBitmapWorkspace_findPropertyFrame(p){
      var o = this;
      var f = o._propertyFrames.get(p);
      if(!f){
         var fc = MO.Console.find(FFrameConsole);
         f = fc.get(o, p, o._frameProperty._hContainer);
         f._workspace = o;
         o._propertyFrames.set(p, f);
      }
      return f;
   }
   MO.FDsBitmapWorkspace_loadByGuid = function FDsBitmapWorkspace_loadByGuid(guid){
      this._frameSet.loadByGuid(guid);
   }
   MO.FDsBitmapWorkspace_loadByCode = function FDsBitmapWorkspace_loadByCode(code){
      this._frameSet.loadByCode(code);
   }
   MO.FDsBitmapWorkspace_dispose = function FDsBitmapWorkspace_dispose(){
      var o = this;
      o.__base.FDuiWorkspace.dispose.call(o);
      o._propertyFrames.dispose();
      o._propertyFrames = null;
   }
}
with(MO){
   MO.FDsMaterialCanvasBitmap = function FDsMaterialCanvasBitmap(o){
      o = MO.Class.inherits(this, o, FDsBitmapCanvas);
      return o;
   }
}
with(MO){
   MO.FDsMaterialCanvasContent = function FDsMaterialCanvasContent(o){
      o = MO.Class.inherits(this, o, FDsCanvas);
      o._activeResource      = null;
      o._activeMaterial      = null;
      o._capturePosition     = null;
      o._captureCameraPosition = null;
      o._templateMatrix      = null;
      o._templateRenderable  = null;
      o._templateFace        = null;
      o._templateTranslation = null;
      o._templateRotation    = null;
      o._templateScale       = null;
      o._templateViewScale   = 0.05;
      o.onBuild              = FDsMaterialCanvasContent_onBuild;
      o.onLoaded             = FDsMaterialCanvasContent_onLoaded;
      o.oeResize             = FDsMaterialCanvasContent_oeResize;
      o.oeRefresh            = FDsMaterialCanvasContent_oeRefresh;
      o.construct            = FDsMaterialCanvasContent_construct;
      o.reloadRegion         = FDsMaterialCanvasContent_reloadRegion;
      o.loadByGuid           = FDsMaterialCanvasContent_loadByGuid;
      o.dispose              = FDsMaterialCanvasContent_dispose;
      return o;
   }
   MO.FDsMaterialCanvasContent_onBuild = function FDsMaterialCanvasContent_onBuild(p){
      var o = this;
      o.__base.FDsCanvas.onBuild.call(o, p);
      var hPanel = o._hPanel;
      var space = o._activeSpace = MO.Class.create(FE3dSimpleStage);
      space.linkGraphicContext(o);
      space.selectTechnique(o, FE3dGeneralTechnique);
      space.region().backgroundColor().set(1, 1, 1, 1);
      space.region().linkGraphicContext(o);
      RStage.register('space.material', space);
      var camera = space.camera();
      camera.setPosition(0, 0, -10);
      camera.lookAt(0, 0, 0);
      camera.update();
      var projection = camera.projection();
      projection.size().set(hPanel.width, hPanel.height);
      projection._angle = 45;
      projection.update();
   }
   MO.FDsMaterialCanvasContent_onLoaded = function FDsMaterialCanvasContent_onLoaded(event){
      var o = this;
      var material = o._activeMaterial = o._activeResource.material();
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsMaterialCanvasContent_oeResize = function FDsMaterialCanvasContent_oeResize(p){
      var o = this;
      o.__base.FDsCanvas.oeResize.call(o, p);
      var hp = o._hPanel;
      var w = hp.offsetWidth;
      var h = hp.offsetHeight;
      var s = o._activeSpace;
      if(s){
         var cp = s.camera().projection();
         cp.size().set(w, h);
         cp.update();
      }
      return EEventStatus.Stop;
   }
   MO.FDsMaterialCanvasContent_oeRefresh = function FDsMaterialCanvasContent_oeRefresh(p){
      return EEventStatus.Stop;
   }
   MO.FDsMaterialCanvasContent_construct = function FDsMaterialCanvasContent_construct(){
      var o = this;
      o.__base.FDsCanvas.construct.call(o);
      o._capturePosition = new MO.SPoint2();
      o._captureCameraPosition = new MO.SPoint3();
   }
   MO.FDsMaterialCanvasContent_selectDisplay = function FDsMaterialCanvasContent_selectDisplay(p){
      var o = this;
      o.selectNone();
      o._selectObject = p;
      o.innerSelectDisplay(p);
   }
   MO.FDsMaterialCanvasContent_switchMode = function FDsMaterialCanvasContent_switchMode(p){
      var o = this;
      o._canvasModeCd = p;
   }
   MO.FDsMaterialCanvasContent_reloadRegion = function FDsMaterialCanvasContent_reloadRegion(region){
      var o = this;
      var resource = region.resource();
      o._cameraMoveRate = resource.moveSpeed();
      o._cameraKeyRotation = resource.rotationKeySpeed();
      o._cameraMouseMove = resource.rotationMouseSpeed();
   }
   MO.FDsMaterialCanvasContent_loadByGuid = function FDsMaterialCanvasContent_loadByGuid(guid){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showLoading();
      var resource = o._activeResource = MO.Console.find(FE3sMaterialConsole).loadByGuid(guid);
      resource.clearLoadListeners();
      resource.addLoadListener(o, o.onLoaded);
   }
   MO.FDsMaterialCanvasContent_dispose = function FDsMaterialCanvasContent_dispose(){
      var o = this;
      o.__base.FDsCanvas.dispose.call(o);
   }
}
with(MO){
   MO.FDsMaterialCanvasToolBar = function FDsMaterialCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._controlSize1      = null;
      o._controlSize2      = null;
      o._controlSize3      = null;
      o._controlSize4      = null;
      o._controlSizeWidth  = null;
      o._controlSizeHeight = null;
      o.onBuilded          = FDsMaterialCanvasToolBar_onBuilded;
      o.onSizeClick        = FDsMaterialCanvasToolBar_onSizeClick;
      o.construct          = FDsMaterialCanvasToolBar_construct;
      o.dispose            = FDsMaterialCanvasToolBar_dispose;
      return o;
   }
   MO.FDsMaterialCanvasToolBar_onBuilded = function FDsMaterialCanvasToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlSize1.addClickListener(o, o.onSizeClick);
      o._controlSize2.addClickListener(o, o.onSizeClick);
      o._controlSize3.addClickListener(o, o.onSizeClick);
      o._controlSize4.addClickListener(o, o.onSizeClick);
      o._controlSizeWidth.setText('*');
      o._controlSizeHeight.setText('*');
   }
   MO.FDsMaterialCanvasToolBar_onModeClick = function FDsMaterialCanvasToolBar_onModeClick(p){
      var o = this;
   }
   MO.FDsMaterialCanvasToolBar_onSizeClick = function FDsMaterialCanvasToolBar_onSizeClick(event){
      var o = this;
      var button = event.sender;
      var width = '*';
      var height = '*';
      var name = button.name();
      var label = button.label();
      if(name != 'sizeAuto'){
         var size = label.split('x');
         width = parseInt(size[0]);
         height = parseInt(size[1]);
      }
      o._controlSizeWidth.setText(width);
      o._controlSizeHeight.setText(height);
   }
   MO.FDsMaterialCanvasToolBar_construct = function FDsMaterialCanvasToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsMaterialCanvasToolBar_dispose = function FDsMaterialCanvasToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsMaterialCatalogContent = function FDsMaterialCatalogContent(o){
      o = MO.Class.inherits(this, o, FDuiListView);
      o._activeItem       = null;
      o._activeGuid       = null;
      o._refreshButton    = null;
      o._saveButton       = null;
      o._runButton        = null;
      o.onBuilded         = FDsMaterialCatalogContent_onBuilded;
      o.onServiceLoad     = FDsMaterialCatalogContent_onServiceLoad;
      o.construct         = FDsMaterialCatalogContent_construct;
      o.doClickItem       = FDsMaterialCatalogContent_doClickItem;
      o.doDoubleClickItem = FDsMaterialCatalogContent_doDoubleClickItem;
      o.serviceList       = FDsMaterialCatalogContent_serviceList;
      o.dispose           = FDsMaterialCatalogContent_dispose;
      return o;
   }
   MO.FDsMaterialCatalogContent_onBuilded = function FDsMaterialCatalogContent_onBuilded(p){
      var o = this;
      o.__base.FDuiListView.onBuilded.call(o, p);
   }
   MO.FDsMaterialCatalogContent_onServiceLoad = function FDsMaterialCatalogContent_onServiceLoad(event){
      var o = this;
      var xitems = event.root.findNode('BitmapCollection');
      o.clear();
      var xnodes = xitems.nodes();
      var count = xnodes.count();
      for(var i = 0; i < count; i++){
         var xnode = xnodes.getAt(i);
         if(xnode.isName('Bitmap')){
            var code = xnode.get('code');
            var item = o.createItem(FDsMaterialCatalogItem);
            item.propertyLoad(xnode);
            item._guid = xnode.get('guid');
            item._linkGuid = xnode.get('link_guid');
            item._code = code;
            item._updateDate = xnode.get('update_date');
            item.setTypeLabel(code);
            item.setLabel(MO.Lang.String.nvl(xnode.get('label'), xnode.get('code')));
            item.refreshStyle();
            o.push(item);
         }
      }
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsMaterialCatalogContent_construct = function FDsMaterialCatalogContent_construct(){
      var o = this;
      o.__base.FDuiListView.construct.call(o);
   }
   MO.FDsMaterialCatalogContent_doClickItem = function FDsMaterialCatalogContent_doClickItem(control){
      var o = this;
      o.__base.FDuiListView.doClickItem.call(o, control);
   }
   MO.FDsMaterialCatalogContent_doDoubleClickItem = function FDsMaterialCatalogContent_doDoubleClickItem(control){
      var o = this;
      o.__base.FDuiListView.doDoubleClickItem.call(o, control)
      var guid = control._guid;
      o._activeItem = control;
      o._activeGuid = guid;
      o._frameSet.switchCanvas('Bitmap', guid);
   }
   MO.FDsMaterialCatalogContent_serviceList = function FDsMaterialCatalogContent_serviceList(guid){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showLoading();
      var url = '/cloud.resource.material.ws?action=listBitmap&guid=' + guid;
      var connection = MO.Console.find(FXmlConsole).sendAsync(url);
      connection.addLoadListener(o, o.onServiceLoad);
   }
   MO.FDsMaterialCatalogContent_dispose = function FDsMaterialCatalogContent_dispose(){
      var o = this;
      o.__base.FDuiListView.dispose.call(o);
   }
}
with(MO){
   MO.FDsMaterialCatalogItem = function FDsMaterialCatalogItem(o){
      o = MO.Class.inherits(this, o, FDuiListViewItem);
      o._styleTypePanel = MO.Class.register(o, new MO.AStyle('_styleTypePanel'));
      o._styleTypeLabel = MO.Class.register(o, new MO.AStyle('_styleTypeLabel'));
      o.onBuild         = FDsMaterialCatalogItem_onBuild;
      o.setTypeLabel    = FDsMaterialCatalogItem_setTypeLabel;
      o.refreshStyle    = FDsMaterialCatalogItem_refreshStyle;
      return o;
   }
   MO.FDsMaterialCatalogItem_onBuild = function FDsMaterialCatalogItem_onBuild(p){
      var o = this;
      o.__base.FDuiListViewItem.onBuild.call(o, p);
      var h = o._hPanel;
      h.style.width = '200px';
      h.style.height = '150px';
      o._hLine1.className = o.styleName('TypePanel');
      o._hLine1.vAlign = 'top';
      o._hTypeLabel = MO.Window.Builder.appendDiv(o._hLine1, o.styleName('TypeLabel'));
   }
   MO.FDsMaterialCatalogItem_setTypeLabel = function FDsMaterialCatalogItem_setTypeLabel(label){
      this._hTypeLabel.innerHTML = label;
   }
   MO.FDsMaterialCatalogItem_refreshStyle = function FDsMaterialCatalogItem_refreshStyle(){
      var o = this;
      var url = '/cloud.resource.bitmap.wv?do=preview&guid=' + o._guid + '&update_date=' + o._updateDate;
      o._hForm.style.backgroundImage = 'url("' + url + '")';
   }
}
with(MO){
   MO.FDsMaterialCatalogToolBar = function FDsMaterialCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._controlCreate   = null;
      o._controlDelete   = null;
      o._controlMoveUp   = null;
      o._controlMoveDown = null;
      o.onBuilded        = FDsMaterialCatalogToolBar_onBuilded;
      o.onCreateClick    = FDsMaterialCatalogToolBar_onCreateClick;
      o.onDeleteClick    = FDsMaterialCatalogToolBar_onDeleteClick;
      o.onMoveClick      = FDsMaterialCatalogToolBar_onMoveClick;
      o.construct        = FDsMaterialCatalogToolBar_construct;
      o.dispose          = FDsMaterialCatalogToolBar_dispose;
      return o;
   }
   MO.FDsMaterialCatalogToolBar_onBuilded = function FDsMaterialCatalogToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlCreate.addClickListener(o, o.onCreateClick);
      o._controlDelete.addClickListener(o, o.onDeleteClick);
      o._controlMoveUp.addClickListener(o, o.onMoveClick);
      o._controlMoveDown.addClickListener(o, o.onMoveClick);
   }
   MO.FDsMaterialCatalogToolBar_onCreateClick = function FDsMaterialCatalogToolBar_onCreateClick(p){
      var o = this;
   }
   MO.FDsMaterialCatalogToolBar_onDeleteClick = function FDsMaterialCatalogToolBar_onDeleteClick(event){
      var o = this;
   }
   MO.FDsMaterialCatalogToolBar_onMoveClick = function FDsMaterialCatalogToolBar_onMoveClick(event){
      var o = this;
   }
   MO.FDsMaterialCatalogToolBar_construct = function FDsMaterialCatalogToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsMaterialCatalogToolBar_dispose = function FDsMaterialCatalogToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsMaterialFrameSet = function FDsMaterialFrameSet(o){
      o = MO.Class.inherits(this, o, FDsFrameSet);
      o._frameCatalog         = null;
      o._frameCatalogToolBar  = null;
      o._frameCatalogContent  = null;
      o._frameCanvas          = null;
      o._frameCanvasToolBar   = null;
      o._frameCanvasContent   = null;
      o._frameProperty        = null;
      o._framePropertyToolBar = null;
      o._framePropertyContent = null;
      o.onBuilded             = FDsMaterialFrameSet_onBuilded;
      o.onDataLoaded          = FDsMaterialFrameSet_onDataLoaded;
      o.onCatalogSelected     = FDsMaterialFrameSet_onCatalogSelected;
      o.construct             = FDsMaterialFrameSet_construct;
      o.switchCanvas          = FDsMaterialFrameSet_switchCanvas;
      o.loadByGuid            = FDsMaterialFrameSet_loadByGuid;
      o.loadByCode            = FDsMaterialFrameSet_loadByCode;
      o.dispose               = FDsMaterialFrameSet_dispose;
      return o;
   }
   MO.FDsMaterialFrameSet_onBuilded = function FDsMaterialFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsFrameSet.onBuilded.call(o, event);
      o._frameCatalogToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
      o._frameCanvasToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._frameCanvasContent._hPanel.className = o.styleName('Canvas_Content');
      o._framePropertyToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._framePropertyContent._hPanel.className = o.styleName('Property_Content');
      var spliterCatalog = o._spliterCatalog;
      spliterCatalog.setAlignCd(EUiAlign.Left);
      spliterCatalog.setSizeHtml(o._frameCatalog._hPanel);
      var spliterProperty = o._spliterProperty;
      spliterProperty.setAlignCd(EUiAlign.Right);
      spliterProperty.setSizeHtml(o._frameProperty._hPanel);
      var canvas = o._canvasContent = MO.Class.create(FDsMaterialCanvasContent);
      canvas._frameSet = o;
      canvas._hParent = o._frameCanvasContent._hPanel;
      canvas._hParent.style.scroll = 'auto';
      canvas.build(event);
      var canvas = o._canvasBitmap = MO.Class.create(FDsMaterialCanvasBitmap);
      canvas._frameSet = o;
      canvas._hParent = o._frameCanvasContent._hPanel;
      canvas._hParent.style.scroll = 'auto';
      canvas.build(event);
      o._frameCanvasContent.push(canvas);
   }
   MO.FDsMaterialFrameSet_onDataLoaded = function FDsMaterialFrameSet_onDataLoaded(p){
      var o = this;
      o._activeSpace = p._activeSpace;
      o._catalog.buildSpace(o._activeSpace);
   }
   MO.FDsMaterialFrameSet_onCatalogSelected = function FDsMaterialFrameSet_onCatalogSelected(select, flag){
      var o = this;
      var space = o._activeSpace;
      if(!space){
         return;
      }
      o.hidePropertyFrames();
      if(MO.Class.isClass(select, FE3dStage)){
         var frame = o.findPropertyFrame(EDsFrame.MeshSpacePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dTechnique)){
         var frame = o.findPropertyFrame(EDsFrame.MeshTechniquePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dRegion)){
         var frame = o.findPropertyFrame(EDsFrame.MeshRegionPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dCamera)){
         var frame = o.findPropertyFrame(EDsFrame.MeshCameraPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dDirectionalLight)){
         var frame = o.findPropertyFrame(EDsFrame.MeshLightPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dMeshDisplay)){
         var frame = o.findPropertyFrame(EDsFrame.MeshDisplayPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dMaterial)){
         var frame = o.findPropertyFrame(EDsFrame.MeshMaterialPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dMeshRenderable)){
         var frame = o.findPropertyFrame(EDsFrame.MeshRenderablePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else{
         throw new TError('Unknown select object type. (select={1})', select);
      }
   }
   MO.FDsMaterialFrameSet_construct = function FDsMaterialFrameSet_construct(){
      var o = this;
      o.__base.FDsFrameSet.construct.call(o);
   }
   MO.FDsMaterialFrameSet_switchCanvas = function FDsMaterialFrameSet_switchCanvas(typeCd, guid){
      var o = this;
      if(typeCd == 'Bitmap'){
         var canvas = o._canvasBitmap;
         canvas.loadByGuid(guid);
      }else{
      }
   }
   MO.FDsMaterialFrameSet_loadByGuid = function FDsMaterialFrameSet_loadByGuid(guid){
      var o = this;
      o._activeGuid = guid;
      var resource = o._activeResource = MO.Console.find(FDrMaterialConsole).query(guid);
      o._catalogContent.serviceList(guid);
      var canvas = o._canvasContent;
      canvas.loadByGuid(guid);
      var frame = o.findPropertyFrame(EDsFrame.MaterialPropertyFrame);
      frame.loadObject(resource);
   }
   MO.FDsMaterialFrameSet_loadByCode = function FDsMaterialFrameSet_loadByCode(code){
      var o = this;
      o._activeCode = code;
      o._canvas.loadByCode(code);
   }
   MO.FDsMaterialFrameSet_dispose = function FDsMaterialFrameSet_dispose(){
      var o = this;
      o.__base.FDsFrameSet.dispose.call(o);
   }
}
with(MO){
   MO.FDsMaterialImportDialog = function FDsMaterialImportDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.material.ImportDialog';
      o._modeCd               = null;
      o._nodeGuid             = null;
      o._controlPrivateButton = null;
      o._controlTeamButton    = null;
      o._controlShareButton   = null;
      o.onBuilded             = FDsMaterialImportDialog_onBuilded;
      o.onFileLoaded          = FDsMaterialImportDialog_onFileLoaded;
      o.onConfirmLoad         = FDsMaterialImportDialog_onConfirmLoad;
      o.onConfirmClick        = FDsMaterialImportDialog_onConfirmClick;
      o.onCancelClick         = FDsMaterialImportDialog_onCancelClick;
      o.construct             = FDsMaterialImportDialog_construct;
      o.switchModeCd          = FDsMaterialImportDialog_switchModeCd;
      o.dispose               = FDsMaterialImportDialog_dispose;
      return o;
   }
   MO.FDsMaterialImportDialog_onBuilded = function FDsMaterialImportDialog_onBuilded(event){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, event);
      o._controlConfirmButton.addClickListener(o, o.onConfirmClick);
      o._controlCancelButton.addClickListener(o, o.onCancelClick);
   }
   MO.FDsMaterialImportDialog_onFileLoaded = function FDsMaterialImportDialog_onFileLoaded(event){
      var o = this;
      var item = o._activeItem;
      var resource = o._frameSet._activeResource;
      var guid = resource.guid();
      var typeCode = o._controlTypeCode.get();
      var code = o._controlCode.get();
      if(MO.Lang.String.isEmpty(code)){
         code = typeCode;
      }
      var label = o._controlLabel.get();
      var url = null;
      var reader = o._fileReader;
      switch(o._modeCd){
         case 'select':
            var linkGuid = item._linkGuid;
            var bitmapGuid = item._guid;
            url = '/cloud.resource.material.wv?do=replaceData&material_guid=' + guid + '&link_guid=' + linkGuid + '&bitmap_guid=' + bitmapGuid + '&code=' + code + '&label=' + label + '&data_length=' + reader.length() + '&file_name=' + reader.fileName();
            break;
         case 'import':
            url = '/cloud.resource.material.wv?do=importData&material_guid=' + guid + '&code=' + code + '&label=' + label + '&data_length=' + reader.length() + '&file_name=' + reader.fileName();
            break;
         default:
            throw new TError(o, 'Unknown mode. (mode_cd={1})', modeCd);
      }
      url = RBrowser.urlEncode(url);
      var connection = MO.Console.find(FHttpConsole).send(url, reader.data());
      connection.addLoadListener(o, o.onConfirmLoad);
      o._fileReader = MO.Lang.Object.dispose(reader);
   }
   MO.FDsMaterialImportDialog_onConfirmLoad = function FDsMaterialImportDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
   }
   MO.FDsMaterialImportDialog_onConfirmClick = function FDsMaterialImportDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var file = o._controlFile._hInput.files[0];
      var reader = o._fileReader = MO.Class.create(FFileReader);
      reader.addLoadListener(o, o.onFileLoaded);
      reader.loadFile(file);
   }
   MO.FDsMaterialImportDialog_onCancelClick = function FDsMaterialImportDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsMaterialImportDialog_construct = function FDsMaterialImportDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsMaterialImportDialog_switchModeCd = function FDsMaterialImportDialog_switchModeCd(modeCd){
      var o = this;
      o._modeCd = modeCd;
      switch(modeCd){
         case 'select':
            o.setLabel('替换位图资源');
            break;
         case 'import':
            o.setLabel('导入位图资源');
            break;
         default:
            throw new TError(o, 'Unknown mode. (mode_cd={1})', modeCd);
      }
      o._controlCode.set('');
      o._controlLabel.set('');
   }
   MO.FDsMaterialImportDialog_dispose = function FDsMaterialImportDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsMaterialMenuBar = function FDsMaterialMenuBar(o){
      o = MO.Class.inherits(this, o, FDuiMenuBar);
      o._controlBack     = null;
      o._controlSave     = null;
      o._controlProperty = null;
      o._controlSelect   = null;
      o._controlImport   = null;
      o._controlCapture  = null;
      o.onBuilded        = FDsMaterialMenuBar_onBuilded;
      o.onBackClick      = FDsMaterialMenuBar_onBackClick;
      o.onSaveLoad       = FDsMaterialMenuBar_onSaveLoad;
      o.onSaveClick      = FDsMaterialMenuBar_onSaveClick;
      o.onPropertyClick  = FDsMaterialMenuBar_onPropertyClick;
      o.onSelectLoad     = FDsMaterialMenuBar_onSelectLoad;
      o.onSelectConfirm  = FDsMaterialMenuBar_onSelectConfirm;
      o.onSelectClick    = FDsMaterialMenuBar_onSelectClick;
      o.onImportClick    = FDsMaterialMenuBar_onImportClick;
      o.onDeleteLoad     = FDsMaterialMenuBar_onDeleteLoad;
      o.onDeleteExecute  = FDsMaterialMenuBar_onDeleteExecute;
      o.onDeleteClick    = FDsMaterialMenuBar_onDeleteClick;
      o.onCaptureLoad    = FDsMaterialMenuBar_onCaptureLoad;
      o.onCaptureClick   = FDsMaterialMenuBar_onCaptureClick;
      o.construct        = FDsMaterialMenuBar_construct;
      o.dispose          = FDsMaterialMenuBar_dispose;
      return o;
   }
   MO.FDsMaterialMenuBar_onBuilded = function FDsMaterialMenuBar_onBuilded(p){
      var o = this;
      o.__base.FDuiMenuBar.onBuilded.call(o, p);
      o._controlBack.addClickListener(o, o.onBackClick);
      o._controlSave.addClickListener(o, o.onSaveClick);
      o._controlProperty.addClickListener(o, o.onPropertyClick);
      o._controlSelect.addClickListener(o, o.onSelectClick);
      o._controlImport.addClickListener(o, o.onImportClick);
      o._controlDelete.addClickListener(o, o.onDeleteClick);
      o._controlCapture.addClickListener(o, o.onCaptureClick);
   }
   MO.FDsMaterialMenuBar_onBackClick = function FDsMaterialMenuBar_onBackClick(event){
      var o = this;
   }
   MO.FDsMaterialMenuBar_onSaveLoad = function FDsMaterialMenuBar_onSaveLoad(event){
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsMaterialMenuBar_onSaveClick = function FDsMaterialMenuBar_onSaveClick(p){
      var o = this;
      var space = o._frameSet._activeSpace;
      var resource = space.resource();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var xconfig = new TXmlNode();
      resource.saveConfig(xconfig);
      var connection = MO.Console.find(FE3sMeshConsole).update(xconfig);
      connection.addLoadListener(o, o.onSaveLoad);
   }
   MO.FDsMaterialMenuBar_onPropertyClick = function FDsMaterialMenuBar_onPropertyClick(event){
      var o = this;
   }
   MO.FDsMaterialMenuBar_onSelectLoad = function FDsMaterialMenuBar_onSelectLoad(event){
   }
   MO.FDsMaterialMenuBar_onSelectConfirm = function FDsMaterialMenuBar_onSelectConfirm(event){
   }
   MO.FDsMaterialMenuBar_onSelectClick = function FDsMaterialMenuBar_onSelectClick(event){
      var o = this;
      var item = o._frameSet._catalogContent.focusItem();
      if(!item){
         return alert('请选中位图');
      }
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsMaterialImportDialog);
      dialog._frameSet = o._frameSet;
      dialog._activeItem = item;
      dialog.switchModeCd('select');
      dialog._controlTypeCode.set(item._code);
      dialog._controlCode.set(item._code);
      dialog._controlLabel.set(item._label);
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsMaterialMenuBar_onImportClick = function FDsMaterialMenuBar_onImportClick(event){
      var o = this;
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsMaterialImportDialog);
      dialog._frameSet = o._frameSet;
      dialog.switchModeCd('import');
      dialog._controlCode.set('');
      dialog._controlLabel.set('');
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsMaterialMenuBar_onDeleteLoad = function FDsMaterialMenuBar_onDeleteLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsMaterialMenuBar_onDeleteExecute = function FDsMaterialMenuBar_onDeleteExecute(event){
      var o = this;
      var item = o._frameSet._catalogContent.focusItem();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = MO.Console.find(FDrMaterialConsole).deleteBitmap(item._linkGuid);
      connection.addLoadListener(o, o.onDeleteLoad);
   }
   MO.FDsMaterialMenuBar_onDeleteClick = function FDsMaterialMenuBar_onDeleteClick(event){
      var o = this;
      var item = o._frameSet._catalogContent.focusItem();
      if(!item){
         return alert('请选中后再点击删除');
      }
      var dialog = MO.Console.find(FDuiMessageConsole).showConfirm('请确认是否删除当前资源？');
      dialog.addResultListener(o, o.onDeleteExecute);
   }
   MO.FDsMaterialMenuBar_onCaptureLoad = function FDsMaterialMenuBar_onCaptureLoad(event){
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsMaterialMenuBar_onCaptureClick = function FDsMaterialMenuBar_onCaptureClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = o._frameSet._canvas.capture();
      connection.addLoadListener(o, o.onCaptureLoad);
   }
   MO.FDsMaterialMenuBar_construct = function FDsMaterialMenuBar_construct(){
      var o = this;
      o.__base.FDuiMenuBar.construct.call(o);
   }
   MO.FDsMaterialMenuBar_dispose = function FDsMaterialMenuBar_dispose(){
      var o = this;
      o.__base.FDuiMenuBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsMaterialPropertyFrame = function FDsMaterialPropertyFrame(o){
      o = MO.Class.inherits(this, o, FDuiForm);
      o._activeResource = null;
      o._controlGuid    = null;
      o._controlCode    = null;
      o._controlLabel   = null;
      o.onBuilded       = FDsMaterialPropertyFrame_onBuilded;
      o.onDataChanged   = FDsMaterialPropertyFrame_onDataChanged;
      o.construct       = FDsMaterialPropertyFrame_construct;
      o.loadObject      = FDsMaterialPropertyFrame_loadObject;
      o.dispose         = FDsMaterialPropertyFrame_dispose;
      return o;
   }
   MO.FDsMaterialPropertyFrame_construct = function FDsMaterialPropertyFrame_construct(){
      var o = this;
      o.__base.FDuiForm.construct.call(o);
   }
   MO.FDsMaterialPropertyFrame_onBuilded = function FDsMaterialPropertyFrame_onBuilded(event){
      var o = this;
      o.__base.FDuiForm.onBuilded.call(o, event);
      o._controlCode.addDataChangedListener(o, o.onDataChanged);
      o._controlLabel.addDataChangedListener(o, o.onDataChanged);
   }
   MO.FDsMaterialPropertyFrame_onDataChanged = function FDsMaterialPropertyFrame_onDataChanged(p){
      var o = this;
      var resource = o._activeResource;
      resource.setCode(o._controlCode.get());
      resource.setLabel(o._controlLabel.get());
   }
   MO.FDsMaterialPropertyFrame_loadObject = function FDsMaterialPropertyFrame_loadObject(resource){
      var o = this;
      o._activeResource = resource;
      o._controlGuid.set(resource.guid());
      o._controlCode.set(resource.code());
      o._controlLabel.set(resource.label());
   }
   MO.FDsMaterialPropertyFrame_dispose = function FDsMaterialPropertyFrame_dispose(){
      var o = this;
      o.__base.FDuiForm.dispose.call(o);
   }
}
with(MO){
   MO.FDsMaterialPropertyToolBar = function FDsMaterialPropertyToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName      = 'resource.material.PropertyToolBar';
      o._controlRefresh = null;
      o.onBuilded       = FDsMaterialPropertyToolBar_onBuilded;
      o.onRefreshClick  = FDsMaterialPropertyToolBar_onRefreshClick;
      o.construct       = FDsMaterialPropertyToolBar_construct;
      o.dispose         = FDsMaterialPropertyToolBar_dispose;
      return o;
   }
   MO.FDsMaterialPropertyToolBar_onBuilded = function FDsMaterialPropertyToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlRefresh.addClickListener(o, o.onRefreshClick);
   }
   MO.FDsMaterialPropertyToolBar_onRefreshClick = function FDsMaterialPropertyToolBar_onRefreshClick(p){
      var o = this;
   }
   MO.FDsMaterialPropertyToolBar_onSizeClick = function FDsMaterialPropertyToolBar_onSizeClick(event){
      var o = this;
      var button = event.sender;
      var width = '*';
      var height = '*';
      var name = button.name();
      var label = button.label();
      if(name != 'sizeAuto'){
         var size = label.split('x');
         width = parseInt(size[0]);
         height = parseInt(size[1]);
      }
      o._controlSizeWidth.setText(width);
      o._controlSizeHeight.setText(height);
      o._frameSet._canvas.switchSize(width, height);
   }
   MO.FDsMaterialPropertyToolBar_onRotationChange = function FDsMaterialPropertyToolBar_onRotationChange(event){
      var o = this;
      var canvas = o._frameSet._canvas;
      var visible = o._controlRotationVisible.isCheck();
      var width = RInteger.parse(o._controlRotationWidth.text());
      var height = RInteger.parse(o._controlRotationHeight.text());
      canvas.switchRotation(visible, width, height);
   }
   MO.FDsMaterialPropertyToolBar_onRotationAutoClick = function FDsMaterialPropertyToolBar_onRotationAutoClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      var flipX = false;
      var flipY = false;
      var flipZ = false;
      var rotationX = false;
      var rotationY = false;
      var rotationZ = false;
      switch(name){
         case 'dimensionalAuto':
            break;
         case 'dimensionalFlipX':
            flipX = true;
            break;
         case 'dimensionalFlipY':
            flipY = true;
            break;
         case 'dimensionalFlipZ':
            flipZ = true;
            break;
         case 'dimensionalX':
            rotationX = true;
            break;
         case 'dimensionalY':
            rotationY = true;
            break;
         case 'dimensionalZ':
            rotationZ = true;
            break;
         default:
            throw new TError(o, 'Unknown command.');
      }
      o._frameSet._canvas.viewAutoSize(flipX, flipY, flipZ, rotationX, rotationY, rotationZ);
   }
   MO.FDsMaterialPropertyToolBar_onRotationClick = function FDsMaterialPropertyToolBar_onRotationClick(event, v){
      var o = this;
      var button = event.sender;
      var canvas = o._frameSet._canvas;
      canvas.switchRotation(button.isCheck());
   }
   MO.FDsMaterialPropertyToolBar_construct = function FDsMaterialPropertyToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsMaterialPropertyToolBar_dispose = function FDsMaterialPropertyToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsMaterialSelectDialog = function FDsMaterialSelectDialog(o){
      o = MO.Class.inherits(this, o, FDuiDialog);
      o._frameName            = 'resource.material.SelectDialog';
      o._nodeGuid             = null;
      o._controlPrivateButton = null;
      o._controlTeamButton    = null;
      o._controlShareButton   = null;
      o.onBuilded             = FDsMaterialSelectDialog_onBuilded;
      o.onFileLoaded          = FDsMaterialSelectDialog_onFileLoaded;
      o.onConfirmLoad         = FDsMaterialSelectDialog_onConfirmLoad;
      o.onConfirmClick        = FDsMaterialSelectDialog_onConfirmClick;
      o.onCancelClick         = FDsMaterialSelectDialog_onCancelClick;
      o.construct             = FDsMaterialSelectDialog_construct;
      o.dispose               = FDsMaterialSelectDialog_dispose;
      return o;
   }
   MO.FDsMaterialSelectDialog_onBuilded = function FDsMaterialSelectDialog_onBuilded(event){
      var o = this;
      o.__base.FDuiDialog.onBuilded.call(o, event);
      o._controlConfirmButton.addClickListener(o, o.onConfirmClick);
      o._controlCancelButton.addClickListener(o, o.onCancelClick);
   }
   MO.FDsMaterialSelectDialog_onFileLoaded = function FDsMaterialSelectDialog_onFileLoaded(event){
      var o = this;
      var reader = o._fileReader;
      var resource = o._resource;
      var guid = resource.guid();
      var url = '/cloud.resource.material.wv?do=importData&guid=' + guid + '&data_length=' + reader.length() + '&file_name=' + reader.fileName();
      url = RBrowser.urlEncode(url);
      var connection = MO.Console.find(FHttpConsole).send(url, reader.data());
      connection.addLoadListener(o, o.onConfirmLoad);
      o._fileReader = MO.Lang.Object.dispose(reader);
   }
   MO.FDsMaterialSelectDialog_onConfirmLoad = function FDsMaterialSelectDialog_onConfirmLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      o.hide();
      o._frameSet.reload();
   }
   MO.FDsMaterialSelectDialog_onConfirmClick = function FDsMaterialSelectDialog_onConfirmClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var file = o._controlFile._hInput.files[0];
      var reader = o._fileReader = MO.Class.create(FFileReader);
      reader.addLoadListener(o, o.onFileLoaded);
      reader.loadFile(file);
   }
   MO.FDsMaterialSelectDialog_onCancelClick = function FDsMaterialSelectDialog_onCancelClick(event){
      this.hide();
   }
   MO.FDsMaterialSelectDialog_construct = function FDsMaterialSelectDialog_construct(){
      var o = this;
      o.__base.FDuiDialog.construct.call(o);
   }
   MO.FDsMaterialSelectDialog_dispose = function FDsMaterialSelectDialog_dispose(){
      var o = this;
      o.__base.FDuiDialog.dispose.call(o);
   }
}
with(MO){
   MO.FDsMaterialWorkspace = function FDsMaterialWorkspace(o){
      o = MO.Class.inherits(this, o, FDuiWorkspace);
      o._frameName            = 'design2d.bitmap.Workspace';
      o._styleWorkspaceGround = MO.Class.register(o, new MO.AStyle('_styleWorkspaceGround', 'Workspace_Ground'));
      o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleBodyGround      = MO.Class.register(o, new MO.AStyle('_styleBodyGround', 'Body_Ground'));
      o._styleStatusbarGround = MO.Class.register(o, new MO.AStyle('_styleStatusbarGround', 'Statusbar_Ground'));
      o._activeSpace          = null;
      o._activeMesh           = null;
      o._framesetMain         = null;
      o._framesetBody         = null;
      o._frameToolBar         = null;
      o._frameBody            = null;
      o._frameProperty        = null;
      o._frameSet             = null;
      o._propertyFrames       = null;
      o.onBuilded             = FDsMaterialWorkspace_onBuilded;
      o.onMeshLoad            = FDsMaterialWorkspace_onMeshLoad;
      o.onCatalogSelected     = FDsMaterialWorkspace_onCatalogSelected;
      o.construct             = FDsMaterialWorkspace_construct;
      o.findPropertyFrame     = FDsMaterialWorkspace_findPropertyFrame;
      o.loadByGuid            = FDsMaterialWorkspace_loadByGuid;
      o.loadByCode            = FDsMaterialWorkspace_loadByCode;
      o.dispose               = FDsMaterialWorkspace_dispose;
      return o;
   }
   MO.FDsMaterialWorkspace_onBuilded = function FDsMaterialWorkspace_onBuilded(p){
      var o = this;
      o.__base.FDuiWorkspace.onBuilded.call(o, p);
      var frame = o._frameToolBar = o.searchControl('toolbarFrame');
      frame._hPanel.className = o.styleName('Toolbar_Ground');
      var frame = o._frameBody = o.searchControl('bodyFrame');
      frame._hPanel.className = o.styleName('Body_Ground');
      var frame = o._frameStatusBar = o.searchControl('statusFrame');
      frame._hPanel.className = o.styleName('Statusbar_Ground');
      var menuBar = o._menuBar = MO.Class.create(FDsMaterialMenuBar);
      menuBar._workspace = o;
      menuBar.buildDefine(p);
      o._frameToolBar.push(menuBar);
      var frameSet = o._frameSet = MO.Class.create(FDsMaterialFrameSet);
      frameSet._workspace = o;
      frameSet.buildDefine(p);
      o._frameBody.push(frameSet);
      menuBar._frameSet = frameSet;
   }
   MO.FDsMaterialWorkspace_onMeshLoad = function FDsMaterialWorkspace_onMeshLoad(p){
      var o = this;
      o._activeSpace = p._activeSpace;
      o._catalog.buildSpace(o._activeSpace);
   }
   MO.FDsMaterialWorkspace_onCatalogSelected = function FDsMaterialWorkspace_onCatalogSelected(p, pc){
      var o = this;
      var space = o._activeSpace;
      var fs = o._propertyFrames;
      var c = fs.count();
      for(var i = 0; i < c; i++){
         var f = fs.value(i);
         f.hide();
      }
      if(MO.Class.isClass(p, FE3dStage)){
         var f = o.findPropertyFrame(EDsFrame.MeshSpacePropertyFrame);
         f.show();
         f.loadObject(space, space);
      }else if(MO.Class.isClass(p, FG3dTechnique)){
         var f = o.findPropertyFrame(EDsFrame.MeshTechniquePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dRegion)){
         var f = o.findPropertyFrame(EDsFrame.MeshRegionPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dCamera)){
         var f = o.findPropertyFrame(EDsFrame.MeshCameraPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dDirectionalLight)){
         var f = o.findPropertyFrame(EDsFrame.MeshLightPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshDisplay)){
         var f = o.findPropertyFrame(EDsFrame.MeshDisplayPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dMaterial)){
         var f = o.findPropertyFrame(EDsFrame.MeshMaterialPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshRenderable)){
         var f = o.findPropertyFrame(EDsFrame.MeshRenderablePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else{
         throw new TError('Unknown select object type. (value={1})', p);
      }
   }
   MO.FDsMaterialWorkspace_construct = function FDsMaterialWorkspace_construct(){
      var o = this;
      o.__base.FDuiWorkspace.construct.call(o);
      o._propertyFrames = new TDictionary();
   }
   MO.FDsMaterialWorkspace_findPropertyFrame = function FDsMaterialWorkspace_findPropertyFrame(p){
      var o = this;
      var f = o._propertyFrames.get(p);
      if(!f){
         var fc = MO.Console.find(FFrameConsole);
         f = fc.get(o, p, o._frameProperty._hContainer);
         f._workspace = o;
         o._propertyFrames.set(p, f);
      }
      return f;
   }
   MO.FDsMaterialWorkspace_loadByGuid = function FDsMaterialWorkspace_loadByGuid(guid){
      this._frameSet.loadByGuid(guid);
   }
   MO.FDsMaterialWorkspace_loadByCode = function FDsMaterialWorkspace_loadByCode(code){
      this._frameSet.loadByCode(code);
   }
   MO.FDsMaterialWorkspace_dispose = function FDsMaterialWorkspace_dispose(){
      var o = this;
      o.__base.FDuiWorkspace.dispose.call(o);
      o._propertyFrames.dispose();
      o._propertyFrames = null;
   }
}
with(MO){
   MO.FDsModelCanvasContent = function FDsModelCanvasContent(o){
      o = MO.Class.inherits(this, o, FDsCanvas);
      o._resourceTypeCd      = EE3sResource.Model;
      o._autoDistance        = null;
      o._autoOutline         = null;
      o._autoMatrix          = null;
      o._optionRotation      = false;
      o._rotation            = null;
      o._capturePosition     = null;
      o._captureMatrix       = null;
      o._captureRotation     = null;
      o._selectObject        = null;
      o._selectBoundBox      = null;
      o._selectRenderables   = null;
      o._templateMatrix      = null;
      o._templateRenderable  = null;
      o._templateFace        = null;
      o._templateTranslation = null;
      o._templateRotation    = null;
      o._templateScale       = null;
      o._templateViewScale   = 0.05;
      o.onBuild              = FDsModelCanvasContent_onBuild;
      o.onMouseCaptureStart  = FDsModelCanvasContent_onMouseCaptureStart;
      o.onMouseCapture       = FDsModelCanvasContent_onMouseCapture;
      o.onMouseCaptureStop   = FDsModelCanvasContent_onMouseCaptureStop;
      o.onDataLoaded         = FDsModelCanvasContent_onDataLoaded;
      o.oeResize             = FDsModelCanvasContent_oeResize;
      o.oeRefresh            = FDsModelCanvasContent_oeRefresh;
      o.construct            = FDsModelCanvasContent_construct;
      o.innerSelectDisplay   = FDsModelCanvasContent_innerSelectDisplay;
      o.innerSelectLayer     = FDsModelCanvasContent_innerSelectLayer;
      o.selectNone           = FDsModelCanvasContent_selectNone;
      o.selectDisplay        = FDsModelCanvasContent_selectDisplay;
      o.selectMaterial       = FDsModelCanvasContent_selectMaterial;
      o.selectRenderable     = FDsModelCanvasContent_selectRenderable;
      o.switchDimensional    = FDsModelCanvasContent_switchDimensional;
      o.switchRotation       = FDsModelCanvasContent_switchRotation;
      o.viewAutoSize         = FDsModelCanvasContent_viewAutoSize;
      o.loadByGuid           = FDsModelCanvasContent_loadByGuid;
      o.loadByCode           = FDsModelCanvasContent_loadByCode;
      o.dispose              = FDsModelCanvasContent_dispose;
      return o;
   }
   MO.FDsModelCanvasContent_onBuild = function FDsModelCanvasContent_onBuild(p){
      var o = this;
      o.__base.FDsCanvas.onBuild.call(o, p);
   }
   MO.FDsModelCanvasContent_onMouseCaptureStart = function FDsModelCanvasContent_onMouseCaptureStart(p){
      var o = this;
      var s = o._activeSpace;
      if(!s){
         return;
      }
      var r = o._activeSpace.region();
      var st = MO.Console.find(FG3dTechniqueConsole).find(o._graphicContext, FG3dSelectTechnique);
      var r = st.test(r, p.offsetX, p.offsetY);
      o.selectRenderable(r);
      o._capturePosition.set(p.clientX, p.clientY);
      o._captureRotation.assign(s.camera()._rotation);
      if(r){
         var d = r.display();
         o._captureMatrix.assign(d.matrix());
      }
      o._templateMatrix.identity();
      if(o._templateFace){
         o._templateFaceMatrix.assign(o._templateFace.matrix());
         var rs = o._selectRenderables;
         for(var i = rs.count() - 1; i >= 0; i--){
            var r = rs.getAt(i);
            if(!r._dragMatrix){
               r._dragMatrix = new MO.SMatrix3d();
            }
            r._dragMatrix.assign(r.matrix());
         }
      }
      RHtml.cursorSet(o._hPanel, EUiCursor.Pointer);
   }
   MO.FDsModelCanvasContent_onMouseCapture = function FDsModelCanvasContent_onMouseCapture(p){
      var o = this;
      var s = o._activeSpace;
      if(!s){
         return;
      }
      var cx = p.clientX - o._capturePosition.x;
      var cy = p.clientY - o._capturePosition.y;
      var mc = o._canvasModeCd;
      var mv = o._canvasMoveCd;
      var cm = o._captureMatrix;
      var sm = null;
      var tf = o._templateFace;
      var tm = o._templateMatrix;
      switch(mc){
         case EDsCanvasMode.Drop:
            var c = o._activeSpace.camera();
            var r = c.rotation();
            var cr = o._captureRotation;
            r.x = cr.x - cy * o._cameraMouseRotation;
            r.y = cr.y - cx * o._cameraMouseRotation;
            break;
         case EDsCanvasMode.Select:
            break;
         case EDsCanvasMode.Translate:
            if(tf){
               if(mv == EDsCanvasDrag.X){
                  tm.tx = cx / 10;
               }else if(mv == EDsCanvasDrag.Y){
                  tm.ty = -cy / 10;
               }else if(mv == EDsCanvasDrag.Z){
                  tm.tz = cx / 10;
               }
            }
            break;
         case EDsCanvasMode.Rotation:
            if(tf){
               if(mv == EDsCanvasDrag.X){
                  tm.rx = cx / 10;
               }else if(mv == EDsCanvasDrag.Y){
                  tm.ry = -cy / 10;
               }else if(mv == EDsCanvasDrag.Z){
                  tm.rz = cx / 10;
               }
            }
            break;
         case EDsCanvasMode.Scale:
            if(tf){
               if(mv == EDsCanvasDrag.X){
                  tm.sx = cx / 10;
               }else if(mv == EDsCanvasDrag.Y){
                  tm.sy = -cy / 10;
               }else if(mv == EDsCanvasDrag.Z){
                  tm.sz = cx / 10;
               }else if(mv == EDsCanvasDrag.All){
                  tm.sx = cx / 10;
                  tm.sy = cx / 10;
                  tm.sz = cx / 10;
               }
            }
            break;
      }
      if(tf){
         tf.matrix().merge(o._templateFaceMatrix, tm);
         var rs = o._selectRenderables;
         for(var i = rs.count() - 1; i >= 0; i--){
            var r = rs.getAt(i);
            r._matrix.merge(r._dragMatrix, tm);
         }
      }
   }
   MO.FDsModelCanvasContent_onMouseCaptureStop = function FDsModelCanvasContent_onMouseCaptureStop(p){
      var o = this;
      RHtml.cursorSet(o._hPanel, EUiCursor.Auto);
   }
   MO.FDsModelCanvasContent_onDataLoaded = function FDsModelCanvasContent_onDataLoaded(p){
      var o = this;
      var m = o._activeSpace;
      var g = m.region();
      var rc = g.camera();
      rc.setPosition(0, 3, -10);
      rc.lookAt(0, 3, 0);
      rc.update();
      var h = o._hPanel;
      var rp = rc.projection();
      rp.size().set(h.width, h.height);
      rp._angle = 45;
      rp.update();
      var l = g.directionalLight();
      var lc = l.camera();
      lc.setPosition(10, 10, 0);
      lc.lookAt(0, 0, 0);
      lc.update();
      var event = new MO.SEvent(o);
      o.processLoadListener(event);
      event.dispose();
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsModelCanvasContent_oeResize = function FDsModelCanvasContent_oeResize(p){
      var o = this;
      o.__base.FDsCanvas.oeResize.call(o, p);
      var hp = o._hPanel;
      var w = hp.offsetWidth;
      var h = hp.offsetHeight;
      var s = o._activeSpace;
      if(s){
         var cp = s.camera().projection();
         cp.size().set(w, h);
         cp.update();
      }
      return EEventStatus.Stop;
   }
   MO.FDsModelCanvasContent_oeRefresh = function FDsModelCanvasContent_oeRefresh(p){
      return EEventStatus.Stop;
   }
   MO.FDsModelCanvasContent_construct = function FDsModelCanvasContent_construct(){
      var o = this;
      o.__base.FDsCanvas.construct.call(o);
      o._autoDistance = new MO.SPoint3(6, 6, 6);
      o._autoOutline = new MO.SOutline3d();
      o._autoMatrix = new MO.SMatrix3d();
      o._capturePosition = new MO.SPoint2();
      o._captureMatrix = new MO.SMatrix3d();
      o._templateMatrix = new MO.SMatrix3d();
      o._templateFaceMatrix = new MO.SMatrix3d();
      o._rotation = new MO.SVector3();
      o._captureRotation = new MO.SVector3();
      o._selectRenderables = new TObjects();
   }
   MO.FDsModelCanvasContent_innerSelectDisplay = function FDsModelCanvasContent_innerSelectDisplay(p){
      var o = this;
      var s = p.renderables();
      var c = s.count();
      for(var i = 0; i < c; i++){
         var r = s.getAt(i);
         if(MO.Class.isClass(r, FDsSceneRenderable)){
            o._selectRenderables.push(r);
            r.showBoundBox();
         }
      }
   }
   MO.FDsModelCanvasContent_innerSelectLayer = function FDsModelCanvasContent_innerSelectLayer(p){
      var o = this;
      var s = p.displays();
      var c = s.count();
      for(var i = 0; i < c; i++){
         var d = s.getAt(i);
         o.innerSelectDisplay(d)
      }
   }
   MO.FDsModelCanvasContent_selectNone = function FDsModelCanvasContent_selectNone(){
      var o = this;
      o._selectObject = null;
      var s = o._selectRenderables;
      var c = s.count();
      for(var i = 0; i < c; i++){
         var r = s.get(i);
         r.hideBoundBox();
      }
      o._selectRenderables.clear();
   }
   MO.FDsModelCanvasContent_selectDisplay = function FDsModelCanvasContent_selectDisplay(p){
      var o = this;
      o.selectNone();
      o._selectObject = p;
      o.innerSelectDisplay(p);
   }
   MO.FDsModelCanvasContent_selectMaterial = function FDsModelCanvasContent_selectMaterial(p){
      var o = this;
      o.selectNone();
      o._selectObject = p;
      var d = p._display;
      var s = d.renderables();
      var c = s.count();
      for(var i = 0; i < c; i++){
         var r = s.get(i);
         if(r._materialReference == p){
            o._selectRenderables.push(r);
            r._optionSelected = true;
            r.showBoundBox();
         }
      }
   }
   MO.FDsModelCanvasContent_selectRenderable = function FDsModelCanvasContent_selectRenderable(p){
      var o = this;
      var sr = p;
      if(sr){
         var n = sr._renderable._resource._code;
         switch(n){
            case 'ms_translation_x':
               o._canvasMoveCd = EDsCanvasDrag.X;
               o._templateRenderable = sr;
               return;
            case 'ms_translation_y':
               o._canvasMoveCd = EDsCanvasDrag.Y;
               o._templateRenderable = sr;
               return;
            case 'ms_translation_z':
               o._canvasMoveCd = EDsCanvasDrag.Z;
               o._templateRenderable = sr;
               return;
            case 'ms_rotation_x':
               o._canvasMoveCd = EDsCanvasDrag.X;
               o._templateRenderable = sr;
               return;
            case 'ms_rotation_y':
               o._canvasMoveCd = EDsCanvasDrag.Y;
               o._templateRenderable = sr;
               return;
            case 'ms_rotation_z':
               o._canvasMoveCd = EDsCanvasDrag.Z;
               o._templateRenderable = sr;
               return;
            case 'ms_scale_x':
               o._canvasMoveCd = EDsCanvasDrag.X;
               o._templateRenderable = sr;
               return;
            case 'ms_scale_y':
               o._canvasMoveCd = EDsCanvasDrag.Y;
               o._templateRenderable = sr;
               return;
            case 'ms_scale_z':
               o._canvasMoveCd = EDsCanvasDrag.Z;
               o._templateRenderable = sr;
               return;
            case 'ms_scale_all':
               o._canvasMoveCd = EDsCanvasDrag.All;
               o._templateRenderable = sr;
               return;
            default:
               o._canvasMoveCd = EDsCanvasDrag.Unknown;
               o._templateRenderable = null;
         }
      }
      o.selectNone();
      if(p){
         o._selectRenderables.push(p);
         p._optionSelected = true;
         p.showBoundBox();
         o._frameSet._catalog.showObject(p);
      }
      var t = o._templateTranslation;
      var r = o._templateRotation;
      var s = o._templateScale;
      var mc = o._canvasModeCd;
      switch(mc){
         case EDsCanvasMode.Drop:
            break;
         case EDsCanvasMode.Select:
            break;
         case EDsCanvasMode.Translate:
            t.setVisible(sr != null);
            r.hide();
            s.hide();
            o._templateFace = t;
            break;
         case EDsCanvasMode.Rotation:
            t.hide();
            r.setVisible(sr != null);
            s.hide();
            o._templateFace = r;
            break;
         case EDsCanvasMode.Scale:
            t.hide();
            r.hide();
            s.setVisible(sr != null);
            o._templateFace = s;
            break;
      }
      var st = o._templateFace;
      if(sr && st){
         var d = sr.display();
         var m = st.matrix();
         m.assign(d.matrix());
         m.setScaleAll(o._templateViewScale);
         m.update();
      }
   }
   MO.FDsModelCanvasContent_switchMode = function FDsModelCanvasContent_switchMode(p){
      var o = this;
      o._canvasModeCd = p;
      o.selectRenderable(o._selectRenderable);
   }
   MO.FDsModelCanvasContent_switchDimensional = function FDsModelCanvasContent_switchDimensional(visible, width, height){
      var o = this;
      o._dimensional.setVisible(visible);
      var matrix = o._dimensional.matrix();
      if(width > 0){
         matrix.sx = width;
      }
      if(height > 0){
         matrix.sz = height;
      }
      matrix.updateForce();
   }
   MO.FDsModelCanvasContent_switchRotation = function FDsModelCanvasContent_switchRotation(p){
      this._optionRotation = p;
   }
   MO.FDsModelCanvasContent_viewAutoSize = function FDsModelCanvasContent_viewAutoSize(flipX, flipY, flipZ, rotationX, rotationY, rotationZ){
      var o = this;
      var outline = o._autoOutline;
      var space = o._activeSpace;
      var display = space.display();
      var displayResource = display.resource();
      var displayMatrix = displayResource.matrix();
      if(rotationX){
         displayMatrix.rx += RConst.PI_2;
      }
      if(rotationY){
         displayMatrix.ry += RConst.PI_2;
      }
      if(rotationZ){
         displayMatrix.rz += RConst.PI_2;
      }
      var matrix = o._autoMatrix.identity();
      matrix.setRotation(displayMatrix.rx, displayMatrix.ry, displayMatrix.rz);
      matrix.update();
      var resourceOutline = displayResource.calculateOutline();
      outline.calculateFrom(resourceOutline, matrix);
      if(flipX){
         displayMatrix.sx = -displayMatrix.sx;
      }
      if(flipY){
         displayMatrix.sy = -displayMatrix.sy;
      }
      if(flipZ){
         displayMatrix.sz = -displayMatrix.sz;
      }
      var autoDistance = o._autoDistance;
      var scaleX = autoDistance.x / outline.distance.x;
      var scaleY = autoDistance.y / outline.distance.y;
      var scaleZ = autoDistance.z / outline.distance.z;
      var scale = RMath.min(scaleX, scaleY, scaleZ);
      scaleX = scale * RMath.sign(displayMatrix.sx)
      scaleY = scale * RMath.sign(displayMatrix.sy)
      scaleZ = scale * RMath.sign(displayMatrix.sz)
      var x = -outline.center.x * scaleX;
      var y = -outline.min.y * scaleY;
      var z = -outline.center.z * scaleZ;
      displayMatrix.setTranslate(x, y, z);
      displayMatrix.setScale(scaleX, scaleY, scaleZ);
      displayMatrix.update();
      display.reloadResource();
   }
   MO.FDsModelCanvasContent_loadByGuid = function FDsModelCanvasContent_loadByGuid(guid){
      var o = this;
      var space = o._activeSpace;
      var modelConsole = MO.Console.find(FE3dModelConsole);
      if(space){
         RStage.unregister(space);
         modelConsole.free(space);
      }
      space = o._activeSpace = modelConsole.allocByGuid(o, guid);
      if(!space._linked){
         MO.Console.find(FDuiDesktopConsole).showLoading();
         space._layer.pushRenderable(o._dimensional);
         space.addLoadListener(o, o.onDataLoaded);
         space._linked = true;
      }
      RStage.register('space', space);
   }
   MO.FDsModelCanvasContent_loadByCode = function FDsModelCanvasContent_loadByCode(code){
      var o = this;
   }
   MO.FDsModelCanvasContent_dispose = function FDsModelCanvasContent_dispose(){
      var o = this;
      o._rotation = MO.Lang.Object.dispose(o._rotation);
      o.__base.FDsCanvas.dispose.call(o);
   }
}
with(MO){
   MO.FDsModelCanvasToolBar = function FDsModelCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName                 = 'resource.model.CanvasToolBar';
      o._canvasModeCd              = EDsCanvasMode.Drop;
      o._controlDrop               = null;
      o._controlSize1              = null;
      o._controlSize2              = null;
      o._controlSize3              = null;
      o._controlSize4              = null;
      o._controlSizeWidth          = null;
      o._controlSizeHeight         = null;
      o._controlDimensionalVisible = null;
      o._controlDimensionalWidth   = null;
      o._controlDimensionalHeight  = null;
      o._controlDimensionalAuto    = null;
      o._controlDimensionalFlipX   = null;
      o._controlDimensionalFlipY   = null;
      o._controlDimensionalFlipZ   = null;
      o._controlDimensionalX       = null;
      o._controlDimensionalY       = null;
      o._controlDimensionalZ       = null;
      o._controlRotation           = null;
      o.onBuilded                  = FDsModelCanvasToolBar_onBuilded;
      o.onModeClick                = FDsModelCanvasToolBar_onModeClick;
      o.onSizeClick                = FDsModelCanvasToolBar_onSizeClick;
      o.onDimensionalChange        = FDsModelCanvasToolBar_onDimensionalChange;
      o.onDimensionalAutoClick     = FDsModelCanvasToolBar_onDimensionalAutoClick;
      o.onRotationClick            = FDsModelCanvasToolBar_onRotationClick;
      o.construct                  = FDsModelCanvasToolBar_construct;
      o.dispose                    = FDsModelCanvasToolBar_dispose;
      return o;
   }
   MO.FDsModelCanvasToolBar_onBuilded = function FDsModelCanvasToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      var control = o._controlDrop;
      control._canvasModeCd = EDsCanvasMode.Drop;
      control.addClickListener(o, o.onModeClick);
      control.check(true);
      o._controlSize1.addClickListener(o, o.onSizeClick);
      o._controlSize2.addClickListener(o, o.onSizeClick);
      o._controlSize3.addClickListener(o, o.onSizeClick);
      o._controlSize4.addClickListener(o, o.onSizeClick);
      o._controlSizeWidth.setText('*');
      o._controlSizeHeight.setText('*');
      o._controlDimensionalVisible.addClickListener(o, o.onDimensionalChange);
      o._controlDimensionalVisible.check(true);
      o._controlDimensionalWidth.addDataChangedListener(o, o.onDimensionalChange);
      o._controlDimensionalWidth.setText(1);
      o._controlDimensionalHeight.addDataChangedListener(o, o.onDimensionalChange);
      o._controlDimensionalHeight.setText(1);
      o._controlDimensionalAuto.addClickListener(o, o.onDimensionalAutoClick);
      o._controlDimensionalFlipX.addClickListener(o, o.onDimensionalAutoClick);
      o._controlDimensionalFlipY.addClickListener(o, o.onDimensionalAutoClick);
      o._controlDimensionalFlipZ.addClickListener(o, o.onDimensionalAutoClick);
      o._controlDimensionalX.addClickListener(o, o.onDimensionalAutoClick);
      o._controlDimensionalY.addClickListener(o, o.onDimensionalAutoClick);
      o._controlDimensionalZ.addClickListener(o, o.onDimensionalAutoClick);
      o._controlRotation.addClickListener(o, o.onRotationClick);
   }
   MO.FDsModelCanvasToolBar_onModeClick = function FDsModelCanvasToolBar_onModeClick(p){
      var o = this;
   }
   MO.FDsModelCanvasToolBar_onSizeClick = function FDsModelCanvasToolBar_onSizeClick(event){
      var o = this;
      var button = event.sender;
      var width = '*';
      var height = '*';
      var name = button.name();
      var label = button.label();
      if(name != 'sizeAuto'){
         var size = label.split('x');
         width = parseInt(size[0]);
         height = parseInt(size[1]);
      }
      o._controlSizeWidth.setText(width);
      o._controlSizeHeight.setText(height);
      o._frameSet._canvasContent.switchSize(width, height);
   }
   MO.FDsModelCanvasToolBar_onDimensionalChange = function FDsModelCanvasToolBar_onDimensionalChange(event){
      var o = this;
      var canvas = o._frameSet._canvasContent;
      var visible = o._controlDimensionalVisible.isCheck();
      var width = RInteger.parse(o._controlDimensionalWidth.text());
      var height = RInteger.parse(o._controlDimensionalHeight.text());
      canvas.switchDimensional(visible, width, height);
   }
   MO.FDsModelCanvasToolBar_onDimensionalAutoClick = function FDsModelCanvasToolBar_onDimensionalAutoClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      var flipX = false;
      var flipY = false;
      var flipZ = false;
      var rotationX = false;
      var rotationY = false;
      var rotationZ = false;
      switch(name){
         case 'dimensionalAuto':
            break;
         case 'dimensionalFlipX':
            flipX = true;
            break;
         case 'dimensionalFlipY':
            flipY = true;
            break;
         case 'dimensionalFlipZ':
            flipZ = true;
            break;
         case 'dimensionalX':
            rotationX = true;
            break;
         case 'dimensionalY':
            rotationY = true;
            break;
         case 'dimensionalZ':
            rotationZ = true;
            break;
         default:
            throw new TError(o, 'Unknown command.');
      }
      o._frameSet._canvasContent.viewAutoSize(flipX, flipY, flipZ, rotationX, rotationY, rotationZ);
   }
   MO.FDsModelCanvasToolBar_onRotationClick = function FDsModelCanvasToolBar_onRotationClick(event, v){
      var o = this;
      var button = event.sender;
      var canvas = o._frameSet._canvasContent;
      canvas.switchRotation(button.isCheck());
   }
   MO.FDsModelCanvasToolBar_construct = function FDsModelCanvasToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsModelCanvasToolBar_dispose = function FDsModelCanvasToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsModelCatalogContent = function FDsModelCatalogContent(o){
      o = MO.Class.inherits(this, o, FDsCatalog);
      o._iconView             = 'resource.tools.view';
      o._iconViewNot          = 'resource.tools.viewno';
      o.onBuild               = FDsModelCatalogContent_onBuild;
      o.onLoadDisplay         = FDsModelCatalogContent_onLoadDisplay;
      o.onNodeViewClick       = FDsModelCatalogContent_onNodeViewClick;
      o.onNodeViewDoubleClick = FDsModelCatalogContent_onNodeViewDoubleClick;
      o.lsnsSelect            = null;
      o.construct             = FDsModelCatalogContent_construct;
      o.buildRenderable       = FDsModelCatalogContent_buildRenderable;
      o.buildDisplay          = FDsModelCatalogContent_buildDisplay;
      o.buildSpace            = FDsModelCatalogContent_buildSpace;
      o.selectObject          = FDsModelCatalogContent_selectObject;
      o.showObject            = FDsModelCatalogContent_showObject;
      o.dispose               = FDsModelCatalogContent_dispose;
      return o;
   }
   MO.FDsModelCatalogContent_onBuild = function FDsModelCatalogContent_onBuild(p){
      var o = this;
      o.__base.FDsCatalog.onBuild.call(o, p);
      o.loadUrl('/cloud.describe.tree.ws?action=query&code=resource.model');
   }
   MO.FDsModelCatalogContent_onLoadDisplay = function FDsModelCatalogContent_onLoadDisplay(p){
      var o = this;
      var n = p._linkNode;
      o.buildRenderable(n, p);
   }
   MO.FDsModelCatalogContent_onNodeViewClick = function FDsModelCatalogContent_onNodeViewClick(p){
      var o = this;
      var c = p.treeNodeCell;
      var s = p.treeNode.dataPropertyGet('linker');
      if(MO.Class.isClass(s, FDisplay)){
         if(p.ctrlKey){
            var ds = o._displays;
            for(var i = ds.count() - 1; i >= 0; i--){
               var nd = ds.get(i);
               var d = nd.dataPropertyGet('linker');
               d._visible = false;
               nd.cell('view').setIcon(o._iconViewNot);
            }
            s._visible = true;
            c.setIcon(o._iconView);
         }else{
            s._visible = !s._visible;
            c.setIcon(s._visible ? o._iconView : o._iconViewNot);
         }
      }
      if(MO.Class.isClass(s, FDrawable)){
         if(p.ctrlKey){
            var rs = o._renderables;
            for(var i = rs.count() - 1; i >= 0; i--){
               var nr = rs.get(i);
               var r = nr.dataPropertyGet('linker');
               r._visible = false;
               nr.cell('view').setIcon(o._iconViewNot);
            }
            s._visible = true;
            c.setIcon(o._iconView);
         }else{
            s._visible = !s._visible;
            c.setIcon(s._visible ? o._iconView : o._iconViewNot);
         }
      }
   }
   MO.FDsModelCatalogContent_onNodeViewDoubleClick = function FDsModelCatalogContent_onNodeViewDoubleClick(p){
      var o = this;
      var n = p.treeNode;
      var c = p.treeNodeCell;
      var s = n.dataPropertyGet('linker');
      if(MO.Class.isClass(s, FDisplay)){
         var s = o._displays;
         for(var i = s.count() - 1; i >= 0; i--){
            var n = s.get(i);
            var d = n.dataPropertyGet('linker');
            d._visible = true;
            n.cell('view').setIcon(o._iconView);
         }
      }
      if(MO.Class.isClass(s, FDrawable)){
         var s = o._renderables;
         for(var i = s.count() - 1; i >= 0; i--){
            var n = s.get(i);
            var r = n.dataPropertyGet('linker');
            r._visible = true;
            n.cell('view').setIcon(o._iconView);
         }
      }
   }
   MO.FDsModelCatalogContent_construct = function FDsModelCatalogContent_construct(){
      var o = this;
      o.__base.FDsCatalog.construct.call(o);
      o._renderables = new TObjects();
   }
   MO.FDsModelCatalogContent_buildRenderable = function FDsModelCatalogContent_buildRenderable(parentNode, geometry){
      var o = this;
      var renderable = geometry._renderable;
      var resource = renderable.resource();
      var code = resource.code();
      var label = resource.label();
      var node = o.createNode();
      node.setTypeCode('renderable');
      node.setLabel(code);
      node.setNote(label);
      node.dataPropertySet('linker', geometry);
      parentNode.appendNode(node);
   }
   MO.FDsModelCatalogContent_buildDisplay = function FDsModelCatalogContent_buildDisplay(parent, display){
      var o = this;
      var resource = display.resource();
      var shapes = display.shapes();
      var count = shapes.count();
      var displayNode = o.createNode();
      displayNode.setTypeCode('display');
      displayNode.setLabel('Model (' + count + ')');
      displayNode.dataPropertySet('linker', display);
      parent.appendNode(displayNode);
      var material = display.material();
      var materialResource = resource.material();
      var materialNode = o.createNode();
      materialNode.setTypeCode('material');
      materialNode.setLabel('Material');
      materialNode.dataPropertySet('linker', material);
      materialNode.dataPropertySet('resource', materialResource);
      displayNode.appendNode(materialNode);
      for(var i = 0; i < count; i++){
         var shape = shapes.get(i);
         o.buildRenderable(displayNode, shape);
      }
   }
   MO.FDsModelCatalogContent_buildSpace = function FDsModelCatalogContent_buildSpace(space){
      var o = this;
      o.clearAllNodes();
      var resource = space.resource();
      o.clear();
      var node = o.createNode();
      node.setTypeCode('space');
      node.setLabel(resource.code());
      node.setNote(resource.label());
      node.dataPropertySet('linker', space);
      o.appendNode(node);
      o.buildTechnique(node, space.technique())
      o.buildRegion(node, space.region());
      o.buildDisplay(node, space._display);
      node.click();
   }
   MO.FDsModelCatalogContent_selectObject = function FDsModelCatalogContent_selectObject(p){
      var o = this;
      if(p != null){
         o.processSelectedListener(p, true);
      }
   }
   MO.FDsModelCatalogContent_showObject = function FDsModelCatalogContent_showObject(p){
      var o = this;
      if(MO.Class.isClass(p, FDsSceneRenderable)){
         var s = o._renderables;
         var c = s.count();
         for(var i = 0; i < c; i++){
            var nr = s.getAt(i);
            var r = nr.dataPropertyGet('linker');
            if(r == p){
               o.processSelectedListener(p, false);
            }
         }
      }
   }
   MO.FDsModelCatalogContent_dispose = function FDsModelCatalogContent_dispose(){
      var o = this;
      o._displays = MO.Lang.Object.dispose(o._displays);
      o._renderables = MO.Lang.Object.dispose(o._renderables);
      o._materials = MO.Lang.Object.dispose(o._materials);
      o.__base.FDsCatalog.dispose.call(o);
   }
}
with(MO){
   MO.FDsModelCatalogToolBar = function FDsModelCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName             = 'resource.model.CatalogToolBar';
      o._activeNodeGuid        = null;
      o._controlCreateCamera   = null;
      o._controlCreateLayer    = null;
      o._controlCreateSprite   = null;
      o._controlDelete         = null;
      o._controlFolderOpen     = null;
      o._controlFolderClose    = null;
      o.onBuilded              = FDsModelCatalogToolBar_onBuilded;
      o.onCreateCameraClick    = FDsModelCatalogToolBar_onCreateCameraClick;
      o.onCreateLayerClick     = FDsModelCatalogToolBar_onCreateLayerClick;
      o.onCreateSpriteClick    = FDsModelCatalogToolBar_onCreateSpriteClick;
      o.onDeleteLoad           = FDsModelCatalogToolBar_onDeleteLoad;
      o.onDeleteExecute        = FDsModelCatalogToolBar_onDeleteExecute;
      o.onCopyLoad             = FDsModelCatalogToolBar_onCopyLoad;
      o.onCopyExecute          = FDsModelCatalogToolBar_onCopyExecute;
      o.onCopyClick            = FDsModelCatalogToolBar_onCopyClick;
      o.onDeleteClick          = FDsModelCatalogToolBar_onDeleteClick;
      o.onFolderOpenClick      = FDsModelCatalogToolBar_onFolderOpenClick;
      o.onFolderCloseClick     = FDsModelCatalogToolBar_onFolderCloseClick;
      o.construct              = FDsModelCatalogToolBar_construct;
      o.dispose                = FDsModelCatalogToolBar_dispose;
      return o;
   }
   MO.FDsModelCatalogToolBar_onBuilded = function FDsModelCatalogToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlFolderOpen.addClickListener(o, o.onFolderOpenClick);
      o._controlFolderClose.addClickListener(o, o.onFolderCloseClick);
   }
   MO.FDsModelCatalogToolBar_onCreateCameraClick = function FDsModelCatalogToolBar_onCreateCameraClick(event){
      var o = this;
   }
   MO.FDsModelCatalogToolBar_onCreateLayerClick = function FDsModelCatalogToolBar_onCreateLayerClick(event){
      var o = this;
   }
   MO.FDsModelCatalogToolBar_onCreateSpriteClick = function FDsModelCatalogToolBar_onCreateSpriteClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return alert('请选中目录节点。');
      }
      var linker = node.dataPropertyGet('linker');
      var layer = null;
      var sprite = null;
      if(MO.Class.isClass(linker, FDisplayLayer)){
         layer = linker;
      }else if(MO.Class.isClass(linker, FE3dSprite)){
         layer = linker.findParent(FDisplayLayer);
         sprite = linker;
      }else{
         return alert('请选中显示层或者精灵节点。');
      }
      var frameSet = o._frameSet;
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsCommonSpriteDialog);
      dialog._frameSet = frameSet;
      dialog._spaceGuid = frameSet._activeSpace.resource().guid();
      dialog._layerGuid = layer.resource().guid();
      if(sprite){
         dialog._displayGuid = sprite.resource().guid();
      }else{
         dialog._displayGuid = null;
      }
      if(layer){
         dialog.setLayerLabel(layer.makeLabel());
      }
      if(sprite){
         dialog.setDisplayLabel(sprite.makeLabel());
      }
      dialog.setContentCode('');
      dialog.setContentLabel('');
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsModelCatalogToolBar_onCopyLoad = function FDsModelCatalogToolBar_onCopyLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsModelCatalogToolBar_onCopyExecute = function FDsModelCatalogToolBar_onCopyExecute(event){
      var o = this;
      if(event.resultCd != EResult.Success){
         return;
      }
      var space = o._frameSet._activeSpace;
      var spaceGuid = space.resource().guid();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = MO.Console.find(FDrSceneConsole).copyNode(spaceGuid, o._activeGuid);
      connection.addLoadListener(o, o.onDeleteLoad);
   }
   MO.FDsModelCatalogToolBar_onCopyClick = function FDsModelCatalogToolBar_onCopyClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return MO.Console.find(FDuiMessageConsole).showInfo('请选中节点后，再点击操作。');
      }
      o._activeNodeGuid = node.guid();
      var sprite = null;
      var linker = node.dataPropertyGet('linker');
      if(MO.Class.isClass(linker, FE3dSprite)){
         sprite = linker;
         o._activeGuid = linker.resource().guid();
      }else{
         return alert('不能复制当前选中的节点.');
      }
      var resource = sprite.resource();
      var parentResource = resource.parent();
      var displayResource = resource.clone();
      parentResource.pushDisplay(displayResource);
      var display = MO.Console.find(FE3dInstanceConsole).create(EE3dInstance.SceneDisplay);
      display.linkGraphicContext(sprite);
      display.loadResource(displayResource);
      MO.Console.find(FE3dSceneConsole).loadDisplay(display);
      var parent = sprite.parent();
      parent.pushDisplay(display);
   }
   MO.FDsModelCatalogToolBar_onDeleteLoad = function FDsModelCatalogToolBar_onDeleteLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      var catalog = o._frameSet._catalogContent;
      var guid = o._activeNodeGuid;
      if(guid){
         var node = catalog.findByGuid(guid);
         node.removeSelf();
      }
      o._activeNodeGuid = null;
   }
   MO.FDsModelCatalogToolBar_onDeleteExecute = function FDsModelCatalogToolBar_onDeleteExecute(event){
      var o = this;
      if(event.resultCd != EResult.Success){
         return;
      }
      var space = o._frameSet._activeSpace;
      var spaceGuid = space.resource().guid();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = MO.Console.find(FDrSceneConsole).deleteNode(spaceGuid, o._activeGuid);
      connection.addLoadListener(o, o.onDeleteLoad);
   }
   MO.FDsModelCatalogToolBar_onDeleteClick = function FDsModelCatalogToolBar_onDeleteClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return MO.Console.find(FDuiMessageConsole).showInfo('请选中节点后，再点击操作。');
      }
      o._activeNodeGuid = node.guid();
      var linker = node.dataPropertyGet('linker');
      if(MO.Class.isClass(linker, FE3dSprite)){
         o._activeGuid = linker.resource().guid();
      }else{
         return alert('不能删除当前选中的节点.');
      }
      var dialog = MO.Console.find(FDuiMessageConsole).showConfirm('请确认是否删除当前节点？');
      dialog.addResultListener(o, o.onDeleteExecute);
   }
   MO.FDsModelCatalogToolBar_onFolderOpenClick = function FDsModelCatalogToolBar_onFolderOpenClick(event){
   }
   MO.FDsModelCatalogToolBar_onFolderCloseClick = function FDsModelCatalogToolBar_onFolderCloseClick(event){
   }
   MO.FDsModelCatalogToolBar_construct = function FDsModelCatalogToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsModelCatalogToolBar_dispose = function FDsModelCatalogToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsModelFrameSet = function FDsModelFrameSet(o){
      o = MO.Class.inherits(this, o, FDsFrameSet);
      o._frameCatalog         = null;
      o._frameCatalogToolBar  = null;
      o._frameCatalogContent  = null;
      o._frameCanvas          = null;
      o._frameCanvasToolBar   = null;
      o._frameCanvasContent   = null;
      o._frameProperty        = null;
      o._framePropertyToolBar = null;
      o._framePropertyContent = null;
      o.onBuilded             = FDsModelFrameSet_onBuilded;
      o.onDataLoaded          = FDsModelFrameSet_onDataLoaded;
      o.onCatalogSelected     = FDsModelFrameSet_onCatalogSelected;
      o.construct             = FDsModelFrameSet_construct;
      o.loadByGuid            = FDsModelFrameSet_loadByGuid;
      o.loadByCode            = FDsModelFrameSet_loadByCode;
      o.dispose               = FDsModelFrameSet_dispose;
      return o;
   }
   MO.FDsModelFrameSet_onBuilded = function FDsModelFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsFrameSet.onBuilded.call(o, event);
      o._frameCatalogToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
      o._frameCanvasToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._frameCanvasContent._hPanel.className = o.styleName('Canvas_Content');
      o._framePropertyToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._framePropertyContent._hPanel.className = o.styleName('Property_Content');
      var spliter = o._spliterCatalog;
      spliter.setAlignCd(EUiAlign.Left);
      spliter.setSizeHtml(o._frameCatalog._hPanel);
      var spliter = o._spliterProperty;
      spliter.setAlignCd(EUiAlign.Right);
      spliter.setSizeHtml(o._frameProperty._hPanel);
   }
   MO.FDsModelFrameSet_onDataLoaded = function FDsModelFrameSet_onDataLoaded(event){
      var o = this;
      var sender = event.sender;
      var space = o._activeSpace = sender.activeSpace();
      o._catalogContent.buildSpace(space);
   }
   MO.FDsModelFrameSet_onCatalogSelected = function FDsModelFrameSet_onCatalogSelected(select, flag){
      var o = this;
      var space = o._activeSpace;
      if(!space){
         return;
      }
      o.hidePropertyFrames();
      if(MO.Class.isClass(select, FE3dSpace)){
         var frame = o.findPropertyFrame(EDsFrame.CommonSpacePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dTechnique)){
         var frame = o.findPropertyFrame(EDsFrame.CommonTechniquePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dRegion)){
         var frame = o.findPropertyFrame(EDsFrame.CommonRegionPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dCamera)){
         var frame = o.findPropertyFrame(EDsFrame.CommonCameraPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dLight)){
         var frame = o.findPropertyFrame(EDsFrame.CommonLightPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dModelDisplay)){
         var frame = o.findPropertyFrame(EDsFrame.CommonDisplayPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dMaterial)){
         var frame = o.findPropertyFrame(EDsFrame.CommonMaterialPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dModelRenderable)){
         var frame = o.findPropertyFrame(EDsFrame.CommonRenderablePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else{
         throw new TError('Unknown select object type. (select={1})', select);
      }
   }
   MO.FDsModelFrameSet_construct = function FDsModelFrameSet_construct(){
      var o = this;
      o.__base.FDsFrameSet.construct.call(o);
   }
   MO.FDsModelFrameSet_loadByGuid = function FDsModelFrameSet_loadByGuid(guid){
      var o = this;
      o._activeGuid = guid;
      o._canvasContent.loadByGuid(guid);
   }
   MO.FDsModelFrameSet_loadByCode = function FDsModelFrameSet_loadByCode(code){
      var o = this;
      o._activeCode = code;
      o._canvasContent.loadByCode(code);
   }
   MO.FDsModelFrameSet_dispose = function FDsModelFrameSet_dispose(){
      var o = this;
      o.__base.FDsFrameSet.dispose.call(o);
   }
}
with(MO){
   MO.FDsModelMenuBar = function FDsModelMenuBar(o){
      o = MO.Class.inherits(this, o, FDuiMenuBar);
      o._controlSaveButton    = null;
      o._controlCaptureButton = null;
      o.onSaveLoad            = FDsModelMenuBar_onSaveLoad;
      o.onSaveClick           = FDsModelMenuBar_onSaveClick;
      o.onCaptureLoad         = FDsModelMenuBar_onCaptureLoad;
      o.onCaptureClick        = FDsModelMenuBar_onCaptureClick;
      o.construct             = FDsModelMenuBar_construct;
      o.dispose               = FDsModelMenuBar_dispose;
      return o;
   }
   MO.FDsModelMenuBar_onSaveLoad = function FDsModelMenuBar_onSaveLoad(event){
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsModelMenuBar_onSaveClick = function FDsModelMenuBar_onSaveClick(p){
      var o = this;
      var space = o._frameSet._activeSpace;
      var resource = space.resource();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var xconfig = new TXmlNode();
      resource.saveConfig(xconfig);
      var connection = MO.Console.find(FDrModelConsole).update(xconfig);
      connection.addLoadListener(o, o.onSaveLoad);
   }
   MO.FDsModelMenuBar_onCaptureLoad = function FDsModelMenuBar_onCaptureLoad(event){
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsModelMenuBar_onCaptureClick = function FDsModelMenuBar_onCaptureClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = o._frameSet._canvasContent.capture();
      connection.addLoadListener(o, o.onCaptureLoad);
   }
   MO.FDsModelMenuBar_construct = function FDsModelMenuBar_construct(){
      var o = this;
      o.__base.FDuiMenuBar.construct.call(o);
   }
   MO.FDsModelMenuBar_dispose = function FDsModelMenuBar_dispose(){
      var o = this;
      o.__base.FDuiMenuBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsModelWorkspace = function FDsModelWorkspace(o){
      o = MO.Class.inherits(this, o, FDuiWorkspace);
      o._frameName            = 'design3d.mesh.Workspace';
      o._styleWorkspaceGround = MO.Class.register(o, new MO.AStyle('_styleWorkspaceGround', 'Workspace_Ground'));
      o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleBodyGround      = MO.Class.register(o, new MO.AStyle('_styleBodyGround', 'Body_Ground'));
      o._styleStatusbarGround = MO.Class.register(o, new MO.AStyle('_styleStatusbarGround', 'Statusbar_Ground'));
      o._activeSpace          = null;
      o._activeMesh           = null;
      o._framesetMain         = null;
      o._framesetBody         = null;
      o._frameToolBar         = null;
      o._frameBody            = null;
      o._frameProperty        = null;
      o._frameSet             = null;
      o._propertyFrames       = null;
      o.onBuilded             = FDsModelWorkspace_onBuilded;
      o.onMeshLoad            = FDsModelWorkspace_onMeshLoad;
      o.onCatalogSelected     = FDsModelWorkspace_onCatalogSelected;
      o.construct             = FDsModelWorkspace_construct;
      o.findPropertyFrame     = FDsModelWorkspace_findPropertyFrame;
      o.loadByGuid            = FDsModelWorkspace_loadByGuid;
      o.loadByCode            = FDsModelWorkspace_loadByCode;
      o.dispose               = FDsModelWorkspace_dispose;
      return o;
   }
   MO.FDsModelWorkspace_onBuilded = function FDsModelWorkspace_onBuilded(p){
      var o = this;
      o.__base.FDuiWorkspace.onBuilded.call(o, p);
      var frame = o._frameToolBar = o.searchControl('toolbarFrame');
      frame._hPanel.className = o.styleName('Toolbar_Ground');
      var frame = o._frameBody = o.searchControl('bodyFrame');
      frame._hPanel.className = o.styleName('Body_Ground');
      var frame = o._frameStatusBar = o.searchControl('statusFrame');
      frame._hPanel.className = o.styleName('Statusbar_Ground');
      var menuBar = o._menuBar = MO.Class.create(FDsModelMenuBar);
      menuBar._workspace = o;
      menuBar.buildDefine(p);
      o._frameToolBar.push(menuBar);
      var frameSet = o._frameSet = MO.Class.create(FDsModelFrameSet);
      frameSet._workspace = o;
      frameSet.buildDefine(p);
      o._frameBody.push(frameSet);
      menuBar._frameSet = frameSet;
   }
   MO.FDsModelWorkspace_onMeshLoad = function FDsModelWorkspace_onMeshLoad(p){
      var o = this;
      o._activeSpace = p._activeSpace;
      o._catalog.buildSpace(o._activeSpace);
   }
   MO.FDsModelWorkspace_onCatalogSelected = function FDsModelWorkspace_onCatalogSelected(p, pc){
      var o = this;
      var space = o._activeSpace;
      var fs = o._propertyFrames;
      var c = fs.count();
      for(var i = 0; i < c; i++){
         var f = fs.value(i);
         f.hide();
      }
      if(MO.Class.isClass(p, FE3dStage)){
         var f = o.findPropertyFrame(EDsFrame.MeshSpacePropertyFrame);
         f.show();
         f.loadObject(space, space);
      }else if(MO.Class.isClass(p, FG3dTechnique)){
         var f = o.findPropertyFrame(EDsFrame.MeshTechniquePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dRegion)){
         var f = o.findPropertyFrame(EDsFrame.MeshRegionPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dCamera)){
         var f = o.findPropertyFrame(EDsFrame.MeshCameraPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dDirectionalLight)){
         var f = o.findPropertyFrame(EDsFrame.MeshLightPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshDisplay)){
         var f = o.findPropertyFrame(EDsFrame.MeshDisplayPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dMaterial)){
         var f = o.findPropertyFrame(EDsFrame.MeshMaterialPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshRenderable)){
         var f = o.findPropertyFrame(EDsFrame.MeshRenderablePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else{
         throw new TError('Unknown select object type. (value={1})', p);
      }
   }
   MO.FDsModelWorkspace_construct = function FDsModelWorkspace_construct(){
      var o = this;
      o.__base.FDuiWorkspace.construct.call(o);
      o._propertyFrames = new TDictionary();
   }
   MO.FDsModelWorkspace_findPropertyFrame = function FDsModelWorkspace_findPropertyFrame(p){
      var o = this;
      var f = o._propertyFrames.get(p);
      if(!f){
         var fc = MO.Console.find(FFrameConsole);
         f = fc.get(o, p, o._frameProperty._hContainer);
         f._workspace = o;
         o._propertyFrames.set(p, f);
      }
      return f;
   }
   MO.FDsModelWorkspace_loadByGuid = function FDsModelWorkspace_loadByGuid(guid){
      this._frameSet.loadByGuid(guid);
   }
   MO.FDsModelWorkspace_loadByCode = function FDsModelWorkspace_loadByCode(code){
      this._frameSet.loadByCode(code);
   }
   MO.FDsModelWorkspace_dispose = function FDsModelWorkspace_dispose(){
      var o = this;
      o.__base.FDuiWorkspace.dispose.call(o);
      o._propertyFrames.dispose();
      o._propertyFrames = null;
   }
}
with(MO){
   MO.FDsTemplateCanvasContent = function FDsTemplateCanvasContent(o){
      o = MO.Class.inherits(this, o, FDsSpaceCanvas);
      o._resourceTypeCd     = EE3sResource.Template;
      o._context            = null;
      o._stage              = null;
      o._layer              = null;
      o._rotation           = null;
      o._rotationAble       = false;
      o._capturePosition    = null;
      o._captureMatrix      = null;
      o._captureRotation    = null;
      o._dimensional        = null;
      o._selectBoundBox     = null;
      o.onBuild             = FDsTemplateCanvasContent_onBuild;
      o.onDataLoaded        = FDsTemplateCanvasContent_onDataLoaded;
      o.oeRefresh           = FDsTemplateCanvasContent_oeRefresh;
      o.construct           = FDsTemplateCanvasContent_construct;
      o.loadByGuid          = FDsTemplateCanvasContent_loadByGuid;
      o.loadByCode          = FDsTemplateCanvasContent_loadByCode;
      o.dispose             = FDsTemplateCanvasContent_dispose;
      return o;
   }
   MO.FDsTemplateCanvasContent_onBuild = function FDsTemplateCanvasContent_onBuild(p){
      var o = this;
      o.__base.FDsSpaceCanvas.onBuild.call(o, p);
   }
   MO.FDsTemplateCanvasContent_onMouseCaptureStart = function FDsTemplateCanvasContent_onMouseCaptureStart(p){
      var o = this;
      var space = o._activeSpace;
      if(!space){
         return;
      }
      var camera = space.camera();
      o._captureRotation.assign(camera._rotation);
   }
   MO.FDsTemplateCanvasContent_onMouseCapture = function FDsTemplateCanvasContent_onMouseCapture(p){
      var o = this;
      var space = o._activeSpace;
      if(!space){
         return;
      }
      var cx = p.clientX - o._capturePosition.x;
      var cy = p.clientY - o._capturePosition.y;
      var d = t.renderables().get(0);
      var m = d.matrix();
      var cm = o._captureMatrix;
      switch(o._toolbar._canvasModeCd){
         case EDsCanvasMode.Drop:
            var c = o._stage.camera();
            var r = c.rotation();
            var cr = o._captureRotation;
            r.x = cr.x + cy * 0.003;
            r.y = cr.y + cx * 0.003;
            break;
         case EDsCanvasMode.Select:
            break;
         case EDsCanvasMode.Translate:
            m.tx = cm.tx + cx / 360 * 3.14;
            m.ty = cm.ty + cy / 360 * 3.14;
            break;
         case EDsCanvasMode.Rotation:
            m.ry = cm.ry + cx * RConst.DEGREE_RATE;
            break;
         case EDsCanvasMode.Scale:
            m.sx = cm.sx + cx / 100;
            m.sy = cm.sy + cx / 100;
            m.sz = cm.sz + cx / 100;
            break;
      }
      m.updateForce();
   }
   MO.FDsTemplateCanvasContent_onMouseCaptureStop = function FDsTemplateCanvasContent_onMouseCaptureStop(event){
   }
   MO.FDsTemplateCanvasContent_onDataLoaded = function FDsTemplateCanvasContent_onDataLoaded(event){
      var o = this;
      var m = o._activeSpace;
      var g = m.region();
      var rc = g.camera();
      rc.setPosition(0, 3, -10);
      rc.lookAt(0, 3, 0);
      rc.update();
      var h = o._hPanel;
      var rp = rc.projection();
      rp.size().set(h.width, h.height);
      rp._angle = 45;
      rp.update();
      var l = g.directionalLight();
      var lc = l.camera();
      lc.setPosition(10, 10, 0);
      lc.lookAt(0, 0, 0);
      lc.update();
      var event = new MO.SEvent(o);
      o.processLoadListener(event);
      event.dispose();
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsTemplateCanvasContent_oeRefresh = function FDsTemplateCanvasContent_oeRefresh(p){
      var o = this;
      var c = o._graphicContext;
      o.__base.FDsSpaceCanvas.oeRefresh.call(o, p);
      var w = o._hParent.offsetWidth;
      var h = o._hParent.offsetHeight;
      var hc = o._hPanel;
      hc.width = w;
      hc.height = h;
      var rp = o._stage.camera().projection();
      rp.size().set(w, h);
      rp.update();
      c.setViewport(0, 0, w, h);
      return EEventStatus.Stop;
   }
   MO.FDsTemplateCanvasContent_construct = function FDsTemplateCanvasContent_construct(){
      var o = this;
      o.__base.FDsSpaceCanvas.construct.call(o);
      o._capturePosition = new MO.SPoint2();
      o._captureMatrix = new MO.SMatrix3d();
      o._rotation = new MO.SVector3();
      o._captureRotation = new MO.SVector3();
   }
   MO.FDsTemplateCanvasContent_loadByGuid = function FDsTemplateCanvasContent_loadByGuid(guid){
      var o = this;
      var space = o._activeSpace;
      var templateConsole = MO.Console.find(FE3dTemplateConsole);
      if(space){
         RStage.unregister(space);
         templateConsole.free(space);
      }
      space = o._activeSpace = templateConsole.allocByGuid(o, guid);
      if(!space._linked){
         MO.Console.find(FDuiDesktopConsole).showLoading();
         space._layer.pushRenderable(o._dimensional);
         space._linked = true;
         space.addLoadListener(o, o.onDataLoaded);
      }
      RStage.register('space', space);
   }
   MO.FDsTemplateCanvasContent_loadByCode = function FDsTemplateCanvasContent_loadByCode(code){
      var o = this;
      var space = o._activeSpace;
      var templateConsole = MO.Console.find(FE3dTemplateConsole);
      if(space){
         RStage.unregister(space);
         templateConsole.free(space);
      }
      space = o._activeSpace = templateConsole.allocByGuid(o, guid);
      if(!space._linked){
         MO.Console.find(FDuiDesktopConsole).showLoading();
         space._layer.pushRenderable(o._dimensional);
         space.addLoadListener(o, o.onDataLoaded);
         space._linked = true;
      }
      RStage.register('space', space);
   }
   MO.FDsTemplateCanvasContent_dispose = function FDsTemplateCanvasContent_dispose(){
      var o = this;
     o._rotation = MO.Lang.Object.dispose(o._rotation);
      o.__base.FDsSpaceCanvas.dispose.call(o);
   }
}
with(MO){
   MO.FDsTemplateCanvasToolBar = function FDsTemplateCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._refreshButton  = null;
      o._saveButton     = null;
      o._canvasModeCd   = EDsCanvasMode.Drop;
      o.onBuilded       = FDsTemplateCanvasToolBar_onBuilded;
      o.onModeClick     = FDsTemplateCanvasToolBar_onModeClick;
      o.onLookClick     = FDsTemplateCanvasToolBar_onLookClick;
      o.onPlayClick     = FDsTemplateCanvasToolBar_onPlayClick;
      o.onViewClick     = FDsTemplateCanvasToolBar_onViewClick;
      o.construct       = FDsTemplateCanvasToolBar_construct;
      o.dispose         = FDsTemplateCanvasToolBar_dispose;
      return o;
   }
   MO.FDsTemplateCanvasToolBar_onBuilded = function FDsTemplateCanvasToolBar_onBuilded(event){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, event);
      o._controlModeDrop.addClickListener(o, o.onModeClick);
      o._controlModeSelect.addClickListener(o, o.onModeClick);
      o._controlTranslate.addClickListener(o, o.onModeClick);
      o._controlRotation.addClickListener(o, o.onModeClick);
      o._controlScale.addClickListener(o, o.onModeClick);
      o._controlLookFront.addClickListener(o, o.onLookClick);
      o._controlLookUp.addClickListener(o, o.onLookClick);
      o._controlLookLeft.addClickListener(o, o.onLookClick);
      o._controlPlay.addClickListener(o, o.onPlayClick);
      o._controlView.addClickListener(o, o.onViewClick);
   }
   MO.FDsTemplateCanvasToolBar_onModeClick = function FDsTemplateCanvasToolBar_onModeClick(p){
      var o = this;
      o._canvasModeCd = p._canvasModeCd;
   }
   MO.FDsTemplateCanvasToolBar_onLookClick = function FDsTemplateCanvasToolBar_onLookClick(p){
      var o = this;
      o._canvasModeCd = p._canvasModeCd;
   }
   MO.FDsTemplateCanvasToolBar_onPlayClick = function FDsTemplateCanvasToolBar_onPlayClick(p, v){
      var o = this;
      var c = o._frameSet._canvasContent;
      c._rotationAble = v;
   }
   MO.FDsTemplateCanvasToolBar_onViewClick = function FDsTemplateCanvasToolBar_onViewClick(event){
      var o = this;
      var checked = event.checked;
      var canvas = o._frameSet._canvasContent;
      canvas.switchRotation(checked);
   }
   MO.FDsTemplateCanvasToolBar_construct = function FDsTemplateCanvasToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsTemplateCanvasToolBar_dispose = function FDsTemplateCanvasToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsTemplateCatalogContent = function FDsTemplateCatalogContent(o){
      o = MO.Class.inherits(this, o, FDsCatalog);
      o.onBuild        = FDsTemplateCatalogContent_onBuild;
      o.onNodeClick    = FDsTemplateCatalogContent_onNodeClick;
      o.construct      = FDsTemplateCatalogContent_construct;
      o.buildTechnique = FDsTemplateCatalogContent_buildTechnique;
      o.buildRegion    = FDsTemplateCatalogContent_buildRegion;
      o.buildMaterial  = FDsTemplateCatalogContent_buildMaterial;
      o.buildDisplay   = FDsTemplateCatalogContent_buildDisplay;
      o.buildSpace     = FDsTemplateCatalogContent_buildSpace;
      o.dispose        = FDsTemplateCatalogContent_dispose;
      return o;
   }
   MO.FDsTemplateCatalogContent_onBuild = function FDsTemplateCatalogContent_onBuild(p){
      var o = this;
      o.__base.FDsCatalog.onBuild.call(o, p);
      o.loadUrl('/cloud.describe.tree.ws?action=query&code=resource.template');
   }
   MO.FDsTemplateCatalogContent_onNodeClick = function FDsTemplateCatalogContent_onNodeClick(event){
      var o = this;
      var node = event.node;
      var linker = node.dataPropertyGet('linker');
      o.selectObject(linker);
   }
   MO.FDsTemplateCatalogContent_construct = function FDsTemplateCatalogContent_construct(){
      var o = this;
      o.__base.FDsCatalog.construct.call(o);
   }
   MO.FDsTemplateCatalogContent_buildTechnique = function FDsTemplateCatalogContent_buildTechnique(n, p){
      var o = this;
      var nt = o.createNode();
      nt.setLabel('Technique');
      nt.setTypeCode('technique');
      nt.dataPropertySet('linker', p);
      n.appendNode(nt);
   }
   MO.FDsTemplateCatalogContent_buildRegion = function FDsTemplateCatalogContent_buildRegion(n, p){
      var o = this;
      var nr = o.createNode();
      nr.setLabel('Region');
      nr.setTypeCode('region');
      nr.dataPropertySet('linker', p);
      n.appendNode(nr);
      var nc = o.createNode();
      nc.setLabel('Camera');
      nc.setTypeCode('camera');
      nc.dataPropertySet('linker', p.camera());
      nr.appendNode(nc);
      var nl = o.createNode();
      nl.setLabel('Light');
      nl.setTypeCode('light');
      nl.dataPropertySet('linker', p.directionalLight());
      nr.appendNode(nl);
   }
   MO.FDsTemplateCatalogContent_buildMaterial = function FDsTemplateCatalogContent_buildMaterial(parentNode, material){
      var o = this;
      var resource = material.resource();
      var node = o.createNode();
      node.setTypeCode('Material');
      node.setLabel(resource.code());
      node.setNote(resource.label());
      node.dataPropertySet('linker', material);
      parentNode.appendNode(node);
   }
   MO.FDsTemplateCatalogContent_buildDisplay = function FDsTemplateCatalogContent_buildDisplay(parentNode, display){
      var o = this;
      var resource = display.resource();
      var node = o.createNode();
      node.setTypeCode('Display');
      node.setLabel(MO.Lang.String.nvl(resource.code(), 'Display'));
      node.setNote(resource.label());
      node.dataPropertySet('linker', display);
      parentNode.appendNode(node);
      var renderables = display.renderables();
      var renderableCount = renderables.count();
      if(renderableCount > 0){
         for(var i = 0; i < renderableCount; i++){
            var renderable = renderables.at(i);
            var renderableResource = renderable.resource();
            var renderableNode = o.createNode();
            renderableNode.setTypeCode('Renderable');
            renderableNode.setLabel(renderableResource.code());
            renderableNode.setNote(renderableResource.label());
            renderableNode.dataPropertySet('linker', renderable);
            node.appendNode(renderableNode);
         }
      }
   }
   MO.FDsTemplateCatalogContent_buildSpace = function FDsTemplateCatalogContent_buildSpace(space){
      var o = this;
      o.clearAllNodes();
      var resource = space.resource();
      var spaceNode = o.createNode();
      spaceNode.setTypeCode('Space');
      spaceNode.setLabel(resource.code());
      spaceNode.setNote(resource.label());
      spaceNode.dataPropertySet('linker', space);
      o.appendNode(spaceNode);
      o.buildTechnique(spaceNode, space.technique())
      o.buildRegion(spaceNode, space.region());
      var materialsNode = o.createNode();
      materialsNode.setTypeCode('Region');
      materialsNode.setLabel('Materials');
      spaceNode.appendNode(materialsNode);
      var materials = space.materials();
      var materialCount = materials.count();
      for(var i = 0; i < materialCount; i++){
         var material = materials.at(i);
         o.buildMaterial(materialsNode, material);
      }
      var displaysNode = o.createNode();
      displaysNode.setTypeCode('Region');
      displaysNode.setLabel('Displays');
      spaceNode.appendNode(displaysNode);
      var displays = space._sprites;
      var displayCount = displays.count();
      for(var i = 0; i < displayCount; i++){
         var display = displays.at(i);
         o.buildDisplay(displaysNode, display);
      }
      spaceNode.click();
   }
   MO.FDsTemplateCatalogContent_dispose = function FDsTemplateCatalogContent_dispose(){
      var o = this;
      o.__base.FDsCatalog.dispose.call(o);
   }
}
with(MO){
   MO.FDsTemplateCatalogToolBar = function FDsTemplateCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName             = 'resource.template.CatalogToolBar';
      o._activeNodeGuid        = null;
      o._controlCreateCamera   = null;
      o._controlCreateLayer    = null;
      o._controlCreateSprite   = null;
      o._controlDelete         = null;
      o._controlFolderOpen     = null;
      o._controlFolderClose    = null;
      o.onBuilded              = FDsTemplateCatalogToolBar_onBuilded;
      o.onCreateCameraClick    = FDsTemplateCatalogToolBar_onCreateCameraClick;
      o.onCreateDisplayClick   = FDsTemplateCatalogToolBar_onCreateDisplayClick;
      o.onDeleteLoad           = FDsTemplateCatalogToolBar_onDeleteLoad;
      o.onDeleteExecute        = FDsTemplateCatalogToolBar_onDeleteExecute;
      o.onCopyLoad             = FDsTemplateCatalogToolBar_onCopyLoad;
      o.onCopyExecute          = FDsTemplateCatalogToolBar_onCopyExecute;
      o.onCopyClick            = FDsTemplateCatalogToolBar_onCopyClick;
      o.onDeleteClick          = FDsTemplateCatalogToolBar_onDeleteClick;
      o.onFolderOpenClick      = FDsTemplateCatalogToolBar_onFolderOpenClick;
      o.onFolderCloseClick     = FDsTemplateCatalogToolBar_onFolderCloseClick;
      o.construct              = FDsTemplateCatalogToolBar_construct;
      o.dispose                = FDsTemplateCatalogToolBar_dispose;
      return o;
   }
   MO.FDsTemplateCatalogToolBar_onBuilded = function FDsTemplateCatalogToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlCreateCamera.addClickListener(o, o.onCreateCameraClick);
      o._controlCreateDisplay.addClickListener(o, o.onCreateDisplayClick);
      o._controlCopy.addClickListener(o, o.onCopyClick);
      o._controlDelete.addClickListener(o, o.onDeleteClick);
      o._controlFolderOpen.addClickListener(o, o.onFolderOpenClick);
      o._controlFolderClose.addClickListener(o, o.onFolderCloseClick);
   }
   MO.FDsTemplateCatalogToolBar_onCreateCameraClick = function FDsTemplateCatalogToolBar_onCreateCameraClick(event){
      var o = this;
   }
   MO.FDsTemplateCatalogToolBar_onCreateDisplayClick = function FDsTemplateCatalogToolBar_onCreateDisplayClick(event){
      var o = this;
      var frameSet = o._frameSet;
      var space = frameSet._activeSpace;
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsCommonSpriteDialog);
      dialog._frameSet = frameSet;
      dialog._spaceGuid = space.resource().guid();
      dialog.setContentCode('');
      dialog.setContentLabel('');
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsTemplateCatalogToolBar_onCopyLoad = function FDsTemplateCatalogToolBar_onCopyLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsTemplateCatalogToolBar_onCopyExecute = function FDsTemplateCatalogToolBar_onCopyExecute(event){
      var o = this;
      if(event.resultCd != EResult.Success){
         return;
      }
      var space = o._frameSet._activeSpace;
      var spaceGuid = space.resource().guid();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = MO.Console.find(FDrSceneConsole).copyNode(spaceGuid, o._activeGuid);
      connection.addLoadListener(o, o.onDeleteLoad);
   }
   MO.FDsTemplateCatalogToolBar_onCopyClick = function FDsTemplateCatalogToolBar_onCopyClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return MO.Console.find(FDuiMessageConsole).showInfo('请选中节点后，再点击操作。');
      }
      o._activeNodeGuid = node.guid();
      var sprite = null;
      var linker = node.dataPropertyGet('linker');
      if(MO.Class.isClass(linker, FE3dSprite)){
         sprite = linker;
         o._activeGuid = linker.resource().guid();
      }else{
         return alert('不能复制当前选中的节点.');
      }
      var resource = sprite.resource();
      var parentResource = resource.parent();
      var displayResource = resource.clone();
      parentResource.pushDisplay(displayResource);
      var display = MO.Console.find(FE3dInstanceConsole).create(EE3dInstance.SceneDisplay);
      display.linkGraphicContext(sprite);
      display.loadResource(displayResource);
      MO.Console.find(FE3dSceneConsole).loadDisplay(display);
      var parent = sprite.parent();
      parent.pushDisplay(display);
   }
   MO.FDsTemplateCatalogToolBar_onDeleteLoad = function FDsTemplateCatalogToolBar_onDeleteLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      var catalog = o._frameSet._catalogContent;
      var guid = o._activeNodeGuid;
      if(guid){
         var node = catalog.findByGuid(guid);
         node.removeSelf();
      }
      o._activeNodeGuid = null;
   }
   MO.FDsTemplateCatalogToolBar_onDeleteExecute = function FDsTemplateCatalogToolBar_onDeleteExecute(event){
      var o = this;
      if(event.resultCd != EResult.Success){
         return;
      }
      var space = o._frameSet._activeSpace;
      var spaceGuid = space.resource().guid();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = MO.Console.find(FDrSceneConsole).deleteNode(spaceGuid, o._activeGuid);
      connection.addLoadListener(o, o.onDeleteLoad);
   }
   MO.FDsTemplateCatalogToolBar_onDeleteClick = function FDsTemplateCatalogToolBar_onDeleteClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return MO.Console.find(FDuiMessageConsole).showInfo('请选中节点后，再点击操作。');
      }
      o._activeNodeGuid = node.guid();
      var linker = node.dataPropertyGet('linker');
      if(MO.Class.isClass(linker, FE3dSprite)){
         o._activeGuid = linker.resource().guid();
      }else{
         return alert('不能删除当前选中的节点.');
      }
      var dialog = MO.Console.find(FDuiMessageConsole).showConfirm('请确认是否删除当前节点？');
      dialog.addResultListener(o, o.onDeleteExecute);
   }
   MO.FDsTemplateCatalogToolBar_onFolderOpenClick = function FDsTemplateCatalogToolBar_onFolderOpenClick(event){
   }
   MO.FDsTemplateCatalogToolBar_onFolderCloseClick = function FDsTemplateCatalogToolBar_onFolderCloseClick(event){
   }
   MO.FDsTemplateCatalogToolBar_construct = function FDsTemplateCatalogToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsTemplateCatalogToolBar_dispose = function FDsTemplateCatalogToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsTemplateFrameSet = function FDsTemplateFrameSet(o){
      o = MO.Class.inherits(this, o, FDsFrameSet);
      o._frameCatalog         = null;
      o._frameCatalogToolBar  = null;
      o._frameCatalogContent  = null;
      o._frameCanvas          = null;
      o._frameCanvasToolBar   = null;
      o._frameCanvasContent   = null;
      o._frameProperty        = null;
      o._framePropertyToolBar = null;
      o._framePropertyContent = null;
      o.onBuilded             = FDsTemplateFrameSet_onBuilded;
      o.onDataLoaded          = FDsTemplateFrameSet_onDataLoaded;
      o.onCatalogSelected     = FDsTemplateFrameSet_onCatalogSelected;
      o.construct             = FDsTemplateFrameSet_construct;
      o.loadByGuid            = FDsTemplateFrameSet_loadByGuid;
      o.loadByCode            = FDsTemplateFrameSet_loadByCode;
      o.dispose               = FDsTemplateFrameSet_dispose;
      return o;
   }
   MO.FDsTemplateFrameSet_onBuilded = function FDsTemplateFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsFrameSet.onBuilded.call(o, event);
      o._frameCatalogToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
      o._frameCanvasToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._frameCanvasContent._hPanel.className = o.styleName('Canvas_Content');
      o._framePropertyToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._framePropertyContent._hPanel.className = o.styleName('Property_Content');
      var spliter = o._spliterCatalog;
      spliter.setAlignCd(EUiAlign.Left);
      spliter.setSizeHtml(o._frameCatalog._hPanel);
      var spliter = o._spliterProperty;
      spliter.setAlignCd(EUiAlign.Right);
      spliter.setSizeHtml(o._frameProperty._hPanel);
   }
   MO.FDsTemplateFrameSet_onDataLoaded = function FDsTemplateFrameSet_onDataLoaded(event){
      var o = this;
      var canvas = event.sender;
      var space = o._activeSpace = canvas.activeSpace();
      o._catalogContent.buildSpace(space);
   }
   MO.FDsTemplateFrameSet_onCatalogSelected = function FDsTemplateFrameSet_onCatalogSelected(select, flag){
      var o = this;
      var space = o._activeSpace;
      if(!space){
         return;
      }
      o.hidePropertyFrames();
      if(MO.Class.isClass(select, FE3dSpace)){
         var frame = o.findPropertyFrame(EDsFrame.CommonSpacePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dTechnique)){
         var frame = o.findPropertyFrame(EDsFrame.CommonTechniquePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dRegion)){
         var frame = o.findPropertyFrame(EDsFrame.CommonRegionPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dCamera)){
         var frame = o.findPropertyFrame(EDsFrame.CommonCameraPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dDirectionalLight)){
         var frame = o.findPropertyFrame(EDsFrame.CommonLightPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dTemplateDisplay)){
         var frame = o.findPropertyFrame(EDsFrame.CommonDisplayPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dMaterial)){
         var frame = o.findPropertyFrame(EDsFrame.CommonMaterialPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dRenderable)){
         var frame = o.findPropertyFrame(EDsFrame.CommonRenderablePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else{
         throw new TError('Unknown select object type. (select={1})', select);
      }
   }
   MO.FDsTemplateFrameSet_construct = function FDsTemplateFrameSet_construct(){
      var o = this;
      o.__base.FDsFrameSet.construct.call(o);
   }
   MO.FDsTemplateFrameSet_loadByGuid = function FDsTemplateFrameSet_loadByGuid(guid){
      var o = this;
      o._activeGuid = guid;
      o._canvasContent.loadByGuid(guid);
   }
   MO.FDsTemplateFrameSet_loadByCode = function FDsTemplateFrameSet_loadByCode(code){
      var o = this;
      o._activeCode = code;
      o._canvasContent.loadByCode(code);
   }
   MO.FDsTemplateFrameSet_dispose = function FDsTemplateFrameSet_dispose(){
      var o = this;
      o.__base.FDsFrameSet.dispose.call(o);
   }
}
with(MO){
   MO.FDsTemplateMenuBar = function FDsTemplateMenuBar(o){
      o = MO.Class.inherits(this, o, FDuiMenuBar);
      o._controlSave           = null;
      o._controlCapture        = null;
      o._controlSelectMaterial = null;
      o._controlCreateDisplay  = null;
      o._controlDelete         = null;
      o.onSaveLoad            = FDsTemplateMenuBar_onSaveLoad;
      o.onSaveClick           = FDsTemplateMenuBar_onSaveClick;
      o.onCaptureLoad         = FDsTemplateMenuBar_onCaptureLoad;
      o.onCaptureClick        = FDsTemplateMenuBar_onCaptureClick;
      o.onSelectMaterialClick = FDsTemplateMenuBar_onSelectMaterialClick;
      o.onCreateDisplayClick  = FDsTemplateMenuBar_onCreateDisplayClick;
      o.onDeleteClick         = FDsTemplateMenuBar_onDeleteClick;
      o.construct             = FDsTemplateMenuBar_construct;
      o.dispose               = FDsTemplateMenuBar_dispose;
      return o;
   }
   MO.FDsTemplateMenuBar_onSaveLoad = function FDsTemplateMenuBar_onSaveLoad(event){
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsTemplateMenuBar_onSaveClick = function FDsTemplateMenuBar_onSaveClick(p){
      var o = this;
      var space = o._frameSet._activeSpace;
      var resource = space.resource();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var xconfig = new TXmlNode();
      resource.saveConfig(xconfig);
      var connection = MO.Console.find(FDrTemplateConsole).update(xconfig);
      connection.addLoadListener(o, o.onSaveLoad);
   }
   MO.FDsTemplateMenuBar_onCaptureLoad = function FDsTemplateMenuBar_onCaptureLoad(event){
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsTemplateMenuBar_onCaptureClick = function FDsTemplateMenuBar_onCaptureClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var canvas = o._frameSet._canvasContent;
      var connection = canvas.capture();
      connection.addLoadListener(o, o.onCaptureLoad);
   }
   MO.FDsTemplateMenuBar_onSelectMaterialClick = function FDsTemplateMenuBar_onSelectMaterialClick(event){
      var o = this;
      var frameSet = o._frameSet;
      var space = frameSet._activeSpace;
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsCommonMaterialDialog);
      dialog._frameSet = frameSet;
      dialog._spaceGuid = space.resource().guid();
      dialog.setSpace(space);
      dialog.setContentCode('');
      dialog.setContentLabel('');
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsTemplateMenuBar_onCreateDisplayClick = function FDsTemplateMenuBar_onCreateDisplayClick(event){
      var o = this;
      var frameSet = o._frameSet;
      var space = frameSet._activeSpace;
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsCommonDisplayDialog);
      dialog._frameSet = frameSet;
      dialog._spaceGuid = space.resource().guid();
      dialog.setSpace(space);
      dialog.setContentCode('');
      dialog.setContentLabel('');
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsTemplateMenuBar_onDeleteClick = function FDsTemplateMenuBar_onDeleteClick(event){
      var o = this;
      var frameSet = o._frameSet;
      var space = frameSet._activeSpace;
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsCommonDisplayDialog);
      dialog._frameSet = frameSet;
      dialog._spaceGuid = space.resource().guid();
      dialog.setContentCode('');
      dialog.setContentLabel('');
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsTemplateMenuBar_construct = function FDsTemplateMenuBar_construct(){
      var o = this;
      o.__base.FDuiMenuBar.construct.call(o);
   }
   MO.FDsTemplateMenuBar_dispose = function FDsTemplateMenuBar_dispose(){
      var o = this;
      o.__base.FDuiMenuBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsTemplateToolBar = function FDsTemplateToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._refreshButton = null;
      o._saveButton    = null;
      o.onBuild        = FDsTemplateToolBar_onBuild;
      o.onRefreshClick = FDsTemplateToolBar_onRefreshClick;
      o.onSaveClick    = FDsTemplateToolBar_onSaveClick;
      o.construct      = FDsTemplateToolBar_construct;
      o.dispose        = FDsTemplateToolBar_dispose;
      return o;
   }
   MO.FDsTemplateToolBar_onBuild = function FDsTemplateToolBar_onBuild(p){
      var o = this;
      o.__base.FDuiToolBar.onBuild.call(o, p);
      var b = o._refreshButton  = MO.Class.create(FDuiToolButton);
      b.setLabel('刷新');
      b.setIcon('design3d.tools.refresh');
      b.build(p);
      b.addClickListener(o, o.onRefreshClick);
      o.push(b);
      var b = o._saveButton = MO.Class.create(FDuiToolButton);
      b.setLabel('保存');
      b.setIcon('design3d.tools.save');
      b.build(p);
      b.addClickListener(o, o.onSaveClick);
      o.push(b);
   }
   MO.FDsTemplateToolBar_onRefreshClick = function FDsTemplateToolBar_onRefreshClick(p){
      var o = this;
   }
   MO.FDsTemplateToolBar_onSaveClick = function FDsTemplateToolBar_onSaveClick(p){
      var o = this;
      var t = o._workspace._activeTemplate;
      var rt = t._resource;
      var ts = rt.themes();
      var tc = ts.count();
      var xr = new TXmlNode();
      for(var ti = 0; ti < tc; ti++){
         var t = ts.get(ti);
         var ms = t.materials();
         var mc = ms.count();
         for(var mi = 0; mi < mc; mi++){
            var m = ms.value(mi);
            m.saveConfig(xr.create('Material'));
         }
      }
      MO.Console.find(FE3sTemplateConsole).update(xr);
   }
   MO.FDsTemplateToolBar_construct = function FDsTemplateToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsTemplateToolBar_dispose = function FDsTemplateToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsTemplateWorkspace = function FDsTemplateWorkspace(o){
      o = MO.Class.inherits(this, o, FDuiWorkspace);
      o._styleToolbarGround    = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleStatusbarGround  = MO.Class.register(o, new MO.AStyle('_styleStatusbarGround', 'Statusbar_Ground'));
      o._styleCatalogGround    = MO.Class.register(o, new MO.AStyle('_styleCatalogGround', 'Catalog_Ground'));
      o._styleWorkspaceGround  = MO.Class.register(o, new MO.AStyle('_styleWorkspaceGround', 'Workspace_Ground'));
      o._stylePropertyGround   = MO.Class.register(o, new MO.AStyle('_stylePropertyGround', 'Property_Ground'));
      o._framesetMain          = null;
      o._framesetBody          = null;
      o._frameToolBar          = null;
      o._frameBody             = null;
      o._frameProperty         = null;
      o._frameCatalog          = null;
      o._frameWorkspace        = null;
      o._frameStatusBar        = null;
      o._templatePropertyFrame = null;
      o._themePropertyFrame    = null;
      o._materialPropertyFrame = null;
      o._displayPropertyFrame  = null;
      o.onBuild                = FDsTemplateWorkspace_onBuild;
      o.onTemplateLoad         = FDsTemplateWorkspace_onTemplateLoad;
      o.onCatalogSelected      = FDsTemplateWorkspace_onCatalogSelected;
      o.construct              = FDsTemplateWorkspace_construct;
      o.templatePropertyFrame  = FDsTemplateWorkspace_templatePropertyFrame;
      o.themePropertyFrame     = FDsTemplateWorkspace_themePropertyFrame;
      o.materialPropertyFrame  = FDsTemplateWorkspace_materialPropertyFrame;
      o.displayPropertyFrame   = FDsTemplateWorkspace_displayPropertyFrame;
      o.loadTemplate           = FDsTemplateWorkspace_loadTemplate;
      o.dispose                = FDsTemplateWorkspace_dispose;
      return o;
   }
   MO.FDsTemplateWorkspace_onBuild = function FDsTemplateWorkspace_onBuild(p){
      var o = this;
      o.__base.FDuiWorkspace.onBuild.call(o, p);
      o._hPanel.style.width = '100%';
      o._hPanel.style.height = '100%';
      var fs = o._framesetMain = MO.Class.create(FDuiFrameSet);
      fs.build(p);
      var f = o._frameToolBar = MO.Class.create(FDuiFramePage);
      f.setHeight(26);
      f.build(p);
      f._hPanel.className = o.styleName('Toolbar_Ground');
      fs.appendFrame(f);
      var f = o._frameBody = MO.Class.create(FDuiFramePage);
      f.build(p);
      fs.appendFrame(f);
      var f = o._frameStatusBar = MO.Class.create(FDuiFramePage);
      f.setHeight(18);
      f.build(p);
      f._hPanel.className = o.styleName('Statusbar_Ground');
      fs.appendFrame(f);
      fs.setPanel(o._hPanel);
      var fs = MO.Class.create(FDuiFrameSet);
      fs._directionCd = EUiDirection.Horizontal;
      fs.build(p);
      var f = o._frameCatalog = MO.Class.create(FDuiFramePage);
      f.setWidth(400);
      f.build(p);
      f._hPanel.className = o.styleName('Catalog_Ground');
      fs.appendFrame(f);
      var sp1 = fs.appendSpliter();
      var f = o._frameWorkspace = MO.Class.create(FDuiFramePage);
      f.build(p);
      f._hPanel.className = o.styleName('Workspace_Ground');
      fs.appendFrame(f);
      var sp2 = fs.appendSpliter();
      var f = o._frameProperty = MO.Class.create(FDuiFramePage);
      f.setWidth(240);
      f.build(p);
      f._hPanel.className = o.styleName('Property_Ground');
      fs.appendFrame(f);
      fs.setPanel(o._frameBody._hPanel);
      sp1._alignCd = EUiAlign.Left;
      sp1._hSize = o._frameCatalog._hPanel;
      sp2._alignCd = EUiAlign.Right;
      sp2._hSize = o._frameStatusBar._hPanel;
      var c = o._catalog = MO.Class.create(FDsTemplateCatalog);
      c._workspace = o;
      c.build(p);
      c.setPanel(o._frameCatalog._hPanel);
      c.addSelectedListener(o, o.onCatalogSelected);
      o.push(c);
      var c = o._toolbar = MO.Class.create(FDsTemplateToolBar);
      c._workspace = o;
      c.build(p);
      c.setPanel(o._frameToolBar._hPanel);
      o.push(c);
      var hf = MO.Window.Builder.appendTable(o._frameWorkspace._hPanel);
      hf.style.width = '100%';
      hf.style.height = '100%';
      var hc = MO.Window.Builder.appendTableRowCell(hf);
      hc.height = 20;
      var c = o._canvasToolbar = MO.Class.create(FDsTemplateCanvasToolBar);
      c._workspace = o;
      c.build(p);
      c.setPanel(hc);
      o.push(c);
      var hc = MO.Window.Builder.appendTableRowCell(hf);
      hc.vAlign = 'top';
      var c = o._canvas = MO.Class.create(FDsTemplateCanvas);
      c.addLoadListener(o, o.onTemplateLoad);
      c._workspace = o;
      c._toolbar = o._canvasToolbar;
      c.build(p);
      c.setPanel(hc);
      o.push(c);
   }
   MO.FDsTemplateWorkspace_onTemplateLoad = function FDsTemplateWorkspace_onTemplateLoad(p){
      var o = this;
      var t = o._activeTemplate = p._activeTemplate;
      o._catalog.buildTemplate(t);
      o.onCatalogSelected(t);
   }
   MO.FDsTemplateWorkspace_onCatalogSelected = function FDsTemplateWorkspace_onCatalogSelected(p){
      var o = this;
      var t = o._activeTemplate;
      if(o._templatePropertyFrame){
         o._templatePropertyFrame.hide();
      }
      if(o._themePropertyFrame){
         o._themePropertyFrame.hide();
      }
      if(o._materialPropertyFrame){
         o._materialPropertyFrame.hide();
      }
      if(o._displayPropertyFrame){
         o._displayPropertyFrame.hide();
      }
      if(MO.Class.isClass(p, FE3dTemplate)){
         var f = o.templatePropertyFrame();
         f.show();
         f.loadObject(t);
      }else if(MO.Class.isClass(p, FE3sTemplateTheme)){
         var f = o.themePropertyFrame();
         f.show();
         f.loadObject(t, p);
      }else if(MO.Class.isClass(p, FE3sMaterial)){
         var f = o.materialPropertyFrame();
         f.show();
         f.loadObject(t, p);
      }else if(MO.Class.isClass(p, MG3dRenderable)){
         var f = o.displayPropertyFrame();
         f.show();
         f.loadObject(t, p);
         o._canvas.selectRenderable(p);
      }else{
         throw new TError('Unknown select object type. (value={1})', p);
      }
   }
   MO.FDsTemplateWorkspace_construct = function FDsTemplateWorkspace_construct(){
      var o = this;
      o.__base.FDuiWorkspace.construct.call(o);
   }
   MO.FDsTemplateWorkspace_templatePropertyFrame = function FDsTemplateWorkspace_templatePropertyFrame(){
      var o = this;
      var f = o._templatePropertyFrame;
      if(!f){
         f = o._templatePropertyFrame = MO.Class.create(FDsTemplatePropertyFrame);
         f._workspace = o;
         f.buildDefine(o._hPanel);
         f.setPanel(o._frameProperty._hPanel);
      }
      return f;
   }
   MO.FDsTemplateWorkspace_themePropertyFrame = function FDsTemplateWorkspace_themePropertyFrame(){
      var o = this;
      var f = o._themePropertyFrame;
      if(!f){
         var f = o._themePropertyFrame = MO.Class.create(FDsTemplateThemePropertyFrame);
         f._workspace = o;
         f.buildDefine(o._hPanel);
         f.setPanel(o._frameProperty._hPanel);
      }
      return f;
   }
   MO.FDsTemplateWorkspace_materialPropertyFrame = function FDsTemplateWorkspace_materialPropertyFrame(){
      var o = this;
      var f = o._materialPropertyFrame;
      if(!f){
         f = o._materialPropertyFrame = MO.Class.create(FDsTemplateMaterialPropertyFrame);
         f._workspace = o;
         f.buildDefine(o._hPanel);
         f.setPanel(o._frameProperty._hPanel);
      }
      return f;
   }
   MO.FDsTemplateWorkspace_displayPropertyFrame = function FDsTemplateWorkspace_displayPropertyFrame(){
      var o = this;
      var f = o._displayPropertyFrame;
      if(!f){
         f = o._displayPropertyFrame = MO.Class.create(FDsTemplateDisplayPropertyFrame);
         f._workspace = o;
         f.buildDefine(o._hPanel);
         f.setPanel(o._frameProperty._hPanel);
      }
      return f;
   }
   MO.FDsTemplateWorkspace_loadTemplate = function FDsTemplateWorkspace_loadTemplate(p){
      var o = this;
      o._canvas.loadTemplate(p);
   }
   MO.FDsTemplateWorkspace_dispose = function FDsTemplateWorkspace_dispose(){
      var o = this;
      o.__base.FDuiWorkspace.dispose.call(o);
   }
}
with(MO){
   MO.FDsSceneCanvasContent = function FDsSceneCanvasContent(o){
      o = MO.Class.inherits(this, o, FDsSpaceDesignCanvas);
      o._resourceTypeCd = EE3sResource.Scene;
      o.loadByGuid      = FDsSceneCanvasContent_loadByGuid;
      o.dispose         = FDsSceneCanvasContent_dispose;
      return o;
   }
   MO.FDsSceneCanvasContent_onDataLoaded = function FDsSceneCanvasContent_onDataLoaded(p){
      var o = this;
      o.reloadRegion()
      o.processLoadListener(o);
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsSceneCanvasContent_loadByGuid = function FDsSceneCanvasContent_loadByGuid(guid){
      var o = this;
      var space = o._activeSpace;
      var sceneConsole = MO.Console.find(FE3dSceneConsole);
      if(space){
         RStage.unregister(space);
         sceneConsole.free(space);
      }
      space = o._activeSpace = sceneConsole.allocByGuid(o, guid);
      if(!space._linked){
         MO.Console.find(FDuiDesktopConsole).showLoading();
         space.addLoadListener(o, o.onDataLoaded);
         space._linked = true;
      }
      RStage.register('space', space);
   }
   MO.FDsSceneCanvasContent_dispose = function FDsSceneCanvasContent_dispose(){
      var o = this;
      o.__base.FDsSpaceDesignCanvas.dispose.call(o);
   }
}
with(MO){
   MO.FDsSceneCanvasToolBar = function FDsSceneCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName         = 'resource.scene.CanvasToolBar';
      o._canvasModeCd      = EDsCanvasMode.Drop;
      o._controlModeDrop   = null;
      o._controlModeSelect = null;
      o._controlTranslate  = null;
      o._controlRotation   = null;
      o._controlScale      = null;
      o._controlLookFront  = null;
      o._controlLookUp     = null;
      o._controlLookLeft   = null;
      o._controlPlay       = null;
      o._controlView       = null;
      o.onBuilded         = FDsSceneCanvasToolBar_onBuilded;
      o.onModeClick       = FDsSceneCanvasToolBar_onModeClick;
      o.onLookClick       = FDsSceneCanvasToolBar_onLookClick;
      o.onPlayClick       = FDsSceneCanvasToolBar_onPlayClick;
      o.onRotationClick   = FDsSceneCanvasToolBar_onRotationClick;
      o.construct         = FDsSceneCanvasToolBar_construct;
      o.dispose           = FDsSceneCanvasToolBar_dispose;
      return o;
   }
   MO.FDsSceneCanvasToolBar_onBuilded = function FDsSceneCanvasToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      var button = o._controlModeDrop;
      button._canvasModeCd = EDsCanvasMode.Drop;
      button.addClickListener(o, o.onModeClick);
      button.check(true);
      var button = o._controlModeSelect;
      button._canvasModeCd = EDsCanvasMode.Select;
      button.addClickListener(o, o.onModeClick);
      var button = o._controlTranslate;
      button._canvasModeCd = EDsCanvasMode.Translate;
      button.addClickListener(o, o.onModeClick);
      var button = o._controlRotation;
      button._canvasModeCd = EDsCanvasMode.Rotation;
      button.addClickListener(o, o.onModeClick);
      var button = o._controlScale;
      button._canvasModeCd = EDsCanvasMode.Scale;
      button.addClickListener(o, o.onModeClick);
      o._controlLookFront.addClickListener(o, o.onLookClick);
      o._controlLookUp.addClickListener(o, o.onLookClick);
      o._controlLookLeft.addClickListener(o, o.onLookClick);
      o._controlPlay.addClickListener(o, o.onPlayClick);
      o._controlView.addClickListener(o, o.onRotationClick);
   }
   MO.FDsSceneCanvasToolBar_onModeClick = function FDsSceneCanvasToolBar_onModeClick(event){
      var o = this;
      var sender = event.sender;
      var modeCd = sender._canvasModeCd;
      o._canvasModeCd = modeCd;
      o._frameSet._canvasContent.switchMode(modeCd);
   }
   MO.FDsSceneCanvasToolBar_onLookClick = function FDsSceneCanvasToolBar_onLookClick(event){
      var o = this;
      o._canvasModeCd = p._canvasModeCd;
   }
   MO.FDsSceneCanvasToolBar_onPlayClick = function FDsSceneCanvasToolBar_onPlayClick(event){
      var o = this;
      o._frameSet._canvasContent.switchPlay(event.checked);
   }
   MO.FDsSceneCanvasToolBar_onRotationClick = function FDsSceneCanvasToolBar_onRotationClick(event){
      var o = this;
      o._frameSet._canvasContent.switchMovie(event.checked);
   }
   MO.FDsSceneCanvasToolBar_construct = function FDsSceneCanvasToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsSceneCanvasToolBar_dispose = function FDsSceneCanvasToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsSceneCatalogContent = function FDsSceneCatalogContent(o){
      o = MO.Class.inherits(this, o, FDsCatalog);
      o._catalogCode    = 'resource.scene';
      o.onBuild         = FDsSceneCatalogContent_onBuild;
      o.onLoadDisplay   = FDsSceneCatalogContent_onLoadDisplay;
      o.construct       = FDsSceneCatalogContent_construct;
      o.buildRenderable = FDsSceneCatalogContent_buildRenderable;
      o.buildDisplay    = FDsSceneCatalogContent_buildDisplay;
      o.buildLayer      = FDsSceneCatalogContent_buildLayer;
      o.buildSpace      = FDsSceneCatalogContent_buildSpace;
      o.dispose         = FDsSceneCatalogContent_dispose;
      return o;
   }
   MO.FDsSceneCatalogContent_onBuild = function FDsSceneCatalogContent_onBuild(event){
      var o = this;
      var column = MO.Class.create(FDuiTreeColumn);
      column.setName('view');
      o.push(column);
      o.__base.FDsCatalog.onBuild.call(o, event);
      o.loadUrl('/cloud.describe.tree.ws?action=query&code=' + o._catalogCode);
   }
   MO.FDsSceneCatalogContent_onLoadDisplay = function FDsSceneCatalogContent_onLoadDisplay(event){
      var o = this;
      var node = event._linkNode;
      o.buildRenderable(node, event);
   }
   MO.FDsSceneCatalogContent_construct = function FDsSceneCatalogContent_construct(){
      var o = this;
      o.__base.FDsCatalog.construct.call(o);
   }
   MO.FDsSceneCatalogContent_buildRenderable = function FDsSceneCatalogContent_buildRenderable(parentNode, sprite){
      var o = this;
      var movies = sprite.movies();
      if(movies){
         var movieCount = movies.count();
         for(var i = 0; i < movieCount; i++){
            var movie = movies.at(i);
            var movieResource = movie.resource();
            var movieNode = o.createNode();
            movieNode.setTypeCode('Movie');
            movieNode.setLabel(movieResource.code());
            movieNode.setNote(movieResource.label());
            movieNode.dataPropertySet('linker', movie);
            parentNode.appendNode(movieNode);
         }
      }
      var materials = sprite.materials();
      if(materials){
         var materialCount = materials.count();
         for(var i = 0; i < materialCount; i++){
            var material = materials.at(i);
            var materialResource = material.resource();
            var materialNode = o.createNode();
            materialNode.setTypeCode('Material');
            materialNode.setLabel(materialResource.code());
            materialNode.setNote(materialResource.label());
            materialNode.dataPropertySet('linker', material);
            o.buildNodeView(materialNode, true);
            parentNode.appendNode(materialNode);
            o._materialNodes.push(materialNode);
         }
      }
      var animations = sprite.animations();
      if(animations){
         var animationCount = animations.count();
         for(var i = 0; i < animationCount; i++){
            var animation = animations.at(i);
            var animationResource = animation.resource();
            var animationNode = o.createNode();
            animationNode.setTypeCode('Animation');
            animationNode.setLabel(animationResource.code());
            animationNode.setNote(animationResource.label());
            animationNode.dataPropertySet('linker', animation);
            parentNode.appendNode(animationNode);
            o.buildNodeView(animationNode, true);
         }
      }
      var renderables = sprite.meshRenderables();
      if(renderables){
         var renderableCount = renderables.count();
         for(var i = 0; i < renderableCount; i++){
            var renderable = renderables.at(i);
            var renderableResource = renderable.resource();
            var modelResource = renderableResource.model();
            var meshResource = renderableResource.mesh();
            var renderableNode = o.createNode();
            renderableNode.setTypeCode('Renderable');
            renderableNode.setLabel(meshResource.code());
            renderableNode.dataPropertySet('linker', renderable);
            o.buildNodeView(renderableNode, true);
            parentNode.appendNode(renderableNode);
            o._renderableNodes.push(renderableNode);
         }
      }
   }
   MO.FDsSceneCatalogContent_buildDisplay = function FDsSceneCatalogContent_buildDisplay(parentNode, p){
      var o = this;
      var displays = p.displays();
      if(displays){
         var displayCount = displays.count();
         for(var i = 0; i < displayCount; i++){
            var display = displays.at(i);
            var resource = display.resource();
            var displayNode = o.createNode();
            displayNode.setTypeCode('display');
            displayNode.setLabel(resource.code());
            displayNode.setNote(resource.label());
            displayNode.dataPropertySet('linker', display);
            o.buildNodeView(displayNode, true);
            o._displayNodes.push(displayNode);
            parentNode.appendNode(displayNode);
            display.addLoadListener(o, o.onLoadDisplay);
            display._linkNode = displayNode;
         }
      }
   }
   MO.FDsSceneCatalogContent_buildLayer = function FDsSceneCatalogContent_buildLayer(parentNode, space){
      var o = this;
      var layersNode = o.createNode();
      layersNode.setTypeCode('Layers');
      layersNode.setLabel('Layers');
      layersNode.dataPropertySet('linker', 'layers');
      o.buildNodeView(layersNode, true);
      parentNode.appendNode(layersNode);
      var layers = space.layers();
      var layerCount = layers.count();
      for(var i = 0; i < layerCount; i++){
         var layer = layers.at(i);
         if(MO.Class.isClass(layer, FDisplayUiLayer)){
            continue;
         }
         var layerResource = layer.resource();
         var layerNode = o.createNode();
         layerNode.setTypeCode('Layer');
         layerNode.setLabel('Layer:' + layerResource.code());
         layerNode.dataPropertySet('linker', layer);
         o.buildNodeView(layerNode, true);
         layersNode.appendNode(layerNode);
         o.buildDisplay(layerNode, layer)
      }
   }
   MO.FDsSceneCatalogContent_buildSpace = function FDsSceneCatalogContent_buildSpace(space){
      var o = this;
      o.clearAllNodes();
      var resource = space.resource();
      var spaceNode = o.createNode();
      spaceNode.setTypeCode('Scene');
      spaceNode.setLabel(resource.code());
      spaceNode.setNote(resource.label());
      spaceNode.dataPropertySet('linker', space);
      o.push(spaceNode);
      o.buildTechnique(spaceNode, space.technique())
      o.buildRegion(spaceNode, space.region());
      o.buildLayer(spaceNode, space);
      spaceNode.click();
   }
   MO.FDsSceneCatalogContent_dispose = function FDsSceneCatalogContent_dispose(){
      var o = this;
      o.__base.FDsCatalog.dispose.call(o);
   }
}
with(MO){
   MO.FDsSceneCatalogToolBar = function FDsSceneCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._activeNodeGuid        = null;
      o._controlCreateCamera   = null;
      o._controlCreateLayer    = null;
      o._controlCreateSprite   = null;
      o._controlCreateMovie    = null;
      o._controlDelete         = null;
      o._controlFolderOpen     = null;
      o._controlFolderClose    = null;
      o.onBuilded              = FDsSceneCatalogToolBar_onBuilded;
      o.onCreateCameraClick    = FDsSceneCatalogToolBar_onCreateCameraClick;
      o.onCreateLayerClick     = FDsSceneCatalogToolBar_onCreateLayerClick;
      o.onCreateSpriteClick    = FDsSceneCatalogToolBar_onCreateSpriteClick;
      o.onCreateMovieClick     = FDsSceneCatalogToolBar_onCreateMovieClick;
      o.onDeleteLoad           = FDsSceneCatalogToolBar_onDeleteLoad;
      o.onDeleteExecute        = FDsSceneCatalogToolBar_onDeleteExecute;
      o.onCopyLoad             = FDsSceneCatalogToolBar_onCopyLoad;
      o.onCopyExecute          = FDsSceneCatalogToolBar_onCopyExecute;
      o.onCopyClick            = FDsSceneCatalogToolBar_onCopyClick;
      o.onDeleteClick          = FDsSceneCatalogToolBar_onDeleteClick;
      o.onFolderOpenClick      = FDsSceneCatalogToolBar_onFolderOpenClick;
      o.onFolderCloseClick     = FDsSceneCatalogToolBar_onFolderCloseClick;
      o.construct              = FDsSceneCatalogToolBar_construct;
      o.dispose                = FDsSceneCatalogToolBar_dispose;
      return o;
   }
   MO.FDsSceneCatalogToolBar_onBuilded = function FDsSceneCatalogToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlCreateCamera.addClickListener(o, o.onCreateCameraClick);
      o._controlCreateLayer.addClickListener(o, o.onCreateLayerClick);
      o._controlCreateSprite.addClickListener(o, o.onCreateSpriteClick);
      o._controlCreateMovie.addClickListener(o, o.onCreateMovieClick);
      o._controlCopy.addClickListener(o, o.onCopyClick);
      o._controlDelete.addClickListener(o, o.onDeleteClick);
      o._controlFolderOpen.addClickListener(o, o.onFolderOpenClick);
      o._controlFolderClose.addClickListener(o, o.onFolderCloseClick);
   }
   MO.FDsSceneCatalogToolBar_onCreateCameraClick = function FDsSceneCatalogToolBar_onCreateCameraClick(event){
      var o = this;
   }
   MO.FDsSceneCatalogToolBar_onCreateLayerClick = function FDsSceneCatalogToolBar_onCreateLayerClick(event){
      var o = this;
   }
   MO.FDsSceneCatalogToolBar_onCreateSpriteClick = function FDsSceneCatalogToolBar_onCreateSpriteClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return alert('请选中目录节点。');
      }
      var linker = node.dataPropertyGet('linker');
      var layer = null;
      var sprite = null;
      if(MO.Class.isClass(linker, FDisplayLayer)){
         layer = linker;
      }else if(MO.Class.isClass(linker, FE3dSprite)){
         layer = linker.findParent(FDisplayLayer);
         sprite = linker;
      }else{
         return alert('请选中显示层或者精灵节点。');
      }
      var frameSet = o._frameSet;
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsCommonSpriteDialog);
      dialog._frameSet = frameSet;
      dialog._spaceGuid = frameSet._activeSpace.resource().guid();
      dialog._layerGuid = layer.resource().guid();
      if(sprite){
         dialog._displayGuid = sprite.resource().guid();
      }else{
         dialog._displayGuid = null;
      }
      if(layer){
         dialog.setLayerLabel(layer.makeLabel());
      }
      if(sprite){
         dialog.setDisplayLabel(sprite.makeLabel());
      }
      dialog.setContentCode('');
      dialog.setContentLabel('');
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsSceneCatalogToolBar_onCreateMovieClick = function FDsSceneCatalogToolBar_onCreateMovieClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return alert('请选中目录节点。');
      }
      var linker = node.dataPropertyGet('linker');
      var layer = null;
      var sprite = null;
      if(MO.Class.isClass(linker, FE3dSprite)){
         layer = linker.findParent(FDisplayLayer);
         sprite = linker;
      }else{
         return alert('请选中精灵节点。');
      }
      var frameSet = o._frameSet;
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsCommonMovieDialog);
      dialog._frameSet = frameSet;
      dialog._spaceGuid = frameSet._activeSpace.resource().guid();
      dialog._layerGuid = layer.resource().guid();
      dialog._displayGuid = sprite.resource().guid();
      if(layer){
         dialog.setLayerLabel(layer.makeLabel());
      }
      if(sprite){
         dialog.setDisplayLabel(sprite.makeLabel());
      }
      dialog.setContentCode('');
      dialog.setContentLabel('');
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsSceneCatalogToolBar_onCopyLoad = function FDsSceneCatalogToolBar_onCopyLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsSceneCatalogToolBar_onCopyExecute = function FDsSceneCatalogToolBar_onCopyExecute(event){
      var o = this;
      if(event.resultCd != EResult.Success){
         return;
      }
      var space = o._frameSet._activeSpace;
      var spaceGuid = space.resource().guid();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = MO.Console.find(FDrSceneConsole).copyNode(spaceGuid, o._activeGuid);
      connection.addLoadListener(o, o.onDeleteLoad);
   }
   MO.FDsSceneCatalogToolBar_onCopyClick = function FDsSceneCatalogToolBar_onCopyClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return MO.Console.find(FDuiMessageConsole).showInfo('请选中节点后，再点击操作。');
      }
      o._activeNodeGuid = node.guid();
      var sprite = null;
      var linker = node.dataPropertyGet('linker');
      if(MO.Class.isClass(linker, FE3dSprite)){
         sprite = linker;
         o._activeGuid = linker.resource().guid();
      }else{
         return alert('不能复制当前选中的节点.');
      }
      var resource = sprite.resource();
      var parentResource = resource.parent();
      var displayResource = resource.clone();
      parentResource.pushDisplay(displayResource);
      var display = MO.Console.find(FE3dInstanceConsole).create(EE3dInstance.SceneDisplay);
      display.linkGraphicContext(sprite);
      display.loadResource(displayResource);
      MO.Console.find(FE3dSceneConsole).loadDisplay(display);
      var parent = sprite.parent();
      parent.pushDisplay(display);
   }
   MO.FDsSceneCatalogToolBar_onDeleteLoad = function FDsSceneCatalogToolBar_onDeleteLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      var catalog = o._frameSet._catalogContent;
      var guid = o._activeNodeGuid;
      if(guid){
         var node = catalog.findByGuid(guid);
         node.removeSelf();
      }
      o._activeNodeGuid = null;
   }
   MO.FDsSceneCatalogToolBar_onDeleteExecute = function FDsSceneCatalogToolBar_onDeleteExecute(event){
      var o = this;
      if(event.resultCd != EResult.Success){
         return;
      }
      var space = o._frameSet._activeSpace;
      var spaceGuid = space.resource().guid();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var connection = MO.Console.find(FDrSceneConsole).deleteNode(spaceGuid, o._activeGuid);
      connection.addLoadListener(o, o.onDeleteLoad);
   }
   MO.FDsSceneCatalogToolBar_onDeleteClick = function FDsSceneCatalogToolBar_onDeleteClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return MO.Console.find(FDuiMessageConsole).showInfo('请选中节点后，再点击操作。');
      }
      o._activeNodeGuid = node.guid();
      var linker = node.dataPropertyGet('linker');
      if(MO.Class.isClass(linker, FE3dSprite)){
         o._activeGuid = linker.resource().guid();
      }else{
         return alert('不能删除当前选中的节点.');
      }
      var dialog = MO.Console.find(FDuiMessageConsole).showConfirm('请确认是否删除当前节点？');
      dialog.addResultListener(o, o.onDeleteExecute);
   }
   MO.FDsSceneCatalogToolBar_onFolderOpenClick = function FDsSceneCatalogToolBar_onFolderOpenClick(event){
   }
   MO.FDsSceneCatalogToolBar_onFolderCloseClick = function FDsSceneCatalogToolBar_onFolderCloseClick(event){
   }
   MO.FDsSceneCatalogToolBar_construct = function FDsSceneCatalogToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsSceneCatalogToolBar_dispose = function FDsSceneCatalogToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsSceneFrameSet = function FDsSceneFrameSet(o){
      o = MO.Class.inherits(this, o, FDsFrameSet);
      o._frameCatalog         = null;
      o._frameCatalogToolBar  = null;
      o._frameCatalogContent  = null;
      o._frameCanvas          = null;
      o._frameCanvasToolBar   = null;
      o._frameCanvasContent   = null;
      o._frameProperty        = null;
      o._framePropertyToolBar = null;
      o._framePropertyContent = null;
      o.onBuilded             = FDsSceneFrameSet_onBuilded;
      o.onDataLoaded          = FDsSceneFrameSet_onDataLoaded;
      o.onCatalogSelected     = FDsSceneFrameSet_onCatalogSelected;
      o.construct             = FDsSceneFrameSet_construct;
      o.loadByGuid            = FDsSceneFrameSet_loadByGuid;
      o.loadByCode            = FDsSceneFrameSet_loadByCode;
      o.dispose               = FDsSceneFrameSet_dispose;
      return o;
   }
   MO.FDsSceneFrameSet_onBuilded = function FDsSceneFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsFrameSet.onBuilded.call(o, event);
      o._frameCatalogToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
      o._frameCanvasToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._frameCanvasContent._hPanel.className = o.styleName('Canvas_Content');
      o._framePropertyToolBar._hPanel.className = o.styleName('ToolBar_Ground');
      o._framePropertyContent._hPanel.className = o.styleName('Property_Content');
      var spliter = o._spliterCatalog;
      spliter.setAlignCd(EUiAlign.Left);
      spliter.setSizeHtml(o._frameCatalog._hPanel);
      var spliter = o._spliterProperty;
      spliter.setAlignCd(EUiAlign.Right);
      spliter.setSizeHtml(o._frameProperty._hPanel);
      var sceneConsole = MO.Console.find(FE3dInstanceConsole);
      sceneConsole.register(EE3dInstance.TemplateRenderable, FDsSceneRenderable);
      sceneConsole.register(EE3dInstance.SceneLayer, FDsSceneLayer);
      sceneConsole.register(EE3dInstance.SceneDisplay, FDsSceneDisplay);
      sceneConsole.register(EE3dInstance.SceneRenderable, FDsSceneRenderable);
   }
   MO.FDsSceneFrameSet_onDataLoaded = function FDsSceneFrameSet_onDataLoaded(canvas){
      var o = this;
      var space = o._activeSpace = canvas._activeSpace;
      o._catalogContent.buildSpace(space);
   }
   MO.FDsSceneFrameSet_onCatalogSelected = function FDsSceneFrameSet_onCatalogSelected(select, flag){
      var o = this;
      var space = o._activeSpace;
      if(!space){
         return;
      }
      var canvas = o._canvasContent;
      o.hidePropertyFrames();
      if(MO.Class.isClass(select, FE3dScene)){
         var frame = o.findPropertyFrame(EDsFrame.CommonSpacePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dTechnique)){
         var frame = o.findPropertyFrame(EDsFrame.CommonTechniquePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dRegion)){
         var frame = o.findPropertyFrame(EDsFrame.CommonRegionPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dCamera)){
         var frame = o.findPropertyFrame(EDsFrame.CommonCameraPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FG3dDirectionalLight)){
         var frame = o.findPropertyFrame(EDsFrame.CommonLightPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(select == 'layers'){
         if(flag){
            canvas.selectLayers(select);
         }
      }else if(MO.Class.isClass(select, FE3dSceneLayer)){
         if(flag){
            canvas.selectLayer(select);
         }
         var frame = o.findPropertyFrame(EDsFrame.CommonLayerPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dSceneDisplay)){
         if(flag){
            canvas.selectDisplay(select);
         }
         var frame = o.findPropertyFrame(EDsFrame.CommonDisplayPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dSceneMaterial)){
         if(flag){
            canvas.selectMaterial(select);
         }
         var frame = o.findPropertyFrame(EDsFrame.CommonMaterialPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dAnimation)){
         var frame = o.findPropertyFrame(EDsFrame.CommonAnimationPropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dMovie)){
         var frame = o.findPropertyFrame(EDsFrame.CommonMoviePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else if(MO.Class.isClass(select, FE3dRenderable)){
         if(flag){
            canvas.selectRenderable(select);
         }
         var frame = o.findPropertyFrame(EDsFrame.CommonRenderablePropertyFrame);
         frame.show();
         frame.loadObject(space, select);
      }else{
         throw new TError('Unknown select type. (select={1})', select);
      }
   }
   MO.FDsSceneFrameSet_construct = function FDsSceneFrameSet_construct(){
      var o = this;
      o.__base.FDsFrameSet.construct.call(o);
   }
   MO.FDsSceneFrameSet_loadByGuid = function FDsSceneFrameSet_loadByGuid(guid){
      var o = this;
      o._activeGuid = guid;
      o._canvasContent.loadByGuid(guid);
   }
   MO.FDsSceneFrameSet_loadByCode = function FDsSceneFrameSet_loadByCode(code){
      var o = this;
      o._avtiveCode = code;
      o._canvasContent.loadByCode(code);
   }
   MO.FDsSceneFrameSet_dispose = function FDsSceneFrameSet_dispose(){
      var o = this;
      o.__base.FDsFrameSet.dispose.call(o);
   }
}
with(MO){
   MO.FDsSceneMenuBar = function FDsSceneMenuBar(o){
      o = MO.Class.inherits(this, o, FDuiMenuBar);
      o._refreshButton        = null;
      o._saveButton           = null;
      o._runButton            = null;
      o.onBuilded             = FDsSceneMenuBar_onBuilded;
      o.onSaveLoad            = FDsSceneMenuBar_onSaveLoad;
      o.onSaveClick           = FDsSceneMenuBar_onSaveClick;
      o.onCaptureLoad         = FDsSceneMenuBar_onCaptureLoad;
      o.onCaptureClick        = FDsSceneMenuBar_onCaptureClick;
      o.onCreateLayerClick    = FDsSceneMenuBar_onCreateLayerClick;
      o.onImportTemplateClick = FDsSceneMenuBar_onImportTemplateClick;
      o.onExecuteClick        = FDsSceneMenuBar_onExecuteClick;
      o.construct             = FDsSceneMenuBar_construct;
      o.dispose               = FDsSceneMenuBar_dispose;
      return o;
   }
   MO.FDsSceneMenuBar_onBuilded = function FDsSceneMenuBar_onBuilded(p){
      var o = this;
      o.__base.FDuiMenuBar.onBuilded.call(o, p);
   }
   MO.FDsSceneMenuBar_onSaveLoad = function FDsSceneMenuBar_onSaveLoad(event){
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsSceneMenuBar_onSaveClick = function FDsSceneMenuBar_onSaveClick(p){
      var o = this;
      var space = o._frameSet._activeSpace;
      space.commitResource();
      var resource = space.resource();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var xconfig = new TXmlNode();
      resource.saveConfig(xconfig);
      var connection = MO.Console.find(FDrSceneConsole).update(xconfig);
      connection.addLoadListener(o, o.onSaveLoad);
   }
   MO.FDsSceneMenuBar_onCaptureLoad = function FDsSceneMenuBar_onCaptureLoad(event){
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsSceneMenuBar_onCaptureClick = function FDsSceneMenuBar_onCaptureClick(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).showUploading();
      var canvasContent = o._frameSet._canvasContent;
      var connection = canvasContent.capture();
      connection.addLoadListener(o, o.onCaptureLoad);
   }
   MO.FDsSceneMenuBar_onCreateLayerClick = function FDsSceneMenuBar_onCreateLayerClick(event){
      var o = this;
      var frameSet = o._frameSet;
      var space = frameSet._activeSpace;
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsCommonLayerDialog);
      dialog._frameSet = frameSet;
      dialog._spaceGuid = space.resource().guid();
      dialog.setSpace(space);
      dialog.setContentCode('');
      dialog.setContentLabel('');
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsSceneMenuBar_onImportTemplateClick = function FDsSceneMenuBar_onImportTemplateClick(){
      var o = this;
      var frameSet = o._frameSet;
      var space = frameSet._activeSpace;
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsCommonTemplateDialog);
      dialog._frameSet = frameSet;
      dialog._spaceGuid = space.resource().guid();
      dialog.setSpace(space);
      dialog.setContentCode('');
      dialog.setContentLabel('');
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsSceneMenuBar_onExecuteClick = function FDsSceneMenuBar_onExecuteClick(event){
      var o = this;
      var url = 'Space.wa?do=run&guid=' + o._frameSet._activeGuid;
      window.location = url;
   }
   MO.FDsSceneMenuBar_construct = function FDsSceneMenuBar_construct(){
      var o = this;
      o.__base.FDuiMenuBar.construct.call(o);
   }
   MO.FDsSceneMenuBar_dispose = function FDsSceneMenuBar_dispose(){
      var o = this;
      o.__base.FDuiMenuBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsScenePropertyToolBar = function FDsScenePropertyToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName                   = 'resource.scene.PropertyToolBar';
      o._controlRefresh   = null;
      o._activeNodeGuid              = null;
      o.onBuilded                    = FDsScenePropertyToolBar_onBuilded;
      o.onFolderCreateClick          = FDsScenePropertyToolBar_onFolderCreateClick;
      o.onFolderDeleteLoad           = FDsScenePropertyToolBar_onFolderDeleteLoad;
      o.onFolderDeleteExcute         = FDsScenePropertyToolBar_onFolderDeleteExcute;
      o.onFolderDeleteClick          = FDsScenePropertyToolBar_onFolderDeleteClick;
      o.onFolderPropertyClick        = FDsScenePropertyToolBar_onFolderPropertyClick;
      o.onFolderOpenClick            = FDsScenePropertyToolBar_onFolderOpenClick;
      o.onFolderCloseClick           = FDsScenePropertyToolBar_onFolderCloseClick;
      o.construct                    = FDsScenePropertyToolBar_construct;
      o.dispose                      = FDsScenePropertyToolBar_dispose;
      return o;
   }
   MO.FDsScenePropertyToolBar_onBuilded = function FDsScenePropertyToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
   }
   MO.FDsScenePropertyToolBar_onFolderCreateClick = function FDsScenePropertyToolBar_onFolderCreateClick(event){
      var o = this;
      var parentGuid = null;
      var parentLabel = null;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(node){
         parentGuid = node.guid();
         parentLabel = node.label();
      }
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsResourceFolderDialog);
      dialog._workspace = o._workspace;
      dialog._frameSet = o._frameSet;
      dialog._parentGuid = parentGuid;
      dialog.setNodeParentLabel(parentLabel);
      dialog.setNodeLabel('');
      dialog.switchDataMode(EUiDataMode.Insert);
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsScenePropertyToolBar_onFolderDeleteLoad = function FDsScenePropertyToolBar_onFolderDeleteLoad(event){
      var o = this;
      MO.Console.find(FDuiDesktopConsole).hide();
      var catalog = o._frameSet._catalogContent;
      var guid = o._activeNodeGuid;
      if(guid){
         var node = catalog.findByGuid(guid);
         node.removeSelf();
      }
      o._activeNodeGuid = null;
   }
   MO.FDsScenePropertyToolBar_onFolderDeleteExcute = function FDsScenePropertyToolBar_onFolderDeleteExcute(event){
      var o = this;
      if(event.resultCd != EResult.Success){
         return;
      }
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      MO.Console.find(FDuiDesktopConsole).showUploading();
      o._activeNodeGuid = node._guid;
      var connection = MO.Console.find(FDrResourceConsole).doFolderDelete(node._guid);
      connection.addLoadListener(o, o.onFolderDeleteLoad);
   }
   MO.FDsScenePropertyToolBar_onFolderDeleteClick = function FDsScenePropertyToolBar_onFolderDeleteClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return MO.Console.find(FDuiMessageConsole).showInfo('请选中目录节点后，再点击操作。');
      }
      var dialog = MO.Console.find(FDuiMessageConsole).showConfirm('请确认是否删除当前目录？');
      dialog.addResultListener(o, o.onFolderDeleteExcute);
   }
   MO.FDsScenePropertyToolBar_onFolderPropertyClick = function FDsScenePropertyToolBar_onFolderPropertyClick(event){
      var o = this;
      var catalog = o._frameSet._catalogContent;
      var node = catalog.focusNode();
      if(!node){
         return MO.Console.find(FDuiMessageConsole).showInfo('请选中目录节点后，再点击操作。');
      }
      var parentLabel = null;
      if(node._parent){
         parentLabel = node._parent.label();
      }
      var dialog = MO.Console.find(FDuiWindowConsole).find(FDsResourceFolderDialog);
      dialog._workspace = o._workspace;
      dialog._frameSet = o._frameSet;
      dialog._nodeGuid = node._guid;
      dialog.setNodeParentLabel(parentLabel);
      dialog.setNodeLabel(node.label());
      dialog.switchDataMode(EUiDataMode.Update);
      dialog.showPosition(EUiPosition.Center);
   }
   MO.FDsScenePropertyToolBar_onFolderOpenClick = function FDsScenePropertyToolBar_onFolderOpenClick(event){
   }
   MO.FDsScenePropertyToolBar_onFolderCloseClick = function FDsScenePropertyToolBar_onFolderCloseClick(event){
   }
   MO.FDsScenePropertyToolBar_construct = function FDsScenePropertyToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsScenePropertyToolBar_dispose = function FDsScenePropertyToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsSceneWorkspace = function FDsSceneWorkspace(o){
      o = MO.Class.inherits(this, o, FDuiWorkspace);
      o._frameName            = 'resource.share.scene.Workspace';
      o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleStatusbarGround = MO.Class.register(o, new MO.AStyle('_styleStatusbarGround', 'Statusbar_Ground'));
      o._styleCatalogGround   = MO.Class.register(o, new MO.AStyle('_styleCatalogGround', 'Catalog_Ground'));
      o._styleWorkspaceGround = MO.Class.register(o, new MO.AStyle('_styleWorkspaceGround', 'Workspace_Ground'));
      o._stylePropertyGround  = MO.Class.register(o, new MO.AStyle('_stylePropertyGround', 'Property_Ground'));
      o._framesetMain         = null;
      o._framesetBody         = null;
      o._frameToolBar         = null;
      o._frameBody            = null;
      o._frameProperty        = null;
      o._frameCatalog         = null;
      o._frameWorkspace       = null;
      o._frameStatusBar       = null;
      o._propertyFrames       = null;
      o.onBuilded             = FDsSceneWorkspace_onBuilded;
      o.onSceneLoad           = FDsSceneWorkspace_onSceneLoad;
      o.onCatalogSelected     = FDsSceneWorkspace_onCatalogSelected;
      o.construct             = FDsSceneWorkspace_construct;
      o.findPropertyFrame     = FDsSceneWorkspace_findPropertyFrame;
      o.loadScene             = FDsSceneWorkspace_loadScene;
      o.dispose               = FDsSceneWorkspace_dispose;
      return o;
   }
   MO.FDsSceneWorkspace_onBuilded = function FDsSceneWorkspace_onBuilded(p){
      var o = this;
      o.__base.FDuiWorkspace.onBuilded.call(o, p);
      var f = o._frameToolBar = o.searchControl('toolbarFrame');
      f._hPanel.className = o.styleName('Toolbar_Ground');
      var f = o._frameCatalog = o.searchControl('catalogFrame');
      f._hPanel.className = o.styleName('Catalog_Ground');
      var f = o._frameWorkspace = o.searchControl('spaceFrame');
      f._hPanel.className = o.styleName('Workspace_Ground');
      var f = o._frameProperty = o.searchControl('propertyFrame');
      f._hPanel.className = o.styleName('Property_Ground');
      var f = o._frameStatusBar = o.searchControl('statusFrame');
      f._hPanel.className = o.styleName('Statusbar_Ground');
      var f = o._catalogSplitter = o.searchControl('catalogSpliter');
      f.setAlignCd(EUiAlign.Left);
      f.setSizeHtml(o._frameCatalog._hPanel);
      var f = o._propertySpliter = o.searchControl('propertySpliter');
      f.setAlignCd(EUiAlign.Right);
      f.setSizeHtml(o._frameProperty._hPanel);
      var c = o._toolbar = MO.Class.create(FDsSceneMenuBar);
      c._workspace = o;
      c.buildDefine(p);
      o._frameToolBar.push(c);
      var c = o._catalog = MO.Class.create(FDsSceneCatalog);
      c._workspace = o;
      c.build(p);
      c.addSelectedListener(o, o.onCatalogSelected);
      o._frameCatalog.push(c);
      var f = o._canvasToolbarFrame = o.searchControl('canvasToolbarFrame');
      var c = o._canvasToolbar = MO.Class.create(FDsSceneCanvasToolBar);
      c._workspace = o;
      c.buildDefine(p);
      o._canvasToolbarFrame.push(c);
      var f = o._canvasFrame = o.searchControl('canvasFrame');
      var c = o._canvas = MO.Class.create(FDsSceneCanvas);
      c._workspace = o;
      c._toolbar = o._canvasToolbar;
      c.addLoadListener(o, o.onSceneLoad);
      c._hParent = f._hPanel;
      c._hParent.style.backgroundColor = '#000000';
      c.build(p);
      o._canvasFrame.push(c);
   }
   MO.FDsSceneWorkspace_onSceneLoad = function FDsSceneWorkspace_onSceneLoad(p){
      var o = this;
      var t = o._activeScene = p._activeScene;
      o._catalog.buildScene(t);
   }
   MO.FDsSceneWorkspace_onCatalogSelected = function FDsSceneWorkspace_onCatalogSelected(p, pc){
      var o = this;
      var s = o._activeScene;
      var fs = o._propertyFrames;
      var c = fs.count();
      for(var i = 0; i < c; i++){
         var f = fs.value(i);
         f.hide();
      }
      if(MO.Class.isClass(p, FE3dScene)){
         var f = o.findPropertyFrame(EDsFrame.SceneSpacePropertyFrame);
         f.show();
         f.loadObject(s, p);
      }else if(MO.Class.isClass(p, FG3dTechnique)){
         var f = o.findPropertyFrame(EDsFrame.SceneTechniquePropertyFrame);
         f.show();
         f.loadObject(s, p);
      }else if(MO.Class.isClass(p, FE3dRegion)){
         var f = o.findPropertyFrame(EDsFrame.SceneRegionPropertyFrame);
         f.show();
         f.loadObject(s, p);
      }else if(MO.Class.isClass(p, FE3dCamera)){
         var f = o.findPropertyFrame(EDsFrame.SceneCameraPropertyFrame);
         f.show();
         f.loadObject(s, p);
      }else if(MO.Class.isClass(p, FG3dDirectionalLight)){
         var f = o.findPropertyFrame(EDsFrame.SceneLightPropertyFrame);
         f.show();
         f.loadObject(s, p);
      }else if(p == 'layers'){
         if(pc){
            o._canvas.selectLayers(p);
         }
      }else if(MO.Class.isClass(p, FE3dSceneLayer)){
         if(pc){
            o._canvas.selectLayer(p);
         }
         var f = o.findPropertyFrame(EDsFrame.SceneLayerPropertyFrame);
         f.show();
         f.loadObject(s, p);
      }else if(MO.Class.isClass(p, FE3dSceneDisplay)){
         if(pc){
            o._canvas.selectDisplay(p);
         }
         var f = o.findPropertyFrame(EDsFrame.SceneDisplayPropertyFrame);
         f.show();
         f.loadObject(s, p);
      }else if(MO.Class.isClass(p, FE3dSceneMaterial)){
         if(pc){
            o._canvas.selectMaterial(p);
         }
         var f = o.findPropertyFrame(EDsFrame.SceneMaterialPropertyFrame);
         f.show();
         f.loadObject(s, p);
      }else if(MO.Class.isClass(p, FE3rAnimation)){
         var f = o.findPropertyFrame(EDsFrame.SceneAnimationPropertyFrame);
         f.show();
         f.loadObject(s, p);
      }else if(MO.Class.isClass(p, FE3dRenderable)){
         if(pc){
            o._canvas.selectRenderable(p);
         }
         var f = o.findPropertyFrame(EDsFrame.SceneRenderablePropertyFrame);
         f.show();
         f.loadObject(s, p);
      }else{
         throw new TError('Unknown select object type. (value={1})', p);
      }
   }
   MO.FDsSceneWorkspace_construct = function FDsSceneWorkspace_construct(){
      var o = this;
      o.__base.FDuiWorkspace.construct.call(o);
      o._propertyFrames = new TDictionary();
   }
   MO.FDsSceneWorkspace_findPropertyFrame = function FDsSceneWorkspace_findPropertyFrame(p){
      var o = this;
      var frame = o._propertyFrames.get(p);
      if(!frame){
         frame = MO.Console.find(FDuiFrameConsole).get(o, p, o._frameProperty._hContainer);
         frame._workspace = o;
         o._propertyFrames.set(p, frame);
      }
      return frame;
   }
   MO.FDsSceneWorkspace_loadScene = function FDsSceneWorkspace_loadScene(p){
      var o = this;
      o._sceneCode = p;
      o._canvas.loadScene(p);
   }
   MO.FDsSceneWorkspace_dispose = function FDsSceneWorkspace_dispose(){
      var o = this;
      o.__base.FDuiWorkspace.dispose.call(o);
      o._propertyFrames.dispose();
      o._propertyFrames = null;
   }
}
MO.EEditorFrame = new function EEditorFrame(){
   var o = this;
   o.Test = 'asd.TestFrame';
   return o;
}
MO.EEditorFrameSet = new function EEditorFrameSet(){
   var o = this;
   o.PersistenceFrameSet = 'editor.design.persistence.FrameSet';
   o.ListFrameSet        = 'editor.design.list.FrameSet';
   o.TreeFrameSet        = 'editor.design.tree.FrameSet';
   o.FrameFrameSet       = 'editor.design.frame.FrameSet';
   o.DatasetFrameSet     = 'editor.design.dataset.FrameSet';
   return o;
}
MO.FEditorCanvas = function FEditorCanvas(o){
   o = MO.Class.inherits(this, o, MO.FE3dCanvas);
   o._optionStageProcess = false;
   o._optionResize       = false;
   o._optionMouseCapture = false;
   o._optionAlpha        = true;
   o._optionAntialias    = false;
   o._capturePosition    = null;
   o._cameraPosition     = null;
   o._scaleRate          = 1;
   o._activeStage        = MO.Class.register(o, new MO.AGetter('_activeStage'));
   o._capturePosition    = null;
   o._captureRotation    = null;
   o.construct           = MO.FEditorCanvas_construct;
   o.setPanel            = MO.FEditorCanvas_setPanel;
   o.resize              = MO.FEditorCanvas_resize;
   o.selectStage         = MO.FEditorCanvas_selectStage;
   o.dispose             = MO.FEditorCanvas_dispose;
   return o;
}
MO.FEditorCanvas_construct = function FEditorCanvas_construct(){
   var o = this;
   o.__base.FE3dCanvas.construct.call(o);
   o._rotation = new MO.SVector3();
   o._capturePosition = new MO.SPoint2();
   o._captureRotation = new MO.SVector3();
   o._logicSize = new MO.SSize2(1920, 1080);
   o._cameraPosition = new MO.SPoint3();
}
MO.FEditorCanvas_setPanel = function FEditorCanvas_setPanel(hPanel){
   var o = this;
   o._hPanel = hPanel;
   hPanel.appendChild(o._hCanvas);
}
MO.FEditorCanvas_resize = function FEditorCanvas_resize(width, height){
   var o = this;
   o.__base.FE3dCanvas.resize.call(o, width, height);
   var context = o._graphicContext;
   var size = context.size();
   var stage = o._activeStage;
   if(stage){
      var projection = stage.camera().projection();
      projection.size().set(size.width, size.height);
      projection.update();
   }
}
MO.FEditorCanvas_selectStage = function FEditorCanvas_selectStage(stage){
   var o = this;
   if(stage){
      stage.linkGraphicContext(o);
      stage.region().linkGraphicContext(o);
      stage.selectTechnique(o, MO.FE3dGeneralTechnique);
      var camera = stage.region().camera();
      var projection = camera.projection();
      projection.setAngle(80);
      projection.size().set(o._hCanvas.offsetWidth, o._hCanvas.offsetHeight);
      projection.update();
      camera.position().set(0, 0, -10);
      camera.lookAt(0, 0, 0);
      camera.update();
   }
   o._activeStage = stage;
}
MO.FEditorCanvas_dispose = function FEditorCanvas_dispose(){
   var o = this;
   o._rotation = MO.Lang.Object.dispose(o._rotation);
   o._capturePosition = MO.Lang.Object.dispose(o._capturePosition);
   o._captureRotation = MO.Lang.Object.dispose(o._captureRotation);
   o.__base.FE3dCanvas.dispose.call(o);
}
MO.FEditorDesktop = function FEditorDesktop(o){
   o = MO.Class.inherits(this, o, MO.FDesktop);
   o._canvas3d              = MO.Class.register(o, new MO.AGetter('_canvas3d'));
   o._canvas2d              = MO.Class.register(o, new MO.AGetter('_canvas2d'));
   o.onOperationResize      = MO.FEditorDesktop_onOperationResize;
   o.onOperationOrientation = MO.FEditorDesktop_onOperationOrientation;
   o.construct              = MO.FEditorDesktop_construct;
   o.build                  = MO.FEditorDesktop_build;
   o.resize                 = MO.FEditorDesktop_resize;
   o.dispose                = MO.FEditorDesktop_dispose;
   return o;
}
MO.FEditorDesktop_onOperationResize = function FEditorDesktop_onOperationResize(event){
   var o = this;
   o.__base.FDesktop.onOperationResize.call(o, event);
   o.resize();
}
MO.FEditorDesktop_onOperationOrientation = function FEditorDesktop_onOperationOrientation(){
   var o = this;
   o.__base.FDesktop.onOperationOrientation.call(o, event);
   o.resize();
}
MO.FEditorDesktop_construct = function FEditorDesktop_construct(){
   var o = this;
   o.__base.FDesktop.construct.call(o);
}
MO.FEditorDesktop_build = function FEditorDesktop_build(hPanel){
   var o = this;
   o.__base.FDesktop.build.call(o, hPanel);
   var canvas2d = o._canvas2d = MO.Class.create(MO.FE2dCanvas);
   canvas2d.setDesktop(o);
   canvas2d.build(hPanel);
   canvas2d.setPanel(hPanel);
   canvas2d._hCanvas.style.position = 'absolute';
   o.canvasRegister(canvas2d);
   MO.RE3dEngine.setup();
}
MO.FEditorDesktop_resize = function FEditorDesktop_resize(targetWidth, targetHeight){
   var o = this;
   var width = (targetWidth != null) ? targetWidth : window.innerWidth;
   var height = (targetHeight != null) ? targetHeight : window.innerHeight;
   if(o._screenSize.equalsData(width, height)){
      return;
   }
   o._screenSize.set(width, height);
   var pixelRatio = MO.Browser.capability().pixelRatio;
   MO.Logger.info(o, 'Change screen size. (size={1}x{2}, pixel_ratio={3})', width, height, pixelRatio);
   width *= pixelRatio;
   height *= pixelRatio;
   var widthRate = 1;
   var heightRate = 1;
   var logicSize = o._logicSize;
   if(MO.Browser.isOrientationHorizontal()){
      widthRate = width / logicSize.width;
      heightRate = height / logicSize.height;
      o._calculateSize.set(logicSize.width, logicSize.height);
   }else{
      widthRate = width / logicSize.height;
      heightRate = height / logicSize.width;
      o._calculateSize.set(logicSize.height, logicSize.width);
   }
   var sizeRate = o._sizeRate = Math.min(widthRate, heightRate);
   o._logicRate.set(widthRate, heightRate);
   if(widthRate > heightRate){
      o._calculateRate.set(widthRate / sizeRate, 1);
   }else if(widthRate < heightRate){
      o._calculateRate.set(1, heightRate / sizeRate);
   }else{
      o._calculateRate.set(1, 1);
   }
   o._canvas3d.resize(width, height);
   var canvas2d = o._canvas2d;
   canvas2d.resize(width, height);
   canvas2d.graphicContext().setScale(sizeRate, sizeRate);
}
MO.FEditorDesktop_dispose = function FEditorDesktop_dispose(){
   var o = this;
   o._canvas3d = MO.Lang.Object.dispose(o._canvas3d);
   o._canvas2d = MO.Lang.Object.dispose(o._canvas2d);
   o.__base.FDesktop.dispose.call(o);
}
MO.FEditorFrameSet = function FEditorFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FDuiFrameSet);
   o._styleToolBarGround   = MO.Class.register(o, new MO.AStyle('_styleToolBarGround', 'ToolBar_Ground'));
   o._styleCatalogContent  = MO.Class.register(o, new MO.AStyle('_styleCatalogContent', 'Catalog_Content'));
   o._styleCanvasContent   = MO.Class.register(o, new MO.AStyle('_styleCanvasContent', 'Canvas_Content'));
   o._stylePropertyContent = MO.Class.register(o, new MO.AStyle('_stylePropertyContent', 'Property_Content'));
   o._activeGuid           = null;
   o._activeCode           = null;
   o._activeSpace          = null;
   o._propertyFrames       = MO.Class.register(o, new MO.AGetter('_propertyFrames'));
   o._activePropertyFrame  = MO.Class.register(o, new MO.AGetter('_activePropertyFrame'));
   o.construct             = MO.FEditorFrameSet_construct;
   o.findPropertyFrame     = MO.FEditorFrameSet_findPropertyFrame;
   o.hidePropertyFrames    = MO.FEditorFrameSet_hidePropertyFrames;
   o.selectPropertyFrame   = MO.FEditorFrameSet_selectPropertyFrame;
   o.dispose               = MO.FEditorFrameSet_dispose;
   return o;
}
MO.FEditorFrameSet_construct = function FEditorFrameSet_construct(){
   var o = this;
   o.__base.FDuiFrameSet.construct.call(o);
   o._propertyFrames = new MO.TDictionary();
}
MO.FEditorFrameSet_findPropertyFrame = function FEditorFrameSet_findPropertyFrame(code){
   var o = this;
   var frame = o._propertyFrames.get(code);
   if(!frame){
      frame = MO.Console.find(MO.FDuiFrameConsole).get(o, code, o._framePropertyContent._hContainer);
      frame._frameSet = o;
      o._propertyFrames.set(code, frame);
   }
   return frame;
}
MO.FEditorFrameSet_hidePropertyFrames = function FEditorFrameSet_hidePropertyFrames(){
   var o = this;
   var frames = o._propertyFrames;
   var count = frames.count();
   for(var i = 0; i < count; i++){
      var frame = frames.at(i);
      frame.hide();
   }
}
MO.FEditorFrameSet_selectPropertyFrame = function FEditorFrameSet_selectPropertyFrame(frameName){
   var o = this;
   o.hidePropertyFrames();
   var frame = null;
   if(frameName){
      frame = o.findPropertyFrame(frameName);
      frame.show();
   }
   o._activePropertyFrame = frame;
   return frame;
}
MO.FEditorFrameSet_dispose = function FEditorFrameSet_dispose(){
   var o = this;
   o._activeSpace = null;
   o._propertyFrames = MO.Lang.Object.dispose(o._propertyFrames, true);
   o.__base.FDuiFrameSet.dispose.call(o);
}
MO.FEditorGuiManage = function FEditorGuiManage(o){
   o = MO.Class.inherits(this, o, MO.FGuiCanvasManage);
   o.construct = MO.FEditorGuiManage_construct;
   o.dispose   = MO.FEditorGuiManage_dispose;
   return o;
}
MO.FEditorGuiManage_construct = function FEditorGuiManage_construct(){
   var o = this;
   o.__base.FGuiCanvasManage.construct.call(o);
}
MO.FEditorGuiManage_dispose = function FEditorGuiManage_dispose(){
   var o = this;
   o.__base.FGuiCanvasManage.dispose.call(o);
}
MO.FEditorDsCatalogContent = function FEditorDsCatalogContent(o){
   o = MO.Class.inherits(this, o, MO.FDuiDataTreeView);
   o._defineCode    = null;
   o._serviceDefine = 'content.define.tree';
   o._containerName = MO.Class.register(o, new MO.AGetter('_containerName'));
   o._itemName      = MO.Class.register(o, new MO.AGetter('_itemName'));
   o.onDefineLoad   = MO.FEditorDsCatalogContent_onDefineLoad;
   o.onNodeClick    = MO.FEditorDsCatalogContent_onNodeClick;
   o.construct      = MO.FEditorDsCatalogContent_construct;
   o.dispose        = MO.FEditorDsCatalogContent_dispose;
   return o;
}
MO.FEditorDsCatalogContent_onDefineLoad = function FEditorDsCatalogContent_onDefineLoad(event){
   var o = this;
   o.__base.FDuiDataTreeView.onDefineLoad.call(o, event);
   var xtree = event.xtree;
   var serviceCode = xtree.get('service');
   if(serviceCode){
      o.loadService(serviceCode);
   }
}
MO.FEditorDsCatalogContent_onNodeClick = function FEditorDsCatalogContent_onNodeClick(event){
   var o = this;
   var node = event.node;
   var parent = node;
   while(MO.Class.isClass(parent, MO.FDuiTreeNode)){
      if(parent.typeGroup() == MO.EDuiTreeNodeGroup.Container){
         break;
      }
      parent = parent.parent();
   }
   var containerName = o._containerName = parent.code();
   o._itemName = null;
   var typeGroup = node.typeGroup();
   var frameName = node.type().get('property_frame');
   if(typeGroup == MO.EDuiTreeNodeGroup.Container){
      var frame = o._frameSet.selectObject(frameName);
      frame.psMode(MO.EUiMode.Update);
      frame.dataModify();
      frame.doLoad(typeGroup, containerName);
   }else if(typeGroup == MO.EDuiTreeNodeGroup.Item){
      var frame = o._frameSet.selectObject(frameName);
      frame.psMode(MO.EUiMode.Update);
      frame.dataModify();
      var itemName = o._itemName = node.guid();
      frame.doLoad(typeGroup, containerName, itemName);
   }
}
MO.FEditorDsCatalogContent_construct = function FEditorDsCatalogContent_construct(){
   var o = this;
   o.__base.FDuiDataTreeView.construct.call(o);
   o.loadDefine(o._defineCode);
}
MO.FEditorDsCatalogContent_dispose = function FEditorDsCatalogContent_dispose(){
   var o = this;
   o.__base.FDuiDataTreeView.dispose.call(o);
}
MO.FEditorDsCatalogToolBar = function FEditorDsCatalogToolBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolBar);
   o._listFrameName = null;
   o.onSearchClick  = MO.FEditorDsCatalogToolBar_onSearchClick;
   o.onRefreshClick = MO.FEditorDsCatalogToolBar_onRefreshClick;
   o.onListClick    = MO.FEditorDsCatalogToolBar_onListClick;
   o.onBuilded      = MO.FEditorDsCatalogToolBar_onBuilded;
   o.construct      = MO.FEditorDsCatalogToolBar_construct;
   o.dispose        = MO.FEditorDsCatalogToolBar_dispose;
   return o;
}
MO.FEditorDsCatalogToolBar_onSearchClick = function FEditorDsCatalogToolBar_onSearchClick(event){
}
MO.FEditorDsCatalogToolBar_onRefreshClick = function FEditorDsCatalogToolBar_onRefreshClick(event){
   var o = this;
   var catalog = o._frameSet._catalogContent;
   catalog.reloadNode();
}
MO.FEditorDsCatalogToolBar_onListClick = function FEditorDsCatalogToolBar_onListClick(event){
   var o = this;
   o._frameSet.selectObject(o._listFrameName);
}
MO.FEditorDsCatalogToolBar_onBuilded = function FEditorDsCatalogToolBar_onBuilded(p){
   var o = this;
   o.__base.FDuiToolBar.onBuilded.call(o, p);
   o._controlSearch.addClickListener(o, o.onSearchClick);
   o._controlRefresh.addClickListener(o, o.onRefreshClick);
   o._controlList.addClickListener(o, o.onListClick);
}
MO.FEditorDsCatalogToolBar_construct = function FEditorDsCatalogToolBar_construct(){
   var o = this;
   o.__base.FDuiToolBar.construct.call(o);
}
MO.FEditorDsCatalogToolBar_dispose = function FEditorDsCatalogToolBar_dispose(){
   var o = this;
   o.__base.FDuiToolBar.dispose.call(o);
}
MO.FEditorDsFrameSet = function FEditorDsFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FEditorFrameSet);
   o._styleTitleGround     = MO.Class.register(o, new MO.AStyle('_styleTitleGround', 'Title_Ground'));
   o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
   o._styleCatalogContent  = MO.Class.register(o, new MO.AStyle('_styleCatalogContent', 'Catalog_Content'));
   o._styleSpaceContent    = MO.Class.register(o, new MO.AStyle('_styleSpaceContent', 'Space_Content'));
   o._stylePropertyContent = MO.Class.register(o, new MO.AStyle('_stylePropertyContent', 'Property_Content'));
   o._frameCatalog         = null;
   o._frameCatalogToolbar  = null;
   o._frameCatalogContent  = null;
   o._frameSpace           = null;
   o._frameSpaceToolbar    = null;
   o._frameSpaceContent    = null;
   o._frameProperty        = null;
   o._framePropertyToolbar = null;
   o._framePropertyContent = null;
   o.construct             = MO.FEditorDsFrameSet_construct;
   o.setFrameTitle         = MO.FEditorDsFrameSet_setFrameTitle;
   o.selectObject          = MO.FEditorDsFrameSet_selectObject;
   o.load                  = MO.FEditorDsFrameSet_load;
   o.dispose               = MO.FEditorDsFrameSet_dispose;
   return o;
}
MO.FEditorDsFrameSet_construct = function FEditorDsFrameSet_construct(){
   var o = this;
   o.__base.FEditorFrameSet.construct.call(o);
}
MO.FEditorDsFrameSet_setFrameTitle = function FEditorDsFrameSet_setFrameTitle(title){
   var o = this;
   var hTitlePanel = o._framePropertyTitle._hPanel;
   MO.Window.Html.textSet(hTitlePanel, title);
}
MO.FEditorDsFrameSet_selectObject = function FEditorDsFrameSet_selectObject(frameName){
   var o = this;
   var frame = o.selectPropertyFrame(frameName);
   o.setFrameTitle(frame.label());
   var hToolBarPanel = o._framePropertyToolBar._hPanel;
   MO.Window.Html.clear(hToolBarPanel);
   var toolBar = frame.findControl('toolBar');
   if(toolBar){
      toolBar.setPanel(hToolBarPanel);
   }
   return frame;
}
MO.FEditorDsFrameSet_load = function FEditorDsFrameSet_load(){
   var o = this;
}
MO.FEditorDsFrameSet_dispose = function FEditorDsFrameSet_dispose(){
   var o = this;
   o.__base.FEditorFrameSet.dispose.call(o);
}
MO.FEditorDsPropertyForm = function FEditorDsPropertyForm(o){
   o = MO.Class.inherits(this, o, MO.FDuiForm);
   o._containerName = MO.Class.register(o, new MO.AGetSet('_containerName'));
   o._itemName      = MO.Class.register(o, new MO.AGetSet('_itemName'));
   o.onButtonClick  = MO.FEditorDsPropertyForm_onButtonClick;
   o.onBuilded      = MO.FEditorDsPropertyForm_onBuilded;
   o.onDataChanged  = MO.FEditorDsPropertyForm_onDataChanged;
   o.onDataLoad     = MO.FEditorDsPropertyForm_onDataLoad;
   o.onDataSave     = MO.FEditorDsPropertyForm_onDataSave;
   o.onDataDelete   = MO.FEditorDsPropertyForm_onDataDelete;
   o.construct      = MO.FEditorDsPropertyForm_construct;
   o.doPrepare      = MO.FEditorDsPropertyForm_doPrepare;
   o.doLoad         = MO.FEditorDsPropertyForm_doLoad;
   o.doSave         = MO.FEditorDsPropertyForm_doSave;
   o.doDelete       = MO.FEditorDsPropertyForm_doDelete;
   o.dispose        = MO.FEditorDsPropertyForm_dispose;
   return o;
}
MO.FEditorDsPropertyForm_onButtonClick = function FEditorDsPropertyForm_onButtonClick(event){
   var o  = this;
   var button = event.sender;
   var attributes = button.attributes();
   if(attributes){
      var action = attributes.get('action');
      switch(action){
         case 'insert':
            o.doPrepare(attributes);
            break;
         case 'save':
            o.doSave();
            break;
         case 'delete':
            o.doDelete();
            break;
         case 'sort':
            o.doSort();
            break;
      }
   }
}
MO.FEditorDsPropertyForm_onBuilded = function FEditorDsPropertyForm_onBuilded(event){
   var o = this;
   o.__base.FDuiForm.onBuilded.call(o, event);
   var buttons = new MO.TObjects();
   o.searchComponents(buttons, MO.MUiToolButton);
   o.searchComponents(buttons, MO.MUiMenuButton);
   var count = buttons.count();
   for(var i = 0; i < count; i++){
      var button = buttons.at(i);
      button.addClickListener(o, o.onButtonClick);
   }
}
MO.FEditorDsPropertyForm_onDataChanged = function FEditorDsPropertyForm_onDataChanged(event){
   var o  = this;
   o.__base.FDuiForm.onDataChanged.call(o, event);
}
MO.FEditorDsPropertyForm_onDataLoad = function FEditorDsPropertyForm_onDataLoad(event){
   var o = this;
   var xcontent = event.content;
   var xunit = xcontent.nodes().first();
   o.loadUnit(xunit);
}
MO.FEditorDsPropertyForm_onDataSave = function FEditorDsPropertyForm_onDataSave(event){
   var o = this;
   var dataActionCd = o._dataActionCd;
   switch(dataActionCd){
      case MO.EUiDataAction.Insert:
         if(o._logicGroup == 'container'){
            o._frameSet._catalogContent.reload();
         }else{
            o._frameSet._catalogContent.reloadNode();
         }
         break;
      case MO.EUiDataAction.Update:
         break;
      case MO.EUiDataAction.Delete:
         if(o._logicGroup == 'container'){
            o._frameSet._catalogContent.reload();
         }else{
            o._frameSet._catalogContent.reloadParentNode();
         }
         break;
      default:
         throw new MO.TError(o, 'Invalid data action.');
   }
   MO.Console.find(MO.FDuiDesktopConsole).hide();
}
MO.FEditorDsPropertyForm_onDataDelete = function FEditorDsPropertyForm_onDataDelete(event){
   var o = this;
   MO.Console.find(MO.FDuiDesktopConsole).hide();
}
MO.FEditorDsPropertyForm_construct = function FEditorDsPropertyForm_construct(){
   var o = this;
   o.__base.FDuiForm.construct.call(o);
}
MO.FEditorDsPropertyForm_doPrepare = function FEditorDsPropertyForm_doPrepare(parameters){
   var o = this;
   var logicGroup = o._logicGroup = parameters.get('logic_group');
   var containerName = null;
   var itemName = null;
   if(logicGroup != 'container'){
      var catalog = o._frameSet._catalogContent;
      containerName = catalog.containerName();
      itemName = catalog.itemName();
   }
   var frameName = parameters.get('frame_name');
   var frame = o._frameSet.selectObject(frameName);
   frame.dataPrepare();
   var control = frame.searchComponent('componentType');
   var componentType = parameters.get('component_type');
   control.set(componentType);
   frame.setContainerName(containerName);
   frame.setItemName(itemName);
}
MO.FEditorDsPropertyForm_doLoad = function FEditorDsPropertyForm_doLoad(typeGroup, containerName, itemName){
   var o = this;
   o._containerName = containerName;
   o._itemName = itemName;
   o._logicGroup = typeGroup;
   var url = MO.Lang.String.format('/{1}.ws?action=query&group={2}&container={3}&item={4}', o._logicService, typeGroup, o._containerName, o._itemName);
   var connection = MO.Console.find(MO.FXmlConsole).send(url);
   connection.addLoadListener(o, o.onDataLoad);
}
MO.FEditorDsPropertyForm_doSave = function FEditorDsPropertyForm_doSave(){
   var o = this;
   MO.Console.find(MO.FDuiDesktopConsole).showProgress();
   var xdocument = new MO.TXmlDocument();
   var xroot = xdocument.root();
   o.saveUnit(xroot.create('Content'));
   var url = MO.Lang.String.format('/{1}.ws?action={2}&group={3}&container={4}&item={5}', o._logicService, o._dataActionCd, o._logicGroup, o._containerName, o._itemName);
   var connection = MO.Console.find(MO.FXmlConsole).sendAsync(url, xdocument);
   connection.addLoadListener(o, o.onDataSave);
}
MO.FEditorDsPropertyForm_doDelete = function FEditorDsPropertyForm_doDelete(){
   var o = this;
   o._dataActionCd = MO.EUiDataAction.Delete;
   o.doSave();
}
MO.FEditorDsPropertyForm_dispose = function FEditorDsPropertyForm_dispose(){
   var o = this;
   o.__base.FDuiForm.dispose.call(o);
}
MO.FEditorDsTabBar = function FEditorDsTabBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiTabBar);
   o._frameName            = 'editor.design.TabBar';
   o._resourceTypeCd       = 'private';
   o._controlPrivateButton = null;
   o._controlTeamButton    = null;
   o._controlShareButton   = null;
   o.onBuilded             = MO.FEditorDsTabBar_onBuilded;
   o.onButtonClick         = MO.FEditorDsTabBar_onButtonClick;
   o.construct             = MO.FEditorDsTabBar_construct;
   o.dispose               = MO.FEditorDsTabBar_dispose;
   return o;
}
MO.FEditorDsTabBar_onBuilded = function FEditorDsTabBar_onBuilded(p){
   var o = this;
   o.__base.FDuiTabBar.onBuilded.call(o, p);
   o._controlPersistence.addClickListener(o, o.onButtonClick);
   o._controlList.addClickListener(o, o.onButtonClick);
   o._controlTree.addClickListener(o, o.onButtonClick);
   o._controlFrame.addClickListener(o, o.onButtonClick);
}
MO.FEditorDsTabBar_onButtonClick = function FEditorDsTabBar_onButtonClick(event){
   var o = this;
   var workspace = o._workspace;
   var sender = event.sender;
   var name = sender.name();
   if(name == 'persistence'){
      workspace.selectFrameSet(MO.EEditorFrameSet.PersistenceFrameSet);
   }else if(name == 'list'){
      workspace.selectFrameSet(MO.EEditorFrameSet.ListFrameSet);
   }else if(name == 'tree'){
      workspace.selectFrameSet(MO.EEditorFrameSet.TreeFrameSet);
   }else if(name == 'frame'){
      workspace.selectFrameSet(MO.EEditorFrameSet.FrameFrameSet);
   }else{
      alert('功能未开启，请以后关注。');
   }
}
MO.FEditorDsTabBar_construct = function FEditorDsTabBar_construct(){
   var o = this;
   o.__base.FDuiTabBar.construct.call(o);
}
MO.FEditorDsTabBar_dispose = function FEditorDsTabBar_dispose(){
   var o = this;
   o.__base.FDuiTabBar.dispose.call(o);
}
MO.FEditorDsWorkspace = function FEditorDsWorkspace(o){
   o = MO.Class.inherits(this, o, MO.FDuiWorkspace, MO.MUiStorage);
   o._frameName          = 'editor.design.Workspace';
   o._storageCode        = o._frameName;
   o._styleTitlePanel    = MO.Class.register(o, new MO.AStyle('_styleTitlePanel', 'Title_Panel'));
   o._styleTitleLogo     = MO.Class.register(o, new MO.AStyle('_styleTitleLogo', 'Title_Logo'));
   o._styleTitleLabel    = MO.Class.register(o, new MO.AStyle('_styleTitleLabel', 'Title_Label'));
   o._styleMenuBarGround = MO.Class.register(o, new MO.AStyle('_styleMenuBarGround', 'MenuBar_Ground'));
   o._styleModuleGround  = MO.Class.register(o, new MO.AStyle('_styleModuleGround', 'Module_Ground'));
   o._styleSpaceGround   = MO.Class.register(o, new MO.AStyle('_styleSpaceGround', 'Space_Ground'));
   o._activeFrameSetCode = null;
   o._activeProjectGuid  = null;
   o._frameToolBar       = null;
   o._frameStatusBar     = null;
   o._activeFrameSet     = null;
   o._frameSets          = null;
   o.onBuilded           = MO.FEditorDsWorkspace_onBuilded;
   o.onSliderButtonClick = MO.FEditorDsWorkspace_onSliderButtonClick;
   o.construct           = MO.FEditorDsWorkspace_construct;
   o.selectFrameSet      = MO.FEditorDsWorkspace_selectFrameSet;
   o.load                = MO.FEditorDsWorkspace_load;
   o.dispose             = MO.FEditorDsWorkspace_dispose;
   return o;
}
MO.FEditorDsWorkspace_onBuilded = function FEditorDsWorkspace_onBuilded(event){
   var o = this;
   o.__base.FDuiWorkspace.onBuilded.call(o, event);
   o._frameMenuBar._hPanel.className = o.styleName('MenuBar_Ground');
   o._frameModule._hPanel.className = o.styleName('Module_Ground');
   o._frameSpace._hPanel.className = o.styleName('Space_Ground');
   o._controlPersistenceButton.addClickListener(o, o.onSliderButtonClick);
   o._controlListButton.addClickListener(o, o.onSliderButtonClick);
   o._controlTreeButton.addClickListener(o, o.onSliderButtonClick);
   o._controlFrameButton.addClickListener(o, o.onSliderButtonClick);
   o._controlDatasetButton.addClickListener(o, o.onSliderButtonClick);
   var hTitleForm = MO.Window.Builder.appendTable(o._frameMenuBar._hPanel, o.styleName('Title_Panel'));
   var hTitleLine = MO.Window.Builder.appendTableRow(hTitleForm);
   var hTitleCell = MO.Window.Builder.appendTableCell(hTitleLine, o.styleName('Title_Logo'));
   hTitleCell.align = 'center';
   hTitleCell.vAlign = 'middle';
   MO.Window.Builder.appendIcon(hTitleCell, null, 'editor.design.logo|png');
   var hTitleCell = MO.Window.Builder.appendTableCell(hTitleLine, o.styleName('Title_Label'));
   MO.Window.Html.textSet(hTitleCell, '开发设计平台');
   return;
   var hTable = MO.Window.Builder.createTable(event);
   hTable.width = '100%';
   var hRow = MO.Window.Builder.appendTableRow(hTable);
   o._hMenuPanel = MO.Window.Builder.appendTableCell(hRow);
   var control = o._tabBar = MO.Class.create(MO.FEditorDsTabBar);
   control._workspace = o;
   control.buildDefine(event);
   var hCell = MO.Window.Builder.appendTableCell(hRow);
   hCell.width = '240px';
   hCell.align = 'right';
   hCell.vAlign = 'bottom';
   hCell.appendChild(control._hPanel);
   o._frameMenuBar._hPanel.appendChild(hTable);
}
MO.FEditorDsWorkspace_onSliderButtonClick = function FEditorDsWorkspace_onSliderButtonClick(event){
   var o = this;
   var button = event.sender;
   var name = button.name();
   switch(name){
      case 'persistenceButton':
         o.selectFrameSet(MO.EEditorFrameSet.PersistenceFrameSet);
         break;
      case 'listButton':
         o.selectFrameSet(MO.EEditorFrameSet.ListFrameSet);
         break;
      case 'treeButton':
         o.selectFrameSet(MO.EEditorFrameSet.TreeFrameSet);
         break;
      case 'frameButton':
         o.selectFrameSet(MO.EEditorFrameSet.FrameFrameSet);
         break;
      case 'datasetButton':
         o.selectFrameSet(MO.EEditorFrameSet.DatasetFrameSet);
         break;
      default:
         throw new TError(o, 'Invalid click.');
   }
}
MO.FEditorDsWorkspace_construct = function FEditorDsWorkspace_construct(){
   var o = this;
   o.__base.FDuiWorkspace.construct.call(o);
   o._frameSets = new MO.TDictionary();
}
MO.FEditorDsWorkspace_selectFrameSet = function FEditorDsWorkspace_selectFrameSet(name, guid){
   var o = this;
   var frameSet = o._frameSets.get(name);
   if(!frameSet){
      if(name == MO.EEditorFrameSet.PersistenceFrameSet){
         frameSet = MO.Console.find(MO.FDuiFrameConsole).findByClass(o, MO.FEditorDsPersistenceFrameSet);
      }else if(name == MO.EEditorFrameSet.ListFrameSet){
         frameSet = MO.Console.find(MO.FDuiFrameConsole).findByClass(o, MO.FEditorDsListFrameSet);
      }else if(name == MO.EEditorFrameSet.TreeFrameSet){
         frameSet = MO.Console.find(MO.FDuiFrameConsole).findByClass(o, MO.FEditorDsTreeFrameSet);
      }else if(name == MO.EEditorFrameSet.FrameFrameSet){
         frameSet = MO.Console.find(MO.FDuiFrameConsole).findByClass(o, MO.FEditorDsFrameFrameSet);
      }else if(name == MO.EEditorFrameSet.DatasetFrameSet){
         frameSet = MO.Console.find(MO.FDuiFrameConsole).findByClass(o, MO.FEditorDsDatasetFrameSet);
      }else{
         throw new MO.TError('Unknown frameset. (name={1})', name);
      }
      frameSet._workspace = o;
      o._frameSets.set(name, frameSet);
   }
   var activeFrameSet = o._activeFrameSet;
   if(activeFrameSet != frameSet){
      if(activeFrameSet){
         o._frameSpace.remove(activeFrameSet);
      }
      o._frameSpace.push(frameSet);
      frameSet.psResize();
   }
   o._activeFrameSet = frameSet;
   switch(name){
      case MO.EEditorFrameSet.PersistenceFrameSet:
         frameSet.load();
         break;
      case MO.EEditorFrameSet.ListFrameSet:
         frameSet.load();
         break;
      case MO.EEditorFrameSet.TreeFrameSet:
         frameSet.load();
         break;
      case MO.EEditorFrameSet.FrameFrameSet:
         frameSet.load();
         break;
      case MO.EEditorFrameSet.DatasetFrameSet:
         frameSet.load();
         break;
      default:
         throw new TError('Unknown frameset. (name={1})', name);
   }
   o.storageSet('frameset_code', name)
   o.storageSet('frameset_guid', guid)
   o.storageUpdate();
   return frameSet;
}
MO.FEditorDsWorkspace_load = function FEditorDsWorkspace_load(){
   var o = this;
   var code = o._activeFrameSetCode = o.storageGet('frameset_code', MO.EEditorFrameSet.SolutionFrameSet);
   var guid = o._activeFrameSetGuid = o.storageGet('frameset_guid');
   var button = null;
   if(code == MO.EEditorFrameSet.PersistenceFrameSet){
      o.selectFrameSet(MO.EEditorFrameSet.PersistenceFrameSet);
   }else if(code == MO.EEditorFrameSet.ListFrameSet){
      o.selectFrameSet(MO.EEditorFrameSet.ListFrameSet);
   }else if(code == MO.EEditorFrameSet.TreeFrameSet){
      o.selectFrameSet(MO.EEditorFrameSet.TreeFrameSet);
   }else if(code == MO.EEditorFrameSet.FrameFrameSet){
      o.selectFrameSet(MO.EEditorFrameSet.FrameFrameSet);
   }else if(code == MO.EEditorFrameSet.DatasetFrameSet){
      o.selectFrameSet(MO.EEditorFrameSet.DatasetFrameSet);
   }else{
   }
}
MO.FEditorDsWorkspace_dispose = function FEditorDsWorkspace_dispose(){
   var o = this;
   o._frameSets = MO.Lang.Object.dispose(o._frameSets, true);
   o.__base.FDuiWorkspace.dispose.call(o);
}
MO.FEditorFrameDefineConsole = function FEditorFrameDefineConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd       = MO.EScope.Global;
   o._service       = 'editor.design.frame';
   o._defines       = null;
   o.lsnsLoaded     = null;
   o.construct      = MO.FEditorFrameDefineConsole_construct;
   o.load           = MO.FEditorFrameDefineConsole_load;
   o.events         = null;
   o.formId         = 0;
   o.createFromName = MO.FEditorFrameDefineConsole_createFromName;
   o.loadNode       = MO.FEditorFrameDefineConsole_loadNode;
   o.loadService    = MO.FEditorFrameDefineConsole_loadService;
   o.nextFormId     = MO.FEditorFrameDefineConsole_nextFormId;
   o.get            = MO.FEditorFrameDefineConsole_get;
   o.find           = MO.FEditorFrameDefineConsole_find;
   o.getLov         = MO.FEditorFrameDefineConsole_getLov;
   o.findLov        = MO.FEditorFrameDefineConsole_findLov;
   o.getEvents      = MO.FEditorFrameDefineConsole_getEvents;
   return o;
}
MO.FEditorFrameDefineConsole_construct = function FEditorFrameDefineConsole_construct(){
   var o = this;
   o._defines = new MO.TDictionary();
   o.lsnsLoaded = new MO.TListeners();
}
MO.FEditorFrameDefineConsole_load = function FEditorFrameDefineConsole_load(name){
   var o = this;
   var defines = o._defines;
   var xconfig = defines.get(name);
   if(xconfig){
      return xconfig;
   }
   var xdocument = new MO.TXmlDocument();
   var xroot = xdocument.root();
   xroot.set('action', 'query');
   var xframe = xroot.create('Frame');
   xframe.set('name', name);
   var url = MO.RDuiService.url(o._service);
   var xresult = MO.Console.find(MO.FXmlConsole).sendSync(url, xdocument);
   var xframes = xresult.nodes();
   var count = xframes.count();
   for(var i = 0; i < count; i++){
      var xframe = xframes.at(i);
      var frameName = xframe.get('name');
      defines.set(frameName, xframe);
   }
   var xframe = defines.get(name);
   if(!xframe){
      throw new MO.TError(o, 'Unknown frame. (name={1])', name);
   }
   return xframe;
}
MO.FEditorFrameDefineConsole_createFromName = function FEditorFrameDefineConsole_createFromName(name, type){
   var o = this;
   var doc = o.loadService(name, type);
   o.loadNode(doc);
   if(MO.EForm.Lov == type){
      return o.getLov(name);
   }else{
      return o.get(name);
   }
}
MO.FEditorFrameDefineConsole_loadNode = function FEditorFrameDefineConsole_loadNode(x){
   var o = this;
   var nns = x.root();
   if(nns.hasNode()){
      var nodes = nns.nodes;
      var ct = nodes.count;
      for(var n = 0; n < ct; n++){
         var node = nodes.get(n);
         var fn = node.get('name');
         var tp = node.get('type');
         if(node.hasNode()){
            var nfds = node.nodes;
            for(var k = 0; k < nfds.count; k++){
               var dd = nfds.get(k);
               if(dd.isName('Define')){
                  if(dd.hasNode()){
                     var fds = dd.nodes;
                     for(var m = 0; m < fds.count; m++){
                        var nd = fds.get(m);
                        var mp = o._defines.get(tp);
                        mp.set(fn, nd);
                     }
                  }
               }else if(dd.isName('Events')){
                  o.events.set(fn, dd);
               }
            }
         }
      }
   }
}
MO.FEditorFrameDefineConsole_loadService = function FEditorFrameDefineConsole_loadService(n, t){
   var o = this;
   if(!t){
      t = MO.EForm.Form;
   }
   var doc = new MO.TXmlDocument();
   var root = doc.root();
   root.set('action', 'loadDefine');
   var f = root.create('WebForm');
   f.set('name', n);
   f.set('type', t);
   var url = MO.RDuiService.url('logic.webform');
   var doc = MO.Console.find(MO.FXmlConsole).send(url, doc);
   var r = doc.root();
   if(!MO.Console.find(MO.FMessageConsole).checkResult(new TMessageArg(r))){
      return null;
   }
   return doc;
}
MO.FEditorFrameDefineConsole_nextFormId = function FEditorFrameDefineConsole_nextFormId(){
   return ++this.formId;
}
MO.FEditorFrameDefineConsole_get = function FEditorFrameDefineConsole_get(n){
   return this._defines.get(EForm.Form).get(n);
}
MO.FEditorFrameDefineConsole_find = function FEditorFrameDefineConsole_find(n, t){
   var o = this;
   if(EForm.Lov == t){
      return o.findLov(n);
   }
   var fc = o.get(n);
   if(MO.Class.isMode(MO.ERun.Debug)){
      MO.Memory.free(fc);
      fc = null;
      o._defines.get(EForm.Form).set(n, null);
   }
   if(!fc){
      fc = o.createFromName(n);
   }
   return fc;
}
MO.FEditorFrameDefineConsole_getLov = function FEditorFrameDefineConsole_getLov(n){
   return this._defines.get(EForm.Lov).get(n);
}
MO.FEditorFrameDefineConsole_findLov = function FEditorFrameDefineConsole_findLov(n){
   var o = this;
   var fc = o.getLov(n);
   if(!fc){
      fc = o.createFromName(n, EForm.Lov);
   }
   return fc;
}
MO.FEditorFrameDefineConsole_getEvents = function FEditorFrameDefineConsole_getEvents(n){
   return this.events.get(n);
}
MO.FEditorDsPersistenceCatalogContent = function FEditorDsPersistenceCatalogContent(o){
   o = MO.Class.inherits(this, o, MO.FEditorDsCatalogContent);
   o._defineCode = 'editor.design.persistence';
   return o;
}
MO.FEditorDsPersistenceCatalogToolBar = function FEditorDsPersistenceCatalogToolBar(o){
   o = MO.Class.inherits(this, o, MO.FEditorDsCatalogToolBar);
   o._frameName     = 'editor.design.persistence.CatalogToolBar';
   o._listFrameName = 'editor.design.persistence.ListForm';
   o.construct      = MO.FEditorDsPersistenceCatalogToolBar_construct;
   o.dispose        = MO.FEditorDsPersistenceCatalogToolBar_dispose;
   return o;
}
MO.FEditorDsPersistenceCatalogToolBar_construct = function FEditorDsPersistenceCatalogToolBar_construct(){
   var o = this;
   o.__base.FEditorDsCatalogToolBar.construct.call(o);
}
MO.FEditorDsPersistenceCatalogToolBar_dispose = function FEditorDsPersistenceCatalogToolBar_dispose(){
   var o = this;
   o.__base.FEditorDsCatalogToolBar.dispose.call(o);
}
MO.FEditorDsPersistenceFrameSet = function FEditorDsPersistenceFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FEditorDsFrameSet);
   o._frameName = 'editor.design.persistence.FrameSet';
   o.onBuilded  = MO.FEditorDsPersistenceFrameSet_onBuilded;
   o.construct  = MO.FEditorDsPersistenceFrameSet_construct;
   o.dispose    = MO.FEditorDsPersistenceFrameSet_dispose;
   return o;
}
MO.FEditorDsPersistenceFrameSet_onBuilded = function FEditorDsPersistenceFrameSet_onBuilded(event){
   var o = this;
   o.__base.FEditorDsFrameSet.onBuilded.call(o, event);
   o._frameCatalogTitle._hPanel.className = o.styleName('Title_Ground');
   o._frameCatalogToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
   o._framePropertyTitle._hPanel.className = o.styleName('Title_Ground');
   o._framePropertyToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._framePropertyContent._hPanel.className = o.styleName('Property_Content');
   var spliter = o._catalogSplitter = o.searchControl('catalogSpliter');
   spliter.setAlignCd(MO.EUiAlign.Left);
   spliter.setSizeHtml(o._frameCatalog._hPanel);
   var control = o._catalogToolbar = MO.Class.create(MO.FEditorDsPersistenceCatalogToolBar);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.buildDefine(event);
   o._frameCatalogToolBar.push(control);
   var control = o._catalogContent = MO.Class.create(MO.FEditorDsPersistenceCatalogContent);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.build(event);
   o._frameCatalogContent.push(control);
   MO.Window.Html.textSet(o._frameCatalogTitle._hPanel, '持久化目录');
}
MO.FEditorDsPersistenceFrameSet_construct = function FEditorDsPersistenceFrameSet_construct(){
   var o = this;
   o.__base.FEditorDsFrameSet.construct.call(o);
}
MO.FEditorDsPersistenceFrameSet_dispose = function FEditorDsPersistenceFrameSet_dispose(){
   var o = this;
   o.__base.FEditorDsFrameSet.dispose.call(o);
}
MO.FEditorDsListCatalogContent = function FEditorDsListCatalogContent(o){
   o = MO.Class.inherits(this, o, MO.FEditorDsCatalogContent);
   o._defineCode = 'editor.design.list';
   return o;
}
MO.FEditorDsListCatalogToolBar = function FEditorDsListCatalogToolBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolBar);
   o._frameName  = 'editor.design.list.CatalogToolBar';
   o.onListClick = MO.FEditorDsListCatalogToolBar_onListClick;
   o.onBuilded   = MO.FEditorDsListCatalogToolBar_onBuilded;
   o.construct   = MO.FEditorDsListCatalogToolBar_construct;
   o.dispose     = MO.FEditorDsListCatalogToolBar_dispose;
   return o;
}
MO.FEditorDsListCatalogToolBar_onListClick = function FEditorDsListCatalogToolBar_onListClick(event){
   this._frameSet.selectObject('editor.design.list.ListForm');
}
MO.FEditorDsListCatalogToolBar_onBuilded = function FEditorDsListCatalogToolBar_onBuilded(p){
   var o = this;
   o.__base.FDuiToolBar.onBuilded.call(o, p);
   o._controlList.addClickListener(o, o.onListClick);
}
MO.FEditorDsListCatalogToolBar_construct = function FEditorDsListCatalogToolBar_construct(){
   var o = this;
   o.__base.FDuiToolBar.construct.call(o);
}
MO.FEditorDsListCatalogToolBar_dispose = function FEditorDsListCatalogToolBar_dispose(){
   var o = this;
   o.__base.FDuiToolBar.dispose.call(o);
}
MO.FEditorDsListFrameSet = function FEditorDsListFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FEditorDsFrameSet);
   o._frameName = 'editor.design.list.FrameSet';
   o.onBuilded  = MO.FEditorDsListFrameSet_onBuilded;
   o.construct  = MO.FEditorDsListFrameSet_construct;
   o.dispose    = MO.FEditorDsListFrameSet_dispose;
   return o;
}
MO.FEditorDsListFrameSet_onBuilded = function FEditorDsListFrameSet_onBuilded(event){
   var o = this;
   o.__base.FEditorDsFrameSet.onBuilded.call(o, event);
   o._frameCatalogTitle._hPanel.className = o.styleName('Title_Ground');
   o._frameCatalogToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
   o._framePropertyTitle._hPanel.className = o.styleName('Title_Ground');
   o._framePropertyToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._framePropertyContent._hPanel.className = o.styleName('Property_Content');
   var spliter = o._catalogSplitter = o.searchControl('catalogSpliter');
   spliter.setAlignCd(MO.EUiAlign.Left);
   spliter.setSizeHtml(o._frameCatalog._hPanel);
   var control = o._catalogToolbar = MO.Class.create(MO.FEditorDsListCatalogToolBar);
   control._frameSet = o;
   control.buildDefine(event);
   o._frameCatalogToolBar.push(control);
   var control = o._catalogContent = MO.Class.create(MO.FEditorDsListCatalogContent);
   control._frameSet = o;
   control.build(event);
   o._frameCatalogContent.push(control);
   MO.Window.Html.textSet(o._frameCatalogTitle._hPanel, '列表目录');
}
MO.FEditorDsListFrameSet_construct = function FEditorDsListFrameSet_construct(){
   var o = this;
   o.__base.FEditorDsFrameSet.construct.call(o);
}
MO.FEditorDsListFrameSet_dispose = function FEditorDsListFrameSet_dispose(){
   var o = this;
   o.__base.FEditorDsFrameSet.dispose.call(o);
}
MO.FEditorDsTreeCatalogContent = function FEditorDsTreeCatalogContent(o){
   o = MO.Class.inherits(this, o, MO.FEditorDsCatalogContent);
   o._defineCode = 'editor.design.tree';
   return o;
}
MO.FEditorDsTreeCatalogToolBar = function FEditorDsTreeCatalogToolBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolBar);
   o._frameName  = 'editor.design.tree.CatalogToolBar';
   o.onListClick = MO.FEditorDsTreeCatalogToolBar_onListClick;
   o.onBuilded   = MO.FEditorDsTreeCatalogToolBar_onBuilded;
   o.construct   = MO.FEditorDsTreeCatalogToolBar_construct;
   o.dispose     = MO.FEditorDsTreeCatalogToolBar_dispose;
   return o;
}
MO.FEditorDsTreeCatalogToolBar_onListClick = function FEditorDsTreeCatalogToolBar_onListClick(event){
   this._frameSet.selectObject('editor.design.tree.ListForm');
}
MO.FEditorDsTreeCatalogToolBar_onBuilded = function FEditorDsTreeCatalogToolBar_onBuilded(p){
   var o = this;
   o.__base.FDuiToolBar.onBuilded.call(o, p);
   o._controlList.addClickListener(o, o.onListClick);
}
MO.FEditorDsTreeCatalogToolBar_construct = function FEditorDsTreeCatalogToolBar_construct(){
   var o = this;
   o.__base.FDuiToolBar.construct.call(o);
}
MO.FEditorDsTreeCatalogToolBar_dispose = function FEditorDsTreeCatalogToolBar_dispose(){
   var o = this;
   o.__base.FDuiToolBar.dispose.call(o);
}
MO.FEditorDsTreeFrameSet = function FEditorDsTreeFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FEditorDsFrameSet);
   o._frameName = 'editor.design.tree.FrameSet';
   o.onBuilded  = MO.FEditorDsTreeFrameSet_onBuilded;
   o.construct  = MO.FEditorDsTreeFrameSet_construct;
   o.dispose    = MO.FEditorDsTreeFrameSet_dispose;
   return o;
}
MO.FEditorDsTreeFrameSet_onBuilded = function FEditorDsTreeFrameSet_onBuilded(event){
   var o = this;
   o.__base.FEditorDsFrameSet.onBuilded.call(o, event);
   o._frameCatalogTitle._hPanel.className = o.styleName('Title_Ground');
   o._frameCatalogToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
   o._framePropertyTitle._hPanel.className = o.styleName('Title_Ground');
   o._framePropertyToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._framePropertyContent._hPanel.className = o.styleName('Property_Content');
   var spliter = o._catalogSplitter = o.searchControl('catalogSpliter');
   spliter.setAlignCd(MO.EUiAlign.Left);
   spliter.setSizeHtml(o._frameCatalog._hPanel);
   var control = o._catalogToolbar = MO.Class.create(MO.FEditorDsTreeCatalogToolBar);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.buildDefine(event);
   o._frameCatalogToolBar.push(control);
   var control = o._catalogContent = MO.Class.create(MO.FEditorDsTreeCatalogContent);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.build(event);
   o._frameCatalogContent.push(control);
   MO.Window.Html.textSet(o._frameCatalogTitle._hPanel, '树目录配置');
}
MO.FEditorDsTreeFrameSet_construct = function FEditorDsTreeFrameSet_construct(){
   var o = this;
   o.__base.FEditorDsFrameSet.construct.call(o);
}
MO.FEditorDsTreeFrameSet_dispose = function FEditorDsTreeFrameSet_dispose(){
   var o = this;
   o.__base.FEditorDsFrameSet.dispose.call(o);
}
MO.FEditorDsFrameBarProperty = function FEditorDsFrameBarProperty(o){
   o = MO.Class.inherits(this, o, MO.FDsSystemFrameControlProperty);
   o._activeSpace      = null;
   o._activeRenderable = null;
   o.onBuilded         = MO.FEditorDsFrameBarProperty_onBuilded;
   o.onDataChanged     = MO.FEditorDsFrameBarProperty_onDataChanged;
   o.construct         = MO.FEditorDsFrameBarProperty_construct;
   o.loadObject        = MO.FEditorDsFrameBarProperty_loadObject;
   o.dispose           = MO.FEditorDsFrameBarProperty_dispose;
   return o;
}
MO.FEditorDsFrameBarProperty_onBuilded = function FEditorDsFrameBarProperty_onBuilded(p){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.onBuilded.call(o, p);
}
MO.FEditorDsFrameBarProperty_onDataChanged = function FEditorDsFrameBarProperty_onDataChanged(p){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.onDataChanged.call(o, p);
}
MO.FEditorDsFrameBarProperty_construct = function FEditorDsFrameBarProperty_construct(){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.construct.call(o);
}
MO.FEditorDsFrameBarProperty_loadObject = function FEditorDsFrameBarProperty_loadObject(frame, control){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.loadObject.call(o, frame, control);
}
MO.FEditorDsFrameBarProperty_dispose = function FEditorDsFrameBarProperty_dispose(){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.dispose.call(o);
}
MO.FEditorDsFrameButtonProperty = function FEditorDsFrameButtonProperty(o){
   o = MO.Class.inherits(this, o, MO.FDsSystemFrameControlProperty);
   o._activeSpace      = null;
   o._activeRenderable = null;
   o.onBuilded         = MO.FEditorDsFrameButtonProperty_onBuilded;
   o.onDataChanged     = MO.FEditorDsFrameButtonProperty_onDataChanged;
   o.construct         = MO.FEditorDsFrameButtonProperty_construct;
   o.loadObject        = MO.FEditorDsFrameButtonProperty_loadObject;
   o.dispose           = MO.FEditorDsFrameButtonProperty_dispose;
   return o;
}
MO.FEditorDsFrameButtonProperty_onBuilded = function FEditorDsFrameButtonProperty_onBuilded(p){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.onBuilded.call(o, p);
}
MO.FEditorDsFrameButtonProperty_onDataChanged = function FEditorDsFrameButtonProperty_onDataChanged(p){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.onDataChanged.call(o, p);
}
MO.FEditorDsFrameButtonProperty_construct = function FEditorDsFrameButtonProperty_construct(){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.construct.call(o);
}
MO.FEditorDsFrameButtonProperty_loadObject = function FEditorDsFrameButtonProperty_loadObject(frame, control){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.loadObject.call(o, frame, control);
}
MO.FEditorDsFrameButtonProperty_dispose = function FEditorDsFrameButtonProperty_dispose(){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.dispose.call(o);
}
MO.FEditorDsFrameCatalogContent = function FEditorDsFrameCatalogContent(o){
   o = MO.Class.inherits(this, o, MO.FEditorDsCatalogContent);
   o._defineCode = 'editor.design.frame';
   return o;
}
MO.FEditorDsFrameCatalogToolBar = function FEditorDsFrameCatalogToolBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolBar);
   o._frameName  = 'editor.design.frame.CatalogToolBar';
   o.onListClick = MO.FEditorDsListCatalogToolBar_onListClick;
   o.onBuilded   = MO.FEditorDsFrameCatalogToolBar_onBuilded;
   o.construct   = MO.FEditorDsFrameCatalogToolBar_construct;
   o.dispose     = MO.FEditorDsFrameCatalogToolBar_dispose;
   return o;
}
MO.FEditorDsListCatalogToolBar_onListClick = function FEditorDsListCatalogToolBar_onListClick(event){
   this._frameSet.selectObject('editor.design.frame.ListForm');
}
MO.FEditorDsFrameCatalogToolBar_onBuilded = function FEditorDsFrameCatalogToolBar_onBuilded(p){
   var o = this;
   o.__base.FDuiToolBar.onBuilded.call(o, p);
   o._controlList.addClickListener(o, o.onListClick);
}
MO.FEditorDsFrameCatalogToolBar_construct = function FEditorDsFrameCatalogToolBar_construct(){
   var o = this;
   o.__base.FDuiToolBar.construct.call(o);
}
MO.FEditorDsFrameCatalogToolBar_dispose = function FEditorDsFrameCatalogToolBar_dispose(){
   var o = this;
   o.__base.FDuiToolBar.dispose.call(o);
}
MO.FEditorDsFrameComponentProperty = function FEditorDsFrameComponentProperty(o){
   o = MO.Class.inherits(this, o, MO.FDuiForm);
   o._activeFrame     = null;
   o._activeComponent = null;
   o.onBuilded        = MO.FEditorDsFrameComponentProperty_onBuilded;
   o.onDataChanged    = MO.FEditorDsFrameComponentProperty_onDataChanged;
   o.construct        = MO.FEditorDsFrameComponentProperty_construct;
   o.loadObject       = MO.FEditorDsFrameComponentProperty_loadObject;
   o.dispose          = MO.FEditorDsFrameComponentProperty_dispose;
   return o;
}
MO.FEditorDsFrameComponentProperty_onBuilded = function FEditorDsFrameComponentProperty_onBuilded(p){
   var o = this;
   o.__base.FDuiForm.onBuilded.call(o, p);
}
MO.FEditorDsFrameComponentProperty_onDataChanged = function FEditorDsFrameComponentProperty_onDataChanged(event){
   var o  = this;
   var frame = o._activeFrame;
   var control = o._activeControl;
   var size = o._controlSize.get();
   control.size().set(size.x, size.y);
   frame.build();
}
MO.FEditorDsFrameComponentProperty_construct = function FEditorDsFrameComponentProperty_construct(){
   var o = this;
   o.__base.FDuiForm.construct.call(o);
}
MO.FEditorDsFrameComponentProperty_loadObject = function FEditorDsFrameComponentProperty_loadObject(frame, component){
   var o = this;
   o._activeFrame = frame;
   o._activeComponent = component;
   o._controlType.set(RClass.name(component));
   o._controlName.set(component.name());
   o._controlLabel.set(component.label());
}
MO.FEditorDsFrameComponentProperty_dispose = function FEditorDsFrameComponentProperty_dispose(){
   var o = this;
   o.__base.FDuiForm.dispose.call(o);
}
MO.FEditorDsFrameControlProperty = function FEditorDsFrameControlProperty(o){
   o = MO.Class.inherits(this, o, MO.FDsSystemFrameComponentProperty);
   o._activeFrame   = null;
   o._activeControl = null;
   o.onBuilded      = MO.FEditorDsFrameControlProperty_onBuilded;
   o.onDataChanged  = MO.FEditorDsFrameControlProperty_onDataChanged;
   o.construct      = MO.FEditorDsFrameControlProperty_construct;
   o.loadObject     = MO.FEditorDsFrameControlProperty_loadObject;
   o.dispose        = MO.FEditorDsFrameControlProperty_dispose;
   return o;
}
MO.FEditorDsFrameControlProperty_onBuilded = function FEditorDsFrameControlProperty_onBuilded(event){
   var o = this;
   o.__base.FDsSystemFrameComponentProperty.onBuilded.call(o, event);
   o._controlSize.addDataChangedListener(o, o.onDataChanged);
}
MO.FEditorDsFrameControlProperty_onDataChanged = function FEditorDsFrameControlProperty_onDataChanged(event){
   var o  = this;
   o.__base.FDsSystemFrameComponentProperty.onDataChanged.call(o, event);
   var frame = o._activeFrame;
   var control = o._activeControl;
   var size = o._controlSize.get();
   control.size().set(size.x, size.y);
   frame.build();
}
MO.FEditorDsFrameControlProperty_construct = function FEditorDsFrameControlProperty_construct(){
   var o = this;
   o.__base.FDsSystemFrameComponentProperty.construct.call(o);
}
MO.FEditorDsFrameControlProperty_loadObject = function FEditorDsFrameControlProperty_loadObject(frame, control){
   var o = this;
   o.__base.FDsSystemFrameComponentProperty.loadObject.call(o, frame, control);
   o._activeFrame = frame;
   o._activeControl = control;
   var location = control.location();
   o._controlLocation.set(location);
   var size = control.size();
   o._controlSize.set(size);
   o._controlForeColor.set(control.foreColor());
   o._controlBackColor.set(control.backColor());
   o._controlBackResource.set(control.backResource());
   o._controlBackGrid.set(control.backGrid());
}
MO.FEditorDsFrameControlProperty_dispose = function FEditorDsFrameControlProperty_dispose(){
   var o = this;
   o.__base.FDsSystemFrameComponentProperty.dispose.call(o);
}
MO.FEditorDsFrameFrameSet = function FEditorDsFrameFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FEditorDsFrameSet);
   o._frameName    = 'editor.design.frame.FrameSet';
   o.onBuilded     = MO.FEditorDsFrameFrameSet_onBuilded;
   o.construct     = MO.FEditorDsFrameFrameSet_construct;
   o.setFrameTitle = MO.FEditorDsFrameFrameSet_setFrameTitle;
   o.dispose       = MO.FEditorDsFrameFrameSet_dispose;
   return o;
}
MO.FEditorDsFrameFrameSet_onBuilded = function FEditorDsFrameFrameSet_onBuilded(event){
   var o = this;
   o.__base.FEditorDsFrameSet.onBuilded.call(o, event);
   o._frameCatalogTitle._hPanel.className = o.styleName('Title_Ground');
   o._frameCatalogToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
   o._frameSpaceTitle._hPanel.className = o.styleName('Title_Ground');
   o._frameSpaceToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._frameSpaceContent._hPanel.className = o.styleName('Space_Content');
   o._framePropertyToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._framePropertyContent._hPanel.className = o.styleName('Property_Content');
   var spliter = o._catalogSplitter = o.searchControl('catalogSpliter');
   spliter.setAlignCd(MO.EUiAlign.Left);
   spliter.setSizeHtml(o._frameCatalog._hPanel);
   var spliter = o._propertySpliter = o.searchControl('propertySpliter');
   spliter.setAlignCd(MO.EUiAlign.Right);
   spliter.setSizeHtml(o._frameProperty._hPanel);
   var control = o._catalogToolbar = MO.Class.create(MO.FEditorDsFrameCatalogToolBar);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.buildDefine(event);
   o._frameCatalogToolBar.push(control);
   var control = o._catalogContent = MO.Class.create(MO.FEditorDsFrameCatalogContent);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.build(event);
   o._frameCatalogContent.push(control);
   var control = o._spaceToolBar = MO.Class.create(MO.FEditorDsFrameSpaceToolBar);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.buildDefine(event);
   o._frameSpaceToolBar.push(control);
   var control = o._spaceContent = MO.Class.create(MO.FEditorDsFrameSpaceContent);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.build(o._frameSpaceContent._hPanel);
   o._frameSpaceContent.push(control);
   MO.Window.Html.textSet(o._frameCatalogTitle._hPanel, '表单目录');
}
MO.FEditorDsFrameFrameSet_construct = function FEditorDsFrameFrameSet_construct(){
   var o = this;
   o.__base.FEditorDsFrameSet.construct.call(o);
}
MO.FEditorDsFrameFrameSet_setFrameTitle = function FEditorDsFrameFrameSet_setFrameTitle(title){
   var o = this;
   var hTitlePanel = o._frameSpaceTitle._hPanel;
   MO.Window.Html.textSet(hTitlePanel, title);
}
MO.FEditorDsFrameFrameSet_dispose = function FEditorDsFrameFrameSet_dispose(){
   var o = this;
   o.__base.FEditorDsFrameSet.dispose.call(o);
}
MO.FEditorDsFramePictureProperty = function FEditorDsFramePictureProperty(o){
   o = MO.Class.inherits(this, o, MO.FDsSystemFrameControlProperty);
   o._activeSpace      = null;
   o._activeRenderable = null;
   o.onBuilded         = MO.FEditorDsFramePictureProperty_onBuilded;
   o.onDataChanged     = MO.FEditorDsFramePictureProperty_onDataChanged;
   o.construct         = MO.FEditorDsFramePictureProperty_construct;
   o.loadObject        = MO.FEditorDsFramePictureProperty_loadObject;
   o.dispose           = MO.FEditorDsFramePictureProperty_dispose;
   return o;
}
MO.FEditorDsFramePictureProperty_onBuilded = function FEditorDsFramePictureProperty_onBuilded(p){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.onBuilded.call(o, p);
}
MO.FEditorDsFramePictureProperty_onDataChanged = function FEditorDsFramePictureProperty_onDataChanged(p){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.onDataChanged.call(o, p);
}
MO.FEditorDsFramePictureProperty_construct = function FEditorDsFramePictureProperty_construct(){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.construct.call(o);
}
MO.FEditorDsFramePictureProperty_loadObject = function FEditorDsFramePictureProperty_loadObject(frame, control){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.loadObject.call(o, frame, control);
}
MO.FEditorDsFramePictureProperty_dispose = function FEditorDsFramePictureProperty_dispose(){
   var o = this;
   o.__base.FDsSystemFrameControlProperty.dispose.call(o);
}
MO.FEditorDsFramePropertyToolBarForm = function FEditorDsFramePropertyToolBarForm(o){
   o = MO.Class.inherits(this, o, MO.FEditorDsPropertyForm);
   o._logicService = 'editor.design.frame';
   o._logicGroup   = 'item';
   return o;
}
MO.FEditorDsFrameSpaceContent = function FEditorDsFrameSpaceContent(o){
   o = MO.Class.inherits(this, o, MO.FDuiControl, MO.MGraphicObject);
   o._scaleRate          = 1;
   o._optionAlpha        = false;
   o._desktop            = MO.Class.register(o, new MO.AGetter('_desktop'));
   o._guiManager         = MO.Class.register(o, new MO.AGetter('_guiManager'));
   o._activeStage        = MO.Class.register(o, new MO.AGetter('_activeStage'));
   o._activeFrame        = null;
   o._activeControls     = null;
   o._capturePosition    = null;
   o._captureRotation    = null;
   o.onEnterFrame        = MO.FEditorDsFrameSpaceContent_onEnterFrame;
   o.onMouseCaptureStart = MO.FEditorDsFrameSpaceContent_onMouseCaptureStart;
   o.onMouseCapture      = MO.FEditorDsFrameSpaceContent_onMouseCapture;
   o.onMouseCaptureStop  = MO.FEditorDsFrameSpaceContent_onMouseCaptureStop;
   o.onResize            = MO.FEditorDsFrameSpaceContent_onResize;
   o.onProcess           = MO.FEditorDsFrameSpaceContent_onProcess;
   o.onKeyDown           = MO.FEditorDsFrameSpaceContent_onKeyDown;
   o.oeResize            = MO.FEditorDsFrameSpaceContent_oeResize;
   o.oeFrame             = MO.FEditorDsFrameSpaceContent_oeFrame;
   o.construct           = MO.FEditorDsFrameSpaceContent_construct;
   o.build               = MO.FEditorDsFrameSpaceContent_build;
   o.controlAction       = MO.FEditorDsFrameSpaceContent_controlAction;
   o.selectControl       = MO.FEditorDsFrameSpaceContent_selectControl;
   o.loadFrame           = MO.FEditorDsFrameSpaceContent_loadFrame;
   o.dispose             = MO.FEditorDsFrameSpaceContent_dispose;
   return o;
}
MO.FEditorDsFrameSpaceContent_onEnterFrame = function FEditorDsFrameSpaceContent_onEnterFrame(){
   var o = this;
   var stage = o._activeStage;
   if(!stage){
      return;
   }
   var c = stage.camera();
   var d = 0.5;
   var r = 0.05;
   var kw = MO.RKeyboard.isPress(MO.EKeyCode.W);
   var ks = MO.RKeyboard.isPress(MO.EKeyCode.S);
   if(kw && !ks){
      c.doWalk(d);
   }
   if(!kw && ks){
      c.doWalk(-d);
   }
   var ka = MO.RKeyboard.isPress(MO.EKeyCode.A);
   var kd = MO.RKeyboard.isPress(MO.EKeyCode.D);
   if(ka && !kd){
      c.doYaw(r);
   }
   if(!ka && kd){
      c.doYaw(-r);
   }
   var kq = MO.RKeyboard.isPress(MO.EKeyCode.Q);
   var ke = MO.RKeyboard.isPress(MO.EKeyCode.E);
   if(kq && !ke){
      c.doFly(d);
   }
   if(!kq && ke){
      c.doFly(-d);
   }
   var kz = MO.RKeyboard.isPress(MO.EKeyCode.Z);
   var kw = MO.RKeyboard.isPress(MO.EKeyCode.X);
   if(kz && !kw){
      c.doPitch(r);
   }
   if(!kz && kw){
      c.doPitch(-r);
   }
   c.update();
   if(o._optionRotation){
      var r = o._rotation;
      var ls = stage.layers();
      var c = ls.count();
      for(var i = 0; i < c; i++){
         var l = ls.value(i);
         var m = l.matrix();
         m.setRotation(0, r.y, 0);
         m.update();
      }
      r.y += 0.01;
   }
}
MO.FEditorDsFrameSpaceContent_onMouseCaptureStart = function FEditorDsFrameSpaceContent_onMouseCaptureStart(p){
   var o = this;
   var s = o._activeStage;
   if(!s){
      return;
   }
   var r = o._activeStage.region();
   var st = MO.Console.find(MO.FG3dTechniqueConsole).find(o._graphicContext, MO.FG3dSelectTechnique);
   var r = st.test(r, p.offsetX, p.offsetY);
   o._capturePosition.set(p.clientX, p.clientY);
   o._captureRotation.assign(s.camera()._rotation);
}
MO.FEditorDsFrameSpaceContent_onMouseCapture = function FEditorDsFrameSpaceContent_onMouseCapture(p){
   var o = this;
   var s = o._activeStage;
   if(!s){
      return;
   }
   var cx = p.clientX - o._capturePosition.x;
   var cy = p.clientY - o._capturePosition.y;
   var c = o._activeStage.camera();
   var r = c.rotation();
   var cr = o._captureRotation;
   r.x = cr.x + cy * 0.003;
   r.y = cr.y + cx * 0.003;
}
MO.FEditorDsFrameSpaceContent_onMouseCaptureStop = function FEditorDsFrameSpaceContent_onMouseCaptureStop(p){
}
MO.FEditorDsFrameSpaceContent_onResize = function FEditorDsFrameSpaceContent_onResize(){
   var o = this;
   o.__base.FDuiControl.onResize.call(o, event);
   var c = o._graphicContext;
   var cs = c.size();
   var s = o._activeStage;
   if(s){
      var rp = s.camera().projection();
      rp.size().set(cs.width, cs.height);
      rp.update();
   }
}
MO.FEditorDsFrameSpaceContent_onProcess = function FEditorDsFrameSpaceContent_onProcess(event){
   var o = this;
   var frame = o._activeFrame;
   if(frame){
      frame.psUpdate();
   }
}
MO.FEditorDsFrameSpaceContent_controlAction = function FEditorDsFrameSpaceContent_controlAction(keyCode, control){
   var o = this;
   var location = control.location();
   var size = control.size();
   switch(keyCode){
      case MO.EKeyCode.A:
         location.x--;
         return true;
      case MO.EKeyCode.W:
         location.y--;
         return true;
      case MO.EKeyCode.D:
         location.x++;
         return true;
      case MO.EKeyCode.S:
         location.y++;
         return true;
      case MO.EKeyCode.J:
         size.width--;
         return true;
      case MO.EKeyCode.I:
         size.height--;
         return true;
      case MO.EKeyCode.L:
         size.width++;
         return true;
      case MO.EKeyCode.K:
         size.height++;
         return true;
   }
   return false;
}
MO.FEditorDsFrameSpaceContent_onKeyDown = function FEditorDsFrameSpaceContent_onKeyDown(event){
   var o = this;
   var keyCode = event.keyCode;
   var controls = o._activeControls;
   if(!controls.isEmpty()){
      var changed = false;
      var count = controls.count();
      for(var i = 0; i < count; i++){
         var control = controls.at(i);
         if(o.controlAction(keyCode, control)){
            changed = true;
         }
      }
      if(changed){
         o._activeFrame.build();
      }
   }
}
MO.FEditorDsFrameSpaceContent_oeResize = function FEditorDsFrameSpaceContent_oeResize(event){
   var o = this;
   o.__base.FDuiControl.oeResize.call(o, event);
   return MO.EEventStatus.Stop;
}
MO.FEditorDsFrameSpaceContent_oeFrame = function FEditorDsFrameSpaceContent_oeFrame(event){
   var o = this;
   o.__base.FDuiControl.oeFrame.call(o, event);
   return;
   o._guiManager.process();
   return MO.EEventStatus.Stop;
}
MO.FEditorDsFrameSpaceContent_construct = function FEditorDsFrameSpaceContent_construct(){
   var o = this;
   o.__base.FDuiControl.construct.call(o);
   o._rotation = new MO.SVector3();
   o._activeControls = new MO.TObjects();
   o._capturePosition = new MO.SPoint2();
   o._captureRotation = new MO.SVector3();
   MO.RWindow.lsnsKeyDown.register(o, o.onKeyDown);
}
MO.FEditorDsFrameSpaceContent_build = function FEditorDsFrameSpaceContent_build(hPanel){
   var o = this;
   return;
   var desktop = o._desktop = MO.Class.create(MO.FEditorDesktop);
   desktop.build(hPanel);
   o.linkGraphicContext(desktop.canvas3d());
   var guiManager = o._guiManager = MO.Class.create(MO.FGuiCanvasManager);
   guiManager.linkGraphicContext(desktop.canvas3d());
   guiManager.setDesktop(desktop);
   guiManager.setCanvas(desktop.canvas2d());
   guiManager.setup();
}
MO.FEditorDsFrameSpaceContent_selectControl = function FEditorDsFrameSpaceContent_selectControl(control){
   var o = this;
   var controls = o._activeControls;
   controls.clear();
   controls.push(control);
}
MO.FEditorDsFrameSpaceContent_loadFrame = function FEditorDsFrameSpaceContent_loadFrame(code){
   var o = this;
   var frame = o._activeFrame;
   if(frame){
      o._guiManager.unregister(frame);
      o._activeFrame = null;
   }
   var frameConsole = MO.Console.find(MO.FGuiFrameConsole);
   frame = o._activeFrame = frameConsole.get(o, code);
   frame.setLocation(0, 0);
   o._guiManager.register(frame);
}
MO.FEditorDsFrameSpaceContent_dispose = function FEditorDsFrameSpaceContent_dispose(){
   var o = this;
   o._rotation = MO.Lang.Obejct.dispose(o._rotation)
   o.__base.FDuiControl.dispose.call(o);
}
MO.FEditorDsFrameSpaceToolBar = function FEditorDsFrameSpaceToolBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolBar);
   o._frameName   = 'editor.design.frame.SpaceToolBar';
   o._storageCode = o._frameName;
   o._controlFolderCreateButton   = null;
   o._controlFolderDeleteButton   = null;
   o._controlFolderPropertyButton = null;
   o._controlFolderOpenButton     = null;
   o._controlFolderCloseButton    = null;
   o._activeNodeGuid              = null;
   o.onBuilded                    = MO.FEditorDsFrameSpaceToolBar_onBuilded;
   o.onFolderCreateClick          = MO.FEditorDsFrameSpaceToolBar_onFolderCreateClick;
   o.onFolderDeleteLoad           = MO.FEditorDsFrameSpaceToolBar_onFolderDeleteLoad;
   o.onFolderDeleteExcute         = MO.FEditorDsFrameSpaceToolBar_onFolderDeleteExcute;
   o.onFolderDeleteClick          = MO.FEditorDsFrameSpaceToolBar_onFolderDeleteClick;
   o.onFolderPropertyClick        = MO.FEditorDsFrameSpaceToolBar_onFolderPropertyClick;
   o.onFolderOpenClick            = MO.FEditorDsFrameSpaceToolBar_onFolderOpenClick;
   o.onFolderCloseClick           = MO.FEditorDsFrameSpaceToolBar_onFolderCloseClick;
   o.construct                    = MO.FEditorDsFrameSpaceToolBar_construct;
   o.dispose                      = MO.FEditorDsFrameSpaceToolBar_dispose;
   return o;
}
MO.FEditorDsFrameSpaceToolBar_onBuilded = function FEditorDsFrameSpaceToolBar_onBuilded(p){
   var o = this;
   o.__base.FDuiToolBar.onBuilded.call(o, p);
}
MO.FEditorDsFrameSpaceToolBar_onFolderCreateClick = function FEditorDsFrameSpaceToolBar_onFolderCreateClick(event){
   var o = this;
   var parentGuid = null;
   var parentLabel = null;
   var catalog = o._frameSet._catalogContent;
   var node = catalog.focusNode();
   if(node){
      parentGuid = node.guid();
      parentLabel = node.label();
   }
   var dialog = MO.Console.find(MO.FDuiWindowConsole).find(MO.FDsResourceFolderDialog);
   dialog._workspace = o._workspace;
   dialog._frameSet = o._frameSet;
   dialog._parentGuid = parentGuid;
   dialog.setNodeParentLabel(parentLabel);
   dialog.setNodeLabel('');
   dialog.switchDataMode(MO.EUiDataMode.Insert);
   dialog.showPosition(MO.EUiPosition.Center);
}
MO.FEditorDsFrameSpaceToolBar_onFolderDeleteLoad = function FEditorDsFrameSpaceToolBar_onFolderDeleteLoad(event){
   var o = this;
   MO.Console.find(MO.FDuiDesktopConsole).hide();
   var catalog = o._frameSet._catalogContent;
   var guid = o._activeNodeGuid;
   if(guid){
      var node = catalog.findByGuid(guid);
      node.removeSelf();
   }
   o._activeNodeGuid = null;
}
MO.FEditorDsFrameSpaceToolBar_onFolderDeleteExcute = function FEditorDsFrameSpaceToolBar_onFolderDeleteExcute(event){
   var o = this;
   if(event.resultCd != MO.EResult.Success){
      return;
   }
   var catalog = o._frameSet._catalogContent;
   var node = catalog.focusNode();
   MO.Console.find(MO.FDuiDesktopConsole).showUploading();
   o._activeNodeGuid = node._guid;
   var connection = MO.Console.find(MO.FDrResourceConsole).doFolderDelete(node._guid);
   connection.addLoadListener(o, o.onFolderDeleteLoad);
}
MO.FEditorDsFrameSpaceToolBar_onFolderDeleteClick = function FEditorDsFrameSpaceToolBar_onFolderDeleteClick(event){
   var o = this;
   var catalog = o._frameSet._catalogContent;
   var node = catalog.focusNode();
   if(!node){
      return MO.Console.find(MO.FDuiMessageConsole).showInfo('请选中目录节点后，再点击操作。');
   }
   var dialog = MO.Console.find(MO.FDuiMessageConsole).showConfirm('请确认是否删除当前目录？');
   dialog.addResultListener(o, o.onFolderDeleteExcute);
}
MO.FEditorDsFrameSpaceToolBar_onFolderPropertyClick = function FEditorDsFrameSpaceToolBar_onFolderPropertyClick(event){
   var o = this;
   var catalog = o._frameSet._catalogContent;
   var node = catalog.focusNode();
   if(!node){
      return MO.Console.find(MO.FDuiMessageConsole).showInfo('请选中目录节点后，再点击操作。');
   }
   var parentLabel = null;
   if(node._parent){
      parentLabel = node._parent.label();
   }
   var dialog = MO.Console.find(MO.FDuiWindowConsole).find(FDsResourceFolderDialog);
   dialog._workspace = o._workspace;
   dialog._frameSet = o._frameSet;
   dialog._nodeGuid = node._guid;
   dialog.setNodeParentLabel(parentLabel);
   dialog.setNodeLabel(node.label());
   dialog.switchDataMode(MO.EUiDataMode.Update);
   dialog.showPosition(MO.EUiPosition.Center);
}
MO.FEditorDsFrameSpaceToolBar_onFolderOpenClick = function FEditorDsFrameSpaceToolBar_onFolderOpenClick(event){
}
MO.FEditorDsFrameSpaceToolBar_onFolderCloseClick = function FEditorDsFrameSpaceToolBar_onFolderCloseClick(event){
}
MO.FEditorDsFrameSpaceToolBar_construct = function FEditorDsFrameSpaceToolBar_construct(){
   var o = this;
   o.__base.FDuiToolBar.construct.call(o);
}
MO.FEditorDsFrameSpaceToolBar_dispose = function FEditorDsFrameSpaceToolBar_dispose(){
   var o = this;
   o.__base.FDuiToolBar.dispose.call(o);
}
MO.FEditorDsDatasetCatalogContent = function FEditorDsDatasetCatalogContent(o){
   o = MO.Class.inherits(this, o, MO.FEditorDsCatalogContent);
   o._defineCode = 'editor.design.dataset';
   return o;
}
MO.FEditorDsDatasetCatalogToolBar = function FEditorDsDatasetCatalogToolBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolBar);
   o._frameName  = 'editor.design.dataset.CatalogToolBar';
   o.onListClick = MO.FEditorDsDatasetCatalogToolBar_onListClick;
   o.onBuilded   = MO.FEditorDsDatasetCatalogToolBar_onBuilded;
   o.construct   = MO.FEditorDsDatasetCatalogToolBar_construct;
   o.dispose     = MO.FEditorDsDatasetCatalogToolBar_dispose;
   return o;
}
MO.FEditorDsDatasetCatalogToolBar_onListClick = function FEditorDsDatasetCatalogToolBar_onListClick(event){
   this._frameSet.selectObject('editor.design.list.ListForm');
}
MO.FEditorDsDatasetCatalogToolBar_onBuilded = function FEditorDsDatasetCatalogToolBar_onBuilded(p){
   var o = this;
   o.__base.FDuiToolBar.onBuilded.call(o, p);
   o._controlList.addClickListener(o, o.onListClick);
}
MO.FEditorDsDatasetCatalogToolBar_construct = function FEditorDsDatasetCatalogToolBar_construct(){
   var o = this;
   o.__base.FDuiToolBar.construct.call(o);
}
MO.FEditorDsDatasetCatalogToolBar_dispose = function FEditorDsDatasetCatalogToolBar_dispose(){
   var o = this;
   o.__base.FDuiToolBar.dispose.call(o);
}
MO.FEditorDsDatasetFrameSet = function FEditorDsDatasetFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FEditorDsFrameSet);
   o._frameName = 'editor.design.dataset.FrameSet';
   o.onBuilded  = MO.FEditorDsDatasetFrameSet_onBuilded;
   o.construct  = MO.FEditorDsDatasetFrameSet_construct;
   o.dispose    = MO.FEditorDsDatasetFrameSet_dispose;
   return o;
}
MO.FEditorDsDatasetFrameSet_onBuilded = function FEditorDsDatasetFrameSet_onBuilded(event){
   var o = this;
   o.__base.FEditorDsFrameSet.onBuilded.call(o, event);
   o._frameCatalogTitle._hPanel.className = o.styleName('Title_Ground');
   o._frameCatalogToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
   o._framePropertyTitle._hPanel.className = o.styleName('Title_Ground');
   o._framePropertyToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._framePropertyContent._hPanel.className = o.styleName('Property_Content');
   var spliter = o._catalogSplitter = o.searchControl('catalogSpliter');
   spliter.setAlignCd(MO.EUiAlign.Left);
   spliter.setSizeHtml(o._frameCatalog._hPanel);
   var control = o._catalogToolbar = MO.Class.create(MO.FEditorDsDatasetCatalogToolBar);
   control._frameSet = o;
   control.buildDefine(event);
   o._frameCatalogToolBar.push(control);
   var control = o._catalogContent = MO.Class.create(MO.FEditorDsDatasetCatalogContent);
   control._frameSet = o;
   control.build(event);
   o._frameCatalogContent.push(control);
   MO.Window.Html.textSet(o._frameCatalogTitle._hPanel, '数据集合');
}
MO.FEditorDsDatasetFrameSet_construct = function FEditorDsDatasetFrameSet_construct(){
   var o = this;
   o.__base.FEditorDsFrameSet.construct.call(o);
}
MO.FEditorDsDatasetFrameSet_dispose = function FEditorDsDatasetFrameSet_dispose(){
   var o = this;
   o.__base.FEditorDsFrameSet.dispose.call(o);
}
MO.EManageFrame = new function EManageFrame(){
   var o = this;
   return o;
}
MO.EManageFrameSet = new function EManageFrameSet(){
   var o = this;
   o.CommonFrameSet = 'manage.logic.common.FrameSet';
   o.PersonFrameSet = 'manage.logic.person.FrameSet';
   o.LoggerFrameSet = 'manage.logic.logger.FrameSet';
   return o;
}
MO.FManageCatalogContent = function FManageCatalogContent(o){
   o = MO.Class.inherits(this, o, MO.FDuiForm);
   o.onButtonClick = MO.FManageCatalogContent_onButtonClick;
   o.onBuilded     = MO.FManageCatalogContent_onBuilded;
   o.construct     = MO.FManageCatalogContent_construct;
   o.dispose       = MO.FManageCatalogContent_dispose;
   return o;
}
MO.FManageCatalogContent_onButtonClick = function FManageCatalogContent_onButtonClick(event){
   var o = this;
   var button = event.sender;
   var frameName = button.attributeGet('frame_name');
   var frame = o._frameSet.selectSpaceFrame(frameName);
   frame.psMode(MO.EUiMode.Update);
   frame.psRefresh();
   if(MO.Class.isClass(frame, MO.FDuiFormFrame)){
      frame.dataModify();
   }else if(MO.Class.isClass(frame, MO.FDuiTableFrame)){
      frame._dsPageSize = 20;
      frame._dsPage = 0;
      frame.resetSearch();
      frame.doFetch();
   }
   var historyBar = o._frameSet._historyBar;
   historyBar.historyClear();
   var historyButton = historyBar.historyPush();
   historyButton.setLabel(frame.label());
   historyButton.attributeSet('frame_name', frame.name());
}
MO.FManageCatalogContent_onBuilded = function FManageCatalogContent_onBuilded(event){
   var o = this;
   o.__base.FDuiForm.onBuilded.call(o, event);
   var buttons = new MO.TObjects();
   o.searchComponents(buttons, MO.FDuiSliderButton);
   var count = buttons.count();
   for(var i = 0; i < count; i++){
      var button = buttons.at(i);
      button.addClickListener(o, o.onButtonClick);
   }
}
MO.FManageCatalogContent_construct = function FManageCatalogContent_construct(){
   var o = this;
   o.__base.FDuiForm.construct.call(o);
}
MO.FManageCatalogContent_dispose = function FManageCatalogContent_dispose(){
   var o = this;
   o.__base.FDuiForm.dispose.call(o);
}
MO.FManageCatalogToolBar = function FManageCatalogToolBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolBar);
   o._listFrameName = null;
   o.onSearchClick  = MO.FManageCatalogToolBar_onSearchClick;
   o.onRefreshClick = MO.FManageCatalogToolBar_onRefreshClick;
   o.onListClick    = MO.FManageCatalogToolBar_onListClick;
   o.onBuilded      = MO.FManageCatalogToolBar_onBuilded;
   o.construct      = MO.FManageCatalogToolBar_construct;
   o.dispose        = MO.FManageCatalogToolBar_dispose;
   return o;
}
MO.FManageCatalogToolBar_onSearchClick = function FManageCatalogToolBar_onSearchClick(event){
}
MO.FManageCatalogToolBar_onRefreshClick = function FManageCatalogToolBar_onRefreshClick(event){
   var o = this;
   var catalog = o._frameSet._catalogContent;
   catalog.reloadNode();
}
MO.FManageCatalogToolBar_onListClick = function FManageCatalogToolBar_onListClick(event){
   var o = this;
   o._frameSet.selectObject(o._listFrameName);
}
MO.FManageCatalogToolBar_onBuilded = function FManageCatalogToolBar_onBuilded(p){
   var o = this;
   o.__base.FDuiToolBar.onBuilded.call(o, p);
}
MO.FManageCatalogToolBar_construct = function FManageCatalogToolBar_construct(){
   var o = this;
   o.__base.FDuiToolBar.construct.call(o);
}
MO.FManageCatalogToolBar_dispose = function FManageCatalogToolBar_dispose(){
   var o = this;
   o.__base.FDuiToolBar.dispose.call(o);
}
MO.FManageDataForm = function FManageDataForm(o){
   o = MO.Class.inherits(this, o, MO.FDuiFormFrame);
   o.onBackClick    = MO.FManageDataForm_onBackClick;
   o.onUpdateClick  = MO.FManageDataForm_onUpdateClick;
   o.onDeleteClick  = MO.FManageDataForm_onDeleteClick;
   o.onBuilded      = MO.FManageDataForm_onBuilded;
   o.onDataDetail   = MO.FManageDataForm_onDataDetail;
   o.onDataChanged  = MO.FManageDataForm_onDataChanged;
   o.onDataLoad     = MO.FManageDataForm_onDataLoad;
   o.onDataSave     = MO.FManageDataForm_onDataSave;
   o.onDataDelete   = MO.FManageDataForm_onDataDelete;
   o.construct      = MO.FManageDataForm_construct;
   o.doDetail       = MO.FManageDataForm_doDetail;
   o.doPrepare      = MO.FManageDataForm_doPrepare;
   o.doLoad         = MO.FManageDataForm_doLoad;
   o.doSave         = MO.FManageDataForm_doSave;
   o.doDelete       = MO.FManageDataForm_doDelete;
   o.dispose        = MO.FManageDataForm_dispose;
   return o;
}
MO.FManageDataForm_onBackClick = function FManageDataForm_onBackClick(event){
   var o = this;
   var historyBar = o._frameSet._historyBar;
   var historyButton = historyBar.historyPop();
   var frameName = historyButton.attributeGet('frame_name');
   o._frameSet.selectSpaceFrame(frameName);
}
MO.FManageDataForm_onUpdateClick = function FManageDataForm_onUpdateClick(event){
   this.doSave();
}
MO.FManageDataForm_onDeleteClick = function FManageDataForm_onDeleteClick(event){
   this.doDelete();
}
MO.FManageDataForm_onBuilded = function FManageDataForm_onBuilded(event){
   var o = this;
   o.__base.FDuiFormFrame.onBuilded.call(o, event);
   o._controlBack.addClickListener(o, o.onBackClick);
   o._controlUpdate.addClickListener(o, o.onUpdateClick);
   o._controlDelete.addClickListener(o, o.onDeleteClick);
}
MO.FManageDataForm_onDataChanged = function FManageDataForm_onDataChanged(event){
   var o  = this;
   o.__base.FDuiFormFrame.onDataChanged.call(o, event);
}
MO.FManageDataForm_onDataDetail = function FManageDataForm_onDataDetail(event){
   var o = this;
   var xservice = event.content;
   var xcontent = xservice.findNode('Content');
   var source = MO.Class.create(MO.FDataSource);
   source.loadConfig(xcontent);
   var dataset = source.currentDataset();
   var row = dataset.rows().first();
   o.loadUnit(row);
   MO.Console.find(MO.FDuiDesktopConsole).hide();
}
MO.FManageDataForm_onDataLoad = function FManageDataForm_onDataLoad(event){
   var o = this;
   var xcontent = event.content;
   var xunit = xcontent.nodes().first();
   o.loadUnit(xunit);
}
MO.FManageDataForm_onDataSave = function FManageDataForm_onDataSave(event){
   var o = this;
   var historyBar = o._frameSet._historyBar;
   var historyButton = historyBar.historyPop();
   var frameName = historyButton.attributeGet('frame_name');
   var frame = o._frameSet.selectSpaceFrame(frameName);
   if(MO.Class.isClass(frame, MO.FDuiTableFrame)){
      frame.doFetch();
   }
   MO.Console.find(MO.FDuiDesktopConsole).hide();
}
MO.FManageDataForm_onDataDelete = function FManageDataForm_onDataDelete(event){
   var o = this;
   MO.Console.find(MO.FDuiDesktopConsole).hide();
}
MO.FManageDataForm_construct = function FManageDataForm_construct(){
   var o = this;
   o.__base.FDuiFormFrame.construct.call(o);
}
MO.FManageDataForm_doDetail = function FManageDataForm_doDetail(row){
   var o = this;
   MO.Console.find(MO.FDuiDesktopConsole).showProgress();
   var xdocument = new MO.TXmlDocument();
   var xroot = xdocument.root();
   var xcontent = xroot.create('Content');
   xcontent.set('frame_name', o._name);
   var xrow = xcontent.create('Row');
   row.saveDataRow(xrow);
   o.dataModify();
   o.psMode(MO.EUiMode.Update);
   var url = MO.Lang.String.format('/cloud.logic.frame.ws?action=detail');
   var connection = MO.Console.find(MO.FXmlConsole).sendAsync(url, xdocument);
   connection.addLoadListener(o, o.onDataDetail);
}
MO.FManageDataForm_doPrepare = function FManageDataForm_doPrepare(){
   var o = this;
   o.dataPrepare();
   o.psMode(MO.EUiMode.Insert);
}
MO.FManageDataForm_doLoad = function FManageDataForm_doLoad(typeGroup, containerName, itemName){
   var o = this;
   o._containerName = containerName;
   o._itemName = itemName;
   o._logicGroup = typeGroup;
   var url = MO.Lang.String.format('/{1}.ws?action=query&group={2}&container={3}&item={4}', o._logicService, typeGroup, o._containerName, o._itemName);
   var connection = MO.Console.find(MO.FXmlConsole).send(url);
   connection.addLoadListener(o, o.onDataLoad);
}
MO.FManageDataForm_doSave = function FManageDataForm_doSave(){
   var o = this;
   var dataSource = MO.Class.create(MO.FDataSource);
   o.dsSaveSource(dataSource);
   MO.Console.find(MO.FDuiDesktopConsole).showProgress();
   var xdocument = new MO.TXmlDocument();
   var xroot = xdocument.root();
   var xcontent = xroot.create('Content');
   xcontent.set('frame_name', o._name);
   dataSource.saveConfig(xcontent);
   var url = MO.Lang.String.format('/cloud.logic.frame.ws?action=save');
   var connection = MO.Console.find(MO.FXmlConsole).sendAsync(url, xdocument);
   connection.addLoadListener(o, o.onDataSave);
}
MO.FManageDataForm_doDelete = function FManageDataForm_doDelete(){
   var o = this;
   o._dataActionCd = MO.EUiDataAction.Delete;
   o.dataErase();
   o.doSave();
}
MO.FManageDataForm_dispose = function FManageDataForm_dispose(){
   var o = this;
   o.__base.FDuiFormFrame.dispose.call(o);
}
MO.FManageDataPicker = function FManageDataPicker(o){
   o = MO.Class.inherits(this, o, MO.FDuiPickerFrame);
   o._listenersDataSelect = MO.Class.register(o, new MO.AListener('_listenersDataSelect'));
   o.onDataSearch         = MO.FManageDataPicker_onDataSearch;
   o.onCellClick          = MO.FManageDataPicker_onCellClick;
   o.onCellDoubleClick    = MO.FManageDataPicker_onCellDoubleClick;
   o.onBuilded            = MO.FManageDataPicker_onBuilded;
   o.onDataFetch          = MO.FManageDataPicker_onDataFetch;
   o.construct            = MO.FManageDataPicker_construct;
   o.dsMovePage           = MO.FManageDataPicker_dsMovePage;
   o.doFetch              = MO.FManageDataPicker_doFetch;
   o.dispose              = MO.FManageDataPicker_dispose;
   return o;
}
MO.FManageDataPicker_onDataSearch = function FManageDataPicker_onDataSearch(event){
   this.doFetch();
}
MO.FManageDataPicker_onCellClick = function FManageDataPicker_onCellClick(event){
   var o = this;
   var cell = event.cell;
   if(MO.Class.isClass(cell, MO.FDuiCellStatus)){
      o.processDataSelectListener(event);
      o.hide();
   }
}
MO.FManageDataPicker_onCellDoubleClick = function FManageDataPicker_onCellDoubleClick(event){
   var o = this;
   o.processDataSelectListener(event);
   o.hide();
}
MO.FManageDataPicker_onBuilded = function FManageDataPicker_onBuilded(event){
   var o = this;
   o.__base.FDuiPickerFrame.onBuilded.call(o, event);
   var table = o._table;
   table.addDataSearchListener(o, o.onDataSearch);
   table.addCellClickListener(o, o.onCellClick);
   table.addCellDoubleClickListener(o, o.onCellDoubleClick);
}
MO.FManageDataPicker_onDataFetch = function FManageDataPicker_onDataFetch(event){
   var o = this;
   var table = o._table;
   var xservice = event.content;
   var xcontent = xservice.findNode('Content');
   var source = MO.Class.create(MO.FDataSource);
   source.loadConfig(xcontent);
   var dataset = source.currentDataset();
   table.clearRows();
   table.loadDataset(dataset);
   table.psRefresh();
   MO.Console.find(MO.FDuiDesktopConsole).hide();
}
MO.FManageDataPicker_onDataDelete = function FManageDataPicker_onDataDelete(event){
   var o = this;
   MO.Console.find(MO.FDuiDesktopConsole).hide();
}
MO.FManageDataPicker_construct = function FManageDataPicker_construct(){
   var o = this;
   o.__base.FDuiPickerFrame.construct.call(o);
}
MO.FManageDataPicker_dsMovePage = function FManageDataPicker_dsMovePage(actionCd){
   var o = this;
   var dataset = o._dataset;
   var pageSize = dataset.pageSize();
   var pageCount = dataset.pageCount();
   var page = dataset.page();
   var movePage = page;
   switch(actionCd){
      case MO.EUiDataAction.First:
         movePage = 0;
         break;
      case MO.EUiDataAction.Prior:
         if(page > 1){
            movePage--;
         }
         break;
      case MO.EUiDataAction.Next:
         if(page < pageCount - 1){
            movePage++;
         }
         break;
      case MO.EUiDataAction.Last:
         movePage = pageCount - 1;
         break;
   }
   if(movePage != page){
      o._dsPageSize = pageSize;
      o._dsPage = movePage;
      o.doFetch();
   }
}
MO.FManageDataPicker_doFetch = function FManageDataPicker_doFetch(){
   var o = this;
   MO.Console.find(MO.FDuiDesktopConsole).showProgress();
   var xdocument = new MO.TXmlDocument();
   var xroot = xdocument.root();
   var xcontent = xroot.create('Content');
   xcontent.set('frame_name', o._name);
   xcontent.set('page_size', o._dsPageSize);
   xcontent.set('page', o._dsPage);
   var xsearch = xcontent.create('Search');
   var columns = o._table.columns();
   var count = columns.count();
   for(var i = 0; i < count; i++){
      var column = columns.at(i);
      var searchValue = column.searchValue();
      if(!MO.Lang.String.isEmpty(searchValue)){
         var xcolumn = xsearch.create('Column');
         xcolumn.set('name', column.name());
         xcolumn.set('value', searchValue);
      }
   }
   var url = MO.Lang.String.format('/cloud.logic.frame.ws?action=fetch');
   var connection = MO.Console.find(MO.FXmlConsole).sendAsync(url, xdocument);
   connection.addLoadListener(o, o.onDataFetch);
}
MO.FManageDataPicker_dispose = function FManageDataPicker_dispose(){
   var o = this;
   o.__base.FDuiPickerFrame.dispose.call(o);
}
MO.FManageDataTable = function FManageDataTable(o){
   o = MO.Class.inherits(this, o, MO.FDuiTableFrame);
   o.onInsertClick     = MO.FManageDataTable_onInsertClick;
   o.onCellClick       = MO.FManageDataTable_onCellClick;
   o.onCellDoubleClick = MO.FManageDataTable_onCellDoubleClick;
   o.onBuilded         = MO.FManageDataTable_onBuilded;
   o.onDataChanged     = MO.FManageDataTable_onDataChanged;
   o.onDataFetch       = MO.FManageDataTable_onDataFetch;
   o.onDataSave        = MO.FManageDataTable_onDataSave;
   o.onDataDelete      = MO.FManageDataTable_onDataDelete;
   o.construct         = MO.FManageDataTable_construct;
   o.dsMovePage        = MO.FManageDataTable_dsMovePage;
   o.dsSearch          = MO.FManageDataTable_dsSearch;
   o.doFetch           = MO.FManageDataTable_doFetch;
   o.doDetail          = MO.FManageDataTable_doDetail;
   o.doPrepare         = MO.FManageDataTable_doPrepare;
   o.doSave            = MO.FManageDataTable_doSave;
   o.doDelete          = MO.FManageDataTable_doDelete;
   o.dispose           = MO.FManageDataTable_dispose;
   return o;
}
MO.FManageDataTable_onInsertClick = function FManageDataTable_onInsertClick(event){
   var o = this;
   var frame = o._frameSet.activeFrame();
   if(MO.Class.isClass(frame, MO.FDuiTableFrame)){
      var unitFrameName = frame.unitFrameName();
      var unitFrame = o._frameSet.selectSpaceFrame(unitFrameName);
      unitFrame.doPrepare();
   }
}
MO.FManageDataTable_onCellClick = function FManageDataTable_onCellClick(event){
   var o = this;
   var cell = event.cell;
   if(MO.Class.isClass(cell, MO.FDuiCellStatus)){
      var row = event.row;
      o.doDetail(row);
   }
}
MO.FManageDataTable_onCellDoubleClick = function FManageDataTable_onCellDoubleClick(event){
   var o = this;
   var row = event.row;
   o.doDetail(row);
}
MO.FManageDataTable_onBuilded = function FManageDataTable_onBuilded(event){
   var o = this;
   o.__base.FDuiTableFrame.onBuilded.call(o, event);
   o._controlInsert.addClickListener(o, o.onInsertClick);
   o.addCellClickListener(o, o.onCellClick);
   o.addCellDoubleClickListener(o, o.onCellDoubleClick);
}
MO.FManageDataTable_onDataChanged = function FManageDataTable_onDataChanged(event){
   var o  = this;
   o.__base.FDuiTableFrame.onDataChanged.call(o, event);
}
MO.FManageDataTable_onDataFetch = function FManageDataTable_onDataFetch(event){
   var o = this;
   var xservice = event.content;
   var xcontent = xservice.findNode('Content');
   var source = MO.Class.create(MO.FDataSource);
   source.loadConfig(xcontent);
   var dataset = source.currentDataset();
   o.clearRows();
   o.loadDataset(dataset);
   o.psRefresh();
   MO.Console.find(MO.FDuiDesktopConsole).hide();
}
MO.FManageDataTable_onDataSave = function FManageDataTable_onDataSave(event){
   var o = this;
   MO.Console.find(MO.FDuiDesktopConsole).hide();
}
MO.FManageDataTable_onDataDelete = function FManageDataTable_onDataDelete(event){
   var o = this;
   MO.Console.find(MO.FDuiDesktopConsole).hide();
}
MO.FManageDataTable_construct = function FManageDataTable_construct(){
   var o = this;
   o.__base.FDuiTableFrame.construct.call(o);
}
MO.FManageDataTable_dsMovePage = function FManageDataTable_dsMovePage(actionCd){
   var o = this;
   var dataset = o._dataset;
   var pageSize = dataset.pageSize();
   var pageCount = dataset.pageCount();
   var page = dataset.page();
   var movePage = page;
   switch(actionCd){
      case MO.EUiDataAction.First:
         movePage = 0;
         break;
      case MO.EUiDataAction.Prior:
         if(page > 1){
            movePage--;
         }
         break;
      case MO.EUiDataAction.Next:
         if(page < pageCount - 1){
            movePage++;
         }
         break;
      case MO.EUiDataAction.Last:
         movePage = pageCount - 1;
         break;
   }
   if(movePage != page){
      o._dsPageSize = pageSize;
      o._dsPage = movePage;
      o.doFetch();
   }
}
MO.FManageDataTable_dsSearch = function FManageDataTable_dsSearch(){
   var o = this;
   o.doFetch();
}
MO.FManageDataTable_doFetch = function FManageDataTable_doFetch(){
   var o = this;
   MO.Console.find(MO.FDuiDesktopConsole).showProgress();
   var xdocument = new MO.TXmlDocument();
   var xroot = xdocument.root();
   var xcontent = xroot.create('Content');
   xcontent.set('frame_name', o._name);
   xcontent.set('page_size', o._dsPageSize);
   xcontent.set('page', o._dsPage);
   var xsearch = xcontent.create('Search');
   var columns = o._columns;
   var count = columns.count();
   for(var i = 0; i < count; i++){
      var column = columns.at(i);
      var searchValue = column.searchValue();
      if(!MO.Lang.String.isEmpty(searchValue)){
         var xcolumn = xsearch.create('Column');
         xcolumn.set('name', column.name());
         xcolumn.set('value', searchValue);
      }
   }
   var url = MO.Lang.String.format('/cloud.logic.frame.ws?action=fetch');
   var connection = MO.Console.find(MO.FXmlConsole).sendAsync(url, xdocument);
   connection.addLoadListener(o, o.onDataFetch);
}
MO.FManageDataTable_doDetail = function FManageDataTable_doDetail(row){
   var o = this;
   var unitFrameName = o._unitFrameName;
   var unitFrame = o._frameSet.selectSpaceFrame(unitFrameName);
   unitFrame.doDetail(row);
   var historyBar = o._frameSet._historyBar;
   var historyButton = historyBar.historyPush();
   historyButton.setLabel(unitFrame.label());
   historyButton.attributeSet('frame_name', unitFrame.name());
}
MO.FManageDataTable_doPrepare = function FManageDataTable_doPrepare(parameters){
   var o = this;
   debugger
   var logicGroup = o._logicGroup = parameters.get('logic_group');
   var containerName = null;
   var itemName = null;
   if(logicGroup != 'container'){
      var catalog = o._frameSet._catalogContent;
      containerName = catalog.containerName();
      itemName = catalog.itemName();
   }
   var frameName = parameters.get('frame_name');
   var frame = o._frameSet.selectObject(frameName);
   frame.dataPrepare();
   var control = frame.searchComponent('componentType');
   var componentType = parameters.get('component_type');
   control.set(componentType);
   frame.setContainerName(containerName);
   frame.setItemName(itemName);
}
MO.FManageDataTable_doSave = function FManageDataTable_doSave(){
   var o = this;
   MO.Console.find(MO.FDuiDesktopConsole).showProgress();
   var xdocument = new MO.TXmlDocument();
   var xroot = xdocument.root();
   o.saveUnit(xroot.create('Content'));
   var url = MO.Lang.String.format('/{1}.ws?action={2}&group={3}&container={4}&item={5}', o._logicService, o._dataActionCd, o._logicGroup, o._containerName, o._itemName);
   var connection = MO.Console.find(MO.FXmlConsole).sendAsync(url, xdocument);
   connection.addLoadListener(o, o.onDataSave);
}
MO.FManageDataTable_doDelete = function FManageDataTable_doDelete(){
   var o = this;
   o._dataActionCd = MO.EUiDataAction.Delete;
   o.doSave();
}
MO.FManageDataTable_dispose = function FManageDataTable_dispose(){
   var o = this;
   o.__base.FDuiTableFrame.dispose.call(o);
}
MO.FManageFrameDefineConsole = function FManageFrameDefineConsole(o){
   o = MO.Class.inherits(this, o, MO.FConsole);
   o._scopeCd       = MO.EScope.Global;
   o._service       = 'editor.design.frame';
   o._defines       = null;
   o.lsnsLoaded     = null;
   o.construct      = MO.FManageFrameDefineConsole_construct;
   o.load           = MO.FManageFrameDefineConsole_load;
   o.events         = null;
   o.formId         = 0;
   o.createFromName = MO.FManageFrameDefineConsole_createFromName;
   o.loadNode       = MO.FManageFrameDefineConsole_loadNode;
   o.loadService    = MO.FManageFrameDefineConsole_loadService;
   o.nextFormId     = MO.FManageFrameDefineConsole_nextFormId;
   o.get            = MO.FManageFrameDefineConsole_get;
   o.find           = MO.FManageFrameDefineConsole_find;
   o.getLov         = MO.FManageFrameDefineConsole_getLov;
   o.findLov        = MO.FManageFrameDefineConsole_findLov;
   o.getEvents      = MO.FManageFrameDefineConsole_getEvents;
   return o;
}
MO.FManageFrameDefineConsole_construct = function FManageFrameDefineConsole_construct(){
   var o = this;
   o._defines = new MO.TDictionary();
   o.lsnsLoaded = new MO.TListeners();
}
MO.FManageFrameDefineConsole_load = function FManageFrameDefineConsole_load(name){
   var o = this;
   var defines = o._defines;
   var xconfig = defines.get(name);
   if(xconfig){
      return xconfig;
   }
   var xdocument = new MO.TXmlDocument();
   var xroot = xdocument.root();
   xroot.set('action', 'query');
   var xframe = xroot.create('Frame');
   xframe.set('name', name);
   var url = MO.RDuiService.url(o._service);
   var xresult = MO.Console.find(MO.FXmlConsole).sendSync(url, xdocument);
   var xframes = xresult.nodes();
   var count = xframes.count();
   for(var i = 0; i < count; i++){
      var xframe = xframes.at(i);
      var frameName = xframe.get('name');
      defines.set(frameName, xframe);
   }
   var xframe = defines.get(name);
   if(!xframe){
      throw new MO.TError(o, 'Unknown frame. (name={1])', name);
   }
   return xframe;
}
MO.FManageFrameDefineConsole_createFromName = function FManageFrameDefineConsole_createFromName(name, type){
   var o = this;
   var doc = o.loadService(name, type);
   o.loadNode(doc);
   if(MO.EForm.Lov == type){
      return o.getLov(name);
   }else{
      return o.get(name);
   }
}
MO.FManageFrameDefineConsole_loadNode = function FManageFrameDefineConsole_loadNode(x){
   var o = this;
   var nns = x.root();
   if(nns.hasNode()){
      var nodes = nns.nodes;
      var ct = nodes.count;
      for(var n = 0; n < ct; n++){
         var node = nodes.get(n);
         var fn = node.get('name');
         var tp = node.get('type');
         if(node.hasNode()){
            var nfds = node.nodes;
            for(var k = 0; k < nfds.count; k++){
               var dd = nfds.get(k);
               if(dd.isName('Define')){
                  if(dd.hasNode()){
                     var fds = dd.nodes;
                     for(var m = 0; m < fds.count; m++){
                        var nd = fds.get(m);
                        var mp = o._defines.get(tp);
                        mp.set(fn, nd);
                     }
                  }
               }else if(dd.isName('Events')){
                  o.events.set(fn, dd);
               }
            }
         }
      }
   }
}
MO.FManageFrameDefineConsole_loadService = function FManageFrameDefineConsole_loadService(n, t){
   var o = this;
   if(!t){
      t = MO.EForm.Form;
   }
   var doc = new MO.TXmlDocument();
   var root = doc.root();
   root.set('action', 'loadDefine');
   var f = root.create('WebForm');
   f.set('name', n);
   f.set('type', t);
   var url = MO.RDuiService.url('logic.webform');
   var doc = MO.Console.find(MO.FXmlConsole).send(url, doc);
   var r = doc.root();
   if(!MO.Console.find(MO.FMessageConsole).checkResult(new TMessageArg(r))){
      return null;
   }
   return doc;
}
MO.FManageFrameDefineConsole_nextFormId = function FManageFrameDefineConsole_nextFormId(){
   return ++this.formId;
}
MO.FManageFrameDefineConsole_get = function FManageFrameDefineConsole_get(n){
   return this._defines.get(EForm.Form).get(n);
}
MO.FManageFrameDefineConsole_find = function FManageFrameDefineConsole_find(n, t){
   var o = this;
   if(EForm.Lov == t){
      return o.findLov(n);
   }
   var fc = o.get(n);
   if(MO.Class.isMode(MO.ERun.Debug)){
      MO.Memory.free(fc);
      fc = null;
      o._defines.get(EForm.Form).set(n, null);
   }
   if(!fc){
      fc = o.createFromName(n);
   }
   return fc;
}
MO.FManageFrameDefineConsole_getLov = function FManageFrameDefineConsole_getLov(n){
   return this._defines.get(EForm.Lov).get(n);
}
MO.FManageFrameDefineConsole_findLov = function FManageFrameDefineConsole_findLov(n){
   var o = this;
   var fc = o.getLov(n);
   if(!fc){
      fc = o.createFromName(n, EForm.Lov);
   }
   return fc;
}
MO.FManageFrameDefineConsole_getEvents = function FManageFrameDefineConsole_getEvents(n){
   return this.events.get(n);
}
MO.FManageFrameSet = function FManageFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FDuiFrameSet, MO.MUiStorage);
   o._styleTitleGround     = MO.Class.register(o, new MO.AStyle('_styleTitleGround', 'Title_Ground'));
   o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
   o._styleCatalogContent  = MO.Class.register(o, new MO.AStyle('_styleCatalogContent', 'Catalog_Content'));
   o._styleSpaceContent    = MO.Class.register(o, new MO.AStyle('_styleSpaceContent', 'Space_Content'));
   o._storageCode          = 'manage.logic.common.FrameSet';
   o._frameCatalog         = null;
   o._frameCatalogToolbar  = null;
   o._frameCatalogContent  = null;
   o._frameSpace           = null;
   o._frameSpaceToolbar    = null;
   o._frameSpaceContent    = null;
   o._activeFrame          = MO.Class.register(o, new MO.AGetSet('_activeFrame'));
   o.onBuilded             = MO.FManageFrameSet_onBuilded;
   o.onHistoryButtonClick  = MO.FManageFrameSet_onHistoryButtonClick;
   o.construct             = MO.FManageFrameSet_construct;
   o.setFrameTitle         = MO.FManageFrameSet_setFrameTitle;
   o.findSpaceFrame        = MO.FManageFrameSet_findSpaceFrame;
   o.hideSpaceFrames       = MO.FManageFrameSet_hideSpaceFrames;
   o.selectSpaceFrame      = MO.FManageFrameSet_selectSpaceFrame;
   o.load                  = MO.FManageFrameSet_load;
   o.dispose               = MO.FManageFrameSet_dispose;
   return o;
}
MO.FManageFrameSet_onBuilded = function FManageFrameSet_onBuilded(event){
   var o = this;
   o.__base.FDuiFrameSet.onBuilded.call(o, event);
   var control = o._historyBar = MO.Class.create(MO.FDuiHistoryBar);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.build(event);
   control.addButtonClickListener(o, o.onHistoryButtonClick);
   o._frameSpaceTitle.push(control);
}
MO.FManageFrameSet_onHistoryButtonClick = function FManageFrameSet_onHistoryButtonClick(event){
   var o = this;
   var button = event.sender;
   var frameName = button.attributeGet('frame_name');
   o.selectSpaceFrame(frameName);
}
MO.FManageFrameSet_construct = function FManageFrameSet_construct(){
   var o = this;
   o.__base.FDuiFrameSet.construct.call(o);
   o._spaceFrames = new MO.TDictionary();
}
MO.FManageFrameSet_setFrameTitle = function FManageFrameSet_setFrameTitle(title){
   var o = this;
}
MO.FManageFrameSet_findSpaceFrame = function FManageFrameSet_findSpaceFrame(code){
   var o = this;
   var frame = o._spaceFrames.get(code);
   if(!frame){
      frame = MO.Console.find(MO.FDuiFrameConsole).get(o, code, o._frameSpaceContent._hContainer);
      frame._frameSet = o;
      o._spaceFrames.set(code, frame);
   }
   return frame;
}
MO.FManageFrameSet_hideSpaceFrames = function FManageFrameSet_hideSpaceFrames(){
   var o = this;
   var frames = o._spaceFrames;
   var count = frames.count();
   for(var i = 0; i < count; i++){
      var frame = frames.at(i);
      frame.hide();
   }
}
MO.FManageFrameSet_selectSpaceFrame = function FManageFrameSet_selectSpaceFrame(frameName){
   var o = this;
   var hToolBarPanel = o._frameSpaceToolBar._hPanel;
   MO.Window.Html.clear(hToolBarPanel);
   o.hideSpaceFrames();
   var frame = null;
   if(frameName){
      frame = o.findSpaceFrame(frameName);
      frame.show();
      var frameLabel = frame.label();
      o.setFrameTitle(frame.label());
      var toolBar = frame.findControl('toolBar');
      if(toolBar){
         toolBar.setPanel(hToolBarPanel);
      }
   }
   o._activeFrame = frame;
   if(frame){
      o.storageSet('frame_name', frameName)
      o.storageUpdate();
   }
   return frame;
}
MO.FManageFrameSet_load = function FManageFrameSet_load(){
   var o = this;
   var frameName = o.storageGet('frame_name');
   if(frameName){
      var frame = o.selectSpaceFrame(frameName);
      frame.psMode(MO.EUiMode.Update);
      frame.psRefresh();
      if(MO.Class.isClass(frame, MO.FDuiFormFrame)){
         frame.dataModify();
      }else if(MO.Class.isClass(frame, MO.FDuiTableFrame)){
         frame._dsPageSize = 20;
         frame._dsPage = 0;
         frame.resetSearch();
         frame.doFetch();
      }
      var historyBar = o._historyBar;
      historyBar.historyClear();
      var historyButton = historyBar.historyPush();
      historyButton.setLabel(frame.label());
      historyButton.attributeSet('frame_name', frame.name());
   }
}
MO.FManageFrameSet_dispose = function FManageFrameSet_dispose(){
   var o = this;
   o._spaceFrames = MO.Lang.Object.dispose(o._spaceFrames, true);
   o.__base.FDuiFrameSet.dispose.call(o);
}
MO.FManageSpaceToolBar = function FManageSpaceToolBar(o){
   o = MO.Class.inherits(this, o, MO.FDuiToolBar);
   o._frameName     = 'manage.logic.SpaceToolBar';
   o.onInsertClick  = MO.FManageSpaceToolBar_onInsertClick;
   o.onUpdateClick  = MO.FManageSpaceToolBar_onUpdateClick;
   o.onDeleteClick  = MO.FManageSpaceToolBar_onDeleteClick;
   o.onSearchClick  = MO.FManageSpaceToolBar_onSearchClick;
   o.onBuilded      = MO.FManageSpaceToolBar_onBuilded;
   o.construct      = MO.FManageSpaceToolBar_construct;
   o.dispose        = MO.FManageSpaceToolBar_dispose;
   return o;
}
MO.FManageSpaceToolBar_onInsertClick = function FManageSpaceToolBar_onInsertClick(event){
   var o = this;
   var frame = o._frameSet.activeFrame();
   if(MO.Class.isClass(frame, MO.FDuiTableFrame)){
      var unitFrameName = frame.unitFrameName();
      var unitFrame = o._frameSet.selectSpaceFrame(unitFrameName);
      unitFrame.doPrepare();
   }
}
MO.FManageSpaceToolBar_onUpdateClick = function FManageSpaceToolBar_onUpdateClick(event){
   var o = this;
   var frame = o._frameSet.activeFrame();
   frame.doSave();
}
MO.FManageSpaceToolBar_onDeleteClick = function FManageSpaceToolBar_onDeleteClick(event){
   var o = this;
   var frame = o._frameSet.activeFrame();
   frame.doDelete();
}
MO.FManageSpaceToolBar_onBuilded = function FManageSpaceToolBar_onBuilded(p){
   var o = this;
   o.__base.FDuiToolBar.onBuilded.call(o, p);
   o._controlInsert.addClickListener(o, o.onInsertClick);
   o._controlUpdate.addClickListener(o, o.onUpdateClick);
   o._controlDelete.addClickListener(o, o.onDeleteClick);
}
MO.FManageSpaceToolBar_construct = function FManageSpaceToolBar_construct(){
   var o = this;
   o.__base.FDuiToolBar.construct.call(o);
}
MO.FManageSpaceToolBar_dispose = function FManageSpaceToolBar_dispose(){
   var o = this;
   o.__base.FDuiToolBar.dispose.call(o);
}
MO.FManageWorkspace = function FManageWorkspace(o){
   o = MO.Class.inherits(this, o, MO.FDuiWorkspace, MO.MUiStorage);
   o._frameName          = 'manage.logic.Workspace';
   o._storageCode        = o._frameName;
   o._styleTitlePanel    = MO.Class.register(o, new MO.AStyle('_styleTitlePanel', 'Title_Panel'));
   o._styleTitleLogo     = MO.Class.register(o, new MO.AStyle('_styleTitleLogo', 'Title_Logo'));
   o._styleTitleLabel    = MO.Class.register(o, new MO.AStyle('_styleTitleLabel', 'Title_Label'));
   o._styleMenuBarGround = MO.Class.register(o, new MO.AStyle('_styleMenuBarGround', 'MenuBar_Ground'));
   o._styleModuleGround  = MO.Class.register(o, new MO.AStyle('_styleModuleGround', 'Module_Ground'));
   o._styleSpaceGround   = MO.Class.register(o, new MO.AStyle('_styleSpaceGround', 'Space_Ground'));
   o._activeFrameSetCode = null;
   o._activeProjectGuid  = null;
   o._frameToolBar       = null;
   o._frameStatusBar     = null;
   o._activeFrameSet     = null;
   o._frameSets          = null;
   o.onBuilded           = MO.FManageWorkspace_onBuilded;
   o.onSliderButtonClick = MO.FManageWorkspace_onSliderButtonClick;
   o.construct           = MO.FManageWorkspace_construct;
   o.selectFrameSet      = MO.FManageWorkspace_selectFrameSet;
   o.load                = MO.FManageWorkspace_load;
   o.dispose             = MO.FManageWorkspace_dispose;
   return o;
}
MO.FManageWorkspace_onBuilded = function FManageWorkspace_onBuilded(event){
   var o = this;
   o.__base.FDuiWorkspace.onBuilded.call(o, event);
   o._frameMenuBar._hPanel.className = o.styleName('MenuBar_Ground');
   o._frameModule._hPanel.className = o.styleName('Module_Ground');
   o._frameSpace._hPanel.className = o.styleName('Space_Ground');
   o._controlCommonButton.addClickListener(o, o.onSliderButtonClick);
   o._controlPersonButton.addClickListener(o, o.onSliderButtonClick);
   o._controlLoggerButton.addClickListener(o, o.onSliderButtonClick);
   var hTitleForm = MO.Window.Builder.appendTable(o._frameMenuBar._hPanel, o.styleName('Title_Panel'));
   var hTitleLine = MO.Window.Builder.appendTableRow(hTitleForm);
   var hTitleCell = MO.Window.Builder.appendTableCell(hTitleLine, o.styleName('Title_Logo'));
   hTitleCell.align = 'center';
   hTitleCell.vAlign = 'middle';
   MO.Window.Builder.appendIcon(hTitleCell, null, 'editor.design.logo|png');
   var hTitleCell = MO.Window.Builder.appendTableCell(hTitleLine, o.styleName('Title_Label'));
   MO.Window.Html.textSet(hTitleCell, '业务管理平台');
   return;
   var hTable = MO.Window.Builder.createTable(event);
   hTable.width = '100%';
   var hRow = MO.Window.Builder.appendTableRow(hTable);
   o._hMenuPanel = MO.Window.Builder.appendTableCell(hRow);
   var control = o._tabBar = MO.Class.create(MO.FManageTabBar);
   control._workspace = o;
   control.buildDefine(event);
   var hCell = MO.Window.Builder.appendTableCell(hRow);
   hCell.width = '240px';
   hCell.align = 'right';
   hCell.vAlign = 'bottom';
   hCell.appendChild(control._hPanel);
   o._frameMenuBar._hPanel.appendChild(hTable);
}
MO.FManageWorkspace_onSliderButtonClick = function FManageWorkspace_onSliderButtonClick(event){
   var o = this;
   var button = event.sender;
   var name = button.name();
   switch(name){
      case 'commonButton':
         o.selectFrameSet(MO.EManageFrameSet.CommonFrameSet);
         break;
      case 'personButton':
         o.selectFrameSet(MO.EManageFrameSet.PersonFrameSet);
         break;
      case 'loggerButton':
         o.selectFrameSet(MO.EManageFrameSet.LoggerFrameSet);
         break;
      default:
         throw new TError(o, 'Invalid click.');
   }
}
MO.FManageWorkspace_construct = function FManageWorkspace_construct(){
   var o = this;
   o.__base.FDuiWorkspace.construct.call(o);
   o._frameSets = new MO.TDictionary();
}
MO.FManageWorkspace_selectFrameSet = function FManageWorkspace_selectFrameSet(name, guid){
   var o = this;
   var frameSet = o._frameSets.get(name);
   if(!frameSet){
      if(name == MO.EManageFrameSet.CommonFrameSet){
         frameSet = MO.Console.find(MO.FDuiFrameConsole).findByClass(o, MO.FManageLgCommonFrameSet);
      }else if(name == MO.EManageFrameSet.PersonFrameSet){
         frameSet = MO.Console.find(MO.FDuiFrameConsole).findByClass(o, MO.FManageLgPersonFrameSet);
      }else if(name == MO.EManageFrameSet.LoggerFrameSet){
         frameSet = MO.Console.find(MO.FDuiFrameConsole).findByClass(o, MO.FManageLgLoggerFrameSet);
      }else{
         throw new MO.TError('Unknown frameset. (name={1})', name);
      }
      frameSet._workspace = o;
      o._frameSets.set(name, frameSet);
   }
   var activeFrameSet = o._activeFrameSet;
   if(activeFrameSet != frameSet){
      if(activeFrameSet){
         o._frameSpace.remove(activeFrameSet);
      }
      o._frameSpace.push(frameSet);
      frameSet.psResize();
   }
   o._activeFrameSet = frameSet;
   switch(name){
      case MO.EManageFrameSet.CommonFrameSet:
         frameSet.load();
         break;
      case MO.EManageFrameSet.PersonFrameSet:
         frameSet.load();
         break;
      case MO.EManageFrameSet.LoggerFrameSet:
         frameSet.load();
         break;
      default:
         throw new TError('Unknown frameset. (name={1})', name);
   }
   o.storageSet('frameset_code', name)
   o.storageSet('frameset_guid', guid)
   o.storageUpdate();
   return frameSet;
}
MO.FManageWorkspace_load = function FManageWorkspace_load(){
   var o = this;
   var code = o._activeFrameSetCode = o.storageGet('frameset_code', MO.EManageFrameSet.SolutionFrameSet);
   var guid = o._activeFrameSetGuid = o.storageGet('frameset_guid');
   var button = null;
   if(code == MO.EManageFrameSet.CommonFrameSet){
      o.selectFrameSet(MO.EManageFrameSet.CommonFrameSet);
   }else if(code == MO.EManageFrameSet.PersonFrameSet){
      o.selectFrameSet(MO.EManageFrameSet.PersonFrameSet);
   }else if(code == MO.EManageFrameSet.LoggerFrameSet){
      o.selectFrameSet(MO.EManageFrameSet.LoggerFrameSet);
   }
}
MO.FManageWorkspace_dispose = function FManageWorkspace_dispose(){
   var o = this;
   o._frameSets = MO.Lang.Object.dispose(o._frameSets, true);
   o.__base.FDuiWorkspace.dispose.call(o);
}
MO.FManageLgCommonCatalogContent = function FManageLgCommonCatalogContent(o){
   o = MO.Class.inherits(this, o, MO.FManageCatalogContent);
   o._frameName = 'manage.logic.common.CatalogContent';
   return o;
}
MO.FManageLgCommonCatalogToolBar = function FManageLgCommonCatalogToolBar(o){
   o = MO.Class.inherits(this, o, MO.FManageCatalogToolBar);
   o._frameName = 'manage.logic.common.CatalogToolBar';
   return o;
}
MO.FManageLgCommonFrameSet = function FManageLgCommonFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FManageFrameSet);
   o._frameName = 'manage.logic.common.FrameSet';
   o.onBuilded  = MO.FManageLgCommonFrameSet_onBuilded;
   return o;
}
MO.FManageLgCommonFrameSet_onBuilded = function FManageLgCommonFrameSet_onBuilded(event){
   var o = this;
   o.__base.FManageFrameSet.onBuilded.call(o, event);
   o._frameCatalogTitle._hPanel.className = o.styleName('Title_Ground');
   o._frameCatalogToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
   o._frameSpaceTitle._hPanel.className = o.styleName('Title_Ground');
   o._frameSpaceToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._frameSpaceContent._hPanel.className = o.styleName('Space_Content');
   var spliter = o._catalogSplitter = o.searchControl('catalogSpliter');
   spliter.setAlignCd(MO.EUiAlign.Left);
   spliter.setSizeHtml(o._frameCatalog._hPanel);
   var control = o._catalogToolBar = MO.Class.create(MO.FManageLgCommonCatalogToolBar);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.buildDefine(event);
   o._frameCatalogToolBar.push(control);
   var control = o._catalogContent = MO.Class.create(MO.FManageLgCommonCatalogContent);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.buildDefine(event);
   o._frameCatalogContent.push(control);
   MO.Window.Html.textSet(o._frameCatalogTitle._hPanel, '共通业务');
}
MO.FManageLgPersonCatalogContent = function FManageLgPersonCatalogContent(o){
   o = MO.Class.inherits(this, o, MO.FManageCatalogContent);
   o._frameName = 'manage.logic.person.CatalogContent';
   return o;
}
MO.FManageLgPersonCatalogToolBar = function FManageLgPersonCatalogToolBar(o){
   o = MO.Class.inherits(this, o, MO.FManageCatalogToolBar);
   o._frameName = 'manage.logic.person.CatalogToolBar';
   return o;
}
MO.FManageLgPersonFrameSet = function FManageLgPersonFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FManageFrameSet);
   o._frameName = 'manage.logic.person.FrameSet';
   o.onBuilded  = MO.FManageLgPersonFrameSet_onBuilded;
   return o;
}
MO.FManageLgPersonFrameSet_onBuilded = function FManageLgPersonFrameSet_onBuilded(event){
   var o = this;
   o.__base.FManageFrameSet.onBuilded.call(o, event);
   o._frameCatalogTitle._hPanel.className = o.styleName('Title_Ground');
   o._frameCatalogToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
   o._frameSpaceTitle._hPanel.className = o.styleName('Title_Ground');
   o._frameSpaceToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._frameSpaceContent._hPanel.className = o.styleName('Space_Content');
   var spliter = o._catalogSplitter = o.searchControl('catalogSpliter');
   spliter.setAlignCd(MO.EUiAlign.Left);
   spliter.setSizeHtml(o._frameCatalog._hPanel);
   var control = o._catalogToolBar = MO.Class.create(MO.FManageLgPersonCatalogToolBar);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.buildDefine(event);
   o._frameCatalogToolBar.push(control);
   var control = o._catalogContent = MO.Class.create(MO.FManageLgPersonCatalogContent);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.buildDefine(event);
   o._frameCatalogContent.push(control);
   MO.Window.Html.textSet(o._frameCatalogTitle._hPanel, '用户业务');
}
MO.FManageLgLoggerCatalogContent = function FManageLgLoggerCatalogContent(o){
   o = MO.Class.inherits(this, o, MO.FManageCatalogContent);
   o._frameName = 'manage.logic.logger.CatalogContent';
   return o;
}
MO.FManageLgLoggerCatalogToolBar = function FManageLgLoggerCatalogToolBar(o){
   o = MO.Class.inherits(this, o, MO.FManageCatalogToolBar);
   o._frameName = 'manage.logic.logger.CatalogToolBar';
   return o;
}
MO.FManageLgLoggerFrameSet = function FManageLgLoggerFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FManageFrameSet);
   o._frameName = 'manage.logic.logger.FrameSet';
   o.onBuilded  = MO.FManageLgLoggerFrameSet_onBuilded;
   return o;
}
MO.FManageLgLoggerFrameSet_onBuilded = function FManageLgLoggerFrameSet_onBuilded(event){
   var o = this;
   o.__base.FManageFrameSet.onBuilded.call(o, event);
   o._frameCatalogTitle._hPanel.className = o.styleName('Title_Ground');
   o._frameCatalogToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
   o._frameSpaceTitle._hPanel.className = o.styleName('Title_Ground');
   o._frameSpaceToolBar._hPanel.className = o.styleName('Toolbar_Ground');
   o._frameSpaceContent._hPanel.className = o.styleName('Space_Content');
   var spliter = o._catalogSplitter = o.searchControl('catalogSpliter');
   spliter.setAlignCd(MO.EUiAlign.Left);
   spliter.setSizeHtml(o._frameCatalog._hPanel);
   var control = o._catalogToolBar = MO.Class.create(MO.FManageLgLoggerCatalogToolBar);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.buildDefine(event);
   o._frameCatalogToolBar.push(control);
   var control = o._catalogContent = MO.Class.create(MO.FManageLgLoggerCatalogContent);
   control._workspace = o._workspace;
   control._frameSet = o;
   control.buildDefine(event);
   o._frameCatalogContent.push(control);
   MO.Window.Html.textSet(o._frameCatalogTitle._hPanel, '日志业务');
}
with(MO){
   MO.FDsPrivateTabBar = function FDsPrivateTabBar(o){
      o = MO.Class.inherits(this, o, FDuiTabBar);
      o._frameName            = 'resource.private.TabBar';
      o._resourceTypeCd       = 'private';
      o._controlPrivateButton = null;
      o._controlTeamButton    = null;
      o._controlShareButton   = null;
      o.onBuilded             = FDsPrivateTabBar_onBuilded;
      o.onButtonClick         = FDsPrivateTabBar_onButtonClick;
      o.construct             = FDsPrivateTabBar_construct;
      o.dispose               = FDsPrivateTabBar_dispose;
      return o;
   }
   MO.FDsPrivateTabBar_onBuilded = function FDsPrivateTabBar_onBuilded(p){
      var o = this;
      o.__base.FDuiTabBar.onBuilded.call(o, p);
      o._controlProjectButton.addClickListener(o, o.onButtonClick);
      o._controlResourceButton.addClickListener(o, o.onButtonClick);
      o._controlTeamButton.addClickListener(o, o.onButtonClick);
      o._controlPublishButton.addClickListener(o, o.onButtonClick);
   }
   MO.FDsPrivateTabBar_onButtonClick = function FDsPrivateTabBar_onButtonClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      if(name == 'solution'){
         o._workspace.selectFrameSet(EDsFrameSet.PrivateSolutionFrameSet);
      }else if(name == 'project'){
         o._workspace.selectFrameSet(EDsFrameSet.PrivateProjectFrameSet);
      }else if(name == 'resource'){
         o._workspace.selectFrameSet(EDsFrameSet.PrivateResourceFrameSet);
      }else{
         alert('功能未开启，请以后关注。');
      }
   }
   MO.FDsPrivateTabBar_construct = function FDsPrivateTabBar_construct(){
      var o = this;
      o.__base.FDuiTabBar.construct.call(o);
   }
   MO.FDsPrivateTabBar_dispose = function FDsPrivateTabBar_dispose(){
      var o = this;
      o.__base.FDuiTabBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsPrivateWorkspace = function FDsPrivateWorkspace(o){
      o = MO.Class.inherits(this, o, FDuiWorkspace, MUiStorage);
      o._frameName            = 'resource.private.Workspace';
      o._storageCode          = o._frameName;
      o._styleMenuBarGround   = MO.Class.register(o, new MO.AStyle('_styleMenuBarGround', 'MenuBar_Ground'));
      o._styleBodyGround      = MO.Class.register(o, new MO.AStyle('_styleBodyGround', 'Body_Ground'));
      o._styleStatusBarGround = MO.Class.register(o, new MO.AStyle('_styleStatusBarGround', 'StatusBar_Ground'));
      o._activeFrameSetCode   = null;
      o._activeProjectGuid    = null;
      o._frameToolBar         = null;
      o._frameStatusBar       = null;
      o._activeFrameSet       = null;
      o._frameSets            = null;
      o.onBuilded             = FDsPrivateWorkspace_onBuilded;
      o.construct             = FDsPrivateWorkspace_construct;
      o.selectFrameSet        = FDsPrivateWorkspace_selectFrameSet;
      o.load                  = FDsPrivateWorkspace_load;
      o.dispose               = FDsPrivateWorkspace_dispose;
      return o;
   }
   MO.FDsPrivateWorkspace_onBuilded = function FDsPrivateWorkspace_onBuilded(event){
      var o = this;
      o.__base.FDuiWorkspace.onBuilded.call(o, event);
      o._frameMenuBar._hPanel.className = o.styleName('MenuBar_Ground');
      o._frameBody._hPanel.className = o.styleName('Body_Ground');
      o._frameStatusBar._hPanel.className = o.styleName('StatusBar_Ground');
      var hTable = MO.Window.Builder.createTable(event);
      hTable.width = '100%';
      var hRow = MO.Window.Builder.appendTableRow(hTable);
      o._hMenuPanel = MO.Window.Builder.appendTableCell(hRow);
      var control = o._tabBar = MO.Class.create(FDsPrivateTabBar);
      control._workspace = o;
      control.buildDefine(event);
      var hCell = MO.Window.Builder.appendTableCell(hRow);
      hCell.width = '100px';
      hCell.align = 'right';
      hCell.vAlign = 'bottom';
      hCell.appendChild(control._hPanel);
      o._frameMenuBar._hPanel.appendChild(hTable);
   }
   MO.FDsPrivateWorkspace_construct = function FDsPrivateWorkspace_construct(){
      var o = this;
      o.__base.FDuiWorkspace.construct.call(o);
      o._frameSets = new TDictionary();
   }
   MO.FDsPrivateWorkspace_selectFrameSet = function FDsPrivateWorkspace_selectFrameSet(name, guid){
      var o = this;
      var frameSet = o._frameSets.get(name);
      if(!frameSet){
         if(name == EDsFrameSet.PrivateSolutionFrameSet){
            var menuBar = MO.Class.create(FDsSolutionMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsSolutionFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.PrivateProjectFrameSet){
            var menuBar = MO.Class.create(FDsPrivateProjectMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsPrivateProjectFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.PrivateResourceFrameSet){
            var menuBar = MO.Class.create(FDsPrivateResourceMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsPrivateResourceFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.PrivateBitmapFrameSet){
            var menuBar = MO.Class.create(FDsPrivateBitmapMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsPrivateBitmapFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.PrivateMaterialFrameSet){
            var menuBar = MO.Class.create(FDsPrivateMaterialMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsPrivateMaterialFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.PrivateModelFrameSet){
            var menuBar = MO.Class.create(FDsPrivateModelMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsPrivateModelFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.PrivateTemplateFrameSet){
            var menuBar = MO.Class.create(FDsPrivateTemplateMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsPrivateTemplateFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.PrivateSceneFrameSet){
            var menuBar = MO.Class.create(FDsPrivateSceneMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsPrivateSceneFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else{
            throw new TError('Unknown frameset. (name={1})', name);
         }
         o._frameSets.set(name, frameSet);
      }
      var activeFrameSet = o._activeFrameSet;
      if(activeFrameSet != frameSet){
         if(activeFrameSet){
            o._hMenuPanel.removeChild(activeFrameSet._menuBar._hPanel);
            o._frameBody.remove(activeFrameSet);
         }
         o._hMenuPanel.appendChild(frameSet._menuBar._hPanel);
         o._frameBody.push(frameSet);
         frameSet.psResize();
      }
      o._activeFrameSet = frameSet;
      switch(name){
         case EDsFrameSet.PrivateSolutionFrameSet:
            frameSet.load();
            break;
         case EDsFrameSet.PrivateProjectFrameSet:
            frameSet.loadByGuid(guid);
            break;
         case EDsFrameSet.PrivateResourceFrameSet:
            frameSet.load();
            break;
         case EDsFrameSet.PrivateBitmapFrameSet:
            frameSet.loadByGuid(guid);
            break;
         case EDsFrameSet.PrivateMaterialFrameSet:
            frameSet.loadByGuid(guid);
            break;
         case EDsFrameSet.PrivateModelFrameSet:
            frameSet.loadByGuid(guid);
            break;
         case EDsFrameSet.PrivateTemplateFrameSet:
            frameSet.loadByGuid(guid);
            break;
         case EDsFrameSet.PrivateSceneFrameSet:
            frameSet.loadByGuid(guid);
            break;
         default:
            throw new TError('Unknown frameset. (name={1})', name);
      }
      o.storageSet('frameset_code', name)
      o.storageSet('frameset_guid', guid)
      o.storageUpdate();
      return frameSet;
   }
   MO.FDsPrivateWorkspace_load = function FDsPrivateWorkspace_load(){
      var o = this;
      var code = o._activeFrameSetCode = o.storageGet('frameset_code', EDsFrameSet.SolutionFrameSet);
      var guid = o._activeFrameSetGuid = o.storageGet('frameset_guid');
      var button = null;
      if(code == EDsFrameSet.SolutionFrameSet){
         button = o._tabBar.findControl('solution');
         button.doClick();
      }else if(code == EDsFrameSet.PrivateProjectFrameSet){
         button = o._tabBar.findControl('solution');
         o._tabBar.select(button);
         o.selectFrameSet(code, guid)
      }else if(code == EDsFrameSet.PrivateResourceFrameSet){
         button = o._tabBar.findControl('resource');
         button.doClick();
      }else if(code == EDsFrameSet.PrivateBitmapFrameSet){
         button = o._tabBar.findControl('resource');
         o._tabBar.select(button);
         o.selectFrameSet(code, guid)
      }else if(code == EDsFrameSet.PrivateMaterialFrameSet){
         button = o._tabBar.findControl('resource');
         o._tabBar.select(button);
         o.selectFrameSet(code, guid)
      }else if(code == EDsFrameSet.PrivateModelFrameSet){
         button = o._tabBar.findControl('resource');
         o._tabBar.select(button);
         o.selectFrameSet(code, guid)
      }else if(code == EDsFrameSet.PrivateTemplateFrameSet){
         button = o._tabBar.findControl('resource');
         o._tabBar.select(button);
         o.selectFrameSet(code, guid)
      }else if(code == EDsFrameSet.PrivateSceneFrameSet){
         button = o._tabBar.findControl('resource');
         o._tabBar.select(button);
         o.selectFrameSet(code, guid)
      }else{
         button = o._tabBar.findControl('solution');
         button.doClick();
      }
   }
   MO.FDsPrivateWorkspace_dispose = function FDsPrivateWorkspace_dispose(){
      var o = this;
      o._frameSets = MO.Lang.Object.dispose(o._frameSets);
      o.__base.FDuiWorkspace.dispose.call(o);
   }
}
with(MO){
   MO.FDsPrivateProjectFrameSet = function FDsPrivateProjectFrameSet(o){
      o = MO.Class.inherits(this, o, FDsProjectFrameSet);
      o._frameName = 'resource.private.project.FrameSet';
      o.onBuilded  = FDsPrivateProjectFrameSet_onBuilded;
      return o;
   }
   MO.FDsPrivateProjectFrameSet_onBuilded = function FDsPrivateProjectFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsProjectFrameSet.onBuilded.call(o, event);
      var control = o._sceneListToolbar = MO.Class.create(FDsProjectSceneListToolBar);
      control._frameSet = o;
      control.buildDefine(event);
      o._frameSceneListToolBar.push(control);
      var control = o._sceneListContent = MO.Class.create(FDsProjectSceneListContent);
      control._frameSet = o;
      control.build(event);
      o._frameSceneListContent.push(control);
      var control = o._sceneCatalogToolbar = MO.Class.create(FDsProjectSceneCatalogToolBar);
      control._frameSet = o;
      control.buildDefine(event);
      o._frameSceneCatalogToolBar.push(control);
      var control = o._sceneCatalogContent = MO.Class.create(FDsProjectSceneCatalogContent);
      control._frameSet = o;
      control.build(event);
      o._frameSceneCatalogContent.push(control);
      var control = o._canvasSpaceToolbar = MO.Class.create(FDsProjectCanvasSpaceToolBar);
      control._frameSet = o;
      control.buildDefine(event);
      o._frameCanvasSpaceToolBar.push(control);
      var control = o._canvasPreviewToolbar = MO.Class.create(FDsProjectCanvasPreviewToolBar);
      control._frameSet = o;
      control.buildDefine(event);
      o._frameCanvasPreviewToolBar.push(control);
      var control = o._propertyToolbar = MO.Class.create(FDsProjectPropertyToolBar);
      control._frameSet = o;
      control.buildDefine(event);
      o._framePropertyAttributeToolBar.push(control);
   }
}
with(MO){
   MO.FDsPrivateProjectMenuBar = function FDsPrivateProjectMenuBar(o){
      o = MO.Class.inherits(this, o, FDsProjectMenuBar);
      o._frameName = 'resource.private.project.MenuBar';
      o.onBuilded  = FDsPrivateProjectMenuBar_onBuilded;
      return o;
   }
   MO.FDsPrivateProjectMenuBar_onBuilded = function FDsPrivateProjectMenuBar_onBuilded(p){
      var o = this;
      o.__base.FDsProjectMenuBar.onBuilded.call(o, p);
   }
}
with(MO){
   MO.FDsPrivateResourceCatalogToolBar = function FDsPrivateResourceCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDsResourceCatalogToolBar);
      o._frameName = 'resource.private.resource.CatalogToolBar';
      return o;
   }
}
with(MO){
   MO.FDsPrivateResourceFrameSet = function FDsPrivateResourceFrameSet(o){
      o = MO.Class.inherits(this, o, FDsResourceFrameSet);
      o._frameName        = 'resource.share.resource.FrameSet';
      o.onBuilded         = FDsPrivateResourceFrameSet_onBuilded;
      o.onCatalogSelected = FDsPrivateResourceFrameSet_onCatalogSelected;
      return o;
   }
   MO.FDsPrivateResourceFrameSet_onBuilded = function FDsPrivateResourceFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsResourceFrameSet.onBuilded.call(o, event);
      o._frameCatalogToolBar._hPanel.className = o.styleName('Toolbar_Ground');
      o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
      o._frameListToolBar._hPanel.className = o.styleName('Toolbar_Ground');
      o._frameListContent._hPanel.className = o.styleName('List_Content');
      var f = o._catalogSplitter = o.searchControl('catalogSpliter');
      f.setAlignCd(EUiAlign.Left);
      f.setSizeHtml(o._frameCatalog._hPanel);
      var control = o._catalogToolbar = MO.Class.create(FDsPrivateResourceCatalogToolBar);
      control._workspace = o._workspace;
      control._frameSet = o;
      control.buildDefine(event);
      o._frameCatalogToolBar.push(control);
      var control = o._catalogContent = MO.Class.create(FDsResourceCatalogContent);
      control._workspace = o._workspace;
      control._frameSet = o;
      control.build(event);
      o._frameCatalogContent.push(control);
      var control = o._listToolBar = MO.Class.create(FDsPrivateResourceListToolBar);
      control._workspace = o._workspace;
      control._frameSet = o;
      control.buildDefine(event);
      o._frameListToolBar.push(control);
      var control = o._listContent = MO.Class.create(FDsResourceListContent);
      control._workspace = o._workspace;
      control._frameSet = o;
      control.build(event);
      o._frameListContent.push(control);
   }
   MO.FDsPrivateResourceFrameSet_onCatalogSelected = function FDsPrivateResourceFrameSet_onCatalogSelected(p, pc){
      var o = this;
      var space = o._activeSpace;
      var fs = o._propertyFrames;
      var c = fs.count();
      for(var i = 0; i < c; i++){
         var f = fs.value(i);
         f.hide();
      }
      if(MO.Class.isClass(p, FE3dStage)){
         var f = o.findPropertyFrame(EDsFrame.MeshSpacePropertyFrame);
         f.show();
         f.loadObject(space, space);
      }else if(MO.Class.isClass(p, FG3dTechnique)){
         var f = o.findPropertyFrame(EDsFrame.MeshTechniquePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dRegion)){
         var f = o.findPropertyFrame(EDsFrame.MeshRegionPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dCamera)){
         var f = o.findPropertyFrame(EDsFrame.MeshCameraPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dDirectionalLight)){
         var f = o.findPropertyFrame(EDsFrame.MeshLightPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshDisplay)){
         var f = o.findPropertyFrame(EDsFrame.MeshDisplayPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dMaterial)){
         var f = o.findPropertyFrame(EDsFrame.MeshMaterialPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshRenderable)){
         var f = o.findPropertyFrame(EDsFrame.MeshRenderablePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else{
         throw new TError('Unknown select object type. (value={1})', p);
      }
   }
}
with(MO){
   MO.FDsPrivateResourceListToolBar = function FDsPrivateResourceListToolBar(o){
      o = MO.Class.inherits(this, o, FDsResourceListToolBar);
      o._frameName   = 'resource.private.resource.ListToolBar';
      o._storageCode = o._frameName;
      return o;
   }
}
with(MO){
   MO.FDsPrivateResourceMenuBar = function FDsPrivateResourceMenuBar(o){
      o = MO.Class.inherits(this, o, FDsResourceMenuBar);
      o._frameName      = 'resource.private.resource.MenuBar';
      o._controlRefresh = null;
      o.onBuilded       = FDsPrivateResourceMenuBar_onBuilded;
      o.onRefreshClick  = FDsPrivateResourceMenuBar_onRefreshClick;
      return o;
   }
   MO.FDsPrivateResourceMenuBar_onBuilded = function FDsPrivateResourceMenuBar_onBuilded(p){
      var o = this;
      o.__base.FDsResourceMenuBar.onBuilded.call(o, p);
      o._controlImportPicture.addClickListener(o, o.onImportPictureClick);
      o._controlImportModel.addClickListener(o, o.onImportModelClick);
      o._controlCreateMaterial.addClickListener(o, o.onCreateMaterialClick);
      o._controlCreateTemplate.addClickListener(o, o.onCreateTemplateClick);
      o._controlCreateScene.addClickListener(o, o.onCreateSceneClick);
      o._controlDelete.addClickListener(o, o.onDeleteClick);
      o._controlShareOpen.addClickListener(o, o.onShareClick);
      o._controlShareClose.addClickListener(o, o.onShareClick);
   }
   MO.FDsPrivateResourceMenuBar_onRefreshClick = function FDsPrivateResourceMenuBar_onRefreshClick(event){
   }
}
with(MO){
   MO.FDsPrivateBitmapCanvasToolBar = function FDsPrivateBitmapCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDsBitmapCanvasToolBar);
      o._frameName = 'resource.private.bitmap.CanvasToolBar';
      return o;
   }
}
with(MO){
   MO.FDsPrivateBitmapFrameSet = function FDsPrivateBitmapFrameSet(o){
      o = MO.Class.inherits(this, o, FDsBitmapFrameSet);
      o._frameName = 'resource.private.bitmap.FrameSet';
      o.onBuilded  = FDsPrivateBitmapFrameSet_onBuilded;
      return o;
   }
   MO.FDsPrivateBitmapFrameSet_onBuilded = function FDsPrivateBitmapFrameSet_onBuilded(p){
      var o = this;
      o.__base.FDsBitmapFrameSet.onBuilded.call(o, p);
      var toolbar = o._canvasToolBar = MO.Class.create(FDsPrivateBitmapCanvasToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(p);
      o._frameCanvasToolBar.push(toolbar);
      var canvas = o._canvasContent = MO.Class.create(FDsBitmapCanvasContent);
      canvas._frameSet = o;
      canvas._hParent = o._frameCanvasContent._hPanel;
      canvas._hParent.style.backgroundColor = '#333333';
      canvas._hParent.style.scroll = 'auto';
      canvas.build(p);
      o._frameCanvasContent.push(canvas);
      var toolbar = o._propertyToolBar = MO.Class.create(FDsBitmapPropertyToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(p);
      o._framePropertyToolBar.push(toolbar);
      var frame = o.findPropertyFrame(EDsFrame.BitmapPropertyFrame);
      o._framePropertyContent.push(frame);
   }
}
with(MO){
   MO.FDsPrivateBitmapMenuBar = function FDsPrivateBitmapMenuBar(o){
      o = MO.Class.inherits(this, o, FDsBitmapMenuBar);
      o._frameName  = 'resource.private.bitmap.MenuBar';
      o.onBuilded   = FDsPrivateBitmapMenuBar_onBuilded;
      o.onBackClick = FDsPrivateBitmapMenuBar_onBackClick;
      return o;
   }
   MO.FDsPrivateBitmapMenuBar_onBuilded = function FDsPrivateBitmapMenuBar_onBuilded(event){
      var o = this;
      o.__base.FDsBitmapMenuBar.onBuilded.call(o, event);
      o._controlBack.addClickListener(o, o.onBackClick);
      o._controlSave.addClickListener(o, o.onSaveClick);
      o._controlImport.addClickListener(o, o.onImportClick);
   }
   MO.FDsPrivateBitmapMenuBar_onBackClick = function FDsPrivateBitmapMenuBar_onBackClick(event){
      var o = this;
      var workspace = o._frameSet._workspace;
      workspace.selectFrameSet(EDsFrameSet.PrivateResourceFrameSet);
   }
}
with(MO){
   MO.FDsPrivateMaterialCanvasToolBar = function FDsPrivateMaterialCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDsMaterialCanvasToolBar);
      o._frameName = 'resource.private.material.CanvasToolBar';
      return o;
   }
}
with(MO){
   MO.FDsPrivateMaterialCatalogToolBar = function FDsPrivateMaterialCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDsMaterialCatalogToolBar);
      o._frameName = 'resource.private.material.CatalogToolBar';
      return o;
   }
}
with(MO){
   MO.FDsPrivateMaterialFrameSet = function FDsPrivateMaterialFrameSet(o){
      o = MO.Class.inherits(this, o, FDsMaterialFrameSet);
      o._frameName = 'resource.private.material.FrameSet';
      o.onBuilded  = FDsPrivateMaterialFrameSet_onBuilded;
      return o;
   }
   MO.FDsPrivateMaterialFrameSet_onBuilded = function FDsPrivateMaterialFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsMaterialFrameSet.onBuilded.call(o, event);
      var toolbar = o._catalogToolBar = MO.Class.create(FDsPrivateMaterialCatalogToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCatalogToolBar.push(toolbar);
      var catalog = o._catalogContent = MO.Class.create(FDsMaterialCatalogContent);
      catalog._frameSet = o;
      catalog.build(event);
      o._frameCatalogContent.push(catalog);
      var toolbar = o._canvasToolBar = MO.Class.create(FDsPrivateMaterialCanvasToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCanvasToolBar.push(toolbar);
      var toolbar = o._propertyToolBar = MO.Class.create(FDsMaterialPropertyToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._framePropertyToolBar.push(toolbar);
   }
}
with(MO){
   MO.FDsPrivateMaterialMenuBar = function FDsPrivateMaterialMenuBar(o){
      o = MO.Class.inherits(this, o, FDsMaterialMenuBar);
      o._frameName = 'resource.private.material.MenuBar';
      return o;
   }
}
with(MO){
   MO.FDsPrivateModelCanvasToolBar = function FDsPrivateModelCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDsModelCanvasToolBar);
      o._frameName = 'resource.private.model.CanvasToolBar';
      return o;
   }
}
with(MO){
   MO.FDsPrivateModelCatalogToolBar = function FDsPrivateModelCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDsModelCatalogToolBar);
      o._frameName = 'resource.private.model.CatalogToolBar';
      return o;
   }
}
with(MO){
   MO.FDsPrivateModelFrameSet = function FDsPrivateModelFrameSet(o){
      o = MO.Class.inherits(this, o, FDsModelFrameSet);
      o._frameName = 'resource.private.model.FrameSet';
      o.onBuilded  = FDsPrivateModelFrameSet_onBuilded;
      return o;
   }
   MO.FDsPrivateModelFrameSet_onBuilded = function FDsPrivateModelFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsModelFrameSet.onBuilded.call(o, event);
      var toolbar = o._catalogToolBar = MO.Class.create(FDsPrivateModelCatalogToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCatalogToolBar.push(toolbar);
      var catalog = o._catalogContent = MO.Class.create(FDsModelCatalogContent);
      catalog._frameSet = o;
      catalog.build(event);
      catalog.addSelectedListener(o, o.onCatalogSelected);
      o._frameCatalogContent.push(catalog);
      var toolbar = o._canvasToolBar = MO.Class.create(FDsPrivateModelCanvasToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCanvasToolBar.push(toolbar);
      var canvas = o._canvasContent = MO.Class.create(FDsModelCanvasContent);
      canvas._frameSet = o;
      canvas._toolbar = o._canvasToolbar;
      canvas._hParent = o._frameCanvasContent._hPanel;
      canvas._hParent.style.backgroundColor = '#333333';
      canvas._hParent.style.scroll = 'auto';
      canvas.addLoadListener(o, o.onDataLoaded);
      canvas.build(event);
      o._frameCanvasContent.push(canvas);
   }
}
with(MO){
   MO.FDsPrivateModelMenuBar = function FDsPrivateModelMenuBar(o){
      o = MO.Class.inherits(this, o, FDsModelMenuBar);
      o._frameName = 'resource.private.model.MenuBar';
      o.onBuilded  = FDsPrivateModelMenuBar_onBuilded;
      return o;
   }
   MO.FDsPrivateModelMenuBar_onBuilded = function FDsPrivateModelMenuBar_onBuilded(p){
      var o = this;
      o.__base.FDsModelMenuBar.onBuilded.call(o, p);
      o._controlSaveButton.addClickListener(o, o.onSaveClick);
      o._controlCaptureButton.addClickListener(o, o.onCaptureClick);
   }
}
with(MO){
   MO.FDsPrivateTemplateCanvasToolBar = function FDsPrivateTemplateCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDsTemplateCanvasToolBar);
      o._frameName      = 'resource.private.template.CanvasToolBar';
      return o;
   }
}
with(MO){
   MO.FDsPrivateTemplateCatalogToolBar = function FDsPrivateTemplateCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDsTemplateCatalogToolBar);
      o._frameName = 'resource.private.template.CatalogToolBar';
      return o;
   }
}
MO.FDsPrivateTemplateFrameSet = function FDsPrivateTemplateFrameSet(o){
   o = MO.Class.inherits(this, o, MO.FDsTemplateFrameSet);
   o._frameName        = 'resource.private.template.FrameSet';
   o.onBuilded         = MO.FDsPrivateTemplateFrameSet_onBuilded;
   o.onCatalogSelected = MO.FDsPrivateTemplateFrameSet_onCatalogSelected;
   return o;
}
MO.FDsPrivateTemplateFrameSet_onBuilded = function FDsPrivateTemplateFrameSet_onBuilded(event){
   var o = this;
   o.__base.FDsTemplateFrameSet.onBuilded.call(o, event);
   var toolbar = o._catalogToolBar = MO.Class.create(MO.FDsPrivateTemplateCatalogToolBar);
   toolbar._frameSet = o;
   toolbar.buildDefine(event);
   o._frameCatalogToolBar.push(toolbar);
   var catalog = o._catalogContent = MO.Class.create(MO.FDsTemplateCatalogContent);
   catalog._frameSet = o;
   catalog.build(event);
   catalog.addSelectedListener(o, o.onCatalogSelected);
   o._frameCatalogContent.push(catalog);
   var toolbar = o._canvasToolBar = MO.Class.create(MO.FDsPrivateTemplateCanvasToolBar);
   toolbar._frameSet = o;
   toolbar.buildDefine(event);
   o._frameCanvasToolBar.push(toolbar);
   var canvas = o._canvasContent = MO.Class.create(MO.FDsTemplateCanvasContent);
   canvas._frameSet = o;
   canvas._toolbar = o._canvasToolbar;
   canvas._hParent = o._frameCanvasContent._hPanel;
   canvas._hParent.style.scroll = 'auto';
   canvas.addLoadListener(o, o.onDataLoaded);
   canvas.build(event);
   o._frameCanvasContent.push(canvas);
}
MO.FDsPrivateTemplateFrameSet_onCatalogSelected = function FDsPrivateTemplateFrameSet_onCatalogSelected(select, flag){
   var o = this;
   var space = o._activeSpace;
   if(!space){
      return;
   }
   o.hidePropertyFrames();
   if(MO.Class.isClass(select, MO.FE3dSpace)){
      var frame = o.findPropertyFrame(MO.EDsFrame.CommonSpacePropertyFrame);
      frame.show();
      frame.loadObject(space, select);
   }else if(MO.Class.isClass(select, MO.FG3dTechnique)){
      var frame = o.findPropertyFrame(MO.EDsFrame.CommonTechniquePropertyFrame);
      frame.show();
      frame.loadObject(space, select);
   }else if(MO.Class.isClass(select, MO.FE3dRegion)){
      var frame = o.findPropertyFrame(MO.EDsFrame.CommonRegionPropertyFrame);
      frame.show();
      frame.loadObject(space, select);
   }else if(MO.Class.isClass(select, MO.FE3dCamera)){
      var frame = o.findPropertyFrame(MO.EDsFrame.CommonCameraPropertyFrame);
      frame.show();
      frame.loadObject(space, select);
   }else if(MO.Class.isClass(select, MO.FG3dDirectionalLight)){
      var frame = o.findPropertyFrame(MO.EDsFrame.CommonLightPropertyFrame);
      frame.show();
      frame.loadObject(space, select);
   }else if(MO.Class.isClass(select, MO.FE3dTemplateDisplay)){
      var frame = o.findPropertyFrame(MO.EDsFrame.CommonDisplayPropertyFrame);
      frame.show();
      frame.loadObject(space, select);
   }else if(MO.Class.isClass(select, MO.FG3dMaterial)){
      var frame = o.findPropertyFrame(MO.EDsFrame.CommonMaterialPropertyFrame);
      frame.show();
      frame.loadObject(space, select);
   }else if(MO.Class.isClass(select, MO.FE3dRenderable)){
      var frame = o.findPropertyFrame(MO.EDsFrame.CommonRenderablePropertyFrame);
      frame.show();
      frame.loadObject(space, select);
   }else{
      throw new TError('Unknown select object type. (select={1})', select);
   }
}
with(MO){
   MO.FDsPrivateTemplateMenuBar = function FDsPrivateTemplateMenuBar(o){
      o = MO.Class.inherits(this, o, FDsTemplateMenuBar);
      o._frameName = 'resource.private.template.MenuBar';
      o.onBuilded  = FDsPrivateTemplateMenuBar_onBuilded;
      return o;
   }
   MO.FDsPrivateTemplateMenuBar_onBuilded = function FDsPrivateTemplateMenuBar_onBuilded(event){
      var o = this;
      o.__base.FDsTemplateMenuBar.onBuilded.call(o, event);
      o._controlSave.addClickListener(o, o.onSaveClick);
      o._controlCapture.addClickListener(o, o.onCaptureClick);
      o._controlSelectMaterial.addClickListener(o, o.onSelectMaterialClick);
      o._controlCreateDisplay.addClickListener(o, o.onCreateDisplayClick);
      o._controlDelete.addClickListener(o, o.onDeleteClick);
   }
}
with(MO){
   MO.FDsPrivateSceneCanvasToolBar = function FDsPrivateSceneCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDsSceneCanvasToolBar);
      o._frameName = 'resource.private.scene.CanvasToolBar';
      return o;
   }
}
with(MO){
   MO.FDsPrivateSceneCatalogToolBar = function FDsPrivateSceneCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDsSceneCatalogToolBar);
      o._frameName = 'resource.private.scene.CatalogToolBar';
      return o;
   }
}
with(MO){
   MO.FDsPrivateSceneFrameSet = function FDsPrivateSceneFrameSet(o){
      o = MO.Class.inherits(this, o, FDsSceneFrameSet);
      o._frameName = 'resource.private.scene.FrameSet';
      o.onBuilded  = FDsPrivateSceneFrameSet_onBuilded;
      return o;
   }
   MO.FDsPrivateSceneFrameSet_onBuilded = function FDsPrivateSceneFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsSceneFrameSet.onBuilded.call(o, event);
      var toolbar = o._catalogToolbar = MO.Class.create(FDsPrivateSceneCatalogToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCatalogToolBar.push(toolbar);
      var catalog = o._catalogContent = MO.Class.create(FDsSceneCatalogContent);
      catalog._frameSet = o;
      catalog.build(event);
      catalog.addSelectedListener(o, o.onCatalogSelected);
      o._frameCatalogContent.push(catalog);
      var toolbar = o._canvasToolBar = MO.Class.create(FDsPrivateSceneCanvasToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCanvasToolBar.push(toolbar);
      var canvas = o._canvasContent = MO.Class.create(FDsSceneCanvasContent);
      canvas._frameSet = o;
      canvas._toolbar = o._canvasToolbar;
      canvas._hParent = o._frameCanvasContent._hPanel;
      canvas._hParent.style.backgroundColor = '#333333';
      canvas._hParent.style.scroll = 'auto';
      canvas.addLoadListener(o, o.onDataLoaded);
      canvas.build(event);
      o._frameCanvasContent.push(canvas);
      var toolbar = o._propertyToolbar = MO.Class.create(FDsScenePropertyToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._framePropertyToolBar.push(toolbar);
   }
}
with(MO){
   MO.FDsPrivateSceneMenuBar = function FDsPrivateSceneMenuBar(o){
      o = MO.Class.inherits(this, o, FDsSceneMenuBar);
      o._frameName = 'resource.private.scene.MenuBar';
      o.onBuilded  = FDsPrivateSceneMenuBar_onBuilded;
      return o;
   }
   MO.FDsPrivateSceneMenuBar_onBuilded = function FDsPrivateSceneMenuBar_onBuilded(p){
      var o = this;
      o.__base.FDsSceneMenuBar.onBuilded.call(o, p);
      o._controlSave.addClickListener(o, o.onSaveClick);
      o._controlCapture.addClickListener(o, o.onCaptureClick);
      o._controlCreateLayer.addClickListener(o, o.onCreateLayerClick);
      o._controlImportTemplate.addClickListener(o, o.onImportTemplateClick);
      o._controlExecute.addClickListener(o, o.onExecuteClick);
   }
}
with(MO){
   MO.FDsShareTabBar = function FDsShareTabBar(o){
      o = MO.Class.inherits(this, o, FDuiTabBar);
      o._frameName            = 'resource.share.TabBar';
      o._resourceTypeCd       = 'private';
      o._controlPrivateButton = null;
      o._controlTeamButton    = null;
      o._controlShareButton   = null;
      o.onBuilded             = FDsShareTabBar_onBuilded;
      o.onButtonClick         = FDsShareTabBar_onButtonClick;
      o.construct             = FDsShareTabBar_construct;
      o.dispose               = FDsShareTabBar_dispose;
      return o;
   }
   MO.FDsShareTabBar_onBuilded = function FDsShareTabBar_onBuilded(p){
      var o = this;
      o.__base.FDuiTabBar.onBuilded.call(o, p);
      o._controlResource.addClickListener(o, o.onButtonClick);
   }
   MO.FDsShareTabBar_onButtonClick = function FDsShareTabBar_onButtonClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      if(name == 'resource'){
         o._workspace.selectFrameSet(EDsFrameSet.ShareResourceFrameSet);
      }else{
         alert('功能未开启，请以后关注。');
      }
   }
   MO.FDsShareTabBar_construct = function FDsShareTabBar_construct(){
      var o = this;
      o.__base.FDuiTabBar.construct.call(o);
   }
   MO.FDsShareTabBar_dispose = function FDsShareTabBar_dispose(){
      var o = this;
      o.__base.FDuiTabBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsShareWorkspace = function FDsShareWorkspace(o){
      o = MO.Class.inherits(this, o, FDuiWorkspace, MUiStorage);
      o._frameName            = 'resource.share.Workspace';
      o._storageCode          = o._frameName;
      o._styleMenubarGround   = MO.Class.register(o, new MO.AStyle('_styleMenubarGround', 'Menubar_Ground'));
      o._styleBodyGround      = MO.Class.register(o, new MO.AStyle('_styleBodyGround', 'Body_Ground'));
      o._styleStatusbarGround = MO.Class.register(o, new MO.AStyle('_styleStatusbarGround', 'Statusbar_Ground'));
      o._activeFrameSetCode   = null;
      o._activeProjectGuid    = null;
      o._frameToolBar         = null;
      o._frameStatusBar       = null;
      o._activeFrameSet       = null;
      o._frameSets            = null;
      o.onBuilded             = FDsShareWorkspace_onBuilded;
      o.construct             = FDsShareWorkspace_construct;
      o.selectFrameSet        = FDsShareWorkspace_selectFrameSet;
      o.load                  = FDsShareWorkspace_load;
      o.dispose               = FDsShareWorkspace_dispose;
      return o;
   }
   MO.FDsShareWorkspace_onBuilded = function FDsShareWorkspace_onBuilded(event){
      var o = this;
      o.__base.FDuiWorkspace.onBuilded.call(o, event);
      o._frameMenuBar._hPanel.className = o.styleName('Menubar_Ground');
      o._frameBody._hPanel.className = o.styleName('Body_Ground');
      o._frameStatusBar._hPanel.className = o.styleName('Statusbar_Ground');
      var hTable = MO.Window.Builder.createTable(event);
      hTable.width = '100%';
      var hRow = MO.Window.Builder.appendTableRow(hTable);
      o._hMenuPanel = MO.Window.Builder.appendTableCell(hRow);
      var control = o._tabBar = MO.Class.create(FDsShareTabBar);
      control._workspace = o;
      control.buildDefine(event);
      var hCell = MO.Window.Builder.appendTableCell(hRow);
      hCell.width = '100px';
      hCell.align = 'right';
      hCell.vAlign = 'bottom';
      hCell.appendChild(control._hPanel);
      o._frameMenuBar._hPanel.appendChild(hTable);
   }
   MO.FDsShareWorkspace_construct = function FDsShareWorkspace_construct(){
      var o = this;
      o.__base.FDuiWorkspace.construct.call(o);
      o._frameSets = new TDictionary();
   }
   MO.FDsShareWorkspace_selectFrameSet = function FDsShareWorkspace_selectFrameSet(name, guid){
      var o = this;
      var frameSet = o._frameSets.get(name);
      if(!frameSet){
         if(name == EDsFrameSet.ShareResourceFrameSet){
            var menuBar = MO.Class.create(FDsShareResourceMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsShareResourceFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.ShareBitmapFrameSet){
            var menuBar = MO.Class.create(FDsShareBitmapMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsShareBitmapFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.ShareMaterialFrameSet){
            var menuBar = MO.Class.create(FDsShareMaterialMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsShareMaterialFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.ShareModelFrameSet){
            var menuBar = MO.Class.create(FDsShareModelMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsShareModelFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.ShareTemplateFrameSet){
            var menuBar = MO.Class.create(FDsShareTemplateMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsShareTemplateFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else if(name == EDsFrameSet.ShareSceneFrameSet){
            var menuBar = MO.Class.create(FDsShareSceneMenuBar);
            menuBar._workspace = o;
            menuBar.buildDefine(o._hPanel);
            frameSet = MO.Console.find(FDuiFrameConsole).findByClass(o, FDsShareSceneFrameSet);
            frameSet._workspace = o;
            frameSet._menuBar = menuBar;
            menuBar._frameSet = frameSet;
         }else{
            throw new TError('Unknown frameset. (name={1})', name);
         }
         o._frameSets.set(name, frameSet);
      }
      var activeFrameSet = o._activeFrameSet;
      if(activeFrameSet != frameSet){
         if(activeFrameSet){
            o._hMenuPanel.removeChild(activeFrameSet._menuBar._hPanel);
            o._frameBody.remove(activeFrameSet);
         }
         o._hMenuPanel.appendChild(frameSet._menuBar._hPanel);
         o._frameBody.push(frameSet);
         frameSet.psResize();
      }
      o._activeFrameSet = frameSet;
      switch(name){
         case EDsFrameSet.ShareResourceFrameSet:
            frameSet.load();
            break;
         case EDsFrameSet.ShareBitmapFrameSet:
         case EDsFrameSet.ShareMaterialFrameSet:
         case EDsFrameSet.ShareModelFrameSet:
         case EDsFrameSet.ShareTemplateFrameSet:
         case EDsFrameSet.ShareSceneFrameSet:
            frameSet.loadByGuid(guid);
            break;
         default:
            throw new TError('Unknown frameset. (name={1})', name);
      }
      o.storageSet('frameset_code', name)
      o.storageSet('frameset_guid', guid)
      o.storageUpdate();
      return frameSet;
   }
   MO.FDsShareWorkspace_load = function FDsShareWorkspace_load(){
      var o = this;
      var code = o._activeFrameSetCode = o.storageGet('frameset_code', EDsFrameSet.ShareResourceFrameSet);
      var guid = o._activeFrameSetGuid = o.storageGet('frameset_guid');
      var button = o._tabBar.findControl('resource');
      button.doClick();
   }
   MO.FDsShareWorkspace_dispose = function FDsShareWorkspace_dispose(){
      var o = this;
      o._frameSets = MO.Lang.Object.dispose(o._frameSets);
      o.__base.FDuiWorkspace.dispose.call(o);
   }
}
with(MO){
   MO.FDsShareResourceCatalogContent = function FDsShareResourceCatalogContent(o){
      o = MO.Class.inherits(this, o, FDuiDataTreeView, MListenerSelected);
      o._activeSpace          = null;
      o._materials            = null;
      o.onBuild               = FDsShareResourceCatalogContent_onBuild;
      o.onLoadDisplay         = FDsShareResourceCatalogContent_onLoadDisplay;
      o.onNodeClick           = FDsShareResourceCatalogContent_onNodeClick;
      o.onNodeViewClick       = FDsShareResourceCatalogContent_onNodeViewClick;
      o.onNodeViewDoubleClick = FDsShareResourceCatalogContent_onNodeViewDoubleClick;
      o.lsnsSelect            = null;
      o.construct             = FDsShareResourceCatalogContent_construct;
      o.selectObject          = FDsShareResourceCatalogContent_selectObject;
      o.showObject            = FDsShareResourceCatalogContent_showObject;
      o.dispose               = FDsShareResourceCatalogContent_dispose;
      return o;
   }
   MO.FDsShareResourceCatalogContent_onBuild = function FDsShareResourceCatalogContent_onBuild(p){
      var o = this;
      o.__base.FDuiDataTreeView.onBuild.call(o, p);
      o.addNodeClickListener(o, o.onNodeClick);
      o.loadUrl('/cloud.describe.tree.ws?action=query&code=resource.catalog');
   }
   MO.FDsShareResourceCatalogContent_onLoadDisplay = function FDsShareResourceCatalogContent_onLoadDisplay(p){
      var o = this;
      var n = p._linkNode;
      o.buildRenderable(n, p);
   }
   MO.FDsShareResourceCatalogContent_onNodeClick = function FDsShareResourceCatalogContent_onNodeClick(t, n){
      var o = this;
   }
   MO.FDsShareResourceCatalogContent_onNodeViewClick = function FDsShareResourceCatalogContent_onNodeViewClick(p){
      var o = this;
   }
   MO.FDsShareResourceCatalogContent_onNodeViewDoubleClick = function FDsShareResourceCatalogContent_onNodeViewDoubleClick(p){
      var o = this;
   }
   MO.FDsShareResourceCatalogContent_construct = function FDsShareResourceCatalogContent_construct(){
      var o = this;
      o.__base.FDuiDataTreeView.construct.call(o);
      o._renderables = new TObjects();
      o._materials = new TObjects();
   }
   MO.FDsShareResourceCatalogContent_selectObject = function FDsShareResourceCatalogContent_selectObject(p){
      var o = this;
      if(p != null){
         o.processSelectedListener(p, true);
      }
   }
   MO.FDsShareResourceCatalogContent_showObject = function FDsShareResourceCatalogContent_showObject(p){
      var o = this;
   }
   MO.FDsShareResourceCatalogContent_dispose = function FDsShareResourceCatalogContent_dispose(){
      var o = this;
      o.__base.FDuiDataTreeView.dispose.call(o);
   }
}
with(MO){
   MO.FDsShareResourceCatalogToolBar = function FDsShareResourceCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName                = 'resource.share.resource.CatalogToolBar';
      o._controlFolderOpenButton  = null;
      o._controlFolderCloseButton = null;
      o._activeNodeGuid           = null;
      o.onBuilded                 = FDsShareResourceCatalogToolBar_onBuilded;
      o.onFolderOpenClick         = FDsShareResourceCatalogToolBar_onFolderOpenClick;
      o.onFolderCloseClick        = FDsShareResourceCatalogToolBar_onFolderCloseClick;
      o.construct                 = FDsShareResourceCatalogToolBar_construct;
      o.dispose                   = FDsShareResourceCatalogToolBar_dispose;
      return o;
   }
   MO.FDsShareResourceCatalogToolBar_onBuilded = function FDsShareResourceCatalogToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlFolderOpen.addClickListener(o, o.onFolderOpenClick);
      o._controlFolderClose.addClickListener(o, o.onFolderCloseClick);
   }
   MO.FDsShareResourceCatalogToolBar_onFolderOpenClick = function FDsShareResourceCatalogToolBar_onFolderOpenClick(event){
   }
   MO.FDsShareResourceCatalogToolBar_onFolderCloseClick = function FDsShareResourceCatalogToolBar_onFolderCloseClick(event){
   }
   MO.FDsShareResourceCatalogToolBar_construct = function FDsShareResourceCatalogToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsShareResourceCatalogToolBar_dispose = function FDsShareResourceCatalogToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsShareResourceFrameSet = function FDsShareResourceFrameSet(o){
      o = MO.Class.inherits(this, o, FDuiFrameSet);
      o._frameName            = 'resource.share.resource.FrameSet';
      o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleCatalogContent  = MO.Class.register(o, new MO.AStyle('_styleCatalogContent', 'Catalog_Content'));
      o._styleListContent     = MO.Class.register(o, new MO.AStyle('_styleListContent', 'List_Content'));
      o._stylePropertyContent = MO.Class.register(o, new MO.AStyle('_stylePropertyContent', 'Property_Content'));
      o._resourceTypeCd       = 'picture';
      o._frameCatalog         = null;
      o._frameCatalogToolbar  = null;
      o._frameCatalogContent  = null;
      o._frameSearch          = null;
      o._frameSearchToolbar   = null;
      o._frameSearchContent   = null;
      o._framePreview         = null;
      o._framePreviewToolbar  = null;
      o._framePreviewContent  = null;
      o._propertyFrames       = null;
      o.onBuilded             = FDsShareResourceFrameSet_onBuilded;
      o.onCatalogSelected     = FDsShareResourceFrameSet_onCatalogSelected;
      o.construct             = FDsShareResourceFrameSet_construct;
      o.findPropertyFrame     = FDsShareResourceFrameSet_findPropertyFrame;
      o.switchContent         = FDsShareResourceFrameSet_switchContent;
      o.load                  = FDsShareResourceFrameSet_load;
      o.dispose               = FDsShareResourceFrameSet_dispose;
      return o;
   }
   MO.FDsShareResourceFrameSet_onBuilded = function FDsShareResourceFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDuiFrameSet.onBuilded.call(o, event);
      o._frameCatalogToolBar._hPanel.className = o.styleName('Toolbar_Ground');
      o._frameCatalogContent._hPanel.className = o.styleName('Catalog_Content');
      o._frameListToolBar._hPanel.className = o.styleName('Toolbar_Ground');
      o._frameListContent._hPanel.className = o.styleName('List_Content');
      var f = o._catalogSplitter = o.searchControl('catalogSpliter');
      f.setAlignCd(EUiAlign.Left);
      f.setSizeHtml(o._frameCatalog._hPanel);
      var control = o._catalogToolbar = MO.Class.create(FDsShareResourceCatalogToolBar);
      control._workspace = o._workspace;
      control._frameSet = o;
      control.buildDefine(event);
      o._frameCatalogToolBar.push(control);
      var control = o._catalogContent = MO.Class.create(FDsShareResourceCatalogContent);
      control._workspace = o._workspace;
      control._frameSet = o;
      control.build(event);
      o._frameCatalogContent.push(control);
      var control = o._listToolBar = MO.Class.create(FDsShareResourceListToolBar);
      control._workspace = o._workspace;
      control._frameSet = o;
      control.buildDefine(event);
      o._frameListToolBar.push(control);
      var control = o._listContent = MO.Class.create(FDsShareResourceListContent);
      control._workspace = o._workspace;
      control._frameSet = o;
      control.build(event);
      o._frameListContent.push(control);
   }
   MO.FDsShareResourceFrameSet_onCatalogSelected = function FDsShareResourceFrameSet_onCatalogSelected(p, pc){
      var o = this;
      var space = o._activeSpace;
      var fs = o._propertyFrames;
      var c = fs.count();
      for(var i = 0; i < c; i++){
         var f = fs.value(i);
         f.hide();
      }
      if(MO.Class.isClass(p, FE3dStage)){
         var f = o.findPropertyFrame(EDsFrame.MeshSpacePropertyFrame);
         f.show();
         f.loadObject(space, space);
      }else if(MO.Class.isClass(p, FG3dTechnique)){
         var f = o.findPropertyFrame(EDsFrame.MeshTechniquePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dRegion)){
         var f = o.findPropertyFrame(EDsFrame.MeshRegionPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dCamera)){
         var f = o.findPropertyFrame(EDsFrame.MeshCameraPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dDirectionalLight)){
         var f = o.findPropertyFrame(EDsFrame.MeshLightPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshDisplay)){
         var f = o.findPropertyFrame(EDsFrame.MeshDisplayPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dMaterial)){
         var f = o.findPropertyFrame(EDsFrame.MeshMaterialPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshRenderable)){
         var f = o.findPropertyFrame(EDsFrame.MeshRenderablePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else{
         throw new TError('Unknown select object type. (value={1})', p);
      }
   }
   MO.FDsShareResourceFrameSet_construct = function FDsShareResourceFrameSet_construct(){
      var o = this;
      o.__base.FDuiFrameSet.construct.call(o);
      o._propertyFrames = new TDictionary();
   }
   MO.FDsShareResourceFrameSet_findPropertyFrame = function FDsShareResourceFrameSet_findPropertyFrame(p){
      var o = this;
      var f = o._propertyFrames.get(p);
      if(!f){
         var fc = MO.Console.find(FFrameConsole);
         f = fc.get(o, p, o._framePreview._hContainer);
         f._workspace = o;
         o._propertyFrames.set(p, f);
      }
      return f;
   }
   MO.FDsShareResourceFrameSet_switchContent = function FDsShareResourceFrameSet_switchContent(typeCd){
      var o = this;
      o._resourceTypeCd = typeCd;
      o._listContent.serviceSearch(typeCd, '', '', 40, 0);
   }
   MO.FDsShareResourceFrameSet_load = function FDsShareResourceFrameSet_load(){
      var o = this;
      o._listToolBar.storageLoad();
   }
   MO.FDsShareResourceFrameSet_dispose = function FDsShareResourceFrameSet_dispose(){
      var o = this;
      o.__base.FDuiFrameSet.dispose.call(o);
      o._propertyFrames.dispose();
      o._propertyFrames = null;
   }
}
with(MO){
   MO.FDsShareResourceListContent = function FDsShareResourceListContent(o){
      o = MO.Class.inherits(this, o, FDuiListView);
      o._contentFlag      = null;
      o._contentTypeCd    = EE3sResource.All;
      o._contentSerach    = '';
      o._contentOrder     = '';
      o._contentPageSize  = 40;
      o._contentPageCount = 0;
      o._contentPage      = 0;
      o._activeItem       = null;
      o._activeGuid       = null;
      o._refreshButton    = null;
      o._saveButton       = null;
      o._runButton        = null;
      o.onServiceLoad     = FDsShareResourceListContent_onServiceLoad;
      o.construct         = FDsShareResourceListContent_construct;
      o.doClickItem       = FDsShareResourceListContent_doClickItem;
      o.doDoubleClickItem = FDsShareResourceListContent_doDoubleClickItem;
      o.serviceSearch     = FDsShareResourceListContent_serviceSearch;
      o.serviceResearch   = FDsShareResourceListContent_serviceResearch;
      o.dispose           = FDsShareResourceListContent_dispose;
      return o;
   }
   MO.FDsShareResourceListContent_onServiceLoad = function FDsShareResourceListContent_onServiceLoad(p){
      var o = this;
      var xitems = p.root.findNode('ResourceCollection');
      var pageSize = xitems.getInteger('page_size');
      var pageCount = xitems.getInteger('page_count');
      var page = xitems.getInteger('page');
      o._frameSet._listToolBar.setNavigator(pageSize, pageCount, page);
      o.clear();
      var xnodes = xitems.nodes();
      var count = xnodes.count();
      for(var i = 0; i < count; i++){
         var xnode = xnodes.getAt(i);
         if(xnode.isName('Resource')){
            var item = o.createItem(FDsShareResourceListItem);
            item.propertyLoad(xnode);
            item._guid = xnode.get('guid');
            item._typeCd = xnode.get('type_cd');
            item._shareCd = xnode.get('share_cd');
            item._code = xnode.get('code');
            item._updateDate = xnode.get('update_date');
            item.setTypeLabel(item._typeCd);
            item.setLabel(xnode.get('code') + ' - ' + xnode.get('label'));
            item.refreshStyle();
            o.push(item);
         }
      }
      MO.Console.find(FDuiDesktopConsole).hide();
   }
   MO.FDsShareResourceListContent_construct = function FDsShareResourceListContent_construct(){
      var o = this;
      o.__base.FDuiListView.construct.call(o);
   }
   MO.FDsShareResourceListContent_doClickItem = function FDsShareResourceListContent_doClickItem(control){
      var o = this;
      o.__base.FDuiListView.doClickItem.call(o, control);
   }
   MO.FDsShareResourceListContent_doDoubleClickItem = function FDsShareResourceListContent_doDoubleClickItem(control){
      var o = this;
      o.__base.FDuiListView.doDoubleClickItem.call(o, control)
      var guid = control._guid;
      o._activeItem = control;
      o._activeGuid = control._guid;
      var workspace = o._frameSet._workspace;
      var typeCd = control._typeCd;
      if(typeCd == EE3sResource.Bitmap){
         workspace.selectFrameSet(EDsFrameSet.ShareBitmapFrameSet, guid);
      }else if(typeCd == EE3sResource.Material){
         workspace.selectFrameSet(EDsFrameSet.ShareMaterialFrameSet, guid);
      }else if(typeCd == EE3sResource.Model){
         workspace.selectFrameSet(EDsFrameSet.ShareModelFrameSet, guid);
      }else if(typeCd == EE3sResource.Template){
         workspace.selectFrameSet(EDsFrameSet.ShareTemplateFrameSet, guid);
      }else if(typeCd == EE3sResource.Scene){
         workspace.selectFrameSet(EDsFrameSet.ShareSceneFrameSet, guid);
      }else{
         throw new TError(o, 'Unsupport resource format.');
      }
   }
   MO.FDsShareResourceListContent_serviceSearch = function FDsShareResourceListContent_serviceSearch(typeCd, search, order, pageSize, page){
      var o = this;
      if(typeCd == null){
         typeCd = o._contentTypeCd;
      }
      if(search == null){
         search = o._contentSerach;
      }
      if(order == null){
         order = o._contentOrder;
      }
      if(pageSize == null){
         pageSize = o._contentPageSize;
      }
      if(page == null){
         page = o._contentPage;
      }
      var flag = typeCd + '|' + search + '|' + order + '|' + pageSize + '|' + page;
      if(o._contentFlag == flag){
         return;
      }
      o._contentFlag = flag;
      o._contentTypeCd = typeCd;
      o._contentSerach = search;
      o._contentOrder = order;
      o._contentPageSize = pageSize;
      o._contentPage = page;
      MO.Console.find(FDuiDesktopConsole).showLoading();
      var connection = MO.Console.find(FDrResourceConsole).doListShare(o._contentTypeCd, o._contentSerach, o._contentOrder, o._contentPageSize, o._contentPage);
      connection.addLoadListener(o, o.onServiceLoad);
   }
   MO.FDsShareResourceListContent_serviceResearch = function FDsShareResourceListContent_serviceResearch(){
      var o = this;
      o.serviceSearch(o._contentTypeCd, o._contentSerach, o._contentOrder, o._contentPageSize, o._contentPage);
   }
   MO.FDsShareResourceListContent_dispose = function FDsShareResourceListContent_dispose(){
      var o = this;
      o.__base.FDuiListView.dispose.call(o);
   }
}
with(MO){
   MO.FDsShareResourceListItem = function FDsShareResourceListItem(o){
      o = MO.Class.inherits(this, o, FDsResourceListItem);
      return o;
   }
}
with(MO){
   MO.FDsShareResourceListToolBar = function FDsShareResourceListToolBar(o){
      o = MO.Class.inherits(this, o, FDsResourceListToolBar);
      o._frameName   = 'resource.share.resource.ListToolBar';
      o._storageCode = o._frameName;
      return o;
   }
}
with(MO){
   MO.FDsShareResourceMenuBar = function FDsShareResourceMenuBar(o){
      o = MO.Class.inherits(this, o, FDuiMenuBar);
      o._frameName      = 'resource.share.resource.MenuBar';
      o._controlRefresh = null;
      o.onBuilded       = FDsShareResourceMenuBar_onBuilded;
      o.onRefreshClick  = FDsShareResourceMenuBar_onRefreshClick;
      o.construct       = FDsShareResourceMenuBar_construct;
      o.dispose         = FDsShareResourceMenuBar_dispose;
      return o;
   }
   MO.FDsShareResourceMenuBar_onBuilded = function FDsShareResourceMenuBar_onBuilded(p){
      var o = this;
      o.__base.FDuiMenuBar.onBuilded.call(o, p);
      o._controlRefresh.addClickListener(o, o.onRefreshClick);
   }
   MO.FDsShareResourceMenuBar_onRefreshClick = function FDsShareResourceMenuBar_onRefreshClick(event){
   }
   MO.FDsShareResourceMenuBar_construct = function FDsShareResourceMenuBar_construct(){
      var o = this;
      o.__base.FDuiMenuBar.construct.call(o);
   }
   MO.FDsShareResourceMenuBar_dispose = function FDsShareResourceMenuBar_dispose(){
      var o = this;
      o.__base.FDuiMenuBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsShareResourcePropertyContent = function FDsShareResourcePropertyContent(o){
      o = MO.Class.inherits(this, o, FDsResourcePropertyContent);
      return o;
   }
}
with(MO){
   MO.FDsShareResourcePropertyToolBar = function FDsShareResourcePropertyToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName             = 'resource.resource.PropertyToolBar';
      o._controlInsertButton   = null;
      o._controlUpdateButton   = null;
      o._controlDeleteButton   = null;
      o._controlRotationButton = null;
      o.onBuilded              = FDsShareResourcePropertyToolBar_onBuilded;
      o.onUpdateClick          = FDsShareResourcePropertyToolBar_onUpdateClick;
      o.onRotationClick        = FDsShareResourcePropertyToolBar_onRotationClick;
      o.construct              = FDsShareResourcePropertyToolBar_construct;
      o.dispose                = FDsShareResourcePropertyToolBar_dispose;
      return o;
   }
   MO.FDsShareResourcePropertyToolBar_onBuilded = function FDsShareResourcePropertyToolBar_onBuilded(p){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, p);
      o._controlUpdateButton.addClickListener(o, o.onUpdateClick);
      o._controlRotationButton.addClickListener(o, o.onRotationClick);
   }
   MO.FDsShareResourcePropertyToolBar_onUpdateClick = function FDsShareResourcePropertyToolBar_onUpdateClick(event){
      var o = this;
   }
   MO.FDsShareResourcePropertyToolBar_onRotationClick = function FDsShareResourcePropertyToolBar_onRotationClick(event){
      var o = this;
      var previewContent = o._workspace._previewContent;
      previewContent.switchRotation(event.checked);
   }
   MO.FDsShareResourcePropertyToolBar_construct = function FDsShareResourcePropertyToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsShareResourcePropertyToolBar_dispose = function FDsShareResourcePropertyToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsShareResourceTabBar = function FDsShareResourceTabBar(o){
      o = MO.Class.inherits(this, o, FDuiTabBar);
      o._frameName             = 'design3d.resource.TabBar';
      o._resourceTypeCd        = 'mesh';
      o._controlPictureButton  = null;
      o._controlSoundButton    = null;
      o._controlVidioButton    = null;
      o._controlTextureButton  = null;
      o._controlMaterialButton = null;
      o._controlMeshButton     = null;
      o._controlModelButton    = null;
      o._controlTemplateButton = null;
      o._controlSceneButton    = null;
      o.onBuilded              = FDsShareResourceTabBar_onBuilded;
      o.onButtonClick          = FDsShareResourceTabBar_onButtonClick;
      o.construct              = FDsShareResourceTabBar_construct;
      o.dispose                = FDsShareResourceTabBar_dispose;
      return o;
   }
   MO.FDsShareResourceTabBar_onBuilded = function FDsShareResourceTabBar_onBuilded(p){
      var o = this;
      o.__base.FDuiTabBar.onBuilded.call(o, p);
      o._controlPictureButton.addClickListener(o, o.onButtonClick);
      o._controlSoundButton.addClickListener(o, o.onButtonClick);
      o._controlVidioButton.addClickListener(o, o.onButtonClick);
      o._controlTextureButton.addClickListener(o, o.onButtonClick);
      o._controlMaterialButton.addClickListener(o, o.onButtonClick);
      o._controlMeshButton.addClickListener(o, o.onButtonClick);
      o._controlModelButton.addClickListener(o, o.onButtonClick);
      o._controlTemplateButton.addClickListener(o, o.onButtonClick);
      o._controlSceneButton.addClickListener(o, o.onButtonClick);
   }
   MO.FDsShareResourceTabBar_onButtonClick = function FDsShareResourceTabBar_onButtonClick(event){
      var o = this;
      var sender = event.sender;
      var name = sender.name();
      o._resourceTypeCd = name;
   }
   MO.FDsShareResourceTabBar_construct = function FDsShareResourceTabBar_construct(){
      var o = this;
      o.__base.FDuiTabBar.construct.call(o);
   }
   MO.FDsShareResourceTabBar_dispose = function FDsShareResourceTabBar_dispose(){
      var o = this;
      o.__base.FDuiTabBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsShareResourceWorkspace = function FDsShareResourceWorkspace(o){
      o = MO.Class.inherits(this, o, FDuiWorkspace);
      o._frameName            = 'resource.share.resource.Workspace';
      o._styleToolbarGround   = MO.Class.register(o, new MO.AStyle('_styleToolbarGround', 'Toolbar_Ground'));
      o._styleStatusbarGround = MO.Class.register(o, new MO.AStyle('_styleStatusbarGround', 'Statusbar_Ground'));
      o._styleCatalogGround   = MO.Class.register(o, new MO.AStyle('_styleCatalogGround', 'Catalog_Ground'));
      o._styleCatalogToolbar  = MO.Class.register(o, new MO.AStyle('_styleCatalogToolbar', 'Catalog_Toolbar'));
      o._styleSearchGround    = MO.Class.register(o, new MO.AStyle('_styleSearchGround', 'Search_Ground'));
      o._styleSearchToolbar   = MO.Class.register(o, new MO.AStyle('_styleCatalogToolbar', 'Search_Toolbar'));
      o._stylePreviewGround   = MO.Class.register(o, new MO.AStyle('_stylePreviewGround', 'Preview_Ground'));
      o._stylePreviewToolbar  = MO.Class.register(o, new MO.AStyle('_stylePreviewToolbar', 'Preview_Toolbar'));
      o._stylePropertyGround  = MO.Class.register(o, new MO.AStyle('_stylePropertyGround', 'Property_Ground'));
      o._styleWorkspaceGround = MO.Class.register(o, new MO.AStyle('_styleWorkspaceGround', 'Workspace_Ground'));
      o._resourceTypeCd       = 'picture';
      o._frameToolBar         = null;
      o._frameStatusBar       = null;
      o._frameCatalog         = null;
      o._frameCatalogToolbar  = null;
      o._frameCatalogContent  = null;
      o._frameSearch          = null;
      o._frameSearchToolbar   = null;
      o._frameSearchContent   = null;
      o._framePreview         = null;
      o._framePreviewToolbar  = null;
      o._framePreviewContent  = null;
      o._propertyFrames       = null;
      o.onBuilded             = FDsShareResourceWorkspace_onBuilded;
      o.onMeshLoad            = FDsShareResourceWorkspace_onMeshLoad;
      o.onCatalogSelected     = FDsShareResourceWorkspace_onCatalogSelected;
      o.construct             = FDsShareResourceWorkspace_construct;
      o.findPropertyFrame     = FDsShareResourceWorkspace_findPropertyFrame;
      o.switchContent         = FDsShareResourceWorkspace_switchContent;
      o.load                  = FDsShareResourceWorkspace_load;
      o.dispose               = FDsShareResourceWorkspace_dispose;
      return o;
   }
   MO.FDsShareResourceWorkspace_onBuilded = function FDsShareResourceWorkspace_onBuilded(p){
      var o = this;
      o.__base.FDuiWorkspace.onBuilded.call(o, p);
      var frame = o._frameToolBar = o.searchControl('toolbarFrame');
      frame._hPanel.className = o.styleName('Toolbar_Ground');
      var frame = o._frameBody = o.searchControl('bodyFrame');
      frame._hPanel.className = o.styleName('Catalog_Ground');
      var frame = o._frameStatusBar = o.searchControl('statusFrame');
      frame._hPanel.className = o.styleName('Statusbar_Ground');
      var hTable = MO.Window.Builder.createTable(p);
      hTable.width = '100%';
      var hRow = MO.Window.Builder.appendTableRow(hTable);
      var c = o._toolbar = MO.Class.create(FDsShareResourceMenuBar);
      c._workspace = o;
      c.buildDefine(p);
      var hCell = MO.Window.Builder.appendTableCell(hRow);
      hCell.appendChild(c._hPanel);
      var c = o._tabBar = MO.Class.create(FDsShareResourceTabBar);
      c._workspace = o;
      c.buildDefine(p);
      var hCell = MO.Window.Builder.appendTableCell(hRow);
      hCell.width = '450px';
      hCell.align = 'right';
      hCell.vAlign = 'bottom';
      hCell.appendChild(c._hPanel);
      o._frameToolBar._hPanel.appendChild(hTable);
      var frameSet = o._frameSet = MO.Class.create(FDsShareResourceFrameSet);
      frameSet._workspace = o;
      frameSet.buildDefine(p);
      o._frameBody.push(frameSet);
      frameSet.switchContent(o._resourceTypeCd);
   }
   MO.FDsShareResourceWorkspace_onMeshLoad = function FDsShareResourceWorkspace_onMeshLoad(p){
      var o = this;
      o._activeSpace = p._activeSpace;
      o._catalog.buildSpace(o._activeSpace);
   }
   MO.FDsShareResourceWorkspace_onCatalogSelected = function FDsShareResourceWorkspace_onCatalogSelected(p, pc){
      var o = this;
      var space = o._activeSpace;
      var fs = o._propertyFrames;
      var c = fs.count();
      for(var i = 0; i < c; i++){
         var f = fs.value(i);
         f.hide();
      }
      if(MO.Class.isClass(p, FE3dStage)){
         var f = o.findPropertyFrame(EDsFrame.MeshSpacePropertyFrame);
         f.show();
         f.loadObject(space, space);
      }else if(MO.Class.isClass(p, FG3dTechnique)){
         var f = o.findPropertyFrame(EDsFrame.MeshTechniquePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dRegion)){
         var f = o.findPropertyFrame(EDsFrame.MeshRegionPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dCamera)){
         var f = o.findPropertyFrame(EDsFrame.MeshCameraPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dDirectionalLight)){
         var f = o.findPropertyFrame(EDsFrame.MeshLightPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshDisplay)){
         var f = o.findPropertyFrame(EDsFrame.MeshDisplayPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FG3dMaterial)){
         var f = o.findPropertyFrame(EDsFrame.MeshMaterialPropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else if(MO.Class.isClass(p, FE3dMeshRenderable)){
         var f = o.findPropertyFrame(EDsFrame.MeshRenderablePropertyFrame);
         f.show();
         f.loadObject(space, p);
      }else{
         throw new TError('Unknown select object type. (value={1})', p);
      }
   }
   MO.FDsShareResourceWorkspace_construct = function FDsShareResourceWorkspace_construct(){
      var o = this;
      o.__base.FDuiWorkspace.construct.call(o);
      o._propertyFrames = new TDictionary();
   }
   MO.FDsShareResourceWorkspace_findPropertyFrame = function FDsShareResourceWorkspace_findPropertyFrame(p){
      var o = this;
      var f = o._propertyFrames.get(p);
      if(!f){
         var fc = MO.Console.find(FFrameConsole);
         f = fc.get(o, p, o._framePreview._hContainer);
         f._workspace = o;
         o._propertyFrames.set(p, f);
      }
      return f;
   }
   MO.FDsShareResourceWorkspace_switchContent = function FDsShareResourceWorkspace_switchContent(typeCd){
      this._frameSet.switchContent(typeCd);
   }
   MO.FDsShareResourceWorkspace_load = function FDsShareResourceWorkspace_load(){
      var o = this;
   }
   MO.FDsShareResourceWorkspace_dispose = function FDsShareResourceWorkspace_dispose(){
      var o = this;
      o.__base.FDuiWorkspace.dispose.call(o);
      o._propertyFrames.dispose();
      o._propertyFrames = null;
   }
}
with(MO){
   MO.FDsShareBitmapCanvasContent = function FDsShareBitmapCanvasContent(o){
      o = MO.Class.inherits(this, o, FDsBitmapCanvasContent);
      return o;
   }
}
with(MO){
   MO.FDsShareBitmapCanvasToolBar = function FDsShareBitmapCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDsBitmapCanvasToolBar);
      o._frameName = 'resource.share.bitmap.CanvasToolBar';
      return o;
   }
}
with(MO){
   MO.FDsShareBitmapFrameSet = function FDsShareBitmapFrameSet(o){
      o = MO.Class.inherits(this, o, FDsBitmapFrameSet);
      o._frameName = 'resource.share.bitmap.FrameSet';
      o.onBuilded  = FDsShareBitmapFrameSet_onBuilded;
      return o;
   }
   MO.FDsShareBitmapFrameSet_onBuilded = function FDsShareBitmapFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsBitmapFrameSet.onBuilded.call(o, event);
      var toolbar = o._canvasToolbar = MO.Class.create(FDsShareBitmapCanvasToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCanvasToolBar.push(toolbar);
      var canvas = o._canvasContent = MO.Class.create(FDsBitmapCanvasContent);
      canvas._frameSet = o;
      canvas._hParent = o._frameCanvasContent._hPanel;
      canvas._hParent.style.backgroundColor = '#333333';
      canvas._hParent.style.scroll = 'auto';
      canvas.build(event);
      o._frameCanvasContent.push(canvas);
      var toolbar = o._propertyToolbar = MO.Class.create(FDsBitmapPropertyToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._framePropertyToolBar.push(toolbar);
      var frame = o.findPropertyFrame(EDsFrame.BitmapPropertyFrame);
      o._framePropertyContent.push(frame);
   }
}
with(MO){
   MO.FDsShareBitmapMenuBar = function FDsShareBitmapMenuBar(o){
      o = MO.Class.inherits(this, o, FDsBitmapMenuBar);
      o._frameName  = 'resource.share.bitmap.MenuBar';
      o.onBuilded   = FDsShareBitmapMenuBar_onBuilded;
      o.onBackClick = FDsShareBitmapMenuBar_onBackClick;
      return o;
   }
   MO.FDsShareBitmapMenuBar_onBuilded = function FDsShareBitmapMenuBar_onBuilded(event){
      var o = this;
      o.__base.FDsBitmapMenuBar.onBuilded.call(o, event);
      o._controlBack.addClickListener(o, o.onBackClick);
   }
   MO.FDsShareBitmapMenuBar_onBackClick = function FDsShareBitmapMenuBar_onBackClick(event){
      var o = this;
      var workspace = o._frameSet._workspace;
      workspace.selectFrameSet(EDsFrameSet.ShareResourceFrameSet);
   }
}
with(MO){
   MO.FDsShareBitmapPropertyToolBar = function FDsShareBitmapPropertyToolBar(o){
      o = MO.Class.inherits(this, o, FDsBitmapPropertyToolBar);
      o._frameName = 'resource.share.bitmap.PropertyToolBar';
      return o;
   }
}
with(MO){
   MO.FDsShareBitmapWorkspace = function FDsShareBitmapWorkspace(o){
      o = MO.Class.inherits(this, o, FDsBitmapWorkspace);
      o._frameName = 'resource.share.bitmap.Workspace';
      return o;
   }
}
with(MO){
   MO.FDsShareMaterialCanvasToolBar = function FDsShareMaterialCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDsMaterialCanvasToolBar);
      o._frameName = 'resource.share.materail.CanvasToolBar';
      return o;
   }
}
with(MO){
   MO.FDsShareMaterialFrameSet = function FDsShareMaterialFrameSet(o){
      o = MO.Class.inherits(this, o, FDsMaterialFrameSet);
      o._frameName = 'resource.share.material.FrameSet';
      o.onBuilded  = FDsShareMaterialFrameSet_onBuilded;
      return o;
   }
   MO.FDsShareMaterialFrameSet_onBuilded = function FDsShareMaterialFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsMaterialFrameSet.onBuilded.call(o, event);
      var toolbar = o._toolbar = MO.Class.create(FDsShareMaterialMenuBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameToolBar.push(toolbar);
      var catalog = o._catalogContent = MO.Class.create(FDsMaterialCatalogContent);
      catalog._frameSet = o;
      catalog.build(event);
      catalog.addSelectedListener(o, o.onCatalogSelected);
      o._frameCatalogContent.push(catalog);
      var toolbar = o._canvasToolbar = MO.Class.create(FDsShareMaterialCanvasToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCanvasToolBar.push(toolbar);
      var canvas = o._canvasContent = MO.Class.create(FDsMaterialCanvasContent);
      canvas._frameSet = o;
      canvas._toolbar = o._canvasToolbar;
      canvas._hParent = o._frameCanvasContent._hPanel;
      canvas._hParent.style.backgroundColor = '#333333';
      canvas._hParent.style.scroll = 'auto';
      canvas.addLoadListener(o, o.onDataLoaded);
      canvas.build(event);
      o._frameCanvasContent.push(canvas);
   }
}
with(MO){
   MO.FDsShareMaterialMenuBar = function FDsShareMaterialMenuBar(o){
      o = MO.Class.inherits(this, o, FDsMaterialMenuBar);
      o._frameName = 'resource.share.material.MenuBar';
      return o;
   }
}
with(MO){
   MO.FDsShareModelCanvasToolBar = function FDsShareModelCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDsModelCanvasToolBar);
      o._frameName = 'resource.share.model.CanvasToolBar';
      return o;
   }
}
with(MO){
   MO.FDsShareModelCatalogToolBar = function FDsShareModelCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDsModelCatalogToolBar);
      o._frameName = 'resource.share.model.CatalogToolBar';
      return o;
   }
}
with(MO){
   MO.FDsShareModelFrameSet = function FDsShareModelFrameSet(o){
      o = MO.Class.inherits(this, o, FDsModelFrameSet);
      o._frameName = 'resource.share.model.FrameSet';
      o.onBuilded  = FDsShareModelFrameSet_onBuilded;
      return o;
   }
   MO.FDsShareModelFrameSet_onBuilded = function FDsShareModelFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsModelFrameSet.onBuilded.call(o, event);
      var toolbar = o._catalogToolbar = MO.Class.create(FDsShareModelCatalogToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCatalogToolBar.push(toolbar);
      var catalog = o._catalogContent = MO.Class.create(FDsModelCatalogContent);
      catalog._frameSet = o;
      catalog.build(event);
      catalog.addSelectedListener(o, o.onCatalogSelected);
      o._frameCatalogContent.push(catalog);
      var toolbar = o._canvasToolbar = MO.Class.create(FDsShareModelCanvasToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCanvasToolBar.push(toolbar);
      var canvas = o._canvasContent = MO.Class.create(FDsModelCanvasContent);
      canvas._frameSet = o;
      canvas._toolbar = o._canvasToolbar;
      canvas._hParent = o._frameCanvasContent._hPanel;
      canvas._hParent.style.backgroundColor = '#333333';
      canvas._hParent.style.scroll = 'auto';
      canvas.addLoadListener(o, o.onDataLoaded);
      canvas.build(event);
      o._frameCanvasContent.push(canvas);
   }
}
with(MO){
   MO.FDsShareModelMenuBar = function FDsShareModelMenuBar(o){
      o = MO.Class.inherits(this, o, FDsModelMenuBar);
      o._frameName = 'resource.share.model.MenuBar';
      o.onBuilded  = FDsShareModelMenuBar_onBuilded;
      return o;
   }
   MO.FDsShareModelMenuBar_onBuilded = function FDsShareModelMenuBar_onBuilded(p){
      var o = this;
      o.__base.FDsModelMenuBar.onBuilded.call(o, p);
   }
}
with(MO){
   MO.FDsShareTemplateCanvasToolBar = function FDsShareTemplateCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDuiToolBar);
      o._frameName      = 'resource.share.template.CanvasToolBar';
      o._refreshButton  = null;
      o._saveButton     = null;
      o._canvasModeCd   = EDsCanvasMode.Drop;
      o.onBuilded       = FDsShareTemplateCanvasToolBar_onBuilded;
      o.onModeClick     = FDsShareTemplateCanvasToolBar_onModeClick;
      o.onLookClick     = FDsShareTemplateCanvasToolBar_onLookClick;
      o.onPlayClick     = FDsShareTemplateCanvasToolBar_onPlayClick;
      o.onViewClick     = FDsShareTemplateCanvasToolBar_onViewClick;
      o.construct       = FDsShareTemplateCanvasToolBar_construct;
      o.dispose         = FDsShareTemplateCanvasToolBar_dispose;
      return o;
   }
   MO.FDsShareTemplateCanvasToolBar_onBuilded = function FDsShareTemplateCanvasToolBar_onBuilded(event){
      var o = this;
      o.__base.FDuiToolBar.onBuilded.call(o, event);
      o._controlModeDrop.addClickListener(o, o.onModeClick);
      o._controlModeSelect.addClickListener(o, o.onModeClick);
      o._controlTranslate.addClickListener(o, o.onModeClick);
      o._controlRotation.addClickListener(o, o.onModeClick);
      o._controlScale.addClickListener(o, o.onModeClick);
      o._controlLookFront.addClickListener(o, o.onLookClick);
      o._controlLookUp.addClickListener(o, o.onLookClick);
      o._controlLookLeft.addClickListener(o, o.onLookClick);
      o._controlPlay.addClickListener(o, o.onPlayClick);
      o._controlView.addClickListener(o, o.onViewClick);
   }
   MO.FDsShareTemplateCanvasToolBar_onModeClick = function FDsShareTemplateCanvasToolBar_onModeClick(p){
      var o = this;
      o._canvasModeCd = p._canvasModeCd;
   }
   MO.FDsShareTemplateCanvasToolBar_onLookClick = function FDsShareTemplateCanvasToolBar_onLookClick(p){
      var o = this;
      o._canvasModeCd = p._canvasModeCd;
   }
   MO.FDsShareTemplateCanvasToolBar_onPlayClick = function FDsShareTemplateCanvasToolBar_onPlayClick(p, v){
      var o = this;
      var c = o._frameSet._canvasContent;
      c._rotationAble = v;
   }
   MO.FDsShareTemplateCanvasToolBar_onViewClick = function FDsShareTemplateCanvasToolBar_onViewClick(p, v){
      var o = this;
      var c = o._frameSet._canvasContent;
      c._rotationAble = v;
   }
   MO.FDsShareTemplateCanvasToolBar_construct = function FDsShareTemplateCanvasToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsShareTemplateCanvasToolBar_dispose = function FDsShareTemplateCanvasToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsShareTemplateCatalogToolBar = function FDsShareTemplateCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDsTemplateCatalogToolBar);
      o._frameName = 'resource.share.template.CatalogToolBar';
      return o;
   }
}
with(MO){
   MO.FDsShareTemplateFrameSet = function FDsShareTemplateFrameSet(o){
      o = MO.Class.inherits(this, o, FDsTemplateFrameSet);
      o._frameName = 'resource.share.template.FrameSet';
      o.onBuilded  = FDsShareTemplateFrameSet_onBuilded;
      return o;
   }
   MO.FDsShareTemplateFrameSet_onBuilded = function FDsShareTemplateFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsTemplateFrameSet.onBuilded.call(o, event);
      var toolbar = o._catalogToolbar = MO.Class.create(FDsShareTemplateCatalogToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCatalogToolBar.push(toolbar);
      var catalog = o._catalogContent = MO.Class.create(FDsTemplateCatalogContent);
      catalog._frameSet = o;
      catalog.build(event);
      catalog.addSelectedListener(o, o.onCatalogSelected);
      o._frameCatalogContent.push(catalog);
      var toolbar = o._canvasToolbar = MO.Class.create(FDsShareTemplateCanvasToolBar);
      toolbar._frameSet = o;
      toolbar._workspace = o._worksapce;
      toolbar.buildDefine(event);
      o._frameCanvasToolBar.push(toolbar);
      var canvas = o._canvasContent = MO.Class.create(FDsTemplateCanvasContent);
      canvas._frameSet = o;
      canvas._toolbar = o._canvasToolbar;
      canvas._hParent = o._frameCanvasContent._hPanel;
      canvas._hParent.style.backgroundColor = '#333333';
      canvas._hParent.style.scroll = 'auto';
      canvas.addLoadListener(o, o.onDataLoaded);
      canvas.build(event);
      o._frameCanvasContent.push(canvas);
   }
}
with(MO){
   MO.FDsShareTemplateMenuBar = function FDsShareTemplateMenuBar(o){
      o = MO.Class.inherits(this, o, FDsTemplateMenuBar);
      o._frameName = 'resource.share.template.MenuBar';
      o.onBuilded  = FDsShareTemplateMenuBar_onBuilded;
      return o;
   }
   MO.FDsShareTemplateMenuBar_onBuilded = function FDsShareTemplateMenuBar_onBuilded(p){
      var o = this;
      o.__base.FDsTemplateMenuBar.onBuilded.call(o, p);
   }
}
with(MO){
   MO.FDsShareTemplateToolBar = function FDsShareTemplateToolBar(o){
      o = MO.Class.inherits(this, o, FDsTemplateToolBar);
      return o;
   }
   MO.FDsShareTemplateToolBar_onBuild = function FDsShareTemplateToolBar_onBuild(p){
      var o = this;
      o.__base.FDuiToolBar.onBuild.call(o, p);
      var b = o._refreshButton  = MO.Class.create(FDuiToolButton);
      b.setLabel('刷新');
      b.setIcon('design3d.tools.refresh');
      b.build(p);
      b.addClickListener(o, o.onRefreshClick);
      o.push(b);
      var b = o._saveButton = MO.Class.create(FDuiToolButton);
      b.setLabel('保存');
      b.setIcon('design3d.tools.save');
      b.build(p);
      b.addClickListener(o, o.onSaveClick);
      o.push(b);
   }
   MO.FDsShareTemplateToolBar_onRefreshClick = function FDsShareTemplateToolBar_onRefreshClick(p){
      var o = this;
   }
   MO.FDsShareTemplateToolBar_onSaveClick = function FDsShareTemplateToolBar_onSaveClick(p){
      var o = this;
      var t = o._workspace._activeTemplate;
      var rt = t._resource;
      var ts = rt.themes();
      var tc = ts.count();
      var xr = new TXmlNode();
      for(var ti = 0; ti < tc; ti++){
         var t = ts.get(ti);
         var ms = t.materials();
         var mc = ms.count();
         for(var mi = 0; mi < mc; mi++){
            var m = ms.value(mi);
            m.saveConfig(xr.create('Material'));
         }
      }
      MO.Console.find(FE3sTemplateConsole).update(xr);
   }
   MO.FDsShareTemplateToolBar_construct = function FDsShareTemplateToolBar_construct(){
      var o = this;
      o.__base.FDuiToolBar.construct.call(o);
   }
   MO.FDsShareTemplateToolBar_dispose = function FDsShareTemplateToolBar_dispose(){
      var o = this;
      o.__base.FDuiToolBar.dispose.call(o);
   }
}
with(MO){
   MO.FDsShareSceneCanvasToolBar = function FDsShareSceneCanvasToolBar(o){
      o = MO.Class.inherits(this, o, FDsSceneCanvasToolBar);
      o._frameName = 'resource.share.scene.CanvasToolBar';
      return o;
   }
}
with(MO){
   MO.FDsShareSceneCatalogToolBar = function FDsShareSceneCatalogToolBar(o){
      o = MO.Class.inherits(this, o, FDsSceneCatalogToolBar);
      o._frameName = 'resource.share.scene.CatalogToolBar';
      return o;
   }
}
with(MO){
   MO.FDsShareSceneFrameSet = function FDsShareSceneFrameSet(o){
      o = MO.Class.inherits(this, o, FDsSceneFrameSet);
      o._frameName = 'resource.share.scene.FrameSet';
      o.onBuilded  = FDsShareSceneFrameSet_onBuilded;
      return o;
   }
   MO.FDsShareSceneFrameSet_onBuilded = function FDsShareSceneFrameSet_onBuilded(event){
      var o = this;
      o.__base.FDsSceneFrameSet.onBuilded.call(o, event);
      var toolbar = o._catalogToolbar = MO.Class.create(FDsShareSceneCatalogToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCatalogToolBar.push(toolbar);
      var catalog = o._catalogContent = MO.Class.create(FDsSceneCatalogContent);
      catalog._frameSet = o;
      catalog.build(event);
      catalog.addSelectedListener(o, o.onCatalogSelected);
      o._frameCatalogContent.push(catalog);
      var toolbar = o._canvasToolbar = MO.Class.create(FDsShareSceneCanvasToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._frameCanvasToolBar.push(toolbar);
      var canvas = o._canvasContent = MO.Class.create(FDsSceneCanvasContent);
      canvas._frameSet = o;
      canvas._toolbar = o._canvasToolbar;
      canvas._hParent = o._frameCanvasContent._hPanel;
      canvas._hParent.style.backgroundColor = '#333333';
      canvas._hParent.style.scroll = 'auto';
      canvas.addLoadListener(o, o.onDataLoaded);
      canvas.build(event);
      o._frameCanvasContent.push(canvas);
      var toolbar = o._propertyToolbar = MO.Class.create(FDsScenePropertyToolBar);
      toolbar._frameSet = o;
      toolbar.buildDefine(event);
      o._framePropertyToolBar.push(toolbar);
   }
}
with(MO){
   MO.FDsShareSceneMenuBar = function FDsShareSceneMenuBar(o){
      o = MO.Class.inherits(this, o, FDsSceneMenuBar);
      o._frameName = 'resource.share.scene.MenuBar';
      o.onBuilded  = FDsShareSceneMenuBar_onBuilded;
      return o;
   }
   MO.FDsShareSceneMenuBar_onBuilded = function FDsShareSceneMenuBar_onBuilded(p){
      var o = this;
      o.__base.FDsSceneMenuBar.onBuilded.call(o, p);
      o._controlExecute.addClickListener(o, o.onExecuteClick);
   }
}
